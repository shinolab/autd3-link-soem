/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __MAC_15_2: u32 = 150200;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __IPHONE_18_2: u32 = 180200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __WATCHOS_11_2: u32 = 110200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __TVOS_18_2: u32 = 180200;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __BRIDGEOS_9_2: u32 = 90200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __DRIVERKIT_24_2: u32 = 240200;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const __VISIONOS_2_2: u32 = 20200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const MAC_OS_VERSION_15_2: u32 = 150200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150200;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const TIME_UTC: u32 = 1;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const EC_NOFRAME: i32 = -1;
pub const EC_OTHERFRAME: i32 = -2;
pub const EC_ERROR: i32 = -3;
pub const EC_SLAVECOUNTEXCEEDED: i32 = -4;
pub const EC_TIMEOUT: i32 = -5;
pub const EC_MAXECATFRAME: u32 = 1518;
pub const EC_MAXLRWDATA: u32 = 1486;
pub const EC_FIRSTDCDATAGRAM: u32 = 20;
pub const EC_BUFSIZE: u32 = 1518;
pub const EC_ECATTYPE: u32 = 4096;
pub const EC_MAXBUF: u32 = 16;
pub const EC_TIMEOUTRET: u32 = 2000;
pub const EC_TIMEOUTRET3: u32 = 6000;
pub const EC_TIMEOUTSAFE: u32 = 20000;
pub const EC_TIMEOUTEEP: u32 = 20000;
pub const EC_TIMEOUTTXM: u32 = 20000;
pub const EC_TIMEOUTRXM: u32 = 700000;
pub const EC_TIMEOUTSTATE: u32 = 2000000;
pub const EC_MAXEEPBITMAP: u32 = 128;
pub const EC_MAXEEPBUF: u32 = 4096;
pub const EC_DEFAULTRETRIES: u32 = 3;
pub const EC_LOGGROUPOFFSET: u32 = 16;
pub const EC_DATAGRAMFOLLOWS: u32 = 32768;
pub const EC_ESTAT_R64: u32 = 64;
pub const EC_ESTAT_BUSY: u32 = 32768;
pub const EC_ESTAT_EMASK: u32 = 30720;
pub const EC_ESTAT_NACK: u32 = 8192;
pub const ECT_SII_START: u32 = 64;
pub const ECT_SDO_SMCOMMTYPE: u32 = 7168;
pub const ECT_SDO_PDOASSIGN: u32 = 7184;
pub const ECT_SDO_RXPDOASSIGN: u32 = 7186;
pub const ECT_SDO_TXPDOASSIGN: u32 = 7187;
pub const ETH_P_ECAT: u32 = 34980;
pub const API_TO_BE_DEPRECATED: u32 = 100000;
pub const API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
pub const PRId8: &[u8; 4] = b"hhd\0";
pub const PRIi8: &[u8; 4] = b"hhi\0";
pub const PRIo8: &[u8; 4] = b"hho\0";
pub const PRIu8: &[u8; 4] = b"hhu\0";
pub const PRIx8: &[u8; 4] = b"hhx\0";
pub const PRIX8: &[u8; 4] = b"hhX\0";
pub const PRId16: &[u8; 3] = b"hd\0";
pub const PRIi16: &[u8; 3] = b"hi\0";
pub const PRIo16: &[u8; 3] = b"ho\0";
pub const PRIu16: &[u8; 3] = b"hu\0";
pub const PRIx16: &[u8; 3] = b"hx\0";
pub const PRIX16: &[u8; 3] = b"hX\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const PRIi64: &[u8; 4] = b"lli\0";
pub const PRIo64: &[u8; 4] = b"llo\0";
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRIx64: &[u8; 4] = b"llx\0";
pub const PRIX64: &[u8; 4] = b"llX\0";
pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
pub const PRIoFAST8: &[u8; 4] = b"hho\0";
pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
pub const PRIdFAST16: &[u8; 3] = b"hd\0";
pub const PRIiFAST16: &[u8; 3] = b"hi\0";
pub const PRIoFAST16: &[u8; 3] = b"ho\0";
pub const PRIuFAST16: &[u8; 3] = b"hu\0";
pub const PRIxFAST16: &[u8; 3] = b"hx\0";
pub const PRIXFAST16: &[u8; 3] = b"hX\0";
pub const PRIdFAST32: &[u8; 2] = b"d\0";
pub const PRIiFAST32: &[u8; 2] = b"i\0";
pub const PRIoFAST32: &[u8; 2] = b"o\0";
pub const PRIuFAST32: &[u8; 2] = b"u\0";
pub const PRIxFAST32: &[u8; 2] = b"x\0";
pub const PRIXFAST32: &[u8; 2] = b"X\0";
pub const PRIdFAST64: &[u8; 4] = b"lld\0";
pub const PRIiFAST64: &[u8; 4] = b"lli\0";
pub const PRIoFAST64: &[u8; 4] = b"llo\0";
pub const PRIuFAST64: &[u8; 4] = b"llu\0";
pub const PRIxFAST64: &[u8; 4] = b"llx\0";
pub const PRIXFAST64: &[u8; 4] = b"llX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"jd\0";
pub const PRIiMAX: &[u8; 3] = b"ji\0";
pub const PRIoMAX: &[u8; 3] = b"jo\0";
pub const PRIuMAX: &[u8; 3] = b"ju\0";
pub const PRIxMAX: &[u8; 3] = b"jx\0";
pub const PRIXMAX: &[u8; 3] = b"jX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNd64: &[u8; 4] = b"lld\0";
pub const SCNi64: &[u8; 4] = b"lli\0";
pub const SCNo64: &[u8; 4] = b"llo\0";
pub const SCNu64: &[u8; 4] = b"llu\0";
pub const SCNx64: &[u8; 4] = b"llx\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNdFAST16: &[u8; 3] = b"hd\0";
pub const SCNiFAST16: &[u8; 3] = b"hi\0";
pub const SCNoFAST16: &[u8; 3] = b"ho\0";
pub const SCNuFAST16: &[u8; 3] = b"hu\0";
pub const SCNxFAST16: &[u8; 3] = b"hx\0";
pub const SCNdFAST32: &[u8; 2] = b"d\0";
pub const SCNiFAST32: &[u8; 2] = b"i\0";
pub const SCNoFAST32: &[u8; 2] = b"o\0";
pub const SCNuFAST32: &[u8; 2] = b"u\0";
pub const SCNxFAST32: &[u8; 2] = b"x\0";
pub const SCNdFAST64: &[u8; 4] = b"lld\0";
pub const SCNiFAST64: &[u8; 4] = b"lli\0";
pub const SCNoFAST64: &[u8; 4] = b"llo\0";
pub const SCNuFAST64: &[u8; 4] = b"llu\0";
pub const SCNxFAST64: &[u8; 4] = b"llx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"jd\0";
pub const SCNiMAX: &[u8; 3] = b"ji\0";
pub const SCNoMAX: &[u8; 3] = b"jo\0";
pub const SCNuMAX: &[u8; 3] = b"ju\0";
pub const SCNxMAX: &[u8; 3] = b"jx\0";
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const DST_NONE: u32 = 0;
pub const DST_USA: u32 = 1;
pub const DST_AUST: u32 = 2;
pub const DST_WET: u32 = 3;
pub const DST_MET: u32 = 4;
pub const DST_EET: u32 = 5;
pub const DST_CAN: u32 = 6;
pub const KEV_INET_SUBCLASS: u32 = 1;
pub const KEV_INET_NEW_ADDR: u32 = 1;
pub const KEV_INET_CHANGED_ADDR: u32 = 2;
pub const KEV_INET_ADDR_DELETED: u32 = 3;
pub const KEV_INET_SIFDSTADDR: u32 = 4;
pub const KEV_INET_SIFBRDADDR: u32 = 5;
pub const KEV_INET_SIFNETMASK: u32 = 6;
pub const KEV_INET_ARPCOLLISION: u32 = 7;
pub const KEV_INET_PORTINUSE: u32 = 8;
pub const KEV_INET_ARPRTRFAILURE: u32 = 9;
pub const KEV_INET_ARPRTRALIVE: u32 = 10;
pub const KEV_DL_SUBCLASS: u32 = 2;
pub const KEV_DL_SIFFLAGS: u32 = 1;
pub const KEV_DL_SIFMETRICS: u32 = 2;
pub const KEV_DL_SIFMTU: u32 = 3;
pub const KEV_DL_SIFPHYS: u32 = 4;
pub const KEV_DL_SIFMEDIA: u32 = 5;
pub const KEV_DL_SIFGENERIC: u32 = 6;
pub const KEV_DL_ADDMULTI: u32 = 7;
pub const KEV_DL_DELMULTI: u32 = 8;
pub const KEV_DL_IF_ATTACHED: u32 = 9;
pub const KEV_DL_IF_DETACHING: u32 = 10;
pub const KEV_DL_IF_DETACHED: u32 = 11;
pub const KEV_DL_LINK_OFF: u32 = 12;
pub const KEV_DL_LINK_ON: u32 = 13;
pub const KEV_DL_PROTO_ATTACHED: u32 = 14;
pub const KEV_DL_PROTO_DETACHED: u32 = 15;
pub const KEV_DL_LINK_ADDRESS_CHANGED: u32 = 16;
pub const KEV_DL_WAKEFLAGS_CHANGED: u32 = 17;
pub const KEV_DL_IF_IDLE_ROUTE_REFCNT: u32 = 18;
pub const KEV_DL_IFCAP_CHANGED: u32 = 19;
pub const KEV_DL_LINK_QUALITY_METRIC_CHANGED: u32 = 20;
pub const KEV_DL_NODE_PRESENCE: u32 = 21;
pub const KEV_DL_NODE_ABSENCE: u32 = 22;
pub const KEV_DL_PRIMARY_ELECTED: u32 = 23;
pub const KEV_DL_ISSUES: u32 = 24;
pub const KEV_DL_IFDELEGATE_CHANGED: u32 = 25;
pub const KEV_DL_AWDL_RESTRICTED: u32 = 26;
pub const KEV_DL_AWDL_UNRESTRICTED: u32 = 27;
pub const KEV_DL_RRC_STATE_CHANGED: u32 = 28;
pub const KEV_DL_QOS_MODE_CHANGED: u32 = 29;
pub const KEV_DL_LOW_POWER_MODE_CHANGED: u32 = 30;
pub const KEV_INET6_SUBCLASS: u32 = 6;
pub const KEV_INET6_NEW_USER_ADDR: u32 = 1;
pub const KEV_INET6_CHANGED_ADDR: u32 = 2;
pub const KEV_INET6_ADDR_DELETED: u32 = 3;
pub const KEV_INET6_NEW_LL_ADDR: u32 = 4;
pub const KEV_INET6_NEW_RTADV_ADDR: u32 = 5;
pub const KEV_INET6_DEFROUTER: u32 = 6;
pub const KEV_INET6_REQUEST_NAT64_PREFIX: u32 = 7;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_LINGER_SEC: u32 = 4224;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_REUSEPORT: u32 = 512;
pub const SO_TIMESTAMP: u32 = 1024;
pub const SO_TIMESTAMP_MONOTONIC: u32 = 2048;
pub const SO_DONTTRUNC: u32 = 8192;
pub const SO_WANTMORE: u32 = 16384;
pub const SO_WANTOOBFLAG: u32 = 32768;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_LABEL: u32 = 4112;
pub const SO_PEERLABEL: u32 = 4113;
pub const SO_NREAD: u32 = 4128;
pub const SO_NKE: u32 = 4129;
pub const SO_NOSIGPIPE: u32 = 4130;
pub const SO_NOADDRERR: u32 = 4131;
pub const SO_NWRITE: u32 = 4132;
pub const SO_REUSESHAREUID: u32 = 4133;
pub const SO_NOTIFYCONFLICT: u32 = 4134;
pub const SO_UPCALLCLOSEWAIT: u32 = 4135;
pub const SO_RANDOMPORT: u32 = 4226;
pub const SO_NP_EXTENSIONS: u32 = 4227;
pub const SO_NUMRCVPKT: u32 = 4370;
pub const SO_NET_SERVICE_TYPE: u32 = 4374;
pub const SO_NETSVC_MARKING_LEVEL: u32 = 4377;
pub const SO_RESOLVER_SIGNATURE: u32 = 4401;
pub const SO_BINDTODEVICE: u32 = 4404;
pub const NET_SERVICE_TYPE_BE: u32 = 0;
pub const NET_SERVICE_TYPE_BK: u32 = 1;
pub const NET_SERVICE_TYPE_SIG: u32 = 2;
pub const NET_SERVICE_TYPE_VI: u32 = 3;
pub const NET_SERVICE_TYPE_VO: u32 = 4;
pub const NET_SERVICE_TYPE_RV: u32 = 5;
pub const NET_SERVICE_TYPE_AV: u32 = 6;
pub const NET_SERVICE_TYPE_OAM: u32 = 7;
pub const NET_SERVICE_TYPE_RD: u32 = 8;
pub const NETSVC_MRKNG_UNKNOWN: u32 = 0;
pub const NETSVC_MRKNG_LVL_L2: u32 = 1;
pub const NETSVC_MRKNG_LVL_L3L2_ALL: u32 = 2;
pub const NETSVC_MRKNG_LVL_L3L2_BK: u32 = 3;
pub const SAE_ASSOCID_ANY: u32 = 0;
pub const SAE_CONNID_ANY: u32 = 0;
pub const CONNECT_RESUME_ON_READ_WRITE: u32 = 1;
pub const CONNECT_DATA_IDEMPOTENT: u32 = 2;
pub const CONNECT_DATA_AUTHENTICATED: u32 = 4;
pub const SONPX_SETOPTSHUT: u32 = 1;
pub const SOL_SOCKET: u32 = 65535;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_LOCAL: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_ROUTE: u32 = 17;
pub const AF_LINK: u32 = 18;
pub const pseudo_AF_XTP: u32 = 19;
pub const AF_COIP: u32 = 20;
pub const AF_CNT: u32 = 21;
pub const pseudo_AF_RTIP: u32 = 22;
pub const AF_IPX: u32 = 23;
pub const AF_SIP: u32 = 24;
pub const pseudo_AF_PIP: u32 = 25;
pub const AF_NDRV: u32 = 27;
pub const AF_ISDN: u32 = 28;
pub const AF_E164: u32 = 28;
pub const pseudo_AF_KEY: u32 = 29;
pub const AF_INET6: u32 = 30;
pub const AF_NATM: u32 = 31;
pub const AF_SYSTEM: u32 = 32;
pub const AF_NETBIOS: u32 = 33;
pub const AF_PPP: u32 = 34;
pub const pseudo_AF_HDRCMPLT: u32 = 35;
pub const AF_RESERVED_36: u32 = 36;
pub const AF_IEEE80211: u32 = 37;
pub const AF_UTUN: u32 = 38;
pub const AF_VSOCK: u32 = 40;
pub const AF_MAX: u32 = 41;
pub const SOCK_MAXADDRLEN: u32 = 255;
pub const _SS_MAXSIZE: u32 = 128;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_ROUTE: u32 = 17;
pub const PF_LINK: u32 = 18;
pub const PF_XTP: u32 = 19;
pub const PF_COIP: u32 = 20;
pub const PF_CNT: u32 = 21;
pub const PF_SIP: u32 = 24;
pub const PF_IPX: u32 = 23;
pub const PF_RTIP: u32 = 22;
pub const PF_PIP: u32 = 25;
pub const PF_NDRV: u32 = 27;
pub const PF_ISDN: u32 = 28;
pub const PF_KEY: u32 = 29;
pub const PF_INET6: u32 = 30;
pub const PF_NATM: u32 = 31;
pub const PF_SYSTEM: u32 = 32;
pub const PF_NETBIOS: u32 = 33;
pub const PF_PPP: u32 = 34;
pub const PF_RESERVED_36: u32 = 36;
pub const PF_UTUN: u32 = 38;
pub const PF_VSOCK: u32 = 40;
pub const PF_MAX: u32 = 41;
pub const NET_MAXID: u32 = 41;
pub const NET_RT_DUMP: u32 = 1;
pub const NET_RT_FLAGS: u32 = 2;
pub const NET_RT_IFLIST: u32 = 3;
pub const NET_RT_STAT: u32 = 4;
pub const NET_RT_TRASH: u32 = 5;
pub const NET_RT_IFLIST2: u32 = 6;
pub const NET_RT_DUMP2: u32 = 7;
pub const NET_RT_FLAGS_PRIV: u32 = 10;
pub const NET_RT_MAXID: u32 = 11;
pub const SOMAXCONN: u32 = 128;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_EOR: u32 = 8;
pub const MSG_TRUNC: u32 = 16;
pub const MSG_CTRUNC: u32 = 32;
pub const MSG_WAITALL: u32 = 64;
pub const MSG_DONTWAIT: u32 = 128;
pub const MSG_EOF: u32 = 256;
pub const MSG_WAITSTREAM: u32 = 512;
pub const MSG_FLUSH: u32 = 1024;
pub const MSG_HOLD: u32 = 2048;
pub const MSG_SEND: u32 = 4096;
pub const MSG_HAVEMORE: u32 = 8192;
pub const MSG_RCVMORE: u32 = 16384;
pub const MSG_NEEDSA: u32 = 65536;
pub const MSG_NOSIGNAL: u32 = 524288;
pub const SCM_RIGHTS: u32 = 1;
pub const SCM_TIMESTAMP: u32 = 2;
pub const SCM_CREDS: u32 = 3;
pub const SCM_TIMESTAMP_MONOTONIC: u32 = 4;
pub const SHUT_RD: u32 = 0;
pub const SHUT_WR: u32 = 1;
pub const SHUT_RDWR: u32 = 2;
pub const IPPROTO_IP: u32 = 0;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_ICMP: u32 = 1;
pub const IPPROTO_IGMP: u32 = 2;
pub const IPPROTO_GGP: u32 = 3;
pub const IPPROTO_IPV4: u32 = 4;
pub const IPPROTO_IPIP: u32 = 4;
pub const IPPROTO_TCP: u32 = 6;
pub const IPPROTO_ST: u32 = 7;
pub const IPPROTO_EGP: u32 = 8;
pub const IPPROTO_PIGP: u32 = 9;
pub const IPPROTO_RCCMON: u32 = 10;
pub const IPPROTO_NVPII: u32 = 11;
pub const IPPROTO_PUP: u32 = 12;
pub const IPPROTO_ARGUS: u32 = 13;
pub const IPPROTO_EMCON: u32 = 14;
pub const IPPROTO_XNET: u32 = 15;
pub const IPPROTO_CHAOS: u32 = 16;
pub const IPPROTO_UDP: u32 = 17;
pub const IPPROTO_MUX: u32 = 18;
pub const IPPROTO_MEAS: u32 = 19;
pub const IPPROTO_HMP: u32 = 20;
pub const IPPROTO_PRM: u32 = 21;
pub const IPPROTO_IDP: u32 = 22;
pub const IPPROTO_TRUNK1: u32 = 23;
pub const IPPROTO_TRUNK2: u32 = 24;
pub const IPPROTO_LEAF1: u32 = 25;
pub const IPPROTO_LEAF2: u32 = 26;
pub const IPPROTO_RDP: u32 = 27;
pub const IPPROTO_IRTP: u32 = 28;
pub const IPPROTO_TP: u32 = 29;
pub const IPPROTO_BLT: u32 = 30;
pub const IPPROTO_NSP: u32 = 31;
pub const IPPROTO_INP: u32 = 32;
pub const IPPROTO_SEP: u32 = 33;
pub const IPPROTO_3PC: u32 = 34;
pub const IPPROTO_IDPR: u32 = 35;
pub const IPPROTO_XTP: u32 = 36;
pub const IPPROTO_DDP: u32 = 37;
pub const IPPROTO_CMTP: u32 = 38;
pub const IPPROTO_TPXX: u32 = 39;
pub const IPPROTO_IL: u32 = 40;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_SDRP: u32 = 42;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_IDRP: u32 = 45;
pub const IPPROTO_RSVP: u32 = 46;
pub const IPPROTO_GRE: u32 = 47;
pub const IPPROTO_MHRP: u32 = 48;
pub const IPPROTO_BHA: u32 = 49;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_INLSP: u32 = 52;
pub const IPPROTO_SWIPE: u32 = 53;
pub const IPPROTO_NHRP: u32 = 54;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_AHIP: u32 = 61;
pub const IPPROTO_CFTP: u32 = 62;
pub const IPPROTO_HELLO: u32 = 63;
pub const IPPROTO_SATEXPAK: u32 = 64;
pub const IPPROTO_KRYPTOLAN: u32 = 65;
pub const IPPROTO_RVD: u32 = 66;
pub const IPPROTO_IPPC: u32 = 67;
pub const IPPROTO_ADFS: u32 = 68;
pub const IPPROTO_SATMON: u32 = 69;
pub const IPPROTO_VISA: u32 = 70;
pub const IPPROTO_IPCV: u32 = 71;
pub const IPPROTO_CPNX: u32 = 72;
pub const IPPROTO_CPHB: u32 = 73;
pub const IPPROTO_WSN: u32 = 74;
pub const IPPROTO_PVP: u32 = 75;
pub const IPPROTO_BRSATMON: u32 = 76;
pub const IPPROTO_ND: u32 = 77;
pub const IPPROTO_WBMON: u32 = 78;
pub const IPPROTO_WBEXPAK: u32 = 79;
pub const IPPROTO_EON: u32 = 80;
pub const IPPROTO_VMTP: u32 = 81;
pub const IPPROTO_SVMTP: u32 = 82;
pub const IPPROTO_VINES: u32 = 83;
pub const IPPROTO_TTP: u32 = 84;
pub const IPPROTO_IGP: u32 = 85;
pub const IPPROTO_DGP: u32 = 86;
pub const IPPROTO_TCF: u32 = 87;
pub const IPPROTO_IGRP: u32 = 88;
pub const IPPROTO_OSPFIGP: u32 = 89;
pub const IPPROTO_SRPC: u32 = 90;
pub const IPPROTO_LARP: u32 = 91;
pub const IPPROTO_MTP: u32 = 92;
pub const IPPROTO_AX25: u32 = 93;
pub const IPPROTO_IPEIP: u32 = 94;
pub const IPPROTO_MICP: u32 = 95;
pub const IPPROTO_SCCSP: u32 = 96;
pub const IPPROTO_ETHERIP: u32 = 97;
pub const IPPROTO_ENCAP: u32 = 98;
pub const IPPROTO_APES: u32 = 99;
pub const IPPROTO_GMTP: u32 = 100;
pub const IPPROTO_PIM: u32 = 103;
pub const IPPROTO_IPCOMP: u32 = 108;
pub const IPPROTO_PGM: u32 = 113;
pub const IPPROTO_SCTP: u32 = 132;
pub const IPPROTO_DIVERT: u32 = 254;
pub const IPPROTO_RAW: u32 = 255;
pub const IPPROTO_MAX: u32 = 256;
pub const IPPROTO_DONE: u32 = 257;
pub const __DARWIN_IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_USERRESERVED: u32 = 5000;
pub const IPPORT_HIFIRSTAUTO: u32 = 49152;
pub const IPPORT_HILASTAUTO: u32 = 65535;
pub const IPPORT_RESERVEDSTART: u32 = 600;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_NONE: u32 = 4294967295;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_RECVOPTS: u32 = 5;
pub const IP_RECVRETOPTS: u32 = 6;
pub const IP_RECVDSTADDR: u32 = 7;
pub const IP_RETOPTS: u32 = 8;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_MULTICAST_VIF: u32 = 14;
pub const IP_RSVP_ON: u32 = 15;
pub const IP_RSVP_OFF: u32 = 16;
pub const IP_RSVP_VIF_ON: u32 = 17;
pub const IP_RSVP_VIF_OFF: u32 = 18;
pub const IP_PORTRANGE: u32 = 19;
pub const IP_RECVIF: u32 = 20;
pub const IP_IPSEC_POLICY: u32 = 21;
pub const IP_FAITH: u32 = 22;
pub const IP_STRIPHDR: u32 = 23;
pub const IP_RECVTTL: u32 = 24;
pub const IP_BOUND_IF: u32 = 25;
pub const IP_PKTINFO: u32 = 26;
pub const IP_RECVPKTINFO: u32 = 26;
pub const IP_RECVTOS: u32 = 27;
pub const IP_DONTFRAG: u32 = 28;
pub const IP_FW_ADD: u32 = 40;
pub const IP_FW_DEL: u32 = 41;
pub const IP_FW_FLUSH: u32 = 42;
pub const IP_FW_ZERO: u32 = 43;
pub const IP_FW_GET: u32 = 44;
pub const IP_FW_RESETLOG: u32 = 45;
pub const IP_OLD_FW_ADD: u32 = 50;
pub const IP_OLD_FW_DEL: u32 = 51;
pub const IP_OLD_FW_FLUSH: u32 = 52;
pub const IP_OLD_FW_ZERO: u32 = 53;
pub const IP_OLD_FW_GET: u32 = 54;
pub const IP_NAT__XXX: u32 = 55;
pub const IP_OLD_FW_RESETLOG: u32 = 56;
pub const IP_DUMMYNET_CONFIGURE: u32 = 60;
pub const IP_DUMMYNET_DEL: u32 = 61;
pub const IP_DUMMYNET_FLUSH: u32 = 62;
pub const IP_DUMMYNET_GET: u32 = 64;
pub const IP_TRAFFIC_MGT_BACKGROUND: u32 = 65;
pub const IP_MULTICAST_IFINDEX: u32 = 66;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 70;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 71;
pub const IP_BLOCK_SOURCE: u32 = 72;
pub const IP_UNBLOCK_SOURCE: u32 = 73;
pub const IP_MSFILTER: u32 = 74;
pub const MCAST_JOIN_GROUP: u32 = 80;
pub const MCAST_LEAVE_GROUP: u32 = 81;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 82;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 83;
pub const MCAST_BLOCK_SOURCE: u32 = 84;
pub const MCAST_UNBLOCK_SOURCE: u32 = 85;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MIN_MEMBERSHIPS: u32 = 31;
pub const IP_MAX_MEMBERSHIPS: u32 = 4095;
pub const IP_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IP_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IP_MAX_SOCK_MUTE_FILTER: u32 = 128;
pub const MCAST_UNDEFINED: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const MCAST_EXCLUDE: u32 = 2;
pub const IP_PORTRANGE_DEFAULT: u32 = 0;
pub const IP_PORTRANGE_HIGH: u32 = 1;
pub const IP_PORTRANGE_LOW: u32 = 2;
pub const IPPROTO_MAXID: u32 = 52;
pub const IPCTL_FORWARDING: u32 = 1;
pub const IPCTL_SENDREDIRECTS: u32 = 2;
pub const IPCTL_DEFTTL: u32 = 3;
pub const IPCTL_RTEXPIRE: u32 = 5;
pub const IPCTL_RTMINEXPIRE: u32 = 6;
pub const IPCTL_RTMAXCACHE: u32 = 7;
pub const IPCTL_SOURCEROUTE: u32 = 8;
pub const IPCTL_DIRECTEDBROADCAST: u32 = 9;
pub const IPCTL_INTRQMAXLEN: u32 = 10;
pub const IPCTL_INTRQDROPS: u32 = 11;
pub const IPCTL_STATS: u32 = 12;
pub const IPCTL_ACCEPTSOURCEROUTE: u32 = 13;
pub const IPCTL_FASTFORWARDING: u32 = 14;
pub const IPCTL_KEEPFAITH: u32 = 15;
pub const IPCTL_GIF_TTL: u32 = 16;
pub const IPCTL_MAXID: u32 = 17;
pub const __KAME_VERSION: &[u8; 18] = b"2009/apple-darwin\0";
pub const IPV6PORT_RESERVED: u32 = 1024;
pub const IPV6PORT_ANONMIN: u32 = 49152;
pub const IPV6PORT_ANONMAX: u32 = 65535;
pub const IPV6PORT_RESERVEDMIN: u32 = 600;
pub const IPV6PORT_RESERVEDMAX: u32 = 1023;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const __IPV6_ADDR_SCOPE_NODELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_INTFACELOCAL: u32 = 1;
pub const __IPV6_ADDR_SCOPE_LINKLOCAL: u32 = 2;
pub const __IPV6_ADDR_SCOPE_SITELOCAL: u32 = 5;
pub const __IPV6_ADDR_SCOPE_ORGLOCAL: u32 = 8;
pub const __IPV6_ADDR_SCOPE_GLOBAL: u32 = 14;
pub const IPV6_ADDR_MC_FLAGS_TRANSIENT: u32 = 16;
pub const IPV6_ADDR_MC_FLAGS_PREFIX: u32 = 32;
pub const IPV6_ADDR_MC_FLAGS_UNICAST_BASED: u32 = 48;
pub const IPV6_SOCKOPT_RESERVED1: u32 = 3;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_PORTRANGE: u32 = 14;
pub const ICMP6_FILTER: u32 = 18;
pub const IPV6_2292PKTINFO: u32 = 19;
pub const IPV6_2292HOPLIMIT: u32 = 20;
pub const IPV6_2292NEXTHOP: u32 = 21;
pub const IPV6_2292HOPOPTS: u32 = 22;
pub const IPV6_2292DSTOPTS: u32 = 23;
pub const IPV6_2292RTHDR: u32 = 24;
pub const IPV6_2292PKTOPTIONS: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_BINDV6ONLY: u32 = 27;
pub const IPV6_IPSEC_POLICY: u32 = 28;
pub const IPV6_FAITH: u32 = 29;
pub const IPV6_FW_ADD: u32 = 30;
pub const IPV6_FW_DEL: u32 = 31;
pub const IPV6_FW_FLUSH: u32 = 32;
pub const IPV6_FW_ZERO: u32 = 33;
pub const IPV6_FW_GET: u32 = 34;
pub const IPV6_RECVTCLASS: u32 = 35;
pub const IPV6_TCLASS: u32 = 36;
pub const IPV6_BOUND_IF: u32 = 125;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IPV6_DEFAULT_MULTICAST_HOPS: u32 = 1;
pub const IPV6_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IPV6_MIN_MEMBERSHIPS: u32 = 31;
pub const IPV6_MAX_MEMBERSHIPS: u32 = 4095;
pub const IPV6_MAX_GROUP_SRC_FILTER: u32 = 512;
pub const IPV6_MAX_SOCK_SRC_FILTER: u32 = 128;
pub const IPV6_PORTRANGE_DEFAULT: u32 = 0;
pub const IPV6_PORTRANGE_HIGH: u32 = 1;
pub const IPV6_PORTRANGE_LOW: u32 = 2;
pub const IPV6PROTO_MAXID: u32 = 104;
pub const IPV6CTL_FORWARDING: u32 = 1;
pub const IPV6CTL_SENDREDIRECTS: u32 = 2;
pub const IPV6CTL_DEFHLIM: u32 = 3;
pub const IPV6CTL_FORWSRCRT: u32 = 5;
pub const IPV6CTL_STATS: u32 = 6;
pub const IPV6CTL_MRTSTATS: u32 = 7;
pub const IPV6CTL_MRTPROTO: u32 = 8;
pub const IPV6CTL_MAXFRAGPACKETS: u32 = 9;
pub const IPV6CTL_SOURCECHECK: u32 = 10;
pub const IPV6CTL_SOURCECHECK_LOGINT: u32 = 11;
pub const IPV6CTL_ACCEPT_RTADV: u32 = 12;
pub const IPV6CTL_KEEPFAITH: u32 = 13;
pub const IPV6CTL_LOG_INTERVAL: u32 = 14;
pub const IPV6CTL_HDRNESTLIMIT: u32 = 15;
pub const IPV6CTL_DAD_COUNT: u32 = 16;
pub const IPV6CTL_AUTO_FLOWLABEL: u32 = 17;
pub const IPV6CTL_DEFMCASTHLIM: u32 = 18;
pub const IPV6CTL_GIF_HLIM: u32 = 19;
pub const IPV6CTL_KAME_VERSION: u32 = 20;
pub const IPV6CTL_USE_DEPRECATED: u32 = 21;
pub const IPV6CTL_RR_PRUNE: u32 = 22;
pub const IPV6CTL_V6ONLY: u32 = 24;
pub const IPV6CTL_RTEXPIRE: u32 = 25;
pub const IPV6CTL_RTMINEXPIRE: u32 = 26;
pub const IPV6CTL_RTMAXCACHE: u32 = 27;
pub const IPV6CTL_USETEMPADDR: u32 = 32;
pub const IPV6CTL_TEMPPLTIME: u32 = 33;
pub const IPV6CTL_TEMPVLTIME: u32 = 34;
pub const IPV6CTL_AUTO_LINKLOCAL: u32 = 35;
pub const IPV6CTL_RIP6STATS: u32 = 36;
pub const IPV6CTL_PREFER_TEMPADDR: u32 = 37;
pub const IPV6CTL_ADDRCTLPOLICY: u32 = 38;
pub const IPV6CTL_USE_DEFAULTZONE: u32 = 39;
pub const IPV6CTL_MAXFRAGS: u32 = 41;
pub const IPV6CTL_MCAST_PMTU: u32 = 44;
pub const IPV6CTL_NEIGHBORGCTHRESH: u32 = 46;
pub const IPV6CTL_MAXIFPREFIXES: u32 = 47;
pub const IPV6CTL_MAXIFDEFROUTERS: u32 = 48;
pub const IPV6CTL_MAXDYNROUTES: u32 = 49;
pub const ICMPV6CTL_ND6_ONLINKNSRFC4861: u32 = 50;
pub const IPV6CTL_ULA_USETEMPADDR: u32 = 51;
pub const IPV6CTL_MAXID: u32 = 51;
pub const _PATH_HEQUIV: &[u8; 17] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14] = b"/etc/networks\0";
pub const _PATH_PROTOCOLS: &[u8; 15] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14] = b"/etc/services\0";
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NO_ADDRESS: u32 = 4;
pub const EAI_ADDRFAMILY: u32 = 1;
pub const EAI_AGAIN: u32 = 2;
pub const EAI_BADFLAGS: u32 = 3;
pub const EAI_FAIL: u32 = 4;
pub const EAI_FAMILY: u32 = 5;
pub const EAI_MEMORY: u32 = 6;
pub const EAI_NODATA: u32 = 7;
pub const EAI_NONAME: u32 = 8;
pub const EAI_SERVICE: u32 = 9;
pub const EAI_SOCKTYPE: u32 = 10;
pub const EAI_SYSTEM: u32 = 11;
pub const EAI_BADHINTS: u32 = 12;
pub const EAI_PROTOCOL: u32 = 13;
pub const EAI_OVERFLOW: u32 = 14;
pub const EAI_MAX: u32 = 15;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 4096;
pub const AI_ALL: u32 = 256;
pub const AI_V4MAPPED_CFG: u32 = 512;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_DEFAULT: u32 = 1536;
pub const AI_UNUSABLE: u32 = 268435456;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_NUMERICSCOPE: u32 = 256;
pub const NI_DGRAM: u32 = 16;
pub const NI_WITHSCOPEID: u32 = 32;
pub const SCOPE_DELIMITER: u8 = 37u8;
pub const INVALID_SOCKET: i32 = -1;
pub const DLT_NULL: u32 = 0;
pub const DLT_EN10MB: u32 = 1;
pub const DLT_EN3MB: u32 = 2;
pub const DLT_AX25: u32 = 3;
pub const DLT_PRONET: u32 = 4;
pub const DLT_CHAOS: u32 = 5;
pub const DLT_IEEE802: u32 = 6;
pub const DLT_ARCNET: u32 = 7;
pub const DLT_SLIP: u32 = 8;
pub const DLT_PPP: u32 = 9;
pub const DLT_FDDI: u32 = 10;
pub const DLT_ATM_RFC1483: u32 = 11;
pub const DLT_RAW: u32 = 12;
pub const DLT_SLIP_BSDOS: u32 = 15;
pub const DLT_PPP_BSDOS: u32 = 16;
pub const DLT_PFSYNC: u32 = 18;
pub const DLT_ATM_CLIP: u32 = 19;
pub const DLT_REDBACK_SMARTEDGE: u32 = 32;
pub const DLT_PPP_SERIAL: u32 = 50;
pub const DLT_PPP_ETHER: u32 = 51;
pub const DLT_SYMANTEC_FIREWALL: u32 = 99;
pub const DLT_MATCHING_MIN: u32 = 104;
pub const DLT_C_HDLC: u32 = 104;
pub const DLT_CHDLC: u32 = 104;
pub const DLT_IEEE802_11: u32 = 105;
pub const DLT_FRELAY: u32 = 107;
pub const DLT_LOOP: u32 = 108;
pub const DLT_ENC: u32 = 109;
pub const DLT_LINUX_SLL: u32 = 113;
pub const DLT_LTALK: u32 = 114;
pub const DLT_ECONET: u32 = 115;
pub const DLT_IPFILTER: u32 = 116;
pub const DLT_PFLOG: u32 = 117;
pub const DLT_CISCO_IOS: u32 = 118;
pub const DLT_PRISM_HEADER: u32 = 119;
pub const DLT_AIRONET_HEADER: u32 = 120;
pub const DLT_HHDLC: u32 = 121;
pub const DLT_IP_OVER_FC: u32 = 122;
pub const DLT_SUNATM: u32 = 123;
pub const DLT_RIO: u32 = 124;
pub const DLT_PCI_EXP: u32 = 125;
pub const DLT_AURORA: u32 = 126;
pub const DLT_IEEE802_11_RADIO: u32 = 127;
pub const DLT_TZSP: u32 = 128;
pub const DLT_ARCNET_LINUX: u32 = 129;
pub const DLT_JUNIPER_MLPPP: u32 = 130;
pub const DLT_JUNIPER_MLFR: u32 = 131;
pub const DLT_JUNIPER_ES: u32 = 132;
pub const DLT_JUNIPER_GGSN: u32 = 133;
pub const DLT_JUNIPER_MFR: u32 = 134;
pub const DLT_JUNIPER_ATM2: u32 = 135;
pub const DLT_JUNIPER_SERVICES: u32 = 136;
pub const DLT_JUNIPER_ATM1: u32 = 137;
pub const DLT_APPLE_IP_OVER_IEEE1394: u32 = 138;
pub const DLT_MTP2_WITH_PHDR: u32 = 139;
pub const DLT_MTP2: u32 = 140;
pub const DLT_MTP3: u32 = 141;
pub const DLT_SCCP: u32 = 142;
pub const DLT_DOCSIS: u32 = 143;
pub const DLT_LINUX_IRDA: u32 = 144;
pub const DLT_IBM_SP: u32 = 145;
pub const DLT_IBM_SN: u32 = 146;
pub const DLT_USER0: u32 = 147;
pub const DLT_USER1: u32 = 148;
pub const DLT_USER2: u32 = 149;
pub const DLT_USER3: u32 = 150;
pub const DLT_USER4: u32 = 151;
pub const DLT_USER5: u32 = 152;
pub const DLT_USER6: u32 = 153;
pub const DLT_USER7: u32 = 154;
pub const DLT_USER8: u32 = 155;
pub const DLT_USER9: u32 = 156;
pub const DLT_USER10: u32 = 157;
pub const DLT_USER11: u32 = 158;
pub const DLT_USER12: u32 = 159;
pub const DLT_USER13: u32 = 160;
pub const DLT_USER14: u32 = 161;
pub const DLT_USER15: u32 = 162;
pub const DLT_PCAPNG: u32 = 151;
pub const DLT_IEEE802_11_RADIO_AVS: u32 = 163;
pub const DLT_JUNIPER_MONITOR: u32 = 164;
pub const DLT_BACNET_MS_TP: u32 = 165;
pub const DLT_PPP_PPPD: u32 = 166;
pub const DLT_PPP_WITH_DIRECTION: u32 = 166;
pub const DLT_LINUX_PPP_WITHDIRECTION: u32 = 166;
pub const DLT_JUNIPER_PPPOE: u32 = 167;
pub const DLT_JUNIPER_PPPOE_ATM: u32 = 168;
pub const DLT_GPRS_LLC: u32 = 169;
pub const DLT_GPF_T: u32 = 170;
pub const DLT_GPF_F: u32 = 171;
pub const DLT_GCOM_T1E1: u32 = 172;
pub const DLT_GCOM_SERIAL: u32 = 173;
pub const DLT_JUNIPER_PIC_PEER: u32 = 174;
pub const DLT_ERF_ETH: u32 = 175;
pub const DLT_ERF_POS: u32 = 176;
pub const DLT_LINUX_LAPD: u32 = 177;
pub const DLT_JUNIPER_ETHER: u32 = 178;
pub const DLT_JUNIPER_PPP: u32 = 179;
pub const DLT_JUNIPER_FRELAY: u32 = 180;
pub const DLT_JUNIPER_CHDLC: u32 = 181;
pub const DLT_MFR: u32 = 182;
pub const DLT_JUNIPER_VP: u32 = 183;
pub const DLT_A429: u32 = 184;
pub const DLT_A653_ICM: u32 = 185;
pub const DLT_USB_FREEBSD: u32 = 186;
pub const DLT_USB: u32 = 186;
pub const DLT_BLUETOOTH_HCI_H4: u32 = 187;
pub const DLT_IEEE802_16_MAC_CPS: u32 = 188;
pub const DLT_USB_LINUX: u32 = 189;
pub const DLT_CAN20B: u32 = 190;
pub const DLT_IEEE802_15_4_LINUX: u32 = 191;
pub const DLT_PPI: u32 = 192;
pub const DLT_IEEE802_16_MAC_CPS_RADIO: u32 = 193;
pub const DLT_JUNIPER_ISM: u32 = 194;
pub const DLT_IEEE802_15_4_WITHFCS: u32 = 195;
pub const DLT_IEEE802_15_4: u32 = 195;
pub const DLT_SITA: u32 = 196;
pub const DLT_ERF: u32 = 197;
pub const DLT_RAIF1: u32 = 198;
pub const DLT_IPMB_KONTRON: u32 = 199;
pub const DLT_JUNIPER_ST: u32 = 200;
pub const DLT_BLUETOOTH_HCI_H4_WITH_PHDR: u32 = 201;
pub const DLT_AX25_KISS: u32 = 202;
pub const DLT_LAPD: u32 = 203;
pub const DLT_PPP_WITH_DIR: u32 = 204;
pub const DLT_C_HDLC_WITH_DIR: u32 = 205;
pub const DLT_FRELAY_WITH_DIR: u32 = 206;
pub const DLT_LAPB_WITH_DIR: u32 = 207;
pub const DLT_IPMB_LINUX: u32 = 209;
pub const DLT_FLEXRAY: u32 = 210;
pub const DLT_MOST: u32 = 211;
pub const DLT_LIN: u32 = 212;
pub const DLT_X2E_SERIAL: u32 = 213;
pub const DLT_X2E_XORAYA: u32 = 214;
pub const DLT_IEEE802_15_4_NONASK_PHY: u32 = 215;
pub const DLT_LINUX_EVDEV: u32 = 216;
pub const DLT_GSMTAP_UM: u32 = 217;
pub const DLT_GSMTAP_ABIS: u32 = 218;
pub const DLT_MPLS: u32 = 219;
pub const DLT_USB_LINUX_MMAPPED: u32 = 220;
pub const DLT_DECT: u32 = 221;
pub const DLT_AOS: u32 = 222;
pub const DLT_WIHART: u32 = 223;
pub const DLT_FC_2: u32 = 224;
pub const DLT_FC_2_WITH_FRAME_DELIMS: u32 = 225;
pub const DLT_IPNET: u32 = 226;
pub const DLT_CAN_SOCKETCAN: u32 = 227;
pub const DLT_IPV4: u32 = 228;
pub const DLT_IPV6: u32 = 229;
pub const DLT_IEEE802_15_4_NOFCS: u32 = 230;
pub const DLT_DBUS: u32 = 231;
pub const DLT_JUNIPER_VS: u32 = 232;
pub const DLT_JUNIPER_SRX_E2E: u32 = 233;
pub const DLT_JUNIPER_FIBRECHANNEL: u32 = 234;
pub const DLT_DVB_CI: u32 = 235;
pub const DLT_MUX27010: u32 = 236;
pub const DLT_STANAG_5066_D_PDU: u32 = 237;
pub const DLT_JUNIPER_ATM_CEMIC: u32 = 238;
pub const DLT_NFLOG: u32 = 239;
pub const DLT_NETANALYZER: u32 = 240;
pub const DLT_NETANALYZER_TRANSPARENT: u32 = 241;
pub const DLT_IPOIB: u32 = 242;
pub const DLT_MPEG_2_TS: u32 = 243;
pub const DLT_NG40: u32 = 244;
pub const DLT_NFC_LLCP: u32 = 245;
pub const DLT_INFINIBAND: u32 = 247;
pub const DLT_SCTP: u32 = 248;
pub const DLT_USBPCAP: u32 = 249;
pub const DLT_RTAC_SERIAL: u32 = 250;
pub const DLT_BLUETOOTH_LE_LL: u32 = 251;
pub const DLT_WIRESHARK_UPPER_PDU: u32 = 252;
pub const DLT_NETLINK: u32 = 253;
pub const DLT_BLUETOOTH_LINUX_MONITOR: u32 = 254;
pub const DLT_BLUETOOTH_BREDR_BB: u32 = 255;
pub const DLT_BLUETOOTH_LE_LL_WITH_PHDR: u32 = 256;
pub const DLT_PROFIBUS_DL: u32 = 257;
pub const DLT_PKTAP: u32 = 149;
pub const DLT_EPON: u32 = 259;
pub const DLT_IPMI_HPM_2: u32 = 260;
pub const DLT_ZWAVE_R1_R2: u32 = 261;
pub const DLT_ZWAVE_R3: u32 = 262;
pub const DLT_WATTSTOPPER_DLM: u32 = 263;
pub const DLT_ISO_14443: u32 = 264;
pub const DLT_RDS: u32 = 265;
pub const DLT_USB_DARWIN: u32 = 266;
pub const DLT_OPENFLOW: u32 = 267;
pub const DLT_SDLC: u32 = 268;
pub const DLT_TI_LLN_SNIFFER: u32 = 269;
pub const DLT_LORATAP: u32 = 270;
pub const DLT_VSOCK: u32 = 271;
pub const DLT_NORDIC_BLE: u32 = 272;
pub const DLT_DOCSIS31_XRA31: u32 = 273;
pub const DLT_ETHERNET_MPACKET: u32 = 274;
pub const DLT_DISPLAYPORT_AUX: u32 = 275;
pub const DLT_LINUX_SLL2: u32 = 276;
pub const DLT_SERCOS_MONITOR: u32 = 277;
pub const DLT_OPENVIZSLA: u32 = 278;
pub const DLT_EBHSCR: u32 = 279;
pub const DLT_VPP_DISPATCH: u32 = 280;
pub const DLT_DSA_TAG_BRCM: u32 = 281;
pub const DLT_DSA_TAG_BRCM_PREPEND: u32 = 282;
pub const DLT_IEEE802_15_4_TAP: u32 = 283;
pub const DLT_DSA_TAG_DSA: u32 = 284;
pub const DLT_DSA_TAG_EDSA: u32 = 285;
pub const DLT_ELEE: u32 = 286;
pub const DLT_Z_WAVE_SERIAL: u32 = 287;
pub const DLT_USB_2_0: u32 = 288;
pub const DLT_ATSC_ALP: u32 = 289;
pub const DLT_MATCHING_MAX: u32 = 289;
pub const DLT_CLASS_NETBSD_RAWAF: u32 = 35913728;
pub const BPF_RELEASE: u32 = 199606;
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_MOD: u32 = 144;
pub const BPF_XOR: u32 = 160;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_A: u32 = 16;
pub const BPF_TAX: u32 = 0;
pub const BPF_TXA: u32 = 128;
pub const BPF_MEMWORDS: u32 = 16;
pub const USE_CLANG_STDARG: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const PCAP_VERSION_MAJOR: u32 = 2;
pub const PCAP_VERSION_MINOR: u32 = 4;
pub const PCAP_ERRBUF_SIZE: u32 = 256;
pub const HAS_PCAP_D_NONE: u32 = 1;
pub const PCAP_IF_LOOPBACK: u32 = 1;
pub const PCAP_IF_UP: u32 = 2;
pub const PCAP_IF_RUNNING: u32 = 4;
pub const PCAP_IF_WIRELESS: u32 = 8;
pub const PCAP_IF_CONNECTION_STATUS: u32 = 48;
pub const PCAP_IF_CONNECTION_STATUS_UNKNOWN: u32 = 0;
pub const PCAP_IF_CONNECTION_STATUS_CONNECTED: u32 = 16;
pub const PCAP_IF_CONNECTION_STATUS_DISCONNECTED: u32 = 32;
pub const PCAP_IF_CONNECTION_STATUS_NOT_APPLICABLE: u32 = 48;
pub const PCAP_ERROR: i32 = -1;
pub const PCAP_ERROR_BREAK: i32 = -2;
pub const PCAP_ERROR_NOT_ACTIVATED: i32 = -3;
pub const PCAP_ERROR_ACTIVATED: i32 = -4;
pub const PCAP_ERROR_NO_SUCH_DEVICE: i32 = -5;
pub const PCAP_ERROR_RFMON_NOTSUP: i32 = -6;
pub const PCAP_ERROR_NOT_RFMON: i32 = -7;
pub const PCAP_ERROR_PERM_DENIED: i32 = -8;
pub const PCAP_ERROR_IFACE_NOT_UP: i32 = -9;
pub const PCAP_ERROR_CANTSET_TSTAMP_TYPE: i32 = -10;
pub const PCAP_ERROR_PROMISC_PERM_DENIED: i32 = -11;
pub const PCAP_ERROR_TSTAMP_PRECISION_NOTSUP: i32 = -12;
pub const PCAP_WARNING: u32 = 1;
pub const PCAP_WARNING_PROMISC_NOTSUP: u32 = 2;
pub const PCAP_WARNING_TSTAMP_TYPE_NOTSUP: u32 = 3;
pub const PCAP_NETMASK_UNKNOWN: u32 = 4294967295;
pub const PCAP_CHAR_ENC_LOCAL: u32 = 0;
pub const PCAP_CHAR_ENC_UTF_8: u32 = 1;
pub const PCAP_TSTAMP_HOST: u32 = 0;
pub const PCAP_TSTAMP_HOST_LOWPREC: u32 = 1;
pub const PCAP_TSTAMP_HOST_HIPREC: u32 = 2;
pub const PCAP_TSTAMP_ADAPTER: u32 = 3;
pub const PCAP_TSTAMP_ADAPTER_UNSYNCED: u32 = 4;
pub const PCAP_TSTAMP_HOST_HIPREC_UNSYNCED: u32 = 5;
pub const PCAP_TSTAMP_PRECISION_MICRO: u32 = 0;
pub const PCAP_TSTAMP_PRECISION_NANO: u32 = 1;
pub const PCAP_BUF_SIZE: u32 = 1024;
pub const PCAP_SRC_FILE: u32 = 2;
pub const PCAP_SRC_IFLOCAL: u32 = 3;
pub const PCAP_SRC_IFREMOTE: u32 = 4;
pub const PCAP_SRC_FILE_STRING: &[u8; 8] = b"file://\0";
pub const PCAP_SRC_IF_STRING: &[u8; 9] = b"rpcap://\0";
pub const PCAP_OPENFLAG_PROMISCUOUS: u32 = 1;
pub const PCAP_OPENFLAG_DATATX_UDP: u32 = 2;
pub const PCAP_OPENFLAG_NOCAPTURE_RPCAP: u32 = 4;
pub const PCAP_OPENFLAG_NOCAPTURE_LOCAL: u32 = 8;
pub const PCAP_OPENFLAG_MAX_RESPONSIVENESS: u32 = 16;
pub const RPCAP_RMTAUTH_NULL: u32 = 0;
pub const RPCAP_RMTAUTH_PWD: u32 = 1;
pub const PCAP_SAMP_NOSAMP: u32 = 0;
pub const PCAP_SAMP_1_EVERY_N: u32 = 1;
pub const PCAP_SAMP_FIRST_AFTER_N_MS: u32 = 2;
pub const RPCAP_HOSTLIST_SIZE: u32 = 1024;
pub const EC_MAXELIST: u32 = 64;
pub const EC_MAXNAME: u32 = 40;
pub const EC_MAXSLAVE: u32 = 200;
pub const EC_MAXGROUP: u32 = 2;
pub const EC_MAXIOSEGMENTS: u32 = 64;
pub const EC_MAXMBX: u32 = 1486;
pub const EC_MAXEEPDO: u32 = 512;
pub const EC_MAXSM: u32 = 8;
pub const EC_MAXFMMU: u32 = 4;
pub const EC_MAXLEN_ADAPTERNAME: u32 = 128;
pub const EC_MAX_MAPT: u32 = 1;
pub const ECT_MBXPROT_AOE: u32 = 1;
pub const ECT_MBXPROT_EOE: u32 = 2;
pub const ECT_MBXPROT_COE: u32 = 4;
pub const ECT_MBXPROT_FOE: u32 = 8;
pub const ECT_MBXPROT_SOE: u32 = 16;
pub const ECT_MBXPROT_VOE: u32 = 32;
pub const ECT_COEDET_SDO: u32 = 1;
pub const ECT_COEDET_SDOINFO: u32 = 2;
pub const ECT_COEDET_PDOASSIGN: u32 = 4;
pub const ECT_COEDET_PDOCONFIG: u32 = 8;
pub const ECT_COEDET_UPLOAD: u32 = 16;
pub const ECT_COEDET_SDOCA: u32 = 32;
pub const EC_SMENABLEMASK: u32 = 4294901759;
pub const EC_MAXODLIST: u32 = 1024;
pub const EC_MAXOELIST: u32 = 256;
pub const EC_SOE_DATASTATE_B: u32 = 1;
pub const EC_SOE_NAME_B: u32 = 2;
pub const EC_SOE_ATTRIBUTE_B: u32 = 4;
pub const EC_SOE_UNIT_B: u32 = 8;
pub const EC_SOE_MIN_B: u32 = 16;
pub const EC_SOE_MAX_B: u32 = 32;
pub const EC_SOE_VALUE_B: u32 = 64;
pub const EC_SOE_DEFAULT_B: u32 = 128;
pub const EC_SOE_MAXNAME: u32 = 60;
pub const EC_SOE_MAXMAPPING: u32 = 64;
pub const EC_IDN_MDTCONFIG: u32 = 24;
pub const EC_IDN_ATCONFIG: u32 = 16;
pub const EC_SOE_LENGTH_1: u32 = 0;
pub const EC_SOE_LENGTH_2: u32 = 1;
pub const EC_SOE_LENGTH_4: u32 = 2;
pub const EC_SOE_LENGTH_8: u32 = 3;
pub const EC_SOE_TYPE_BINARY: u32 = 0;
pub const EC_SOE_TYPE_UINT: u32 = 1;
pub const EC_SOE_TYPE_INT: u32 = 2;
pub const EC_SOE_TYPE_HEX: u32 = 3;
pub const EC_SOE_TYPE_STRING: u32 = 4;
pub const EC_SOE_TYPE_IDN: u32 = 5;
pub const EC_SOE_TYPE_FLOAT: u32 = 6;
pub const EC_SOE_TYPE_PARAMETER: u32 = 7;
pub const EOE_DNS_NAME_LENGTH: u32 = 32;
pub const EOE_ETHADDR_LENGTH: u32 = 6;
pub const EOE_HDR_FRAME_TYPE_OFFSET: u32 = 0;
pub const EOE_HDR_FRAME_TYPE: u32 = 15;
pub const EOE_HDR_FRAME_PORT_OFFSET: u32 = 4;
pub const EOE_HDR_FRAME_PORT: u32 = 240;
pub const EOE_HDR_LAST_FRAGMENT_OFFSET: u32 = 8;
pub const EOE_HDR_LAST_FRAGMENT: u32 = 256;
pub const EOE_HDR_TIME_APPEND_OFFSET: u32 = 9;
pub const EOE_HDR_TIME_APPEND: u32 = 512;
pub const EOE_HDR_TIME_REQUEST_OFFSET: u32 = 10;
pub const EOE_HDR_TIME_REQUEST: u32 = 1024;
pub const EOE_HDR_FRAG_NO_OFFSET: u32 = 0;
pub const EOE_HDR_FRAG_NO: u32 = 63;
pub const EOE_HDR_FRAME_OFFSET_OFFSET: u32 = 6;
pub const EOE_HDR_FRAME_OFFSET: u32 = 4032;
pub const EOE_HDR_FRAME_NO_OFFSET: u32 = 12;
pub const EOE_HDR_FRAME_NO: u32 = 61440;
pub const EOE_PARAM_OFFSET: u32 = 4;
pub const EOE_PARAM_MAC_INCLUDE: u32 = 1;
pub const EOE_PARAM_IP_INCLUDE: u32 = 2;
pub const EOE_PARAM_SUBNET_IP_INCLUDE: u32 = 4;
pub const EOE_PARAM_DEFAULT_GATEWAY_INCLUDE: u32 = 8;
pub const EOE_PARAM_DNS_IP_INCLUDE: u32 = 16;
pub const EOE_PARAM_DNS_NAME_INCLUDE: u32 = 32;
pub const EOE_FRAG_DATA: u32 = 0;
pub const EOE_INIT_RESP_TIMESTAMP: u32 = 1;
pub const EOE_INIT_REQ: u32 = 2;
pub const EOE_INIT_RESP: u32 = 3;
pub const EOE_SET_ADDR_FILTER_REQ: u32 = 4;
pub const EOE_SET_ADDR_FILTER_RESP: u32 = 5;
pub const EOE_GET_IP_PARAM_REQ: u32 = 6;
pub const EOE_GET_IP_PARAM_RESP: u32 = 7;
pub const EOE_GET_ADDR_FILTER_REQ: u32 = 8;
pub const EOE_GET_ADDR_FILTER_RESP: u32 = 9;
pub const EOE_RESULT_SUCCESS: u32 = 0;
pub const EOE_RESULT_UNSPECIFIED_ERROR: u32 = 1;
pub const EOE_RESULT_UNSUPPORTED_FRAME_TYPE: u32 = 2;
pub const EOE_RESULT_NO_IP_SUPPORT: u32 = 513;
pub const EOE_RESULT_NO_DHCP_SUPPORT: u32 = 514;
pub const EOE_RESULT_NO_FILTER_SUPPORT: u32 = 1025;
pub const EC_NODEOFFSET: u32 = 4096;
pub const EC_TEMPNODE: u32 = 65535;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 8usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
    ["Offset of field: sched_param::__opaque"]
        [::std::mem::offset_of!(sched_param, __opaque) - 4usize];
};
unsafe extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
unsafe extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
unsafe extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
unsafe extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
unsafe extern "C" {
    pub fn tzset();
}
unsafe extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
unsafe extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn tzsetwall();
}
unsafe extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
unsafe extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
unsafe extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
unsafe extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type pthread_attr_t = __darwin_pthread_attr_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub const QOS_CLASS_USER_INTERACTIVE: _bindgen_ty_1 = 33;
pub const QOS_CLASS_USER_INITIATED: _bindgen_ty_1 = 25;
pub const QOS_CLASS_DEFAULT: _bindgen_ty_1 = 21;
pub const QOS_CLASS_UTILITY: _bindgen_ty_1 = 17;
pub const QOS_CLASS_BACKGROUND: _bindgen_ty_1 = 9;
pub const QOS_CLASS_UNSPECIFIED: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type qos_class_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
unsafe extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
unsafe extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
unsafe extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
unsafe extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
pub type sigset_t = __darwin_sigset_t;
unsafe extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
unsafe extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_self() -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_testcancel();
}
unsafe extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
unsafe extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
unsafe extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
unsafe extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_yield_np();
}
unsafe extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
unsafe extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type boolean = u8;
pub type int8 = i8;
pub type int16 = i16;
pub type int32 = i32;
pub type uint8 = u8;
pub type uint16 = u16;
pub type uint32 = u32;
pub type int64 = i64;
pub type uint64 = u64;
pub type float32 = f32;
pub type float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_timet {
    pub sec: uint32,
    pub usec: uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_timet"][::std::mem::size_of::<ec_timet>() - 8usize];
    ["Alignment of ec_timet"][::std::mem::align_of::<ec_timet>() - 4usize];
    ["Offset of field: ec_timet::sec"][::std::mem::offset_of!(ec_timet, sec) - 0usize];
    ["Offset of field: ec_timet::usec"][::std::mem::offset_of!(ec_timet, usec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osal_timer {
    pub stop_time: ec_timet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osal_timer"][::std::mem::size_of::<osal_timer>() - 8usize];
    ["Alignment of osal_timer"][::std::mem::align_of::<osal_timer>() - 4usize];
    ["Offset of field: osal_timer::stop_time"]
        [::std::mem::offset_of!(osal_timer, stop_time) - 0usize];
};
pub type osal_timert = osal_timer;
unsafe extern "C" {
    pub fn osal_timer_start(self_: *mut osal_timert, timeout_us: uint32);
}
unsafe extern "C" {
    pub fn osal_timer_is_expired(self_: *mut osal_timert) -> boolean;
}
unsafe extern "C" {
    pub fn osal_usleep(usec: uint32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn osal_current_time() -> ec_timet;
}
unsafe extern "C" {
    pub fn osal_time_diff(start: *mut ec_timet, end: *mut ec_timet, diff: *mut ec_timet);
}
unsafe extern "C" {
    pub fn osal_thread_create(
        thandle: *mut ::std::os::raw::c_void,
        stacksize: ::std::os::raw::c_int,
        func: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn osal_thread_create_rt(
        thandle: *mut ::std::os::raw::c_void,
        stacksize: ::std::os::raw::c_int,
        func: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[doc = " definition for frame buffers"]
pub type ec_bufT = [uint8; 1518usize];
#[doc = " ethernet header definition"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_etherheadert {
    #[doc = " destination MAC"]
    pub da0: uint16,
    #[doc = " destination MAC"]
    pub da1: uint16,
    #[doc = " destination MAC"]
    pub da2: uint16,
    #[doc = " source MAC"]
    pub sa0: uint16,
    #[doc = " source MAC"]
    pub sa1: uint16,
    #[doc = " source MAC"]
    pub sa2: uint16,
    #[doc = " ethernet type"]
    pub etype: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_etherheadert"][::std::mem::size_of::<ec_etherheadert>() - 14usize];
    ["Alignment of ec_etherheadert"][::std::mem::align_of::<ec_etherheadert>() - 1usize];
    ["Offset of field: ec_etherheadert::da0"]
        [::std::mem::offset_of!(ec_etherheadert, da0) - 0usize];
    ["Offset of field: ec_etherheadert::da1"]
        [::std::mem::offset_of!(ec_etherheadert, da1) - 2usize];
    ["Offset of field: ec_etherheadert::da2"]
        [::std::mem::offset_of!(ec_etherheadert, da2) - 4usize];
    ["Offset of field: ec_etherheadert::sa0"]
        [::std::mem::offset_of!(ec_etherheadert, sa0) - 6usize];
    ["Offset of field: ec_etherheadert::sa1"]
        [::std::mem::offset_of!(ec_etherheadert, sa1) - 8usize];
    ["Offset of field: ec_etherheadert::sa2"]
        [::std::mem::offset_of!(ec_etherheadert, sa2) - 10usize];
    ["Offset of field: ec_etherheadert::etype"]
        [::std::mem::offset_of!(ec_etherheadert, etype) - 12usize];
};
#[doc = " EtherCAT datagram header definition"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_comt {
    #[doc = " length of EtherCAT datagram"]
    pub elength: uint16,
    #[doc = " EtherCAT command, see ec_cmdtype"]
    pub command: uint8,
    #[doc = " index, used in SOEM for Tx to Rx recombination"]
    pub index: uint8,
    #[doc = " ADP"]
    pub ADP: uint16,
    #[doc = " ADO"]
    pub ADO: uint16,
    #[doc = " length of data portion in datagram"]
    pub dlength: uint16,
    #[doc = " interrupt, currently unused"]
    pub irpt: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_comt"][::std::mem::size_of::<ec_comt>() - 12usize];
    ["Alignment of ec_comt"][::std::mem::align_of::<ec_comt>() - 1usize];
    ["Offset of field: ec_comt::elength"][::std::mem::offset_of!(ec_comt, elength) - 0usize];
    ["Offset of field: ec_comt::command"][::std::mem::offset_of!(ec_comt, command) - 2usize];
    ["Offset of field: ec_comt::index"][::std::mem::offset_of!(ec_comt, index) - 3usize];
    ["Offset of field: ec_comt::ADP"][::std::mem::offset_of!(ec_comt, ADP) - 4usize];
    ["Offset of field: ec_comt::ADO"][::std::mem::offset_of!(ec_comt, ADO) - 6usize];
    ["Offset of field: ec_comt::dlength"][::std::mem::offset_of!(ec_comt, dlength) - 8usize];
    ["Offset of field: ec_comt::irpt"][::std::mem::offset_of!(ec_comt, irpt) - 10usize];
};
#[doc = " No error"]
pub const ec_err_EC_ERR_OK: ec_err = 0;
#[doc = " Library already initialized."]
pub const ec_err_EC_ERR_ALREADY_INITIALIZED: ec_err = 1;
#[doc = " Library not initialized."]
pub const ec_err_EC_ERR_NOT_INITIALIZED: ec_err = 2;
#[doc = " Timeout occurred during execution of the function."]
pub const ec_err_EC_ERR_TIMEOUT: ec_err = 3;
#[doc = " No slaves were found."]
pub const ec_err_EC_ERR_NO_SLAVES: ec_err = 4;
#[doc = " Function failed."]
pub const ec_err_EC_ERR_NOK: ec_err = 5;
#[doc = " Possible error codes returned."]
pub type ec_err = ::std::os::raw::c_uint;
#[doc = " No valid state."]
pub const ec_state_EC_STATE_NONE: ec_state = 0;
#[doc = " Init state"]
pub const ec_state_EC_STATE_INIT: ec_state = 1;
#[doc = " Pre-operational."]
pub const ec_state_EC_STATE_PRE_OP: ec_state = 2;
#[doc = " Boot state"]
pub const ec_state_EC_STATE_BOOT: ec_state = 3;
#[doc = " Safe-operational."]
pub const ec_state_EC_STATE_SAFE_OP: ec_state = 4;
#[doc = " Operational"]
pub const ec_state_EC_STATE_OPERATIONAL: ec_state = 8;
#[doc = " Error or ACK error"]
pub const ec_state_EC_STATE_ACK: ec_state = 16;
#[doc = " Error or ACK error"]
pub const ec_state_EC_STATE_ERROR: ec_state = 16;
#[doc = " Possible EtherCAT slave states"]
pub type ec_state = ::std::os::raw::c_uint;
#[doc = " Empty"]
pub const ec_bufstate_EC_BUF_EMPTY: ec_bufstate = 0;
#[doc = " Allocated, but not filled"]
pub const ec_bufstate_EC_BUF_ALLOC: ec_bufstate = 1;
#[doc = " Transmitted"]
pub const ec_bufstate_EC_BUF_TX: ec_bufstate = 2;
#[doc = " Received, but not consumed"]
pub const ec_bufstate_EC_BUF_RCVD: ec_bufstate = 3;
#[doc = " Cycle completed"]
pub const ec_bufstate_EC_BUF_COMPLETE: ec_bufstate = 4;
#[doc = " Possible buffer states"]
pub type ec_bufstate = ::std::os::raw::c_uint;
pub const ec_datatype_ECT_BOOLEAN: ec_datatype = 1;
pub const ec_datatype_ECT_INTEGER8: ec_datatype = 2;
pub const ec_datatype_ECT_INTEGER16: ec_datatype = 3;
pub const ec_datatype_ECT_INTEGER32: ec_datatype = 4;
pub const ec_datatype_ECT_UNSIGNED8: ec_datatype = 5;
pub const ec_datatype_ECT_UNSIGNED16: ec_datatype = 6;
pub const ec_datatype_ECT_UNSIGNED32: ec_datatype = 7;
pub const ec_datatype_ECT_REAL32: ec_datatype = 8;
pub const ec_datatype_ECT_VISIBLE_STRING: ec_datatype = 9;
pub const ec_datatype_ECT_OCTET_STRING: ec_datatype = 10;
pub const ec_datatype_ECT_UNICODE_STRING: ec_datatype = 11;
pub const ec_datatype_ECT_TIME_OF_DAY: ec_datatype = 12;
pub const ec_datatype_ECT_TIME_DIFFERENCE: ec_datatype = 13;
pub const ec_datatype_ECT_DOMAIN: ec_datatype = 15;
pub const ec_datatype_ECT_INTEGER24: ec_datatype = 16;
pub const ec_datatype_ECT_REAL64: ec_datatype = 17;
pub const ec_datatype_ECT_INTEGER64: ec_datatype = 21;
pub const ec_datatype_ECT_UNSIGNED24: ec_datatype = 22;
pub const ec_datatype_ECT_UNSIGNED64: ec_datatype = 27;
pub const ec_datatype_ECT_BIT1: ec_datatype = 48;
pub const ec_datatype_ECT_BIT2: ec_datatype = 49;
pub const ec_datatype_ECT_BIT3: ec_datatype = 50;
pub const ec_datatype_ECT_BIT4: ec_datatype = 51;
pub const ec_datatype_ECT_BIT5: ec_datatype = 52;
pub const ec_datatype_ECT_BIT6: ec_datatype = 53;
pub const ec_datatype_ECT_BIT7: ec_datatype = 54;
pub const ec_datatype_ECT_BIT8: ec_datatype = 55;
#[doc = " Ethercat data types"]
pub type ec_datatype = ::std::os::raw::c_uint;
#[doc = " No operation"]
pub const ec_cmdtype_EC_CMD_NOP: ec_cmdtype = 0;
#[doc = " Auto Increment Read"]
pub const ec_cmdtype_EC_CMD_APRD: ec_cmdtype = 1;
#[doc = " Auto Increment Write"]
pub const ec_cmdtype_EC_CMD_APWR: ec_cmdtype = 2;
#[doc = " Auto Increment Read Write"]
pub const ec_cmdtype_EC_CMD_APRW: ec_cmdtype = 3;
#[doc = " Configured Address Read"]
pub const ec_cmdtype_EC_CMD_FPRD: ec_cmdtype = 4;
#[doc = " Configured Address Write"]
pub const ec_cmdtype_EC_CMD_FPWR: ec_cmdtype = 5;
#[doc = " Configured Address Read Write"]
pub const ec_cmdtype_EC_CMD_FPRW: ec_cmdtype = 6;
#[doc = " Broadcast Read"]
pub const ec_cmdtype_EC_CMD_BRD: ec_cmdtype = 7;
#[doc = " Broadcast Write"]
pub const ec_cmdtype_EC_CMD_BWR: ec_cmdtype = 8;
#[doc = " Broadcast Read Write"]
pub const ec_cmdtype_EC_CMD_BRW: ec_cmdtype = 9;
#[doc = " Logical Memory Read"]
pub const ec_cmdtype_EC_CMD_LRD: ec_cmdtype = 10;
#[doc = " Logical Memory Write"]
pub const ec_cmdtype_EC_CMD_LWR: ec_cmdtype = 11;
#[doc = " Logical Memory Read Write"]
pub const ec_cmdtype_EC_CMD_LRW: ec_cmdtype = 12;
#[doc = " Auto Increment Read Multiple Write"]
pub const ec_cmdtype_EC_CMD_ARMW: ec_cmdtype = 13;
#[doc = " Configured Read Multiple Write"]
pub const ec_cmdtype_EC_CMD_FRMW: ec_cmdtype = 14;
#[doc = " Ethercat command types"]
pub type ec_cmdtype = ::std::os::raw::c_uint;
#[doc = " No operation"]
pub const ec_ecmdtype_EC_ECMD_NOP: ec_ecmdtype = 0;
#[doc = " Read"]
pub const ec_ecmdtype_EC_ECMD_READ: ec_ecmdtype = 256;
#[doc = " Write"]
pub const ec_ecmdtype_EC_ECMD_WRITE: ec_ecmdtype = 513;
#[doc = " Reload"]
pub const ec_ecmdtype_EC_ECMD_RELOAD: ec_ecmdtype = 768;
#[doc = " Ethercat EEprom command types"]
pub type ec_ecmdtype = ::std::os::raw::c_uint;
#[doc = " SII category strings"]
pub const ECT_SII_STRING: _bindgen_ty_2 = 10;
#[doc = " SII category general"]
pub const ECT_SII_GENERAL: _bindgen_ty_2 = 30;
#[doc = " SII category FMMU"]
pub const ECT_SII_FMMU: _bindgen_ty_2 = 40;
#[doc = " SII category SM"]
pub const ECT_SII_SM: _bindgen_ty_2 = 41;
#[doc = " SII category PDO"]
pub const ECT_SII_PDO: _bindgen_ty_2 = 50;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const ECT_SII_MANUF: _bindgen_ty_3 = 8;
pub const ECT_SII_ID: _bindgen_ty_3 = 10;
pub const ECT_SII_REV: _bindgen_ty_3 = 12;
pub const ECT_SII_SN: _bindgen_ty_3 = 14;
pub const ECT_SII_BOOTRXMBX: _bindgen_ty_3 = 20;
pub const ECT_SII_BOOTTXMBX: _bindgen_ty_3 = 22;
pub const ECT_SII_MBXSIZE: _bindgen_ty_3 = 25;
pub const ECT_SII_TXMBXADR: _bindgen_ty_3 = 26;
pub const ECT_SII_RXMBXADR: _bindgen_ty_3 = 24;
pub const ECT_SII_MBXPROTO: _bindgen_ty_3 = 28;
#[doc = " Item offsets in SII general section"]
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
#[doc = " Error mailbox type"]
pub const ECT_MBXT_ERR: _bindgen_ty_4 = 0;
#[doc = " ADS over EtherCAT mailbox type"]
pub const ECT_MBXT_AOE: _bindgen_ty_4 = 1;
#[doc = " Ethernet over EtherCAT mailbox type"]
pub const ECT_MBXT_EOE: _bindgen_ty_4 = 2;
#[doc = " CANopen over EtherCAT mailbox type"]
pub const ECT_MBXT_COE: _bindgen_ty_4 = 3;
#[doc = " File over EtherCAT mailbox type"]
pub const ECT_MBXT_FOE: _bindgen_ty_4 = 4;
#[doc = " Servo over EtherCAT mailbox type"]
pub const ECT_MBXT_SOE: _bindgen_ty_4 = 5;
#[doc = " Vendor over EtherCAT mailbox type"]
pub const ECT_MBXT_VOE: _bindgen_ty_4 = 15;
#[doc = " Mailbox types definitions"]
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const ECT_COES_EMERGENCY: _bindgen_ty_5 = 1;
pub const ECT_COES_SDOREQ: _bindgen_ty_5 = 2;
pub const ECT_COES_SDORES: _bindgen_ty_5 = 3;
pub const ECT_COES_TXPDO: _bindgen_ty_5 = 4;
pub const ECT_COES_RXPDO: _bindgen_ty_5 = 5;
pub const ECT_COES_TXPDO_RR: _bindgen_ty_5 = 6;
pub const ECT_COES_RXPDO_RR: _bindgen_ty_5 = 7;
pub const ECT_COES_SDOINFO: _bindgen_ty_5 = 8;
#[doc = " CoE mailbox types"]
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const ECT_SDO_DOWN_INIT: _bindgen_ty_6 = 33;
pub const ECT_SDO_DOWN_EXP: _bindgen_ty_6 = 35;
pub const ECT_SDO_DOWN_INIT_CA: _bindgen_ty_6 = 49;
pub const ECT_SDO_UP_REQ: _bindgen_ty_6 = 64;
pub const ECT_SDO_UP_REQ_CA: _bindgen_ty_6 = 80;
pub const ECT_SDO_SEG_UP_REQ: _bindgen_ty_6 = 96;
pub const ECT_SDO_ABORT: _bindgen_ty_6 = 128;
#[doc = " CoE SDO commands"]
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const ECT_GET_ODLIST_REQ: _bindgen_ty_7 = 1;
pub const ECT_GET_ODLIST_RES: _bindgen_ty_7 = 2;
pub const ECT_GET_OD_REQ: _bindgen_ty_7 = 3;
pub const ECT_GET_OD_RES: _bindgen_ty_7 = 4;
pub const ECT_GET_OE_REQ: _bindgen_ty_7 = 5;
pub const ECT_GET_OE_RES: _bindgen_ty_7 = 6;
pub const ECT_SDOINFO_ERROR: _bindgen_ty_7 = 7;
#[doc = " CoE Object Description commands"]
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const ECT_FOE_READ: _bindgen_ty_8 = 1;
pub const ECT_FOE_WRITE: _bindgen_ty_8 = 2;
pub const ECT_FOE_DATA: _bindgen_ty_8 = 3;
pub const ECT_FOE_ACK: _bindgen_ty_8 = 4;
pub const ECT_FOE_ERROR: _bindgen_ty_8 = 5;
pub const ECT_FOE_BUSY: _bindgen_ty_8 = 6;
#[doc = " FoE opcodes"]
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const ECT_SOE_READREQ: _bindgen_ty_9 = 1;
pub const ECT_SOE_READRES: _bindgen_ty_9 = 2;
pub const ECT_SOE_WRITEREQ: _bindgen_ty_9 = 3;
pub const ECT_SOE_WRITERES: _bindgen_ty_9 = 4;
pub const ECT_SOE_NOTIFICATION: _bindgen_ty_9 = 5;
pub const ECT_SOE_EMERGENCY: _bindgen_ty_9 = 6;
#[doc = " SoE opcodes"]
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const ECT_REG_TYPE: _bindgen_ty_10 = 0;
pub const ECT_REG_PORTDES: _bindgen_ty_10 = 7;
pub const ECT_REG_ESCSUP: _bindgen_ty_10 = 8;
pub const ECT_REG_STADR: _bindgen_ty_10 = 16;
pub const ECT_REG_ALIAS: _bindgen_ty_10 = 18;
pub const ECT_REG_DLCTL: _bindgen_ty_10 = 256;
pub const ECT_REG_DLPORT: _bindgen_ty_10 = 257;
pub const ECT_REG_DLALIAS: _bindgen_ty_10 = 259;
pub const ECT_REG_DLSTAT: _bindgen_ty_10 = 272;
pub const ECT_REG_ALCTL: _bindgen_ty_10 = 288;
pub const ECT_REG_ALSTAT: _bindgen_ty_10 = 304;
pub const ECT_REG_ALSTATCODE: _bindgen_ty_10 = 308;
pub const ECT_REG_PDICTL: _bindgen_ty_10 = 320;
pub const ECT_REG_IRQMASK: _bindgen_ty_10 = 512;
pub const ECT_REG_RXERR: _bindgen_ty_10 = 768;
pub const ECT_REG_FRXERR: _bindgen_ty_10 = 776;
pub const ECT_REG_EPUECNT: _bindgen_ty_10 = 780;
pub const ECT_REG_PECNT: _bindgen_ty_10 = 781;
pub const ECT_REG_PECODE: _bindgen_ty_10 = 782;
pub const ECT_REG_LLCNT: _bindgen_ty_10 = 784;
pub const ECT_REG_WDCNT: _bindgen_ty_10 = 1090;
pub const ECT_REG_EEPCFG: _bindgen_ty_10 = 1280;
pub const ECT_REG_EEPCTL: _bindgen_ty_10 = 1282;
pub const ECT_REG_EEPSTAT: _bindgen_ty_10 = 1282;
pub const ECT_REG_EEPADR: _bindgen_ty_10 = 1284;
pub const ECT_REG_EEPDAT: _bindgen_ty_10 = 1288;
pub const ECT_REG_FMMU0: _bindgen_ty_10 = 1536;
pub const ECT_REG_FMMU1: _bindgen_ty_10 = 1552;
pub const ECT_REG_FMMU2: _bindgen_ty_10 = 1568;
pub const ECT_REG_FMMU3: _bindgen_ty_10 = 1584;
pub const ECT_REG_SM0: _bindgen_ty_10 = 2048;
pub const ECT_REG_SM1: _bindgen_ty_10 = 2056;
pub const ECT_REG_SM2: _bindgen_ty_10 = 2064;
pub const ECT_REG_SM3: _bindgen_ty_10 = 2072;
pub const ECT_REG_SM0STAT: _bindgen_ty_10 = 2053;
pub const ECT_REG_SM1STAT: _bindgen_ty_10 = 2061;
pub const ECT_REG_SM1ACT: _bindgen_ty_10 = 2062;
pub const ECT_REG_SM1CONTR: _bindgen_ty_10 = 2063;
pub const ECT_REG_DCTIME0: _bindgen_ty_10 = 2304;
pub const ECT_REG_DCTIME1: _bindgen_ty_10 = 2308;
pub const ECT_REG_DCTIME2: _bindgen_ty_10 = 2312;
pub const ECT_REG_DCTIME3: _bindgen_ty_10 = 2316;
pub const ECT_REG_DCSYSTIME: _bindgen_ty_10 = 2320;
pub const ECT_REG_DCSOF: _bindgen_ty_10 = 2328;
pub const ECT_REG_DCSYSOFFSET: _bindgen_ty_10 = 2336;
pub const ECT_REG_DCSYSDELAY: _bindgen_ty_10 = 2344;
pub const ECT_REG_DCSYSDIFF: _bindgen_ty_10 = 2348;
pub const ECT_REG_DCSPEEDCNT: _bindgen_ty_10 = 2352;
pub const ECT_REG_DCTIMEFILT: _bindgen_ty_10 = 2356;
pub const ECT_REG_DCCUC: _bindgen_ty_10 = 2432;
pub const ECT_REG_DCSYNCACT: _bindgen_ty_10 = 2433;
pub const ECT_REG_DCSTART0: _bindgen_ty_10 = 2448;
pub const ECT_REG_DCCYCLE0: _bindgen_ty_10 = 2464;
pub const ECT_REG_DCCYCLE1: _bindgen_ty_10 = 2468;
#[doc = " Ethercat registers"]
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
pub const ec_err_type_EC_ERR_TYPE_SDO_ERROR: ec_err_type = 0;
pub const ec_err_type_EC_ERR_TYPE_EMERGENCY: ec_err_type = 1;
pub const ec_err_type_EC_ERR_TYPE_PACKET_ERROR: ec_err_type = 3;
pub const ec_err_type_EC_ERR_TYPE_SDOINFO_ERROR: ec_err_type = 4;
pub const ec_err_type_EC_ERR_TYPE_FOE_ERROR: ec_err_type = 5;
pub const ec_err_type_EC_ERR_TYPE_FOE_BUF2SMALL: ec_err_type = 6;
pub const ec_err_type_EC_ERR_TYPE_FOE_PACKETNUMBER: ec_err_type = 7;
pub const ec_err_type_EC_ERR_TYPE_SOE_ERROR: ec_err_type = 8;
pub const ec_err_type_EC_ERR_TYPE_MBX_ERROR: ec_err_type = 9;
pub const ec_err_type_EC_ERR_TYPE_FOE_FILE_NOTFOUND: ec_err_type = 10;
pub const ec_err_type_EC_ERR_TYPE_EOE_INVALID_RX_DATA: ec_err_type = 11;
#[doc = " Error types"]
pub type ec_err_type = ::std::os::raw::c_uint;
#[doc = " Struct to retrieve errors."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_errort {
    #[doc = " Time at which the error was generated."]
    pub Time: ec_timet,
    #[doc = " Signal bit, error set but not read"]
    pub Signal: boolean,
    #[doc = " Slave number that generated the error"]
    pub Slave: uint16,
    #[doc = " CoE SDO index that generated the error"]
    pub Index: uint16,
    #[doc = " CoE SDO subindex that generated the error"]
    pub SubIdx: uint8,
    #[doc = " Type of error"]
    pub Etype: ec_err_type,
    pub __bindgen_anon_1: ec_errort__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ec_errort__bindgen_ty_1 {
    #[doc = " General abortcode"]
    pub AbortCode: int32,
    pub __bindgen_anon_1: ec_errort__bindgen_ty_1__bindgen_ty_1,
}
#[doc = " Specific error for Emergency mailbox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_errort__bindgen_ty_1__bindgen_ty_1 {
    pub ErrorCode: uint16,
    pub ErrorReg: uint8,
    pub b1: uint8,
    pub w1: uint16,
    pub w2: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_errort__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ec_errort__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ec_errort__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ec_errort__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::ErrorCode"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, ErrorCode) - 0usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::ErrorReg"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, ErrorReg) - 2usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::b1"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, b1) - 3usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::w1"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, w1) - 4usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::w2"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, w2) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_errort__bindgen_ty_1"][::std::mem::size_of::<ec_errort__bindgen_ty_1>() - 8usize];
    ["Alignment of ec_errort__bindgen_ty_1"]
        [::std::mem::align_of::<ec_errort__bindgen_ty_1>() - 4usize];
    ["Offset of field: ec_errort__bindgen_ty_1::AbortCode"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1, AbortCode) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_errort"][::std::mem::size_of::<ec_errort>() - 28usize];
    ["Alignment of ec_errort"][::std::mem::align_of::<ec_errort>() - 4usize];
    ["Offset of field: ec_errort::Time"][::std::mem::offset_of!(ec_errort, Time) - 0usize];
    ["Offset of field: ec_errort::Signal"][::std::mem::offset_of!(ec_errort, Signal) - 8usize];
    ["Offset of field: ec_errort::Slave"][::std::mem::offset_of!(ec_errort, Slave) - 10usize];
    ["Offset of field: ec_errort::Index"][::std::mem::offset_of!(ec_errort, Index) - 12usize];
    ["Offset of field: ec_errort::SubIdx"][::std::mem::offset_of!(ec_errort, SubIdx) - 14usize];
    ["Offset of field: ec_errort::Etype"][::std::mem::offset_of!(ec_errort, Etype) - 16usize];
};
pub type wchar_t = __darwin_wchar_t;
unsafe extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type dev_t = __darwin_dev_t;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type mode_t = __darwin_mode_t;
pub type nlink_t = __uint16_t;
pub type id_t = __darwin_id_t;
pub type pid_t = __darwin_pid_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type uid_t = __darwin_uid_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
unsafe extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval64 {
    pub tv_sec: __int64_t,
    pub tv_usec: __int64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval64"][::std::mem::size_of::<timeval64>() - 16usize];
    ["Alignment of timeval64"][::std::mem::align_of::<timeval64>() - 8usize];
    ["Offset of field: timeval64::tv_sec"][::std::mem::offset_of!(timeval64, tv_sec) - 0usize];
    ["Offset of field: timeval64::tv_usec"][::std::mem::offset_of!(timeval64, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerval"][::std::mem::size_of::<itimerval>() - 32usize];
    ["Alignment of itimerval"][::std::mem::align_of::<itimerval>() - 8usize];
    ["Offset of field: itimerval::it_interval"]
        [::std::mem::offset_of!(itimerval, it_interval) - 0usize];
    ["Offset of field: itimerval::it_value"][::std::mem::offset_of!(itimerval, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timezone"][::std::mem::size_of::<timezone>() - 8usize];
    ["Alignment of timezone"][::std::mem::align_of::<timezone>() - 4usize];
    ["Offset of field: timezone::tz_minuteswest"]
        [::std::mem::offset_of!(timezone, tz_minuteswest) - 0usize];
    ["Offset of field: timezone::tz_dsttime"]
        [::std::mem::offset_of!(timezone, tz_dsttime) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clockinfo {
    pub hz: ::std::os::raw::c_int,
    pub tick: ::std::os::raw::c_int,
    pub tickadj: ::std::os::raw::c_int,
    pub stathz: ::std::os::raw::c_int,
    pub profhz: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clockinfo"][::std::mem::size_of::<clockinfo>() - 20usize];
    ["Alignment of clockinfo"][::std::mem::align_of::<clockinfo>() - 4usize];
    ["Offset of field: clockinfo::hz"][::std::mem::offset_of!(clockinfo, hz) - 0usize];
    ["Offset of field: clockinfo::tick"][::std::mem::offset_of!(clockinfo, tick) - 4usize];
    ["Offset of field: clockinfo::tickadj"][::std::mem::offset_of!(clockinfo, tickadj) - 8usize];
    ["Offset of field: clockinfo::stathz"][::std::mem::offset_of!(clockinfo, stathz) - 12usize];
    ["Offset of field: clockinfo::profhz"][::std::mem::offset_of!(clockinfo, profhz) - 16usize];
};
unsafe extern "C" {
    pub fn adjtime(arg1: *const timeval, arg2: *mut timeval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn futimes(arg1: ::std::os::raw::c_int, arg2: *const timeval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lutimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn settimeofday(arg1: *const timeval, arg2: *const timezone) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getitimer(arg1: ::std::os::raw::c_int, arg2: *mut itimerval) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gettimeofday(
        arg1: *mut timeval,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setitimer(
        arg1: ::std::os::raw::c_int,
        arg2: *const itimerval,
        arg3: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn utimes(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type sae_associd_t = __uint32_t;
pub type sae_connid_t = __uint32_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sa_endpoints {
    pub sae_srcif: ::std::os::raw::c_uint,
    pub sae_srcaddr: *const sockaddr,
    pub sae_srcaddrlen: socklen_t,
    pub sae_dstaddr: *const sockaddr,
    pub sae_dstaddrlen: socklen_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sa_endpoints"][::std::mem::size_of::<sa_endpoints>() - 40usize];
    ["Alignment of sa_endpoints"][::std::mem::align_of::<sa_endpoints>() - 8usize];
    ["Offset of field: sa_endpoints::sae_srcif"]
        [::std::mem::offset_of!(sa_endpoints, sae_srcif) - 0usize];
    ["Offset of field: sa_endpoints::sae_srcaddr"]
        [::std::mem::offset_of!(sa_endpoints, sae_srcaddr) - 8usize];
    ["Offset of field: sa_endpoints::sae_srcaddrlen"]
        [::std::mem::offset_of!(sa_endpoints, sae_srcaddrlen) - 16usize];
    ["Offset of field: sa_endpoints::sae_dstaddr"]
        [::std::mem::offset_of!(sa_endpoints, sae_dstaddr) - 24usize];
    ["Offset of field: sa_endpoints::sae_dstaddrlen"]
        [::std::mem::offset_of!(sa_endpoints, sae_dstaddrlen) - 32usize];
};
pub type sa_endpoints_t = sa_endpoints;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct so_np_extensions {
    pub npx_flags: u_int32_t,
    pub npx_mask: u_int32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of so_np_extensions"][::std::mem::size_of::<so_np_extensions>() - 8usize];
    ["Alignment of so_np_extensions"][::std::mem::align_of::<so_np_extensions>() - 4usize];
    ["Offset of field: so_np_extensions::npx_flags"]
        [::std::mem::offset_of!(so_np_extensions, npx_flags) - 0usize];
    ["Offset of field: so_np_extensions::npx_mask"]
        [::std::mem::offset_of!(so_np_extensions, npx_mask) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 1usize];
    ["Offset of field: sockaddr::sa_len"][::std::mem::offset_of!(sockaddr, sa_len) - 0usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 1usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sockaddr_header {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sockaddr_header"][::std::mem::size_of::<__sockaddr_header>() - 2usize];
    ["Alignment of __sockaddr_header"][::std::mem::align_of::<__sockaddr_header>() - 1usize];
    ["Offset of field: __sockaddr_header::sa_len"]
        [::std::mem::offset_of!(__sockaddr_header, sa_len) - 0usize];
    ["Offset of field: __sockaddr_header::sa_family"]
        [::std::mem::offset_of!(__sockaddr_header, sa_family) - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: __uint16_t,
    pub sp_protocol: __uint16_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockproto"][::std::mem::size_of::<sockproto>() - 4usize];
    ["Alignment of sockproto"][::std::mem::align_of::<sockproto>() - 2usize];
    ["Offset of field: sockproto::sp_family"]
        [::std::mem::offset_of!(sockproto, sp_family) - 0usize];
    ["Offset of field: sockproto::sp_protocol"]
        [::std::mem::offset_of!(sockproto, sp_protocol) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_len: __uint8_t,
    pub ss_family: sa_family_t,
    pub __ss_pad1: [::std::os::raw::c_char; 6usize],
    pub __ss_align: __int64_t,
    pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_len"]
        [::std::mem::offset_of!(sockaddr_storage, ss_len) - 0usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 1usize];
    ["Offset of field: sockaddr_storage::__ss_pad1"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad1) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 8usize];
    ["Offset of field: sockaddr_storage::__ss_pad2"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: ::std::os::raw::c_int,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: socklen_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 48usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: socklen_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 12usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 4usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 4usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sf_hdtr {
    pub headers: *mut iovec,
    pub hdr_cnt: ::std::os::raw::c_int,
    pub trailers: *mut iovec,
    pub trl_cnt: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sf_hdtr"][::std::mem::size_of::<sf_hdtr>() - 32usize];
    ["Alignment of sf_hdtr"][::std::mem::align_of::<sf_hdtr>() - 8usize];
    ["Offset of field: sf_hdtr::headers"][::std::mem::offset_of!(sf_hdtr, headers) - 0usize];
    ["Offset of field: sf_hdtr::hdr_cnt"][::std::mem::offset_of!(sf_hdtr, hdr_cnt) - 8usize];
    ["Offset of field: sf_hdtr::trailers"][::std::mem::offset_of!(sf_hdtr, trailers) - 16usize];
    ["Offset of field: sf_hdtr::trl_cnt"][::std::mem::offset_of!(sf_hdtr, trl_cnt) - 24usize];
};
unsafe extern "C" {
    pub fn accept(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        arg1: ::std::os::raw::c_int,
        arg2: *const sockaddr,
        arg3: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
        arg3: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn recv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *mut sockaddr,
        arg6: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *mut msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn send(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        arg1: ::std::os::raw::c_int,
        arg2: *const msghdr,
        arg3: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
        arg5: *const sockaddr,
        arg6: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn setsockopt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socket(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sendfile(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
        arg4: *mut off_t,
        arg5: *mut sf_hdtr,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pfctlinput(arg1: ::std::os::raw::c_int, arg2: *mut sockaddr);
}
unsafe extern "C" {
    pub fn connectx(
        arg1: ::std::os::raw::c_int,
        arg2: *const sa_endpoints_t,
        arg3: sae_associd_t,
        arg4: ::std::os::raw::c_uint,
        arg5: *const iovec,
        arg6: ::std::os::raw::c_uint,
        arg7: *mut usize,
        arg8: *mut sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn disconnectx(
        arg1: ::std::os::raw::c_int,
        arg2: sae_associd_t,
        arg3: sae_connid_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_len: __uint8_t,
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_len"]
        [::std::mem::offset_of!(sockaddr_in, sin_len) - 0usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 1usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_sourceaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 4usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 8usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 132usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 4usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 4usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 260usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 4usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 4usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 132usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct __msfilterreq {
    pub msfr_ifindex: u32,
    pub msfr_fmode: u32,
    pub msfr_nsrcs: u32,
    pub __msfr_align: u32,
    pub msfr_group: sockaddr_storage,
    pub msfr_srcs: *mut sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __msfilterreq"][::std::mem::size_of::<__msfilterreq>() - 152usize];
    ["Alignment of __msfilterreq"][::std::mem::align_of::<__msfilterreq>() - 4usize];
    ["Offset of field: __msfilterreq::msfr_ifindex"]
        [::std::mem::offset_of!(__msfilterreq, msfr_ifindex) - 0usize];
    ["Offset of field: __msfilterreq::msfr_fmode"]
        [::std::mem::offset_of!(__msfilterreq, msfr_fmode) - 4usize];
    ["Offset of field: __msfilterreq::msfr_nsrcs"]
        [::std::mem::offset_of!(__msfilterreq, msfr_nsrcs) - 8usize];
    ["Offset of field: __msfilterreq::__msfr_align"]
        [::std::mem::offset_of!(__msfilterreq, __msfr_align) - 12usize];
    ["Offset of field: __msfilterreq::msfr_group"]
        [::std::mem::offset_of!(__msfilterreq, msfr_group) - 16usize];
    ["Offset of field: __msfilterreq::msfr_srcs"]
        [::std::mem::offset_of!(__msfilterreq, msfr_srcs) - 144usize];
};
unsafe extern "C" {
    pub fn setipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: u32,
        arg5: u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getipv4sourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: in_addr,
        arg3: in_addr,
        arg4: *mut u32,
        arg5: *mut u32,
        arg6: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: u32,
        arg6: u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsourcefilter(
        arg1: ::std::os::raw::c_int,
        arg2: u32,
        arg3: *mut sockaddr,
        arg4: socklen_t,
        arg5: *mut u32,
        arg6: *mut u32,
        arg7: *mut sockaddr_storage,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_uint,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [__uint8_t; 16usize],
    pub __u6_addr16: [__uint16_t; 8usize],
    pub __u6_addr32: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__u6_addr"][::std::mem::offset_of!(in6_addr, __u6_addr) - 0usize];
};
pub type in6_addr_t = in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_len: __uint8_t,
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: __uint32_t,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_len"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_len) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 1usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_nodelocal_allnodes: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allnodes: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allrouters: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_linklocal_allv2routers: in6_addr;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: in6_addr,
    pub ipi6_ifindex: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_pktinfo"][::std::mem::size_of::<in6_pktinfo>() - 20usize];
    ["Alignment of in6_pktinfo"][::std::mem::align_of::<in6_pktinfo>() - 4usize];
    ["Offset of field: in6_pktinfo::ipi6_addr"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_addr) - 0usize];
    ["Offset of field: in6_pktinfo::ipi6_ifindex"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_ifindex) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip6_mtuinfo {
    pub ip6m_addr: sockaddr_in6,
    pub ip6m_mtu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip6_mtuinfo"][::std::mem::size_of::<ip6_mtuinfo>() - 32usize];
    ["Alignment of ip6_mtuinfo"][::std::mem::align_of::<ip6_mtuinfo>() - 4usize];
    ["Offset of field: ip6_mtuinfo::ip6m_addr"]
        [::std::mem::offset_of!(ip6_mtuinfo, ip6m_addr) - 0usize];
    ["Offset of field: ip6_mtuinfo::ip6m_mtu"]
        [::std::mem::offset_of!(ip6_mtuinfo, ip6m_mtu) - 28usize];
};
unsafe extern "C" {
    pub fn inet6_option_space(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut *mut cmsghdr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_append(
        arg1: *mut cmsghdr,
        arg2: *const __uint8_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_alloc(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut __uint8_t;
}
unsafe extern "C" {
    pub fn inet6_option_next(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_option_find(
        arg1: *const cmsghdr,
        arg2: *mut *mut __uint8_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> usize;
}
unsafe extern "C" {
    pub fn inet6_rthdr_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut cmsghdr;
}
unsafe extern "C" {
    pub fn inet6_rthdr_add(
        arg1: *mut cmsghdr,
        arg2: *const in6_addr,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_lasthop(
        arg1: *mut cmsghdr,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_segments(arg1: *const cmsghdr) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rthdr_getaddr(arg1: *mut cmsghdr, arg2: ::std::os::raw::c_int) -> *mut in6_addr;
}
unsafe extern "C" {
    pub fn inet6_rthdr_getflags(
        arg1: *const cmsghdr,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_append(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: socklen_t,
        arg6: __uint8_t,
        arg7: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_finish(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_set_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_next(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: *mut __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_find(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: __uint8_t,
        arg5: *mut socklen_t,
        arg6: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_opt_get_val(
        arg1: *mut ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
        arg4: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_space(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> socklen_t;
}
unsafe extern "C" {
    pub fn inet6_rth_init(
        arg1: *mut ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn inet6_rth_add(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const in6_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_reverse(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_segments(arg1: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet6_rth_getaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
    ) -> *mut in6_addr;
}
unsafe extern "C" {
    pub fn bindresvport(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindresvport_sa(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sockaddr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut h_errno: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hostent"][::std::mem::size_of::<hostent>() - 32usize];
    ["Alignment of hostent"][::std::mem::align_of::<hostent>() - 8usize];
    ["Offset of field: hostent::h_name"][::std::mem::offset_of!(hostent, h_name) - 0usize];
    ["Offset of field: hostent::h_aliases"][::std::mem::offset_of!(hostent, h_aliases) - 8usize];
    ["Offset of field: hostent::h_addrtype"][::std::mem::offset_of!(hostent, h_addrtype) - 16usize];
    ["Offset of field: hostent::h_length"][::std::mem::offset_of!(hostent, h_length) - 20usize];
    ["Offset of field: hostent::h_addr_list"]
        [::std::mem::offset_of!(hostent, h_addr_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netent"][::std::mem::size_of::<netent>() - 24usize];
    ["Alignment of netent"][::std::mem::align_of::<netent>() - 8usize];
    ["Offset of field: netent::n_name"][::std::mem::offset_of!(netent, n_name) - 0usize];
    ["Offset of field: netent::n_aliases"][::std::mem::offset_of!(netent, n_aliases) - 8usize];
    ["Offset of field: netent::n_addrtype"][::std::mem::offset_of!(netent, n_addrtype) - 16usize];
    ["Offset of field: netent::n_net"][::std::mem::offset_of!(netent, n_net) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of servent"][::std::mem::size_of::<servent>() - 32usize];
    ["Alignment of servent"][::std::mem::align_of::<servent>() - 8usize];
    ["Offset of field: servent::s_name"][::std::mem::offset_of!(servent, s_name) - 0usize];
    ["Offset of field: servent::s_aliases"][::std::mem::offset_of!(servent, s_aliases) - 8usize];
    ["Offset of field: servent::s_port"][::std::mem::offset_of!(servent, s_port) - 16usize];
    ["Offset of field: servent::s_proto"][::std::mem::offset_of!(servent, s_proto) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of protoent"][::std::mem::size_of::<protoent>() - 24usize];
    ["Alignment of protoent"][::std::mem::align_of::<protoent>() - 8usize];
    ["Offset of field: protoent::p_name"][::std::mem::offset_of!(protoent, p_name) - 0usize];
    ["Offset of field: protoent::p_aliases"][::std::mem::offset_of!(protoent, p_aliases) - 8usize];
    ["Offset of field: protoent::p_proto"][::std::mem::offset_of!(protoent, p_proto) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::std::mem::size_of::<addrinfo>() - 48usize];
    ["Alignment of addrinfo"][::std::mem::align_of::<addrinfo>() - 8usize];
    ["Offset of field: addrinfo::ai_flags"][::std::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::std::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::std::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::std::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::std::mem::offset_of!(addrinfo, ai_canonname) - 24usize];
    ["Offset of field: addrinfo::ai_addr"][::std::mem::offset_of!(addrinfo, ai_addr) - 32usize];
    ["Offset of field: addrinfo::ai_next"][::std::mem::offset_of!(addrinfo, ai_next) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rpcent"][::std::mem::size_of::<rpcent>() - 24usize];
    ["Alignment of rpcent"][::std::mem::align_of::<rpcent>() - 8usize];
    ["Offset of field: rpcent::r_name"][::std::mem::offset_of!(rpcent, r_name) - 0usize];
    ["Offset of field: rpcent::r_aliases"][::std::mem::offset_of!(rpcent, r_aliases) - 8usize];
    ["Offset of field: rpcent::r_number"][::std::mem::offset_of!(rpcent, r_number) - 16usize];
};
unsafe extern "C" {
    pub fn endhostent();
}
unsafe extern "C" {
    pub fn endnetent();
}
unsafe extern "C" {
    pub fn endprotoent();
}
unsafe extern "C" {
    pub fn endservent();
}
unsafe extern "C" {
    pub fn freeaddrinfo(arg1: *mut addrinfo);
}
unsafe extern "C" {
    pub fn gai_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn getaddrinfo(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const addrinfo,
        arg4: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gethostbyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: socklen_t,
        arg3: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn gethostbyname(arg1: *const ::std::os::raw::c_char) -> *mut hostent;
}
unsafe extern "C" {
    pub fn gethostent() -> *mut hostent;
}
unsafe extern "C" {
    pub fn getnameinfo(
        arg1: *const sockaddr,
        arg2: socklen_t,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
        arg5: *mut ::std::os::raw::c_char,
        arg6: socklen_t,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getnetbyaddr(arg1: u32, arg2: ::std::os::raw::c_int) -> *mut netent;
}
unsafe extern "C" {
    pub fn getnetbyname(arg1: *const ::std::os::raw::c_char) -> *mut netent;
}
unsafe extern "C" {
    pub fn getnetent() -> *mut netent;
}
unsafe extern "C" {
    pub fn getprotobyname(arg1: *const ::std::os::raw::c_char) -> *mut protoent;
}
unsafe extern "C" {
    pub fn getprotobynumber(arg1: ::std::os::raw::c_int) -> *mut protoent;
}
unsafe extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
unsafe extern "C" {
    pub fn getservbyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
unsafe extern "C" {
    pub fn getservbyport(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
unsafe extern "C" {
    pub fn getservent() -> *mut servent;
}
unsafe extern "C" {
    pub fn sethostent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn setnetent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn setprotoent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn setservent(arg1: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn freehostent(arg1: *mut hostent);
}
unsafe extern "C" {
    pub fn gethostbyname2(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn getipnodebyaddr(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn getipnodebyname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn getrpcbyname(name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
unsafe extern "C" {
    pub fn getrpcbynumber(number: ::std::os::raw::c_int) -> *mut rpcent;
}
unsafe extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
unsafe extern "C" {
    pub fn setrpcent(stayopen: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn endrpcent();
}
unsafe extern "C" {
    pub fn herror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn hstrerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn innetgr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getnetgrent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn endnetgrent();
}
unsafe extern "C" {
    pub fn setnetgrent(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn inet_addr(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_ntoa(arg1: in_addr) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_char,
        arg4: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ascii2addr(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn addr2ascii(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_aton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_lnaof(arg1: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_makeaddr(arg1: in_addr_t, arg2: in_addr_t) -> in_addr;
}
unsafe extern "C" {
    pub fn inet_netof(arg1: in_addr) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_network(arg1: *const ::std::os::raw::c_char) -> in_addr_t;
}
unsafe extern "C" {
    pub fn inet_net_ntop(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
        arg5: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_net_pton(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: __darwin_size_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn inet_neta(
        arg1: in_addr_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: __darwin_size_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn inet_nsap_addr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_uchar,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn inet_nsap_ntoa(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_uchar,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type bpf_int32 = ::std::os::raw::c_int;
pub type bpf_u_int32 = u_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
    pub bf_len: u_int,
    pub bf_insns: *mut bpf_insn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_program"][::std::mem::size_of::<bpf_program>() - 16usize];
    ["Alignment of bpf_program"][::std::mem::align_of::<bpf_program>() - 8usize];
    ["Offset of field: bpf_program::bf_len"][::std::mem::offset_of!(bpf_program, bf_len) - 0usize];
    ["Offset of field: bpf_program::bf_insns"]
        [::std::mem::offset_of!(bpf_program, bf_insns) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
    pub code: u_short,
    pub jt: u_char,
    pub jf: u_char,
    pub k: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_insn"][::std::mem::size_of::<bpf_insn>() - 8usize];
    ["Alignment of bpf_insn"][::std::mem::align_of::<bpf_insn>() - 4usize];
    ["Offset of field: bpf_insn::code"][::std::mem::offset_of!(bpf_insn, code) - 0usize];
    ["Offset of field: bpf_insn::jt"][::std::mem::offset_of!(bpf_insn, jt) - 2usize];
    ["Offset of field: bpf_insn::jf"][::std::mem::offset_of!(bpf_insn, jf) - 3usize];
    ["Offset of field: bpf_insn::k"][::std::mem::offset_of!(bpf_insn, k) - 4usize];
};
unsafe extern "C" {
    pub fn bpf_filter(
        arg1: *const bpf_insn,
        arg2: *const u_char,
        arg3: u_int,
        arg4: u_int,
    ) -> u_int;
}
unsafe extern "C" {
    pub fn bpf_validate(f: *const bpf_insn, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bpf_image(
        arg1: *const bpf_insn,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bpf_dump(arg1: *const bpf_program, arg2: ::std::os::raw::c_int);
}
pub type va_list = __darwin_va_list;
unsafe extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
unsafe extern "C" {
    pub static mut __stdinp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
unsafe extern "C" {
    pub static mut __stderrp: *mut FILE;
}
unsafe extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
unsafe extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
unsafe extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
unsafe extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
unsafe extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap {
    _unused: [u8; 0],
}
pub type pcap_t = pcap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_dumper {
    _unused: [u8; 0],
}
pub type pcap_dumper_t = pcap_dumper;
pub type pcap_if_t = pcap_if;
pub type pcap_addr_t = pcap_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_file_header {
    pub magic: bpf_u_int32,
    pub version_major: u_short,
    pub version_minor: u_short,
    pub thiszone: bpf_int32,
    pub sigfigs: bpf_u_int32,
    pub snaplen: bpf_u_int32,
    pub linktype: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_file_header"][::std::mem::size_of::<pcap_file_header>() - 24usize];
    ["Alignment of pcap_file_header"][::std::mem::align_of::<pcap_file_header>() - 4usize];
    ["Offset of field: pcap_file_header::magic"]
        [::std::mem::offset_of!(pcap_file_header, magic) - 0usize];
    ["Offset of field: pcap_file_header::version_major"]
        [::std::mem::offset_of!(pcap_file_header, version_major) - 4usize];
    ["Offset of field: pcap_file_header::version_minor"]
        [::std::mem::offset_of!(pcap_file_header, version_minor) - 6usize];
    ["Offset of field: pcap_file_header::thiszone"]
        [::std::mem::offset_of!(pcap_file_header, thiszone) - 8usize];
    ["Offset of field: pcap_file_header::sigfigs"]
        [::std::mem::offset_of!(pcap_file_header, sigfigs) - 12usize];
    ["Offset of field: pcap_file_header::snaplen"]
        [::std::mem::offset_of!(pcap_file_header, snaplen) - 16usize];
    ["Offset of field: pcap_file_header::linktype"]
        [::std::mem::offset_of!(pcap_file_header, linktype) - 20usize];
};
pub const pcap_direction_t_PCAP_D_INOUT: pcap_direction_t = 0;
pub const pcap_direction_t_PCAP_D_IN: pcap_direction_t = 1;
pub const pcap_direction_t_PCAP_D_OUT: pcap_direction_t = 2;
pub const pcap_direction_t_PCAP_D_NONE: pcap_direction_t = 3;
pub type pcap_direction_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_pkthdr {
    pub ts: timeval,
    pub caplen: bpf_u_int32,
    pub len: bpf_u_int32,
    pub comment: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_pkthdr"][::std::mem::size_of::<pcap_pkthdr>() - 280usize];
    ["Alignment of pcap_pkthdr"][::std::mem::align_of::<pcap_pkthdr>() - 8usize];
    ["Offset of field: pcap_pkthdr::ts"][::std::mem::offset_of!(pcap_pkthdr, ts) - 0usize];
    ["Offset of field: pcap_pkthdr::caplen"][::std::mem::offset_of!(pcap_pkthdr, caplen) - 16usize];
    ["Offset of field: pcap_pkthdr::len"][::std::mem::offset_of!(pcap_pkthdr, len) - 20usize];
    ["Offset of field: pcap_pkthdr::comment"]
        [::std::mem::offset_of!(pcap_pkthdr, comment) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_stat {
    pub ps_recv: u_int,
    pub ps_drop: u_int,
    pub ps_ifdrop: u_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_stat"][::std::mem::size_of::<pcap_stat>() - 12usize];
    ["Alignment of pcap_stat"][::std::mem::align_of::<pcap_stat>() - 4usize];
    ["Offset of field: pcap_stat::ps_recv"][::std::mem::offset_of!(pcap_stat, ps_recv) - 0usize];
    ["Offset of field: pcap_stat::ps_drop"][::std::mem::offset_of!(pcap_stat, ps_drop) - 4usize];
    ["Offset of field: pcap_stat::ps_ifdrop"]
        [::std::mem::offset_of!(pcap_stat, ps_ifdrop) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_if {
    pub next: *mut pcap_if,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub addresses: *mut pcap_addr,
    pub flags: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_if"][::std::mem::size_of::<pcap_if>() - 40usize];
    ["Alignment of pcap_if"][::std::mem::align_of::<pcap_if>() - 8usize];
    ["Offset of field: pcap_if::next"][::std::mem::offset_of!(pcap_if, next) - 0usize];
    ["Offset of field: pcap_if::name"][::std::mem::offset_of!(pcap_if, name) - 8usize];
    ["Offset of field: pcap_if::description"]
        [::std::mem::offset_of!(pcap_if, description) - 16usize];
    ["Offset of field: pcap_if::addresses"][::std::mem::offset_of!(pcap_if, addresses) - 24usize];
    ["Offset of field: pcap_if::flags"][::std::mem::offset_of!(pcap_if, flags) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_addr {
    pub next: *mut pcap_addr,
    pub addr: *mut sockaddr,
    pub netmask: *mut sockaddr,
    pub broadaddr: *mut sockaddr,
    pub dstaddr: *mut sockaddr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_addr"][::std::mem::size_of::<pcap_addr>() - 40usize];
    ["Alignment of pcap_addr"][::std::mem::align_of::<pcap_addr>() - 8usize];
    ["Offset of field: pcap_addr::next"][::std::mem::offset_of!(pcap_addr, next) - 0usize];
    ["Offset of field: pcap_addr::addr"][::std::mem::offset_of!(pcap_addr, addr) - 8usize];
    ["Offset of field: pcap_addr::netmask"][::std::mem::offset_of!(pcap_addr, netmask) - 16usize];
    ["Offset of field: pcap_addr::broadaddr"]
        [::std::mem::offset_of!(pcap_addr, broadaddr) - 24usize];
    ["Offset of field: pcap_addr::dstaddr"][::std::mem::offset_of!(pcap_addr, dstaddr) - 32usize];
};
pub type pcap_handler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut u_char, arg2: *const pcap_pkthdr, arg3: *const u_char),
>;
unsafe extern "C" {
    pub fn pcap_init(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_lookupdev(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_lookupnet(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut bpf_u_int32,
        arg3: *mut bpf_u_int32,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_create(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_set_snaplen(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_promisc(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_can_set_rfmon(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_rfmon(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_timeout(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_tstamp_type(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_immediate_mode(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_buffer_size(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_tstamp_precision(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_get_tstamp_precision(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_activate(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_list_tstamp_types(
        arg1: *mut pcap_t,
        arg2: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_free_tstamp_types(arg1: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn pcap_tstamp_type_name_to_val(
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_tstamp_type_val_to_name(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_tstamp_type_val_to_description(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_open_live(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_open_dead(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_open_dead_with_tstamp_precision(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: u_int,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_open_offline_with_tstamp_precision(
        arg1: *const ::std::os::raw::c_char,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_open_offline(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_fopen_offline_with_tstamp_precision(
        arg1: *mut FILE,
        arg2: u_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_fopen_offline(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_close(arg1: *mut pcap_t);
}
unsafe extern "C" {
    pub fn pcap_loop(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
        arg3: pcap_handler,
        arg4: *mut u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_dispatch(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
        arg3: pcap_handler,
        arg4: *mut u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_next(arg1: *mut pcap_t, arg2: *mut pcap_pkthdr) -> *const u_char;
}
unsafe extern "C" {
    pub fn pcap_next_ex(
        arg1: *mut pcap_t,
        arg2: *mut *mut pcap_pkthdr,
        arg3: *mut *const u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_breakloop(arg1: *mut pcap_t);
}
unsafe extern "C" {
    pub fn pcap_stats(arg1: *mut pcap_t, arg2: *mut pcap_stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setfilter(arg1: *mut pcap_t, arg2: *mut bpf_program) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setdirection(arg1: *mut pcap_t, arg2: pcap_direction_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_getnonblock(
        arg1: *mut pcap_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setnonblock(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_inject(
        arg1: *mut pcap_t,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_sendpacket(
        arg1: *mut pcap_t,
        arg2: *const u_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_statustostr(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_geterr(arg1: *mut pcap_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_perror(arg1: *mut pcap_t, arg2: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn pcap_compile(
        arg1: *mut pcap_t,
        arg2: *mut bpf_program,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: bpf_u_int32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_compile_nopcap(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut bpf_program,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: bpf_u_int32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_freecode(arg1: *mut bpf_program);
}
unsafe extern "C" {
    pub fn pcap_offline_filter(
        arg1: *const bpf_program,
        arg2: *const pcap_pkthdr,
        arg3: *const u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_datalink(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_datalink_ext(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_list_datalinks(
        arg1: *mut pcap_t,
        arg2: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_datalink(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_free_datalinks(arg1: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn pcap_datalink_name_to_val(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_datalink_val_to_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_datalink_val_to_description(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_datalink_val_to_description_or_dlt(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_snapshot(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_is_swapped(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_major_version(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_minor_version(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_bufsize(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_file(arg1: *mut pcap_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn pcap_fileno(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_dump_open(
        arg1: *mut pcap_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut pcap_dumper_t;
}
unsafe extern "C" {
    pub fn pcap_dump_fopen(arg1: *mut pcap_t, fp: *mut FILE) -> *mut pcap_dumper_t;
}
unsafe extern "C" {
    pub fn pcap_dump_open_append(
        arg1: *mut pcap_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut pcap_dumper_t;
}
unsafe extern "C" {
    pub fn pcap_dump_file(arg1: *mut pcap_dumper_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn pcap_dump_ftell(arg1: *mut pcap_dumper_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn pcap_dump_ftell64(arg1: *mut pcap_dumper_t) -> i64;
}
unsafe extern "C" {
    pub fn pcap_dump_flush(arg1: *mut pcap_dumper_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_dump_close(arg1: *mut pcap_dumper_t);
}
unsafe extern "C" {
    pub fn pcap_dump(arg1: *mut u_char, arg2: *const pcap_pkthdr, arg3: *const u_char);
}
unsafe extern "C" {
    pub fn pcap_findalldevs(
        arg1: *mut *mut pcap_if_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_freealldevs(arg1: *mut pcap_if_t);
}
unsafe extern "C" {
    pub fn pcap_lib_version() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_get_selectable_fd(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_get_required_select_timeout(arg1: *mut pcap_t) -> *const timeval;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_rmtauth {
    pub type_: ::std::os::raw::c_int,
    pub username: *mut ::std::os::raw::c_char,
    pub password: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_rmtauth"][::std::mem::size_of::<pcap_rmtauth>() - 24usize];
    ["Alignment of pcap_rmtauth"][::std::mem::align_of::<pcap_rmtauth>() - 8usize];
    ["Offset of field: pcap_rmtauth::type_"][::std::mem::offset_of!(pcap_rmtauth, type_) - 0usize];
    ["Offset of field: pcap_rmtauth::username"]
        [::std::mem::offset_of!(pcap_rmtauth, username) - 8usize];
    ["Offset of field: pcap_rmtauth::password"]
        [::std::mem::offset_of!(pcap_rmtauth, password) - 16usize];
};
unsafe extern "C" {
    pub fn pcap_open(
        source: *const ::std::os::raw::c_char,
        snaplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        read_timeout: ::std::os::raw::c_int,
        auth: *mut pcap_rmtauth,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_createsrcstr(
        source: *mut ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_parsesrcstr(
        source: *const ::std::os::raw::c_char,
        type_: *mut ::std::os::raw::c_int,
        host: *mut ::std::os::raw::c_char,
        port: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_findalldevs_ex(
        source: *const ::std::os::raw::c_char,
        auth: *mut pcap_rmtauth,
        alldevs: *mut *mut pcap_if_t,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_samp {
    pub method: ::std::os::raw::c_int,
    pub value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_samp"][::std::mem::size_of::<pcap_samp>() - 8usize];
    ["Alignment of pcap_samp"][::std::mem::align_of::<pcap_samp>() - 4usize];
    ["Offset of field: pcap_samp::method"][::std::mem::offset_of!(pcap_samp, method) - 0usize];
    ["Offset of field: pcap_samp::value"][::std::mem::offset_of!(pcap_samp, value) - 4usize];
};
unsafe extern "C" {
    pub fn pcap_setsampling(p: *mut pcap_t) -> *mut pcap_samp;
}
unsafe extern "C" {
    pub fn pcap_remoteact_accept(
        address: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        hostlist: *const ::std::os::raw::c_char,
        connectinghost: *mut ::std::os::raw::c_char,
        auth: *mut pcap_rmtauth,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_remoteact_accept_ex(
        address: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        hostlist: *const ::std::os::raw::c_char,
        connectinghost: *mut ::std::os::raw::c_char,
        auth: *mut pcap_rmtauth,
        uses_ssl: ::std::os::raw::c_int,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_remoteact_list(
        hostlist: *mut ::std::os::raw::c_char,
        sep: ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_remoteact_close(
        host: *const ::std::os::raw::c_char,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_remoteact_cleanup();
}
unsafe extern "C" {
    pub fn pcap_apple_set_exthdr(
        p: *mut pcap_t,
        arg1: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_get_selectable_fd_list(
        arg1: *mut pcap_t,
        arg2: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_free_selectable_fd_list(arg1: *mut ::std::os::raw::c_int);
}
#[doc = " pointer structure to Tx and Rx stacks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_stackT {
    #[doc = " socket connection used"]
    pub sock: *mut *mut pcap_t,
    #[doc = " tx buffer"]
    pub txbuf: *mut [ec_bufT; 16usize],
    #[doc = " tx buffer lengths"]
    pub txbuflength: *mut [::std::os::raw::c_int; 16usize],
    #[doc = " temporary receive buffer"]
    pub tempbuf: *mut ec_bufT,
    #[doc = " rx buffers"]
    pub rxbuf: *mut [ec_bufT; 16usize],
    #[doc = " rx buffer status fields"]
    pub rxbufstat: *mut [::std::os::raw::c_int; 16usize],
    #[doc = " received MAC source address (middle word)"]
    pub rxsa: *mut [::std::os::raw::c_int; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_stackT"][::std::mem::size_of::<ec_stackT>() - 56usize];
    ["Alignment of ec_stackT"][::std::mem::align_of::<ec_stackT>() - 8usize];
    ["Offset of field: ec_stackT::sock"][::std::mem::offset_of!(ec_stackT, sock) - 0usize];
    ["Offset of field: ec_stackT::txbuf"][::std::mem::offset_of!(ec_stackT, txbuf) - 8usize];
    ["Offset of field: ec_stackT::txbuflength"]
        [::std::mem::offset_of!(ec_stackT, txbuflength) - 16usize];
    ["Offset of field: ec_stackT::tempbuf"][::std::mem::offset_of!(ec_stackT, tempbuf) - 24usize];
    ["Offset of field: ec_stackT::rxbuf"][::std::mem::offset_of!(ec_stackT, rxbuf) - 32usize];
    ["Offset of field: ec_stackT::rxbufstat"]
        [::std::mem::offset_of!(ec_stackT, rxbufstat) - 40usize];
    ["Offset of field: ec_stackT::rxsa"][::std::mem::offset_of!(ec_stackT, rxsa) - 48usize];
};
#[doc = " pointer structure to buffers for redundant port"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecx_redportt {
    pub stack: ec_stackT,
    pub sockhandle: *mut pcap_t,
    #[doc = " rx buffers"]
    pub rxbuf: [ec_bufT; 16usize],
    #[doc = " rx buffer status"]
    pub rxbufstat: [::std::os::raw::c_int; 16usize],
    #[doc = " rx MAC source address"]
    pub rxsa: [::std::os::raw::c_int; 16usize],
    #[doc = " temporary rx buffer"]
    pub tempinbuf: ec_bufT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecx_redportt"][::std::mem::size_of::<ecx_redportt>() - 26000usize];
    ["Alignment of ecx_redportt"][::std::mem::align_of::<ecx_redportt>() - 8usize];
    ["Offset of field: ecx_redportt::stack"][::std::mem::offset_of!(ecx_redportt, stack) - 0usize];
    ["Offset of field: ecx_redportt::sockhandle"]
        [::std::mem::offset_of!(ecx_redportt, sockhandle) - 56usize];
    ["Offset of field: ecx_redportt::rxbuf"][::std::mem::offset_of!(ecx_redportt, rxbuf) - 64usize];
    ["Offset of field: ecx_redportt::rxbufstat"]
        [::std::mem::offset_of!(ecx_redportt, rxbufstat) - 24352usize];
    ["Offset of field: ecx_redportt::rxsa"]
        [::std::mem::offset_of!(ecx_redportt, rxsa) - 24416usize];
    ["Offset of field: ecx_redportt::tempinbuf"]
        [::std::mem::offset_of!(ecx_redportt, tempinbuf) - 24480usize];
};
#[doc = " pointer structure to buffers, vars and mutexes for port instantiation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecx_portt {
    pub stack: ec_stackT,
    pub sockhandle: *mut pcap_t,
    #[doc = " rx buffers"]
    pub rxbuf: [ec_bufT; 16usize],
    #[doc = " rx buffer status"]
    pub rxbufstat: [::std::os::raw::c_int; 16usize],
    #[doc = " rx MAC source address"]
    pub rxsa: [::std::os::raw::c_int; 16usize],
    #[doc = " temporary rx buffer"]
    pub tempinbuf: ec_bufT,
    #[doc = " temporary rx buffer status"]
    pub tempinbufs: ::std::os::raw::c_int,
    #[doc = " transmit buffers"]
    pub txbuf: [ec_bufT; 16usize],
    #[doc = " transmit buffer lenghts"]
    pub txbuflength: [::std::os::raw::c_int; 16usize],
    #[doc = " temporary tx buffer"]
    pub txbuf2: ec_bufT,
    #[doc = " temporary tx buffer length"]
    pub txbuflength2: ::std::os::raw::c_int,
    #[doc = " last used frame index"]
    pub lastidx: uint8,
    #[doc = " current redundancy state"]
    pub redstate: ::std::os::raw::c_int,
    #[doc = " pointer to redundancy port and buffers"]
    pub redport: *mut ecx_redportt,
    pub getindex_mutex: pthread_mutex_t,
    pub tx_mutex: pthread_mutex_t,
    pub rx_mutex: pthread_mutex_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecx_portt"][::std::mem::size_of::<ecx_portt>() - 52088usize];
    ["Alignment of ecx_portt"][::std::mem::align_of::<ecx_portt>() - 8usize];
    ["Offset of field: ecx_portt::stack"][::std::mem::offset_of!(ecx_portt, stack) - 0usize];
    ["Offset of field: ecx_portt::sockhandle"]
        [::std::mem::offset_of!(ecx_portt, sockhandle) - 56usize];
    ["Offset of field: ecx_portt::rxbuf"][::std::mem::offset_of!(ecx_portt, rxbuf) - 64usize];
    ["Offset of field: ecx_portt::rxbufstat"]
        [::std::mem::offset_of!(ecx_portt, rxbufstat) - 24352usize];
    ["Offset of field: ecx_portt::rxsa"][::std::mem::offset_of!(ecx_portt, rxsa) - 24416usize];
    ["Offset of field: ecx_portt::tempinbuf"]
        [::std::mem::offset_of!(ecx_portt, tempinbuf) - 24480usize];
    ["Offset of field: ecx_portt::tempinbufs"]
        [::std::mem::offset_of!(ecx_portt, tempinbufs) - 26000usize];
    ["Offset of field: ecx_portt::txbuf"][::std::mem::offset_of!(ecx_portt, txbuf) - 26004usize];
    ["Offset of field: ecx_portt::txbuflength"]
        [::std::mem::offset_of!(ecx_portt, txbuflength) - 50292usize];
    ["Offset of field: ecx_portt::txbuf2"][::std::mem::offset_of!(ecx_portt, txbuf2) - 50356usize];
    ["Offset of field: ecx_portt::txbuflength2"]
        [::std::mem::offset_of!(ecx_portt, txbuflength2) - 51876usize];
    ["Offset of field: ecx_portt::lastidx"]
        [::std::mem::offset_of!(ecx_portt, lastidx) - 51880usize];
    ["Offset of field: ecx_portt::redstate"]
        [::std::mem::offset_of!(ecx_portt, redstate) - 51884usize];
    ["Offset of field: ecx_portt::redport"]
        [::std::mem::offset_of!(ecx_portt, redport) - 51888usize];
    ["Offset of field: ecx_portt::getindex_mutex"]
        [::std::mem::offset_of!(ecx_portt, getindex_mutex) - 51896usize];
    ["Offset of field: ecx_portt::tx_mutex"]
        [::std::mem::offset_of!(ecx_portt, tx_mutex) - 51960usize];
    ["Offset of field: ecx_portt::rx_mutex"]
        [::std::mem::offset_of!(ecx_portt, rx_mutex) - 52024usize];
};
unsafe extern "C" {
    pub static priMAC: [uint16; 3usize];
}
unsafe extern "C" {
    pub static secMAC: [uint16; 3usize];
}
unsafe extern "C" {
    pub static mut ecx_port: ecx_portt;
}
unsafe extern "C" {
    pub static mut ecx_redport: ecx_redportt;
}
unsafe extern "C" {
    pub fn ec_setupnic(
        ifname: *const ::std::os::raw::c_char,
        secondary: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_closenic() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_setbufstat(idx: uint8, bufstat: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ec_getindex() -> uint8;
}
unsafe extern "C" {
    pub fn ec_outframe(idx: uint8, sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_outframe_red(idx: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_waitinframe(idx: uint8, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_srconfirm(idx: uint8, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_setupheader(p: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn ecx_setupnic(
        port: *mut ecx_portt,
        ifname: *const ::std::os::raw::c_char,
        secondary: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_closenic(port: *mut ecx_portt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_setbufstat(port: *mut ecx_portt, idx: uint8, bufstat: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ecx_getindex(port: *mut ecx_portt) -> uint8;
}
unsafe extern "C" {
    pub fn ecx_outframe(
        port: *mut ecx_portt,
        idx: uint8,
        sock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_outframe_red(port: *mut ecx_portt, idx: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_waitinframe(
        port: *mut ecx_portt,
        idx: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_srconfirm(
        port: *mut ecx_portt,
        idx: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_setupdatagram(
        port: *mut ecx_portt,
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_adddatagram(
        port: *mut ecx_portt,
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        more: boolean,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_BWR(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_BRD(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_APRD(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_ARMW(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FRMW(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_APRDw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_FPRD(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FPRDw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_APWRw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_APWR(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FPWRw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FPWR(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LRW(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LRD(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LWR(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LRWDC(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        DCrs: uint16,
        DCtime: *mut int64,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_setupdatagram(
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_adddatagram(
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        more: boolean,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ec_BWR(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_BRD(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_APRD(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_ARMW(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FRMW(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_APRDw(ADP: uint16, ADO: uint16, timeout: ::std::os::raw::c_int) -> uint16;
}
unsafe extern "C" {
    pub fn ec_FPRD(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FPRDw(ADP: uint16, ADO: uint16, timeout: ::std::os::raw::c_int) -> uint16;
}
unsafe extern "C" {
    pub fn ec_APWRw(
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_APWR(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FPWRw(
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FPWR(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LRW(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LRD(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LWR(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LRWDC(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        DCrs: uint16,
        DCtime: *mut int64,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type ec_adaptert = ec_adapter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_adapter {
    pub name: [::std::os::raw::c_char; 128usize],
    pub desc: [::std::os::raw::c_char; 128usize],
    pub next: *mut ec_adaptert,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_adapter"][::std::mem::size_of::<ec_adapter>() - 264usize];
    ["Alignment of ec_adapter"][::std::mem::align_of::<ec_adapter>() - 8usize];
    ["Offset of field: ec_adapter::name"][::std::mem::offset_of!(ec_adapter, name) - 0usize];
    ["Offset of field: ec_adapter::desc"][::std::mem::offset_of!(ec_adapter, desc) - 128usize];
    ["Offset of field: ec_adapter::next"][::std::mem::offset_of!(ec_adapter, next) - 256usize];
};
#[doc = " record for FMMU"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_fmmu {
    pub LogStart: uint32,
    pub LogLength: uint16,
    pub LogStartbit: uint8,
    pub LogEndbit: uint8,
    pub PhysStart: uint16,
    pub PhysStartBit: uint8,
    pub FMMUtype: uint8,
    pub FMMUactive: uint8,
    pub unused1: uint8,
    pub unused2: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_fmmu"][::std::mem::size_of::<ec_fmmu>() - 16usize];
    ["Alignment of ec_fmmu"][::std::mem::align_of::<ec_fmmu>() - 1usize];
    ["Offset of field: ec_fmmu::LogStart"][::std::mem::offset_of!(ec_fmmu, LogStart) - 0usize];
    ["Offset of field: ec_fmmu::LogLength"][::std::mem::offset_of!(ec_fmmu, LogLength) - 4usize];
    ["Offset of field: ec_fmmu::LogStartbit"]
        [::std::mem::offset_of!(ec_fmmu, LogStartbit) - 6usize];
    ["Offset of field: ec_fmmu::LogEndbit"][::std::mem::offset_of!(ec_fmmu, LogEndbit) - 7usize];
    ["Offset of field: ec_fmmu::PhysStart"][::std::mem::offset_of!(ec_fmmu, PhysStart) - 8usize];
    ["Offset of field: ec_fmmu::PhysStartBit"]
        [::std::mem::offset_of!(ec_fmmu, PhysStartBit) - 10usize];
    ["Offset of field: ec_fmmu::FMMUtype"][::std::mem::offset_of!(ec_fmmu, FMMUtype) - 11usize];
    ["Offset of field: ec_fmmu::FMMUactive"][::std::mem::offset_of!(ec_fmmu, FMMUactive) - 12usize];
    ["Offset of field: ec_fmmu::unused1"][::std::mem::offset_of!(ec_fmmu, unused1) - 13usize];
    ["Offset of field: ec_fmmu::unused2"][::std::mem::offset_of!(ec_fmmu, unused2) - 14usize];
};
#[doc = " record for FMMU"]
pub type ec_fmmut = ec_fmmu;
#[doc = " record for sync manager"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_sm {
    pub StartAddr: uint16,
    pub SMlength: uint16,
    pub SMflags: uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_sm"][::std::mem::size_of::<ec_sm>() - 8usize];
    ["Alignment of ec_sm"][::std::mem::align_of::<ec_sm>() - 1usize];
    ["Offset of field: ec_sm::StartAddr"][::std::mem::offset_of!(ec_sm, StartAddr) - 0usize];
    ["Offset of field: ec_sm::SMlength"][::std::mem::offset_of!(ec_sm, SMlength) - 2usize];
    ["Offset of field: ec_sm::SMflags"][::std::mem::offset_of!(ec_sm, SMflags) - 4usize];
};
#[doc = " record for sync manager"]
pub type ec_smt = ec_sm;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_state_status {
    pub State: uint16,
    pub Unused: uint16,
    pub ALstatuscode: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_state_status"][::std::mem::size_of::<ec_state_status>() - 6usize];
    ["Alignment of ec_state_status"][::std::mem::align_of::<ec_state_status>() - 1usize];
    ["Offset of field: ec_state_status::State"]
        [::std::mem::offset_of!(ec_state_status, State) - 0usize];
    ["Offset of field: ec_state_status::Unused"]
        [::std::mem::offset_of!(ec_state_status, Unused) - 2usize];
    ["Offset of field: ec_state_status::ALstatuscode"]
        [::std::mem::offset_of!(ec_state_status, ALstatuscode) - 4usize];
};
#[doc = " Context structure , referenced by all ecx functions"]
pub type ecx_contextt = ecx_context;
#[doc = " for list of ethercat slaves detected"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_slave {
    #[doc = " state of slave"]
    pub state: uint16,
    #[doc = " AL status code"]
    pub ALstatuscode: uint16,
    #[doc = " Configured address"]
    pub configadr: uint16,
    #[doc = " Alias address"]
    pub aliasadr: uint16,
    #[doc = " Manufacturer from EEprom"]
    pub eep_man: uint32,
    #[doc = " ID from EEprom"]
    pub eep_id: uint32,
    #[doc = " revision from EEprom"]
    pub eep_rev: uint32,
    #[doc = " serial number from EEprom"]
    pub eep_sn: uint32,
    #[doc = " Interface type"]
    pub Itype: uint16,
    #[doc = " Device type"]
    pub Dtype: uint16,
    #[doc = " output bits"]
    pub Obits: uint16,
    #[doc = " output bytes, if Obits < 8 then Obytes = 0"]
    pub Obytes: uint32,
    #[doc = " output pointer in IOmap buffer"]
    pub outputs: *mut uint8,
    #[doc = " startbit in first output byte"]
    pub Ostartbit: uint8,
    #[doc = " input bits"]
    pub Ibits: uint16,
    #[doc = " input bytes, if Ibits < 8 then Ibytes = 0"]
    pub Ibytes: uint32,
    #[doc = " input pointer in IOmap buffer"]
    pub inputs: *mut uint8,
    #[doc = " startbit in first input byte"]
    pub Istartbit: uint8,
    #[doc = " SM structure"]
    pub SM: [ec_smt; 8usize],
    #[doc = " SM type 0=unused 1=MbxWr 2=MbxRd 3=Outputs 4=Inputs"]
    pub SMtype: [uint8; 8usize],
    #[doc = " FMMU structure"]
    pub FMMU: [ec_fmmut; 4usize],
    #[doc = " FMMU0 function"]
    pub FMMU0func: uint8,
    #[doc = " FMMU1 function"]
    pub FMMU1func: uint8,
    #[doc = " FMMU2 function"]
    pub FMMU2func: uint8,
    #[doc = " FMMU3 function"]
    pub FMMU3func: uint8,
    #[doc = " length of write mailbox in bytes, if no mailbox then 0"]
    pub mbx_l: uint16,
    #[doc = " mailbox write offset"]
    pub mbx_wo: uint16,
    #[doc = " length of read mailbox in bytes"]
    pub mbx_rl: uint16,
    #[doc = " mailbox read offset"]
    pub mbx_ro: uint16,
    #[doc = " mailbox supported protocols"]
    pub mbx_proto: uint16,
    #[doc = " Counter value of mailbox link layer protocol 1..7"]
    pub mbx_cnt: uint8,
    #[doc = " has DC capability"]
    pub hasdc: boolean,
    #[doc = " Physical type; Ebus, EtherNet combinations"]
    pub ptype: uint8,
    #[doc = " topology: 1 to 3 links"]
    pub topology: uint8,
    #[doc = " active ports bitmap : ....3210 , set if respective port is active"]
    pub activeports: uint8,
    #[doc = " consumed ports bitmap : ....3210, used for internal delay measurement"]
    pub consumedports: uint8,
    #[doc = " slave number for parent, 0=master"]
    pub parent: uint16,
    #[doc = " port number on parent this slave is connected to"]
    pub parentport: uint8,
    #[doc = " port number on this slave the parent is connected to"]
    pub entryport: uint8,
    #[doc = " DC receivetimes on port A"]
    pub DCrtA: int32,
    #[doc = " DC receivetimes on port B"]
    pub DCrtB: int32,
    #[doc = " DC receivetimes on port C"]
    pub DCrtC: int32,
    #[doc = " DC receivetimes on port D"]
    pub DCrtD: int32,
    #[doc = " propagation delay"]
    pub pdelay: int32,
    #[doc = " next DC slave"]
    pub DCnext: uint16,
    #[doc = " previous DC slave"]
    pub DCprevious: uint16,
    #[doc = " DC cycle time in ns"]
    pub DCcycle: int32,
    #[doc = " DC shift from clock modulus boundary"]
    pub DCshift: int32,
    #[doc = " DC sync activation, 0=off, 1=on"]
    pub DCactive: uint8,
    #[doc = " link to config table"]
    pub configindex: uint16,
    #[doc = " link to SII config"]
    pub SIIindex: uint16,
    #[doc = " 1 = 8 bytes per read, 0 = 4 bytes per read"]
    pub eep_8byte: uint8,
    #[doc = " 0 = eeprom to master , 1 = eeprom to PDI"]
    pub eep_pdi: uint8,
    #[doc = " CoE details"]
    pub CoEdetails: uint8,
    #[doc = " FoE details"]
    pub FoEdetails: uint8,
    #[doc = " EoE details"]
    pub EoEdetails: uint8,
    #[doc = " SoE details"]
    pub SoEdetails: uint8,
    #[doc = " E-bus current"]
    pub Ebuscurrent: int16,
    #[doc = " if >0 block use of LRW in processdata"]
    pub blockLRW: uint8,
    #[doc = " group"]
    pub group: uint8,
    #[doc = " first unused FMMU"]
    pub FMMUunused: uint8,
    #[doc = " Boolean for tracking whether the slave is (not) responding, not used/set by the SOEM library"]
    pub islost: boolean,
    #[doc = " registered configuration function PO->SO, (DEPRECATED)"]
    pub PO2SOconfig:
        ::std::option::Option<unsafe extern "C" fn(slave: uint16) -> ::std::os::raw::c_int>,
    #[doc = " registered configuration function PO->SO"]
    pub PO2SOconfigx: ::std::option::Option<
        unsafe extern "C" fn(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int,
    >,
    #[doc = " readable name"]
    pub name: [::std::os::raw::c_char; 41usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_slave"][::std::mem::size_of::<ec_slave>() - 344usize];
    ["Alignment of ec_slave"][::std::mem::align_of::<ec_slave>() - 8usize];
    ["Offset of field: ec_slave::state"][::std::mem::offset_of!(ec_slave, state) - 0usize];
    ["Offset of field: ec_slave::ALstatuscode"]
        [::std::mem::offset_of!(ec_slave, ALstatuscode) - 2usize];
    ["Offset of field: ec_slave::configadr"][::std::mem::offset_of!(ec_slave, configadr) - 4usize];
    ["Offset of field: ec_slave::aliasadr"][::std::mem::offset_of!(ec_slave, aliasadr) - 6usize];
    ["Offset of field: ec_slave::eep_man"][::std::mem::offset_of!(ec_slave, eep_man) - 8usize];
    ["Offset of field: ec_slave::eep_id"][::std::mem::offset_of!(ec_slave, eep_id) - 12usize];
    ["Offset of field: ec_slave::eep_rev"][::std::mem::offset_of!(ec_slave, eep_rev) - 16usize];
    ["Offset of field: ec_slave::eep_sn"][::std::mem::offset_of!(ec_slave, eep_sn) - 20usize];
    ["Offset of field: ec_slave::Itype"][::std::mem::offset_of!(ec_slave, Itype) - 24usize];
    ["Offset of field: ec_slave::Dtype"][::std::mem::offset_of!(ec_slave, Dtype) - 26usize];
    ["Offset of field: ec_slave::Obits"][::std::mem::offset_of!(ec_slave, Obits) - 28usize];
    ["Offset of field: ec_slave::Obytes"][::std::mem::offset_of!(ec_slave, Obytes) - 32usize];
    ["Offset of field: ec_slave::outputs"][::std::mem::offset_of!(ec_slave, outputs) - 40usize];
    ["Offset of field: ec_slave::Ostartbit"][::std::mem::offset_of!(ec_slave, Ostartbit) - 48usize];
    ["Offset of field: ec_slave::Ibits"][::std::mem::offset_of!(ec_slave, Ibits) - 50usize];
    ["Offset of field: ec_slave::Ibytes"][::std::mem::offset_of!(ec_slave, Ibytes) - 52usize];
    ["Offset of field: ec_slave::inputs"][::std::mem::offset_of!(ec_slave, inputs) - 56usize];
    ["Offset of field: ec_slave::Istartbit"][::std::mem::offset_of!(ec_slave, Istartbit) - 64usize];
    ["Offset of field: ec_slave::SM"][::std::mem::offset_of!(ec_slave, SM) - 65usize];
    ["Offset of field: ec_slave::SMtype"][::std::mem::offset_of!(ec_slave, SMtype) - 129usize];
    ["Offset of field: ec_slave::FMMU"][::std::mem::offset_of!(ec_slave, FMMU) - 137usize];
    ["Offset of field: ec_slave::FMMU0func"]
        [::std::mem::offset_of!(ec_slave, FMMU0func) - 201usize];
    ["Offset of field: ec_slave::FMMU1func"]
        [::std::mem::offset_of!(ec_slave, FMMU1func) - 202usize];
    ["Offset of field: ec_slave::FMMU2func"]
        [::std::mem::offset_of!(ec_slave, FMMU2func) - 203usize];
    ["Offset of field: ec_slave::FMMU3func"]
        [::std::mem::offset_of!(ec_slave, FMMU3func) - 204usize];
    ["Offset of field: ec_slave::mbx_l"][::std::mem::offset_of!(ec_slave, mbx_l) - 206usize];
    ["Offset of field: ec_slave::mbx_wo"][::std::mem::offset_of!(ec_slave, mbx_wo) - 208usize];
    ["Offset of field: ec_slave::mbx_rl"][::std::mem::offset_of!(ec_slave, mbx_rl) - 210usize];
    ["Offset of field: ec_slave::mbx_ro"][::std::mem::offset_of!(ec_slave, mbx_ro) - 212usize];
    ["Offset of field: ec_slave::mbx_proto"]
        [::std::mem::offset_of!(ec_slave, mbx_proto) - 214usize];
    ["Offset of field: ec_slave::mbx_cnt"][::std::mem::offset_of!(ec_slave, mbx_cnt) - 216usize];
    ["Offset of field: ec_slave::hasdc"][::std::mem::offset_of!(ec_slave, hasdc) - 217usize];
    ["Offset of field: ec_slave::ptype"][::std::mem::offset_of!(ec_slave, ptype) - 218usize];
    ["Offset of field: ec_slave::topology"][::std::mem::offset_of!(ec_slave, topology) - 219usize];
    ["Offset of field: ec_slave::activeports"]
        [::std::mem::offset_of!(ec_slave, activeports) - 220usize];
    ["Offset of field: ec_slave::consumedports"]
        [::std::mem::offset_of!(ec_slave, consumedports) - 221usize];
    ["Offset of field: ec_slave::parent"][::std::mem::offset_of!(ec_slave, parent) - 222usize];
    ["Offset of field: ec_slave::parentport"]
        [::std::mem::offset_of!(ec_slave, parentport) - 224usize];
    ["Offset of field: ec_slave::entryport"]
        [::std::mem::offset_of!(ec_slave, entryport) - 225usize];
    ["Offset of field: ec_slave::DCrtA"][::std::mem::offset_of!(ec_slave, DCrtA) - 228usize];
    ["Offset of field: ec_slave::DCrtB"][::std::mem::offset_of!(ec_slave, DCrtB) - 232usize];
    ["Offset of field: ec_slave::DCrtC"][::std::mem::offset_of!(ec_slave, DCrtC) - 236usize];
    ["Offset of field: ec_slave::DCrtD"][::std::mem::offset_of!(ec_slave, DCrtD) - 240usize];
    ["Offset of field: ec_slave::pdelay"][::std::mem::offset_of!(ec_slave, pdelay) - 244usize];
    ["Offset of field: ec_slave::DCnext"][::std::mem::offset_of!(ec_slave, DCnext) - 248usize];
    ["Offset of field: ec_slave::DCprevious"]
        [::std::mem::offset_of!(ec_slave, DCprevious) - 250usize];
    ["Offset of field: ec_slave::DCcycle"][::std::mem::offset_of!(ec_slave, DCcycle) - 252usize];
    ["Offset of field: ec_slave::DCshift"][::std::mem::offset_of!(ec_slave, DCshift) - 256usize];
    ["Offset of field: ec_slave::DCactive"][::std::mem::offset_of!(ec_slave, DCactive) - 260usize];
    ["Offset of field: ec_slave::configindex"]
        [::std::mem::offset_of!(ec_slave, configindex) - 262usize];
    ["Offset of field: ec_slave::SIIindex"][::std::mem::offset_of!(ec_slave, SIIindex) - 264usize];
    ["Offset of field: ec_slave::eep_8byte"]
        [::std::mem::offset_of!(ec_slave, eep_8byte) - 266usize];
    ["Offset of field: ec_slave::eep_pdi"][::std::mem::offset_of!(ec_slave, eep_pdi) - 267usize];
    ["Offset of field: ec_slave::CoEdetails"]
        [::std::mem::offset_of!(ec_slave, CoEdetails) - 268usize];
    ["Offset of field: ec_slave::FoEdetails"]
        [::std::mem::offset_of!(ec_slave, FoEdetails) - 269usize];
    ["Offset of field: ec_slave::EoEdetails"]
        [::std::mem::offset_of!(ec_slave, EoEdetails) - 270usize];
    ["Offset of field: ec_slave::SoEdetails"]
        [::std::mem::offset_of!(ec_slave, SoEdetails) - 271usize];
    ["Offset of field: ec_slave::Ebuscurrent"]
        [::std::mem::offset_of!(ec_slave, Ebuscurrent) - 272usize];
    ["Offset of field: ec_slave::blockLRW"][::std::mem::offset_of!(ec_slave, blockLRW) - 274usize];
    ["Offset of field: ec_slave::group"][::std::mem::offset_of!(ec_slave, group) - 275usize];
    ["Offset of field: ec_slave::FMMUunused"]
        [::std::mem::offset_of!(ec_slave, FMMUunused) - 276usize];
    ["Offset of field: ec_slave::islost"][::std::mem::offset_of!(ec_slave, islost) - 277usize];
    ["Offset of field: ec_slave::PO2SOconfig"]
        [::std::mem::offset_of!(ec_slave, PO2SOconfig) - 280usize];
    ["Offset of field: ec_slave::PO2SOconfigx"]
        [::std::mem::offset_of!(ec_slave, PO2SOconfigx) - 288usize];
    ["Offset of field: ec_slave::name"][::std::mem::offset_of!(ec_slave, name) - 296usize];
};
#[doc = " for list of ethercat slaves detected"]
pub type ec_slavet = ec_slave;
#[doc = " for list of ethercat slave groups"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_group {
    #[doc = " logical start address for this group"]
    pub logstartaddr: uint32,
    #[doc = " output bytes, if Obits < 8 then Obytes = 0"]
    pub Obytes: uint32,
    #[doc = " output pointer in IOmap buffer"]
    pub outputs: *mut uint8,
    #[doc = " input bytes, if Ibits < 8 then Ibytes = 0"]
    pub Ibytes: uint32,
    #[doc = " input pointer in IOmap buffer"]
    pub inputs: *mut uint8,
    #[doc = " has DC capabillity"]
    pub hasdc: boolean,
    #[doc = " next DC slave"]
    pub DCnext: uint16,
    #[doc = " E-bus current"]
    pub Ebuscurrent: int16,
    #[doc = " if >0 block use of LRW in processdata"]
    pub blockLRW: uint8,
    #[doc = " IO segments used"]
    pub nsegments: uint16,
    #[doc = " 1st input segment"]
    pub Isegment: uint16,
    #[doc = " Offset in input segment"]
    pub Ioffset: uint16,
    #[doc = " Expected workcounter outputs"]
    pub outputsWKC: uint16,
    #[doc = " Expected workcounter inputs"]
    pub inputsWKC: uint16,
    #[doc = " check slave states"]
    pub docheckstate: boolean,
    #[doc = " IO segmentation list. Datagrams must not break SM in two."]
    pub IOsegment: [uint32; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_group"][::std::mem::size_of::<ec_group>() - 312usize];
    ["Alignment of ec_group"][::std::mem::align_of::<ec_group>() - 8usize];
    ["Offset of field: ec_group::logstartaddr"]
        [::std::mem::offset_of!(ec_group, logstartaddr) - 0usize];
    ["Offset of field: ec_group::Obytes"][::std::mem::offset_of!(ec_group, Obytes) - 4usize];
    ["Offset of field: ec_group::outputs"][::std::mem::offset_of!(ec_group, outputs) - 8usize];
    ["Offset of field: ec_group::Ibytes"][::std::mem::offset_of!(ec_group, Ibytes) - 16usize];
    ["Offset of field: ec_group::inputs"][::std::mem::offset_of!(ec_group, inputs) - 24usize];
    ["Offset of field: ec_group::hasdc"][::std::mem::offset_of!(ec_group, hasdc) - 32usize];
    ["Offset of field: ec_group::DCnext"][::std::mem::offset_of!(ec_group, DCnext) - 34usize];
    ["Offset of field: ec_group::Ebuscurrent"]
        [::std::mem::offset_of!(ec_group, Ebuscurrent) - 36usize];
    ["Offset of field: ec_group::blockLRW"][::std::mem::offset_of!(ec_group, blockLRW) - 38usize];
    ["Offset of field: ec_group::nsegments"][::std::mem::offset_of!(ec_group, nsegments) - 40usize];
    ["Offset of field: ec_group::Isegment"][::std::mem::offset_of!(ec_group, Isegment) - 42usize];
    ["Offset of field: ec_group::Ioffset"][::std::mem::offset_of!(ec_group, Ioffset) - 44usize];
    ["Offset of field: ec_group::outputsWKC"]
        [::std::mem::offset_of!(ec_group, outputsWKC) - 46usize];
    ["Offset of field: ec_group::inputsWKC"][::std::mem::offset_of!(ec_group, inputsWKC) - 48usize];
    ["Offset of field: ec_group::docheckstate"]
        [::std::mem::offset_of!(ec_group, docheckstate) - 50usize];
    ["Offset of field: ec_group::IOsegment"][::std::mem::offset_of!(ec_group, IOsegment) - 52usize];
};
#[doc = " for list of ethercat slave groups"]
pub type ec_groupt = ec_group;
#[doc = " SII FMMU structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_eepromFMMU {
    pub Startpos: uint16,
    pub nFMMU: uint8,
    pub FMMU0: uint8,
    pub FMMU1: uint8,
    pub FMMU2: uint8,
    pub FMMU3: uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_eepromFMMU"][::std::mem::size_of::<ec_eepromFMMU>() - 8usize];
    ["Alignment of ec_eepromFMMU"][::std::mem::align_of::<ec_eepromFMMU>() - 2usize];
    ["Offset of field: ec_eepromFMMU::Startpos"]
        [::std::mem::offset_of!(ec_eepromFMMU, Startpos) - 0usize];
    ["Offset of field: ec_eepromFMMU::nFMMU"]
        [::std::mem::offset_of!(ec_eepromFMMU, nFMMU) - 2usize];
    ["Offset of field: ec_eepromFMMU::FMMU0"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU0) - 3usize];
    ["Offset of field: ec_eepromFMMU::FMMU1"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU1) - 4usize];
    ["Offset of field: ec_eepromFMMU::FMMU2"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU2) - 5usize];
    ["Offset of field: ec_eepromFMMU::FMMU3"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU3) - 6usize];
};
#[doc = " SII FMMU structure"]
pub type ec_eepromFMMUt = ec_eepromFMMU;
#[doc = " SII SM structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_eepromSM {
    pub Startpos: uint16,
    pub nSM: uint8,
    pub PhStart: uint16,
    pub Plength: uint16,
    pub Creg: uint8,
    pub Sreg: uint8,
    pub Activate: uint8,
    pub PDIctrl: uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_eepromSM"][::std::mem::size_of::<ec_eepromSM>() - 12usize];
    ["Alignment of ec_eepromSM"][::std::mem::align_of::<ec_eepromSM>() - 2usize];
    ["Offset of field: ec_eepromSM::Startpos"]
        [::std::mem::offset_of!(ec_eepromSM, Startpos) - 0usize];
    ["Offset of field: ec_eepromSM::nSM"][::std::mem::offset_of!(ec_eepromSM, nSM) - 2usize];
    ["Offset of field: ec_eepromSM::PhStart"]
        [::std::mem::offset_of!(ec_eepromSM, PhStart) - 4usize];
    ["Offset of field: ec_eepromSM::Plength"]
        [::std::mem::offset_of!(ec_eepromSM, Plength) - 6usize];
    ["Offset of field: ec_eepromSM::Creg"][::std::mem::offset_of!(ec_eepromSM, Creg) - 8usize];
    ["Offset of field: ec_eepromSM::Sreg"][::std::mem::offset_of!(ec_eepromSM, Sreg) - 9usize];
    ["Offset of field: ec_eepromSM::Activate"]
        [::std::mem::offset_of!(ec_eepromSM, Activate) - 10usize];
    ["Offset of field: ec_eepromSM::PDIctrl"]
        [::std::mem::offset_of!(ec_eepromSM, PDIctrl) - 11usize];
};
#[doc = " SII SM structure"]
pub type ec_eepromSMt = ec_eepromSM;
#[doc = " record to store rxPDO and txPDO table from eeprom"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_eepromPDO {
    pub Startpos: uint16,
    pub Length: uint16,
    pub nPDO: uint16,
    pub Index: [uint16; 512usize],
    pub SyncM: [uint16; 512usize],
    pub BitSize: [uint16; 512usize],
    pub SMbitsize: [uint16; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_eepromPDO"][::std::mem::size_of::<ec_eepromPDO>() - 3094usize];
    ["Alignment of ec_eepromPDO"][::std::mem::align_of::<ec_eepromPDO>() - 2usize];
    ["Offset of field: ec_eepromPDO::Startpos"]
        [::std::mem::offset_of!(ec_eepromPDO, Startpos) - 0usize];
    ["Offset of field: ec_eepromPDO::Length"]
        [::std::mem::offset_of!(ec_eepromPDO, Length) - 2usize];
    ["Offset of field: ec_eepromPDO::nPDO"][::std::mem::offset_of!(ec_eepromPDO, nPDO) - 4usize];
    ["Offset of field: ec_eepromPDO::Index"][::std::mem::offset_of!(ec_eepromPDO, Index) - 6usize];
    ["Offset of field: ec_eepromPDO::SyncM"]
        [::std::mem::offset_of!(ec_eepromPDO, SyncM) - 1030usize];
    ["Offset of field: ec_eepromPDO::BitSize"]
        [::std::mem::offset_of!(ec_eepromPDO, BitSize) - 2054usize];
    ["Offset of field: ec_eepromPDO::SMbitsize"]
        [::std::mem::offset_of!(ec_eepromPDO, SMbitsize) - 3078usize];
};
#[doc = " record to store rxPDO and txPDO table from eeprom"]
pub type ec_eepromPDOt = ec_eepromPDO;
#[doc = " mailbox buffer array"]
pub type ec_mbxbuft = [uint8; 1487usize];
#[doc = " standard ethercat mailbox header"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_mbxheader {
    pub length: uint16,
    pub address: uint16,
    pub priority: uint8,
    pub mbxtype: uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_mbxheader"][::std::mem::size_of::<ec_mbxheader>() - 6usize];
    ["Alignment of ec_mbxheader"][::std::mem::align_of::<ec_mbxheader>() - 1usize];
    ["Offset of field: ec_mbxheader::length"]
        [::std::mem::offset_of!(ec_mbxheader, length) - 0usize];
    ["Offset of field: ec_mbxheader::address"]
        [::std::mem::offset_of!(ec_mbxheader, address) - 2usize];
    ["Offset of field: ec_mbxheader::priority"]
        [::std::mem::offset_of!(ec_mbxheader, priority) - 4usize];
    ["Offset of field: ec_mbxheader::mbxtype"]
        [::std::mem::offset_of!(ec_mbxheader, mbxtype) - 5usize];
};
#[doc = " standard ethercat mailbox header"]
pub type ec_mbxheadert = ec_mbxheader;
#[doc = " ALstatus and ALstatus code"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_alstatus {
    pub alstatus: uint16,
    pub unused: uint16,
    pub alstatuscode: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_alstatus"][::std::mem::size_of::<ec_alstatus>() - 6usize];
    ["Alignment of ec_alstatus"][::std::mem::align_of::<ec_alstatus>() - 1usize];
    ["Offset of field: ec_alstatus::alstatus"]
        [::std::mem::offset_of!(ec_alstatus, alstatus) - 0usize];
    ["Offset of field: ec_alstatus::unused"][::std::mem::offset_of!(ec_alstatus, unused) - 2usize];
    ["Offset of field: ec_alstatus::alstatuscode"]
        [::std::mem::offset_of!(ec_alstatus, alstatuscode) - 4usize];
};
#[doc = " ALstatus and ALstatus code"]
pub type ec_alstatust = ec_alstatus;
#[doc = " stack structure to store segmented LRD/LWR/LRW constructs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_idxstack {
    pub pushed: uint8,
    pub pulled: uint8,
    pub idx: [uint8; 16usize],
    pub data: [*mut ::std::os::raw::c_void; 16usize],
    pub length: [uint16; 16usize],
    pub dcoffset: [uint16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_idxstack"][::std::mem::size_of::<ec_idxstack>() - 216usize];
    ["Alignment of ec_idxstack"][::std::mem::align_of::<ec_idxstack>() - 8usize];
    ["Offset of field: ec_idxstack::pushed"][::std::mem::offset_of!(ec_idxstack, pushed) - 0usize];
    ["Offset of field: ec_idxstack::pulled"][::std::mem::offset_of!(ec_idxstack, pulled) - 1usize];
    ["Offset of field: ec_idxstack::idx"][::std::mem::offset_of!(ec_idxstack, idx) - 2usize];
    ["Offset of field: ec_idxstack::data"][::std::mem::offset_of!(ec_idxstack, data) - 24usize];
    ["Offset of field: ec_idxstack::length"]
        [::std::mem::offset_of!(ec_idxstack, length) - 152usize];
    ["Offset of field: ec_idxstack::dcoffset"]
        [::std::mem::offset_of!(ec_idxstack, dcoffset) - 184usize];
};
#[doc = " stack structure to store segmented LRD/LWR/LRW constructs"]
pub type ec_idxstackT = ec_idxstack;
#[doc = " ringbuf for error storage"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_ering {
    pub head: int16,
    pub tail: int16,
    pub Error: [ec_errort; 65usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_ering"][::std::mem::size_of::<ec_ering>() - 1824usize];
    ["Alignment of ec_ering"][::std::mem::align_of::<ec_ering>() - 4usize];
    ["Offset of field: ec_ering::head"][::std::mem::offset_of!(ec_ering, head) - 0usize];
    ["Offset of field: ec_ering::tail"][::std::mem::offset_of!(ec_ering, tail) - 2usize];
    ["Offset of field: ec_ering::Error"][::std::mem::offset_of!(ec_ering, Error) - 4usize];
};
#[doc = " ringbuf for error storage"]
pub type ec_eringt = ec_ering;
#[doc = " SyncManager Communication Type structure for CA"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SMcommtype {
    pub n: uint8,
    pub nu1: uint8,
    pub SMtype: [uint8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SMcommtype"][::std::mem::size_of::<ec_SMcommtype>() - 10usize];
    ["Alignment of ec_SMcommtype"][::std::mem::align_of::<ec_SMcommtype>() - 1usize];
    ["Offset of field: ec_SMcommtype::n"][::std::mem::offset_of!(ec_SMcommtype, n) - 0usize];
    ["Offset of field: ec_SMcommtype::nu1"][::std::mem::offset_of!(ec_SMcommtype, nu1) - 1usize];
    ["Offset of field: ec_SMcommtype::SMtype"]
        [::std::mem::offset_of!(ec_SMcommtype, SMtype) - 2usize];
};
#[doc = " SyncManager Communication Type structure for CA"]
pub type ec_SMcommtypet = ec_SMcommtype;
#[doc = " SDO assign structure for CA"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_PDOassign {
    pub n: uint8,
    pub nu1: uint8,
    pub index: [uint16; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_PDOassign"][::std::mem::size_of::<ec_PDOassign>() - 514usize];
    ["Alignment of ec_PDOassign"][::std::mem::align_of::<ec_PDOassign>() - 1usize];
    ["Offset of field: ec_PDOassign::n"][::std::mem::offset_of!(ec_PDOassign, n) - 0usize];
    ["Offset of field: ec_PDOassign::nu1"][::std::mem::offset_of!(ec_PDOassign, nu1) - 1usize];
    ["Offset of field: ec_PDOassign::index"][::std::mem::offset_of!(ec_PDOassign, index) - 2usize];
};
#[doc = " SDO assign structure for CA"]
pub type ec_PDOassignt = ec_PDOassign;
#[doc = " SDO description structure for CA"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_PDOdesc {
    pub n: uint8,
    pub nu1: uint8,
    pub PDO: [uint32; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_PDOdesc"][::std::mem::size_of::<ec_PDOdesc>() - 1026usize];
    ["Alignment of ec_PDOdesc"][::std::mem::align_of::<ec_PDOdesc>() - 1usize];
    ["Offset of field: ec_PDOdesc::n"][::std::mem::offset_of!(ec_PDOdesc, n) - 0usize];
    ["Offset of field: ec_PDOdesc::nu1"][::std::mem::offset_of!(ec_PDOdesc, nu1) - 1usize];
    ["Offset of field: ec_PDOdesc::PDO"][::std::mem::offset_of!(ec_PDOdesc, PDO) - 2usize];
};
#[doc = " SDO description structure for CA"]
pub type ec_PDOdesct = ec_PDOdesc;
#[doc = " Context structure , referenced by all ecx functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecx_context {
    #[doc = " port reference, may include red_port"]
    pub port: *mut ecx_portt,
    #[doc = " slavelist reference"]
    pub slavelist: *mut ec_slavet,
    #[doc = " number of slaves found in configuration"]
    pub slavecount: *mut ::std::os::raw::c_int,
    #[doc = " maximum number of slaves allowed in slavelist"]
    pub maxslave: ::std::os::raw::c_int,
    #[doc = " grouplist reference"]
    pub grouplist: *mut ec_groupt,
    #[doc = " maximum number of groups allowed in grouplist"]
    pub maxgroup: ::std::os::raw::c_int,
    #[doc = " internal, reference to eeprom cache buffer"]
    pub esibuf: *mut uint8,
    #[doc = " internal, reference to eeprom cache map"]
    pub esimap: *mut uint32,
    #[doc = " internal, current slave for eeprom cache"]
    pub esislave: uint16,
    #[doc = " internal, reference to error list"]
    pub elist: *mut ec_eringt,
    #[doc = " internal, reference to processdata stack buffer info"]
    pub idxstack: *mut ec_idxstackT,
    #[doc = " reference to ecaterror state"]
    pub ecaterror: *mut boolean,
    #[doc = " reference to last DC time from slaves"]
    pub DCtime: *mut int64,
    #[doc = " internal, SM buffer"]
    pub SMcommtype: *mut ec_SMcommtypet,
    #[doc = " internal, PDO assign list"]
    pub PDOassign: *mut ec_PDOassignt,
    #[doc = " internal, PDO description list"]
    pub PDOdesc: *mut ec_PDOdesct,
    #[doc = " internal, SM list from eeprom"]
    pub eepSM: *mut ec_eepromSMt,
    #[doc = " internal, FMMU list from eeprom"]
    pub eepFMMU: *mut ec_eepromFMMUt,
    #[doc = " registered FoE hook"]
    pub FOEhook: ::std::option::Option<
        unsafe extern "C" fn(
            slave: uint16,
            packetnumber: ::std::os::raw::c_int,
            datasize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " registered EoE hook"]
    pub EOEhook: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ecx_contextt,
            slave: uint16,
            eoembx: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " flag to control legacy automatic state change or manual state change"]
    pub manualstatechange: ::std::os::raw::c_int,
    #[doc = " userdata, promotes application configuration esp. in EC_VER2 with multiple\n ec_context instances. Note: userdata memory is managed by application, not SOEM"]
    pub userdata: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecx_context"][::std::mem::size_of::<ecx_context>() - 176usize];
    ["Alignment of ecx_context"][::std::mem::align_of::<ecx_context>() - 8usize];
    ["Offset of field: ecx_context::port"][::std::mem::offset_of!(ecx_context, port) - 0usize];
    ["Offset of field: ecx_context::slavelist"]
        [::std::mem::offset_of!(ecx_context, slavelist) - 8usize];
    ["Offset of field: ecx_context::slavecount"]
        [::std::mem::offset_of!(ecx_context, slavecount) - 16usize];
    ["Offset of field: ecx_context::maxslave"]
        [::std::mem::offset_of!(ecx_context, maxslave) - 24usize];
    ["Offset of field: ecx_context::grouplist"]
        [::std::mem::offset_of!(ecx_context, grouplist) - 32usize];
    ["Offset of field: ecx_context::maxgroup"]
        [::std::mem::offset_of!(ecx_context, maxgroup) - 40usize];
    ["Offset of field: ecx_context::esibuf"][::std::mem::offset_of!(ecx_context, esibuf) - 48usize];
    ["Offset of field: ecx_context::esimap"][::std::mem::offset_of!(ecx_context, esimap) - 56usize];
    ["Offset of field: ecx_context::esislave"]
        [::std::mem::offset_of!(ecx_context, esislave) - 64usize];
    ["Offset of field: ecx_context::elist"][::std::mem::offset_of!(ecx_context, elist) - 72usize];
    ["Offset of field: ecx_context::idxstack"]
        [::std::mem::offset_of!(ecx_context, idxstack) - 80usize];
    ["Offset of field: ecx_context::ecaterror"]
        [::std::mem::offset_of!(ecx_context, ecaterror) - 88usize];
    ["Offset of field: ecx_context::DCtime"][::std::mem::offset_of!(ecx_context, DCtime) - 96usize];
    ["Offset of field: ecx_context::SMcommtype"]
        [::std::mem::offset_of!(ecx_context, SMcommtype) - 104usize];
    ["Offset of field: ecx_context::PDOassign"]
        [::std::mem::offset_of!(ecx_context, PDOassign) - 112usize];
    ["Offset of field: ecx_context::PDOdesc"]
        [::std::mem::offset_of!(ecx_context, PDOdesc) - 120usize];
    ["Offset of field: ecx_context::eepSM"][::std::mem::offset_of!(ecx_context, eepSM) - 128usize];
    ["Offset of field: ecx_context::eepFMMU"]
        [::std::mem::offset_of!(ecx_context, eepFMMU) - 136usize];
    ["Offset of field: ecx_context::FOEhook"]
        [::std::mem::offset_of!(ecx_context, FOEhook) - 144usize];
    ["Offset of field: ecx_context::EOEhook"]
        [::std::mem::offset_of!(ecx_context, EOEhook) - 152usize];
    ["Offset of field: ecx_context::manualstatechange"]
        [::std::mem::offset_of!(ecx_context, manualstatechange) - 160usize];
    ["Offset of field: ecx_context::userdata"]
        [::std::mem::offset_of!(ecx_context, userdata) - 168usize];
};
unsafe extern "C" {
    #[doc = " global struct to hold default master context"]
    pub static mut ecx_context: ecx_contextt;
}
unsafe extern "C" {
    #[doc = " main slave data structure array"]
    pub static mut ec_slave: [ec_slavet; 200usize];
}
unsafe extern "C" {
    #[doc = " number of slaves found by configuration function"]
    pub static mut ec_slavecount: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " slave group structure"]
    pub static mut ec_group: [ec_groupt; 2usize];
}
unsafe extern "C" {
    pub static mut EcatError: boolean;
}
unsafe extern "C" {
    pub static mut ec_DCtime: int64;
}
unsafe extern "C" {
    pub fn ec_pusherror(Ec: *const ec_errort);
}
unsafe extern "C" {
    pub fn ec_poperror(Ec: *mut ec_errort) -> boolean;
}
unsafe extern "C" {
    pub fn ec_iserror() -> boolean;
}
unsafe extern "C" {
    pub fn ec_packeterror(Slave: uint16, Index: uint16, SubIdx: uint8, ErrorCode: uint16);
}
unsafe extern "C" {
    pub fn ec_init(ifname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_init_redundant(
        ifname: *const ::std::os::raw::c_char,
        if2name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_close();
}
unsafe extern "C" {
    pub fn ec_siigetbyte(slave: uint16, address: uint16) -> uint8;
}
unsafe extern "C" {
    pub fn ec_siifind(slave: uint16, cat: uint16) -> int16;
}
unsafe extern "C" {
    pub fn ec_siistring(str_: *mut ::std::os::raw::c_char, slave: uint16, Sn: uint16);
}
unsafe extern "C" {
    pub fn ec_siiFMMU(slave: uint16, FMMU: *mut ec_eepromFMMUt) -> uint16;
}
unsafe extern "C" {
    pub fn ec_siiSM(slave: uint16, SM: *mut ec_eepromSMt) -> uint16;
}
unsafe extern "C" {
    pub fn ec_siiSMnext(slave: uint16, SM: *mut ec_eepromSMt, n: uint16) -> uint16;
}
unsafe extern "C" {
    pub fn ec_siiPDO(slave: uint16, PDO: *mut ec_eepromPDOt, t: uint8) -> uint32;
}
unsafe extern "C" {
    pub fn ec_readstate() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_writestate(slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_statecheck(slave: uint16, reqstate: uint16, timeout: ::std::os::raw::c_int)
    -> uint16;
}
unsafe extern "C" {
    pub fn ec_mbxempty(slave: uint16, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_mbxsend(
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_mbxreceive(
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_esidump(slave: uint16, esibuf: *mut uint8);
}
unsafe extern "C" {
    pub fn ec_readeeprom(slave: uint16, eeproma: uint16, timeout: ::std::os::raw::c_int) -> uint32;
}
unsafe extern "C" {
    pub fn ec_writeeeprom(
        slave: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_eeprom2master(slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_eeprom2pdi(slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readeepromAP(
        aiadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ec_writeeepromAP(
        aiadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readeepromFP(
        configadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ec_writeeepromFP(
        configadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readeeprom1(slave: uint16, eeproma: uint16);
}
unsafe extern "C" {
    pub fn ec_readeeprom2(slave: uint16, timeout: ::std::os::raw::c_int) -> uint32;
}
unsafe extern "C" {
    pub fn ec_send_processdata_group(group: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_send_overlap_processdata_group(group: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_receive_processdata_group(
        group: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_send_processdata() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_send_overlap_processdata() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_receive_processdata(timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_find_adapters() -> *mut ec_adaptert;
}
unsafe extern "C" {
    pub fn ec_free_adapters(adapter: *mut ec_adaptert);
}
unsafe extern "C" {
    pub fn ec_nextmbxcnt(cnt: uint8) -> uint8;
}
unsafe extern "C" {
    pub fn ec_clearmbx(Mbx: *mut ec_mbxbuft);
}
unsafe extern "C" {
    pub fn ecx_pusherror(context: *mut ecx_contextt, Ec: *const ec_errort);
}
unsafe extern "C" {
    pub fn ecx_poperror(context: *mut ecx_contextt, Ec: *mut ec_errort) -> boolean;
}
unsafe extern "C" {
    pub fn ecx_iserror(context: *mut ecx_contextt) -> boolean;
}
unsafe extern "C" {
    pub fn ecx_packeterror(
        context: *mut ecx_contextt,
        Slave: uint16,
        Index: uint16,
        SubIdx: uint8,
        ErrorCode: uint16,
    );
}
unsafe extern "C" {
    pub fn ecx_init(
        context: *mut ecx_contextt,
        ifname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_init_redundant(
        context: *mut ecx_contextt,
        redport: *mut ecx_redportt,
        ifname: *const ::std::os::raw::c_char,
        if2name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_close(context: *mut ecx_contextt);
}
unsafe extern "C" {
    pub fn ecx_siigetbyte(context: *mut ecx_contextt, slave: uint16, address: uint16) -> uint8;
}
unsafe extern "C" {
    pub fn ecx_siifind(context: *mut ecx_contextt, slave: uint16, cat: uint16) -> int16;
}
unsafe extern "C" {
    pub fn ecx_siistring(
        context: *mut ecx_contextt,
        str_: *mut ::std::os::raw::c_char,
        slave: uint16,
        Sn: uint16,
    );
}
unsafe extern "C" {
    pub fn ecx_siiFMMU(
        context: *mut ecx_contextt,
        slave: uint16,
        FMMU: *mut ec_eepromFMMUt,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_siiSM(context: *mut ecx_contextt, slave: uint16, SM: *mut ec_eepromSMt) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_siiSMnext(
        context: *mut ecx_contextt,
        slave: uint16,
        SM: *mut ec_eepromSMt,
        n: uint16,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_siiPDO(
        context: *mut ecx_contextt,
        slave: uint16,
        PDO: *mut ec_eepromPDOt,
        t: uint8,
    ) -> uint32;
}
unsafe extern "C" {
    pub fn ecx_readstate(context: *mut ecx_contextt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_writestate(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_statecheck(
        context: *mut ecx_contextt,
        slave: uint16,
        reqstate: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_mbxempty(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_mbxsend(
        context: *mut ecx_contextt,
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_mbxreceive(
        context: *mut ecx_contextt,
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_esidump(context: *mut ecx_contextt, slave: uint16, esibuf: *mut uint8);
}
unsafe extern "C" {
    pub fn ecx_readeeprom(
        context: *mut ecx_contextt,
        slave: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint32;
}
unsafe extern "C" {
    pub fn ecx_writeeeprom(
        context: *mut ecx_contextt,
        slave: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_eeprom2master(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_eeprom2pdi(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readeepromAP(
        context: *mut ecx_contextt,
        aiadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ecx_writeeepromAP(
        context: *mut ecx_contextt,
        aiadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readeepromFP(
        context: *mut ecx_contextt,
        configadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ecx_writeeepromFP(
        context: *mut ecx_contextt,
        configadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readeeprom1(context: *mut ecx_contextt, slave: uint16, eeproma: uint16);
}
unsafe extern "C" {
    pub fn ecx_readeeprom2(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint32;
}
unsafe extern "C" {
    pub fn ecx_send_overlap_processdata_group(
        context: *mut ecx_contextt,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_receive_processdata_group(
        context: *mut ecx_contextt,
        group: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_send_processdata(context: *mut ecx_contextt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_send_overlap_processdata(context: *mut ecx_contextt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_receive_processdata(
        context: *mut ecx_contextt,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_send_processdata_group(
        context: *mut ecx_contextt,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_configdc() -> boolean;
}
unsafe extern "C" {
    pub fn ec_dcsync0(slave: uint16, act: boolean, CyclTime: uint32, CyclShift: int32);
}
unsafe extern "C" {
    pub fn ec_dcsync01(
        slave: uint16,
        act: boolean,
        CyclTime0: uint32,
        CyclTime1: uint32,
        CyclShift: int32,
    );
}
unsafe extern "C" {
    pub fn ecx_configdc(context: *mut ecx_contextt) -> boolean;
}
unsafe extern "C" {
    pub fn ecx_dcsync0(
        context: *mut ecx_contextt,
        slave: uint16,
        act: boolean,
        CyclTime: uint32,
        CyclShift: int32,
    );
}
unsafe extern "C" {
    pub fn ecx_dcsync01(
        context: *mut ecx_contextt,
        slave: uint16,
        act: boolean,
        CyclTime0: uint32,
        CyclTime1: uint32,
        CyclShift: int32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_ODlistt {
    #[doc = " slave number"]
    pub Slave: uint16,
    #[doc = " number of entries in list"]
    pub Entries: uint16,
    #[doc = " array of indexes"]
    pub Index: [uint16; 1024usize],
    #[doc = " array of datatypes, see EtherCAT specification"]
    pub DataType: [uint16; 1024usize],
    #[doc = " array of object codes, see EtherCAT specification"]
    pub ObjectCode: [uint8; 1024usize],
    #[doc = " number of subindexes for each index"]
    pub MaxSub: [uint8; 1024usize],
    #[doc = " textual description of each index"]
    pub Name: [[::std::os::raw::c_char; 41usize]; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_ODlistt"][::std::mem::size_of::<ec_ODlistt>() - 48132usize];
    ["Alignment of ec_ODlistt"][::std::mem::align_of::<ec_ODlistt>() - 2usize];
    ["Offset of field: ec_ODlistt::Slave"][::std::mem::offset_of!(ec_ODlistt, Slave) - 0usize];
    ["Offset of field: ec_ODlistt::Entries"][::std::mem::offset_of!(ec_ODlistt, Entries) - 2usize];
    ["Offset of field: ec_ODlistt::Index"][::std::mem::offset_of!(ec_ODlistt, Index) - 4usize];
    ["Offset of field: ec_ODlistt::DataType"]
        [::std::mem::offset_of!(ec_ODlistt, DataType) - 2052usize];
    ["Offset of field: ec_ODlistt::ObjectCode"]
        [::std::mem::offset_of!(ec_ODlistt, ObjectCode) - 4100usize];
    ["Offset of field: ec_ODlistt::MaxSub"][::std::mem::offset_of!(ec_ODlistt, MaxSub) - 5124usize];
    ["Offset of field: ec_ODlistt::Name"][::std::mem::offset_of!(ec_ODlistt, Name) - 6148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_OElistt {
    #[doc = " number of entries in list"]
    pub Entries: uint16,
    #[doc = " array of value infos, see EtherCAT specification"]
    pub ValueInfo: [uint8; 256usize],
    #[doc = " array of value infos, see EtherCAT specification"]
    pub DataType: [uint16; 256usize],
    #[doc = " array of bit lengths, see EtherCAT specification"]
    pub BitLength: [uint16; 256usize],
    #[doc = " array of object access bits, see EtherCAT specification"]
    pub ObjAccess: [uint16; 256usize],
    #[doc = " textual description of each index"]
    pub Name: [[::std::os::raw::c_char; 41usize]; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_OElistt"][::std::mem::size_of::<ec_OElistt>() - 12290usize];
    ["Alignment of ec_OElistt"][::std::mem::align_of::<ec_OElistt>() - 2usize];
    ["Offset of field: ec_OElistt::Entries"][::std::mem::offset_of!(ec_OElistt, Entries) - 0usize];
    ["Offset of field: ec_OElistt::ValueInfo"]
        [::std::mem::offset_of!(ec_OElistt, ValueInfo) - 2usize];
    ["Offset of field: ec_OElistt::DataType"]
        [::std::mem::offset_of!(ec_OElistt, DataType) - 258usize];
    ["Offset of field: ec_OElistt::BitLength"]
        [::std::mem::offset_of!(ec_OElistt, BitLength) - 770usize];
    ["Offset of field: ec_OElistt::ObjAccess"]
        [::std::mem::offset_of!(ec_OElistt, ObjAccess) - 1282usize];
    ["Offset of field: ec_OElistt::Name"][::std::mem::offset_of!(ec_OElistt, Name) - 1794usize];
};
unsafe extern "C" {
    pub fn ec_SDOerror(Slave: uint16, Index: uint16, SubIdx: uint8, AbortCode: int32);
}
unsafe extern "C" {
    pub fn ec_SDOread(
        slave: uint16,
        index: uint16,
        subindex: uint8,
        CA: boolean,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_SDOwrite(
        Slave: uint16,
        Index: uint16,
        SubIndex: uint8,
        CA: boolean,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_RxPDO(
        Slave: uint16,
        RxPDOnumber: uint16,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_TxPDO(
        slave: uint16,
        TxPDOnumber: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readPDOmap(
        Slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readPDOmapCA(
        Slave: uint16,
        Thread_n: ::std::os::raw::c_int,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readODlist(Slave: uint16, pODlist: *mut ec_ODlistt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readODdescription(Item: uint16, pODlist: *mut ec_ODlistt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readOEsingle(
        Item: uint16,
        SubI: uint8,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readOE(
        Item: uint16,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SDOerror(
        context: *mut ecx_contextt,
        Slave: uint16,
        Index: uint16,
        SubIdx: uint8,
        AbortCode: int32,
    );
}
unsafe extern "C" {
    pub fn ecx_SDOread(
        context: *mut ecx_contextt,
        slave: uint16,
        index: uint16,
        subindex: uint8,
        CA: boolean,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SDOwrite(
        context: *mut ecx_contextt,
        Slave: uint16,
        Index: uint16,
        SubIndex: uint8,
        CA: boolean,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_RxPDO(
        context: *mut ecx_contextt,
        Slave: uint16,
        RxPDOnumber: uint16,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_TxPDO(
        context: *mut ecx_contextt,
        slave: uint16,
        TxPDOnumber: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readPDOmap(
        context: *mut ecx_contextt,
        Slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readPDOmapCA(
        context: *mut ecx_contextt,
        Slave: uint16,
        Thread_n: ::std::os::raw::c_int,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readODlist(
        context: *mut ecx_contextt,
        Slave: uint16,
        pODlist: *mut ec_ODlistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readODdescription(
        context: *mut ecx_contextt,
        Item: uint16,
        pODlist: *mut ec_ODlistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readOEsingle(
        context: *mut ecx_contextt,
        Item: uint16,
        SubI: uint8,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readOE(
        context: *mut ecx_contextt,
        Item: uint16,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FOEdefinehook(hook: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FOEread(
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FOEwrite(
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FOEdefinehook(
        context: *mut ecx_contextt,
        hook: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FOEread(
        context: *mut ecx_contextt,
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FOEwrite(
        context: *mut ecx_contextt,
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[doc = " SoE name structure"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SoEnamet {
    #[doc = " current length in bytes of list"]
    pub currentlength: uint16,
    #[doc = " maximum length in bytes of list"]
    pub maxlength: uint16,
    pub name: [::std::os::raw::c_char; 60usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoEnamet"][::std::mem::size_of::<ec_SoEnamet>() - 64usize];
    ["Alignment of ec_SoEnamet"][::std::mem::align_of::<ec_SoEnamet>() - 1usize];
    ["Offset of field: ec_SoEnamet::currentlength"]
        [::std::mem::offset_of!(ec_SoEnamet, currentlength) - 0usize];
    ["Offset of field: ec_SoEnamet::maxlength"]
        [::std::mem::offset_of!(ec_SoEnamet, maxlength) - 2usize];
    ["Offset of field: ec_SoEnamet::name"][::std::mem::offset_of!(ec_SoEnamet, name) - 4usize];
};
#[doc = " SoE list structure"]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_SoElistt {
    #[doc = " current length in bytes of list"]
    pub currentlength: uint16,
    #[doc = " maximum length in bytes of list"]
    pub maxlength: uint16,
    pub __bindgen_anon_1: ec_SoElistt__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ec_SoElistt__bindgen_ty_1 {
    pub byte: [uint8; 8usize],
    pub word: [uint16; 4usize],
    pub dword: [uint32; 2usize],
    pub lword: [uint64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoElistt__bindgen_ty_1"]
        [::std::mem::size_of::<ec_SoElistt__bindgen_ty_1>() - 8usize];
    ["Alignment of ec_SoElistt__bindgen_ty_1"]
        [::std::mem::align_of::<ec_SoElistt__bindgen_ty_1>() - 8usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::byte"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, byte) - 0usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::word"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, word) - 0usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::dword"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, dword) - 0usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::lword"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, lword) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoElistt"][::std::mem::size_of::<ec_SoElistt>() - 12usize];
    ["Alignment of ec_SoElistt"][::std::mem::align_of::<ec_SoElistt>() - 1usize];
    ["Offset of field: ec_SoElistt::currentlength"]
        [::std::mem::offset_of!(ec_SoElistt, currentlength) - 0usize];
    ["Offset of field: ec_SoElistt::maxlength"]
        [::std::mem::offset_of!(ec_SoElistt, maxlength) - 2usize];
};
#[doc = " SoE IDN mapping structure"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SoEmappingt {
    #[doc = " current length in bytes of list"]
    pub currentlength: uint16,
    #[doc = " maximum length in bytes of list"]
    pub maxlength: uint16,
    pub idn: [uint16; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoEmappingt"][::std::mem::size_of::<ec_SoEmappingt>() - 132usize];
    ["Alignment of ec_SoEmappingt"][::std::mem::align_of::<ec_SoEmappingt>() - 1usize];
    ["Offset of field: ec_SoEmappingt::currentlength"]
        [::std::mem::offset_of!(ec_SoEmappingt, currentlength) - 0usize];
    ["Offset of field: ec_SoEmappingt::maxlength"]
        [::std::mem::offset_of!(ec_SoEmappingt, maxlength) - 2usize];
    ["Offset of field: ec_SoEmappingt::idn"][::std::mem::offset_of!(ec_SoEmappingt, idn) - 4usize];
};
#[doc = " SoE attribute structure"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SoEattributet {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoEattributet"][::std::mem::size_of::<ec_SoEattributet>() - 4usize];
    ["Alignment of ec_SoEattributet"][::std::mem::align_of::<ec_SoEattributet>() - 1usize];
};
impl ec_SoEattributet {
    #[inline]
    pub fn evafactor(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_evafactor(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evafactor_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_evafactor_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn length(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn length_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_length_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn list(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_list(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn list_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_list_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn command(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_command(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn command_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_command_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn datatype(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_datatype(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn datatype_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_datatype_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved1(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved1_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved1_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn decimals(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_decimals(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn decimals_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_decimals_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wppreop(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wppreop(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wppreop_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wppreop_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wpsafeop(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpsafeop(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wpsafeop_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wpsafeop_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wpop(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpop(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wpop_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wpop_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved2(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved2_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved2_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        evafactor: uint32,
        length: uint32,
        list: uint32,
        command: uint32,
        datatype: uint32,
        reserved1: uint32,
        decimals: uint32,
        wppreop: uint32,
        wpsafeop: uint32,
        wpop: uint32,
        reserved2: uint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let evafactor: u32 = unsafe { ::std::mem::transmute(evafactor) };
            evafactor as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let list: u32 = unsafe { ::std::mem::transmute(list) };
            list as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let command: u32 = unsafe { ::std::mem::transmute(command) };
            command as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let datatype: u32 = unsafe { ::std::mem::transmute(datatype) };
            datatype as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let decimals: u32 = unsafe { ::std::mem::transmute(decimals) };
            decimals as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let wppreop: u32 = unsafe { ::std::mem::transmute(wppreop) };
            wppreop as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let wpsafeop: u32 = unsafe { ::std::mem::transmute(wpsafeop) };
            wpsafeop as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let wpop: u32 = unsafe { ::std::mem::transmute(wpop) };
            wpop as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    pub fn ec_SoEread(
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_SoEwrite(
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readIDNmap(
        slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SoEread(
        context: *mut ecx_contextt,
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SoEwrite(
        context: *mut ecx_contextt,
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readIDNmap(
        context: *mut ecx_contextt,
        slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
#[doc = " EOE ip4 address in network order"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eoe_ip4_addr {
    pub addr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eoe_ip4_addr"][::std::mem::size_of::<eoe_ip4_addr>() - 4usize];
    ["Alignment of eoe_ip4_addr"][::std::mem::align_of::<eoe_ip4_addr>() - 4usize];
    ["Offset of field: eoe_ip4_addr::addr"][::std::mem::offset_of!(eoe_ip4_addr, addr) - 0usize];
};
#[doc = " EOE ip4 address in network order"]
pub type eoe_ip4_addr_t = eoe_ip4_addr;
#[doc = " EOE ethernet address"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct eoe_ethaddr {
    pub addr: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eoe_ethaddr"][::std::mem::size_of::<eoe_ethaddr>() - 6usize];
    ["Alignment of eoe_ethaddr"][::std::mem::align_of::<eoe_ethaddr>() - 1usize];
    ["Offset of field: eoe_ethaddr::addr"][::std::mem::offset_of!(eoe_ethaddr, addr) - 0usize];
};
#[doc = " EOE ethernet address"]
pub type eoe_ethaddr_t = eoe_ethaddr;
#[doc = " EoE IP request structure, storage only, no need to pack"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eoe_param {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub mac: eoe_ethaddr_t,
    pub ip: eoe_ip4_addr_t,
    pub subnet: eoe_ip4_addr_t,
    pub default_gateway: eoe_ip4_addr_t,
    pub dns_ip: eoe_ip4_addr_t,
    pub dns_name: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eoe_param"][::std::mem::size_of::<eoe_param>() - 56usize];
    ["Alignment of eoe_param"][::std::mem::align_of::<eoe_param>() - 4usize];
    ["Offset of field: eoe_param::mac"][::std::mem::offset_of!(eoe_param, mac) - 1usize];
    ["Offset of field: eoe_param::ip"][::std::mem::offset_of!(eoe_param, ip) - 8usize];
    ["Offset of field: eoe_param::subnet"][::std::mem::offset_of!(eoe_param, subnet) - 12usize];
    ["Offset of field: eoe_param::default_gateway"]
        [::std::mem::offset_of!(eoe_param, default_gateway) - 16usize];
    ["Offset of field: eoe_param::dns_ip"][::std::mem::offset_of!(eoe_param, dns_ip) - 20usize];
    ["Offset of field: eoe_param::dns_name"][::std::mem::offset_of!(eoe_param, dns_name) - 24usize];
};
impl eoe_param {
    #[inline]
    pub fn mac_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mac_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mac_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_mac_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ip_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ip_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ip_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_ip_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subnet_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_subnet_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subnet_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_subnet_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn default_gateway_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_default_gateway_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn default_gateway_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_default_gateway_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dns_ip_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dns_ip_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dns_ip_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dns_ip_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dns_name_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dns_name_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dns_name_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dns_name_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mac_set: u8,
        ip_set: u8,
        subnet_set: u8,
        default_gateway_set: u8,
        dns_ip_set: u8,
        dns_name_set: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mac_set: u8 = unsafe { ::std::mem::transmute(mac_set) };
            mac_set as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ip_set: u8 = unsafe { ::std::mem::transmute(ip_set) };
            ip_set as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let subnet_set: u8 = unsafe { ::std::mem::transmute(subnet_set) };
            subnet_set as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let default_gateway_set: u8 = unsafe { ::std::mem::transmute(default_gateway_set) };
            default_gateway_set as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dns_ip_set: u8 = unsafe { ::std::mem::transmute(dns_ip_set) };
            dns_ip_set as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dns_name_set: u8 = unsafe { ::std::mem::transmute(dns_name_set) };
            dns_name_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " EoE IP request structure, storage only, no need to pack"]
pub type eoe_param_t = eoe_param;
#[doc = " EOE structure.\n Used to interpret EoE mailbox packets."]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_EOEt {
    pub mbxheader: ec_mbxheadert,
    pub frameinfo1: u16,
    pub __bindgen_anon_1: ec_EOEt__bindgen_ty_1,
    pub data: [uint8; 1476usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ec_EOEt__bindgen_ty_1 {
    pub frameinfo2: u16,
    pub result: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_EOEt__bindgen_ty_1"][::std::mem::size_of::<ec_EOEt__bindgen_ty_1>() - 2usize];
    ["Alignment of ec_EOEt__bindgen_ty_1"]
        [::std::mem::align_of::<ec_EOEt__bindgen_ty_1>() - 2usize];
    ["Offset of field: ec_EOEt__bindgen_ty_1::frameinfo2"]
        [::std::mem::offset_of!(ec_EOEt__bindgen_ty_1, frameinfo2) - 0usize];
    ["Offset of field: ec_EOEt__bindgen_ty_1::result"]
        [::std::mem::offset_of!(ec_EOEt__bindgen_ty_1, result) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_EOEt"][::std::mem::size_of::<ec_EOEt>() - 1486usize];
    ["Alignment of ec_EOEt"][::std::mem::align_of::<ec_EOEt>() - 1usize];
    ["Offset of field: ec_EOEt::mbxheader"][::std::mem::offset_of!(ec_EOEt, mbxheader) - 0usize];
    ["Offset of field: ec_EOEt::frameinfo1"][::std::mem::offset_of!(ec_EOEt, frameinfo1) - 6usize];
    ["Offset of field: ec_EOEt::data"][::std::mem::offset_of!(ec_EOEt, data) - 10usize];
};
unsafe extern "C" {
    pub fn ecx_EOEdefinehook(
        context: *mut ecx_contextt,
        hook: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEsetIp(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        ipparam: *mut eoe_param_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEgetIp(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        ipparam: *mut eoe_param_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEsend(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOErecv(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEreadfragment(
        MbxIn: *mut ec_mbxbuft,
        rxfragmentno: *mut uint8,
        rxframesize: *mut uint16,
        rxframeoffset: *mut uint16,
        rxframeno: *mut uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_init(usetable: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map(pIOmap: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_overlap_map(pIOmap: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map_aligned(pIOmap: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map_group(
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_overlap_map_group(
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map_group_aligned(
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config(usetable: uint8, pIOmap: *mut ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_overlap(
        usetable: uint8,
        pIOmap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_recover_slave(slave: uint16, timeout: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_reconfig_slave(
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_init(context: *mut ecx_contextt, usetable: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_map_group(
        context: *mut ecx_contextt,
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_overlap_map_group(
        context: *mut ecx_contextt,
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_map_group_aligned(
        context: *mut ecx_contextt,
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_recover_slave(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_reconfig_slave(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_sdoerror2string(sdoerrorcode: uint32) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_ALstatuscode2string(ALstatuscode: uint16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_soeerror2string(errorcode: uint16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_mbxerror2string(errorcode: uint16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecx_err2string(Ec: ec_errort) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecx_elist2string(context: *mut ecx_contextt) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_elist2string() -> *mut ::std::os::raw::c_char;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
