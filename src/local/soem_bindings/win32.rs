/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    fn extract_bit(byte: u8, index: usize) -> bool {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        Self::extract_bit(byte, index)
    }
    #[inline]
    pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
        Self::extract_bit(byte, index)
    }
    #[inline]
    fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val { byte | mask } else { byte & !mask }
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
        debug_assert!(index / 8 < core::mem::size_of::<Storage>());
        let byte_index = index / 8;
        let byte =
            (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
        *byte = Self::change_bit(*byte, index, val);
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if Self::raw_get_bit(this, i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
    #[inline]
    pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < core::mem::size_of::<Storage>());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= core::mem::size_of::<Storage>());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            Self::raw_set_bit(this, index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const WINAPI_FAMILY_PC_APP: u32 = 2;
pub const WINAPI_FAMILY_PHONE_APP: u32 = 3;
pub const WINAPI_FAMILY_SYSTEM: u32 = 4;
pub const WINAPI_FAMILY_SERVER: u32 = 5;
pub const WINAPI_FAMILY_GAMES: u32 = 6;
pub const WINAPI_FAMILY_DESKTOP_APP: u32 = 100;
pub const WINAPI_FAMILY_APP: u32 = 2;
pub const WINAPI_FAMILY: u32 = 100;
pub const _WIN32_WINNT_NT4: u32 = 1024;
pub const _WIN32_WINNT_WIN2K: u32 = 1280;
pub const _WIN32_WINNT_WINXP: u32 = 1281;
pub const _WIN32_WINNT_WS03: u32 = 1282;
pub const _WIN32_WINNT_WIN6: u32 = 1536;
pub const _WIN32_WINNT_VISTA: u32 = 1536;
pub const _WIN32_WINNT_WS08: u32 = 1536;
pub const _WIN32_WINNT_LONGHORN: u32 = 1536;
pub const _WIN32_WINNT_WIN7: u32 = 1537;
pub const _WIN32_WINNT_WIN8: u32 = 1538;
pub const _WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _WIN32_WINNT_WINTHRESHOLD: u32 = 2560;
pub const _WIN32_WINNT_WIN10: u32 = 2560;
pub const _WIN32_IE_IE20: u32 = 512;
pub const _WIN32_IE_IE30: u32 = 768;
pub const _WIN32_IE_IE302: u32 = 770;
pub const _WIN32_IE_IE40: u32 = 1024;
pub const _WIN32_IE_IE401: u32 = 1025;
pub const _WIN32_IE_IE50: u32 = 1280;
pub const _WIN32_IE_IE501: u32 = 1281;
pub const _WIN32_IE_IE55: u32 = 1360;
pub const _WIN32_IE_IE60: u32 = 1536;
pub const _WIN32_IE_IE60SP1: u32 = 1537;
pub const _WIN32_IE_IE60SP2: u32 = 1539;
pub const _WIN32_IE_IE70: u32 = 1792;
pub const _WIN32_IE_IE80: u32 = 2048;
pub const _WIN32_IE_IE90: u32 = 2304;
pub const _WIN32_IE_IE100: u32 = 2560;
pub const _WIN32_IE_IE110: u32 = 2560;
pub const _WIN32_IE_NT4: u32 = 512;
pub const _WIN32_IE_NT4SP1: u32 = 512;
pub const _WIN32_IE_NT4SP2: u32 = 512;
pub const _WIN32_IE_NT4SP3: u32 = 770;
pub const _WIN32_IE_NT4SP4: u32 = 1025;
pub const _WIN32_IE_NT4SP5: u32 = 1025;
pub const _WIN32_IE_NT4SP6: u32 = 1280;
pub const _WIN32_IE_WIN98: u32 = 1025;
pub const _WIN32_IE_WIN98SE: u32 = 1280;
pub const _WIN32_IE_WINME: u32 = 1360;
pub const _WIN32_IE_WIN2K: u32 = 1281;
pub const _WIN32_IE_WIN2KSP1: u32 = 1281;
pub const _WIN32_IE_WIN2KSP2: u32 = 1281;
pub const _WIN32_IE_WIN2KSP3: u32 = 1281;
pub const _WIN32_IE_WIN2KSP4: u32 = 1281;
pub const _WIN32_IE_XP: u32 = 1536;
pub const _WIN32_IE_XPSP1: u32 = 1537;
pub const _WIN32_IE_XPSP2: u32 = 1539;
pub const _WIN32_IE_WS03: u32 = 1538;
pub const _WIN32_IE_WS03SP1: u32 = 1539;
pub const _WIN32_IE_WIN6: u32 = 1792;
pub const _WIN32_IE_LONGHORN: u32 = 1792;
pub const _WIN32_IE_WIN7: u32 = 2048;
pub const _WIN32_IE_WIN8: u32 = 2560;
pub const _WIN32_IE_WINBLUE: u32 = 2560;
pub const _WIN32_IE_WINTHRESHOLD: u32 = 2560;
pub const _WIN32_IE_WIN10: u32 = 2560;
pub const NTDDI_WIN4: u32 = 67108864;
pub const NTDDI_WIN2K: u32 = 83886080;
pub const NTDDI_WIN2KSP1: u32 = 83886336;
pub const NTDDI_WIN2KSP2: u32 = 83886592;
pub const NTDDI_WIN2KSP3: u32 = 83886848;
pub const NTDDI_WIN2KSP4: u32 = 83887104;
pub const NTDDI_WINXP: u32 = 83951616;
pub const NTDDI_WINXPSP1: u32 = 83951872;
pub const NTDDI_WINXPSP2: u32 = 83952128;
pub const NTDDI_WINXPSP3: u32 = 83952384;
pub const NTDDI_WINXPSP4: u32 = 83952640;
pub const NTDDI_WS03: u32 = 84017152;
pub const NTDDI_WS03SP1: u32 = 84017408;
pub const NTDDI_WS03SP2: u32 = 84017664;
pub const NTDDI_WS03SP3: u32 = 84017920;
pub const NTDDI_WS03SP4: u32 = 84018176;
pub const NTDDI_WIN6: u32 = 100663296;
pub const NTDDI_WIN6SP1: u32 = 100663552;
pub const NTDDI_WIN6SP2: u32 = 100663808;
pub const NTDDI_WIN6SP3: u32 = 100664064;
pub const NTDDI_WIN6SP4: u32 = 100664320;
pub const NTDDI_VISTA: u32 = 100663296;
pub const NTDDI_VISTASP1: u32 = 100663552;
pub const NTDDI_VISTASP2: u32 = 100663808;
pub const NTDDI_VISTASP3: u32 = 100664064;
pub const NTDDI_VISTASP4: u32 = 100664320;
pub const NTDDI_LONGHORN: u32 = 100663296;
pub const NTDDI_WS08: u32 = 100663552;
pub const NTDDI_WS08SP2: u32 = 100663808;
pub const NTDDI_WS08SP3: u32 = 100664064;
pub const NTDDI_WS08SP4: u32 = 100664320;
pub const NTDDI_WIN7: u32 = 100728832;
pub const NTDDI_WIN8: u32 = 100794368;
pub const NTDDI_WINBLUE: u32 = 100859904;
pub const NTDDI_WINTHRESHOLD: u32 = 167772160;
pub const NTDDI_WIN10: u32 = 167772160;
pub const NTDDI_WIN10_TH2: u32 = 167772161;
pub const NTDDI_WIN10_RS1: u32 = 167772162;
pub const NTDDI_WIN10_RS2: u32 = 167772163;
pub const NTDDI_WIN10_RS3: u32 = 167772164;
pub const NTDDI_WIN10_RS4: u32 = 167772165;
pub const NTDDI_WIN10_RS5: u32 = 167772166;
pub const NTDDI_WIN10_19H1: u32 = 167772167;
pub const NTDDI_WIN10_VB: u32 = 167772168;
pub const NTDDI_WIN10_MN: u32 = 167772169;
pub const NTDDI_WIN10_FE: u32 = 167772170;
pub const NTDDI_WIN10_CO: u32 = 167772171;
pub const NTDDI_WIN10_NI: u32 = 167772172;
pub const NTDDI_WIN10_CU: u32 = 167772173;
pub const NTDDI_WIN11_ZN: u32 = 167772174;
pub const NTDDI_WIN11_GA: u32 = 167772175;
pub const NTDDI_WIN11_GE: u32 = 167772176;
pub const WDK_NTDDI_VERSION: u32 = 167772176;
pub const OSVERSION_MASK: u32 = 4294901760;
pub const SPVERSION_MASK: u32 = 65280;
pub const SUBVERSION_MASK: u32 = 255;
pub const _WIN32_WINNT: u32 = 2560;
pub const NTDDI_VERSION: u32 = 167772176;
pub const WINVER: u32 = 2560;
pub const _WIN32_IE: u32 = 2560;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const EXCEPTION_EXECUTE_HANDLER: u32 = 1;
pub const EXCEPTION_CONTINUE_SEARCH: u32 = 0;
pub const EXCEPTION_CONTINUE_EXECUTION: i32 = -1;
pub const __SAL_H_FULL_VER: u32 = 140050727;
pub const __SPECSTRINGS_STRICT_LEVEL: u32 = 1;
pub const __drv_typeConst: u32 = 0;
pub const __drv_typeCond: u32 = 1;
pub const __drv_typeBitset: u32 = 2;
pub const __drv_typeExpr: u32 = 3;
pub const STRICT: u32 = 1;
pub const MAX_PATH: u32 = 260;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const ANYSIZE_ARRAY: u32 = 1;
pub const DISPATCH_LEVEL: u32 = 2;
pub const APC_LEVEL: u32 = 1;
pub const PASSIVE_LEVEL: u32 = 0;
pub const HIGH_LEVEL: u32 = 15;
pub const MEMORY_ALLOCATION_ALIGNMENT: u32 = 16;
pub const X86_CACHE_ALIGNMENT_SIZE: u32 = 64;
pub const ARM_CACHE_ALIGNMENT_SIZE: u32 = 128;
pub const SYSTEM_CACHE_ALIGNMENT_SIZE: u32 = 64;
pub const PRAGMA_DEPRECATED_DDK: u32 = 0;
pub const UCSCHAR_INVALID_CHARACTER: u32 = 4294967295;
pub const MIN_UCSCHAR: u32 = 0;
pub const MAX_UCSCHAR: u32 = 1114111;
pub const ALL_PROCESSOR_GROUPS: u32 = 65535;
pub const MAXIMUM_PROC_PER_GROUP: u32 = 64;
pub const MAXIMUM_PROCESSORS: u32 = 64;
pub const APPLICATION_ERROR_MASK: u32 = 536870912;
pub const ERROR_SEVERITY_SUCCESS: u32 = 0;
pub const ERROR_SEVERITY_INFORMATIONAL: u32 = 1073741824;
pub const ERROR_SEVERITY_WARNING: u32 = 2147483648;
pub const ERROR_SEVERITY_ERROR: u32 = 3221225472;
pub const MAXLONGLONG: u64 = 9223372036854775807;
pub const UNICODE_STRING_MAX_CHARS: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const MINCHAR: u32 = 128;
pub const MAXCHAR: u32 = 127;
pub const MINSHORT: u32 = 32768;
pub const MAXSHORT: u32 = 32767;
pub const MINLONG: u32 = 2147483648;
pub const MAXLONG: u32 = 2147483647;
pub const MAXBYTE: u32 = 255;
pub const MAXWORD: u32 = 65535;
pub const MAXDWORD: u32 = 4294967295;
pub const ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
pub const ENCLAVE_LONG_ID_LENGTH: u32 = 32;
pub const VER_SERVER_NT: u32 = 2147483648;
pub const VER_WORKSTATION_NT: u32 = 1073741824;
pub const VER_SUITE_SMALLBUSINESS: u32 = 1;
pub const VER_SUITE_ENTERPRISE: u32 = 2;
pub const VER_SUITE_BACKOFFICE: u32 = 4;
pub const VER_SUITE_COMMUNICATIONS: u32 = 8;
pub const VER_SUITE_TERMINAL: u32 = 16;
pub const VER_SUITE_SMALLBUSINESS_RESTRICTED: u32 = 32;
pub const VER_SUITE_EMBEDDEDNT: u32 = 64;
pub const VER_SUITE_DATACENTER: u32 = 128;
pub const VER_SUITE_SINGLEUSERTS: u32 = 256;
pub const VER_SUITE_PERSONAL: u32 = 512;
pub const VER_SUITE_BLADE: u32 = 1024;
pub const VER_SUITE_EMBEDDED_RESTRICTED: u32 = 2048;
pub const VER_SUITE_SECURITY_APPLIANCE: u32 = 4096;
pub const VER_SUITE_STORAGE_SERVER: u32 = 8192;
pub const VER_SUITE_COMPUTE_SERVER: u32 = 16384;
pub const VER_SUITE_WH_SERVER: u32 = 32768;
pub const VER_SUITE_MULTIUSERTS: u32 = 131072;
pub const PRODUCT_UNDEFINED: u32 = 0;
pub const PRODUCT_ULTIMATE: u32 = 1;
pub const PRODUCT_HOME_BASIC: u32 = 2;
pub const PRODUCT_HOME_PREMIUM: u32 = 3;
pub const PRODUCT_ENTERPRISE: u32 = 4;
pub const PRODUCT_HOME_BASIC_N: u32 = 5;
pub const PRODUCT_BUSINESS: u32 = 6;
pub const PRODUCT_STANDARD_SERVER: u32 = 7;
pub const PRODUCT_DATACENTER_SERVER: u32 = 8;
pub const PRODUCT_SMALLBUSINESS_SERVER: u32 = 9;
pub const PRODUCT_ENTERPRISE_SERVER: u32 = 10;
pub const PRODUCT_STARTER: u32 = 11;
pub const PRODUCT_DATACENTER_SERVER_CORE: u32 = 12;
pub const PRODUCT_STANDARD_SERVER_CORE: u32 = 13;
pub const PRODUCT_ENTERPRISE_SERVER_CORE: u32 = 14;
pub const PRODUCT_ENTERPRISE_SERVER_IA64: u32 = 15;
pub const PRODUCT_BUSINESS_N: u32 = 16;
pub const PRODUCT_WEB_SERVER: u32 = 17;
pub const PRODUCT_CLUSTER_SERVER: u32 = 18;
pub const PRODUCT_HOME_SERVER: u32 = 19;
pub const PRODUCT_STORAGE_EXPRESS_SERVER: u32 = 20;
pub const PRODUCT_STORAGE_STANDARD_SERVER: u32 = 21;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER: u32 = 22;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER: u32 = 23;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS: u32 = 24;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM: u32 = 25;
pub const PRODUCT_HOME_PREMIUM_N: u32 = 26;
pub const PRODUCT_ENTERPRISE_N: u32 = 27;
pub const PRODUCT_ULTIMATE_N: u32 = 28;
pub const PRODUCT_WEB_SERVER_CORE: u32 = 29;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT: u32 = 30;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY: u32 = 31;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING: u32 = 32;
pub const PRODUCT_SERVER_FOUNDATION: u32 = 33;
pub const PRODUCT_HOME_PREMIUM_SERVER: u32 = 34;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS_V: u32 = 35;
pub const PRODUCT_STANDARD_SERVER_V: u32 = 36;
pub const PRODUCT_DATACENTER_SERVER_V: u32 = 37;
pub const PRODUCT_ENTERPRISE_SERVER_V: u32 = 38;
pub const PRODUCT_DATACENTER_SERVER_CORE_V: u32 = 39;
pub const PRODUCT_STANDARD_SERVER_CORE_V: u32 = 40;
pub const PRODUCT_ENTERPRISE_SERVER_CORE_V: u32 = 41;
pub const PRODUCT_HYPERV: u32 = 42;
pub const PRODUCT_STORAGE_EXPRESS_SERVER_CORE: u32 = 43;
pub const PRODUCT_STORAGE_STANDARD_SERVER_CORE: u32 = 44;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE: u32 = 45;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE: u32 = 46;
pub const PRODUCT_STARTER_N: u32 = 47;
pub const PRODUCT_PROFESSIONAL: u32 = 48;
pub const PRODUCT_PROFESSIONAL_N: u32 = 49;
pub const PRODUCT_SB_SOLUTION_SERVER: u32 = 50;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS: u32 = 51;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS: u32 = 52;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE: u32 = 53;
pub const PRODUCT_SB_SOLUTION_SERVER_EM: u32 = 54;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM: u32 = 55;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER: u32 = 56;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE: u32 = 57;
pub const PRODUCT_PROFESSIONAL_EMBEDDED: u32 = 58;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT: u32 = 59;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL: u32 = 60;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC: u32 = 61;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC: u32 = 62;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE: u32 = 63;
pub const PRODUCT_CLUSTER_SERVER_V: u32 = 64;
pub const PRODUCT_EMBEDDED: u32 = 65;
pub const PRODUCT_STARTER_E: u32 = 66;
pub const PRODUCT_HOME_BASIC_E: u32 = 67;
pub const PRODUCT_HOME_PREMIUM_E: u32 = 68;
pub const PRODUCT_PROFESSIONAL_E: u32 = 69;
pub const PRODUCT_ENTERPRISE_E: u32 = 70;
pub const PRODUCT_ULTIMATE_E: u32 = 71;
pub const PRODUCT_ENTERPRISE_EVALUATION: u32 = 72;
pub const PRODUCT_MULTIPOINT_STANDARD_SERVER: u32 = 76;
pub const PRODUCT_MULTIPOINT_PREMIUM_SERVER: u32 = 77;
pub const PRODUCT_STANDARD_EVALUATION_SERVER: u32 = 79;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER: u32 = 80;
pub const PRODUCT_ENTERPRISE_N_EVALUATION: u32 = 84;
pub const PRODUCT_EMBEDDED_AUTOMOTIVE: u32 = 85;
pub const PRODUCT_EMBEDDED_INDUSTRY_A: u32 = 86;
pub const PRODUCT_THINPC: u32 = 87;
pub const PRODUCT_EMBEDDED_A: u32 = 88;
pub const PRODUCT_EMBEDDED_INDUSTRY: u32 = 89;
pub const PRODUCT_EMBEDDED_E: u32 = 90;
pub const PRODUCT_EMBEDDED_INDUSTRY_E: u32 = 91;
pub const PRODUCT_EMBEDDED_INDUSTRY_A_E: u32 = 92;
pub const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER: u32 = 95;
pub const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER: u32 = 96;
pub const PRODUCT_CORE_ARM: u32 = 97;
pub const PRODUCT_CORE_N: u32 = 98;
pub const PRODUCT_CORE_COUNTRYSPECIFIC: u32 = 99;
pub const PRODUCT_CORE_SINGLELANGUAGE: u32 = 100;
pub const PRODUCT_CORE: u32 = 101;
pub const PRODUCT_PROFESSIONAL_WMC: u32 = 103;
pub const PRODUCT_EMBEDDED_INDUSTRY_EVAL: u32 = 105;
pub const PRODUCT_EMBEDDED_INDUSTRY_E_EVAL: u32 = 106;
pub const PRODUCT_EMBEDDED_EVAL: u32 = 107;
pub const PRODUCT_EMBEDDED_E_EVAL: u32 = 108;
pub const PRODUCT_NANO_SERVER: u32 = 109;
pub const PRODUCT_CLOUD_STORAGE_SERVER: u32 = 110;
pub const PRODUCT_CORE_CONNECTED: u32 = 111;
pub const PRODUCT_PROFESSIONAL_STUDENT: u32 = 112;
pub const PRODUCT_CORE_CONNECTED_N: u32 = 113;
pub const PRODUCT_PROFESSIONAL_STUDENT_N: u32 = 114;
pub const PRODUCT_CORE_CONNECTED_SINGLELANGUAGE: u32 = 115;
pub const PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC: u32 = 116;
pub const PRODUCT_CONNECTED_CAR: u32 = 117;
pub const PRODUCT_INDUSTRY_HANDHELD: u32 = 118;
pub const PRODUCT_PPI_PRO: u32 = 119;
pub const PRODUCT_ARM64_SERVER: u32 = 120;
pub const PRODUCT_EDUCATION: u32 = 121;
pub const PRODUCT_EDUCATION_N: u32 = 122;
pub const PRODUCT_IOTUAP: u32 = 123;
pub const PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER: u32 = 124;
pub const PRODUCT_ENTERPRISE_S: u32 = 125;
pub const PRODUCT_ENTERPRISE_S_N: u32 = 126;
pub const PRODUCT_PROFESSIONAL_S: u32 = 127;
pub const PRODUCT_PROFESSIONAL_S_N: u32 = 128;
pub const PRODUCT_ENTERPRISE_S_EVALUATION: u32 = 129;
pub const PRODUCT_ENTERPRISE_S_N_EVALUATION: u32 = 130;
pub const PRODUCT_HOLOGRAPHIC: u32 = 135;
pub const PRODUCT_HOLOGRAPHIC_BUSINESS: u32 = 136;
pub const PRODUCT_PRO_SINGLE_LANGUAGE: u32 = 138;
pub const PRODUCT_PRO_CHINA: u32 = 139;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION: u32 = 140;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION_N: u32 = 141;
pub const PRODUCT_DATACENTER_NANO_SERVER: u32 = 143;
pub const PRODUCT_STANDARD_NANO_SERVER: u32 = 144;
pub const PRODUCT_DATACENTER_A_SERVER_CORE: u32 = 145;
pub const PRODUCT_STANDARD_A_SERVER_CORE: u32 = 146;
pub const PRODUCT_DATACENTER_WS_SERVER_CORE: u32 = 147;
pub const PRODUCT_STANDARD_WS_SERVER_CORE: u32 = 148;
pub const PRODUCT_UTILITY_VM: u32 = 149;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER_CORE: u32 = 159;
pub const PRODUCT_STANDARD_EVALUATION_SERVER_CORE: u32 = 160;
pub const PRODUCT_PRO_WORKSTATION: u32 = 161;
pub const PRODUCT_PRO_WORKSTATION_N: u32 = 162;
pub const PRODUCT_PRO_FOR_EDUCATION: u32 = 164;
pub const PRODUCT_PRO_FOR_EDUCATION_N: u32 = 165;
pub const PRODUCT_AZURE_SERVER_CORE: u32 = 168;
pub const PRODUCT_AZURE_NANO_SERVER: u32 = 169;
pub const PRODUCT_ENTERPRISEG: u32 = 171;
pub const PRODUCT_ENTERPRISEGN: u32 = 172;
pub const PRODUCT_SERVERRDSH: u32 = 175;
pub const PRODUCT_CLOUD: u32 = 178;
pub const PRODUCT_CLOUDN: u32 = 179;
pub const PRODUCT_HUBOS: u32 = 180;
pub const PRODUCT_ONECOREUPDATEOS: u32 = 182;
pub const PRODUCT_CLOUDE: u32 = 183;
pub const PRODUCT_IOTOS: u32 = 185;
pub const PRODUCT_CLOUDEN: u32 = 186;
pub const PRODUCT_IOTEDGEOS: u32 = 187;
pub const PRODUCT_IOTENTERPRISE: u32 = 188;
pub const PRODUCT_LITE: u32 = 189;
pub const PRODUCT_IOTENTERPRISES: u32 = 191;
pub const PRODUCT_XBOX_SYSTEMOS: u32 = 192;
pub const PRODUCT_XBOX_GAMEOS: u32 = 194;
pub const PRODUCT_XBOX_ERAOS: u32 = 195;
pub const PRODUCT_XBOX_DURANGOHOSTOS: u32 = 196;
pub const PRODUCT_XBOX_SCARLETTHOSTOS: u32 = 197;
pub const PRODUCT_XBOX_KEYSTONE: u32 = 198;
pub const PRODUCT_AZURE_SERVER_CLOUDHOST: u32 = 199;
pub const PRODUCT_AZURE_SERVER_CLOUDMOS: u32 = 200;
pub const PRODUCT_CLOUDEDITIONN: u32 = 202;
pub const PRODUCT_CLOUDEDITION: u32 = 203;
pub const PRODUCT_VALIDATION: u32 = 204;
pub const PRODUCT_IOTENTERPRISESK: u32 = 205;
pub const PRODUCT_IOTENTERPRISEK: u32 = 206;
pub const PRODUCT_IOTENTERPRISESEVAL: u32 = 207;
pub const PRODUCT_AZURE_SERVER_AGENTBRIDGE: u32 = 208;
pub const PRODUCT_AZURE_SERVER_NANOHOST: u32 = 209;
pub const PRODUCT_WNC: u32 = 210;
pub const PRODUCT_AZURESTACKHCI_SERVER_CORE: u32 = 406;
pub const PRODUCT_DATACENTER_SERVER_AZURE_EDITION: u32 = 407;
pub const PRODUCT_DATACENTER_SERVER_CORE_AZURE_EDITION: u32 = 408;
pub const PRODUCT_DATACENTER_WS_SERVER_CORE_AZURE_EDITION: u32 = 409;
pub const PRODUCT_UNLICENSED: u32 = 2882382797;
pub const LANG_NEUTRAL: u32 = 0;
pub const LANG_INVARIANT: u32 = 127;
pub const LANG_AFRIKAANS: u32 = 54;
pub const LANG_ALBANIAN: u32 = 28;
pub const LANG_ALSATIAN: u32 = 132;
pub const LANG_AMHARIC: u32 = 94;
pub const LANG_ARABIC: u32 = 1;
pub const LANG_ARMENIAN: u32 = 43;
pub const LANG_ASSAMESE: u32 = 77;
pub const LANG_AZERI: u32 = 44;
pub const LANG_AZERBAIJANI: u32 = 44;
pub const LANG_BANGLA: u32 = 69;
pub const LANG_BASHKIR: u32 = 109;
pub const LANG_BASQUE: u32 = 45;
pub const LANG_BELARUSIAN: u32 = 35;
pub const LANG_BENGALI: u32 = 69;
pub const LANG_BRETON: u32 = 126;
pub const LANG_BOSNIAN: u32 = 26;
pub const LANG_BOSNIAN_NEUTRAL: u32 = 30746;
pub const LANG_BULGARIAN: u32 = 2;
pub const LANG_CATALAN: u32 = 3;
pub const LANG_CENTRAL_KURDISH: u32 = 146;
pub const LANG_CHEROKEE: u32 = 92;
pub const LANG_CHINESE: u32 = 4;
pub const LANG_CHINESE_SIMPLIFIED: u32 = 4;
pub const LANG_CHINESE_TRADITIONAL: u32 = 31748;
pub const LANG_CORSICAN: u32 = 131;
pub const LANG_CROATIAN: u32 = 26;
pub const LANG_CZECH: u32 = 5;
pub const LANG_DANISH: u32 = 6;
pub const LANG_DARI: u32 = 140;
pub const LANG_DIVEHI: u32 = 101;
pub const LANG_DUTCH: u32 = 19;
pub const LANG_ENGLISH: u32 = 9;
pub const LANG_ESTONIAN: u32 = 37;
pub const LANG_FAEROESE: u32 = 56;
pub const LANG_FARSI: u32 = 41;
pub const LANG_FILIPINO: u32 = 100;
pub const LANG_FINNISH: u32 = 11;
pub const LANG_FRENCH: u32 = 12;
pub const LANG_FRISIAN: u32 = 98;
pub const LANG_FULAH: u32 = 103;
pub const LANG_GALICIAN: u32 = 86;
pub const LANG_GEORGIAN: u32 = 55;
pub const LANG_GERMAN: u32 = 7;
pub const LANG_GREEK: u32 = 8;
pub const LANG_GREENLANDIC: u32 = 111;
pub const LANG_GUJARATI: u32 = 71;
pub const LANG_HAUSA: u32 = 104;
pub const LANG_HAWAIIAN: u32 = 117;
pub const LANG_HEBREW: u32 = 13;
pub const LANG_HINDI: u32 = 57;
pub const LANG_HUNGARIAN: u32 = 14;
pub const LANG_ICELANDIC: u32 = 15;
pub const LANG_IGBO: u32 = 112;
pub const LANG_INDONESIAN: u32 = 33;
pub const LANG_INUKTITUT: u32 = 93;
pub const LANG_IRISH: u32 = 60;
pub const LANG_ITALIAN: u32 = 16;
pub const LANG_JAPANESE: u32 = 17;
pub const LANG_KANNADA: u32 = 75;
pub const LANG_KASHMIRI: u32 = 96;
pub const LANG_KAZAK: u32 = 63;
pub const LANG_KHMER: u32 = 83;
pub const LANG_KICHE: u32 = 134;
pub const LANG_KINYARWANDA: u32 = 135;
pub const LANG_KONKANI: u32 = 87;
pub const LANG_KOREAN: u32 = 18;
pub const LANG_KYRGYZ: u32 = 64;
pub const LANG_LAO: u32 = 84;
pub const LANG_LATVIAN: u32 = 38;
pub const LANG_LITHUANIAN: u32 = 39;
pub const LANG_LOWER_SORBIAN: u32 = 46;
pub const LANG_LUXEMBOURGISH: u32 = 110;
pub const LANG_MACEDONIAN: u32 = 47;
pub const LANG_MALAY: u32 = 62;
pub const LANG_MALAYALAM: u32 = 76;
pub const LANG_MALTESE: u32 = 58;
pub const LANG_MANIPURI: u32 = 88;
pub const LANG_MAORI: u32 = 129;
pub const LANG_MAPUDUNGUN: u32 = 122;
pub const LANG_MARATHI: u32 = 78;
pub const LANG_MOHAWK: u32 = 124;
pub const LANG_MONGOLIAN: u32 = 80;
pub const LANG_NEPALI: u32 = 97;
pub const LANG_NORWEGIAN: u32 = 20;
pub const LANG_OCCITAN: u32 = 130;
pub const LANG_ODIA: u32 = 72;
pub const LANG_ORIYA: u32 = 72;
pub const LANG_PASHTO: u32 = 99;
pub const LANG_PERSIAN: u32 = 41;
pub const LANG_POLISH: u32 = 21;
pub const LANG_PORTUGUESE: u32 = 22;
pub const LANG_PULAR: u32 = 103;
pub const LANG_PUNJABI: u32 = 70;
pub const LANG_QUECHUA: u32 = 107;
pub const LANG_ROMANIAN: u32 = 24;
pub const LANG_ROMANSH: u32 = 23;
pub const LANG_RUSSIAN: u32 = 25;
pub const LANG_SAKHA: u32 = 133;
pub const LANG_SAMI: u32 = 59;
pub const LANG_SANSKRIT: u32 = 79;
pub const LANG_SCOTTISH_GAELIC: u32 = 145;
pub const LANG_SERBIAN: u32 = 26;
pub const LANG_SERBIAN_NEUTRAL: u32 = 31770;
pub const LANG_SINDHI: u32 = 89;
pub const LANG_SINHALESE: u32 = 91;
pub const LANG_SLOVAK: u32 = 27;
pub const LANG_SLOVENIAN: u32 = 36;
pub const LANG_SOTHO: u32 = 108;
pub const LANG_SPANISH: u32 = 10;
pub const LANG_SWAHILI: u32 = 65;
pub const LANG_SWEDISH: u32 = 29;
pub const LANG_SYRIAC: u32 = 90;
pub const LANG_TAJIK: u32 = 40;
pub const LANG_TAMAZIGHT: u32 = 95;
pub const LANG_TAMIL: u32 = 73;
pub const LANG_TATAR: u32 = 68;
pub const LANG_TELUGU: u32 = 74;
pub const LANG_THAI: u32 = 30;
pub const LANG_TIBETAN: u32 = 81;
pub const LANG_TIGRIGNA: u32 = 115;
pub const LANG_TIGRINYA: u32 = 115;
pub const LANG_TSWANA: u32 = 50;
pub const LANG_TURKISH: u32 = 31;
pub const LANG_TURKMEN: u32 = 66;
pub const LANG_UIGHUR: u32 = 128;
pub const LANG_UKRAINIAN: u32 = 34;
pub const LANG_UPPER_SORBIAN: u32 = 46;
pub const LANG_URDU: u32 = 32;
pub const LANG_UZBEK: u32 = 67;
pub const LANG_VALENCIAN: u32 = 3;
pub const LANG_VIETNAMESE: u32 = 42;
pub const LANG_WELSH: u32 = 82;
pub const LANG_WOLOF: u32 = 136;
pub const LANG_XHOSA: u32 = 52;
pub const LANG_YAKUT: u32 = 133;
pub const LANG_YI: u32 = 120;
pub const LANG_YORUBA: u32 = 106;
pub const LANG_ZULU: u32 = 53;
pub const SUBLANG_NEUTRAL: u32 = 0;
pub const SUBLANG_DEFAULT: u32 = 1;
pub const SUBLANG_SYS_DEFAULT: u32 = 2;
pub const SUBLANG_CUSTOM_DEFAULT: u32 = 3;
pub const SUBLANG_CUSTOM_UNSPECIFIED: u32 = 4;
pub const SUBLANG_UI_CUSTOM_DEFAULT: u32 = 5;
pub const SUBLANG_AFRIKAANS_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_ALBANIAN_ALBANIA: u32 = 1;
pub const SUBLANG_ALSATIAN_FRANCE: u32 = 1;
pub const SUBLANG_AMHARIC_ETHIOPIA: u32 = 1;
pub const SUBLANG_ARABIC_SAUDI_ARABIA: u32 = 1;
pub const SUBLANG_ARABIC_IRAQ: u32 = 2;
pub const SUBLANG_ARABIC_EGYPT: u32 = 3;
pub const SUBLANG_ARABIC_LIBYA: u32 = 4;
pub const SUBLANG_ARABIC_ALGERIA: u32 = 5;
pub const SUBLANG_ARABIC_MOROCCO: u32 = 6;
pub const SUBLANG_ARABIC_TUNISIA: u32 = 7;
pub const SUBLANG_ARABIC_OMAN: u32 = 8;
pub const SUBLANG_ARABIC_YEMEN: u32 = 9;
pub const SUBLANG_ARABIC_SYRIA: u32 = 10;
pub const SUBLANG_ARABIC_JORDAN: u32 = 11;
pub const SUBLANG_ARABIC_LEBANON: u32 = 12;
pub const SUBLANG_ARABIC_KUWAIT: u32 = 13;
pub const SUBLANG_ARABIC_UAE: u32 = 14;
pub const SUBLANG_ARABIC_BAHRAIN: u32 = 15;
pub const SUBLANG_ARABIC_QATAR: u32 = 16;
pub const SUBLANG_ARMENIAN_ARMENIA: u32 = 1;
pub const SUBLANG_ASSAMESE_INDIA: u32 = 1;
pub const SUBLANG_AZERI_LATIN: u32 = 1;
pub const SUBLANG_AZERI_CYRILLIC: u32 = 2;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN: u32 = 1;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC: u32 = 2;
pub const SUBLANG_BANGLA_INDIA: u32 = 1;
pub const SUBLANG_BANGLA_BANGLADESH: u32 = 2;
pub const SUBLANG_BASHKIR_RUSSIA: u32 = 1;
pub const SUBLANG_BASQUE_BASQUE: u32 = 1;
pub const SUBLANG_BELARUSIAN_BELARUS: u32 = 1;
pub const SUBLANG_BENGALI_INDIA: u32 = 1;
pub const SUBLANG_BENGALI_BANGLADESH: u32 = 2;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 5;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 8;
pub const SUBLANG_BRETON_FRANCE: u32 = 1;
pub const SUBLANG_BULGARIAN_BULGARIA: u32 = 1;
pub const SUBLANG_CATALAN_CATALAN: u32 = 1;
pub const SUBLANG_CENTRAL_KURDISH_IRAQ: u32 = 1;
pub const SUBLANG_CHEROKEE_CHEROKEE: u32 = 1;
pub const SUBLANG_CHINESE_TRADITIONAL: u32 = 1;
pub const SUBLANG_CHINESE_SIMPLIFIED: u32 = 2;
pub const SUBLANG_CHINESE_HONGKONG: u32 = 3;
pub const SUBLANG_CHINESE_SINGAPORE: u32 = 4;
pub const SUBLANG_CHINESE_MACAU: u32 = 5;
pub const SUBLANG_CORSICAN_FRANCE: u32 = 1;
pub const SUBLANG_CZECH_CZECH_REPUBLIC: u32 = 1;
pub const SUBLANG_CROATIAN_CROATIA: u32 = 1;
pub const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 4;
pub const SUBLANG_DANISH_DENMARK: u32 = 1;
pub const SUBLANG_DARI_AFGHANISTAN: u32 = 1;
pub const SUBLANG_DIVEHI_MALDIVES: u32 = 1;
pub const SUBLANG_DUTCH: u32 = 1;
pub const SUBLANG_DUTCH_BELGIAN: u32 = 2;
pub const SUBLANG_ENGLISH_US: u32 = 1;
pub const SUBLANG_ENGLISH_UK: u32 = 2;
pub const SUBLANG_ENGLISH_AUS: u32 = 3;
pub const SUBLANG_ENGLISH_CAN: u32 = 4;
pub const SUBLANG_ENGLISH_NZ: u32 = 5;
pub const SUBLANG_ENGLISH_EIRE: u32 = 6;
pub const SUBLANG_ENGLISH_SOUTH_AFRICA: u32 = 7;
pub const SUBLANG_ENGLISH_JAMAICA: u32 = 8;
pub const SUBLANG_ENGLISH_CARIBBEAN: u32 = 9;
pub const SUBLANG_ENGLISH_BELIZE: u32 = 10;
pub const SUBLANG_ENGLISH_TRINIDAD: u32 = 11;
pub const SUBLANG_ENGLISH_ZIMBABWE: u32 = 12;
pub const SUBLANG_ENGLISH_PHILIPPINES: u32 = 13;
pub const SUBLANG_ENGLISH_INDIA: u32 = 16;
pub const SUBLANG_ENGLISH_MALAYSIA: u32 = 17;
pub const SUBLANG_ENGLISH_SINGAPORE: u32 = 18;
pub const SUBLANG_ESTONIAN_ESTONIA: u32 = 1;
pub const SUBLANG_FAEROESE_FAROE_ISLANDS: u32 = 1;
pub const SUBLANG_FILIPINO_PHILIPPINES: u32 = 1;
pub const SUBLANG_FINNISH_FINLAND: u32 = 1;
pub const SUBLANG_FRENCH: u32 = 1;
pub const SUBLANG_FRENCH_BELGIAN: u32 = 2;
pub const SUBLANG_FRENCH_CANADIAN: u32 = 3;
pub const SUBLANG_FRENCH_SWISS: u32 = 4;
pub const SUBLANG_FRENCH_LUXEMBOURG: u32 = 5;
pub const SUBLANG_FRENCH_MONACO: u32 = 6;
pub const SUBLANG_FRISIAN_NETHERLANDS: u32 = 1;
pub const SUBLANG_FULAH_SENEGAL: u32 = 2;
pub const SUBLANG_GALICIAN_GALICIAN: u32 = 1;
pub const SUBLANG_GEORGIAN_GEORGIA: u32 = 1;
pub const SUBLANG_GERMAN: u32 = 1;
pub const SUBLANG_GERMAN_SWISS: u32 = 2;
pub const SUBLANG_GERMAN_AUSTRIAN: u32 = 3;
pub const SUBLANG_GERMAN_LUXEMBOURG: u32 = 4;
pub const SUBLANG_GERMAN_LIECHTENSTEIN: u32 = 5;
pub const SUBLANG_GREEK_GREECE: u32 = 1;
pub const SUBLANG_GREENLANDIC_GREENLAND: u32 = 1;
pub const SUBLANG_GUJARATI_INDIA: u32 = 1;
pub const SUBLANG_HAUSA_NIGERIA_LATIN: u32 = 1;
pub const SUBLANG_HAWAIIAN_US: u32 = 1;
pub const SUBLANG_HEBREW_ISRAEL: u32 = 1;
pub const SUBLANG_HINDI_INDIA: u32 = 1;
pub const SUBLANG_HUNGARIAN_HUNGARY: u32 = 1;
pub const SUBLANG_ICELANDIC_ICELAND: u32 = 1;
pub const SUBLANG_IGBO_NIGERIA: u32 = 1;
pub const SUBLANG_INDONESIAN_INDONESIA: u32 = 1;
pub const SUBLANG_INUKTITUT_CANADA: u32 = 1;
pub const SUBLANG_INUKTITUT_CANADA_LATIN: u32 = 2;
pub const SUBLANG_IRISH_IRELAND: u32 = 2;
pub const SUBLANG_ITALIAN: u32 = 1;
pub const SUBLANG_ITALIAN_SWISS: u32 = 2;
pub const SUBLANG_JAPANESE_JAPAN: u32 = 1;
pub const SUBLANG_KANNADA_INDIA: u32 = 1;
pub const SUBLANG_KASHMIRI_SASIA: u32 = 2;
pub const SUBLANG_KASHMIRI_INDIA: u32 = 2;
pub const SUBLANG_KAZAK_KAZAKHSTAN: u32 = 1;
pub const SUBLANG_KHMER_CAMBODIA: u32 = 1;
pub const SUBLANG_KICHE_GUATEMALA: u32 = 1;
pub const SUBLANG_KINYARWANDA_RWANDA: u32 = 1;
pub const SUBLANG_KONKANI_INDIA: u32 = 1;
pub const SUBLANG_KOREAN: u32 = 1;
pub const SUBLANG_KYRGYZ_KYRGYZSTAN: u32 = 1;
pub const SUBLANG_LAO_LAO: u32 = 1;
pub const SUBLANG_LATVIAN_LATVIA: u32 = 1;
pub const SUBLANG_LITHUANIAN: u32 = 1;
pub const SUBLANG_LOWER_SORBIAN_GERMANY: u32 = 2;
pub const SUBLANG_LUXEMBOURGISH_LUXEMBOURG: u32 = 1;
pub const SUBLANG_MACEDONIAN_MACEDONIA: u32 = 1;
pub const SUBLANG_MALAY_MALAYSIA: u32 = 1;
pub const SUBLANG_MALAY_BRUNEI_DARUSSALAM: u32 = 2;
pub const SUBLANG_MALAYALAM_INDIA: u32 = 1;
pub const SUBLANG_MALTESE_MALTA: u32 = 1;
pub const SUBLANG_MAORI_NEW_ZEALAND: u32 = 1;
pub const SUBLANG_MAPUDUNGUN_CHILE: u32 = 1;
pub const SUBLANG_MARATHI_INDIA: u32 = 1;
pub const SUBLANG_MOHAWK_MOHAWK: u32 = 1;
pub const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA: u32 = 1;
pub const SUBLANG_MONGOLIAN_PRC: u32 = 2;
pub const SUBLANG_NEPALI_INDIA: u32 = 2;
pub const SUBLANG_NEPALI_NEPAL: u32 = 1;
pub const SUBLANG_NORWEGIAN_BOKMAL: u32 = 1;
pub const SUBLANG_NORWEGIAN_NYNORSK: u32 = 2;
pub const SUBLANG_OCCITAN_FRANCE: u32 = 1;
pub const SUBLANG_ODIA_INDIA: u32 = 1;
pub const SUBLANG_ORIYA_INDIA: u32 = 1;
pub const SUBLANG_PASHTO_AFGHANISTAN: u32 = 1;
pub const SUBLANG_PERSIAN_IRAN: u32 = 1;
pub const SUBLANG_POLISH_POLAND: u32 = 1;
pub const SUBLANG_PORTUGUESE: u32 = 2;
pub const SUBLANG_PORTUGUESE_BRAZILIAN: u32 = 1;
pub const SUBLANG_PULAR_SENEGAL: u32 = 2;
pub const SUBLANG_PUNJABI_INDIA: u32 = 1;
pub const SUBLANG_PUNJABI_PAKISTAN: u32 = 2;
pub const SUBLANG_QUECHUA_BOLIVIA: u32 = 1;
pub const SUBLANG_QUECHUA_ECUADOR: u32 = 2;
pub const SUBLANG_QUECHUA_PERU: u32 = 3;
pub const SUBLANG_ROMANIAN_ROMANIA: u32 = 1;
pub const SUBLANG_ROMANSH_SWITZERLAND: u32 = 1;
pub const SUBLANG_RUSSIAN_RUSSIA: u32 = 1;
pub const SUBLANG_SAKHA_RUSSIA: u32 = 1;
pub const SUBLANG_SAMI_NORTHERN_NORWAY: u32 = 1;
pub const SUBLANG_SAMI_NORTHERN_SWEDEN: u32 = 2;
pub const SUBLANG_SAMI_NORTHERN_FINLAND: u32 = 3;
pub const SUBLANG_SAMI_LULE_NORWAY: u32 = 4;
pub const SUBLANG_SAMI_LULE_SWEDEN: u32 = 5;
pub const SUBLANG_SAMI_SOUTHERN_NORWAY: u32 = 6;
pub const SUBLANG_SAMI_SOUTHERN_SWEDEN: u32 = 7;
pub const SUBLANG_SAMI_SKOLT_FINLAND: u32 = 8;
pub const SUBLANG_SAMI_INARI_FINLAND: u32 = 9;
pub const SUBLANG_SANSKRIT_INDIA: u32 = 1;
pub const SUBLANG_SCOTTISH_GAELIC: u32 = 1;
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN: u32 = 6;
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC: u32 = 7;
pub const SUBLANG_SERBIAN_MONTENEGRO_LATIN: u32 = 11;
pub const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC: u32 = 12;
pub const SUBLANG_SERBIAN_SERBIA_LATIN: u32 = 9;
pub const SUBLANG_SERBIAN_SERBIA_CYRILLIC: u32 = 10;
pub const SUBLANG_SERBIAN_CROATIA: u32 = 1;
pub const SUBLANG_SERBIAN_LATIN: u32 = 2;
pub const SUBLANG_SERBIAN_CYRILLIC: u32 = 3;
pub const SUBLANG_SINDHI_INDIA: u32 = 1;
pub const SUBLANG_SINDHI_PAKISTAN: u32 = 2;
pub const SUBLANG_SINDHI_AFGHANISTAN: u32 = 2;
pub const SUBLANG_SINHALESE_SRI_LANKA: u32 = 1;
pub const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_SLOVAK_SLOVAKIA: u32 = 1;
pub const SUBLANG_SLOVENIAN_SLOVENIA: u32 = 1;
pub const SUBLANG_SPANISH: u32 = 1;
pub const SUBLANG_SPANISH_MEXICAN: u32 = 2;
pub const SUBLANG_SPANISH_MODERN: u32 = 3;
pub const SUBLANG_SPANISH_GUATEMALA: u32 = 4;
pub const SUBLANG_SPANISH_COSTA_RICA: u32 = 5;
pub const SUBLANG_SPANISH_PANAMA: u32 = 6;
pub const SUBLANG_SPANISH_DOMINICAN_REPUBLIC: u32 = 7;
pub const SUBLANG_SPANISH_VENEZUELA: u32 = 8;
pub const SUBLANG_SPANISH_COLOMBIA: u32 = 9;
pub const SUBLANG_SPANISH_PERU: u32 = 10;
pub const SUBLANG_SPANISH_ARGENTINA: u32 = 11;
pub const SUBLANG_SPANISH_ECUADOR: u32 = 12;
pub const SUBLANG_SPANISH_CHILE: u32 = 13;
pub const SUBLANG_SPANISH_URUGUAY: u32 = 14;
pub const SUBLANG_SPANISH_PARAGUAY: u32 = 15;
pub const SUBLANG_SPANISH_BOLIVIA: u32 = 16;
pub const SUBLANG_SPANISH_EL_SALVADOR: u32 = 17;
pub const SUBLANG_SPANISH_HONDURAS: u32 = 18;
pub const SUBLANG_SPANISH_NICARAGUA: u32 = 19;
pub const SUBLANG_SPANISH_PUERTO_RICO: u32 = 20;
pub const SUBLANG_SPANISH_US: u32 = 21;
pub const SUBLANG_SWAHILI_KENYA: u32 = 1;
pub const SUBLANG_SWEDISH: u32 = 1;
pub const SUBLANG_SWEDISH_FINLAND: u32 = 2;
pub const SUBLANG_SYRIAC_SYRIA: u32 = 1;
pub const SUBLANG_TAJIK_TAJIKISTAN: u32 = 1;
pub const SUBLANG_TAMAZIGHT_ALGERIA_LATIN: u32 = 2;
pub const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH: u32 = 4;
pub const SUBLANG_TAMIL_INDIA: u32 = 1;
pub const SUBLANG_TAMIL_SRI_LANKA: u32 = 2;
pub const SUBLANG_TATAR_RUSSIA: u32 = 1;
pub const SUBLANG_TELUGU_INDIA: u32 = 1;
pub const SUBLANG_THAI_THAILAND: u32 = 1;
pub const SUBLANG_TIBETAN_PRC: u32 = 1;
pub const SUBLANG_TIGRIGNA_ERITREA: u32 = 2;
pub const SUBLANG_TIGRINYA_ERITREA: u32 = 2;
pub const SUBLANG_TIGRINYA_ETHIOPIA: u32 = 1;
pub const SUBLANG_TSWANA_BOTSWANA: u32 = 2;
pub const SUBLANG_TSWANA_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_TURKISH_TURKEY: u32 = 1;
pub const SUBLANG_TURKMEN_TURKMENISTAN: u32 = 1;
pub const SUBLANG_UIGHUR_PRC: u32 = 1;
pub const SUBLANG_UKRAINIAN_UKRAINE: u32 = 1;
pub const SUBLANG_UPPER_SORBIAN_GERMANY: u32 = 1;
pub const SUBLANG_URDU_PAKISTAN: u32 = 1;
pub const SUBLANG_URDU_INDIA: u32 = 2;
pub const SUBLANG_UZBEK_LATIN: u32 = 1;
pub const SUBLANG_UZBEK_CYRILLIC: u32 = 2;
pub const SUBLANG_VALENCIAN_VALENCIA: u32 = 2;
pub const SUBLANG_VIETNAMESE_VIETNAM: u32 = 1;
pub const SUBLANG_WELSH_UNITED_KINGDOM: u32 = 1;
pub const SUBLANG_WOLOF_SENEGAL: u32 = 1;
pub const SUBLANG_XHOSA_SOUTH_AFRICA: u32 = 1;
pub const SUBLANG_YAKUT_RUSSIA: u32 = 1;
pub const SUBLANG_YI_PRC: u32 = 1;
pub const SUBLANG_YORUBA_NIGERIA: u32 = 1;
pub const SUBLANG_ZULU_SOUTH_AFRICA: u32 = 1;
pub const SORT_DEFAULT: u32 = 0;
pub const SORT_INVARIANT_MATH: u32 = 1;
pub const SORT_JAPANESE_XJIS: u32 = 0;
pub const SORT_JAPANESE_UNICODE: u32 = 1;
pub const SORT_JAPANESE_RADICALSTROKE: u32 = 4;
pub const SORT_CHINESE_BIG5: u32 = 0;
pub const SORT_CHINESE_PRCP: u32 = 0;
pub const SORT_CHINESE_UNICODE: u32 = 1;
pub const SORT_CHINESE_PRC: u32 = 2;
pub const SORT_CHINESE_BOPOMOFO: u32 = 3;
pub const SORT_CHINESE_RADICALSTROKE: u32 = 4;
pub const SORT_KOREAN_KSC: u32 = 0;
pub const SORT_KOREAN_UNICODE: u32 = 1;
pub const SORT_GERMAN_PHONE_BOOK: u32 = 1;
pub const SORT_HUNGARIAN_DEFAULT: u32 = 0;
pub const SORT_HUNGARIAN_TECHNICAL: u32 = 1;
pub const SORT_GEORGIAN_TRADITIONAL: u32 = 0;
pub const SORT_GEORGIAN_MODERN: u32 = 1;
pub const NLS_VALID_LOCALE_MASK: u32 = 1048575;
pub const LOCALE_NAME_MAX_LENGTH: u32 = 85;
pub const LOCALE_TRANSIENT_KEYBOARD1: u32 = 8192;
pub const LOCALE_TRANSIENT_KEYBOARD2: u32 = 9216;
pub const LOCALE_TRANSIENT_KEYBOARD3: u32 = 10240;
pub const LOCALE_TRANSIENT_KEYBOARD4: u32 = 11264;
pub const MAXIMUM_WAIT_OBJECTS: u32 = 64;
pub const MAXIMUM_SUSPEND_COUNT: u32 = 127;
pub const XSTATE_CONTEXT_FLAG_LOOKASIDE: u32 = 1;
pub const _MM_HINT_T0: u32 = 1;
pub const _MM_HINT_T1: u32 = 2;
pub const _MM_HINT_T2: u32 = 3;
pub const _MM_HINT_NTA: u32 = 0;
pub const PF_TEMPORAL_LEVEL_1: u32 = 1;
pub const PF_TEMPORAL_LEVEL_2: u32 = 2;
pub const PF_TEMPORAL_LEVEL_3: u32 = 3;
pub const PF_NON_TEMPORAL_LEVEL_ALL: u32 = 0;
pub const EXCEPTION_READ_FAULT: u32 = 0;
pub const EXCEPTION_WRITE_FAULT: u32 = 1;
pub const EXCEPTION_EXECUTE_FAULT: u32 = 8;
pub const CONTEXT_AMD64: u32 = 1048576;
pub const CONTEXT_CONTROL: u32 = 1048577;
pub const CONTEXT_INTEGER: u32 = 1048578;
pub const CONTEXT_SEGMENTS: u32 = 1048580;
pub const CONTEXT_FLOATING_POINT: u32 = 1048584;
pub const CONTEXT_DEBUG_REGISTERS: u32 = 1048592;
pub const CONTEXT_FULL: u32 = 1048587;
pub const CONTEXT_ALL: u32 = 1048607;
pub const CONTEXT_XSTATE: u32 = 1048640;
pub const CONTEXT_KERNEL_CET: u32 = 1048704;
pub const CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
pub const CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
pub const CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
pub const CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
pub const CONTEXT_UNWOUND_TO_CALL: u32 = 536870912;
pub const INITIAL_MXCSR: u32 = 8064;
pub const INITIAL_FPCSR: u32 = 639;
pub const RUNTIME_FUNCTION_INDIRECT: u32 = 1;
pub const UNW_FLAG_NHANDLER: u32 = 0;
pub const UNW_FLAG_EHANDLER: u32 = 1;
pub const UNW_FLAG_UHANDLER: u32 = 2;
pub const UNW_FLAG_CHAININFO: u32 = 4;
pub const UNW_FLAG_NO_EPILOGUE: u32 = 2147483648;
pub const UNWIND_CHAIN_LIMIT: u32 = 32;
pub const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK_EXPORT_NAME: &[u8; 34] =
    b"OutOfProcessFunctionTableCallback\0";
pub const CONTEXT_ARM64: u32 = 4194304;
pub const CONTEXT_ARM64_CONTROL: u32 = 4194305;
pub const CONTEXT_ARM64_INTEGER: u32 = 4194306;
pub const CONTEXT_ARM64_FLOATING_POINT: u32 = 4194308;
pub const CONTEXT_ARM64_DEBUG_REGISTERS: u32 = 4194312;
pub const CONTEXT_ARM64_X18: u32 = 4194320;
pub const CONTEXT_ARM64_XSTATE: u32 = 4194336;
pub const CONTEXT_ARM64_FULL: u32 = 4194311;
pub const CONTEXT_ARM64_ALL: u32 = 4194335;
pub const CONTEXT_ARM64_UNWOUND_TO_CALL: u32 = 536870912;
pub const CONTEXT_ARM64_RET_TO_GUEST: u32 = 67108864;
pub const ARM64_MAX_BREAKPOINTS: u32 = 8;
pub const ARM64_MAX_WATCHPOINTS: u32 = 2;
pub const NONVOL_INT_NUMREG_ARM64: u32 = 11;
pub const NONVOL_FP_NUMREG_ARM64: u32 = 8;
pub const WOW64_CONTEXT_i386: u32 = 65536;
pub const WOW64_CONTEXT_i486: u32 = 65536;
pub const WOW64_CONTEXT_CONTROL: u32 = 65537;
pub const WOW64_CONTEXT_INTEGER: u32 = 65538;
pub const WOW64_CONTEXT_SEGMENTS: u32 = 65540;
pub const WOW64_CONTEXT_FLOATING_POINT: u32 = 65544;
pub const WOW64_CONTEXT_DEBUG_REGISTERS: u32 = 65552;
pub const WOW64_CONTEXT_EXTENDED_REGISTERS: u32 = 65568;
pub const WOW64_CONTEXT_FULL: u32 = 65543;
pub const WOW64_CONTEXT_ALL: u32 = 65599;
pub const WOW64_CONTEXT_XSTATE: u32 = 65600;
pub const WOW64_CONTEXT_EXCEPTION_ACTIVE: u32 = 134217728;
pub const WOW64_CONTEXT_SERVICE_ACTIVE: u32 = 268435456;
pub const WOW64_CONTEXT_EXCEPTION_REQUEST: u32 = 1073741824;
pub const WOW64_CONTEXT_EXCEPTION_REPORTING: u32 = 2147483648;
pub const WOW64_SIZE_OF_80387_REGISTERS: u32 = 80;
pub const WOW64_MAXIMUM_SUPPORTED_EXTENSION: u32 = 512;
pub const EXCEPTION_NONCONTINUABLE: u32 = 1;
pub const EXCEPTION_UNWINDING: u32 = 2;
pub const EXCEPTION_EXIT_UNWIND: u32 = 4;
pub const EXCEPTION_STACK_INVALID: u32 = 8;
pub const EXCEPTION_NESTED_CALL: u32 = 16;
pub const EXCEPTION_TARGET_UNWIND: u32 = 32;
pub const EXCEPTION_COLLIDED_UNWIND: u32 = 64;
pub const EXCEPTION_SOFTWARE_ORIGINATE: u32 = 128;
pub const EXCEPTION_UNWIND: u32 = 102;
pub const EXCEPTION_MAXIMUM_PARAMETERS: u32 = 15;
pub const DELETE: u32 = 65536;
pub const READ_CONTROL: u32 = 131072;
pub const WRITE_DAC: u32 = 262144;
pub const WRITE_OWNER: u32 = 524288;
pub const SYNCHRONIZE: u32 = 1048576;
pub const STANDARD_RIGHTS_REQUIRED: u32 = 983040;
pub const STANDARD_RIGHTS_READ: u32 = 131072;
pub const STANDARD_RIGHTS_WRITE: u32 = 131072;
pub const STANDARD_RIGHTS_EXECUTE: u32 = 131072;
pub const STANDARD_RIGHTS_ALL: u32 = 2031616;
pub const SPECIFIC_RIGHTS_ALL: u32 = 65535;
pub const ACCESS_SYSTEM_SECURITY: u32 = 16777216;
pub const MAXIMUM_ALLOWED: u32 = 33554432;
pub const GENERIC_READ: u32 = 2147483648;
pub const GENERIC_WRITE: u32 = 1073741824;
pub const GENERIC_EXECUTE: u32 = 536870912;
pub const GENERIC_ALL: u32 = 268435456;
pub const SID_REVISION: u32 = 1;
pub const SID_MAX_SUB_AUTHORITIES: u32 = 15;
pub const SID_RECOMMENDED_SUB_AUTHORITIES: u32 = 1;
pub const SECURITY_MAX_SID_STRING_CHARACTERS: u32 = 187;
pub const SID_HASH_SIZE: u32 = 32;
pub const SECURITY_NULL_RID: u32 = 0;
pub const SECURITY_WORLD_RID: u32 = 0;
pub const SECURITY_LOCAL_RID: u32 = 0;
pub const SECURITY_LOCAL_LOGON_RID: u32 = 1;
pub const SECURITY_CREATOR_OWNER_RID: u32 = 0;
pub const SECURITY_CREATOR_GROUP_RID: u32 = 1;
pub const SECURITY_CREATOR_OWNER_SERVER_RID: u32 = 2;
pub const SECURITY_CREATOR_GROUP_SERVER_RID: u32 = 3;
pub const SECURITY_CREATOR_OWNER_RIGHTS_RID: u32 = 4;
pub const SECURITY_DIALUP_RID: u32 = 1;
pub const SECURITY_NETWORK_RID: u32 = 2;
pub const SECURITY_BATCH_RID: u32 = 3;
pub const SECURITY_INTERACTIVE_RID: u32 = 4;
pub const SECURITY_LOGON_IDS_RID: u32 = 5;
pub const SECURITY_LOGON_IDS_RID_COUNT: u32 = 3;
pub const SECURITY_SERVICE_RID: u32 = 6;
pub const SECURITY_ANONYMOUS_LOGON_RID: u32 = 7;
pub const SECURITY_PROXY_RID: u32 = 8;
pub const SECURITY_ENTERPRISE_CONTROLLERS_RID: u32 = 9;
pub const SECURITY_SERVER_LOGON_RID: u32 = 9;
pub const SECURITY_PRINCIPAL_SELF_RID: u32 = 10;
pub const SECURITY_AUTHENTICATED_USER_RID: u32 = 11;
pub const SECURITY_RESTRICTED_CODE_RID: u32 = 12;
pub const SECURITY_TERMINAL_SERVER_RID: u32 = 13;
pub const SECURITY_REMOTE_LOGON_RID: u32 = 14;
pub const SECURITY_THIS_ORGANIZATION_RID: u32 = 15;
pub const SECURITY_IUSER_RID: u32 = 17;
pub const SECURITY_LOCAL_SYSTEM_RID: u32 = 18;
pub const SECURITY_LOCAL_SERVICE_RID: u32 = 19;
pub const SECURITY_NETWORK_SERVICE_RID: u32 = 20;
pub const SECURITY_NT_NON_UNIQUE: u32 = 21;
pub const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT: u32 = 3;
pub const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID: u32 = 22;
pub const SECURITY_BUILTIN_DOMAIN_RID: u32 = 32;
pub const SECURITY_WRITE_RESTRICTED_CODE_RID: u32 = 33;
pub const SECURITY_PACKAGE_BASE_RID: u32 = 64;
pub const SECURITY_PACKAGE_RID_COUNT: u32 = 2;
pub const SECURITY_PACKAGE_NTLM_RID: u32 = 10;
pub const SECURITY_PACKAGE_SCHANNEL_RID: u32 = 14;
pub const SECURITY_PACKAGE_DIGEST_RID: u32 = 21;
pub const SECURITY_CRED_TYPE_BASE_RID: u32 = 65;
pub const SECURITY_CRED_TYPE_RID_COUNT: u32 = 2;
pub const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID: u32 = 1;
pub const SECURITY_MIN_BASE_RID: u32 = 80;
pub const SECURITY_SERVICE_ID_BASE_RID: u32 = 80;
pub const SECURITY_SERVICE_ID_RID_COUNT: u32 = 6;
pub const SECURITY_RESERVED_ID_BASE_RID: u32 = 81;
pub const SECURITY_APPPOOL_ID_BASE_RID: u32 = 82;
pub const SECURITY_APPPOOL_ID_RID_COUNT: u32 = 6;
pub const SECURITY_VIRTUALSERVER_ID_BASE_RID: u32 = 83;
pub const SECURITY_VIRTUALSERVER_ID_RID_COUNT: u32 = 6;
pub const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID: u32 = 84;
pub const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID: u32 = 85;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT: u32 = 6;
pub const SECURITY_WMIHOST_ID_BASE_RID: u32 = 86;
pub const SECURITY_WMIHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_TASK_ID_BASE_RID: u32 = 87;
pub const SECURITY_NFS_ID_BASE_RID: u32 = 88;
pub const SECURITY_COM_ID_BASE_RID: u32 = 89;
pub const SECURITY_WINDOW_MANAGER_BASE_RID: u32 = 90;
pub const SECURITY_RDV_GFX_BASE_RID: u32 = 91;
pub const SECURITY_DASHOST_ID_BASE_RID: u32 = 92;
pub const SECURITY_DASHOST_ID_RID_COUNT: u32 = 6;
pub const SECURITY_USERMANAGER_ID_BASE_RID: u32 = 93;
pub const SECURITY_USERMANAGER_ID_RID_COUNT: u32 = 6;
pub const SECURITY_WINRM_ID_BASE_RID: u32 = 94;
pub const SECURITY_WINRM_ID_RID_COUNT: u32 = 6;
pub const SECURITY_CCG_ID_BASE_RID: u32 = 95;
pub const SECURITY_UMFD_BASE_RID: u32 = 96;
pub const SECURITY_UNIQUIFIED_SERVICE_BASE_RID: u32 = 97;
pub const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT: u32 = 6;
pub const SECURITY_EDGE_CLOUD_INFRASTRUCTURE_SERVICE_ID_BASE_RID: u32 = 98;
pub const SECURITY_RESTRICTED_SERVICES_BASE_RID: u32 = 99;
pub const SECURITY_RESTRICTED_SERVICES_RID_COUNT: u32 = 6;
pub const SECURITY_MAX_BASE_RID: u32 = 111;
pub const SECURITY_MAX_ALWAYS_FILTERED: u32 = 999;
pub const SECURITY_MIN_NEVER_FILTERED: u32 = 1000;
pub const SECURITY_OTHER_ORGANIZATION_RID: u32 = 1000;
pub const SECURITY_WINDOWSMOBILE_ID_BASE_RID: u32 = 112;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_BASE: u32 = 32;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT: u32 = 9;
pub const SECURITY_INSTALLER_CAPABILITY_RID_COUNT: u32 = 10;
pub const SECURITY_LOCAL_ACCOUNT_RID: u32 = 113;
pub const SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID: u32 = 114;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED: u32 = 496;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS: u32 = 497;
pub const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS: u32 = 498;
pub const FOREST_USER_RID_MAX: u32 = 499;
pub const DOMAIN_USER_RID_ADMIN: u32 = 500;
pub const DOMAIN_USER_RID_GUEST: u32 = 501;
pub const DOMAIN_USER_RID_KRBTGT: u32 = 502;
pub const DOMAIN_USER_RID_DEFAULT_ACCOUNT: u32 = 503;
pub const DOMAIN_USER_RID_WDAG_ACCOUNT: u32 = 504;
pub const DOMAIN_USER_RID_MAX: u32 = 999;
pub const DOMAIN_GROUP_RID_ADMINS: u32 = 512;
pub const DOMAIN_GROUP_RID_USERS: u32 = 513;
pub const DOMAIN_GROUP_RID_GUESTS: u32 = 514;
pub const DOMAIN_GROUP_RID_COMPUTERS: u32 = 515;
pub const DOMAIN_GROUP_RID_CONTROLLERS: u32 = 516;
pub const DOMAIN_GROUP_RID_CERT_ADMINS: u32 = 517;
pub const DOMAIN_GROUP_RID_SCHEMA_ADMINS: u32 = 518;
pub const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS: u32 = 519;
pub const DOMAIN_GROUP_RID_POLICY_ADMINS: u32 = 520;
pub const DOMAIN_GROUP_RID_READONLY_CONTROLLERS: u32 = 521;
pub const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS: u32 = 522;
pub const DOMAIN_GROUP_RID_CDC_RESERVED: u32 = 524;
pub const DOMAIN_GROUP_RID_PROTECTED_USERS: u32 = 525;
pub const DOMAIN_GROUP_RID_KEY_ADMINS: u32 = 526;
pub const DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS: u32 = 527;
pub const DOMAIN_GROUP_RID_FOREST_TRUSTS: u32 = 528;
pub const DOMAIN_GROUP_RID_EXTERNAL_TRUSTS: u32 = 529;
pub const DOMAIN_ALIAS_RID_ADMINS: u32 = 544;
pub const DOMAIN_ALIAS_RID_USERS: u32 = 545;
pub const DOMAIN_ALIAS_RID_GUESTS: u32 = 546;
pub const DOMAIN_ALIAS_RID_POWER_USERS: u32 = 547;
pub const DOMAIN_ALIAS_RID_ACCOUNT_OPS: u32 = 548;
pub const DOMAIN_ALIAS_RID_SYSTEM_OPS: u32 = 549;
pub const DOMAIN_ALIAS_RID_PRINT_OPS: u32 = 550;
pub const DOMAIN_ALIAS_RID_BACKUP_OPS: u32 = 551;
pub const DOMAIN_ALIAS_RID_REPLICATOR: u32 = 552;
pub const DOMAIN_ALIAS_RID_RAS_SERVERS: u32 = 553;
pub const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS: u32 = 554;
pub const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS: u32 = 555;
pub const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS: u32 = 556;
pub const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS: u32 = 557;
pub const DOMAIN_ALIAS_RID_MONITORING_USERS: u32 = 558;
pub const DOMAIN_ALIAS_RID_LOGGING_USERS: u32 = 559;
pub const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS: u32 = 560;
pub const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS: u32 = 561;
pub const DOMAIN_ALIAS_RID_DCOM_USERS: u32 = 562;
pub const DOMAIN_ALIAS_RID_IUSERS: u32 = 568;
pub const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS: u32 = 569;
pub const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP: u32 = 571;
pub const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP: u32 = 572;
pub const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP: u32 = 573;
pub const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP: u32 = 574;
pub const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS: u32 = 575;
pub const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS: u32 = 576;
pub const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS: u32 = 577;
pub const DOMAIN_ALIAS_RID_HYPER_V_ADMINS: u32 = 578;
pub const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS: u32 = 579;
pub const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS: u32 = 580;
pub const DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT: u32 = 581;
pub const DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS: u32 = 582;
pub const DOMAIN_ALIAS_RID_DEVICE_OWNERS: u32 = 583;
pub const DOMAIN_ALIAS_RID_USER_MODE_HARDWARE_OPERATORS: u32 = 584;
pub const DOMAIN_ALIAS_RID_OPENSSH_USERS: u32 = 585;
pub const SECURITY_APP_PACKAGE_BASE_RID: u32 = 2;
pub const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT: u32 = 2;
pub const SECURITY_APP_PACKAGE_RID_COUNT: u32 = 8;
pub const SECURITY_CAPABILITY_BASE_RID: u32 = 3;
pub const SECURITY_CAPABILITY_APP_RID: u32 = 1024;
pub const SECURITY_CAPABILITY_APP_SILO_RID: u32 = 65536;
pub const SECURITY_BUILTIN_CAPABILITY_RID_COUNT: u32 = 2;
pub const SECURITY_CAPABILITY_RID_COUNT: u32 = 5;
pub const SECURITY_PARENT_PACKAGE_RID_COUNT: u32 = 8;
pub const SECURITY_CHILD_PACKAGE_RID_COUNT: u32 = 12;
pub const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE: u32 = 1;
pub const SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE: u32 = 2;
pub const SECURITY_CAPABILITY_INTERNET_CLIENT: u32 = 1;
pub const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER: u32 = 2;
pub const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER: u32 = 3;
pub const SECURITY_CAPABILITY_PICTURES_LIBRARY: u32 = 4;
pub const SECURITY_CAPABILITY_VIDEOS_LIBRARY: u32 = 5;
pub const SECURITY_CAPABILITY_MUSIC_LIBRARY: u32 = 6;
pub const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY: u32 = 7;
pub const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION: u32 = 8;
pub const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES: u32 = 9;
pub const SECURITY_CAPABILITY_REMOVABLE_STORAGE: u32 = 10;
pub const SECURITY_CAPABILITY_APPOINTMENTS: u32 = 11;
pub const SECURITY_CAPABILITY_CONTACTS: u32 = 12;
pub const SECURITY_CAPABILITY_INTERNET_EXPLORER: u32 = 4096;
pub const SECURITY_MANDATORY_UNTRUSTED_RID: u32 = 0;
pub const SECURITY_MANDATORY_LOW_RID: u32 = 4096;
pub const SECURITY_MANDATORY_MEDIUM_RID: u32 = 8192;
pub const SECURITY_MANDATORY_MEDIUM_PLUS_RID: u32 = 8448;
pub const SECURITY_MANDATORY_HIGH_RID: u32 = 12288;
pub const SECURITY_MANDATORY_SYSTEM_RID: u32 = 16384;
pub const SECURITY_MANDATORY_PROTECTED_PROCESS_RID: u32 = 20480;
pub const SECURITY_MANDATORY_MAXIMUM_USER_RID: u32 = 16384;
pub const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT: u32 = 1;
pub const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID: u32 = 1;
pub const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID: u32 = 2;
pub const SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID: u32 = 3;
pub const SECURITY_AUTHENTICATION_KEY_TRUST_RID: u32 = 4;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID: u32 = 5;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID: u32 = 6;
pub const SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT: u32 = 2;
pub const SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID: u32 = 1024;
pub const SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID: u32 = 512;
pub const SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID: u32 = 0;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID: u32 = 8192;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID: u32 = 4096;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID: u32 = 2048;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID: u32 = 1536;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID: u32 = 1024;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID: u32 = 0;
pub const SECURITY_TRUSTED_INSTALLER_RID1: u32 = 956008885;
pub const SECURITY_TRUSTED_INSTALLER_RID2: u32 = 3418522649;
pub const SECURITY_TRUSTED_INSTALLER_RID3: u32 = 1831038044;
pub const SECURITY_TRUSTED_INSTALLER_RID4: u32 = 1853292631;
pub const SECURITY_TRUSTED_INSTALLER_RID5: u32 = 2271478464;
pub const SE_GROUP_MANDATORY: u32 = 1;
pub const SE_GROUP_ENABLED_BY_DEFAULT: u32 = 2;
pub const SE_GROUP_ENABLED: u32 = 4;
pub const SE_GROUP_OWNER: u32 = 8;
pub const SE_GROUP_USE_FOR_DENY_ONLY: u32 = 16;
pub const SE_GROUP_INTEGRITY: u32 = 32;
pub const SE_GROUP_INTEGRITY_ENABLED: u32 = 64;
pub const SE_GROUP_LOGON_ID: u32 = 3221225472;
pub const SE_GROUP_RESOURCE: u32 = 536870912;
pub const SE_GROUP_VALID_ATTRIBUTES: u32 = 3758096511;
pub const ACL_REVISION: u32 = 2;
pub const ACL_REVISION_DS: u32 = 4;
pub const ACL_REVISION1: u32 = 1;
pub const ACL_REVISION2: u32 = 2;
pub const ACL_REVISION3: u32 = 3;
pub const ACL_REVISION4: u32 = 4;
pub const MAX_ACL_REVISION: u32 = 4;
pub const ACCESS_MIN_MS_ACE_TYPE: u32 = 0;
pub const ACCESS_ALLOWED_ACE_TYPE: u32 = 0;
pub const ACCESS_DENIED_ACE_TYPE: u32 = 1;
pub const SYSTEM_AUDIT_ACE_TYPE: u32 = 2;
pub const SYSTEM_ALARM_ACE_TYPE: u32 = 3;
pub const ACCESS_MAX_MS_V2_ACE_TYPE: u32 = 3;
pub const ACCESS_ALLOWED_COMPOUND_ACE_TYPE: u32 = 4;
pub const ACCESS_MAX_MS_V3_ACE_TYPE: u32 = 4;
pub const ACCESS_MIN_MS_OBJECT_ACE_TYPE: u32 = 5;
pub const ACCESS_ALLOWED_OBJECT_ACE_TYPE: u32 = 5;
pub const ACCESS_DENIED_OBJECT_ACE_TYPE: u32 = 6;
pub const SYSTEM_AUDIT_OBJECT_ACE_TYPE: u32 = 7;
pub const SYSTEM_ALARM_OBJECT_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_OBJECT_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_V4_ACE_TYPE: u32 = 8;
pub const ACCESS_MAX_MS_ACE_TYPE: u32 = 8;
pub const ACCESS_ALLOWED_CALLBACK_ACE_TYPE: u32 = 9;
pub const ACCESS_DENIED_CALLBACK_ACE_TYPE: u32 = 10;
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE: u32 = 11;
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE: u32 = 12;
pub const SYSTEM_AUDIT_CALLBACK_ACE_TYPE: u32 = 13;
pub const SYSTEM_ALARM_CALLBACK_ACE_TYPE: u32 = 14;
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE: u32 = 15;
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE: u32 = 16;
pub const SYSTEM_MANDATORY_LABEL_ACE_TYPE: u32 = 17;
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE: u32 = 18;
pub const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE: u32 = 19;
pub const SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE: u32 = 20;
pub const SYSTEM_ACCESS_FILTER_ACE_TYPE: u32 = 21;
pub const ACCESS_MAX_MS_V5_ACE_TYPE: u32 = 21;
pub const OBJECT_INHERIT_ACE: u32 = 1;
pub const CONTAINER_INHERIT_ACE: u32 = 2;
pub const NO_PROPAGATE_INHERIT_ACE: u32 = 4;
pub const INHERIT_ONLY_ACE: u32 = 8;
pub const INHERITED_ACE: u32 = 16;
pub const VALID_INHERIT_FLAGS: u32 = 31;
pub const CRITICAL_ACE_FLAG: u32 = 32;
pub const SUCCESSFUL_ACCESS_ACE_FLAG: u32 = 64;
pub const FAILED_ACCESS_ACE_FLAG: u32 = 128;
pub const TRUST_PROTECTED_FILTER_ACE_FLAG: u32 = 64;
pub const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP: u32 = 1;
pub const SYSTEM_MANDATORY_LABEL_NO_READ_UP: u32 = 2;
pub const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP: u32 = 4;
pub const SYSTEM_MANDATORY_LABEL_VALID_MASK: u32 = 7;
pub const SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK: u32 = 16777215;
pub const SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK: u32 = 4294967295;
pub const SYSTEM_ACCESS_FILTER_VALID_MASK: u32 = 16777215;
pub const SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK: u32 = 4294967295;
pub const ACE_OBJECT_TYPE_PRESENT: u32 = 1;
pub const ACE_INHERITED_OBJECT_TYPE_PRESENT: u32 = 2;
pub const SECURITY_DESCRIPTOR_REVISION: u32 = 1;
pub const SECURITY_DESCRIPTOR_REVISION1: u32 = 1;
pub const SE_OWNER_DEFAULTED: u32 = 1;
pub const SE_GROUP_DEFAULTED: u32 = 2;
pub const SE_DACL_PRESENT: u32 = 4;
pub const SE_DACL_DEFAULTED: u32 = 8;
pub const SE_SACL_PRESENT: u32 = 16;
pub const SE_SACL_DEFAULTED: u32 = 32;
pub const SE_DACL_AUTO_INHERIT_REQ: u32 = 256;
pub const SE_SACL_AUTO_INHERIT_REQ: u32 = 512;
pub const SE_DACL_AUTO_INHERITED: u32 = 1024;
pub const SE_SACL_AUTO_INHERITED: u32 = 2048;
pub const SE_DACL_PROTECTED: u32 = 4096;
pub const SE_SACL_PROTECTED: u32 = 8192;
pub const SE_RM_CONTROL_VALID: u32 = 16384;
pub const SE_SELF_RELATIVE: u32 = 32768;
pub const ACCESS_OBJECT_GUID: u32 = 0;
pub const ACCESS_PROPERTY_SET_GUID: u32 = 1;
pub const ACCESS_PROPERTY_GUID: u32 = 2;
pub const ACCESS_MAX_LEVEL: u32 = 4;
pub const AUDIT_ALLOW_NO_PRIVILEGE: u32 = 1;
pub const ACCESS_DS_SOURCE_A: &[u8; 3] = b"DS\0";
pub const ACCESS_DS_SOURCE_W: &[u8; 3] = b"DS\0";
pub const ACCESS_DS_OBJECT_TYPE_NAME_A: &[u8; 25] = b"Directory Service Object\0";
pub const ACCESS_DS_OBJECT_TYPE_NAME_W: &[u8; 25] = b"Directory Service Object\0";
pub const SE_PRIVILEGE_ENABLED_BY_DEFAULT: u32 = 1;
pub const SE_PRIVILEGE_ENABLED: u32 = 2;
pub const SE_PRIVILEGE_REMOVED: u32 = 4;
pub const SE_PRIVILEGE_USED_FOR_ACCESS: u32 = 2147483648;
pub const SE_PRIVILEGE_VALID_ATTRIBUTES: u32 = 2147483655;
pub const PRIVILEGE_SET_ALL_NECESSARY: u32 = 1;
pub const ACCESS_REASON_TYPE_MASK: u32 = 16711680;
pub const ACCESS_REASON_DATA_MASK: u32 = 65535;
pub const ACCESS_REASON_STAGING_MASK: u32 = 2147483648;
pub const ACCESS_REASON_EXDATA_MASK: u32 = 2130706432;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE: u32 = 1;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE: u32 = 2;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE: u32 = 4;
pub const SE_SECURITY_DESCRIPTOR_VALID_FLAGS: u32 = 7;
pub const SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING: u32 = 8;
pub const SE_ACCESS_CHECK_VALID_FLAGS: u32 = 8;
pub const SE_ACTIVATE_AS_USER_CAPABILITY: &[u8; 15] = b"activateAsUser\0";
pub const SE_CONSTRAINED_IMPERSONATION_CAPABILITY: &[u8; 25] = b"constrainedImpersonation\0";
pub const SE_SESSION_IMPERSONATION_CAPABILITY: &[u8; 21] = b"sessionImpersonation\0";
pub const SE_MUMA_CAPABILITY: &[u8; 5] = b"muma\0";
pub const SE_DEVELOPMENT_MODE_NETWORK_CAPABILITY: &[u8; 23] = b"developmentModeNetwork\0";
pub const SE_LEARNING_MODE_LOGGING_CAPABILITY: &[u8; 20] = b"learningModeLogging\0";
pub const SE_PERMISSIVE_LEARNING_MODE_CAPABILITY: &[u8; 23] = b"permissiveLearningMode\0";
pub const SE_APP_SILO_VOLUME_ROOT_MINIMAL_CAPABILITY: &[u8; 32] =
    b"isolatedWin32-volumeRootMinimal\0";
pub const SE_APP_SILO_PROFILES_ROOT_MINIMAL_CAPABILITY: &[u8; 34] =
    b"isolatedWin32-profilesRootMinimal\0";
pub const SE_APP_SILO_USER_PROFILE_MINIMAL_CAPABILITY: &[u8; 33] =
    b"isolatedWin32-userProfileMinimal\0";
pub const SE_APP_SILO_PROMPT_FOR_ACCESS_CAPABILITY: &[u8; 30] = b"isolatedWin32-promptForAccess\0";
pub const SE_APP_SILO_ACCESS_TO_PUBLISHER_DIRECTORY_CAPABILITY: &[u8; 41] =
    b"isolatedWin32-accessToPublisherDirectory\0";
pub const SE_APP_SILO_PRINT_CAPABILITY: &[u8; 20] = b"isolatedWin32-print\0";
pub const TOKEN_ASSIGN_PRIMARY: u32 = 1;
pub const TOKEN_DUPLICATE: u32 = 2;
pub const TOKEN_IMPERSONATE: u32 = 4;
pub const TOKEN_QUERY: u32 = 8;
pub const TOKEN_QUERY_SOURCE: u32 = 16;
pub const TOKEN_ADJUST_PRIVILEGES: u32 = 32;
pub const TOKEN_ADJUST_GROUPS: u32 = 64;
pub const TOKEN_ADJUST_DEFAULT: u32 = 128;
pub const TOKEN_ADJUST_SESSIONID: u32 = 256;
pub const TOKEN_ALL_ACCESS_P: u32 = 983295;
pub const TOKEN_ALL_ACCESS: u32 = 983551;
pub const TOKEN_READ: u32 = 131080;
pub const TOKEN_WRITE: u32 = 131296;
pub const TOKEN_EXECUTE: u32 = 131072;
pub const TOKEN_TRUST_CONSTRAINT_MASK: u32 = 131096;
pub const TOKEN_TRUST_ALLOWED_MASK: u32 = 131102;
pub const TOKEN_ACCESS_PSEUDO_HANDLE_WIN8: u32 = 24;
pub const TOKEN_ACCESS_PSEUDO_HANDLE: u32 = 24;
pub const TOKEN_MANDATORY_POLICY_OFF: u32 = 0;
pub const TOKEN_MANDATORY_POLICY_NO_WRITE_UP: u32 = 1;
pub const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN: u32 = 2;
pub const TOKEN_MANDATORY_POLICY_VALID_MASK: u32 = 3;
pub const POLICY_AUDIT_SUBCATEGORY_COUNT: u32 = 59;
pub const TOKEN_SOURCE_LENGTH: u32 = 8;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID: u32 = 0;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64: u32 = 2;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING: u32 = 3;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN: u32 = 4;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID: u32 = 5;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN: u32 = 6;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING: u32 = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE: u32 = 2;
pub const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY: u32 = 4;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT: u32 = 8;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED: u32 = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_MANDATORY: u32 = 32;
pub const CLAIM_SECURITY_ATTRIBUTE_VALID_FLAGS: u32 = 63;
pub const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS: u32 = 4294901760;
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1: u32 = 1;
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION: u32 = 1;
pub const SECURITY_DYNAMIC_TRACKING: u32 = 1;
pub const SECURITY_STATIC_TRACKING: u32 = 0;
pub const DISABLE_MAX_PRIVILEGE: u32 = 1;
pub const SANDBOX_INERT: u32 = 2;
pub const LUA_TOKEN: u32 = 4;
pub const WRITE_RESTRICTED: u32 = 8;
pub const OWNER_SECURITY_INFORMATION: u32 = 1;
pub const GROUP_SECURITY_INFORMATION: u32 = 2;
pub const DACL_SECURITY_INFORMATION: u32 = 4;
pub const SACL_SECURITY_INFORMATION: u32 = 8;
pub const LABEL_SECURITY_INFORMATION: u32 = 16;
pub const ATTRIBUTE_SECURITY_INFORMATION: u32 = 32;
pub const SCOPE_SECURITY_INFORMATION: u32 = 64;
pub const PROCESS_TRUST_LABEL_SECURITY_INFORMATION: u32 = 128;
pub const ACCESS_FILTER_SECURITY_INFORMATION: u32 = 256;
pub const BACKUP_SECURITY_INFORMATION: u32 = 65536;
pub const PROTECTED_DACL_SECURITY_INFORMATION: u32 = 2147483648;
pub const PROTECTED_SACL_SECURITY_INFORMATION: u32 = 1073741824;
pub const UNPROTECTED_DACL_SECURITY_INFORMATION: u32 = 536870912;
pub const UNPROTECTED_SACL_SECURITY_INFORMATION: u32 = 268435456;
pub const SE_SIGNING_LEVEL_UNCHECKED: u32 = 0;
pub const SE_SIGNING_LEVEL_UNSIGNED: u32 = 1;
pub const SE_SIGNING_LEVEL_ENTERPRISE: u32 = 2;
pub const SE_SIGNING_LEVEL_CUSTOM_1: u32 = 3;
pub const SE_SIGNING_LEVEL_DEVELOPER: u32 = 3;
pub const SE_SIGNING_LEVEL_AUTHENTICODE: u32 = 4;
pub const SE_SIGNING_LEVEL_CUSTOM_2: u32 = 5;
pub const SE_SIGNING_LEVEL_STORE: u32 = 6;
pub const SE_SIGNING_LEVEL_CUSTOM_3: u32 = 7;
pub const SE_SIGNING_LEVEL_ANTIMALWARE: u32 = 7;
pub const SE_SIGNING_LEVEL_MICROSOFT: u32 = 8;
pub const SE_SIGNING_LEVEL_CUSTOM_4: u32 = 9;
pub const SE_SIGNING_LEVEL_CUSTOM_5: u32 = 10;
pub const SE_SIGNING_LEVEL_DYNAMIC_CODEGEN: u32 = 11;
pub const SE_SIGNING_LEVEL_WINDOWS: u32 = 12;
pub const SE_SIGNING_LEVEL_CUSTOM_7: u32 = 13;
pub const SE_SIGNING_LEVEL_WINDOWS_TCB: u32 = 14;
pub const SE_SIGNING_LEVEL_CUSTOM_6: u32 = 15;
pub const PROCESS_TERMINATE: u32 = 1;
pub const PROCESS_CREATE_THREAD: u32 = 2;
pub const PROCESS_SET_SESSIONID: u32 = 4;
pub const PROCESS_VM_OPERATION: u32 = 8;
pub const PROCESS_VM_READ: u32 = 16;
pub const PROCESS_VM_WRITE: u32 = 32;
pub const PROCESS_DUP_HANDLE: u32 = 64;
pub const PROCESS_CREATE_PROCESS: u32 = 128;
pub const PROCESS_SET_QUOTA: u32 = 256;
pub const PROCESS_SET_INFORMATION: u32 = 512;
pub const PROCESS_QUERY_INFORMATION: u32 = 1024;
pub const PROCESS_SUSPEND_RESUME: u32 = 2048;
pub const PROCESS_QUERY_LIMITED_INFORMATION: u32 = 4096;
pub const PROCESS_SET_LIMITED_INFORMATION: u32 = 8192;
pub const PROCESS_ALL_ACCESS: u32 = 2097151;
pub const THREAD_TERMINATE: u32 = 1;
pub const THREAD_SUSPEND_RESUME: u32 = 2;
pub const THREAD_GET_CONTEXT: u32 = 8;
pub const THREAD_SET_CONTEXT: u32 = 16;
pub const THREAD_QUERY_INFORMATION: u32 = 64;
pub const THREAD_SET_INFORMATION: u32 = 32;
pub const THREAD_SET_THREAD_TOKEN: u32 = 128;
pub const THREAD_IMPERSONATE: u32 = 256;
pub const THREAD_DIRECT_IMPERSONATION: u32 = 512;
pub const THREAD_SET_LIMITED_INFORMATION: u32 = 1024;
pub const THREAD_QUERY_LIMITED_INFORMATION: u32 = 2048;
pub const THREAD_RESUME: u32 = 4096;
pub const THREAD_ALL_ACCESS: u32 = 2097151;
pub const JOB_OBJECT_ASSIGN_PROCESS: u32 = 1;
pub const JOB_OBJECT_SET_ATTRIBUTES: u32 = 2;
pub const JOB_OBJECT_QUERY: u32 = 4;
pub const JOB_OBJECT_TERMINATE: u32 = 8;
pub const JOB_OBJECT_SET_SECURITY_ATTRIBUTES: u32 = 16;
pub const JOB_OBJECT_IMPERSONATE: u32 = 32;
pub const JOB_OBJECT_ALL_ACCESS: u32 = 2031679;
pub const FLS_MAXIMUM_AVAILABLE: u32 = 4080;
pub const TLS_MINIMUM_AVAILABLE: u32 = 64;
pub const THREAD_DYNAMIC_CODE_ALLOW: u32 = 1;
pub const THREAD_BASE_PRIORITY_LOWRT: u32 = 15;
pub const THREAD_BASE_PRIORITY_MAX: u32 = 2;
pub const THREAD_BASE_PRIORITY_MIN: i32 = -2;
pub const THREAD_BASE_PRIORITY_IDLE: i32 = -15;
pub const COMPONENT_KTM: u32 = 1;
pub const COMPONENT_VALID_FLAGS: u32 = 1;
pub const MEMORY_PRIORITY_LOWEST: u32 = 0;
pub const MEMORY_PRIORITY_VERY_LOW: u32 = 1;
pub const MEMORY_PRIORITY_LOW: u32 = 2;
pub const MEMORY_PRIORITY_MEDIUM: u32 = 3;
pub const MEMORY_PRIORITY_BELOW_NORMAL: u32 = 4;
pub const MEMORY_PRIORITY_NORMAL: u32 = 5;
pub const DYNAMIC_EH_CONTINUATION_TARGET_ADD: u32 = 1;
pub const DYNAMIC_EH_CONTINUATION_TARGET_PROCESSED: u32 = 2;
pub const DYNAMIC_ENFORCED_ADDRESS_RANGE_ADD: u32 = 1;
pub const DYNAMIC_ENFORCED_ADDRESS_RANGE_PROCESSED: u32 = 2;
pub const QUOTA_LIMITS_HARDWS_MIN_ENABLE: u32 = 1;
pub const QUOTA_LIMITS_HARDWS_MIN_DISABLE: u32 = 2;
pub const QUOTA_LIMITS_HARDWS_MAX_ENABLE: u32 = 4;
pub const QUOTA_LIMITS_HARDWS_MAX_DISABLE: u32 = 8;
pub const QUOTA_LIMITS_USE_DEFAULT_LIMITS: u32 = 16;
pub const MAX_HW_COUNTERS: u32 = 16;
pub const THREAD_PROFILING_FLAG_DISPATCH: u32 = 1;
pub const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG: u32 = 64;
pub const JOB_OBJECT_TERMINATE_AT_END_OF_JOB: u32 = 0;
pub const JOB_OBJECT_POST_AT_END_OF_JOB: u32 = 1;
pub const JOB_OBJECT_MSG_END_OF_JOB_TIME: u32 = 1;
pub const JOB_OBJECT_MSG_END_OF_PROCESS_TIME: u32 = 2;
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT: u32 = 3;
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO: u32 = 4;
pub const JOB_OBJECT_MSG_NEW_PROCESS: u32 = 6;
pub const JOB_OBJECT_MSG_EXIT_PROCESS: u32 = 7;
pub const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS: u32 = 8;
pub const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT: u32 = 9;
pub const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT: u32 = 10;
pub const JOB_OBJECT_MSG_NOTIFICATION_LIMIT: u32 = 11;
pub const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT: u32 = 12;
pub const JOB_OBJECT_MSG_SILO_TERMINATED: u32 = 13;
pub const JOB_OBJECT_MSG_MINIMUM: u32 = 1;
pub const JOB_OBJECT_MSG_MAXIMUM: u32 = 13;
pub const JOB_OBJECT_VALID_COMPLETION_FILTER: u32 = 16382;
pub const JOB_OBJECT_LIMIT_WORKINGSET: u32 = 1;
pub const JOB_OBJECT_LIMIT_PROCESS_TIME: u32 = 2;
pub const JOB_OBJECT_LIMIT_JOB_TIME: u32 = 4;
pub const JOB_OBJECT_LIMIT_ACTIVE_PROCESS: u32 = 8;
pub const JOB_OBJECT_LIMIT_AFFINITY: u32 = 16;
pub const JOB_OBJECT_LIMIT_PRIORITY_CLASS: u32 = 32;
pub const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME: u32 = 64;
pub const JOB_OBJECT_LIMIT_SCHEDULING_CLASS: u32 = 128;
pub const JOB_OBJECT_LIMIT_PROCESS_MEMORY: u32 = 256;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY: u32 = 512;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH: u32 = 512;
pub const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION: u32 = 1024;
pub const JOB_OBJECT_LIMIT_BREAKAWAY_OK: u32 = 2048;
pub const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK: u32 = 4096;
pub const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE: u32 = 8192;
pub const JOB_OBJECT_LIMIT_SUBSET_AFFINITY: u32 = 16384;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_LOW: u32 = 32768;
pub const JOB_OBJECT_LIMIT_JOB_READ_BYTES: u32 = 65536;
pub const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES: u32 = 131072;
pub const JOB_OBJECT_LIMIT_RATE_CONTROL: u32 = 262144;
pub const JOB_OBJECT_LIMIT_CPU_RATE_CONTROL: u32 = 262144;
pub const JOB_OBJECT_LIMIT_IO_RATE_CONTROL: u32 = 524288;
pub const JOB_OBJECT_LIMIT_NET_RATE_CONTROL: u32 = 1048576;
pub const JOB_OBJECT_LIMIT_VALID_FLAGS: u32 = 524287;
pub const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS: u32 = 255;
pub const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS: u32 = 32767;
pub const JOB_OBJECT_NOTIFICATION_LIMIT_VALID_FLAGS: u32 = 2064900;
pub const JOB_OBJECT_UILIMIT_NONE: u32 = 0;
pub const JOB_OBJECT_UILIMIT_HANDLES: u32 = 1;
pub const JOB_OBJECT_UILIMIT_READCLIPBOARD: u32 = 2;
pub const JOB_OBJECT_UILIMIT_WRITECLIPBOARD: u32 = 4;
pub const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS: u32 = 8;
pub const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS: u32 = 16;
pub const JOB_OBJECT_UILIMIT_GLOBALATOMS: u32 = 32;
pub const JOB_OBJECT_UILIMIT_DESKTOP: u32 = 64;
pub const JOB_OBJECT_UILIMIT_EXITWINDOWS: u32 = 128;
pub const JOB_OBJECT_UILIMIT_IME: u32 = 256;
pub const JOB_OBJECT_UILIMIT_ALL: u32 = 511;
pub const JOB_OBJECT_UI_VALID_FLAGS: u32 = 511;
pub const JOB_OBJECT_SECURITY_NO_ADMIN: u32 = 1;
pub const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN: u32 = 2;
pub const JOB_OBJECT_SECURITY_ONLY_TOKEN: u32 = 4;
pub const JOB_OBJECT_SECURITY_FILTER_TOKENS: u32 = 8;
pub const JOB_OBJECT_SECURITY_VALID_FLAGS: u32 = 15;
pub const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE: u32 = 1;
pub const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED: u32 = 2;
pub const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP: u32 = 4;
pub const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY: u32 = 8;
pub const JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE: u32 = 16;
pub const JOB_OBJECT_CPU_RATE_CONTROL_PER_PROCESSOR_CAPS: u32 = 32;
pub const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS: u32 = 63;
pub const MEMORY_PARTITION_QUERY_ACCESS: u32 = 1;
pub const MEMORY_PARTITION_MODIFY_ACCESS: u32 = 2;
pub const MEMORY_PARTITION_ALL_ACCESS: u32 = 2031619;
pub const EVENT_MODIFY_STATE: u32 = 2;
pub const EVENT_ALL_ACCESS: u32 = 2031619;
pub const MUTANT_QUERY_STATE: u32 = 1;
pub const MUTANT_ALL_ACCESS: u32 = 2031617;
pub const SEMAPHORE_MODIFY_STATE: u32 = 2;
pub const SEMAPHORE_ALL_ACCESS: u32 = 2031619;
pub const TIMER_QUERY_STATE: u32 = 1;
pub const TIMER_MODIFY_STATE: u32 = 2;
pub const TIMER_ALL_ACCESS: u32 = 2031619;
pub const TIME_ZONE_ID_UNKNOWN: u32 = 0;
pub const TIME_ZONE_ID_STANDARD: u32 = 1;
pub const TIME_ZONE_ID_DAYLIGHT: u32 = 2;
pub const LTP_PC_SMT: u32 = 1;
pub const CACHE_FULLY_ASSOCIATIVE: u32 = 255;
pub const SYSTEM_CPU_SET_INFORMATION_PARKED: u32 = 1;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED: u32 = 2;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS: u32 = 4;
pub const SYSTEM_CPU_SET_INFORMATION_REALTIME: u32 = 8;
pub const PROCESSOR_INTEL_386: u32 = 386;
pub const PROCESSOR_INTEL_486: u32 = 486;
pub const PROCESSOR_INTEL_PENTIUM: u32 = 586;
pub const PROCESSOR_INTEL_IA64: u32 = 2200;
pub const PROCESSOR_AMD_X8664: u32 = 8664;
pub const PROCESSOR_MIPS_R4000: u32 = 4000;
pub const PROCESSOR_ALPHA_21064: u32 = 21064;
pub const PROCESSOR_PPC_601: u32 = 601;
pub const PROCESSOR_PPC_603: u32 = 603;
pub const PROCESSOR_PPC_604: u32 = 604;
pub const PROCESSOR_PPC_620: u32 = 620;
pub const PROCESSOR_HITACHI_SH3: u32 = 10003;
pub const PROCESSOR_HITACHI_SH3E: u32 = 10004;
pub const PROCESSOR_HITACHI_SH4: u32 = 10005;
pub const PROCESSOR_MOTOROLA_821: u32 = 821;
pub const PROCESSOR_SHx_SH3: u32 = 103;
pub const PROCESSOR_SHx_SH4: u32 = 104;
pub const PROCESSOR_STRONGARM: u32 = 2577;
pub const PROCESSOR_ARM720: u32 = 1824;
pub const PROCESSOR_ARM820: u32 = 2080;
pub const PROCESSOR_ARM920: u32 = 2336;
pub const PROCESSOR_ARM_7TDMI: u32 = 70001;
pub const PROCESSOR_OPTIL: u32 = 18767;
pub const PROCESSOR_ARCHITECTURE_INTEL: u32 = 0;
pub const PROCESSOR_ARCHITECTURE_MIPS: u32 = 1;
pub const PROCESSOR_ARCHITECTURE_ALPHA: u32 = 2;
pub const PROCESSOR_ARCHITECTURE_PPC: u32 = 3;
pub const PROCESSOR_ARCHITECTURE_SHX: u32 = 4;
pub const PROCESSOR_ARCHITECTURE_ARM: u32 = 5;
pub const PROCESSOR_ARCHITECTURE_IA64: u32 = 6;
pub const PROCESSOR_ARCHITECTURE_ALPHA64: u32 = 7;
pub const PROCESSOR_ARCHITECTURE_MSIL: u32 = 8;
pub const PROCESSOR_ARCHITECTURE_AMD64: u32 = 9;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64: u32 = 10;
pub const PROCESSOR_ARCHITECTURE_NEUTRAL: u32 = 11;
pub const PROCESSOR_ARCHITECTURE_ARM64: u32 = 12;
pub const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64: u32 = 13;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64: u32 = 14;
pub const PROCESSOR_ARCHITECTURE_UNKNOWN: u32 = 65535;
pub const PF_FLOATING_POINT_PRECISION_ERRATA: u32 = 0;
pub const PF_FLOATING_POINT_EMULATED: u32 = 1;
pub const PF_COMPARE_EXCHANGE_DOUBLE: u32 = 2;
pub const PF_MMX_INSTRUCTIONS_AVAILABLE: u32 = 3;
pub const PF_PPC_MOVEMEM_64BIT_OK: u32 = 4;
pub const PF_ALPHA_BYTE_INSTRUCTIONS: u32 = 5;
pub const PF_XMMI_INSTRUCTIONS_AVAILABLE: u32 = 6;
pub const PF_3DNOW_INSTRUCTIONS_AVAILABLE: u32 = 7;
pub const PF_RDTSC_INSTRUCTION_AVAILABLE: u32 = 8;
pub const PF_PAE_ENABLED: u32 = 9;
pub const PF_XMMI64_INSTRUCTIONS_AVAILABLE: u32 = 10;
pub const PF_SSE_DAZ_MODE_AVAILABLE: u32 = 11;
pub const PF_NX_ENABLED: u32 = 12;
pub const PF_SSE3_INSTRUCTIONS_AVAILABLE: u32 = 13;
pub const PF_COMPARE_EXCHANGE128: u32 = 14;
pub const PF_COMPARE64_EXCHANGE128: u32 = 15;
pub const PF_CHANNELS_ENABLED: u32 = 16;
pub const PF_XSAVE_ENABLED: u32 = 17;
pub const PF_ARM_VFP_32_REGISTERS_AVAILABLE: u32 = 18;
pub const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE: u32 = 19;
pub const PF_SECOND_LEVEL_ADDRESS_TRANSLATION: u32 = 20;
pub const PF_VIRT_FIRMWARE_ENABLED: u32 = 21;
pub const PF_RDWRFSGSBASE_AVAILABLE: u32 = 22;
pub const PF_FASTFAIL_AVAILABLE: u32 = 23;
pub const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE: u32 = 24;
pub const PF_ARM_64BIT_LOADSTORE_ATOMIC: u32 = 25;
pub const PF_ARM_EXTERNAL_CACHE_AVAILABLE: u32 = 26;
pub const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE: u32 = 27;
pub const PF_RDRAND_INSTRUCTION_AVAILABLE: u32 = 28;
pub const PF_ARM_V8_INSTRUCTIONS_AVAILABLE: u32 = 29;
pub const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE: u32 = 30;
pub const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE: u32 = 31;
pub const PF_RDTSCP_INSTRUCTION_AVAILABLE: u32 = 32;
pub const PF_RDPID_INSTRUCTION_AVAILABLE: u32 = 33;
pub const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE: u32 = 34;
pub const PF_MONITORX_INSTRUCTION_AVAILABLE: u32 = 35;
pub const PF_SSSE3_INSTRUCTIONS_AVAILABLE: u32 = 36;
pub const PF_SSE4_1_INSTRUCTIONS_AVAILABLE: u32 = 37;
pub const PF_SSE4_2_INSTRUCTIONS_AVAILABLE: u32 = 38;
pub const PF_AVX_INSTRUCTIONS_AVAILABLE: u32 = 39;
pub const PF_AVX2_INSTRUCTIONS_AVAILABLE: u32 = 40;
pub const PF_AVX512F_INSTRUCTIONS_AVAILABLE: u32 = 41;
pub const PF_ERMS_AVAILABLE: u32 = 42;
pub const PF_ARM_V82_DP_INSTRUCTIONS_AVAILABLE: u32 = 43;
pub const PF_ARM_V83_JSCVT_INSTRUCTIONS_AVAILABLE: u32 = 44;
pub const PF_ARM_V83_LRCPC_INSTRUCTIONS_AVAILABLE: u32 = 45;
pub const PF_ARM_SVE_INSTRUCTIONS_AVAILABLE: u32 = 46;
pub const PF_ARM_SVE2_INSTRUCTIONS_AVAILABLE: u32 = 47;
pub const PF_ARM_SVE2_1_INSTRUCTIONS_AVAILABLE: u32 = 48;
pub const PF_ARM_SVE_AES_INSTRUCTIONS_AVAILABLE: u32 = 49;
pub const PF_ARM_SVE_PMULL128_INSTRUCTIONS_AVAILABLE: u32 = 50;
pub const PF_ARM_SVE_BITPERM_INSTRUCTIONS_AVAILABLE: u32 = 51;
pub const PF_ARM_SVE_BF16_INSTRUCTIONS_AVAILABLE: u32 = 52;
pub const PF_ARM_SVE_EBF16_INSTRUCTIONS_AVAILABLE: u32 = 53;
pub const PF_ARM_SVE_B16B16_INSTRUCTIONS_AVAILABLE: u32 = 54;
pub const PF_ARM_SVE_SHA3_INSTRUCTIONS_AVAILABLE: u32 = 55;
pub const PF_ARM_SVE_SM4_INSTRUCTIONS_AVAILABLE: u32 = 56;
pub const PF_ARM_SVE_I8MM_INSTRUCTIONS_AVAILABLE: u32 = 57;
pub const PF_ARM_SVE_F32MM_INSTRUCTIONS_AVAILABLE: u32 = 58;
pub const PF_ARM_SVE_F64MM_INSTRUCTIONS_AVAILABLE: u32 = 59;
pub const PF_BMI2_INSTRUCTIONS_AVAILABLE: u32 = 60;
pub const PF_MOVDIR64B_INSTRUCTION_AVAILABLE: u32 = 61;
pub const XSTATE_LEGACY_FLOATING_POINT: u32 = 0;
pub const XSTATE_LEGACY_SSE: u32 = 1;
pub const XSTATE_GSSE: u32 = 2;
pub const XSTATE_AVX: u32 = 2;
pub const XSTATE_MPX_BNDREGS: u32 = 3;
pub const XSTATE_MPX_BNDCSR: u32 = 4;
pub const XSTATE_AVX512_KMASK: u32 = 5;
pub const XSTATE_AVX512_ZMM_H: u32 = 6;
pub const XSTATE_AVX512_ZMM: u32 = 7;
pub const XSTATE_IPT: u32 = 8;
pub const XSTATE_PASID: u32 = 10;
pub const XSTATE_CET_U: u32 = 11;
pub const XSTATE_CET_S: u32 = 12;
pub const XSTATE_AMX_TILE_CONFIG: u32 = 17;
pub const XSTATE_AMX_TILE_DATA: u32 = 18;
pub const XSTATE_LWP: u32 = 62;
pub const MAXIMUM_XSTATE_FEATURES: u32 = 64;
pub const XSTATE_ARM64_SVE: u32 = 2;
pub const XSTATE_FIRST_NON_LEGACY_FEATURE: u32 = 2;
pub const XSTATE_COMPACTION_ENABLE: u32 = 63;
pub const XSTATE_ALIGN_BIT: u32 = 1;
pub const XSTATE_XFD_BIT: u32 = 2;
pub const XSTATE_CONTROLFLAG_XSAVEOPT_MASK: u32 = 1;
pub const XSTATE_CONTROLFLAG_XSAVEC_MASK: u32 = 2;
pub const XSTATE_CONTROLFLAG_XFD_MASK: u32 = 4;
pub const XSTATE_CONTROLFLAG_VALID_MASK: u32 = 7;
pub const CFG_CALL_TARGET_VALID: u32 = 1;
pub const CFG_CALL_TARGET_PROCESSED: u32 = 2;
pub const CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID: u32 = 4;
pub const CFG_CALL_TARGET_VALID_XFG: u32 = 8;
pub const CFG_CALL_TARGET_CONVERT_XFG_TO_CFG: u32 = 16;
pub const SECTION_QUERY: u32 = 1;
pub const SECTION_MAP_WRITE: u32 = 2;
pub const SECTION_MAP_READ: u32 = 4;
pub const SECTION_MAP_EXECUTE: u32 = 8;
pub const SECTION_EXTEND_SIZE: u32 = 16;
pub const SECTION_MAP_EXECUTE_EXPLICIT: u32 = 32;
pub const SECTION_ALL_ACCESS: u32 = 983071;
pub const SESSION_QUERY_ACCESS: u32 = 1;
pub const SESSION_MODIFY_ACCESS: u32 = 2;
pub const SESSION_ALL_ACCESS: u32 = 983043;
pub const PAGE_NOACCESS: u32 = 1;
pub const PAGE_READONLY: u32 = 2;
pub const PAGE_READWRITE: u32 = 4;
pub const PAGE_WRITECOPY: u32 = 8;
pub const PAGE_EXECUTE: u32 = 16;
pub const PAGE_EXECUTE_READ: u32 = 32;
pub const PAGE_EXECUTE_READWRITE: u32 = 64;
pub const PAGE_EXECUTE_WRITECOPY: u32 = 128;
pub const PAGE_GUARD: u32 = 256;
pub const PAGE_NOCACHE: u32 = 512;
pub const PAGE_WRITECOMBINE: u32 = 1024;
pub const PAGE_GRAPHICS_NOACCESS: u32 = 2048;
pub const PAGE_GRAPHICS_READONLY: u32 = 4096;
pub const PAGE_GRAPHICS_READWRITE: u32 = 8192;
pub const PAGE_GRAPHICS_EXECUTE: u32 = 16384;
pub const PAGE_GRAPHICS_EXECUTE_READ: u32 = 32768;
pub const PAGE_GRAPHICS_EXECUTE_READWRITE: u32 = 65536;
pub const PAGE_GRAPHICS_COHERENT: u32 = 131072;
pub const PAGE_GRAPHICS_NOCACHE: u32 = 262144;
pub const PAGE_ENCLAVE_THREAD_CONTROL: u32 = 2147483648;
pub const PAGE_REVERT_TO_FILE_MAP: u32 = 2147483648;
pub const PAGE_TARGETS_NO_UPDATE: u32 = 1073741824;
pub const PAGE_TARGETS_INVALID: u32 = 1073741824;
pub const PAGE_ENCLAVE_UNVALIDATED: u32 = 536870912;
pub const PAGE_ENCLAVE_MASK: u32 = 268435456;
pub const PAGE_ENCLAVE_DECOMMIT: u32 = 268435456;
pub const PAGE_ENCLAVE_SS_FIRST: u32 = 268435457;
pub const PAGE_ENCLAVE_SS_REST: u32 = 268435458;
pub const MEM_COMMIT: u32 = 4096;
pub const MEM_RESERVE: u32 = 8192;
pub const MEM_REPLACE_PLACEHOLDER: u32 = 16384;
pub const MEM_RESERVE_PLACEHOLDER: u32 = 262144;
pub const MEM_RESET: u32 = 524288;
pub const MEM_TOP_DOWN: u32 = 1048576;
pub const MEM_WRITE_WATCH: u32 = 2097152;
pub const MEM_PHYSICAL: u32 = 4194304;
pub const MEM_ROTATE: u32 = 8388608;
pub const MEM_DIFFERENT_IMAGE_BASE_OK: u32 = 8388608;
pub const MEM_RESET_UNDO: u32 = 16777216;
pub const MEM_LARGE_PAGES: u32 = 536870912;
pub const MEM_4MB_PAGES: u32 = 2147483648;
pub const MEM_64K_PAGES: u32 = 541065216;
pub const MEM_UNMAP_WITH_TRANSIENT_BOOST: u32 = 1;
pub const MEM_COALESCE_PLACEHOLDERS: u32 = 1;
pub const MEM_PRESERVE_PLACEHOLDER: u32 = 2;
pub const MEM_DECOMMIT: u32 = 16384;
pub const MEM_RELEASE: u32 = 32768;
pub const MEM_FREE: u32 = 65536;
pub const MEM_EXTENDED_PARAMETER_GRAPHICS: u32 = 1;
pub const MEM_EXTENDED_PARAMETER_NONPAGED: u32 = 2;
pub const MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL: u32 = 4;
pub const MEM_EXTENDED_PARAMETER_NONPAGED_LARGE: u32 = 8;
pub const MEM_EXTENDED_PARAMETER_NONPAGED_HUGE: u32 = 16;
pub const MEM_EXTENDED_PARAMETER_SOFT_FAULT_PAGES: u32 = 32;
pub const MEM_EXTENDED_PARAMETER_EC_CODE: u32 = 64;
pub const MEM_EXTENDED_PARAMETER_TYPE_BITS: u32 = 8;
pub const SEC_HUGE_PAGES: u32 = 131072;
pub const SEC_PARTITION_OWNER_HANDLE: u32 = 262144;
pub const SEC_64K_PAGES: u32 = 524288;
pub const SEC_FILE: u32 = 8388608;
pub const SEC_IMAGE: u32 = 16777216;
pub const SEC_PROTECTED_IMAGE: u32 = 33554432;
pub const SEC_RESERVE: u32 = 67108864;
pub const SEC_COMMIT: u32 = 134217728;
pub const SEC_NOCACHE: u32 = 268435456;
pub const SEC_WRITECOMBINE: u32 = 1073741824;
pub const SEC_LARGE_PAGES: u32 = 2147483648;
pub const SEC_IMAGE_NO_EXECUTE: u32 = 285212672;
pub const MEM_PRIVATE: u32 = 131072;
pub const MEM_MAPPED: u32 = 262144;
pub const MEM_IMAGE: u32 = 16777216;
pub const WRITE_WATCH_FLAG_RESET: u32 = 1;
pub const VM_PREFETCH_TO_WORKING_SET: u32 = 1;
pub const ENCLAVE_TYPE_SGX: u32 = 1;
pub const ENCLAVE_TYPE_SGX2: u32 = 2;
pub const ENCLAVE_TYPE_VBS: u32 = 16;
pub const ENCLAVE_VBS_FLAG_DEBUG: u32 = 1;
pub const ENCLAVE_TYPE_VBS_BASIC: u32 = 17;
pub const VBS_BASIC_PAGE_MEASURED_DATA: u32 = 1;
pub const VBS_BASIC_PAGE_UNMEASURED_DATA: u32 = 2;
pub const VBS_BASIC_PAGE_ZERO_FILL: u32 = 3;
pub const VBS_BASIC_PAGE_THREAD_DESCRIPTOR: u32 = 4;
pub const VBS_BASIC_PAGE_SYSTEM_CALL: u32 = 5;
pub const DEDICATED_MEMORY_CACHE_ELIGIBLE: u32 = 1;
pub const FILE_READ_DATA: u32 = 1;
pub const FILE_LIST_DIRECTORY: u32 = 1;
pub const FILE_WRITE_DATA: u32 = 2;
pub const FILE_ADD_FILE: u32 = 2;
pub const FILE_APPEND_DATA: u32 = 4;
pub const FILE_ADD_SUBDIRECTORY: u32 = 4;
pub const FILE_CREATE_PIPE_INSTANCE: u32 = 4;
pub const FILE_READ_EA: u32 = 8;
pub const FILE_WRITE_EA: u32 = 16;
pub const FILE_EXECUTE: u32 = 32;
pub const FILE_TRAVERSE: u32 = 32;
pub const FILE_DELETE_CHILD: u32 = 64;
pub const FILE_READ_ATTRIBUTES: u32 = 128;
pub const FILE_WRITE_ATTRIBUTES: u32 = 256;
pub const FILE_ALL_ACCESS: u32 = 2032127;
pub const FILE_GENERIC_READ: u32 = 1179785;
pub const FILE_GENERIC_WRITE: u32 = 1179926;
pub const FILE_GENERIC_EXECUTE: u32 = 1179808;
pub const FILE_SHARE_READ: u32 = 1;
pub const FILE_SHARE_WRITE: u32 = 2;
pub const FILE_SHARE_DELETE: u32 = 4;
pub const FILE_ATTRIBUTE_READONLY: u32 = 1;
pub const FILE_ATTRIBUTE_HIDDEN: u32 = 2;
pub const FILE_ATTRIBUTE_SYSTEM: u32 = 4;
pub const FILE_ATTRIBUTE_DIRECTORY: u32 = 16;
pub const FILE_ATTRIBUTE_ARCHIVE: u32 = 32;
pub const FILE_ATTRIBUTE_DEVICE: u32 = 64;
pub const FILE_ATTRIBUTE_NORMAL: u32 = 128;
pub const FILE_ATTRIBUTE_TEMPORARY: u32 = 256;
pub const FILE_ATTRIBUTE_SPARSE_FILE: u32 = 512;
pub const FILE_ATTRIBUTE_REPARSE_POINT: u32 = 1024;
pub const FILE_ATTRIBUTE_COMPRESSED: u32 = 2048;
pub const FILE_ATTRIBUTE_OFFLINE: u32 = 4096;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED: u32 = 8192;
pub const FILE_ATTRIBUTE_ENCRYPTED: u32 = 16384;
pub const FILE_ATTRIBUTE_INTEGRITY_STREAM: u32 = 32768;
pub const FILE_ATTRIBUTE_VIRTUAL: u32 = 65536;
pub const FILE_ATTRIBUTE_NO_SCRUB_DATA: u32 = 131072;
pub const FILE_ATTRIBUTE_EA: u32 = 262144;
pub const FILE_ATTRIBUTE_PINNED: u32 = 524288;
pub const FILE_ATTRIBUTE_UNPINNED: u32 = 1048576;
pub const FILE_ATTRIBUTE_RECALL_ON_OPEN: u32 = 262144;
pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS: u32 = 4194304;
pub const TREE_CONNECT_ATTRIBUTE_PRIVACY: u32 = 16384;
pub const TREE_CONNECT_ATTRIBUTE_INTEGRITY: u32 = 32768;
pub const TREE_CONNECT_ATTRIBUTE_GLOBAL: u32 = 4;
pub const TREE_CONNECT_ATTRIBUTE_PINNED: u32 = 2;
pub const FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL: u32 = 536870912;
pub const FILE_NOTIFY_CHANGE_FILE_NAME: u32 = 1;
pub const FILE_NOTIFY_CHANGE_DIR_NAME: u32 = 2;
pub const FILE_NOTIFY_CHANGE_ATTRIBUTES: u32 = 4;
pub const FILE_NOTIFY_CHANGE_SIZE: u32 = 8;
pub const FILE_NOTIFY_CHANGE_LAST_WRITE: u32 = 16;
pub const FILE_NOTIFY_CHANGE_LAST_ACCESS: u32 = 32;
pub const FILE_NOTIFY_CHANGE_CREATION: u32 = 64;
pub const FILE_NOTIFY_CHANGE_SECURITY: u32 = 256;
pub const FILE_ACTION_ADDED: u32 = 1;
pub const FILE_ACTION_REMOVED: u32 = 2;
pub const FILE_ACTION_MODIFIED: u32 = 3;
pub const FILE_ACTION_RENAMED_OLD_NAME: u32 = 4;
pub const FILE_ACTION_RENAMED_NEW_NAME: u32 = 5;
pub const FILE_CASE_SENSITIVE_SEARCH: u32 = 1;
pub const FILE_CASE_PRESERVED_NAMES: u32 = 2;
pub const FILE_UNICODE_ON_DISK: u32 = 4;
pub const FILE_PERSISTENT_ACLS: u32 = 8;
pub const FILE_FILE_COMPRESSION: u32 = 16;
pub const FILE_VOLUME_QUOTAS: u32 = 32;
pub const FILE_SUPPORTS_SPARSE_FILES: u32 = 64;
pub const FILE_SUPPORTS_REPARSE_POINTS: u32 = 128;
pub const FILE_SUPPORTS_REMOTE_STORAGE: u32 = 256;
pub const FILE_RETURNS_CLEANUP_RESULT_INFO: u32 = 512;
pub const FILE_SUPPORTS_POSIX_UNLINK_RENAME: u32 = 1024;
pub const FILE_SUPPORTS_BYPASS_IO: u32 = 2048;
pub const FILE_SUPPORTS_STREAM_SNAPSHOTS: u32 = 4096;
pub const FILE_SUPPORTS_CASE_SENSITIVE_DIRS: u32 = 8192;
pub const FILE_VOLUME_IS_COMPRESSED: u32 = 32768;
pub const FILE_SUPPORTS_OBJECT_IDS: u32 = 65536;
pub const FILE_SUPPORTS_ENCRYPTION: u32 = 131072;
pub const FILE_NAMED_STREAMS: u32 = 262144;
pub const FILE_READ_ONLY_VOLUME: u32 = 524288;
pub const FILE_SEQUENTIAL_WRITE_ONCE: u32 = 1048576;
pub const FILE_SUPPORTS_TRANSACTIONS: u32 = 2097152;
pub const FILE_SUPPORTS_HARD_LINKS: u32 = 4194304;
pub const FILE_SUPPORTS_EXTENDED_ATTRIBUTES: u32 = 8388608;
pub const FILE_SUPPORTS_OPEN_BY_FILE_ID: u32 = 16777216;
pub const FILE_SUPPORTS_USN_JOURNAL: u32 = 33554432;
pub const FILE_SUPPORTS_INTEGRITY_STREAMS: u32 = 67108864;
pub const FILE_SUPPORTS_BLOCK_REFCOUNTING: u32 = 134217728;
pub const FILE_SUPPORTS_SPARSE_VDL: u32 = 268435456;
pub const FILE_DAX_VOLUME: u32 = 536870912;
pub const FILE_SUPPORTS_GHOSTING: u32 = 1073741824;
pub const FILE_NAME_FLAG_HARDLINK: u32 = 0;
pub const FILE_NAME_FLAG_NTFS: u32 = 1;
pub const FILE_NAME_FLAG_DOS: u32 = 2;
pub const FILE_NAME_FLAG_BOTH: u32 = 3;
pub const FILE_NAME_FLAGS_UNSPECIFIED: u32 = 128;
pub const LX_FILE_METADATA_HAS_UID: u32 = 1;
pub const LX_FILE_METADATA_HAS_GID: u32 = 2;
pub const LX_FILE_METADATA_HAS_MODE: u32 = 4;
pub const LX_FILE_METADATA_HAS_DEVICE_ID: u32 = 8;
pub const LX_FILE_CASE_SENSITIVE_DIR: u32 = 16;
pub const FILE_CS_FLAG_CASE_SENSITIVE_DIR: u32 = 1;
pub const FLUSH_FLAGS_FILE_DATA_ONLY: u32 = 1;
pub const FLUSH_FLAGS_NO_SYNC: u32 = 2;
pub const FLUSH_FLAGS_FILE_DATA_SYNC_ONLY: u32 = 4;
pub const FLUSH_FLAGS_FLUSH_AND_PURGE: u32 = 8;
pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE: u32 = 16384;
pub const IO_REPARSE_TAG_RESERVED_ZERO: u32 = 0;
pub const IO_REPARSE_TAG_RESERVED_ONE: u32 = 1;
pub const IO_REPARSE_TAG_RESERVED_TWO: u32 = 2;
pub const IO_REPARSE_TAG_RESERVED_RANGE: u32 = 2;
pub const IO_REPARSE_TAG_RESERVED_INVALID: u32 = 3221258240;
pub const IO_REPARSE_TAG_MOUNT_POINT: u32 = 2684354563;
pub const IO_REPARSE_TAG_HSM: u32 = 3221225476;
pub const IO_REPARSE_TAG_HSM2: u32 = 2147483654;
pub const IO_REPARSE_TAG_SIS: u32 = 2147483655;
pub const IO_REPARSE_TAG_WIM: u32 = 2147483656;
pub const IO_REPARSE_TAG_CSV: u32 = 2147483657;
pub const IO_REPARSE_TAG_DFS: u32 = 2147483658;
pub const IO_REPARSE_TAG_SYMLINK: u32 = 2684354572;
pub const IO_REPARSE_TAG_DFSR: u32 = 2147483666;
pub const IO_REPARSE_TAG_DEDUP: u32 = 2147483667;
pub const IO_REPARSE_TAG_NFS: u32 = 2147483668;
pub const IO_REPARSE_TAG_FILE_PLACEHOLDER: u32 = 2147483669;
pub const IO_REPARSE_TAG_WOF: u32 = 2147483671;
pub const IO_REPARSE_TAG_WCI: u32 = 2147483672;
pub const IO_REPARSE_TAG_WCI_1: u32 = 2415923224;
pub const IO_REPARSE_TAG_GLOBAL_REPARSE: u32 = 2684354585;
pub const IO_REPARSE_TAG_CLOUD: u32 = 2415919130;
pub const IO_REPARSE_TAG_CLOUD_1: u32 = 2415923226;
pub const IO_REPARSE_TAG_CLOUD_2: u32 = 2415927322;
pub const IO_REPARSE_TAG_CLOUD_3: u32 = 2415931418;
pub const IO_REPARSE_TAG_CLOUD_4: u32 = 2415935514;
pub const IO_REPARSE_TAG_CLOUD_5: u32 = 2415939610;
pub const IO_REPARSE_TAG_CLOUD_6: u32 = 2415943706;
pub const IO_REPARSE_TAG_CLOUD_7: u32 = 2415947802;
pub const IO_REPARSE_TAG_CLOUD_8: u32 = 2415951898;
pub const IO_REPARSE_TAG_CLOUD_9: u32 = 2415955994;
pub const IO_REPARSE_TAG_CLOUD_A: u32 = 2415960090;
pub const IO_REPARSE_TAG_CLOUD_B: u32 = 2415964186;
pub const IO_REPARSE_TAG_CLOUD_C: u32 = 2415968282;
pub const IO_REPARSE_TAG_CLOUD_D: u32 = 2415972378;
pub const IO_REPARSE_TAG_CLOUD_E: u32 = 2415976474;
pub const IO_REPARSE_TAG_CLOUD_F: u32 = 2415980570;
pub const IO_REPARSE_TAG_CLOUD_MASK: u32 = 61440;
pub const IO_REPARSE_TAG_APPEXECLINK: u32 = 2147483675;
pub const IO_REPARSE_TAG_PROJFS: u32 = 2415919132;
pub const IO_REPARSE_TAG_STORAGE_SYNC: u32 = 2147483678;
pub const IO_REPARSE_TAG_WCI_TOMBSTONE: u32 = 2684354591;
pub const IO_REPARSE_TAG_UNHANDLED: u32 = 2147483680;
pub const IO_REPARSE_TAG_ONEDRIVE: u32 = 2147483681;
pub const IO_REPARSE_TAG_PROJFS_TOMBSTONE: u32 = 2684354594;
pub const IO_REPARSE_TAG_AF_UNIX: u32 = 2147483683;
pub const IO_REPARSE_TAG_STORAGE_SYNC_FOLDER: u32 = 2415919143;
pub const IO_REPARSE_TAG_WCI_LINK: u32 = 2684354599;
pub const IO_REPARSE_TAG_WCI_LINK_1: u32 = 2684358695;
pub const IO_REPARSE_TAG_DATALESS_CIM: u32 = 2684354600;
pub const SCRUB_DATA_INPUT_FLAG_RESUME: u32 = 1;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC: u32 = 2;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA: u32 = 4;
pub const SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY: u32 = 8;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_DATA: u32 = 16;
pub const SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID: u32 = 32;
pub const SCRUB_DATA_INPUT_FLAG_OPLOCK_NOT_ACQUIRED: u32 = 64;
pub const SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE: u32 = 1;
pub const SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE: u32 = 65536;
pub const SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED: u32 = 131072;
pub const SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED: u32 = 262144;
pub const SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS: u32 = 1;
pub const IO_COMPLETION_MODIFY_STATE: u32 = 2;
pub const IO_COMPLETION_ALL_ACCESS: u32 = 2031619;
pub const IO_QOS_MAX_RESERVATION: u32 = 1000000000;
pub const SMB_CCF_APP_INSTANCE_EA_NAME: &[u8; 29] = b"ClusteredApplicationInstance\0";
pub const NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR: u32 = 1;
pub const DUPLICATE_CLOSE_SOURCE: u32 = 1;
pub const DUPLICATE_SAME_ACCESS: u32 = 2;
pub const POWERBUTTON_ACTION_INDEX_NOTHING: u32 = 0;
pub const POWERBUTTON_ACTION_INDEX_SLEEP: u32 = 1;
pub const POWERBUTTON_ACTION_INDEX_HIBERNATE: u32 = 2;
pub const POWERBUTTON_ACTION_INDEX_SHUTDOWN: u32 = 3;
pub const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY: u32 = 4;
pub const POWERBUTTON_ACTION_VALUE_NOTHING: u32 = 0;
pub const POWERBUTTON_ACTION_VALUE_SLEEP: u32 = 2;
pub const POWERBUTTON_ACTION_VALUE_HIBERNATE: u32 = 3;
pub const POWERBUTTON_ACTION_VALUE_SHUTDOWN: u32 = 6;
pub const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY: u32 = 8;
pub const PERFSTATE_POLICY_CHANGE_IDEAL: u32 = 0;
pub const PERFSTATE_POLICY_CHANGE_SINGLE: u32 = 1;
pub const PERFSTATE_POLICY_CHANGE_ROCKET: u32 = 2;
pub const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE: u32 = 3;
pub const PERFSTATE_POLICY_CHANGE_DECREASE_MAX: u32 = 2;
pub const PERFSTATE_POLICY_CHANGE_INCREASE_MAX: u32 = 3;
pub const PROCESSOR_THROTTLE_DISABLED: u32 = 0;
pub const PROCESSOR_THROTTLE_ENABLED: u32 = 1;
pub const PROCESSOR_THROTTLE_AUTOMATIC: u32 = 2;
pub const PROCESSOR_PERF_BOOST_POLICY_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_BOOST_POLICY_MAX: u32 = 100;
pub const PROCESSOR_PERF_BOOST_MODE_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_BOOST_MODE_ENABLED: u32 = 1;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE: u32 = 2;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED: u32 = 3;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE: u32 = 4;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED: u32 = 5;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED: u32 = 6;
pub const PROCESSOR_PERF_BOOST_MODE_MAX: u32 = 6;
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED: u32 = 0;
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED: u32 = 1;
pub const PROCESSOR_PERF_PERFORMANCE_PREFERENCE: u32 = 255;
pub const PROCESSOR_PERF_ENERGY_PREFERENCE: u32 = 0;
pub const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW: u32 = 0;
pub const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW: u32 = 1270000000;
pub const PROCESSOR_DUTY_CYCLING_DISABLED: u32 = 0;
pub const PROCESSOR_DUTY_CYCLING_ENABLED: u32 = 1;
pub const CORE_PARKING_POLICY_CHANGE_IDEAL: u32 = 0;
pub const CORE_PARKING_POLICY_CHANGE_SINGLE: u32 = 1;
pub const CORE_PARKING_POLICY_CHANGE_ROCKET: u32 = 2;
pub const CORE_PARKING_POLICY_CHANGE_MULTISTEP: u32 = 3;
pub const CORE_PARKING_POLICY_CHANGE_MAX: u32 = 3;
pub const PARKING_TOPOLOGY_POLICY_DISABLED: u32 = 0;
pub const PARKING_TOPOLOGY_POLICY_ROUNDROBIN: u32 = 1;
pub const PARKING_TOPOLOGY_POLICY_SEQUENTIAL: u32 = 2;
pub const SMT_UNPARKING_POLICY_CORE: u32 = 0;
pub const SMT_UNPARKING_POLICY_CORE_PER_THREAD: u32 = 1;
pub const SMT_UNPARKING_POLICY_LP_ROUNDROBIN: u32 = 2;
pub const SMT_UNPARKING_POLICY_LP_SEQUENTIAL: u32 = 3;
pub const POWER_DEVICE_IDLE_POLICY_PERFORMANCE: u32 = 0;
pub const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE: u32 = 1;
pub const POWER_CONNECTIVITY_IN_STANDBY_DISABLED: u32 = 0;
pub const POWER_CONNECTIVITY_IN_STANDBY_ENABLED: u32 = 1;
pub const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED: u32 = 2;
pub const POWER_DISCONNECTED_STANDBY_MODE_NORMAL: u32 = 0;
pub const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE: u32 = 1;
pub const POWER_SYSTEM_MAXIMUM: u32 = 7;
pub const DIAGNOSTIC_REASON_VERSION: u32 = 0;
pub const DIAGNOSTIC_REASON_SIMPLE_STRING: u32 = 1;
pub const DIAGNOSTIC_REASON_DETAILED_STRING: u32 = 2;
pub const DIAGNOSTIC_REASON_NOT_SPECIFIED: u32 = 2147483648;
pub const DIAGNOSTIC_REASON_INVALID_FLAGS: i64 = -2147483656;
pub const POWER_REQUEST_CONTEXT_VERSION: u32 = 0;
pub const POWER_REQUEST_CONTEXT_SIMPLE_STRING: u32 = 1;
pub const POWER_REQUEST_CONTEXT_DETAILED_STRING: u32 = 2;
pub const PDCAP_D0_SUPPORTED: u32 = 1;
pub const PDCAP_D1_SUPPORTED: u32 = 2;
pub const PDCAP_D2_SUPPORTED: u32 = 4;
pub const PDCAP_D3_SUPPORTED: u32 = 8;
pub const PDCAP_WAKE_FROM_D0_SUPPORTED: u32 = 16;
pub const PDCAP_WAKE_FROM_D1_SUPPORTED: u32 = 32;
pub const PDCAP_WAKE_FROM_D2_SUPPORTED: u32 = 64;
pub const PDCAP_WAKE_FROM_D3_SUPPORTED: u32 = 128;
pub const PDCAP_WARM_EJECT_SUPPORTED: u32 = 256;
pub const POWER_SETTING_VALUE_VERSION: u32 = 1;
pub const POWER_PLATFORM_ROLE_V1: u32 = 1;
pub const POWER_PLATFORM_ROLE_V2: u32 = 2;
pub const POWER_PLATFORM_ROLE_VERSION: u32 = 2;
pub const PROC_IDLE_BUCKET_COUNT: u32 = 6;
pub const PROC_IDLE_BUCKET_COUNT_EX: u32 = 16;
pub const ACPI_PPM_SOFTWARE_ALL: u32 = 252;
pub const ACPI_PPM_SOFTWARE_ANY: u32 = 253;
pub const ACPI_PPM_HARDWARE_ALL: u32 = 254;
pub const MS_PPM_SOFTWARE_ALL: u32 = 1;
pub const PPM_FIRMWARE_ACPI1C2: u32 = 1;
pub const PPM_FIRMWARE_ACPI1C3: u32 = 2;
pub const PPM_FIRMWARE_ACPI1TSTATES: u32 = 4;
pub const PPM_FIRMWARE_CST: u32 = 8;
pub const PPM_FIRMWARE_CSD: u32 = 16;
pub const PPM_FIRMWARE_PCT: u32 = 32;
pub const PPM_FIRMWARE_PSS: u32 = 64;
pub const PPM_FIRMWARE_XPSS: u32 = 128;
pub const PPM_FIRMWARE_PPC: u32 = 256;
pub const PPM_FIRMWARE_PSD: u32 = 512;
pub const PPM_FIRMWARE_PTC: u32 = 1024;
pub const PPM_FIRMWARE_TSS: u32 = 2048;
pub const PPM_FIRMWARE_TPC: u32 = 4096;
pub const PPM_FIRMWARE_TSD: u32 = 8192;
pub const PPM_FIRMWARE_PCCH: u32 = 16384;
pub const PPM_FIRMWARE_PCCP: u32 = 32768;
pub const PPM_FIRMWARE_OSC: u32 = 65536;
pub const PPM_FIRMWARE_PDC: u32 = 131072;
pub const PPM_FIRMWARE_CPC: u32 = 262144;
pub const PPM_FIRMWARE_LPI: u32 = 524288;
pub const PPM_PERFORMANCE_IMPLEMENTATION_NONE: u32 = 0;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES: u32 = 1;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1: u32 = 2;
pub const PPM_PERFORMANCE_IMPLEMENTATION_CPPC: u32 = 3;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PEP: u32 = 4;
pub const PPM_IDLE_IMPLEMENTATION_NONE: u32 = 0;
pub const PPM_IDLE_IMPLEMENTATION_CSTATES: u32 = 1;
pub const PPM_IDLE_IMPLEMENTATION_PEP: u32 = 2;
pub const PPM_IDLE_IMPLEMENTATION_MICROPEP: u32 = 3;
pub const PPM_IDLE_IMPLEMENTATION_LPISTATES: u32 = 4;
pub const POWER_ACTION_QUERY_ALLOWED: u32 = 1;
pub const POWER_ACTION_UI_ALLOWED: u32 = 2;
pub const POWER_ACTION_OVERRIDE_APPS: u32 = 4;
pub const POWER_ACTION_HIBERBOOT: u32 = 8;
pub const POWER_ACTION_USER_NOTIFY: u32 = 16;
pub const POWER_ACTION_DOZE_TO_HIBERNATE: u32 = 32;
pub const POWER_ACTION_ACPI_CRITICAL: u32 = 16777216;
pub const POWER_ACTION_ACPI_USER_NOTIFY: u32 = 33554432;
pub const POWER_ACTION_DIRECTED_DRIPS: u32 = 67108864;
pub const POWER_ACTION_PSEUDO_TRANSITION: u32 = 134217728;
pub const POWER_ACTION_LIGHTEST_FIRST: u32 = 268435456;
pub const POWER_ACTION_LOCK_CONSOLE: u32 = 536870912;
pub const POWER_ACTION_DISABLE_WAKES: u32 = 1073741824;
pub const POWER_ACTION_CRITICAL: u32 = 2147483648;
pub const POWER_LEVEL_USER_NOTIFY_TEXT: u32 = 1;
pub const POWER_LEVEL_USER_NOTIFY_SOUND: u32 = 2;
pub const POWER_LEVEL_USER_NOTIFY_EXEC: u32 = 4;
pub const POWER_USER_NOTIFY_BUTTON: u32 = 8;
pub const POWER_USER_NOTIFY_SHUTDOWN: u32 = 16;
pub const POWER_USER_NOTIFY_FORCED_SHUTDOWN: u32 = 32;
pub const POWER_FORCE_TRIGGER_RESET: u32 = 2147483648;
pub const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK: u32 = 7;
pub const BATTERY_DISCHARGE_FLAGS_ENABLE: u32 = 2147483648;
pub const NUM_DISCHARGE_POLICIES: u32 = 4;
pub const DISCHARGE_POLICY_CRITICAL: u32 = 0;
pub const DISCHARGE_POLICY_LOW: u32 = 1;
pub const PROCESSOR_IDLESTATE_POLICY_COUNT: u32 = 3;
pub const PO_THROTTLE_NONE: u32 = 0;
pub const PO_THROTTLE_CONSTANT: u32 = 1;
pub const PO_THROTTLE_DEGRADE: u32 = 2;
pub const PO_THROTTLE_ADAPTIVE: u32 = 3;
pub const PO_THROTTLE_MAXIMUM: u32 = 4;
pub const HIBERFILE_TYPE_NONE: u32 = 0;
pub const HIBERFILE_TYPE_REDUCED: u32 = 1;
pub const HIBERFILE_TYPE_FULL: u32 = 2;
pub const HIBERFILE_TYPE_MAX: u32 = 3;
pub const IMAGE_DOS_SIGNATURE: u32 = 23117;
pub const IMAGE_OS2_SIGNATURE: u32 = 17742;
pub const IMAGE_OS2_SIGNATURE_LE: u32 = 17740;
pub const IMAGE_VXD_SIGNATURE: u32 = 17740;
pub const IMAGE_NT_SIGNATURE: u32 = 17744;
pub const IMAGE_SIZEOF_FILE_HEADER: u32 = 20;
pub const IMAGE_FILE_RELOCS_STRIPPED: u32 = 1;
pub const IMAGE_FILE_EXECUTABLE_IMAGE: u32 = 2;
pub const IMAGE_FILE_LINE_NUMS_STRIPPED: u32 = 4;
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED: u32 = 8;
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM: u32 = 16;
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE: u32 = 32;
pub const IMAGE_FILE_BYTES_REVERSED_LO: u32 = 128;
pub const IMAGE_FILE_32BIT_MACHINE: u32 = 256;
pub const IMAGE_FILE_DEBUG_STRIPPED: u32 = 512;
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP: u32 = 1024;
pub const IMAGE_FILE_NET_RUN_FROM_SWAP: u32 = 2048;
pub const IMAGE_FILE_SYSTEM: u32 = 4096;
pub const IMAGE_FILE_DLL: u32 = 8192;
pub const IMAGE_FILE_UP_SYSTEM_ONLY: u32 = 16384;
pub const IMAGE_FILE_BYTES_REVERSED_HI: u32 = 32768;
pub const IMAGE_FILE_MACHINE_UNKNOWN: u32 = 0;
pub const IMAGE_FILE_MACHINE_TARGET_HOST: u32 = 1;
pub const IMAGE_FILE_MACHINE_I386: u32 = 332;
pub const IMAGE_FILE_MACHINE_R3000: u32 = 354;
pub const IMAGE_FILE_MACHINE_R4000: u32 = 358;
pub const IMAGE_FILE_MACHINE_R10000: u32 = 360;
pub const IMAGE_FILE_MACHINE_WCEMIPSV2: u32 = 361;
pub const IMAGE_FILE_MACHINE_ALPHA: u32 = 388;
pub const IMAGE_FILE_MACHINE_SH3: u32 = 418;
pub const IMAGE_FILE_MACHINE_SH3DSP: u32 = 419;
pub const IMAGE_FILE_MACHINE_SH3E: u32 = 420;
pub const IMAGE_FILE_MACHINE_SH4: u32 = 422;
pub const IMAGE_FILE_MACHINE_SH5: u32 = 424;
pub const IMAGE_FILE_MACHINE_ARM: u32 = 448;
pub const IMAGE_FILE_MACHINE_THUMB: u32 = 450;
pub const IMAGE_FILE_MACHINE_ARMNT: u32 = 452;
pub const IMAGE_FILE_MACHINE_AM33: u32 = 467;
pub const IMAGE_FILE_MACHINE_POWERPC: u32 = 496;
pub const IMAGE_FILE_MACHINE_POWERPCFP: u32 = 497;
pub const IMAGE_FILE_MACHINE_IA64: u32 = 512;
pub const IMAGE_FILE_MACHINE_MIPS16: u32 = 614;
pub const IMAGE_FILE_MACHINE_ALPHA64: u32 = 644;
pub const IMAGE_FILE_MACHINE_MIPSFPU: u32 = 870;
pub const IMAGE_FILE_MACHINE_MIPSFPU16: u32 = 1126;
pub const IMAGE_FILE_MACHINE_AXP64: u32 = 644;
pub const IMAGE_FILE_MACHINE_TRICORE: u32 = 1312;
pub const IMAGE_FILE_MACHINE_CEF: u32 = 3311;
pub const IMAGE_FILE_MACHINE_EBC: u32 = 3772;
pub const IMAGE_FILE_MACHINE_AMD64: u32 = 34404;
pub const IMAGE_FILE_MACHINE_M32R: u32 = 36929;
pub const IMAGE_FILE_MACHINE_ARM64: u32 = 43620;
pub const IMAGE_FILE_MACHINE_CEE: u32 = 49390;
pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES: u32 = 16;
pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC: u32 = 267;
pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC: u32 = 523;
pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC: u32 = 263;
pub const IMAGE_NT_OPTIONAL_HDR_MAGIC: u32 = 523;
pub const IMAGE_SUBSYSTEM_UNKNOWN: u32 = 0;
pub const IMAGE_SUBSYSTEM_NATIVE: u32 = 1;
pub const IMAGE_SUBSYSTEM_WINDOWS_GUI: u32 = 2;
pub const IMAGE_SUBSYSTEM_WINDOWS_CUI: u32 = 3;
pub const IMAGE_SUBSYSTEM_OS2_CUI: u32 = 5;
pub const IMAGE_SUBSYSTEM_POSIX_CUI: u32 = 7;
pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS: u32 = 8;
pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI: u32 = 9;
pub const IMAGE_SUBSYSTEM_EFI_APPLICATION: u32 = 10;
pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER: u32 = 11;
pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER: u32 = 12;
pub const IMAGE_SUBSYSTEM_EFI_ROM: u32 = 13;
pub const IMAGE_SUBSYSTEM_XBOX: u32 = 14;
pub const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION: u32 = 16;
pub const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG: u32 = 17;
pub const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: u32 = 32;
pub const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: u32 = 64;
pub const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: u32 = 128;
pub const IMAGE_DLLCHARACTERISTICS_NX_COMPAT: u32 = 256;
pub const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: u32 = 512;
pub const IMAGE_DLLCHARACTERISTICS_NO_SEH: u32 = 1024;
pub const IMAGE_DLLCHARACTERISTICS_NO_BIND: u32 = 2048;
pub const IMAGE_DLLCHARACTERISTICS_APPCONTAINER: u32 = 4096;
pub const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER: u32 = 8192;
pub const IMAGE_DLLCHARACTERISTICS_GUARD_CF: u32 = 16384;
pub const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE: u32 = 32768;
pub const IMAGE_DIRECTORY_ENTRY_EXPORT: u32 = 0;
pub const IMAGE_DIRECTORY_ENTRY_IMPORT: u32 = 1;
pub const IMAGE_DIRECTORY_ENTRY_RESOURCE: u32 = 2;
pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION: u32 = 3;
pub const IMAGE_DIRECTORY_ENTRY_SECURITY: u32 = 4;
pub const IMAGE_DIRECTORY_ENTRY_BASERELOC: u32 = 5;
pub const IMAGE_DIRECTORY_ENTRY_DEBUG: u32 = 6;
pub const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE: u32 = 7;
pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR: u32 = 8;
pub const IMAGE_DIRECTORY_ENTRY_TLS: u32 = 9;
pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG: u32 = 10;
pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT: u32 = 11;
pub const IMAGE_DIRECTORY_ENTRY_IAT: u32 = 12;
pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT: u32 = 13;
pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR: u32 = 14;
pub const IMAGE_SIZEOF_SHORT_NAME: u32 = 8;
pub const IMAGE_SIZEOF_SECTION_HEADER: u32 = 40;
pub const IMAGE_SCN_TYPE_NO_PAD: u32 = 8;
pub const IMAGE_SCN_CNT_CODE: u32 = 32;
pub const IMAGE_SCN_CNT_INITIALIZED_DATA: u32 = 64;
pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA: u32 = 128;
pub const IMAGE_SCN_LNK_OTHER: u32 = 256;
pub const IMAGE_SCN_LNK_INFO: u32 = 512;
pub const IMAGE_SCN_LNK_REMOVE: u32 = 2048;
pub const IMAGE_SCN_LNK_COMDAT: u32 = 4096;
pub const IMAGE_SCN_NO_DEFER_SPEC_EXC: u32 = 16384;
pub const IMAGE_SCN_GPREL: u32 = 32768;
pub const IMAGE_SCN_MEM_FARDATA: u32 = 32768;
pub const IMAGE_SCN_MEM_PURGEABLE: u32 = 131072;
pub const IMAGE_SCN_MEM_16BIT: u32 = 131072;
pub const IMAGE_SCN_MEM_LOCKED: u32 = 262144;
pub const IMAGE_SCN_MEM_PRELOAD: u32 = 524288;
pub const IMAGE_SCN_ALIGN_1BYTES: u32 = 1048576;
pub const IMAGE_SCN_ALIGN_2BYTES: u32 = 2097152;
pub const IMAGE_SCN_ALIGN_4BYTES: u32 = 3145728;
pub const IMAGE_SCN_ALIGN_8BYTES: u32 = 4194304;
pub const IMAGE_SCN_ALIGN_16BYTES: u32 = 5242880;
pub const IMAGE_SCN_ALIGN_32BYTES: u32 = 6291456;
pub const IMAGE_SCN_ALIGN_64BYTES: u32 = 7340032;
pub const IMAGE_SCN_ALIGN_128BYTES: u32 = 8388608;
pub const IMAGE_SCN_ALIGN_256BYTES: u32 = 9437184;
pub const IMAGE_SCN_ALIGN_512BYTES: u32 = 10485760;
pub const IMAGE_SCN_ALIGN_1024BYTES: u32 = 11534336;
pub const IMAGE_SCN_ALIGN_2048BYTES: u32 = 12582912;
pub const IMAGE_SCN_ALIGN_4096BYTES: u32 = 13631488;
pub const IMAGE_SCN_ALIGN_8192BYTES: u32 = 14680064;
pub const IMAGE_SCN_ALIGN_MASK: u32 = 15728640;
pub const IMAGE_SCN_LNK_NRELOC_OVFL: u32 = 16777216;
pub const IMAGE_SCN_MEM_DISCARDABLE: u32 = 33554432;
pub const IMAGE_SCN_MEM_NOT_CACHED: u32 = 67108864;
pub const IMAGE_SCN_MEM_NOT_PAGED: u32 = 134217728;
pub const IMAGE_SCN_MEM_SHARED: u32 = 268435456;
pub const IMAGE_SCN_MEM_EXECUTE: u32 = 536870912;
pub const IMAGE_SCN_MEM_READ: u32 = 1073741824;
pub const IMAGE_SCN_MEM_WRITE: u32 = 2147483648;
pub const IMAGE_SCN_SCALE_INDEX: u32 = 1;
pub const IMAGE_SIZEOF_SYMBOL: u32 = 18;
pub const IMAGE_SYM_SECTION_MAX: u32 = 65279;
pub const IMAGE_SYM_SECTION_MAX_EX: u32 = 2147483647;
pub const IMAGE_SYM_TYPE_NULL: u32 = 0;
pub const IMAGE_SYM_TYPE_VOID: u32 = 1;
pub const IMAGE_SYM_TYPE_CHAR: u32 = 2;
pub const IMAGE_SYM_TYPE_SHORT: u32 = 3;
pub const IMAGE_SYM_TYPE_INT: u32 = 4;
pub const IMAGE_SYM_TYPE_LONG: u32 = 5;
pub const IMAGE_SYM_TYPE_FLOAT: u32 = 6;
pub const IMAGE_SYM_TYPE_DOUBLE: u32 = 7;
pub const IMAGE_SYM_TYPE_STRUCT: u32 = 8;
pub const IMAGE_SYM_TYPE_UNION: u32 = 9;
pub const IMAGE_SYM_TYPE_ENUM: u32 = 10;
pub const IMAGE_SYM_TYPE_MOE: u32 = 11;
pub const IMAGE_SYM_TYPE_BYTE: u32 = 12;
pub const IMAGE_SYM_TYPE_WORD: u32 = 13;
pub const IMAGE_SYM_TYPE_UINT: u32 = 14;
pub const IMAGE_SYM_TYPE_DWORD: u32 = 15;
pub const IMAGE_SYM_TYPE_PCODE: u32 = 32768;
pub const IMAGE_SYM_DTYPE_NULL: u32 = 0;
pub const IMAGE_SYM_DTYPE_POINTER: u32 = 1;
pub const IMAGE_SYM_DTYPE_FUNCTION: u32 = 2;
pub const IMAGE_SYM_DTYPE_ARRAY: u32 = 3;
pub const IMAGE_SYM_CLASS_NULL: u32 = 0;
pub const IMAGE_SYM_CLASS_AUTOMATIC: u32 = 1;
pub const IMAGE_SYM_CLASS_EXTERNAL: u32 = 2;
pub const IMAGE_SYM_CLASS_STATIC: u32 = 3;
pub const IMAGE_SYM_CLASS_REGISTER: u32 = 4;
pub const IMAGE_SYM_CLASS_EXTERNAL_DEF: u32 = 5;
pub const IMAGE_SYM_CLASS_LABEL: u32 = 6;
pub const IMAGE_SYM_CLASS_UNDEFINED_LABEL: u32 = 7;
pub const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT: u32 = 8;
pub const IMAGE_SYM_CLASS_ARGUMENT: u32 = 9;
pub const IMAGE_SYM_CLASS_STRUCT_TAG: u32 = 10;
pub const IMAGE_SYM_CLASS_MEMBER_OF_UNION: u32 = 11;
pub const IMAGE_SYM_CLASS_UNION_TAG: u32 = 12;
pub const IMAGE_SYM_CLASS_TYPE_DEFINITION: u32 = 13;
pub const IMAGE_SYM_CLASS_UNDEFINED_STATIC: u32 = 14;
pub const IMAGE_SYM_CLASS_ENUM_TAG: u32 = 15;
pub const IMAGE_SYM_CLASS_MEMBER_OF_ENUM: u32 = 16;
pub const IMAGE_SYM_CLASS_REGISTER_PARAM: u32 = 17;
pub const IMAGE_SYM_CLASS_BIT_FIELD: u32 = 18;
pub const IMAGE_SYM_CLASS_FAR_EXTERNAL: u32 = 68;
pub const IMAGE_SYM_CLASS_BLOCK: u32 = 100;
pub const IMAGE_SYM_CLASS_FUNCTION: u32 = 101;
pub const IMAGE_SYM_CLASS_END_OF_STRUCT: u32 = 102;
pub const IMAGE_SYM_CLASS_FILE: u32 = 103;
pub const IMAGE_SYM_CLASS_SECTION: u32 = 104;
pub const IMAGE_SYM_CLASS_WEAK_EXTERNAL: u32 = 105;
pub const IMAGE_SYM_CLASS_CLR_TOKEN: u32 = 107;
pub const N_BTMASK: u32 = 15;
pub const N_TMASK: u32 = 48;
pub const N_TMASK1: u32 = 192;
pub const N_TMASK2: u32 = 240;
pub const N_BTSHFT: u32 = 4;
pub const N_TSHIFT: u32 = 2;
pub const IMAGE_COMDAT_SELECT_NODUPLICATES: u32 = 1;
pub const IMAGE_COMDAT_SELECT_ANY: u32 = 2;
pub const IMAGE_COMDAT_SELECT_SAME_SIZE: u32 = 3;
pub const IMAGE_COMDAT_SELECT_EXACT_MATCH: u32 = 4;
pub const IMAGE_COMDAT_SELECT_ASSOCIATIVE: u32 = 5;
pub const IMAGE_COMDAT_SELECT_LARGEST: u32 = 6;
pub const IMAGE_COMDAT_SELECT_NEWEST: u32 = 7;
pub const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY: u32 = 1;
pub const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY: u32 = 2;
pub const IMAGE_WEAK_EXTERN_SEARCH_ALIAS: u32 = 3;
pub const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY: u32 = 4;
pub const IMAGE_REL_I386_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_I386_DIR16: u32 = 1;
pub const IMAGE_REL_I386_REL16: u32 = 2;
pub const IMAGE_REL_I386_DIR32: u32 = 6;
pub const IMAGE_REL_I386_DIR32NB: u32 = 7;
pub const IMAGE_REL_I386_SEG12: u32 = 9;
pub const IMAGE_REL_I386_SECTION: u32 = 10;
pub const IMAGE_REL_I386_SECREL: u32 = 11;
pub const IMAGE_REL_I386_TOKEN: u32 = 12;
pub const IMAGE_REL_I386_SECREL7: u32 = 13;
pub const IMAGE_REL_I386_REL32: u32 = 20;
pub const IMAGE_REL_MIPS_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_MIPS_REFHALF: u32 = 1;
pub const IMAGE_REL_MIPS_REFWORD: u32 = 2;
pub const IMAGE_REL_MIPS_JMPADDR: u32 = 3;
pub const IMAGE_REL_MIPS_REFHI: u32 = 4;
pub const IMAGE_REL_MIPS_REFLO: u32 = 5;
pub const IMAGE_REL_MIPS_GPREL: u32 = 6;
pub const IMAGE_REL_MIPS_LITERAL: u32 = 7;
pub const IMAGE_REL_MIPS_SECTION: u32 = 10;
pub const IMAGE_REL_MIPS_SECREL: u32 = 11;
pub const IMAGE_REL_MIPS_SECRELLO: u32 = 12;
pub const IMAGE_REL_MIPS_SECRELHI: u32 = 13;
pub const IMAGE_REL_MIPS_TOKEN: u32 = 14;
pub const IMAGE_REL_MIPS_JMPADDR16: u32 = 16;
pub const IMAGE_REL_MIPS_REFWORDNB: u32 = 34;
pub const IMAGE_REL_MIPS_PAIR: u32 = 37;
pub const IMAGE_REL_ALPHA_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ALPHA_REFLONG: u32 = 1;
pub const IMAGE_REL_ALPHA_REFQUAD: u32 = 2;
pub const IMAGE_REL_ALPHA_GPREL32: u32 = 3;
pub const IMAGE_REL_ALPHA_LITERAL: u32 = 4;
pub const IMAGE_REL_ALPHA_LITUSE: u32 = 5;
pub const IMAGE_REL_ALPHA_GPDISP: u32 = 6;
pub const IMAGE_REL_ALPHA_BRADDR: u32 = 7;
pub const IMAGE_REL_ALPHA_HINT: u32 = 8;
pub const IMAGE_REL_ALPHA_INLINE_REFLONG: u32 = 9;
pub const IMAGE_REL_ALPHA_REFHI: u32 = 10;
pub const IMAGE_REL_ALPHA_REFLO: u32 = 11;
pub const IMAGE_REL_ALPHA_PAIR: u32 = 12;
pub const IMAGE_REL_ALPHA_MATCH: u32 = 13;
pub const IMAGE_REL_ALPHA_SECTION: u32 = 14;
pub const IMAGE_REL_ALPHA_SECREL: u32 = 15;
pub const IMAGE_REL_ALPHA_REFLONGNB: u32 = 16;
pub const IMAGE_REL_ALPHA_SECRELLO: u32 = 17;
pub const IMAGE_REL_ALPHA_SECRELHI: u32 = 18;
pub const IMAGE_REL_ALPHA_REFQ3: u32 = 19;
pub const IMAGE_REL_ALPHA_REFQ2: u32 = 20;
pub const IMAGE_REL_ALPHA_REFQ1: u32 = 21;
pub const IMAGE_REL_ALPHA_GPRELLO: u32 = 22;
pub const IMAGE_REL_ALPHA_GPRELHI: u32 = 23;
pub const IMAGE_REL_PPC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_PPC_ADDR64: u32 = 1;
pub const IMAGE_REL_PPC_ADDR32: u32 = 2;
pub const IMAGE_REL_PPC_ADDR24: u32 = 3;
pub const IMAGE_REL_PPC_ADDR16: u32 = 4;
pub const IMAGE_REL_PPC_ADDR14: u32 = 5;
pub const IMAGE_REL_PPC_REL24: u32 = 6;
pub const IMAGE_REL_PPC_REL14: u32 = 7;
pub const IMAGE_REL_PPC_TOCREL16: u32 = 8;
pub const IMAGE_REL_PPC_TOCREL14: u32 = 9;
pub const IMAGE_REL_PPC_ADDR32NB: u32 = 10;
pub const IMAGE_REL_PPC_SECREL: u32 = 11;
pub const IMAGE_REL_PPC_SECTION: u32 = 12;
pub const IMAGE_REL_PPC_IFGLUE: u32 = 13;
pub const IMAGE_REL_PPC_IMGLUE: u32 = 14;
pub const IMAGE_REL_PPC_SECREL16: u32 = 15;
pub const IMAGE_REL_PPC_REFHI: u32 = 16;
pub const IMAGE_REL_PPC_REFLO: u32 = 17;
pub const IMAGE_REL_PPC_PAIR: u32 = 18;
pub const IMAGE_REL_PPC_SECRELLO: u32 = 19;
pub const IMAGE_REL_PPC_SECRELHI: u32 = 20;
pub const IMAGE_REL_PPC_GPREL: u32 = 21;
pub const IMAGE_REL_PPC_TOKEN: u32 = 22;
pub const IMAGE_REL_PPC_TYPEMASK: u32 = 255;
pub const IMAGE_REL_PPC_NEG: u32 = 256;
pub const IMAGE_REL_PPC_BRTAKEN: u32 = 512;
pub const IMAGE_REL_PPC_BRNTAKEN: u32 = 1024;
pub const IMAGE_REL_PPC_TOCDEFN: u32 = 2048;
pub const IMAGE_REL_SH3_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_SH3_DIRECT16: u32 = 1;
pub const IMAGE_REL_SH3_DIRECT32: u32 = 2;
pub const IMAGE_REL_SH3_DIRECT8: u32 = 3;
pub const IMAGE_REL_SH3_DIRECT8_WORD: u32 = 4;
pub const IMAGE_REL_SH3_DIRECT8_LONG: u32 = 5;
pub const IMAGE_REL_SH3_DIRECT4: u32 = 6;
pub const IMAGE_REL_SH3_DIRECT4_WORD: u32 = 7;
pub const IMAGE_REL_SH3_DIRECT4_LONG: u32 = 8;
pub const IMAGE_REL_SH3_PCREL8_WORD: u32 = 9;
pub const IMAGE_REL_SH3_PCREL8_LONG: u32 = 10;
pub const IMAGE_REL_SH3_PCREL12_WORD: u32 = 11;
pub const IMAGE_REL_SH3_STARTOF_SECTION: u32 = 12;
pub const IMAGE_REL_SH3_SIZEOF_SECTION: u32 = 13;
pub const IMAGE_REL_SH3_SECTION: u32 = 14;
pub const IMAGE_REL_SH3_SECREL: u32 = 15;
pub const IMAGE_REL_SH3_DIRECT32_NB: u32 = 16;
pub const IMAGE_REL_SH3_GPREL4_LONG: u32 = 17;
pub const IMAGE_REL_SH3_TOKEN: u32 = 18;
pub const IMAGE_REL_SHM_PCRELPT: u32 = 19;
pub const IMAGE_REL_SHM_REFLO: u32 = 20;
pub const IMAGE_REL_SHM_REFHALF: u32 = 21;
pub const IMAGE_REL_SHM_RELLO: u32 = 22;
pub const IMAGE_REL_SHM_RELHALF: u32 = 23;
pub const IMAGE_REL_SHM_PAIR: u32 = 24;
pub const IMAGE_REL_SH_NOMODE: u32 = 32768;
pub const IMAGE_REL_ARM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM_ADDR32: u32 = 1;
pub const IMAGE_REL_ARM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM_BRANCH24: u32 = 3;
pub const IMAGE_REL_ARM_BRANCH11: u32 = 4;
pub const IMAGE_REL_ARM_TOKEN: u32 = 5;
pub const IMAGE_REL_ARM_GPREL12: u32 = 6;
pub const IMAGE_REL_ARM_GPREL7: u32 = 7;
pub const IMAGE_REL_ARM_BLX24: u32 = 8;
pub const IMAGE_REL_ARM_BLX11: u32 = 9;
pub const IMAGE_REL_ARM_SECTION: u32 = 14;
pub const IMAGE_REL_ARM_SECREL: u32 = 15;
pub const IMAGE_REL_ARM_MOV32A: u32 = 16;
pub const IMAGE_REL_ARM_MOV32: u32 = 16;
pub const IMAGE_REL_ARM_MOV32T: u32 = 17;
pub const IMAGE_REL_THUMB_MOV32: u32 = 17;
pub const IMAGE_REL_ARM_BRANCH20T: u32 = 18;
pub const IMAGE_REL_THUMB_BRANCH20: u32 = 18;
pub const IMAGE_REL_ARM_BRANCH24T: u32 = 20;
pub const IMAGE_REL_THUMB_BRANCH24: u32 = 20;
pub const IMAGE_REL_ARM_BLX23T: u32 = 21;
pub const IMAGE_REL_THUMB_BLX23: u32 = 21;
pub const IMAGE_REL_AM_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_AM_ADDR32: u32 = 1;
pub const IMAGE_REL_AM_ADDR32NB: u32 = 2;
pub const IMAGE_REL_AM_CALL32: u32 = 3;
pub const IMAGE_REL_AM_FUNCINFO: u32 = 4;
pub const IMAGE_REL_AM_REL32_1: u32 = 5;
pub const IMAGE_REL_AM_REL32_2: u32 = 6;
pub const IMAGE_REL_AM_SECREL: u32 = 7;
pub const IMAGE_REL_AM_SECTION: u32 = 8;
pub const IMAGE_REL_AM_TOKEN: u32 = 9;
pub const IMAGE_REL_ARM64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_ARM64_ADDR32: u32 = 1;
pub const IMAGE_REL_ARM64_ADDR32NB: u32 = 2;
pub const IMAGE_REL_ARM64_BRANCH26: u32 = 3;
pub const IMAGE_REL_ARM64_PAGEBASE_REL21: u32 = 4;
pub const IMAGE_REL_ARM64_REL21: u32 = 5;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12A: u32 = 6;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12L: u32 = 7;
pub const IMAGE_REL_ARM64_SECREL: u32 = 8;
pub const IMAGE_REL_ARM64_SECREL_LOW12A: u32 = 9;
pub const IMAGE_REL_ARM64_SECREL_HIGH12A: u32 = 10;
pub const IMAGE_REL_ARM64_SECREL_LOW12L: u32 = 11;
pub const IMAGE_REL_ARM64_TOKEN: u32 = 12;
pub const IMAGE_REL_ARM64_SECTION: u32 = 13;
pub const IMAGE_REL_ARM64_ADDR64: u32 = 14;
pub const IMAGE_REL_ARM64_BRANCH19: u32 = 15;
pub const IMAGE_REL_AMD64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_AMD64_ADDR64: u32 = 1;
pub const IMAGE_REL_AMD64_ADDR32: u32 = 2;
pub const IMAGE_REL_AMD64_ADDR32NB: u32 = 3;
pub const IMAGE_REL_AMD64_REL32: u32 = 4;
pub const IMAGE_REL_AMD64_REL32_1: u32 = 5;
pub const IMAGE_REL_AMD64_REL32_2: u32 = 6;
pub const IMAGE_REL_AMD64_REL32_3: u32 = 7;
pub const IMAGE_REL_AMD64_REL32_4: u32 = 8;
pub const IMAGE_REL_AMD64_REL32_5: u32 = 9;
pub const IMAGE_REL_AMD64_SECTION: u32 = 10;
pub const IMAGE_REL_AMD64_SECREL: u32 = 11;
pub const IMAGE_REL_AMD64_SECREL7: u32 = 12;
pub const IMAGE_REL_AMD64_TOKEN: u32 = 13;
pub const IMAGE_REL_AMD64_SREL32: u32 = 14;
pub const IMAGE_REL_AMD64_PAIR: u32 = 15;
pub const IMAGE_REL_AMD64_SSPAN32: u32 = 16;
pub const IMAGE_REL_AMD64_EHANDLER: u32 = 17;
pub const IMAGE_REL_AMD64_IMPORT_BR: u32 = 18;
pub const IMAGE_REL_AMD64_IMPORT_CALL: u32 = 19;
pub const IMAGE_REL_AMD64_CFG_BR: u32 = 20;
pub const IMAGE_REL_AMD64_CFG_BR_REX: u32 = 21;
pub const IMAGE_REL_AMD64_CFG_CALL: u32 = 22;
pub const IMAGE_REL_AMD64_INDIR_BR: u32 = 23;
pub const IMAGE_REL_AMD64_INDIR_BR_REX: u32 = 24;
pub const IMAGE_REL_AMD64_INDIR_CALL: u32 = 25;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST: u32 = 32;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST: u32 = 47;
pub const IMAGE_REL_IA64_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_IA64_IMM14: u32 = 1;
pub const IMAGE_REL_IA64_IMM22: u32 = 2;
pub const IMAGE_REL_IA64_IMM64: u32 = 3;
pub const IMAGE_REL_IA64_DIR32: u32 = 4;
pub const IMAGE_REL_IA64_DIR64: u32 = 5;
pub const IMAGE_REL_IA64_PCREL21B: u32 = 6;
pub const IMAGE_REL_IA64_PCREL21M: u32 = 7;
pub const IMAGE_REL_IA64_PCREL21F: u32 = 8;
pub const IMAGE_REL_IA64_GPREL22: u32 = 9;
pub const IMAGE_REL_IA64_LTOFF22: u32 = 10;
pub const IMAGE_REL_IA64_SECTION: u32 = 11;
pub const IMAGE_REL_IA64_SECREL22: u32 = 12;
pub const IMAGE_REL_IA64_SECREL64I: u32 = 13;
pub const IMAGE_REL_IA64_SECREL32: u32 = 14;
pub const IMAGE_REL_IA64_DIR32NB: u32 = 16;
pub const IMAGE_REL_IA64_SREL14: u32 = 17;
pub const IMAGE_REL_IA64_SREL22: u32 = 18;
pub const IMAGE_REL_IA64_SREL32: u32 = 19;
pub const IMAGE_REL_IA64_UREL32: u32 = 20;
pub const IMAGE_REL_IA64_PCREL60X: u32 = 21;
pub const IMAGE_REL_IA64_PCREL60B: u32 = 22;
pub const IMAGE_REL_IA64_PCREL60F: u32 = 23;
pub const IMAGE_REL_IA64_PCREL60I: u32 = 24;
pub const IMAGE_REL_IA64_PCREL60M: u32 = 25;
pub const IMAGE_REL_IA64_IMMGPREL64: u32 = 26;
pub const IMAGE_REL_IA64_TOKEN: u32 = 27;
pub const IMAGE_REL_IA64_GPREL32: u32 = 28;
pub const IMAGE_REL_IA64_ADDEND: u32 = 31;
pub const IMAGE_REL_CEF_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_CEF_ADDR32: u32 = 1;
pub const IMAGE_REL_CEF_ADDR64: u32 = 2;
pub const IMAGE_REL_CEF_ADDR32NB: u32 = 3;
pub const IMAGE_REL_CEF_SECTION: u32 = 4;
pub const IMAGE_REL_CEF_SECREL: u32 = 5;
pub const IMAGE_REL_CEF_TOKEN: u32 = 6;
pub const IMAGE_REL_CEE_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_CEE_ADDR32: u32 = 1;
pub const IMAGE_REL_CEE_ADDR64: u32 = 2;
pub const IMAGE_REL_CEE_ADDR32NB: u32 = 3;
pub const IMAGE_REL_CEE_SECTION: u32 = 4;
pub const IMAGE_REL_CEE_SECREL: u32 = 5;
pub const IMAGE_REL_CEE_TOKEN: u32 = 6;
pub const IMAGE_REL_M32R_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_M32R_ADDR32: u32 = 1;
pub const IMAGE_REL_M32R_ADDR32NB: u32 = 2;
pub const IMAGE_REL_M32R_ADDR24: u32 = 3;
pub const IMAGE_REL_M32R_GPREL16: u32 = 4;
pub const IMAGE_REL_M32R_PCREL24: u32 = 5;
pub const IMAGE_REL_M32R_PCREL16: u32 = 6;
pub const IMAGE_REL_M32R_PCREL8: u32 = 7;
pub const IMAGE_REL_M32R_REFHALF: u32 = 8;
pub const IMAGE_REL_M32R_REFHI: u32 = 9;
pub const IMAGE_REL_M32R_REFLO: u32 = 10;
pub const IMAGE_REL_M32R_PAIR: u32 = 11;
pub const IMAGE_REL_M32R_SECTION: u32 = 12;
pub const IMAGE_REL_M32R_SECREL32: u32 = 13;
pub const IMAGE_REL_M32R_TOKEN: u32 = 14;
pub const IMAGE_REL_EBC_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_EBC_ADDR32NB: u32 = 1;
pub const IMAGE_REL_EBC_REL32: u32 = 2;
pub const IMAGE_REL_EBC_SECTION: u32 = 3;
pub const IMAGE_REL_EBC_SECREL: u32 = 4;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM7B_SIZE_X: u32 = 7;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X: u32 = 4;
pub const EMARCH_ENC_I17_IMM7B_VAL_POS_X: u32 = 0;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM9D_SIZE_X: u32 = 9;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X: u32 = 18;
pub const EMARCH_ENC_I17_IMM9D_VAL_POS_X: u32 = 7;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IMM5C_SIZE_X: u32 = 5;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X: u32 = 13;
pub const EMARCH_ENC_I17_IMM5C_VAL_POS_X: u32 = 16;
pub const EMARCH_ENC_I17_IC_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_IC_SIZE_X: u32 = 1;
pub const EMARCH_ENC_I17_IC_INST_WORD_POS_X: u32 = 12;
pub const EMARCH_ENC_I17_IC_VAL_POS_X: u32 = 21;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_X: u32 = 1;
pub const EMARCH_ENC_I17_IMM41a_SIZE_X: u32 = 10;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X: u32 = 14;
pub const EMARCH_ENC_I17_IMM41a_VAL_POS_X: u32 = 22;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_X: u32 = 1;
pub const EMARCH_ENC_I17_IMM41b_SIZE_X: u32 = 8;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X: u32 = 24;
pub const EMARCH_ENC_I17_IMM41b_VAL_POS_X: u32 = 32;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_X: u32 = 2;
pub const EMARCH_ENC_I17_IMM41c_SIZE_X: u32 = 23;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X: u32 = 0;
pub const EMARCH_ENC_I17_IMM41c_VAL_POS_X: u32 = 40;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_X: u32 = 3;
pub const EMARCH_ENC_I17_SIGN_SIZE_X: u32 = 1;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X: u32 = 27;
pub const EMARCH_ENC_I17_SIGN_VAL_POS_X: u32 = 63;
pub const X3_OPCODE_INST_WORD_X: u32 = 3;
pub const X3_OPCODE_SIZE_X: u32 = 4;
pub const X3_OPCODE_INST_WORD_POS_X: u32 = 28;
pub const X3_OPCODE_SIGN_VAL_POS_X: u32 = 0;
pub const X3_I_INST_WORD_X: u32 = 3;
pub const X3_I_SIZE_X: u32 = 1;
pub const X3_I_INST_WORD_POS_X: u32 = 27;
pub const X3_I_SIGN_VAL_POS_X: u32 = 59;
pub const X3_D_WH_INST_WORD_X: u32 = 3;
pub const X3_D_WH_SIZE_X: u32 = 3;
pub const X3_D_WH_INST_WORD_POS_X: u32 = 24;
pub const X3_D_WH_SIGN_VAL_POS_X: u32 = 0;
pub const X3_IMM20_INST_WORD_X: u32 = 3;
pub const X3_IMM20_SIZE_X: u32 = 20;
pub const X3_IMM20_INST_WORD_POS_X: u32 = 4;
pub const X3_IMM20_SIGN_VAL_POS_X: u32 = 0;
pub const X3_IMM39_1_INST_WORD_X: u32 = 2;
pub const X3_IMM39_1_SIZE_X: u32 = 23;
pub const X3_IMM39_1_INST_WORD_POS_X: u32 = 0;
pub const X3_IMM39_1_SIGN_VAL_POS_X: u32 = 36;
pub const X3_IMM39_2_INST_WORD_X: u32 = 1;
pub const X3_IMM39_2_SIZE_X: u32 = 16;
pub const X3_IMM39_2_INST_WORD_POS_X: u32 = 16;
pub const X3_IMM39_2_SIGN_VAL_POS_X: u32 = 20;
pub const X3_P_INST_WORD_X: u32 = 3;
pub const X3_P_SIZE_X: u32 = 4;
pub const X3_P_INST_WORD_POS_X: u32 = 0;
pub const X3_P_SIGN_VAL_POS_X: u32 = 0;
pub const X3_TMPLT_INST_WORD_X: u32 = 0;
pub const X3_TMPLT_SIZE_X: u32 = 4;
pub const X3_TMPLT_INST_WORD_POS_X: u32 = 0;
pub const X3_TMPLT_SIGN_VAL_POS_X: u32 = 0;
pub const X3_BTYPE_QP_INST_WORD_X: u32 = 2;
pub const X3_BTYPE_QP_SIZE_X: u32 = 9;
pub const X3_BTYPE_QP_INST_WORD_POS_X: u32 = 23;
pub const X3_BTYPE_QP_INST_VAL_POS_X: u32 = 0;
pub const X3_EMPTY_INST_WORD_X: u32 = 1;
pub const X3_EMPTY_SIZE_X: u32 = 2;
pub const X3_EMPTY_INST_WORD_POS_X: u32 = 14;
pub const X3_EMPTY_INST_VAL_POS_X: u32 = 0;
pub const IMAGE_REL_BASED_ABSOLUTE: u32 = 0;
pub const IMAGE_REL_BASED_HIGH: u32 = 1;
pub const IMAGE_REL_BASED_LOW: u32 = 2;
pub const IMAGE_REL_BASED_HIGHLOW: u32 = 3;
pub const IMAGE_REL_BASED_HIGHADJ: u32 = 4;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_5: u32 = 5;
pub const IMAGE_REL_BASED_RESERVED: u32 = 6;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_7: u32 = 7;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_8: u32 = 8;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_9: u32 = 9;
pub const IMAGE_REL_BASED_DIR64: u32 = 10;
pub const IMAGE_REL_BASED_IA64_IMM64: u32 = 9;
pub const IMAGE_REL_BASED_MIPS_JMPADDR: u32 = 5;
pub const IMAGE_REL_BASED_MIPS_JMPADDR16: u32 = 9;
pub const IMAGE_REL_BASED_ARM_MOV32: u32 = 5;
pub const IMAGE_REL_BASED_THUMB_MOV32: u32 = 7;
pub const IMAGE_ARCHIVE_START_SIZE: u32 = 8;
pub const IMAGE_ARCHIVE_START: &[u8; 9] = b"!<arch>\n\0";
pub const IMAGE_ARCHIVE_END: &[u8; 3] = b"`\n\0";
pub const IMAGE_ARCHIVE_PAD: &[u8; 2] = b"\n\0";
pub const IMAGE_ARCHIVE_LINKER_MEMBER: &[u8; 17] = b"/               \0";
pub const IMAGE_ARCHIVE_LONGNAMES_MEMBER: &[u8; 17] = b"//              \0";
pub const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER: &[u8; 17] = b"/<HYBRIDMAP>/   \0";
pub const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR: u32 = 60;
pub const IMAGE_ORDINAL_FLAG64: i64 = -9223372036854775808;
pub const IMAGE_ORDINAL_FLAG32: u32 = 2147483648;
pub const IMAGE_ORDINAL_FLAG: i64 = -9223372036854775808;
pub const IMAGE_RESOURCE_NAME_IS_STRING: u32 = 2147483648;
pub const IMAGE_RESOURCE_DATA_IS_DIRECTORY: u32 = 2147483648;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE: u32 = 1;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE: u32 = 2;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER: u32 = 3;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER: u32 = 4;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH: u32 = 5;
pub const IMAGE_DYNAMIC_RELOCATION_FUNCTION_OVERRIDE: u32 = 7;
pub const IMAGE_DYNAMIC_RELOCATION_ARM64_KERNEL_IMPORT_CALL_TRANSFER: u32 = 8;
pub const IMAGE_DYNAMIC_RELOCATION_IMPORT_CONTROL_TRANSFER: u32 = 3;
pub const IMAGE_FUNCTION_OVERRIDE_INVALID: u32 = 0;
pub const IMAGE_FUNCTION_OVERRIDE_X64_REL32: u32 = 1;
pub const IMAGE_FUNCTION_OVERRIDE_ARM64_BRANCH26: u32 = 2;
pub const IMAGE_FUNCTION_OVERRIDE_ARM64_THUNK: u32 = 3;
pub const IMAGE_HOT_PATCH_INFO_FLAG_PATCHORDERCRITICAL: u32 = 1;
pub const IMAGE_HOT_PATCH_INFO_FLAG_HOTSWAP: u32 = 2;
pub const IMAGE_HOT_PATCH_BASE_OBLIGATORY: u32 = 1;
pub const IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK: u32 = 2;
pub const IMAGE_HOT_PATCH_BASE_MACHINE_I386: u32 = 4;
pub const IMAGE_HOT_PATCH_BASE_MACHINE_ARM64: u32 = 8;
pub const IMAGE_HOT_PATCH_BASE_MACHINE_AMD64: u32 = 16;
pub const IMAGE_HOT_PATCH_CHUNK_INVERSE: u32 = 2147483648;
pub const IMAGE_HOT_PATCH_CHUNK_OBLIGATORY: u32 = 1073741824;
pub const IMAGE_HOT_PATCH_CHUNK_RESERVED: u32 = 1072705536;
pub const IMAGE_HOT_PATCH_CHUNK_TYPE: u32 = 1032192;
pub const IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA: u32 = 32768;
pub const IMAGE_HOT_PATCH_CHUNK_TARGET_RVA: u32 = 16384;
pub const IMAGE_HOT_PATCH_CHUNK_SIZE: u32 = 4095;
pub const IMAGE_HOT_PATCH_NONE: u32 = 0;
pub const IMAGE_HOT_PATCH_FUNCTION: u32 = 114688;
pub const IMAGE_HOT_PATCH_ABSOLUTE: u32 = 180224;
pub const IMAGE_HOT_PATCH_REL32: u32 = 245760;
pub const IMAGE_HOT_PATCH_CALL_TARGET: u32 = 278528;
pub const IMAGE_HOT_PATCH_INDIRECT: u32 = 376832;
pub const IMAGE_HOT_PATCH_NO_CALL_TARGET: u32 = 409600;
pub const IMAGE_HOT_PATCH_DYNAMIC_VALUE: u32 = 491520;
pub const IMAGE_GUARD_CF_INSTRUMENTED: u32 = 256;
pub const IMAGE_GUARD_CFW_INSTRUMENTED: u32 = 512;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT: u32 = 1024;
pub const IMAGE_GUARD_SECURITY_COOKIE_UNUSED: u32 = 2048;
pub const IMAGE_GUARD_PROTECT_DELAYLOAD_IAT: u32 = 4096;
pub const IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION: u32 = 8192;
pub const IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT: u32 = 16384;
pub const IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION: u32 = 32768;
pub const IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT: u32 = 65536;
pub const IMAGE_GUARD_RF_INSTRUMENTED: u32 = 131072;
pub const IMAGE_GUARD_RF_ENABLE: u32 = 262144;
pub const IMAGE_GUARD_RF_STRICT: u32 = 524288;
pub const IMAGE_GUARD_RETPOLINE_PRESENT: u32 = 1048576;
pub const IMAGE_GUARD_EH_CONTINUATION_TABLE_PRESENT: u32 = 4194304;
pub const IMAGE_GUARD_XFG_ENABLED: u32 = 8388608;
pub const IMAGE_GUARD_CASTGUARD_PRESENT: u32 = 16777216;
pub const IMAGE_GUARD_MEMCPY_PRESENT: u32 = 33554432;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK: u32 = 4026531840;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT: u32 = 28;
pub const IMAGE_GUARD_FLAG_FID_SUPPRESSED: u32 = 1;
pub const IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED: u32 = 2;
pub const IMAGE_GUARD_FLAG_FID_LANGEXCPTHANDLER: u32 = 4;
pub const IMAGE_GUARD_FLAG_FID_XFG: u32 = 8;
pub const IMAGE_ENCLAVE_LONG_ID_LENGTH: u32 = 32;
pub const IMAGE_ENCLAVE_SHORT_ID_LENGTH: u32 = 16;
pub const IMAGE_ENCLAVE_POLICY_DEBUGGABLE: u32 = 1;
pub const IMAGE_ENCLAVE_POLICY_STRICT_MEMORY: u32 = 2;
pub const IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE: u32 = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_NONE: u32 = 0;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID: u32 = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID: u32 = 2;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID: u32 = 3;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID: u32 = 4;
pub const IMAGE_DEBUG_TYPE_UNKNOWN: u32 = 0;
pub const IMAGE_DEBUG_TYPE_COFF: u32 = 1;
pub const IMAGE_DEBUG_TYPE_CODEVIEW: u32 = 2;
pub const IMAGE_DEBUG_TYPE_FPO: u32 = 3;
pub const IMAGE_DEBUG_TYPE_MISC: u32 = 4;
pub const IMAGE_DEBUG_TYPE_EXCEPTION: u32 = 5;
pub const IMAGE_DEBUG_TYPE_FIXUP: u32 = 6;
pub const IMAGE_DEBUG_TYPE_OMAP_TO_SRC: u32 = 7;
pub const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC: u32 = 8;
pub const IMAGE_DEBUG_TYPE_BORLAND: u32 = 9;
pub const IMAGE_DEBUG_TYPE_RESERVED10: u32 = 10;
pub const IMAGE_DEBUG_TYPE_BBT: u32 = 10;
pub const IMAGE_DEBUG_TYPE_CLSID: u32 = 11;
pub const IMAGE_DEBUG_TYPE_VC_FEATURE: u32 = 12;
pub const IMAGE_DEBUG_TYPE_POGO: u32 = 13;
pub const IMAGE_DEBUG_TYPE_ILTCG: u32 = 14;
pub const IMAGE_DEBUG_TYPE_MPX: u32 = 15;
pub const IMAGE_DEBUG_TYPE_REPRO: u32 = 16;
pub const IMAGE_DEBUG_TYPE_SPGO: u32 = 18;
pub const IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS: u32 = 20;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT: u32 = 1;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_COMPAT_STRICT_MODE: u32 = 2;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_SET_CONTEXT_IP_VALIDATION_RELAXED_MODE: u32 = 4;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_DYNAMIC_APIS_ALLOW_IN_PROC: u32 = 8;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_1: u32 = 16;
pub const IMAGE_DLLCHARACTERISTICS_EX_CET_RESERVED_2: u32 = 32;
pub const IMAGE_DLLCHARACTERISTICS_EX_FORWARD_CFI_COMPAT: u32 = 64;
pub const IMAGE_DLLCHARACTERISTICS_EX_HOTPATCH_COMPATIBLE: u32 = 128;
pub const FRAME_FPO: u32 = 0;
pub const FRAME_TRAP: u32 = 1;
pub const FRAME_TSS: u32 = 2;
pub const FRAME_NONFPO: u32 = 3;
pub const SIZEOF_RFPO_DATA: u32 = 16;
pub const IMAGE_DEBUG_MISC_EXENAME: u32 = 1;
pub const IMAGE_SEPARATE_DEBUG_SIGNATURE: u32 = 18756;
pub const NON_PAGED_DEBUG_SIGNATURE: u32 = 18766;
pub const IMAGE_SEPARATE_DEBUG_FLAGS_MASK: u32 = 32768;
pub const IMAGE_SEPARATE_DEBUG_MISMATCH: u32 = 32768;
pub const IMPORT_OBJECT_HDR_SIG2: u32 = 65535;
pub const UNWIND_HISTORY_TABLE_SIZE: u32 = 12;
pub const RTL_RUN_ONCE_CHECK_ONLY: u32 = 1;
pub const RTL_RUN_ONCE_ASYNC: u32 = 2;
pub const RTL_RUN_ONCE_INIT_FAILED: u32 = 4;
pub const RTL_RUN_ONCE_CTX_RESERVED_BITS: u32 = 2;
pub const FAST_FAIL_LEGACY_GS_VIOLATION: u32 = 0;
pub const FAST_FAIL_VTGUARD_CHECK_FAILURE: u32 = 1;
pub const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE: u32 = 2;
pub const FAST_FAIL_CORRUPT_LIST_ENTRY: u32 = 3;
pub const FAST_FAIL_INCORRECT_STACK: u32 = 4;
pub const FAST_FAIL_INVALID_ARG: u32 = 5;
pub const FAST_FAIL_GS_COOKIE_INIT: u32 = 6;
pub const FAST_FAIL_FATAL_APP_EXIT: u32 = 7;
pub const FAST_FAIL_RANGE_CHECK_FAILURE: u32 = 8;
pub const FAST_FAIL_UNSAFE_REGISTRY_ACCESS: u32 = 9;
pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE: u32 = 10;
pub const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE: u32 = 11;
pub const FAST_FAIL_INVALID_FIBER_SWITCH: u32 = 12;
pub const FAST_FAIL_INVALID_SET_OF_CONTEXT: u32 = 13;
pub const FAST_FAIL_INVALID_REFERENCE_COUNT: u32 = 14;
pub const FAST_FAIL_INVALID_JUMP_BUFFER: u32 = 18;
pub const FAST_FAIL_MRDATA_MODIFIED: u32 = 19;
pub const FAST_FAIL_CERTIFICATION_FAILURE: u32 = 20;
pub const FAST_FAIL_INVALID_EXCEPTION_CHAIN: u32 = 21;
pub const FAST_FAIL_CRYPTO_LIBRARY: u32 = 22;
pub const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT: u32 = 23;
pub const FAST_FAIL_INVALID_IMAGE_BASE: u32 = 24;
pub const FAST_FAIL_DLOAD_PROTECTION_FAILURE: u32 = 25;
pub const FAST_FAIL_UNSAFE_EXTENSION_CALL: u32 = 26;
pub const FAST_FAIL_DEPRECATED_SERVICE_INVOKED: u32 = 27;
pub const FAST_FAIL_INVALID_BUFFER_ACCESS: u32 = 28;
pub const FAST_FAIL_INVALID_BALANCED_TREE: u32 = 29;
pub const FAST_FAIL_INVALID_NEXT_THREAD: u32 = 30;
pub const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED: u32 = 31;
pub const FAST_FAIL_APCS_DISABLED: u32 = 32;
pub const FAST_FAIL_INVALID_IDLE_STATE: u32 = 33;
pub const FAST_FAIL_MRDATA_PROTECTION_FAILURE: u32 = 34;
pub const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION: u32 = 35;
pub const FAST_FAIL_INVALID_LOCK_STATE: u32 = 36;
pub const FAST_FAIL_GUARD_JUMPTABLE: u32 = 37;
pub const FAST_FAIL_INVALID_LONGJUMP_TARGET: u32 = 38;
pub const FAST_FAIL_INVALID_DISPATCH_CONTEXT: u32 = 39;
pub const FAST_FAIL_INVALID_THREAD: u32 = 40;
pub const FAST_FAIL_INVALID_SYSCALL_NUMBER: u32 = 41;
pub const FAST_FAIL_INVALID_FILE_OPERATION: u32 = 42;
pub const FAST_FAIL_LPAC_ACCESS_DENIED: u32 = 43;
pub const FAST_FAIL_GUARD_SS_FAILURE: u32 = 44;
pub const FAST_FAIL_LOADER_CONTINUITY_FAILURE: u32 = 45;
pub const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE: u32 = 46;
pub const FAST_FAIL_INVALID_CONTROL_STACK: u32 = 47;
pub const FAST_FAIL_SET_CONTEXT_DENIED: u32 = 48;
pub const FAST_FAIL_INVALID_IAT: u32 = 49;
pub const FAST_FAIL_HEAP_METADATA_CORRUPTION: u32 = 50;
pub const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION: u32 = 51;
pub const FAST_FAIL_LOW_LABEL_ACCESS_DENIED: u32 = 52;
pub const FAST_FAIL_ENCLAVE_CALL_FAILURE: u32 = 53;
pub const FAST_FAIL_UNHANDLED_LSS_EXCEPTON: u32 = 54;
pub const FAST_FAIL_ADMINLESS_ACCESS_DENIED: u32 = 55;
pub const FAST_FAIL_UNEXPECTED_CALL: u32 = 56;
pub const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS: u32 = 57;
pub const FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR: u32 = 58;
pub const FAST_FAIL_FLAGS_CORRUPTION: u32 = 59;
pub const FAST_FAIL_VEH_CORRUPTION: u32 = 60;
pub const FAST_FAIL_ETW_CORRUPTION: u32 = 61;
pub const FAST_FAIL_RIO_ABORT: u32 = 62;
pub const FAST_FAIL_INVALID_PFN: u32 = 63;
pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE_XFG: u32 = 64;
pub const FAST_FAIL_CAST_GUARD: u32 = 65;
pub const FAST_FAIL_HOST_VISIBILITY_CHANGE: u32 = 66;
pub const FAST_FAIL_KERNEL_CET_SHADOW_STACK_ASSIST: u32 = 67;
pub const FAST_FAIL_PATCH_CALLBACK_FAILED: u32 = 68;
pub const FAST_FAIL_NTDLL_PATCH_FAILED: u32 = 69;
pub const FAST_FAIL_INVALID_FLS_DATA: u32 = 70;
pub const FAST_FAIL_ASAN_ERROR: u32 = 71;
pub const FAST_FAIL_CLR_EXCEPTION_AOT: u32 = 72;
pub const FAST_FAIL_POINTER_AUTH_INVALID_RETURN_ADDRESS: u32 = 73;
pub const FAST_FAIL_INVALID_THREAD_STATE: u32 = 74;
pub const FAST_FAIL_CORRUPT_WOW64_STATE: u32 = 75;
pub const FAST_FAIL_INVALID_EXTENDED_STATE: u32 = 76;
pub const FAST_FAIL_INVALID_FAST_FAIL_CODE: u32 = 4294967295;
pub const HEAP_NO_SERIALIZE: u32 = 1;
pub const HEAP_GROWABLE: u32 = 2;
pub const HEAP_GENERATE_EXCEPTIONS: u32 = 4;
pub const HEAP_ZERO_MEMORY: u32 = 8;
pub const HEAP_REALLOC_IN_PLACE_ONLY: u32 = 16;
pub const HEAP_TAIL_CHECKING_ENABLED: u32 = 32;
pub const HEAP_FREE_CHECKING_ENABLED: u32 = 64;
pub const HEAP_DISABLE_COALESCE_ON_FREE: u32 = 128;
pub const HEAP_CREATE_ALIGN_16: u32 = 65536;
pub const HEAP_CREATE_ENABLE_TRACING: u32 = 131072;
pub const HEAP_CREATE_ENABLE_EXECUTE: u32 = 262144;
pub const HEAP_MAXIMUM_TAG: u32 = 4095;
pub const HEAP_PSEUDO_TAG_FLAG: u32 = 32768;
pub const HEAP_TAG_SHIFT: u32 = 18;
pub const HEAP_CREATE_SEGMENT_HEAP: u32 = 256;
pub const HEAP_CREATE_HARDENED: u32 = 512;
pub const IS_TEXT_UNICODE_ASCII16: u32 = 1;
pub const IS_TEXT_UNICODE_REVERSE_ASCII16: u32 = 16;
pub const IS_TEXT_UNICODE_STATISTICS: u32 = 2;
pub const IS_TEXT_UNICODE_REVERSE_STATISTICS: u32 = 32;
pub const IS_TEXT_UNICODE_CONTROLS: u32 = 4;
pub const IS_TEXT_UNICODE_REVERSE_CONTROLS: u32 = 64;
pub const IS_TEXT_UNICODE_SIGNATURE: u32 = 8;
pub const IS_TEXT_UNICODE_REVERSE_SIGNATURE: u32 = 128;
pub const IS_TEXT_UNICODE_ILLEGAL_CHARS: u32 = 256;
pub const IS_TEXT_UNICODE_ODD_LENGTH: u32 = 512;
pub const IS_TEXT_UNICODE_DBCS_LEADBYTE: u32 = 1024;
pub const IS_TEXT_UNICODE_UTF8: u32 = 2048;
pub const IS_TEXT_UNICODE_NULL_BYTES: u32 = 4096;
pub const IS_TEXT_UNICODE_UNICODE_MASK: u32 = 15;
pub const IS_TEXT_UNICODE_REVERSE_MASK: u32 = 240;
pub const IS_TEXT_UNICODE_NOT_UNICODE_MASK: u32 = 3840;
pub const IS_TEXT_UNICODE_NOT_ASCII_MASK: u32 = 61440;
pub const COMPRESSION_FORMAT_NONE: u32 = 0;
pub const COMPRESSION_FORMAT_DEFAULT: u32 = 1;
pub const COMPRESSION_FORMAT_LZNT1: u32 = 2;
pub const COMPRESSION_FORMAT_XPRESS: u32 = 3;
pub const COMPRESSION_FORMAT_XPRESS_HUFF: u32 = 4;
pub const COMPRESSION_FORMAT_XP10: u32 = 5;
pub const COMPRESSION_FORMAT_LZ4: u32 = 6;
pub const COMPRESSION_FORMAT_DEFLATE: u32 = 7;
pub const COMPRESSION_FORMAT_ZLIB: u32 = 8;
pub const COMPRESSION_ENGINE_STANDARD: u32 = 0;
pub const COMPRESSION_ENGINE_MAXIMUM: u32 = 256;
pub const COMPRESSION_ENGINE_HIBER: u32 = 512;
pub const SEF_DACL_AUTO_INHERIT: u32 = 1;
pub const SEF_SACL_AUTO_INHERIT: u32 = 2;
pub const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT: u32 = 4;
pub const SEF_AVOID_PRIVILEGE_CHECK: u32 = 8;
pub const SEF_AVOID_OWNER_CHECK: u32 = 16;
pub const SEF_DEFAULT_OWNER_FROM_PARENT: u32 = 32;
pub const SEF_DEFAULT_GROUP_FROM_PARENT: u32 = 64;
pub const SEF_MACL_NO_WRITE_UP: u32 = 256;
pub const SEF_MACL_NO_READ_UP: u32 = 512;
pub const SEF_MACL_NO_EXECUTE_UP: u32 = 1024;
pub const SEF_AI_USE_EXTRA_PARAMS: u32 = 2048;
pub const SEF_AVOID_OWNER_RESTRICTION: u32 = 4096;
pub const SEF_FORCE_USER_MODE: u32 = 8192;
pub const SEF_NORMALIZE_OUTPUT_DESCRIPTOR: u32 = 16384;
pub const SEF_MACL_VALID_FLAGS: u32 = 1792;
pub const MESSAGE_RESOURCE_UNICODE: u32 = 1;
pub const MESSAGE_RESOURCE_UTF8: u32 = 2;
pub const VER_EQUAL: u32 = 1;
pub const VER_GREATER: u32 = 2;
pub const VER_GREATER_EQUAL: u32 = 3;
pub const VER_LESS: u32 = 4;
pub const VER_LESS_EQUAL: u32 = 5;
pub const VER_AND: u32 = 6;
pub const VER_OR: u32 = 7;
pub const VER_CONDITION_MASK: u32 = 7;
pub const VER_NUM_BITS_PER_CONDITION_MASK: u32 = 3;
pub const VER_MINORVERSION: u32 = 1;
pub const VER_MAJORVERSION: u32 = 2;
pub const VER_BUILDNUMBER: u32 = 4;
pub const VER_PLATFORMID: u32 = 8;
pub const VER_SERVICEPACKMINOR: u32 = 16;
pub const VER_SERVICEPACKMAJOR: u32 = 32;
pub const VER_SUITENAME: u32 = 64;
pub const VER_PRODUCT_TYPE: u32 = 128;
pub const VER_NT_WORKSTATION: u32 = 1;
pub const VER_NT_DOMAIN_CONTROLLER: u32 = 2;
pub const VER_NT_SERVER: u32 = 3;
pub const VER_PLATFORM_WIN32s: u32 = 0;
pub const VER_PLATFORM_WIN32_WINDOWS: u32 = 1;
pub const VER_PLATFORM_WIN32_NT: u32 = 2;
pub const RTL_UMS_VERSION: u32 = 256;
pub const VRL_PREDEFINED_CLASS_BEGIN: u32 = 1;
pub const VRL_CUSTOM_CLASS_BEGIN: u32 = 256;
pub const VRL_CLASS_CONSISTENCY: u32 = 1;
pub const VRL_ENABLE_KERNEL_BREAKS: u32 = 2147483648;
pub const CTMF_INCLUDE_APPCONTAINER: u32 = 1;
pub const CTMF_INCLUDE_LPAC: u32 = 2;
pub const CTMF_VALID_FLAGS: u32 = 3;
pub const FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN: u32 = 1;
pub const WRITE_NV_MEMORY_FLAG_FLUSH: u32 = 1;
pub const WRITE_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
pub const WRITE_NV_MEMORY_FLAG_PERSIST: u32 = 3;
pub const WRITE_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
pub const FILL_NV_MEMORY_FLAG_FLUSH: u32 = 1;
pub const FILL_NV_MEMORY_FLAG_NON_TEMPORAL: u32 = 2;
pub const FILL_NV_MEMORY_FLAG_PERSIST: u32 = 3;
pub const FILL_NV_MEMORY_FLAG_NO_DRAIN: u32 = 256;
pub const RTL_CORRELATION_VECTOR_STRING_LENGTH: u32 = 129;
pub const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH: u32 = 16;
pub const RTL_CORRELATION_VECTOR_V1_LENGTH: u32 = 64;
pub const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH: u32 = 22;
pub const RTL_CORRELATION_VECTOR_V2_LENGTH: u32 = 128;
pub const IMAGE_POLICY_METADATA_VERSION: u32 = 1;
pub const IMAGE_POLICY_SECTION_NAME: &[u8; 9] = b".tPolicy\0";
pub const RTL_VIRTUAL_UNWIND2_VALIDATE_PAC: u32 = 1;
pub const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO: u32 = 16777216;
pub const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN: u32 = 33554432;
pub const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT: u32 = 67108864;
pub const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE: u32 = 134217728;
pub const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO: u32 = 268435456;
pub const RTL_CRITICAL_SECTION_ALL_FLAG_BITS: u32 = 4278190080;
pub const RTL_CRITICAL_SECTION_FLAG_RESERVED: u32 = 3758096384;
pub const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT: u32 = 1;
pub const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
pub const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION: u32 = 1;
pub const WT_EXECUTEDEFAULT: u32 = 0;
pub const WT_EXECUTEINIOTHREAD: u32 = 1;
pub const WT_EXECUTEINUITHREAD: u32 = 2;
pub const WT_EXECUTEINWAITTHREAD: u32 = 4;
pub const WT_EXECUTEONLYONCE: u32 = 8;
pub const WT_EXECUTEINTIMERTHREAD: u32 = 32;
pub const WT_EXECUTELONGFUNCTION: u32 = 16;
pub const WT_EXECUTEINPERSISTENTIOTHREAD: u32 = 64;
pub const WT_EXECUTEINPERSISTENTTHREAD: u32 = 128;
pub const WT_TRANSFER_IMPERSONATION: u32 = 256;
pub const WT_EXECUTEINLONGTHREAD: u32 = 16;
pub const WT_EXECUTEDELETEWAIT: u32 = 8;
pub const ACTIVATION_CONTEXT_PATH_TYPE_NONE: u32 = 1;
pub const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE: u32 = 2;
pub const ACTIVATION_CONTEXT_PATH_TYPE_URL: u32 = 3;
pub const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF: u32 = 4;
pub const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID: u32 = 1;
pub const PERFORMANCE_DATA_VERSION: u32 = 1;
pub const READ_THREAD_PROFILING_FLAG_DISPATCHING: u32 = 1;
pub const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS: u32 = 2;
pub const UNIFIEDBUILDREVISION_KEY: &[u8; 63] =
    b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\0";
pub const UNIFIEDBUILDREVISION_VALUE: &[u8; 4] = b"UBR\0";
pub const UNIFIEDBUILDREVISION_MIN: u32 = 0;
pub const DEVICEFAMILYDEVICEFORM_KEY: &[u8; 67] =
    b"\\Registry\\Machine\\Software\\Microsoft\\Windows NT\\CurrentVersion\\OEM\0";
pub const DEVICEFAMILYDEVICEFORM_VALUE: &[u8; 11] = b"DeviceForm\0";
pub const DEVICEFAMILYINFOENUM_UAP: u32 = 0;
pub const DEVICEFAMILYINFOENUM_WINDOWS_8X: u32 = 1;
pub const DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X: u32 = 2;
pub const DEVICEFAMILYINFOENUM_DESKTOP: u32 = 3;
pub const DEVICEFAMILYINFOENUM_MOBILE: u32 = 4;
pub const DEVICEFAMILYINFOENUM_XBOX: u32 = 5;
pub const DEVICEFAMILYINFOENUM_TEAM: u32 = 6;
pub const DEVICEFAMILYINFOENUM_IOT: u32 = 7;
pub const DEVICEFAMILYINFOENUM_IOT_HEADLESS: u32 = 8;
pub const DEVICEFAMILYINFOENUM_SERVER: u32 = 9;
pub const DEVICEFAMILYINFOENUM_HOLOGRAPHIC: u32 = 10;
pub const DEVICEFAMILYINFOENUM_XBOXSRA: u32 = 11;
pub const DEVICEFAMILYINFOENUM_XBOXERA: u32 = 12;
pub const DEVICEFAMILYINFOENUM_SERVER_NANO: u32 = 13;
pub const DEVICEFAMILYINFOENUM_8828080: u32 = 14;
pub const DEVICEFAMILYINFOENUM_7067329: u32 = 15;
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE: u32 = 16;
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS: u32 = 17;
pub const DEVICEFAMILYINFOENUM_MAX: u32 = 17;
pub const DEVICEFAMILYDEVICEFORM_UNKNOWN: u32 = 0;
pub const DEVICEFAMILYDEVICEFORM_PHONE: u32 = 1;
pub const DEVICEFAMILYDEVICEFORM_TABLET: u32 = 2;
pub const DEVICEFAMILYDEVICEFORM_DESKTOP: u32 = 3;
pub const DEVICEFAMILYDEVICEFORM_NOTEBOOK: u32 = 4;
pub const DEVICEFAMILYDEVICEFORM_CONVERTIBLE: u32 = 5;
pub const DEVICEFAMILYDEVICEFORM_DETACHABLE: u32 = 6;
pub const DEVICEFAMILYDEVICEFORM_ALLINONE: u32 = 7;
pub const DEVICEFAMILYDEVICEFORM_STICKPC: u32 = 8;
pub const DEVICEFAMILYDEVICEFORM_PUCK: u32 = 9;
pub const DEVICEFAMILYDEVICEFORM_LARGESCREEN: u32 = 10;
pub const DEVICEFAMILYDEVICEFORM_HMD: u32 = 11;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD: u32 = 12;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET: u32 = 13;
pub const DEVICEFAMILYDEVICEFORM_BANKING: u32 = 14;
pub const DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION: u32 = 15;
pub const DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE: u32 = 16;
pub const DEVICEFAMILYDEVICEFORM_GAMING: u32 = 17;
pub const DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION: u32 = 18;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION: u32 = 19;
pub const DEVICEFAMILYDEVICEFORM_KIOSK: u32 = 20;
pub const DEVICEFAMILYDEVICEFORM_MAKER_BOARD: u32 = 21;
pub const DEVICEFAMILYDEVICEFORM_MEDICAL: u32 = 22;
pub const DEVICEFAMILYDEVICEFORM_NETWORKING: u32 = 23;
pub const DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE: u32 = 24;
pub const DEVICEFAMILYDEVICEFORM_PRINTING: u32 = 25;
pub const DEVICEFAMILYDEVICEFORM_THIN_CLIENT: u32 = 26;
pub const DEVICEFAMILYDEVICEFORM_TOY: u32 = 27;
pub const DEVICEFAMILYDEVICEFORM_VENDING: u32 = 28;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER: u32 = 29;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE: u32 = 30;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_S: u32 = 31;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X: u32 = 32;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT: u32 = 33;
pub const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X: u32 = 34;
pub const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_X_DEVKIT: u32 = 35;
pub const DEVICEFAMILYDEVICEFORM_XBOX_SERIES_S: u32 = 36;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_01: u32 = 37;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_02: u32 = 38;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_03: u32 = 39;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_04: u32 = 40;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_05: u32 = 41;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_06: u32 = 42;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_07: u32 = 43;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_08: u32 = 44;
pub const DEVICEFAMILYDEVICEFORM_XBOX_RESERVED_09: u32 = 45;
pub const DEVICEFAMILYDEVICEFORM_GAMING_HANDHELD: u32 = 46;
pub const DEVICEFAMILYDEVICEFORM_GAMING_CONSOLE: u32 = 47;
pub const DEVICEFAMILYDEVICEFORM_MAX: u32 = 47;
pub const DLL_PROCESS_ATTACH: u32 = 1;
pub const DLL_THREAD_ATTACH: u32 = 2;
pub const DLL_THREAD_DETACH: u32 = 3;
pub const DLL_PROCESS_DETACH: u32 = 0;
pub const EVENTLOG_SEQUENTIAL_READ: u32 = 1;
pub const EVENTLOG_SEEK_READ: u32 = 2;
pub const EVENTLOG_FORWARDS_READ: u32 = 4;
pub const EVENTLOG_BACKWARDS_READ: u32 = 8;
pub const EVENTLOG_SUCCESS: u32 = 0;
pub const EVENTLOG_ERROR_TYPE: u32 = 1;
pub const EVENTLOG_WARNING_TYPE: u32 = 2;
pub const EVENTLOG_INFORMATION_TYPE: u32 = 4;
pub const EVENTLOG_AUDIT_SUCCESS: u32 = 8;
pub const EVENTLOG_AUDIT_FAILURE: u32 = 16;
pub const EVENTLOG_START_PAIRED_EVENT: u32 = 1;
pub const EVENTLOG_END_PAIRED_EVENT: u32 = 2;
pub const EVENTLOG_END_ALL_PAIRED_EVENTS: u32 = 4;
pub const EVENTLOG_PAIRED_EVENT_ACTIVE: u32 = 8;
pub const EVENTLOG_PAIRED_EVENT_INACTIVE: u32 = 16;
pub const MAXLOGICALLOGNAMESIZE: u32 = 256;
pub const KEY_QUERY_VALUE: u32 = 1;
pub const KEY_SET_VALUE: u32 = 2;
pub const KEY_CREATE_SUB_KEY: u32 = 4;
pub const KEY_ENUMERATE_SUB_KEYS: u32 = 8;
pub const KEY_NOTIFY: u32 = 16;
pub const KEY_CREATE_LINK: u32 = 32;
pub const KEY_WOW64_32KEY: u32 = 512;
pub const KEY_WOW64_64KEY: u32 = 256;
pub const KEY_WOW64_RES: u32 = 768;
pub const KEY_READ: u32 = 131097;
pub const KEY_WRITE: u32 = 131078;
pub const KEY_EXECUTE: u32 = 131097;
pub const KEY_ALL_ACCESS: u32 = 983103;
pub const REG_OPTION_RESERVED: u32 = 0;
pub const REG_OPTION_NON_VOLATILE: u32 = 0;
pub const REG_OPTION_VOLATILE: u32 = 1;
pub const REG_OPTION_CREATE_LINK: u32 = 2;
pub const REG_OPTION_BACKUP_RESTORE: u32 = 4;
pub const REG_OPTION_OPEN_LINK: u32 = 8;
pub const REG_OPTION_DONT_VIRTUALIZE: u32 = 16;
pub const REG_LEGAL_OPTION: u32 = 31;
pub const REG_OPEN_LEGAL_OPTION: u32 = 28;
pub const REG_CREATED_NEW_KEY: u32 = 1;
pub const REG_OPENED_EXISTING_KEY: u32 = 2;
pub const REG_STANDARD_FORMAT: u32 = 1;
pub const REG_LATEST_FORMAT: u32 = 2;
pub const REG_NO_COMPRESSION: u32 = 4;
pub const REG_WHOLE_HIVE_VOLATILE: u32 = 1;
pub const REG_REFRESH_HIVE: u32 = 2;
pub const REG_NO_LAZY_FLUSH: u32 = 4;
pub const REG_FORCE_RESTORE: u32 = 8;
pub const REG_APP_HIVE: u32 = 16;
pub const REG_PROCESS_PRIVATE: u32 = 32;
pub const REG_START_JOURNAL: u32 = 64;
pub const REG_HIVE_EXACT_FILE_GROWTH: u32 = 128;
pub const REG_HIVE_NO_RM: u32 = 256;
pub const REG_HIVE_SINGLE_LOG: u32 = 512;
pub const REG_BOOT_HIVE: u32 = 1024;
pub const REG_LOAD_HIVE_OPEN_HANDLE: u32 = 2048;
pub const REG_FLUSH_HIVE_FILE_GROWTH: u32 = 4096;
pub const REG_OPEN_READ_ONLY: u32 = 8192;
pub const REG_IMMUTABLE: u32 = 16384;
pub const REG_NO_IMPERSONATION_FALLBACK: u32 = 32768;
pub const REG_APP_HIVE_OPEN_READ_ONLY: u32 = 8192;
pub const REG_FORCE_UNLOAD: u32 = 1;
pub const REG_UNLOAD_LEGAL_FLAGS: u32 = 1;
pub const REG_NOTIFY_CHANGE_NAME: u32 = 1;
pub const REG_NOTIFY_CHANGE_ATTRIBUTES: u32 = 2;
pub const REG_NOTIFY_CHANGE_LAST_SET: u32 = 4;
pub const REG_NOTIFY_CHANGE_SECURITY: u32 = 8;
pub const REG_NOTIFY_THREAD_AGNOSTIC: u32 = 268435456;
pub const REG_LEGAL_CHANGE_FILTER: u32 = 268435471;
pub const REG_NONE: u32 = 0;
pub const REG_SZ: u32 = 1;
pub const REG_EXPAND_SZ: u32 = 2;
pub const REG_BINARY: u32 = 3;
pub const REG_DWORD: u32 = 4;
pub const REG_DWORD_LITTLE_ENDIAN: u32 = 4;
pub const REG_DWORD_BIG_ENDIAN: u32 = 5;
pub const REG_LINK: u32 = 6;
pub const REG_MULTI_SZ: u32 = 7;
pub const REG_RESOURCE_LIST: u32 = 8;
pub const REG_FULL_RESOURCE_DESCRIPTOR: u32 = 9;
pub const REG_RESOURCE_REQUIREMENTS_LIST: u32 = 10;
pub const REG_QWORD: u32 = 11;
pub const REG_QWORD_LITTLE_ENDIAN: u32 = 11;
pub const SERVICE_KERNEL_DRIVER: u32 = 1;
pub const SERVICE_FILE_SYSTEM_DRIVER: u32 = 2;
pub const SERVICE_ADAPTER: u32 = 4;
pub const SERVICE_RECOGNIZER_DRIVER: u32 = 8;
pub const SERVICE_DRIVER: u32 = 11;
pub const SERVICE_WIN32_OWN_PROCESS: u32 = 16;
pub const SERVICE_WIN32_SHARE_PROCESS: u32 = 32;
pub const SERVICE_WIN32: u32 = 48;
pub const SERVICE_USER_SERVICE: u32 = 64;
pub const SERVICE_USERSERVICE_INSTANCE: u32 = 128;
pub const SERVICE_USER_SHARE_PROCESS: u32 = 96;
pub const SERVICE_USER_OWN_PROCESS: u32 = 80;
pub const SERVICE_INTERACTIVE_PROCESS: u32 = 256;
pub const SERVICE_PKG_SERVICE: u32 = 512;
pub const SERVICE_TYPE_ALL: u32 = 1023;
pub const SERVICE_BOOT_START: u32 = 0;
pub const SERVICE_SYSTEM_START: u32 = 1;
pub const SERVICE_AUTO_START: u32 = 2;
pub const SERVICE_DEMAND_START: u32 = 3;
pub const SERVICE_DISABLED: u32 = 4;
pub const SERVICE_ERROR_IGNORE: u32 = 0;
pub const SERVICE_ERROR_NORMAL: u32 = 1;
pub const SERVICE_ERROR_SEVERE: u32 = 2;
pub const SERVICE_ERROR_CRITICAL: u32 = 3;
pub const CM_SERVICE_NETWORK_BOOT_LOAD: u32 = 1;
pub const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD: u32 = 2;
pub const CM_SERVICE_USB_DISK_BOOT_LOAD: u32 = 4;
pub const CM_SERVICE_SD_DISK_BOOT_LOAD: u32 = 8;
pub const CM_SERVICE_USB3_DISK_BOOT_LOAD: u32 = 16;
pub const CM_SERVICE_MEASURED_BOOT_LOAD: u32 = 32;
pub const CM_SERVICE_VERIFIER_BOOT_LOAD: u32 = 64;
pub const CM_SERVICE_WINPE_BOOT_LOAD: u32 = 128;
pub const CM_SERVICE_RAM_DISK_BOOT_LOAD: u32 = 256;
pub const CM_SERVICE_VALID_PROMOTION_MASK: u32 = 511;
pub const TAPE_ERASE_SHORT: u32 = 0;
pub const TAPE_ERASE_LONG: u32 = 1;
pub const TAPE_LOAD: u32 = 0;
pub const TAPE_UNLOAD: u32 = 1;
pub const TAPE_TENSION: u32 = 2;
pub const TAPE_LOCK: u32 = 3;
pub const TAPE_UNLOCK: u32 = 4;
pub const TAPE_FORMAT: u32 = 5;
pub const TAPE_SETMARKS: u32 = 0;
pub const TAPE_FILEMARKS: u32 = 1;
pub const TAPE_SHORT_FILEMARKS: u32 = 2;
pub const TAPE_LONG_FILEMARKS: u32 = 3;
pub const TAPE_ABSOLUTE_POSITION: u32 = 0;
pub const TAPE_LOGICAL_POSITION: u32 = 1;
pub const TAPE_PSEUDO_LOGICAL_POSITION: u32 = 2;
pub const TAPE_REWIND: u32 = 0;
pub const TAPE_ABSOLUTE_BLOCK: u32 = 1;
pub const TAPE_LOGICAL_BLOCK: u32 = 2;
pub const TAPE_PSEUDO_LOGICAL_BLOCK: u32 = 3;
pub const TAPE_SPACE_END_OF_DATA: u32 = 4;
pub const TAPE_SPACE_RELATIVE_BLOCKS: u32 = 5;
pub const TAPE_SPACE_FILEMARKS: u32 = 6;
pub const TAPE_SPACE_SEQUENTIAL_FMKS: u32 = 7;
pub const TAPE_SPACE_SETMARKS: u32 = 8;
pub const TAPE_SPACE_SEQUENTIAL_SMKS: u32 = 9;
pub const TAPE_DRIVE_FIXED: u32 = 1;
pub const TAPE_DRIVE_SELECT: u32 = 2;
pub const TAPE_DRIVE_INITIATOR: u32 = 4;
pub const TAPE_DRIVE_ERASE_SHORT: u32 = 16;
pub const TAPE_DRIVE_ERASE_LONG: u32 = 32;
pub const TAPE_DRIVE_ERASE_BOP_ONLY: u32 = 64;
pub const TAPE_DRIVE_ERASE_IMMEDIATE: u32 = 128;
pub const TAPE_DRIVE_TAPE_CAPACITY: u32 = 256;
pub const TAPE_DRIVE_TAPE_REMAINING: u32 = 512;
pub const TAPE_DRIVE_FIXED_BLOCK: u32 = 1024;
pub const TAPE_DRIVE_VARIABLE_BLOCK: u32 = 2048;
pub const TAPE_DRIVE_WRITE_PROTECT: u32 = 4096;
pub const TAPE_DRIVE_EOT_WZ_SIZE: u32 = 8192;
pub const TAPE_DRIVE_ECC: u32 = 65536;
pub const TAPE_DRIVE_COMPRESSION: u32 = 131072;
pub const TAPE_DRIVE_PADDING: u32 = 262144;
pub const TAPE_DRIVE_REPORT_SMKS: u32 = 524288;
pub const TAPE_DRIVE_GET_ABSOLUTE_BLK: u32 = 1048576;
pub const TAPE_DRIVE_GET_LOGICAL_BLK: u32 = 2097152;
pub const TAPE_DRIVE_SET_EOT_WZ_SIZE: u32 = 4194304;
pub const TAPE_DRIVE_EJECT_MEDIA: u32 = 16777216;
pub const TAPE_DRIVE_CLEAN_REQUESTS: u32 = 33554432;
pub const TAPE_DRIVE_SET_CMP_BOP_ONLY: u32 = 67108864;
pub const TAPE_DRIVE_RESERVED_BIT: u32 = 2147483648;
pub const TAPE_DRIVE_LOAD_UNLOAD: u32 = 2147483649;
pub const TAPE_DRIVE_TENSION: u32 = 2147483650;
pub const TAPE_DRIVE_LOCK_UNLOCK: u32 = 2147483652;
pub const TAPE_DRIVE_REWIND_IMMEDIATE: u32 = 2147483656;
pub const TAPE_DRIVE_SET_BLOCK_SIZE: u32 = 2147483664;
pub const TAPE_DRIVE_LOAD_UNLD_IMMED: u32 = 2147483680;
pub const TAPE_DRIVE_TENSION_IMMED: u32 = 2147483712;
pub const TAPE_DRIVE_LOCK_UNLK_IMMED: u32 = 2147483776;
pub const TAPE_DRIVE_SET_ECC: u32 = 2147483904;
pub const TAPE_DRIVE_SET_COMPRESSION: u32 = 2147484160;
pub const TAPE_DRIVE_SET_PADDING: u32 = 2147484672;
pub const TAPE_DRIVE_SET_REPORT_SMKS: u32 = 2147485696;
pub const TAPE_DRIVE_ABSOLUTE_BLK: u32 = 2147487744;
pub const TAPE_DRIVE_ABS_BLK_IMMED: u32 = 2147491840;
pub const TAPE_DRIVE_LOGICAL_BLK: u32 = 2147500032;
pub const TAPE_DRIVE_LOG_BLK_IMMED: u32 = 2147516416;
pub const TAPE_DRIVE_END_OF_DATA: u32 = 2147549184;
pub const TAPE_DRIVE_RELATIVE_BLKS: u32 = 2147614720;
pub const TAPE_DRIVE_FILEMARKS: u32 = 2147745792;
pub const TAPE_DRIVE_SEQUENTIAL_FMKS: u32 = 2148007936;
pub const TAPE_DRIVE_SETMARKS: u32 = 2148532224;
pub const TAPE_DRIVE_SEQUENTIAL_SMKS: u32 = 2149580800;
pub const TAPE_DRIVE_REVERSE_POSITION: u32 = 2151677952;
pub const TAPE_DRIVE_SPACE_IMMEDIATE: u32 = 2155872256;
pub const TAPE_DRIVE_WRITE_SETMARKS: u32 = 2164260864;
pub const TAPE_DRIVE_WRITE_FILEMARKS: u32 = 2181038080;
pub const TAPE_DRIVE_WRITE_SHORT_FMKS: u32 = 2214592512;
pub const TAPE_DRIVE_WRITE_LONG_FMKS: u32 = 2281701376;
pub const TAPE_DRIVE_WRITE_MARK_IMMED: u32 = 2415919104;
pub const TAPE_DRIVE_FORMAT: u32 = 2684354560;
pub const TAPE_DRIVE_FORMAT_IMMEDIATE: u32 = 3221225472;
pub const TAPE_DRIVE_HIGH_FEATURES: u32 = 2147483648;
pub const TAPE_FIXED_PARTITIONS: u32 = 0;
pub const TAPE_SELECT_PARTITIONS: u32 = 1;
pub const TAPE_INITIATOR_PARTITIONS: u32 = 2;
pub const TAPE_QUERY_DRIVE_PARAMETERS: u32 = 0;
pub const TAPE_QUERY_MEDIA_CAPACITY: u32 = 1;
pub const TAPE_CHECK_FOR_DRIVE_PROBLEM: u32 = 2;
pub const TAPE_QUERY_IO_ERROR_DATA: u32 = 3;
pub const TAPE_QUERY_DEVICE_ERROR_DATA: u32 = 4;
pub const TRANSACTION_MANAGER_VOLATILE: u32 = 1;
pub const TRANSACTION_MANAGER_COMMIT_DEFAULT: u32 = 0;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME: u32 = 2;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES: u32 = 4;
pub const TRANSACTION_MANAGER_COMMIT_LOWEST: u32 = 8;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY: u32 = 16;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS: u32 = 32;
pub const TRANSACTION_MANAGER_MAXIMUM_OPTION: u32 = 63;
pub const TRANSACTION_DO_NOT_PROMOTE: u32 = 1;
pub const TRANSACTION_MAXIMUM_OPTION: u32 = 1;
pub const RESOURCE_MANAGER_VOLATILE: u32 = 1;
pub const RESOURCE_MANAGER_COMMUNICATION: u32 = 2;
pub const RESOURCE_MANAGER_MAXIMUM_OPTION: u32 = 3;
pub const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY: u32 = 1;
pub const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO: u32 = 2;
pub const CRM_PROTOCOL_MAXIMUM_OPTION: u32 = 3;
pub const ENLISTMENT_SUPERIOR: u32 = 1;
pub const ENLISTMENT_MAXIMUM_OPTION: u32 = 1;
pub const TRANSACTION_NOTIFY_MASK: u32 = 1073741823;
pub const TRANSACTION_NOTIFY_PREPREPARE: u32 = 1;
pub const TRANSACTION_NOTIFY_PREPARE: u32 = 2;
pub const TRANSACTION_NOTIFY_COMMIT: u32 = 4;
pub const TRANSACTION_NOTIFY_ROLLBACK: u32 = 8;
pub const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE: u32 = 16;
pub const TRANSACTION_NOTIFY_PREPARE_COMPLETE: u32 = 32;
pub const TRANSACTION_NOTIFY_COMMIT_COMPLETE: u32 = 64;
pub const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE: u32 = 128;
pub const TRANSACTION_NOTIFY_RECOVER: u32 = 256;
pub const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT: u32 = 512;
pub const TRANSACTION_NOTIFY_DELEGATE_COMMIT: u32 = 1024;
pub const TRANSACTION_NOTIFY_RECOVER_QUERY: u32 = 2048;
pub const TRANSACTION_NOTIFY_ENLIST_PREPREPARE: u32 = 4096;
pub const TRANSACTION_NOTIFY_LAST_RECOVER: u32 = 8192;
pub const TRANSACTION_NOTIFY_INDOUBT: u32 = 16384;
pub const TRANSACTION_NOTIFY_PROPAGATE_PULL: u32 = 32768;
pub const TRANSACTION_NOTIFY_PROPAGATE_PUSH: u32 = 65536;
pub const TRANSACTION_NOTIFY_MARSHAL: u32 = 131072;
pub const TRANSACTION_NOTIFY_ENLIST_MASK: u32 = 262144;
pub const TRANSACTION_NOTIFY_RM_DISCONNECTED: u32 = 16777216;
pub const TRANSACTION_NOTIFY_TM_ONLINE: u32 = 33554432;
pub const TRANSACTION_NOTIFY_COMMIT_REQUEST: u32 = 67108864;
pub const TRANSACTION_NOTIFY_PROMOTE: u32 = 134217728;
pub const TRANSACTION_NOTIFY_PROMOTE_NEW: u32 = 268435456;
pub const TRANSACTION_NOTIFY_REQUEST_OUTCOME: u32 = 536870912;
pub const TRANSACTION_NOTIFY_COMMIT_FINALIZE: u32 = 1073741824;
pub const TRANSACTIONMANAGER_OBJECT_PATH: &[u8; 21] = b"\\TransactionManager\\\0";
pub const TRANSACTION_OBJECT_PATH: &[u8; 14] = b"\\Transaction\\\0";
pub const ENLISTMENT_OBJECT_PATH: &[u8; 13] = b"\\Enlistment\\\0";
pub const RESOURCE_MANAGER_OBJECT_PATH: &[u8; 18] = b"\\ResourceManager\\\0";
pub const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED: u32 = 1;
pub const KTM_MARSHAL_BLOB_VERSION_MAJOR: u32 = 1;
pub const KTM_MARSHAL_BLOB_VERSION_MINOR: u32 = 1;
pub const MAX_TRANSACTION_DESCRIPTION_LENGTH: u32 = 64;
pub const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH: u32 = 64;
pub const TRANSACTIONMANAGER_QUERY_INFORMATION: u32 = 1;
pub const TRANSACTIONMANAGER_SET_INFORMATION: u32 = 2;
pub const TRANSACTIONMANAGER_RECOVER: u32 = 4;
pub const TRANSACTIONMANAGER_RENAME: u32 = 8;
pub const TRANSACTIONMANAGER_CREATE_RM: u32 = 16;
pub const TRANSACTIONMANAGER_BIND_TRANSACTION: u32 = 32;
pub const TRANSACTIONMANAGER_GENERIC_READ: u32 = 131073;
pub const TRANSACTIONMANAGER_GENERIC_WRITE: u32 = 131102;
pub const TRANSACTIONMANAGER_GENERIC_EXECUTE: u32 = 131072;
pub const TRANSACTIONMANAGER_ALL_ACCESS: u32 = 983103;
pub const TRANSACTION_QUERY_INFORMATION: u32 = 1;
pub const TRANSACTION_SET_INFORMATION: u32 = 2;
pub const TRANSACTION_ENLIST: u32 = 4;
pub const TRANSACTION_COMMIT: u32 = 8;
pub const TRANSACTION_ROLLBACK: u32 = 16;
pub const TRANSACTION_PROPAGATE: u32 = 32;
pub const TRANSACTION_RIGHT_RESERVED1: u32 = 64;
pub const TRANSACTION_GENERIC_READ: u32 = 1179649;
pub const TRANSACTION_GENERIC_WRITE: u32 = 1179710;
pub const TRANSACTION_GENERIC_EXECUTE: u32 = 1179672;
pub const TRANSACTION_ALL_ACCESS: u32 = 2031679;
pub const TRANSACTION_RESOURCE_MANAGER_RIGHTS: u32 = 1179703;
pub const RESOURCEMANAGER_QUERY_INFORMATION: u32 = 1;
pub const RESOURCEMANAGER_SET_INFORMATION: u32 = 2;
pub const RESOURCEMANAGER_RECOVER: u32 = 4;
pub const RESOURCEMANAGER_ENLIST: u32 = 8;
pub const RESOURCEMANAGER_GET_NOTIFICATION: u32 = 16;
pub const RESOURCEMANAGER_REGISTER_PROTOCOL: u32 = 32;
pub const RESOURCEMANAGER_COMPLETE_PROPAGATION: u32 = 64;
pub const RESOURCEMANAGER_GENERIC_READ: u32 = 1179649;
pub const RESOURCEMANAGER_GENERIC_WRITE: u32 = 1179774;
pub const RESOURCEMANAGER_GENERIC_EXECUTE: u32 = 1179740;
pub const RESOURCEMANAGER_ALL_ACCESS: u32 = 2031743;
pub const ENLISTMENT_QUERY_INFORMATION: u32 = 1;
pub const ENLISTMENT_SET_INFORMATION: u32 = 2;
pub const ENLISTMENT_RECOVER: u32 = 4;
pub const ENLISTMENT_SUBORDINATE_RIGHTS: u32 = 8;
pub const ENLISTMENT_SUPERIOR_RIGHTS: u32 = 16;
pub const ENLISTMENT_GENERIC_READ: u32 = 131073;
pub const ENLISTMENT_GENERIC_WRITE: u32 = 131102;
pub const ENLISTMENT_GENERIC_EXECUTE: u32 = 131100;
pub const ENLISTMENT_ALL_ACCESS: u32 = 983071;
pub const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION: u32 = 1;
pub const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION: u32 = 2;
pub const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION: u32 = 3;
pub const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION: u32 = 4;
pub const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION: u32 = 5;
pub const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION: u32 = 6;
pub const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION: u32 = 7;
pub const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE: u32 = 8;
pub const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES: u32 = 9;
pub const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS: u32 = 10;
pub const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO: u32 = 11;
pub const ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES: u32 = 12;
pub const APP_LOCAL_DEVICE_ID_SIZE: u32 = 32;
pub const DM_UPDATE: u32 = 1;
pub const DM_COPY: u32 = 2;
pub const DM_PROMPT: u32 = 4;
pub const DM_MODIFY: u32 = 8;
pub const DM_IN_BUFFER: u32 = 8;
pub const DM_IN_PROMPT: u32 = 4;
pub const DM_OUT_BUFFER: u32 = 2;
pub const DM_OUT_DEFAULT: u32 = 1;
pub const DC_FIELDS: u32 = 1;
pub const DC_PAPERS: u32 = 2;
pub const DC_PAPERSIZE: u32 = 3;
pub const DC_MINEXTENT: u32 = 4;
pub const DC_MAXEXTENT: u32 = 5;
pub const DC_BINS: u32 = 6;
pub const DC_DUPLEX: u32 = 7;
pub const DC_SIZE: u32 = 8;
pub const DC_EXTRA: u32 = 9;
pub const DC_VERSION: u32 = 10;
pub const DC_DRIVER: u32 = 11;
pub const DC_BINNAMES: u32 = 12;
pub const DC_ENUMRESOLUTIONS: u32 = 13;
pub const DC_FILEDEPENDENCIES: u32 = 14;
pub const DC_TRUETYPE: u32 = 15;
pub const DC_PAPERNAMES: u32 = 16;
pub const DC_ORIENTATION: u32 = 17;
pub const DC_COPIES: u32 = 18;
pub const FIND_FIRST_EX_CASE_SENSITIVE: u32 = 1;
pub const FIND_FIRST_EX_LARGE_FETCH: u32 = 2;
pub const FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY: u32 = 4;
pub const LOCKFILE_FAIL_IMMEDIATELY: u32 = 1;
pub const LOCKFILE_EXCLUSIVE_LOCK: u32 = 2;
pub const PROCESS_HEAP_REGION: u32 = 1;
pub const PROCESS_HEAP_UNCOMMITTED_RANGE: u32 = 2;
pub const PROCESS_HEAP_ENTRY_BUSY: u32 = 4;
pub const PROCESS_HEAP_SEG_ALLOC: u32 = 8;
pub const PROCESS_HEAP_ENTRY_MOVEABLE: u32 = 16;
pub const PROCESS_HEAP_ENTRY_DDESHARE: u32 = 32;
pub const EXCEPTION_DEBUG_EVENT: u32 = 1;
pub const CREATE_THREAD_DEBUG_EVENT: u32 = 2;
pub const CREATE_PROCESS_DEBUG_EVENT: u32 = 3;
pub const EXIT_THREAD_DEBUG_EVENT: u32 = 4;
pub const EXIT_PROCESS_DEBUG_EVENT: u32 = 5;
pub const LOAD_DLL_DEBUG_EVENT: u32 = 6;
pub const UNLOAD_DLL_DEBUG_EVENT: u32 = 7;
pub const OUTPUT_DEBUG_STRING_EVENT: u32 = 8;
pub const RIP_EVENT: u32 = 9;
pub const LMEM_FIXED: u32 = 0;
pub const LMEM_MOVEABLE: u32 = 2;
pub const LMEM_NOCOMPACT: u32 = 16;
pub const LMEM_NODISCARD: u32 = 32;
pub const LMEM_ZEROINIT: u32 = 64;
pub const LMEM_MODIFY: u32 = 128;
pub const LMEM_DISCARDABLE: u32 = 3840;
pub const LMEM_VALID_FLAGS: u32 = 3954;
pub const LMEM_INVALID_HANDLE: u32 = 32768;
pub const LHND: u32 = 66;
pub const LPTR: u32 = 64;
pub const NONZEROLHND: u32 = 2;
pub const NONZEROLPTR: u32 = 0;
pub const LMEM_DISCARDED: u32 = 16384;
pub const LMEM_LOCKCOUNT: u32 = 255;
pub const CREATE_NEW: u32 = 1;
pub const CREATE_ALWAYS: u32 = 2;
pub const OPEN_EXISTING: u32 = 3;
pub const OPEN_ALWAYS: u32 = 4;
pub const TRUNCATE_EXISTING: u32 = 5;
pub const INIT_ONCE_CHECK_ONLY: u32 = 1;
pub const INIT_ONCE_ASYNC: u32 = 2;
pub const INIT_ONCE_INIT_FAILED: u32 = 4;
pub const INIT_ONCE_CTX_RESERVED_BITS: u32 = 2;
pub const CONDITION_VARIABLE_LOCKMODE_SHARED: u32 = 1;
pub const MUTEX_MODIFY_STATE: u32 = 1;
pub const MUTEX_ALL_ACCESS: u32 = 2031617;
pub const CREATE_MUTEX_INITIAL_OWNER: u32 = 1;
pub const CREATE_EVENT_MANUAL_RESET: u32 = 1;
pub const CREATE_EVENT_INITIAL_SET: u32 = 2;
pub const CREATE_WAITABLE_TIMER_MANUAL_RESET: u32 = 1;
pub const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION: u32 = 2;
pub const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY: u32 = 1;
pub const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY: u32 = 2;
pub const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE: u32 = 4;
pub const PROC_THREAD_ATTRIBUTE_REPLACE_VALUE: u32 = 1;
pub const PROCESS_AFFINITY_ENABLE_AUTO_UPDATE: u32 = 1;
pub const THREAD_POWER_THROTTLING_CURRENT_VERSION: u32 = 1;
pub const THREAD_POWER_THROTTLING_EXECUTION_SPEED: u32 = 1;
pub const THREAD_POWER_THROTTLING_VALID_FLAGS: u32 = 1;
pub const PME_CURRENT_VERSION: u32 = 1;
pub const PME_FAILFAST_ON_COMMIT_FAIL_DISABLE: u32 = 0;
pub const PME_FAILFAST_ON_COMMIT_FAIL_ENABLE: u32 = 1;
pub const PROCESS_POWER_THROTTLING_CURRENT_VERSION: u32 = 1;
pub const PROCESS_POWER_THROTTLING_EXECUTION_SPEED: u32 = 1;
pub const PROCESS_POWER_THROTTLING_IGNORE_TIMER_RESOLUTION: u32 = 4;
pub const PROCESS_POWER_THROTTLING_VALID_FLAGS: u32 = 5;
pub const PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND: u32 = 1;
pub const PROCESS_LEAP_SECOND_INFO_VALID_FLAGS: u32 = 1;
pub const USER_CET_ENVIRONMENT_WIN32_PROCESS: u32 = 0;
pub const USER_CET_ENVIRONMENT_SGX2_ENCLAVE: u32 = 2;
pub const USER_CET_ENVIRONMENT_VBS_ENCLAVE: u32 = 16;
pub const USER_CET_ENVIRONMENT_VBS_BASIC_ENCLAVE: u32 = 17;
pub const SCEX2_ALT_NETBIOS_NAME: u32 = 1;
pub const FILE_MAP_WRITE: u32 = 2;
pub const FILE_MAP_READ: u32 = 4;
pub const FILE_MAP_ALL_ACCESS: u32 = 983071;
pub const FILE_MAP_EXECUTE: u32 = 32;
pub const FILE_MAP_COPY: u32 = 1;
pub const FILE_MAP_RESERVE: u32 = 2147483648;
pub const FILE_MAP_TARGETS_INVALID: u32 = 1073741824;
pub const FILE_MAP_LARGE_PAGES: u32 = 536870912;
pub const FILE_CACHE_MAX_HARD_ENABLE: u32 = 1;
pub const FILE_CACHE_MAX_HARD_DISABLE: u32 = 2;
pub const FILE_CACHE_MIN_HARD_ENABLE: u32 = 4;
pub const FILE_CACHE_MIN_HARD_DISABLE: u32 = 8;
pub const MEHC_PATROL_SCRUBBER_PRESENT: u32 = 1;
pub const WIN32_MEMORY_NUMA_PERFORMANCE_ALL_TARGET_NODE: u32 = 4294967295;
pub const WIN32_MEMORY_NUMA_PERFORMANCE_READ_LATENCY: u32 = 1;
pub const WIN32_MEMORY_NUMA_PERFORMANCE_READ_BANDWIDTH: u32 = 2;
pub const WIN32_MEMORY_NUMA_PERFORMANCE_WRITE_LATENCY: u32 = 4;
pub const WIN32_MEMORY_NUMA_PERFORMANCE_WRITE_BANDWIDTH: u32 = 8;
pub const FIND_RESOURCE_DIRECTORY_TYPES: u32 = 256;
pub const FIND_RESOURCE_DIRECTORY_NAMES: u32 = 512;
pub const FIND_RESOURCE_DIRECTORY_LANGUAGES: u32 = 1024;
pub const RESOURCE_ENUM_LN: u32 = 1;
pub const RESOURCE_ENUM_MUI: u32 = 2;
pub const RESOURCE_ENUM_MUI_SYSTEM: u32 = 4;
pub const RESOURCE_ENUM_VALIDATE: u32 = 8;
pub const RESOURCE_ENUM_MODULE_EXACT: u32 = 16;
pub const SUPPORT_LANG_NUMBER: u32 = 32;
pub const GET_MODULE_HANDLE_EX_FLAG_PIN: u32 = 1;
pub const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT: u32 = 2;
pub const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS: u32 = 4;
pub const CURRENT_IMPORT_REDIRECTION_VERSION: u32 = 1;
pub const DONT_RESOLVE_DLL_REFERENCES: u32 = 1;
pub const LOAD_LIBRARY_AS_DATAFILE: u32 = 2;
pub const LOAD_WITH_ALTERED_SEARCH_PATH: u32 = 8;
pub const LOAD_IGNORE_CODE_AUTHZ_LEVEL: u32 = 16;
pub const LOAD_LIBRARY_AS_IMAGE_RESOURCE: u32 = 32;
pub const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE: u32 = 64;
pub const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET: u32 = 128;
pub const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR: u32 = 256;
pub const LOAD_LIBRARY_SEARCH_APPLICATION_DIR: u32 = 512;
pub const LOAD_LIBRARY_SEARCH_USER_DIRS: u32 = 1024;
pub const LOAD_LIBRARY_SEARCH_SYSTEM32: u32 = 2048;
pub const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS: u32 = 4096;
pub const LOAD_LIBRARY_SAFE_CURRENT_DIRS: u32 = 8192;
pub const LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER: u32 = 16384;
pub const LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY: u32 = 32768;
pub const SIGNING_LEVEL_FILE_CACHE_FLAG_NOT_VALIDATED: u32 = 1;
pub const SIGNING_LEVEL_FILE_CACHE_FLAG_VALIDATE_ONLY: u32 = 4;
pub const SIGNING_LEVEL_MICROSOFT: u32 = 8;
pub const PRIVATE_NAMESPACE_FLAG_DESTROY: u32 = 1;
pub const FILE_BEGIN: u32 = 0;
pub const FILE_CURRENT: u32 = 1;
pub const FILE_END: u32 = 2;
pub const FILE_FLAG_WRITE_THROUGH: u32 = 2147483648;
pub const FILE_FLAG_OVERLAPPED: u32 = 1073741824;
pub const FILE_FLAG_NO_BUFFERING: u32 = 536870912;
pub const FILE_FLAG_RANDOM_ACCESS: u32 = 268435456;
pub const FILE_FLAG_SEQUENTIAL_SCAN: u32 = 134217728;
pub const FILE_FLAG_DELETE_ON_CLOSE: u32 = 67108864;
pub const FILE_FLAG_BACKUP_SEMANTICS: u32 = 33554432;
pub const FILE_FLAG_POSIX_SEMANTICS: u32 = 16777216;
pub const FILE_FLAG_SESSION_AWARE: u32 = 8388608;
pub const FILE_FLAG_OPEN_REPARSE_POINT: u32 = 2097152;
pub const FILE_FLAG_OPEN_NO_RECALL: u32 = 1048576;
pub const FILE_FLAG_FIRST_PIPE_INSTANCE: u32 = 524288;
pub const FILE_FLAG_OPEN_REQUIRING_OPLOCK: u32 = 262144;
pub const FILE_FLAG_IGNORE_IMPERSONATED_DEVICEMAP: u32 = 131072;
pub const FILE_FLAG_DISALLOW_PATH_REDIRECTS: u32 = 65536;
pub const PROGRESS_CONTINUE: u32 = 0;
pub const PROGRESS_CANCEL: u32 = 1;
pub const PROGRESS_STOP: u32 = 2;
pub const PROGRESS_QUIET: u32 = 3;
pub const CALLBACK_CHUNK_FINISHED: u32 = 0;
pub const CALLBACK_STREAM_SWITCH: u32 = 1;
pub const COPY_FILE_FAIL_IF_EXISTS: u32 = 1;
pub const COPY_FILE_RESTARTABLE: u32 = 2;
pub const COPY_FILE_OPEN_SOURCE_FOR_WRITE: u32 = 4;
pub const COPY_FILE_ALLOW_DECRYPTED_DESTINATION: u32 = 8;
pub const COPY_FILE_COPY_SYMLINK: u32 = 2048;
pub const COPY_FILE_NO_BUFFERING: u32 = 4096;
pub const COPY_FILE_REQUEST_SECURITY_PRIVILEGES: u32 = 8192;
pub const COPY_FILE_RESUME_FROM_PAUSE: u32 = 16384;
pub const COPY_FILE_NO_OFFLOAD: u32 = 262144;
pub const COPY_FILE_IGNORE_EDP_BLOCK: u32 = 4194304;
pub const COPY_FILE_IGNORE_SOURCE_ENCRYPTION: u32 = 8388608;
pub const COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC: u32 = 33554432;
pub const COPY_FILE_REQUEST_COMPRESSED_TRAFFIC: u32 = 268435456;
pub const COPY_FILE_OPEN_AND_COPY_REPARSE_POINT: u32 = 2097152;
pub const COPY_FILE_DIRECTORY: u32 = 128;
pub const COPY_FILE_SKIP_ALTERNATE_STREAMS: u32 = 32768;
pub const COPY_FILE_DISABLE_PRE_ALLOCATION: u32 = 67108864;
pub const COPY_FILE_ENABLE_LOW_FREE_SPACE_MODE: u32 = 134217728;
pub const COPY_FILE_ENABLE_SPARSE_COPY: u32 = 536870912;
pub const COPY_FILE_DISABLE_SPARSE_COPY: u32 = 2147483648;
pub const REPLACEFILE_WRITE_THROUGH: u32 = 1;
pub const REPLACEFILE_IGNORE_MERGE_ERRORS: u32 = 2;
pub const REPLACEFILE_IGNORE_ACL_ERRORS: u32 = 4;
pub const PIPE_ACCESS_INBOUND: u32 = 1;
pub const PIPE_ACCESS_OUTBOUND: u32 = 2;
pub const PIPE_ACCESS_DUPLEX: u32 = 3;
pub const PIPE_CLIENT_END: u32 = 0;
pub const PIPE_SERVER_END: u32 = 1;
pub const PIPE_WAIT: u32 = 0;
pub const PIPE_NOWAIT: u32 = 1;
pub const PIPE_READMODE_BYTE: u32 = 0;
pub const PIPE_READMODE_MESSAGE: u32 = 2;
pub const PIPE_TYPE_BYTE: u32 = 0;
pub const PIPE_TYPE_MESSAGE: u32 = 4;
pub const PIPE_ACCEPT_REMOTE_CLIENTS: u32 = 0;
pub const PIPE_REJECT_REMOTE_CLIENTS: u32 = 8;
pub const PIPE_UNLIMITED_INSTANCES: u32 = 255;
pub const SECURITY_CONTEXT_TRACKING: u32 = 262144;
pub const SECURITY_EFFECTIVE_ONLY: u32 = 524288;
pub const SECURITY_SQOS_PRESENT: u32 = 1048576;
pub const SECURITY_VALID_SQOS_FLAGS: u32 = 2031616;
pub const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS: u32 = 1;
pub const FAIL_FAST_NO_HARD_ERROR_DLG: u32 = 2;
pub const DTR_CONTROL_DISABLE: u32 = 0;
pub const DTR_CONTROL_ENABLE: u32 = 1;
pub const DTR_CONTROL_HANDSHAKE: u32 = 2;
pub const RTS_CONTROL_DISABLE: u32 = 0;
pub const RTS_CONTROL_ENABLE: u32 = 1;
pub const RTS_CONTROL_HANDSHAKE: u32 = 2;
pub const RTS_CONTROL_TOGGLE: u32 = 3;
pub const GMEM_FIXED: u32 = 0;
pub const GMEM_MOVEABLE: u32 = 2;
pub const GMEM_NOCOMPACT: u32 = 16;
pub const GMEM_NODISCARD: u32 = 32;
pub const GMEM_ZEROINIT: u32 = 64;
pub const GMEM_MODIFY: u32 = 128;
pub const GMEM_DISCARDABLE: u32 = 256;
pub const GMEM_NOT_BANKED: u32 = 4096;
pub const GMEM_SHARE: u32 = 8192;
pub const GMEM_DDESHARE: u32 = 8192;
pub const GMEM_NOTIFY: u32 = 16384;
pub const GMEM_LOWER: u32 = 4096;
pub const GMEM_VALID_FLAGS: u32 = 32626;
pub const GMEM_INVALID_HANDLE: u32 = 32768;
pub const GHND: u32 = 66;
pub const GPTR: u32 = 64;
pub const GMEM_DISCARDED: u32 = 16384;
pub const GMEM_LOCKCOUNT: u32 = 255;
pub const DEBUG_PROCESS: u32 = 1;
pub const DEBUG_ONLY_THIS_PROCESS: u32 = 2;
pub const CREATE_SUSPENDED: u32 = 4;
pub const DETACHED_PROCESS: u32 = 8;
pub const CREATE_NEW_CONSOLE: u32 = 16;
pub const NORMAL_PRIORITY_CLASS: u32 = 32;
pub const IDLE_PRIORITY_CLASS: u32 = 64;
pub const HIGH_PRIORITY_CLASS: u32 = 128;
pub const REALTIME_PRIORITY_CLASS: u32 = 256;
pub const CREATE_NEW_PROCESS_GROUP: u32 = 512;
pub const CREATE_UNICODE_ENVIRONMENT: u32 = 1024;
pub const CREATE_SEPARATE_WOW_VDM: u32 = 2048;
pub const CREATE_SHARED_WOW_VDM: u32 = 4096;
pub const CREATE_FORCEDOS: u32 = 8192;
pub const BELOW_NORMAL_PRIORITY_CLASS: u32 = 16384;
pub const ABOVE_NORMAL_PRIORITY_CLASS: u32 = 32768;
pub const INHERIT_PARENT_AFFINITY: u32 = 65536;
pub const INHERIT_CALLER_PRIORITY: u32 = 131072;
pub const CREATE_PROTECTED_PROCESS: u32 = 262144;
pub const EXTENDED_STARTUPINFO_PRESENT: u32 = 524288;
pub const PROCESS_MODE_BACKGROUND_BEGIN: u32 = 1048576;
pub const PROCESS_MODE_BACKGROUND_END: u32 = 2097152;
pub const CREATE_SECURE_PROCESS: u32 = 4194304;
pub const CREATE_BREAKAWAY_FROM_JOB: u32 = 16777216;
pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL: u32 = 33554432;
pub const CREATE_DEFAULT_ERROR_MODE: u32 = 67108864;
pub const CREATE_NO_WINDOW: u32 = 134217728;
pub const PROFILE_USER: u32 = 268435456;
pub const PROFILE_KERNEL: u32 = 536870912;
pub const PROFILE_SERVER: u32 = 1073741824;
pub const CREATE_IGNORE_SYSTEM_DEFAULT: u32 = 2147483648;
pub const STACK_SIZE_PARAM_IS_A_RESERVATION: u32 = 65536;
pub const THREAD_PRIORITY_LOWEST: i32 = -2;
pub const THREAD_PRIORITY_BELOW_NORMAL: i32 = -1;
pub const THREAD_PRIORITY_NORMAL: u32 = 0;
pub const THREAD_PRIORITY_HIGHEST: u32 = 2;
pub const THREAD_PRIORITY_ABOVE_NORMAL: u32 = 1;
pub const THREAD_PRIORITY_ERROR_RETURN: u32 = 2147483647;
pub const THREAD_PRIORITY_TIME_CRITICAL: u32 = 15;
pub const THREAD_PRIORITY_IDLE: i32 = -15;
pub const THREAD_MODE_BACKGROUND_BEGIN: u32 = 65536;
pub const THREAD_MODE_BACKGROUND_END: u32 = 131072;
pub const VOLUME_NAME_DOS: u32 = 0;
pub const VOLUME_NAME_GUID: u32 = 1;
pub const VOLUME_NAME_NT: u32 = 2;
pub const VOLUME_NAME_NONE: u32 = 4;
pub const FILE_NAME_NORMALIZED: u32 = 0;
pub const FILE_NAME_OPENED: u32 = 8;
pub const DRIVE_UNKNOWN: u32 = 0;
pub const DRIVE_NO_ROOT_DIR: u32 = 1;
pub const DRIVE_REMOVABLE: u32 = 2;
pub const DRIVE_FIXED: u32 = 3;
pub const DRIVE_REMOTE: u32 = 4;
pub const DRIVE_CDROM: u32 = 5;
pub const DRIVE_RAMDISK: u32 = 6;
pub const FILE_TYPE_UNKNOWN: u32 = 0;
pub const FILE_TYPE_DISK: u32 = 1;
pub const FILE_TYPE_CHAR: u32 = 2;
pub const FILE_TYPE_PIPE: u32 = 3;
pub const FILE_TYPE_REMOTE: u32 = 32768;
pub const NOPARITY: u32 = 0;
pub const ODDPARITY: u32 = 1;
pub const EVENPARITY: u32 = 2;
pub const MARKPARITY: u32 = 3;
pub const SPACEPARITY: u32 = 4;
pub const ONESTOPBIT: u32 = 0;
pub const ONE5STOPBITS: u32 = 1;
pub const TWOSTOPBITS: u32 = 2;
pub const IGNORE: u32 = 0;
pub const INFINITE: u32 = 4294967295;
pub const CBR_110: u32 = 110;
pub const CBR_300: u32 = 300;
pub const CBR_600: u32 = 600;
pub const CBR_1200: u32 = 1200;
pub const CBR_2400: u32 = 2400;
pub const CBR_4800: u32 = 4800;
pub const CBR_9600: u32 = 9600;
pub const CBR_14400: u32 = 14400;
pub const CBR_19200: u32 = 19200;
pub const CBR_38400: u32 = 38400;
pub const CBR_56000: u32 = 56000;
pub const CBR_57600: u32 = 57600;
pub const CBR_115200: u32 = 115200;
pub const CBR_128000: u32 = 128000;
pub const CBR_256000: u32 = 256000;
pub const CE_RXOVER: u32 = 1;
pub const CE_OVERRUN: u32 = 2;
pub const CE_RXPARITY: u32 = 4;
pub const CE_FRAME: u32 = 8;
pub const CE_BREAK: u32 = 16;
pub const CE_TXFULL: u32 = 256;
pub const CE_PTO: u32 = 512;
pub const CE_IOE: u32 = 1024;
pub const CE_DNS: u32 = 2048;
pub const CE_OOP: u32 = 4096;
pub const CE_MODE: u32 = 32768;
pub const IE_BADID: i32 = -1;
pub const IE_OPEN: i32 = -2;
pub const IE_NOPEN: i32 = -3;
pub const IE_MEMORY: i32 = -4;
pub const IE_DEFAULT: i32 = -5;
pub const IE_HARDWARE: i32 = -10;
pub const IE_BYTESIZE: i32 = -11;
pub const IE_BAUDRATE: i32 = -12;
pub const EV_RXCHAR: u32 = 1;
pub const EV_RXFLAG: u32 = 2;
pub const EV_TXEMPTY: u32 = 4;
pub const EV_CTS: u32 = 8;
pub const EV_DSR: u32 = 16;
pub const EV_RLSD: u32 = 32;
pub const EV_BREAK: u32 = 64;
pub const EV_ERR: u32 = 128;
pub const EV_RING: u32 = 256;
pub const EV_PERR: u32 = 512;
pub const EV_RX80FULL: u32 = 1024;
pub const EV_EVENT1: u32 = 2048;
pub const EV_EVENT2: u32 = 4096;
pub const SETXOFF: u32 = 1;
pub const SETXON: u32 = 2;
pub const SETRTS: u32 = 3;
pub const CLRRTS: u32 = 4;
pub const SETDTR: u32 = 5;
pub const CLRDTR: u32 = 6;
pub const RESETDEV: u32 = 7;
pub const SETBREAK: u32 = 8;
pub const CLRBREAK: u32 = 9;
pub const PURGE_TXABORT: u32 = 1;
pub const PURGE_RXABORT: u32 = 2;
pub const PURGE_TXCLEAR: u32 = 4;
pub const PURGE_RXCLEAR: u32 = 8;
pub const LPTx: u32 = 128;
pub const S_QUEUEEMPTY: u32 = 0;
pub const S_THRESHOLD: u32 = 1;
pub const S_ALLTHRESHOLD: u32 = 2;
pub const S_NORMAL: u32 = 0;
pub const S_LEGATO: u32 = 1;
pub const S_STACCATO: u32 = 2;
pub const S_PERIOD512: u32 = 0;
pub const S_PERIOD1024: u32 = 1;
pub const S_PERIOD2048: u32 = 2;
pub const S_PERIODVOICE: u32 = 3;
pub const S_WHITE512: u32 = 4;
pub const S_WHITE1024: u32 = 5;
pub const S_WHITE2048: u32 = 6;
pub const S_WHITEVOICE: u32 = 7;
pub const S_SERDVNA: i32 = -1;
pub const S_SEROFM: i32 = -2;
pub const S_SERMACT: i32 = -3;
pub const S_SERQFUL: i32 = -4;
pub const S_SERBDNT: i32 = -5;
pub const S_SERDLN: i32 = -6;
pub const S_SERDCC: i32 = -7;
pub const S_SERDTP: i32 = -8;
pub const S_SERDVL: i32 = -9;
pub const S_SERDMD: i32 = -10;
pub const S_SERDSH: i32 = -11;
pub const S_SERDPT: i32 = -12;
pub const S_SERDFQ: i32 = -13;
pub const S_SERDDR: i32 = -14;
pub const S_SERDSR: i32 = -15;
pub const S_SERDST: i32 = -16;
pub const NMPWAIT_WAIT_FOREVER: u32 = 4294967295;
pub const NMPWAIT_NOWAIT: u32 = 1;
pub const NMPWAIT_USE_DEFAULT_WAIT: u32 = 0;
pub const FS_CASE_IS_PRESERVED: u32 = 2;
pub const FS_CASE_SENSITIVE: u32 = 1;
pub const FS_UNICODE_STORED_ON_DISK: u32 = 4;
pub const FS_PERSISTENT_ACLS: u32 = 8;
pub const FS_VOL_IS_COMPRESSED: u32 = 32768;
pub const FS_FILE_COMPRESSION: u32 = 16;
pub const FS_FILE_ENCRYPTION: u32 = 131072;
pub const OF_READ: u32 = 0;
pub const OF_WRITE: u32 = 1;
pub const OF_READWRITE: u32 = 2;
pub const OF_SHARE_COMPAT: u32 = 0;
pub const OF_SHARE_EXCLUSIVE: u32 = 16;
pub const OF_SHARE_DENY_WRITE: u32 = 32;
pub const OF_SHARE_DENY_READ: u32 = 48;
pub const OF_SHARE_DENY_NONE: u32 = 64;
pub const OF_PARSE: u32 = 256;
pub const OF_DELETE: u32 = 512;
pub const OF_VERIFY: u32 = 1024;
pub const OF_CANCEL: u32 = 2048;
pub const OF_CREATE: u32 = 4096;
pub const OF_PROMPT: u32 = 8192;
pub const OF_EXIST: u32 = 16384;
pub const OF_REOPEN: u32 = 32768;
pub const OFS_MAXPATHNAME: u32 = 128;
pub const MAXINTATOM: u32 = 49152;
pub const SCS_32BIT_BINARY: u32 = 0;
pub const SCS_DOS_BINARY: u32 = 1;
pub const SCS_WOW_BINARY: u32 = 2;
pub const SCS_PIF_BINARY: u32 = 3;
pub const SCS_POSIX_BINARY: u32 = 4;
pub const SCS_OS216_BINARY: u32 = 5;
pub const SCS_64BIT_BINARY: u32 = 6;
pub const SCS_THIS_PLATFORM_BINARY: u32 = 6;
pub const FIBER_FLAG_FLOAT_SWITCH: u32 = 1;
pub const UMS_VERSION: u32 = 256;
pub const PROCESS_DEP_ENABLE: u32 = 1;
pub const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION: u32 = 2;
pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS: u32 = 1;
pub const FILE_SKIP_SET_EVENT_ON_HANDLE: u32 = 2;
pub const SEM_FAILCRITICALERRORS: u32 = 1;
pub const SEM_NOGPFAULTERRORBOX: u32 = 2;
pub const SEM_NOALIGNMENTFAULTEXCEPT: u32 = 4;
pub const SEM_NOOPENFILEERRORBOX: u32 = 32768;
pub const CRITICAL_SECTION_NO_DEBUG_INFO: u32 = 16777216;
pub const HANDLE_FLAG_INHERIT: u32 = 1;
pub const HANDLE_FLAG_PROTECT_FROM_CLOSE: u32 = 2;
pub const HINSTANCE_ERROR: u32 = 32;
pub const GET_TAPE_MEDIA_INFORMATION: u32 = 0;
pub const GET_TAPE_DRIVE_INFORMATION: u32 = 1;
pub const SET_TAPE_MEDIA_INFORMATION: u32 = 0;
pub const SET_TAPE_DRIVE_INFORMATION: u32 = 1;
pub const FORMAT_MESSAGE_ALLOCATE_BUFFER: u32 = 256;
pub const FORMAT_MESSAGE_IGNORE_INSERTS: u32 = 512;
pub const FORMAT_MESSAGE_FROM_STRING: u32 = 1024;
pub const FORMAT_MESSAGE_FROM_HMODULE: u32 = 2048;
pub const FORMAT_MESSAGE_FROM_SYSTEM: u32 = 4096;
pub const FORMAT_MESSAGE_ARGUMENT_ARRAY: u32 = 8192;
pub const FORMAT_MESSAGE_MAX_WIDTH_MASK: u32 = 255;
pub const FILE_ENCRYPTABLE: u32 = 0;
pub const FILE_IS_ENCRYPTED: u32 = 1;
pub const FILE_SYSTEM_ATTR: u32 = 2;
pub const FILE_ROOT_DIR: u32 = 3;
pub const FILE_SYSTEM_DIR: u32 = 4;
pub const FILE_UNKNOWN: u32 = 5;
pub const FILE_SYSTEM_NOT_SUPPORT: u32 = 6;
pub const FILE_USER_DISALLOWED: u32 = 7;
pub const FILE_READ_ONLY: u32 = 8;
pub const FILE_DIR_DISALLOWED: u32 = 9;
pub const EFS_USE_RECOVERY_KEYS: u32 = 1;
pub const CREATE_FOR_IMPORT: u32 = 1;
pub const CREATE_FOR_DIR: u32 = 2;
pub const OVERWRITE_HIDDEN: u32 = 4;
pub const EFSRPC_SECURE_ONLY: u32 = 8;
pub const EFS_DROP_ALTERNATE_STREAMS: u32 = 16;
pub const BACKUP_INVALID: u32 = 0;
pub const BACKUP_DATA: u32 = 1;
pub const BACKUP_EA_DATA: u32 = 2;
pub const BACKUP_SECURITY_DATA: u32 = 3;
pub const BACKUP_ALTERNATE_DATA: u32 = 4;
pub const BACKUP_LINK: u32 = 5;
pub const BACKUP_PROPERTY_DATA: u32 = 6;
pub const BACKUP_OBJECT_ID: u32 = 7;
pub const BACKUP_REPARSE_DATA: u32 = 8;
pub const BACKUP_SPARSE_BLOCK: u32 = 9;
pub const BACKUP_TXFS_DATA: u32 = 10;
pub const BACKUP_GHOSTED_FILE_EXTENTS: u32 = 11;
pub const STREAM_NORMAL_ATTRIBUTE: u32 = 0;
pub const STREAM_MODIFIED_WHEN_READ: u32 = 1;
pub const STREAM_CONTAINS_SECURITY: u32 = 2;
pub const STREAM_CONTAINS_PROPERTIES: u32 = 4;
pub const STREAM_SPARSE_ATTRIBUTE: u32 = 8;
pub const STREAM_CONTAINS_GHOSTED_FILE_EXTENTS: u32 = 16;
pub const STARTF_USESHOWWINDOW: u32 = 1;
pub const STARTF_USESIZE: u32 = 2;
pub const STARTF_USEPOSITION: u32 = 4;
pub const STARTF_USECOUNTCHARS: u32 = 8;
pub const STARTF_USEFILLATTRIBUTE: u32 = 16;
pub const STARTF_RUNFULLSCREEN: u32 = 32;
pub const STARTF_FORCEONFEEDBACK: u32 = 64;
pub const STARTF_FORCEOFFFEEDBACK: u32 = 128;
pub const STARTF_USESTDHANDLES: u32 = 256;
pub const STARTF_USEHOTKEY: u32 = 512;
pub const STARTF_TITLEISLINKNAME: u32 = 2048;
pub const STARTF_TITLEISAPPID: u32 = 4096;
pub const STARTF_PREVENTPINNING: u32 = 8192;
pub const STARTF_UNTRUSTEDSOURCE: u32 = 32768;
pub const STARTF_HOLOGRAPHIC: u32 = 262144;
pub const SHUTDOWN_NORETRY: u32 = 1;
pub const PROTECTION_LEVEL_WINTCB_LIGHT: u32 = 0;
pub const PROTECTION_LEVEL_WINDOWS: u32 = 1;
pub const PROTECTION_LEVEL_WINDOWS_LIGHT: u32 = 2;
pub const PROTECTION_LEVEL_ANTIMALWARE_LIGHT: u32 = 3;
pub const PROTECTION_LEVEL_LSA_LIGHT: u32 = 4;
pub const PROTECTION_LEVEL_WINTCB: u32 = 5;
pub const PROTECTION_LEVEL_CODEGEN_LIGHT: u32 = 6;
pub const PROTECTION_LEVEL_AUTHENTICODE: u32 = 7;
pub const PROTECTION_LEVEL_PPL_APP: u32 = 8;
pub const PROTECTION_LEVEL_SAME: u32 = 4294967295;
pub const PROTECTION_LEVEL_NONE: u32 = 4294967294;
pub const PROCESS_NAME_NATIVE: u32 = 1;
pub const PROC_THREAD_ATTRIBUTE_NUMBER: u32 = 65535;
pub const PROC_THREAD_ATTRIBUTE_THREAD: u32 = 65536;
pub const PROC_THREAD_ATTRIBUTE_INPUT: u32 = 131072;
pub const PROC_THREAD_ATTRIBUTE_ADDITIVE: u32 = 262144;
pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE: u32 = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE: u32 = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE: u32 = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK: u32 = 768;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON: u32 = 256;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF: u32 = 512;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS: u32 = 768;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK: u32 = 12288;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON: u32 = 4096;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF: u32 = 8192;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED: u32 = 12288;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK: u32 = 196608;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON: u32 = 65536;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF: u32 = 131072;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED: u32 = 196608;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK: u32 = 3145728;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON: u32 = 1048576;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF: u32 = 2097152;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED: u32 = 3145728;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK: u32 = 50331648;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON: u32 = 16777216;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF: u32 = 33554432;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED: u32 = 50331648;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK: u32 = 805306368;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER: u32 = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON: u32 = 268435456;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF: u32 = 536870912;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED: u32 = 805306368;
pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED: u32 = 1;
pub const PROCESS_CREATION_CHILD_PROCESS_OVERRIDE: u32 = 2;
pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE: u32 = 4;
pub const PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT: u32 = 1;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE: u32 = 1;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE: u32 = 2;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE: u32 = 4;
pub const ATOM_FLAG_GLOBAL: u32 = 2;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A: &[u8; 25] = b"GetSystemWow64DirectoryA\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W: &[u8; 25] = b"GetSystemWow64DirectoryA\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A: &[u8; 25] = b"GetSystemWow64DirectoryW\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_W: &[u8; 25] = b"GetSystemWow64DirectoryW\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A: &[u8; 25] = b"GetSystemWow64DirectoryA\0";
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W: &[u8; 25] = b"GetSystemWow64DirectoryA\0";
pub const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE: u32 = 1;
pub const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE: u32 = 65536;
pub const BASE_SEARCH_PATH_PERMANENT: u32 = 32768;
pub const BASE_SEARCH_PATH_INVALID_FLAGS: i32 = -98306;
pub const DDD_RAW_TARGET_PATH: u32 = 1;
pub const DDD_REMOVE_DEFINITION: u32 = 2;
pub const DDD_EXACT_MATCH_ON_REMOVE: u32 = 4;
pub const DDD_NO_BROADCAST_SYSTEM: u32 = 8;
pub const DDD_LUID_BROADCAST_DRIVE: u32 = 16;
pub const COPYFILE2_MESSAGE_COPY_OFFLOAD: u32 = 1;
pub const COPYFILE2_IO_CYCLE_SIZE_MIN: u32 = 4096;
pub const COPYFILE2_IO_CYCLE_SIZE_MAX: u32 = 1073741824;
pub const COPYFILE2_IO_RATE_MIN: u32 = 512;
pub const COPY_FILE2_V2_DONT_COPY_JUNCTIONS: u32 = 1;
pub const COPY_FILE2_V2_DISABLE_BLOCK_CLONING: u32 = 2;
pub const COPY_FILE2_V2_VALID_FLAGS: u32 = 3;
pub const MOVEFILE_REPLACE_EXISTING: u32 = 1;
pub const MOVEFILE_COPY_ALLOWED: u32 = 2;
pub const MOVEFILE_DELAY_UNTIL_REBOOT: u32 = 4;
pub const MOVEFILE_WRITE_THROUGH: u32 = 8;
pub const MOVEFILE_CREATE_HARDLINK: u32 = 16;
pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE: u32 = 32;
pub const EVENTLOG_FULL_INFO: u32 = 0;
pub const OPERATION_API_VERSION: u32 = 1;
pub const OPERATION_START_TRACE_CURRENT_THREAD: u32 = 1;
pub const OPERATION_END_DISCARD: u32 = 1;
pub const MAX_COMPUTERNAME_LENGTH: u32 = 15;
pub const LOGON32_LOGON_INTERACTIVE: u32 = 2;
pub const LOGON32_LOGON_NETWORK: u32 = 3;
pub const LOGON32_LOGON_BATCH: u32 = 4;
pub const LOGON32_LOGON_SERVICE: u32 = 5;
pub const LOGON32_LOGON_UNLOCK: u32 = 7;
pub const LOGON32_LOGON_NETWORK_CLEARTEXT: u32 = 8;
pub const LOGON32_LOGON_NEW_CREDENTIALS: u32 = 9;
pub const LOGON32_PROVIDER_DEFAULT: u32 = 0;
pub const LOGON32_PROVIDER_WINNT35: u32 = 1;
pub const LOGON32_PROVIDER_WINNT40: u32 = 2;
pub const LOGON32_PROVIDER_WINNT50: u32 = 3;
pub const LOGON32_PROVIDER_VIRTUAL: u32 = 4;
pub const LOGON_WITH_PROFILE: u32 = 1;
pub const LOGON_NETCREDENTIALS_ONLY: u32 = 2;
pub const LOGON_ZERO_PASSWORD_BUFFER: u32 = 2147483648;
pub const HW_PROFILE_GUIDLEN: u32 = 39;
pub const MAX_PROFILE_LEN: u32 = 80;
pub const DOCKINFO_UNDOCKED: u32 = 1;
pub const DOCKINFO_DOCKED: u32 = 2;
pub const DOCKINFO_USER_SUPPLIED: u32 = 4;
pub const DOCKINFO_USER_UNDOCKED: u32 = 5;
pub const DOCKINFO_USER_DOCKED: u32 = 6;
pub const FACILITY_NULL: u32 = 0;
pub const FACILITY_RPC: u32 = 1;
pub const FACILITY_DISPATCH: u32 = 2;
pub const FACILITY_STORAGE: u32 = 3;
pub const FACILITY_ITF: u32 = 4;
pub const FACILITY_WIN32: u32 = 7;
pub const FACILITY_WINDOWS: u32 = 8;
pub const FACILITY_SSPI: u32 = 9;
pub const FACILITY_SECURITY: u32 = 9;
pub const FACILITY_CONTROL: u32 = 10;
pub const FACILITY_CERT: u32 = 11;
pub const FACILITY_INTERNET: u32 = 12;
pub const FACILITY_MEDIASERVER: u32 = 13;
pub const FACILITY_MSMQ: u32 = 14;
pub const FACILITY_SETUPAPI: u32 = 15;
pub const FACILITY_SCARD: u32 = 16;
pub const FACILITY_COMPLUS: u32 = 17;
pub const FACILITY_AAF: u32 = 18;
pub const FACILITY_URT: u32 = 19;
pub const FACILITY_ACS: u32 = 20;
pub const FACILITY_DPLAY: u32 = 21;
pub const FACILITY_UMI: u32 = 22;
pub const FACILITY_SXS: u32 = 23;
pub const FACILITY_WINDOWS_CE: u32 = 24;
pub const FACILITY_HTTP: u32 = 25;
pub const FACILITY_USERMODE_COMMONLOG: u32 = 26;
pub const FACILITY_WER: u32 = 27;
pub const FACILITY_USERMODE_FILTER_MANAGER: u32 = 31;
pub const FACILITY_BACKGROUNDCOPY: u32 = 32;
pub const FACILITY_CONFIGURATION: u32 = 33;
pub const FACILITY_WIA: u32 = 33;
pub const FACILITY_STATE_MANAGEMENT: u32 = 34;
pub const FACILITY_METADIRECTORY: u32 = 35;
pub const FACILITY_WINDOWSUPDATE: u32 = 36;
pub const FACILITY_DIRECTORYSERVICE: u32 = 37;
pub const FACILITY_GRAPHICS: u32 = 38;
pub const FACILITY_SHELL: u32 = 39;
pub const FACILITY_NAP: u32 = 39;
pub const FACILITY_TPM_SERVICES: u32 = 40;
pub const FACILITY_TPM_SOFTWARE: u32 = 41;
pub const FACILITY_UI: u32 = 42;
pub const FACILITY_XAML: u32 = 43;
pub const FACILITY_ACTION_QUEUE: u32 = 44;
pub const FACILITY_PLA: u32 = 48;
pub const FACILITY_WINDOWS_SETUP: u32 = 48;
pub const FACILITY_FVE: u32 = 49;
pub const FACILITY_FWP: u32 = 50;
pub const FACILITY_WINRM: u32 = 51;
pub const FACILITY_NDIS: u32 = 52;
pub const FACILITY_USERMODE_HYPERVISOR: u32 = 53;
pub const FACILITY_CMI: u32 = 54;
pub const FACILITY_USERMODE_VIRTUALIZATION: u32 = 55;
pub const FACILITY_USERMODE_VOLMGR: u32 = 56;
pub const FACILITY_BCD: u32 = 57;
pub const FACILITY_USERMODE_VHD: u32 = 58;
pub const FACILITY_USERMODE_HNS: u32 = 59;
pub const FACILITY_SDIAG: u32 = 60;
pub const FACILITY_WEBSERVICES: u32 = 61;
pub const FACILITY_WINPE: u32 = 61;
pub const FACILITY_WPN: u32 = 62;
pub const FACILITY_WINDOWS_STORE: u32 = 63;
pub const FACILITY_INPUT: u32 = 64;
pub const FACILITY_QUIC: u32 = 65;
pub const FACILITY_EAP: u32 = 66;
pub const FACILITY_IORING: u32 = 70;
pub const FACILITY_WINDOWS_DEFENDER: u32 = 80;
pub const FACILITY_OPC: u32 = 81;
pub const FACILITY_XPS: u32 = 82;
pub const FACILITY_MBN: u32 = 84;
pub const FACILITY_POWERSHELL: u32 = 84;
pub const FACILITY_RAS: u32 = 83;
pub const FACILITY_P2P_INT: u32 = 98;
pub const FACILITY_P2P: u32 = 99;
pub const FACILITY_DAF: u32 = 100;
pub const FACILITY_BLUETOOTH_ATT: u32 = 101;
pub const FACILITY_AUDIO: u32 = 102;
pub const FACILITY_STATEREPOSITORY: u32 = 103;
pub const FACILITY_VISUALCPP: u32 = 109;
pub const FACILITY_SCRIPT: u32 = 112;
pub const FACILITY_PARSE: u32 = 113;
pub const FACILITY_BLB: u32 = 120;
pub const FACILITY_BLB_CLI: u32 = 121;
pub const FACILITY_WSBAPP: u32 = 122;
pub const FACILITY_BLBUI: u32 = 128;
pub const FACILITY_USN: u32 = 129;
pub const FACILITY_USERMODE_VOLSNAP: u32 = 130;
pub const FACILITY_TIERING: u32 = 131;
pub const FACILITY_WSB_ONLINE: u32 = 133;
pub const FACILITY_ONLINE_ID: u32 = 134;
pub const FACILITY_DEVICE_UPDATE_AGENT: u32 = 135;
pub const FACILITY_DRVSERVICING: u32 = 136;
pub const FACILITY_DLS: u32 = 153;
pub const FACILITY_DELIVERY_OPTIMIZATION: u32 = 208;
pub const FACILITY_USERMODE_SPACES: u32 = 231;
pub const FACILITY_USER_MODE_SECURITY_CORE: u32 = 232;
pub const FACILITY_USERMODE_LICENSING: u32 = 234;
pub const FACILITY_SOS: u32 = 160;
pub const FACILITY_OCP_UPDATE_AGENT: u32 = 173;
pub const FACILITY_DEBUGGERS: u32 = 176;
pub const FACILITY_SPP: u32 = 256;
pub const FACILITY_RESTORE: u32 = 256;
pub const FACILITY_DMSERVER: u32 = 256;
pub const FACILITY_DEPLOYMENT_SERVICES_SERVER: u32 = 257;
pub const FACILITY_DEPLOYMENT_SERVICES_IMAGING: u32 = 258;
pub const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT: u32 = 259;
pub const FACILITY_DEPLOYMENT_SERVICES_UTIL: u32 = 260;
pub const FACILITY_DEPLOYMENT_SERVICES_BINLSVC: u32 = 261;
pub const FACILITY_DEPLOYMENT_SERVICES_PXE: u32 = 263;
pub const FACILITY_DEPLOYMENT_SERVICES_TFTP: u32 = 264;
pub const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT: u32 = 272;
pub const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING: u32 = 278;
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER: u32 = 289;
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT: u32 = 290;
pub const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER: u32 = 293;
pub const FACILITY_HSP_SERVICES: u32 = 296;
pub const FACILITY_HSP_SOFTWARE: u32 = 297;
pub const FACILITY_LINGUISTIC_SERVICES: u32 = 305;
pub const FACILITY_AUDIOSTREAMING: u32 = 1094;
pub const FACILITY_TTD: u32 = 1490;
pub const FACILITY_ACCELERATOR: u32 = 1536;
pub const FACILITY_WMAAECMA: u32 = 1996;
pub const FACILITY_DIRECTMUSIC: u32 = 2168;
pub const FACILITY_DIRECT3D10: u32 = 2169;
pub const FACILITY_DXGI: u32 = 2170;
pub const FACILITY_DXGI_DDI: u32 = 2171;
pub const FACILITY_DIRECT3D11: u32 = 2172;
pub const FACILITY_DIRECT3D11_DEBUG: u32 = 2173;
pub const FACILITY_DIRECT3D12: u32 = 2174;
pub const FACILITY_DIRECT3D12_DEBUG: u32 = 2175;
pub const FACILITY_DXCORE: u32 = 2176;
pub const FACILITY_PRESENTATION: u32 = 2177;
pub const FACILITY_LEAP: u32 = 2184;
pub const FACILITY_AUDCLNT: u32 = 2185;
pub const FACILITY_WINCODEC_DWRITE_DWM: u32 = 2200;
pub const FACILITY_WINML: u32 = 2192;
pub const FACILITY_DIRECT2D: u32 = 2201;
pub const FACILITY_DEFRAG: u32 = 2304;
pub const FACILITY_USERMODE_SDBUS: u32 = 2305;
pub const FACILITY_JSCRIPT: u32 = 2306;
pub const FACILITY_PIDGENX: u32 = 2561;
pub const FACILITY_EAS: u32 = 85;
pub const FACILITY_WEB: u32 = 885;
pub const FACILITY_WEB_SOCKET: u32 = 886;
pub const FACILITY_MOBILE: u32 = 1793;
pub const FACILITY_SQLITE: u32 = 1967;
pub const FACILITY_SERVICE_FABRIC: u32 = 1968;
pub const FACILITY_UTC: u32 = 1989;
pub const FACILITY_WEP: u32 = 2049;
pub const FACILITY_SYNCENGINE: u32 = 2050;
pub const FACILITY_XBOX: u32 = 2339;
pub const FACILITY_GAME: u32 = 2340;
pub const FACILITY_USERMODE_UNIONFS: u32 = 2341;
pub const FACILITY_USERMODE_PRM: u32 = 2342;
pub const FACILITY_USERMODE_WIN_ACCEL: u32 = 2343;
pub const FACILITY_PIX: u32 = 2748;
pub const ERROR_SUCCESS: u32 = 0;
pub const NO_ERROR: u32 = 0;
pub const ERROR_INVALID_FUNCTION: u32 = 1;
pub const ERROR_FILE_NOT_FOUND: u32 = 2;
pub const ERROR_PATH_NOT_FOUND: u32 = 3;
pub const ERROR_TOO_MANY_OPEN_FILES: u32 = 4;
pub const ERROR_ACCESS_DENIED: u32 = 5;
pub const ERROR_INVALID_HANDLE: u32 = 6;
pub const ERROR_ARENA_TRASHED: u32 = 7;
pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 8;
pub const ERROR_INVALID_BLOCK: u32 = 9;
pub const ERROR_BAD_ENVIRONMENT: u32 = 10;
pub const ERROR_BAD_FORMAT: u32 = 11;
pub const ERROR_INVALID_ACCESS: u32 = 12;
pub const ERROR_INVALID_DATA: u32 = 13;
pub const ERROR_OUTOFMEMORY: u32 = 14;
pub const ERROR_INVALID_DRIVE: u32 = 15;
pub const ERROR_CURRENT_DIRECTORY: u32 = 16;
pub const ERROR_NOT_SAME_DEVICE: u32 = 17;
pub const ERROR_NO_MORE_FILES: u32 = 18;
pub const ERROR_WRITE_PROTECT: u32 = 19;
pub const ERROR_BAD_UNIT: u32 = 20;
pub const ERROR_NOT_READY: u32 = 21;
pub const ERROR_BAD_COMMAND: u32 = 22;
pub const ERROR_CRC: u32 = 23;
pub const ERROR_BAD_LENGTH: u32 = 24;
pub const ERROR_SEEK: u32 = 25;
pub const ERROR_NOT_DOS_DISK: u32 = 26;
pub const ERROR_SECTOR_NOT_FOUND: u32 = 27;
pub const ERROR_OUT_OF_PAPER: u32 = 28;
pub const ERROR_WRITE_FAULT: u32 = 29;
pub const ERROR_READ_FAULT: u32 = 30;
pub const ERROR_GEN_FAILURE: u32 = 31;
pub const ERROR_SHARING_VIOLATION: u32 = 32;
pub const ERROR_LOCK_VIOLATION: u32 = 33;
pub const ERROR_WRONG_DISK: u32 = 34;
pub const ERROR_SHARING_BUFFER_EXCEEDED: u32 = 36;
pub const ERROR_HANDLE_EOF: u32 = 38;
pub const ERROR_HANDLE_DISK_FULL: u32 = 39;
pub const ERROR_NOT_SUPPORTED: u32 = 50;
pub const ERROR_REM_NOT_LIST: u32 = 51;
pub const ERROR_DUP_NAME: u32 = 52;
pub const ERROR_BAD_NETPATH: u32 = 53;
pub const ERROR_NETWORK_BUSY: u32 = 54;
pub const ERROR_DEV_NOT_EXIST: u32 = 55;
pub const ERROR_TOO_MANY_CMDS: u32 = 56;
pub const ERROR_ADAP_HDW_ERR: u32 = 57;
pub const ERROR_BAD_NET_RESP: u32 = 58;
pub const ERROR_UNEXP_NET_ERR: u32 = 59;
pub const ERROR_BAD_REM_ADAP: u32 = 60;
pub const ERROR_PRINTQ_FULL: u32 = 61;
pub const ERROR_NO_SPOOL_SPACE: u32 = 62;
pub const ERROR_PRINT_CANCELLED: u32 = 63;
pub const ERROR_NETNAME_DELETED: u32 = 64;
pub const ERROR_NETWORK_ACCESS_DENIED: u32 = 65;
pub const ERROR_BAD_DEV_TYPE: u32 = 66;
pub const ERROR_BAD_NET_NAME: u32 = 67;
pub const ERROR_TOO_MANY_NAMES: u32 = 68;
pub const ERROR_TOO_MANY_SESS: u32 = 69;
pub const ERROR_SHARING_PAUSED: u32 = 70;
pub const ERROR_REQ_NOT_ACCEP: u32 = 71;
pub const ERROR_REDIR_PAUSED: u32 = 72;
pub const ERROR_FILE_EXISTS: u32 = 80;
pub const ERROR_CANNOT_MAKE: u32 = 82;
pub const ERROR_FAIL_I24: u32 = 83;
pub const ERROR_OUT_OF_STRUCTURES: u32 = 84;
pub const ERROR_ALREADY_ASSIGNED: u32 = 85;
pub const ERROR_INVALID_PASSWORD: u32 = 86;
pub const ERROR_INVALID_PARAMETER: u32 = 87;
pub const ERROR_NET_WRITE_FAULT: u32 = 88;
pub const ERROR_NO_PROC_SLOTS: u32 = 89;
pub const ERROR_TOO_MANY_SEMAPHORES: u32 = 100;
pub const ERROR_EXCL_SEM_ALREADY_OWNED: u32 = 101;
pub const ERROR_SEM_IS_SET: u32 = 102;
pub const ERROR_TOO_MANY_SEM_REQUESTS: u32 = 103;
pub const ERROR_INVALID_AT_INTERRUPT_TIME: u32 = 104;
pub const ERROR_SEM_OWNER_DIED: u32 = 105;
pub const ERROR_SEM_USER_LIMIT: u32 = 106;
pub const ERROR_DISK_CHANGE: u32 = 107;
pub const ERROR_DRIVE_LOCKED: u32 = 108;
pub const ERROR_BROKEN_PIPE: u32 = 109;
pub const ERROR_OPEN_FAILED: u32 = 110;
pub const ERROR_BUFFER_OVERFLOW: u32 = 111;
pub const ERROR_DISK_FULL: u32 = 112;
pub const ERROR_NO_MORE_SEARCH_HANDLES: u32 = 113;
pub const ERROR_INVALID_TARGET_HANDLE: u32 = 114;
pub const ERROR_INVALID_CATEGORY: u32 = 117;
pub const ERROR_INVALID_VERIFY_SWITCH: u32 = 118;
pub const ERROR_BAD_DRIVER_LEVEL: u32 = 119;
pub const ERROR_CALL_NOT_IMPLEMENTED: u32 = 120;
pub const ERROR_SEM_TIMEOUT: u32 = 121;
pub const ERROR_INSUFFICIENT_BUFFER: u32 = 122;
pub const ERROR_INVALID_NAME: u32 = 123;
pub const ERROR_INVALID_LEVEL: u32 = 124;
pub const ERROR_NO_VOLUME_LABEL: u32 = 125;
pub const ERROR_MOD_NOT_FOUND: u32 = 126;
pub const ERROR_PROC_NOT_FOUND: u32 = 127;
pub const ERROR_WAIT_NO_CHILDREN: u32 = 128;
pub const ERROR_CHILD_NOT_COMPLETE: u32 = 129;
pub const ERROR_DIRECT_ACCESS_HANDLE: u32 = 130;
pub const ERROR_NEGATIVE_SEEK: u32 = 131;
pub const ERROR_SEEK_ON_DEVICE: u32 = 132;
pub const ERROR_IS_JOIN_TARGET: u32 = 133;
pub const ERROR_IS_JOINED: u32 = 134;
pub const ERROR_IS_SUBSTED: u32 = 135;
pub const ERROR_NOT_JOINED: u32 = 136;
pub const ERROR_NOT_SUBSTED: u32 = 137;
pub const ERROR_JOIN_TO_JOIN: u32 = 138;
pub const ERROR_SUBST_TO_SUBST: u32 = 139;
pub const ERROR_JOIN_TO_SUBST: u32 = 140;
pub const ERROR_SUBST_TO_JOIN: u32 = 141;
pub const ERROR_BUSY_DRIVE: u32 = 142;
pub const ERROR_SAME_DRIVE: u32 = 143;
pub const ERROR_DIR_NOT_ROOT: u32 = 144;
pub const ERROR_DIR_NOT_EMPTY: u32 = 145;
pub const ERROR_IS_SUBST_PATH: u32 = 146;
pub const ERROR_IS_JOIN_PATH: u32 = 147;
pub const ERROR_PATH_BUSY: u32 = 148;
pub const ERROR_IS_SUBST_TARGET: u32 = 149;
pub const ERROR_SYSTEM_TRACE: u32 = 150;
pub const ERROR_INVALID_EVENT_COUNT: u32 = 151;
pub const ERROR_TOO_MANY_MUXWAITERS: u32 = 152;
pub const ERROR_INVALID_LIST_FORMAT: u32 = 153;
pub const ERROR_LABEL_TOO_LONG: u32 = 154;
pub const ERROR_TOO_MANY_TCBS: u32 = 155;
pub const ERROR_SIGNAL_REFUSED: u32 = 156;
pub const ERROR_DISCARDED: u32 = 157;
pub const ERROR_NOT_LOCKED: u32 = 158;
pub const ERROR_BAD_THREADID_ADDR: u32 = 159;
pub const ERROR_BAD_ARGUMENTS: u32 = 160;
pub const ERROR_BAD_PATHNAME: u32 = 161;
pub const ERROR_SIGNAL_PENDING: u32 = 162;
pub const ERROR_MAX_THRDS_REACHED: u32 = 164;
pub const ERROR_LOCK_FAILED: u32 = 167;
pub const ERROR_BUSY: u32 = 170;
pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS: u32 = 171;
pub const ERROR_CANCEL_VIOLATION: u32 = 173;
pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED: u32 = 174;
pub const ERROR_INVALID_SEGMENT_NUMBER: u32 = 180;
pub const ERROR_INVALID_ORDINAL: u32 = 182;
pub const ERROR_ALREADY_EXISTS: u32 = 183;
pub const ERROR_INVALID_FLAG_NUMBER: u32 = 186;
pub const ERROR_SEM_NOT_FOUND: u32 = 187;
pub const ERROR_INVALID_STARTING_CODESEG: u32 = 188;
pub const ERROR_INVALID_STACKSEG: u32 = 189;
pub const ERROR_INVALID_MODULETYPE: u32 = 190;
pub const ERROR_INVALID_EXE_SIGNATURE: u32 = 191;
pub const ERROR_EXE_MARKED_INVALID: u32 = 192;
pub const ERROR_BAD_EXE_FORMAT: u32 = 193;
pub const ERROR_ITERATED_DATA_EXCEEDS_64k: u32 = 194;
pub const ERROR_INVALID_MINALLOCSIZE: u32 = 195;
pub const ERROR_DYNLINK_FROM_INVALID_RING: u32 = 196;
pub const ERROR_IOPL_NOT_ENABLED: u32 = 197;
pub const ERROR_INVALID_SEGDPL: u32 = 198;
pub const ERROR_AUTODATASEG_EXCEEDS_64k: u32 = 199;
pub const ERROR_RING2SEG_MUST_BE_MOVABLE: u32 = 200;
pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM: u32 = 201;
pub const ERROR_INFLOOP_IN_RELOC_CHAIN: u32 = 202;
pub const ERROR_ENVVAR_NOT_FOUND: u32 = 203;
pub const ERROR_NO_SIGNAL_SENT: u32 = 205;
pub const ERROR_FILENAME_EXCED_RANGE: u32 = 206;
pub const ERROR_RING2_STACK_IN_USE: u32 = 207;
pub const ERROR_META_EXPANSION_TOO_LONG: u32 = 208;
pub const ERROR_INVALID_SIGNAL_NUMBER: u32 = 209;
pub const ERROR_THREAD_1_INACTIVE: u32 = 210;
pub const ERROR_LOCKED: u32 = 212;
pub const ERROR_TOO_MANY_MODULES: u32 = 214;
pub const ERROR_NESTING_NOT_ALLOWED: u32 = 215;
pub const ERROR_EXE_MACHINE_TYPE_MISMATCH: u32 = 216;
pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY: u32 = 217;
pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY: u32 = 218;
pub const ERROR_FILE_CHECKED_OUT: u32 = 220;
pub const ERROR_CHECKOUT_REQUIRED: u32 = 221;
pub const ERROR_BAD_FILE_TYPE: u32 = 222;
pub const ERROR_FILE_TOO_LARGE: u32 = 223;
pub const ERROR_FORMS_AUTH_REQUIRED: u32 = 224;
pub const ERROR_VIRUS_INFECTED: u32 = 225;
pub const ERROR_VIRUS_DELETED: u32 = 226;
pub const ERROR_PIPE_LOCAL: u32 = 229;
pub const ERROR_BAD_PIPE: u32 = 230;
pub const ERROR_PIPE_BUSY: u32 = 231;
pub const ERROR_NO_DATA: u32 = 232;
pub const ERROR_PIPE_NOT_CONNECTED: u32 = 233;
pub const ERROR_MORE_DATA: u32 = 234;
pub const ERROR_NO_WORK_DONE: u32 = 235;
pub const ERROR_VC_DISCONNECTED: u32 = 240;
pub const ERROR_INVALID_EA_NAME: u32 = 254;
pub const ERROR_EA_LIST_INCONSISTENT: u32 = 255;
pub const WAIT_TIMEOUT: u32 = 258;
pub const ERROR_NO_MORE_ITEMS: u32 = 259;
pub const ERROR_CANNOT_COPY: u32 = 266;
pub const ERROR_DIRECTORY: u32 = 267;
pub const ERROR_EAS_DIDNT_FIT: u32 = 275;
pub const ERROR_EA_FILE_CORRUPT: u32 = 276;
pub const ERROR_EA_TABLE_FULL: u32 = 277;
pub const ERROR_INVALID_EA_HANDLE: u32 = 278;
pub const ERROR_EAS_NOT_SUPPORTED: u32 = 282;
pub const ERROR_NOT_OWNER: u32 = 288;
pub const ERROR_TOO_MANY_POSTS: u32 = 298;
pub const ERROR_PARTIAL_COPY: u32 = 299;
pub const ERROR_OPLOCK_NOT_GRANTED: u32 = 300;
pub const ERROR_INVALID_OPLOCK_PROTOCOL: u32 = 301;
pub const ERROR_DISK_TOO_FRAGMENTED: u32 = 302;
pub const ERROR_DELETE_PENDING: u32 = 303;
pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING: u32 = 304;
pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME: u32 = 305;
pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT: u32 = 306;
pub const ERROR_INVALID_LOCK_RANGE: u32 = 307;
pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT: u32 = 308;
pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED: u32 = 309;
pub const ERROR_INVALID_EXCEPTION_HANDLER: u32 = 310;
pub const ERROR_DUPLICATE_PRIVILEGES: u32 = 311;
pub const ERROR_NO_RANGES_PROCESSED: u32 = 312;
pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE: u32 = 313;
pub const ERROR_DISK_RESOURCES_EXHAUSTED: u32 = 314;
pub const ERROR_INVALID_TOKEN: u32 = 315;
pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED: u32 = 316;
pub const ERROR_MR_MID_NOT_FOUND: u32 = 317;
pub const ERROR_SCOPE_NOT_FOUND: u32 = 318;
pub const ERROR_UNDEFINED_SCOPE: u32 = 319;
pub const ERROR_INVALID_CAP: u32 = 320;
pub const ERROR_DEVICE_UNREACHABLE: u32 = 321;
pub const ERROR_DEVICE_NO_RESOURCES: u32 = 322;
pub const ERROR_DATA_CHECKSUM_ERROR: u32 = 323;
pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION: u32 = 324;
pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED: u32 = 326;
pub const ERROR_OFFSET_ALIGNMENT_VIOLATION: u32 = 327;
pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST: u32 = 328;
pub const ERROR_OPERATION_IN_PROGRESS: u32 = 329;
pub const ERROR_BAD_DEVICE_PATH: u32 = 330;
pub const ERROR_TOO_MANY_DESCRIPTORS: u32 = 331;
pub const ERROR_SCRUB_DATA_DISABLED: u32 = 332;
pub const ERROR_NOT_REDUNDANT_STORAGE: u32 = 333;
pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED: u32 = 334;
pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED: u32 = 335;
pub const ERROR_DIRECTORY_NOT_SUPPORTED: u32 = 336;
pub const ERROR_NOT_READ_FROM_COPY: u32 = 337;
pub const ERROR_FT_WRITE_FAILURE: u32 = 338;
pub const ERROR_FT_DI_SCAN_REQUIRED: u32 = 339;
pub const ERROR_INVALID_KERNEL_INFO_VERSION: u32 = 340;
pub const ERROR_INVALID_PEP_INFO_VERSION: u32 = 341;
pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED: u32 = 342;
pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN: u32 = 343;
pub const ERROR_COMPRESSION_NOT_BENEFICIAL: u32 = 344;
pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH: u32 = 345;
pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS: u32 = 346;
pub const ERROR_BLOCK_TOO_MANY_REFERENCES: u32 = 347;
pub const ERROR_MARKED_TO_DISALLOW_WRITES: u32 = 348;
pub const ERROR_ENCLAVE_FAILURE: u32 = 349;
pub const ERROR_FAIL_NOACTION_REBOOT: u32 = 350;
pub const ERROR_FAIL_SHUTDOWN: u32 = 351;
pub const ERROR_FAIL_RESTART: u32 = 352;
pub const ERROR_MAX_SESSIONS_REACHED: u32 = 353;
pub const ERROR_NETWORK_ACCESS_DENIED_EDP: u32 = 354;
pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL: u32 = 355;
pub const ERROR_EDP_POLICY_DENIES_OPERATION: u32 = 356;
pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED: u32 = 357;
pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT: u32 = 358;
pub const ERROR_DEVICE_IN_MAINTENANCE: u32 = 359;
pub const ERROR_NOT_SUPPORTED_ON_DAX: u32 = 360;
pub const ERROR_DAX_MAPPING_EXISTS: u32 = 361;
pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING: u32 = 362;
pub const ERROR_CLOUD_FILE_METADATA_CORRUPT: u32 = 363;
pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE: u32 = 364;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE: u32 = 365;
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH: u32 = 366;
pub const ERROR_CHILD_PROCESS_BLOCKED: u32 = 367;
pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE: u32 = 368;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE: u32 = 369;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT: u32 = 370;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY: u32 = 371;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN: u32 = 372;
pub const ERROR_GDI_HANDLE_LEAK: u32 = 373;
pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS: u32 = 374;
pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED: u32 = 375;
pub const ERROR_NOT_A_CLOUD_FILE: u32 = 376;
pub const ERROR_CLOUD_FILE_NOT_IN_SYNC: u32 = 377;
pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED: u32 = 378;
pub const ERROR_CLOUD_FILE_NOT_SUPPORTED: u32 = 379;
pub const ERROR_CLOUD_FILE_INVALID_REQUEST: u32 = 380;
pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME: u32 = 381;
pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY: u32 = 382;
pub const ERROR_CLOUD_FILE_VALIDATION_FAILED: u32 = 383;
pub const ERROR_SMB1_NOT_AVAILABLE: u32 = 384;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION: u32 = 385;
pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED: u32 = 386;
pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES: u32 = 387;
pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE: u32 = 388;
pub const ERROR_CLOUD_FILE_UNSUCCESSFUL: u32 = 389;
pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT: u32 = 390;
pub const ERROR_CLOUD_FILE_IN_USE: u32 = 391;
pub const ERROR_CLOUD_FILE_PINNED: u32 = 392;
pub const ERROR_CLOUD_FILE_REQUEST_ABORTED: u32 = 393;
pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT: u32 = 394;
pub const ERROR_CLOUD_FILE_ACCESS_DENIED: u32 = 395;
pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS: u32 = 396;
pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT: u32 = 397;
pub const ERROR_CLOUD_FILE_REQUEST_CANCELED: u32 = 398;
pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED: u32 = 399;
pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND: u32 = 400;
pub const ERROR_THREAD_MODE_NOT_BACKGROUND: u32 = 401;
pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND: u32 = 402;
pub const ERROR_PROCESS_MODE_NOT_BACKGROUND: u32 = 403;
pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED: u32 = 404;
pub const ERROR_NOT_A_CLOUD_SYNC_ROOT: u32 = 405;
pub const ERROR_FILE_PROTECTED_UNDER_DPL: u32 = 406;
pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED: u32 = 407;
pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND: u32 = 408;
pub const ERROR_APPX_FILE_NOT_ENCRYPTED: u32 = 409;
pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED: u32 = 410;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET: u32 = 411;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE: u32 = 412;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER: u32 = 413;
pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT: u32 = 414;
pub const ERROR_FT_READ_FAILURE: u32 = 415;
pub const ERROR_STORAGE_RESERVE_ID_INVALID: u32 = 416;
pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST: u32 = 417;
pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS: u32 = 418;
pub const ERROR_STORAGE_RESERVE_NOT_EMPTY: u32 = 419;
pub const ERROR_NOT_A_DAX_VOLUME: u32 = 420;
pub const ERROR_NOT_DAX_MAPPABLE: u32 = 421;
pub const ERROR_TIME_SENSITIVE_THREAD: u32 = 422;
pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER: u32 = 423;
pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR: u32 = 424;
pub const ERROR_FILE_NOT_SUPPORTED: u32 = 425;
pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT: u32 = 426;
pub const ERROR_NO_TASK_QUEUE: u32 = 427;
pub const ERROR_SRC_SRV_DLL_LOAD_FAILED: u32 = 428;
pub const ERROR_NOT_SUPPORTED_WITH_BTT: u32 = 429;
pub const ERROR_ENCRYPTION_DISABLED: u32 = 430;
pub const ERROR_ENCRYPTING_METADATA_DISALLOWED: u32 = 431;
pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG: u32 = 432;
pub const ERROR_NO_SUCH_DEVICE: u32 = 433;
pub const ERROR_CLOUD_FILE_DEHYDRATION_DISALLOWED: u32 = 434;
pub const ERROR_FILE_SNAP_IN_PROGRESS: u32 = 435;
pub const ERROR_FILE_SNAP_USER_SECTION_NOT_SUPPORTED: u32 = 436;
pub const ERROR_FILE_SNAP_MODIFY_NOT_SUPPORTED: u32 = 437;
pub const ERROR_FILE_SNAP_IO_NOT_COORDINATED: u32 = 438;
pub const ERROR_FILE_SNAP_UNEXPECTED_ERROR: u32 = 439;
pub const ERROR_FILE_SNAP_INVALID_PARAMETER: u32 = 440;
pub const ERROR_UNSATISFIED_DEPENDENCIES: u32 = 441;
pub const ERROR_CASE_SENSITIVE_PATH: u32 = 442;
pub const ERROR_UNEXPECTED_NTCACHEMANAGER_ERROR: u32 = 443;
pub const ERROR_LINUX_SUBSYSTEM_UPDATE_REQUIRED: u32 = 444;
pub const ERROR_DLP_POLICY_WARNS_AGAINST_OPERATION: u32 = 445;
pub const ERROR_DLP_POLICY_DENIES_OPERATION: u32 = 446;
pub const ERROR_SECURITY_DENIES_OPERATION: u32 = 447;
pub const ERROR_UNTRUSTED_MOUNT_POINT: u32 = 448;
pub const ERROR_DLP_POLICY_SILENTLY_FAIL: u32 = 449;
pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED: u32 = 450;
pub const ERROR_CAPAUTHZ_CHANGE_TYPE: u32 = 451;
pub const ERROR_CAPAUTHZ_NOT_PROVISIONED: u32 = 452;
pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED: u32 = 453;
pub const ERROR_CAPAUTHZ_NO_POLICY: u32 = 454;
pub const ERROR_CAPAUTHZ_DB_CORRUPTED: u32 = 455;
pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG: u32 = 456;
pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY: u32 = 457;
pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR: u32 = 458;
pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED: u32 = 459;
pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH: u32 = 460;
pub const ERROR_CIMFS_IMAGE_CORRUPT: u32 = 470;
pub const ERROR_CIMFS_IMAGE_VERSION_NOT_SUPPORTED: u32 = 471;
pub const ERROR_STORAGE_STACK_ACCESS_DENIED: u32 = 472;
pub const ERROR_INSUFFICIENT_VIRTUAL_ADDR_RESOURCES: u32 = 473;
pub const ERROR_INDEX_OUT_OF_BOUNDS: u32 = 474;
pub const ERROR_CLOUD_FILE_US_MESSAGE_TIMEOUT: u32 = 475;
pub const ERROR_NOT_A_DEV_VOLUME: u32 = 476;
pub const ERROR_FS_GUID_MISMATCH: u32 = 477;
pub const ERROR_CANT_ATTACH_TO_DEV_VOLUME: u32 = 478;
pub const ERROR_MEMORY_DECOMPRESSION_FAILURE: u32 = 479;
pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT: u32 = 480;
pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT: u32 = 481;
pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT: u32 = 482;
pub const ERROR_DEVICE_HARDWARE_ERROR: u32 = 483;
pub const ERROR_INVALID_ADDRESS: u32 = 487;
pub const ERROR_HAS_SYSTEM_CRITICAL_FILES: u32 = 488;
pub const ERROR_ENCRYPTED_FILE_NOT_SUPPORTED: u32 = 489;
pub const ERROR_SPARSE_FILE_NOT_SUPPORTED: u32 = 490;
pub const ERROR_PAGEFILE_NOT_SUPPORTED: u32 = 491;
pub const ERROR_VOLUME_NOT_SUPPORTED: u32 = 492;
pub const ERROR_NOT_SUPPORTED_WITH_BYPASSIO: u32 = 493;
pub const ERROR_NO_BYPASSIO_DRIVER_SUPPORT: u32 = 494;
pub const ERROR_NOT_SUPPORTED_WITH_ENCRYPTION: u32 = 495;
pub const ERROR_NOT_SUPPORTED_WITH_COMPRESSION: u32 = 496;
pub const ERROR_NOT_SUPPORTED_WITH_REPLICATION: u32 = 497;
pub const ERROR_NOT_SUPPORTED_WITH_DEDUPLICATION: u32 = 498;
pub const ERROR_NOT_SUPPORTED_WITH_AUDITING: u32 = 499;
pub const ERROR_USER_PROFILE_LOAD: u32 = 500;
pub const ERROR_SESSION_KEY_TOO_SHORT: u32 = 501;
pub const ERROR_ACCESS_DENIED_APPDATA: u32 = 502;
pub const ERROR_NOT_SUPPORTED_WITH_MONITORING: u32 = 503;
pub const ERROR_NOT_SUPPORTED_WITH_SNAPSHOT: u32 = 504;
pub const ERROR_NOT_SUPPORTED_WITH_VIRTUALIZATION: u32 = 505;
pub const ERROR_BYPASSIO_FLT_NOT_SUPPORTED: u32 = 506;
pub const ERROR_DEVICE_RESET_REQUIRED: u32 = 507;
pub const ERROR_VOLUME_WRITE_ACCESS_DENIED: u32 = 508;
pub const ERROR_NOT_SUPPORTED_WITH_CACHED_HANDLE: u32 = 509;
pub const ERROR_FS_METADATA_INCONSISTENT: u32 = 510;
pub const ERROR_BLOCK_WEAK_REFERENCE_INVALID: u32 = 511;
pub const ERROR_BLOCK_SOURCE_WEAK_REFERENCE_INVALID: u32 = 512;
pub const ERROR_BLOCK_TARGET_WEAK_REFERENCE_INVALID: u32 = 513;
pub const ERROR_BLOCK_SHARED: u32 = 514;
pub const ERROR_VOLUME_UPGRADE_NOT_NEEDED: u32 = 515;
pub const ERROR_VOLUME_UPGRADE_PENDING: u32 = 516;
pub const ERROR_VOLUME_UPGRADE_DISABLED: u32 = 517;
pub const ERROR_VOLUME_UPGRADE_DISABLED_TILL_OS_DOWNGRADE_EXPIRED: u32 = 518;
pub const ERROR_INVALID_CONFIG_VALUE: u32 = 519;
pub const ERROR_MEMORY_DECOMPRESSION_HW_ERROR: u32 = 520;
pub const ERROR_VOLUME_ROLLBACK_DETECTED: u32 = 521;
pub const ERROR_ARITHMETIC_OVERFLOW: u32 = 534;
pub const ERROR_PIPE_CONNECTED: u32 = 535;
pub const ERROR_PIPE_LISTENING: u32 = 536;
pub const ERROR_VERIFIER_STOP: u32 = 537;
pub const ERROR_ABIOS_ERROR: u32 = 538;
pub const ERROR_WX86_WARNING: u32 = 539;
pub const ERROR_WX86_ERROR: u32 = 540;
pub const ERROR_TIMER_NOT_CANCELED: u32 = 541;
pub const ERROR_UNWIND: u32 = 542;
pub const ERROR_BAD_STACK: u32 = 543;
pub const ERROR_INVALID_UNWIND_TARGET: u32 = 544;
pub const ERROR_INVALID_PORT_ATTRIBUTES: u32 = 545;
pub const ERROR_PORT_MESSAGE_TOO_LONG: u32 = 546;
pub const ERROR_INVALID_QUOTA_LOWER: u32 = 547;
pub const ERROR_DEVICE_ALREADY_ATTACHED: u32 = 548;
pub const ERROR_INSTRUCTION_MISALIGNMENT: u32 = 549;
pub const ERROR_PROFILING_NOT_STARTED: u32 = 550;
pub const ERROR_PROFILING_NOT_STOPPED: u32 = 551;
pub const ERROR_COULD_NOT_INTERPRET: u32 = 552;
pub const ERROR_PROFILING_AT_LIMIT: u32 = 553;
pub const ERROR_CANT_WAIT: u32 = 554;
pub const ERROR_CANT_TERMINATE_SELF: u32 = 555;
pub const ERROR_UNEXPECTED_MM_CREATE_ERR: u32 = 556;
pub const ERROR_UNEXPECTED_MM_MAP_ERROR: u32 = 557;
pub const ERROR_UNEXPECTED_MM_EXTEND_ERR: u32 = 558;
pub const ERROR_BAD_FUNCTION_TABLE: u32 = 559;
pub const ERROR_NO_GUID_TRANSLATION: u32 = 560;
pub const ERROR_INVALID_LDT_SIZE: u32 = 561;
pub const ERROR_INVALID_LDT_OFFSET: u32 = 563;
pub const ERROR_INVALID_LDT_DESCRIPTOR: u32 = 564;
pub const ERROR_TOO_MANY_THREADS: u32 = 565;
pub const ERROR_THREAD_NOT_IN_PROCESS: u32 = 566;
pub const ERROR_PAGEFILE_QUOTA_EXCEEDED: u32 = 567;
pub const ERROR_LOGON_SERVER_CONFLICT: u32 = 568;
pub const ERROR_SYNCHRONIZATION_REQUIRED: u32 = 569;
pub const ERROR_NET_OPEN_FAILED: u32 = 570;
pub const ERROR_IO_PRIVILEGE_FAILED: u32 = 571;
pub const ERROR_CONTROL_C_EXIT: u32 = 572;
pub const ERROR_MISSING_SYSTEMFILE: u32 = 573;
pub const ERROR_UNHANDLED_EXCEPTION: u32 = 574;
pub const ERROR_APP_INIT_FAILURE: u32 = 575;
pub const ERROR_PAGEFILE_CREATE_FAILED: u32 = 576;
pub const ERROR_INVALID_IMAGE_HASH: u32 = 577;
pub const ERROR_NO_PAGEFILE: u32 = 578;
pub const ERROR_ILLEGAL_FLOAT_CONTEXT: u32 = 579;
pub const ERROR_NO_EVENT_PAIR: u32 = 580;
pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR: u32 = 581;
pub const ERROR_ILLEGAL_CHARACTER: u32 = 582;
pub const ERROR_UNDEFINED_CHARACTER: u32 = 583;
pub const ERROR_FLOPPY_VOLUME: u32 = 584;
pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT: u32 = 585;
pub const ERROR_BACKUP_CONTROLLER: u32 = 586;
pub const ERROR_MUTANT_LIMIT_EXCEEDED: u32 = 587;
pub const ERROR_FS_DRIVER_REQUIRED: u32 = 588;
pub const ERROR_CANNOT_LOAD_REGISTRY_FILE: u32 = 589;
pub const ERROR_DEBUG_ATTACH_FAILED: u32 = 590;
pub const ERROR_SYSTEM_PROCESS_TERMINATED: u32 = 591;
pub const ERROR_DATA_NOT_ACCEPTED: u32 = 592;
pub const ERROR_VDM_HARD_ERROR: u32 = 593;
pub const ERROR_DRIVER_CANCEL_TIMEOUT: u32 = 594;
pub const ERROR_REPLY_MESSAGE_MISMATCH: u32 = 595;
pub const ERROR_LOST_WRITEBEHIND_DATA: u32 = 596;
pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID: u32 = 597;
pub const ERROR_NOT_TINY_STREAM: u32 = 598;
pub const ERROR_STACK_OVERFLOW_READ: u32 = 599;
pub const ERROR_CONVERT_TO_LARGE: u32 = 600;
pub const ERROR_FOUND_OUT_OF_SCOPE: u32 = 601;
pub const ERROR_ALLOCATE_BUCKET: u32 = 602;
pub const ERROR_MARSHALL_OVERFLOW: u32 = 603;
pub const ERROR_INVALID_VARIANT: u32 = 604;
pub const ERROR_BAD_COMPRESSION_BUFFER: u32 = 605;
pub const ERROR_AUDIT_FAILED: u32 = 606;
pub const ERROR_TIMER_RESOLUTION_NOT_SET: u32 = 607;
pub const ERROR_INSUFFICIENT_LOGON_INFO: u32 = 608;
pub const ERROR_BAD_DLL_ENTRYPOINT: u32 = 609;
pub const ERROR_BAD_SERVICE_ENTRYPOINT: u32 = 610;
pub const ERROR_IP_ADDRESS_CONFLICT1: u32 = 611;
pub const ERROR_IP_ADDRESS_CONFLICT2: u32 = 612;
pub const ERROR_REGISTRY_QUOTA_LIMIT: u32 = 613;
pub const ERROR_NO_CALLBACK_ACTIVE: u32 = 614;
pub const ERROR_PWD_TOO_SHORT: u32 = 615;
pub const ERROR_PWD_TOO_RECENT: u32 = 616;
pub const ERROR_PWD_HISTORY_CONFLICT: u32 = 617;
pub const ERROR_UNSUPPORTED_COMPRESSION: u32 = 618;
pub const ERROR_INVALID_HW_PROFILE: u32 = 619;
pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH: u32 = 620;
pub const ERROR_QUOTA_LIST_INCONSISTENT: u32 = 621;
pub const ERROR_EVALUATION_EXPIRATION: u32 = 622;
pub const ERROR_ILLEGAL_DLL_RELOCATION: u32 = 623;
pub const ERROR_DLL_INIT_FAILED_LOGOFF: u32 = 624;
pub const ERROR_VALIDATE_CONTINUE: u32 = 625;
pub const ERROR_NO_MORE_MATCHES: u32 = 626;
pub const ERROR_RANGE_LIST_CONFLICT: u32 = 627;
pub const ERROR_SERVER_SID_MISMATCH: u32 = 628;
pub const ERROR_CANT_ENABLE_DENY_ONLY: u32 = 629;
pub const ERROR_FLOAT_MULTIPLE_FAULTS: u32 = 630;
pub const ERROR_FLOAT_MULTIPLE_TRAPS: u32 = 631;
pub const ERROR_NOINTERFACE: u32 = 632;
pub const ERROR_DRIVER_FAILED_SLEEP: u32 = 633;
pub const ERROR_CORRUPT_SYSTEM_FILE: u32 = 634;
pub const ERROR_COMMITMENT_MINIMUM: u32 = 635;
pub const ERROR_PNP_RESTART_ENUMERATION: u32 = 636;
pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE: u32 = 637;
pub const ERROR_PNP_REBOOT_REQUIRED: u32 = 638;
pub const ERROR_INSUFFICIENT_POWER: u32 = 639;
pub const ERROR_MULTIPLE_FAULT_VIOLATION: u32 = 640;
pub const ERROR_SYSTEM_SHUTDOWN: u32 = 641;
pub const ERROR_PORT_NOT_SET: u32 = 642;
pub const ERROR_DS_VERSION_CHECK_FAILURE: u32 = 643;
pub const ERROR_RANGE_NOT_FOUND: u32 = 644;
pub const ERROR_NOT_SAFE_MODE_DRIVER: u32 = 646;
pub const ERROR_FAILED_DRIVER_ENTRY: u32 = 647;
pub const ERROR_DEVICE_ENUMERATION_ERROR: u32 = 648;
pub const ERROR_MOUNT_POINT_NOT_RESOLVED: u32 = 649;
pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER: u32 = 650;
pub const ERROR_MCA_OCCURED: u32 = 651;
pub const ERROR_DRIVER_DATABASE_ERROR: u32 = 652;
pub const ERROR_SYSTEM_HIVE_TOO_LARGE: u32 = 653;
pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD: u32 = 654;
pub const ERROR_VOLSNAP_PREPARE_HIBERNATE: u32 = 655;
pub const ERROR_HIBERNATION_FAILURE: u32 = 656;
pub const ERROR_PWD_TOO_LONG: u32 = 657;
pub const ERROR_FILE_SYSTEM_LIMITATION: u32 = 665;
pub const ERROR_ASSERTION_FAILURE: u32 = 668;
pub const ERROR_ACPI_ERROR: u32 = 669;
pub const ERROR_WOW_ASSERTION: u32 = 670;
pub const ERROR_PNP_BAD_MPS_TABLE: u32 = 671;
pub const ERROR_PNP_TRANSLATION_FAILED: u32 = 672;
pub const ERROR_PNP_IRQ_TRANSLATION_FAILED: u32 = 673;
pub const ERROR_PNP_INVALID_ID: u32 = 674;
pub const ERROR_WAKE_SYSTEM_DEBUGGER: u32 = 675;
pub const ERROR_HANDLES_CLOSED: u32 = 676;
pub const ERROR_EXTRANEOUS_INFORMATION: u32 = 677;
pub const ERROR_RXACT_COMMIT_NECESSARY: u32 = 678;
pub const ERROR_MEDIA_CHECK: u32 = 679;
pub const ERROR_GUID_SUBSTITUTION_MADE: u32 = 680;
pub const ERROR_STOPPED_ON_SYMLINK: u32 = 681;
pub const ERROR_LONGJUMP: u32 = 682;
pub const ERROR_PLUGPLAY_QUERY_VETOED: u32 = 683;
pub const ERROR_UNWIND_CONSOLIDATE: u32 = 684;
pub const ERROR_REGISTRY_HIVE_RECOVERED: u32 = 685;
pub const ERROR_DLL_MIGHT_BE_INSECURE: u32 = 686;
pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE: u32 = 687;
pub const ERROR_DBG_EXCEPTION_NOT_HANDLED: u32 = 688;
pub const ERROR_DBG_REPLY_LATER: u32 = 689;
pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE: u32 = 690;
pub const ERROR_DBG_TERMINATE_THREAD: u32 = 691;
pub const ERROR_DBG_TERMINATE_PROCESS: u32 = 692;
pub const ERROR_DBG_CONTROL_C: u32 = 693;
pub const ERROR_DBG_PRINTEXCEPTION_C: u32 = 694;
pub const ERROR_DBG_RIPEXCEPTION: u32 = 695;
pub const ERROR_DBG_CONTROL_BREAK: u32 = 696;
pub const ERROR_DBG_COMMAND_EXCEPTION: u32 = 697;
pub const ERROR_OBJECT_NAME_EXISTS: u32 = 698;
pub const ERROR_THREAD_WAS_SUSPENDED: u32 = 699;
pub const ERROR_IMAGE_NOT_AT_BASE: u32 = 700;
pub const ERROR_RXACT_STATE_CREATED: u32 = 701;
pub const ERROR_SEGMENT_NOTIFICATION: u32 = 702;
pub const ERROR_BAD_CURRENT_DIRECTORY: u32 = 703;
pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP: u32 = 704;
pub const ERROR_FT_WRITE_RECOVERY: u32 = 705;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH: u32 = 706;
pub const ERROR_RECEIVE_PARTIAL: u32 = 707;
pub const ERROR_RECEIVE_EXPEDITED: u32 = 708;
pub const ERROR_RECEIVE_PARTIAL_EXPEDITED: u32 = 709;
pub const ERROR_EVENT_DONE: u32 = 710;
pub const ERROR_EVENT_PENDING: u32 = 711;
pub const ERROR_CHECKING_FILE_SYSTEM: u32 = 712;
pub const ERROR_FATAL_APP_EXIT: u32 = 713;
pub const ERROR_PREDEFINED_HANDLE: u32 = 714;
pub const ERROR_WAS_UNLOCKED: u32 = 715;
pub const ERROR_SERVICE_NOTIFICATION: u32 = 716;
pub const ERROR_WAS_LOCKED: u32 = 717;
pub const ERROR_LOG_HARD_ERROR: u32 = 718;
pub const ERROR_ALREADY_WIN32: u32 = 719;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE: u32 = 720;
pub const ERROR_NO_YIELD_PERFORMED: u32 = 721;
pub const ERROR_TIMER_RESUME_IGNORED: u32 = 722;
pub const ERROR_ARBITRATION_UNHANDLED: u32 = 723;
pub const ERROR_CARDBUS_NOT_SUPPORTED: u32 = 724;
pub const ERROR_MP_PROCESSOR_MISMATCH: u32 = 725;
pub const ERROR_HIBERNATED: u32 = 726;
pub const ERROR_RESUME_HIBERNATION: u32 = 727;
pub const ERROR_FIRMWARE_UPDATED: u32 = 728;
pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES: u32 = 729;
pub const ERROR_WAKE_SYSTEM: u32 = 730;
pub const ERROR_WAIT_1: u32 = 731;
pub const ERROR_WAIT_2: u32 = 732;
pub const ERROR_WAIT_3: u32 = 733;
pub const ERROR_WAIT_63: u32 = 734;
pub const ERROR_ABANDONED_WAIT_0: u32 = 735;
pub const ERROR_ABANDONED_WAIT_63: u32 = 736;
pub const ERROR_USER_APC: u32 = 737;
pub const ERROR_KERNEL_APC: u32 = 738;
pub const ERROR_ALERTED: u32 = 739;
pub const ERROR_ELEVATION_REQUIRED: u32 = 740;
pub const ERROR_REPARSE: u32 = 741;
pub const ERROR_OPLOCK_BREAK_IN_PROGRESS: u32 = 742;
pub const ERROR_VOLUME_MOUNTED: u32 = 743;
pub const ERROR_RXACT_COMMITTED: u32 = 744;
pub const ERROR_NOTIFY_CLEANUP: u32 = 745;
pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED: u32 = 746;
pub const ERROR_PAGE_FAULT_TRANSITION: u32 = 747;
pub const ERROR_PAGE_FAULT_DEMAND_ZERO: u32 = 748;
pub const ERROR_PAGE_FAULT_COPY_ON_WRITE: u32 = 749;
pub const ERROR_PAGE_FAULT_GUARD_PAGE: u32 = 750;
pub const ERROR_PAGE_FAULT_PAGING_FILE: u32 = 751;
pub const ERROR_CACHE_PAGE_LOCKED: u32 = 752;
pub const ERROR_CRASH_DUMP: u32 = 753;
pub const ERROR_BUFFER_ALL_ZEROS: u32 = 754;
pub const ERROR_REPARSE_OBJECT: u32 = 755;
pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED: u32 = 756;
pub const ERROR_TRANSLATION_COMPLETE: u32 = 757;
pub const ERROR_NOTHING_TO_TERMINATE: u32 = 758;
pub const ERROR_PROCESS_NOT_IN_JOB: u32 = 759;
pub const ERROR_PROCESS_IN_JOB: u32 = 760;
pub const ERROR_VOLSNAP_HIBERNATE_READY: u32 = 761;
pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY: u32 = 762;
pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED: u32 = 763;
pub const ERROR_INTERRUPT_STILL_CONNECTED: u32 = 764;
pub const ERROR_WAIT_FOR_OPLOCK: u32 = 765;
pub const ERROR_DBG_EXCEPTION_HANDLED: u32 = 766;
pub const ERROR_DBG_CONTINUE: u32 = 767;
pub const ERROR_CALLBACK_POP_STACK: u32 = 768;
pub const ERROR_COMPRESSION_DISABLED: u32 = 769;
pub const ERROR_CANTFETCHBACKWARDS: u32 = 770;
pub const ERROR_CANTSCROLLBACKWARDS: u32 = 771;
pub const ERROR_ROWSNOTRELEASED: u32 = 772;
pub const ERROR_BAD_ACCESSOR_FLAGS: u32 = 773;
pub const ERROR_ERRORS_ENCOUNTERED: u32 = 774;
pub const ERROR_NOT_CAPABLE: u32 = 775;
pub const ERROR_REQUEST_OUT_OF_SEQUENCE: u32 = 776;
pub const ERROR_VERSION_PARSE_ERROR: u32 = 777;
pub const ERROR_BADSTARTPOSITION: u32 = 778;
pub const ERROR_MEMORY_HARDWARE: u32 = 779;
pub const ERROR_DISK_REPAIR_DISABLED: u32 = 780;
pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE: u32 = 781;
pub const ERROR_SYSTEM_POWERSTATE_TRANSITION: u32 = 782;
pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION: u32 = 783;
pub const ERROR_MCA_EXCEPTION: u32 = 784;
pub const ERROR_ACCESS_AUDIT_BY_POLICY: u32 = 785;
pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY: u32 = 786;
pub const ERROR_ABANDON_HIBERFILE: u32 = 787;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED: u32 = 788;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR: u32 = 789;
pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR: u32 = 790;
pub const ERROR_BAD_MCFG_TABLE: u32 = 791;
pub const ERROR_DISK_REPAIR_REDIRECTED: u32 = 792;
pub const ERROR_DISK_REPAIR_UNSUCCESSFUL: u32 = 793;
pub const ERROR_CORRUPT_LOG_OVERFULL: u32 = 794;
pub const ERROR_CORRUPT_LOG_CORRUPTED: u32 = 795;
pub const ERROR_CORRUPT_LOG_UNAVAILABLE: u32 = 796;
pub const ERROR_CORRUPT_LOG_DELETED_FULL: u32 = 797;
pub const ERROR_CORRUPT_LOG_CLEARED: u32 = 798;
pub const ERROR_ORPHAN_NAME_EXHAUSTED: u32 = 799;
pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE: u32 = 800;
pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK: u32 = 801;
pub const ERROR_CANNOT_BREAK_OPLOCK: u32 = 802;
pub const ERROR_OPLOCK_HANDLE_CLOSED: u32 = 803;
pub const ERROR_NO_ACE_CONDITION: u32 = 804;
pub const ERROR_INVALID_ACE_CONDITION: u32 = 805;
pub const ERROR_FILE_HANDLE_REVOKED: u32 = 806;
pub const ERROR_IMAGE_AT_DIFFERENT_BASE: u32 = 807;
pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE: u32 = 808;
pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS: u32 = 809;
pub const ERROR_QUOTA_ACTIVITY: u32 = 810;
pub const ERROR_HANDLE_REVOKED: u32 = 811;
pub const ERROR_CALLBACK_INVOKE_INLINE: u32 = 812;
pub const ERROR_CPU_SET_INVALID: u32 = 813;
pub const ERROR_ENCLAVE_NOT_TERMINATED: u32 = 814;
pub const ERROR_ENCLAVE_VIOLATION: u32 = 815;
pub const ERROR_SERVER_TRANSPORT_CONFLICT: u32 = 816;
pub const ERROR_CERTIFICATE_VALIDATION_PREFERENCE_CONFLICT: u32 = 817;
pub const ERROR_FT_READ_FROM_COPY_FAILURE: u32 = 818;
pub const ERROR_SECTION_DIRECT_MAP_ONLY: u32 = 819;
pub const ERROR_EA_ACCESS_DENIED: u32 = 994;
pub const ERROR_OPERATION_ABORTED: u32 = 995;
pub const ERROR_IO_INCOMPLETE: u32 = 996;
pub const ERROR_IO_PENDING: u32 = 997;
pub const ERROR_NOACCESS: u32 = 998;
pub const ERROR_SWAPERROR: u32 = 999;
pub const ERROR_STACK_OVERFLOW: u32 = 1001;
pub const ERROR_INVALID_MESSAGE: u32 = 1002;
pub const ERROR_CAN_NOT_COMPLETE: u32 = 1003;
pub const ERROR_INVALID_FLAGS: u32 = 1004;
pub const ERROR_UNRECOGNIZED_VOLUME: u32 = 1005;
pub const ERROR_FILE_INVALID: u32 = 1006;
pub const ERROR_FULLSCREEN_MODE: u32 = 1007;
pub const ERROR_NO_TOKEN: u32 = 1008;
pub const ERROR_BADDB: u32 = 1009;
pub const ERROR_BADKEY: u32 = 1010;
pub const ERROR_CANTOPEN: u32 = 1011;
pub const ERROR_CANTREAD: u32 = 1012;
pub const ERROR_CANTWRITE: u32 = 1013;
pub const ERROR_REGISTRY_RECOVERED: u32 = 1014;
pub const ERROR_REGISTRY_CORRUPT: u32 = 1015;
pub const ERROR_REGISTRY_IO_FAILED: u32 = 1016;
pub const ERROR_NOT_REGISTRY_FILE: u32 = 1017;
pub const ERROR_KEY_DELETED: u32 = 1018;
pub const ERROR_NO_LOG_SPACE: u32 = 1019;
pub const ERROR_KEY_HAS_CHILDREN: u32 = 1020;
pub const ERROR_CHILD_MUST_BE_VOLATILE: u32 = 1021;
pub const ERROR_NOTIFY_ENUM_DIR: u32 = 1022;
pub const ERROR_DEPENDENT_SERVICES_RUNNING: u32 = 1051;
pub const ERROR_INVALID_SERVICE_CONTROL: u32 = 1052;
pub const ERROR_SERVICE_REQUEST_TIMEOUT: u32 = 1053;
pub const ERROR_SERVICE_NO_THREAD: u32 = 1054;
pub const ERROR_SERVICE_DATABASE_LOCKED: u32 = 1055;
pub const ERROR_SERVICE_ALREADY_RUNNING: u32 = 1056;
pub const ERROR_INVALID_SERVICE_ACCOUNT: u32 = 1057;
pub const ERROR_SERVICE_DISABLED: u32 = 1058;
pub const ERROR_CIRCULAR_DEPENDENCY: u32 = 1059;
pub const ERROR_SERVICE_DOES_NOT_EXIST: u32 = 1060;
pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL: u32 = 1061;
pub const ERROR_SERVICE_NOT_ACTIVE: u32 = 1062;
pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT: u32 = 1063;
pub const ERROR_EXCEPTION_IN_SERVICE: u32 = 1064;
pub const ERROR_DATABASE_DOES_NOT_EXIST: u32 = 1065;
pub const ERROR_SERVICE_SPECIFIC_ERROR: u32 = 1066;
pub const ERROR_PROCESS_ABORTED: u32 = 1067;
pub const ERROR_SERVICE_DEPENDENCY_FAIL: u32 = 1068;
pub const ERROR_SERVICE_LOGON_FAILED: u32 = 1069;
pub const ERROR_SERVICE_START_HANG: u32 = 1070;
pub const ERROR_INVALID_SERVICE_LOCK: u32 = 1071;
pub const ERROR_SERVICE_MARKED_FOR_DELETE: u32 = 1072;
pub const ERROR_SERVICE_EXISTS: u32 = 1073;
pub const ERROR_ALREADY_RUNNING_LKG: u32 = 1074;
pub const ERROR_SERVICE_DEPENDENCY_DELETED: u32 = 1075;
pub const ERROR_BOOT_ALREADY_ACCEPTED: u32 = 1076;
pub const ERROR_SERVICE_NEVER_STARTED: u32 = 1077;
pub const ERROR_DUPLICATE_SERVICE_NAME: u32 = 1078;
pub const ERROR_DIFFERENT_SERVICE_ACCOUNT: u32 = 1079;
pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE: u32 = 1080;
pub const ERROR_CANNOT_DETECT_PROCESS_ABORT: u32 = 1081;
pub const ERROR_NO_RECOVERY_PROGRAM: u32 = 1082;
pub const ERROR_SERVICE_NOT_IN_EXE: u32 = 1083;
pub const ERROR_NOT_SAFEBOOT_SERVICE: u32 = 1084;
pub const ERROR_END_OF_MEDIA: u32 = 1100;
pub const ERROR_FILEMARK_DETECTED: u32 = 1101;
pub const ERROR_BEGINNING_OF_MEDIA: u32 = 1102;
pub const ERROR_SETMARK_DETECTED: u32 = 1103;
pub const ERROR_NO_DATA_DETECTED: u32 = 1104;
pub const ERROR_PARTITION_FAILURE: u32 = 1105;
pub const ERROR_INVALID_BLOCK_LENGTH: u32 = 1106;
pub const ERROR_DEVICE_NOT_PARTITIONED: u32 = 1107;
pub const ERROR_UNABLE_TO_LOCK_MEDIA: u32 = 1108;
pub const ERROR_UNABLE_TO_UNLOAD_MEDIA: u32 = 1109;
pub const ERROR_MEDIA_CHANGED: u32 = 1110;
pub const ERROR_BUS_RESET: u32 = 1111;
pub const ERROR_NO_MEDIA_IN_DRIVE: u32 = 1112;
pub const ERROR_NO_UNICODE_TRANSLATION: u32 = 1113;
pub const ERROR_DLL_INIT_FAILED: u32 = 1114;
pub const ERROR_SHUTDOWN_IN_PROGRESS: u32 = 1115;
pub const ERROR_NO_SHUTDOWN_IN_PROGRESS: u32 = 1116;
pub const ERROR_IO_DEVICE: u32 = 1117;
pub const ERROR_SERIAL_NO_DEVICE: u32 = 1118;
pub const ERROR_IRQ_BUSY: u32 = 1119;
pub const ERROR_MORE_WRITES: u32 = 1120;
pub const ERROR_COUNTER_TIMEOUT: u32 = 1121;
pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND: u32 = 1122;
pub const ERROR_FLOPPY_WRONG_CYLINDER: u32 = 1123;
pub const ERROR_FLOPPY_UNKNOWN_ERROR: u32 = 1124;
pub const ERROR_FLOPPY_BAD_REGISTERS: u32 = 1125;
pub const ERROR_DISK_RECALIBRATE_FAILED: u32 = 1126;
pub const ERROR_DISK_OPERATION_FAILED: u32 = 1127;
pub const ERROR_DISK_RESET_FAILED: u32 = 1128;
pub const ERROR_EOM_OVERFLOW: u32 = 1129;
pub const ERROR_NOT_ENOUGH_SERVER_MEMORY: u32 = 1130;
pub const ERROR_POSSIBLE_DEADLOCK: u32 = 1131;
pub const ERROR_MAPPED_ALIGNMENT: u32 = 1132;
pub const ERROR_SET_POWER_STATE_VETOED: u32 = 1140;
pub const ERROR_SET_POWER_STATE_FAILED: u32 = 1141;
pub const ERROR_TOO_MANY_LINKS: u32 = 1142;
pub const ERROR_OLD_WIN_VERSION: u32 = 1150;
pub const ERROR_APP_WRONG_OS: u32 = 1151;
pub const ERROR_SINGLE_INSTANCE_APP: u32 = 1152;
pub const ERROR_RMODE_APP: u32 = 1153;
pub const ERROR_INVALID_DLL: u32 = 1154;
pub const ERROR_NO_ASSOCIATION: u32 = 1155;
pub const ERROR_DDE_FAIL: u32 = 1156;
pub const ERROR_DLL_NOT_FOUND: u32 = 1157;
pub const ERROR_NO_MORE_USER_HANDLES: u32 = 1158;
pub const ERROR_MESSAGE_SYNC_ONLY: u32 = 1159;
pub const ERROR_SOURCE_ELEMENT_EMPTY: u32 = 1160;
pub const ERROR_DESTINATION_ELEMENT_FULL: u32 = 1161;
pub const ERROR_ILLEGAL_ELEMENT_ADDRESS: u32 = 1162;
pub const ERROR_MAGAZINE_NOT_PRESENT: u32 = 1163;
pub const ERROR_DEVICE_REINITIALIZATION_NEEDED: u32 = 1164;
pub const ERROR_DEVICE_REQUIRES_CLEANING: u32 = 1165;
pub const ERROR_DEVICE_DOOR_OPEN: u32 = 1166;
pub const ERROR_DEVICE_NOT_CONNECTED: u32 = 1167;
pub const ERROR_NOT_FOUND: u32 = 1168;
pub const ERROR_NO_MATCH: u32 = 1169;
pub const ERROR_SET_NOT_FOUND: u32 = 1170;
pub const ERROR_POINT_NOT_FOUND: u32 = 1171;
pub const ERROR_NO_TRACKING_SERVICE: u32 = 1172;
pub const ERROR_NO_VOLUME_ID: u32 = 1173;
pub const ERROR_UNABLE_TO_REMOVE_REPLACED: u32 = 1175;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT: u32 = 1176;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2: u32 = 1177;
pub const ERROR_JOURNAL_DELETE_IN_PROGRESS: u32 = 1178;
pub const ERROR_JOURNAL_NOT_ACTIVE: u32 = 1179;
pub const ERROR_POTENTIAL_FILE_FOUND: u32 = 1180;
pub const ERROR_JOURNAL_ENTRY_DELETED: u32 = 1181;
pub const ERROR_PARTITION_TERMINATING: u32 = 1184;
pub const ERROR_SHUTDOWN_IS_SCHEDULED: u32 = 1190;
pub const ERROR_SHUTDOWN_USERS_LOGGED_ON: u32 = 1191;
pub const ERROR_SHUTDOWN_DISKS_NOT_IN_MAINTENANCE_MODE: u32 = 1192;
pub const ERROR_BAD_DEVICE: u32 = 1200;
pub const ERROR_CONNECTION_UNAVAIL: u32 = 1201;
pub const ERROR_DEVICE_ALREADY_REMEMBERED: u32 = 1202;
pub const ERROR_NO_NET_OR_BAD_PATH: u32 = 1203;
pub const ERROR_BAD_PROVIDER: u32 = 1204;
pub const ERROR_CANNOT_OPEN_PROFILE: u32 = 1205;
pub const ERROR_BAD_PROFILE: u32 = 1206;
pub const ERROR_NOT_CONTAINER: u32 = 1207;
pub const ERROR_EXTENDED_ERROR: u32 = 1208;
pub const ERROR_INVALID_GROUPNAME: u32 = 1209;
pub const ERROR_INVALID_COMPUTERNAME: u32 = 1210;
pub const ERROR_INVALID_EVENTNAME: u32 = 1211;
pub const ERROR_INVALID_DOMAINNAME: u32 = 1212;
pub const ERROR_INVALID_SERVICENAME: u32 = 1213;
pub const ERROR_INVALID_NETNAME: u32 = 1214;
pub const ERROR_INVALID_SHARENAME: u32 = 1215;
pub const ERROR_INVALID_PASSWORDNAME: u32 = 1216;
pub const ERROR_INVALID_MESSAGENAME: u32 = 1217;
pub const ERROR_INVALID_MESSAGEDEST: u32 = 1218;
pub const ERROR_SESSION_CREDENTIAL_CONFLICT: u32 = 1219;
pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED: u32 = 1220;
pub const ERROR_DUP_DOMAINNAME: u32 = 1221;
pub const ERROR_NO_NETWORK: u32 = 1222;
pub const ERROR_CANCELLED: u32 = 1223;
pub const ERROR_USER_MAPPED_FILE: u32 = 1224;
pub const ERROR_CONNECTION_REFUSED: u32 = 1225;
pub const ERROR_GRACEFUL_DISCONNECT: u32 = 1226;
pub const ERROR_ADDRESS_ALREADY_ASSOCIATED: u32 = 1227;
pub const ERROR_ADDRESS_NOT_ASSOCIATED: u32 = 1228;
pub const ERROR_CONNECTION_INVALID: u32 = 1229;
pub const ERROR_CONNECTION_ACTIVE: u32 = 1230;
pub const ERROR_NETWORK_UNREACHABLE: u32 = 1231;
pub const ERROR_HOST_UNREACHABLE: u32 = 1232;
pub const ERROR_PROTOCOL_UNREACHABLE: u32 = 1233;
pub const ERROR_PORT_UNREACHABLE: u32 = 1234;
pub const ERROR_REQUEST_ABORTED: u32 = 1235;
pub const ERROR_CONNECTION_ABORTED: u32 = 1236;
pub const ERROR_RETRY: u32 = 1237;
pub const ERROR_CONNECTION_COUNT_LIMIT: u32 = 1238;
pub const ERROR_LOGIN_TIME_RESTRICTION: u32 = 1239;
pub const ERROR_LOGIN_WKSTA_RESTRICTION: u32 = 1240;
pub const ERROR_INCORRECT_ADDRESS: u32 = 1241;
pub const ERROR_ALREADY_REGISTERED: u32 = 1242;
pub const ERROR_SERVICE_NOT_FOUND: u32 = 1243;
pub const ERROR_NOT_AUTHENTICATED: u32 = 1244;
pub const ERROR_NOT_LOGGED_ON: u32 = 1245;
pub const ERROR_CONTINUE: u32 = 1246;
pub const ERROR_ALREADY_INITIALIZED: u32 = 1247;
pub const ERROR_NO_MORE_DEVICES: u32 = 1248;
pub const ERROR_NO_SUCH_SITE: u32 = 1249;
pub const ERROR_DOMAIN_CONTROLLER_EXISTS: u32 = 1250;
pub const ERROR_ONLY_IF_CONNECTED: u32 = 1251;
pub const ERROR_OVERRIDE_NOCHANGES: u32 = 1252;
pub const ERROR_BAD_USER_PROFILE: u32 = 1253;
pub const ERROR_NOT_SUPPORTED_ON_SBS: u32 = 1254;
pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS: u32 = 1255;
pub const ERROR_HOST_DOWN: u32 = 1256;
pub const ERROR_NON_ACCOUNT_SID: u32 = 1257;
pub const ERROR_NON_DOMAIN_SID: u32 = 1258;
pub const ERROR_APPHELP_BLOCK: u32 = 1259;
pub const ERROR_ACCESS_DISABLED_BY_POLICY: u32 = 1260;
pub const ERROR_REG_NAT_CONSUMPTION: u32 = 1261;
pub const ERROR_CSCSHARE_OFFLINE: u32 = 1262;
pub const ERROR_PKINIT_FAILURE: u32 = 1263;
pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE: u32 = 1264;
pub const ERROR_DOWNGRADE_DETECTED: u32 = 1265;
pub const ERROR_MACHINE_LOCKED: u32 = 1271;
pub const ERROR_SMB_GUEST_LOGON_BLOCKED: u32 = 1272;
pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA: u32 = 1273;
pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED: u32 = 1274;
pub const ERROR_DRIVER_BLOCKED: u32 = 1275;
pub const ERROR_INVALID_IMPORT_OF_NON_DLL: u32 = 1276;
pub const ERROR_ACCESS_DISABLED_WEBBLADE: u32 = 1277;
pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER: u32 = 1278;
pub const ERROR_RECOVERY_FAILURE: u32 = 1279;
pub const ERROR_ALREADY_FIBER: u32 = 1280;
pub const ERROR_ALREADY_THREAD: u32 = 1281;
pub const ERROR_STACK_BUFFER_OVERRUN: u32 = 1282;
pub const ERROR_PARAMETER_QUOTA_EXCEEDED: u32 = 1283;
pub const ERROR_DEBUGGER_INACTIVE: u32 = 1284;
pub const ERROR_DELAY_LOAD_FAILED: u32 = 1285;
pub const ERROR_VDM_DISALLOWED: u32 = 1286;
pub const ERROR_UNIDENTIFIED_ERROR: u32 = 1287;
pub const ERROR_INVALID_CRUNTIME_PARAMETER: u32 = 1288;
pub const ERROR_BEYOND_VDL: u32 = 1289;
pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE: u32 = 1290;
pub const ERROR_DRIVER_PROCESS_TERMINATED: u32 = 1291;
pub const ERROR_IMPLEMENTATION_LIMIT: u32 = 1292;
pub const ERROR_PROCESS_IS_PROTECTED: u32 = 1293;
pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING: u32 = 1294;
pub const ERROR_DISK_QUOTA_EXCEEDED: u32 = 1295;
pub const ERROR_CONTENT_BLOCKED: u32 = 1296;
pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE: u32 = 1297;
pub const ERROR_APP_HANG: u32 = 1298;
pub const ERROR_INVALID_LABEL: u32 = 1299;
pub const ERROR_NOT_ALL_ASSIGNED: u32 = 1300;
pub const ERROR_SOME_NOT_MAPPED: u32 = 1301;
pub const ERROR_NO_QUOTAS_FOR_ACCOUNT: u32 = 1302;
pub const ERROR_LOCAL_USER_SESSION_KEY: u32 = 1303;
pub const ERROR_NULL_LM_PASSWORD: u32 = 1304;
pub const ERROR_UNKNOWN_REVISION: u32 = 1305;
pub const ERROR_REVISION_MISMATCH: u32 = 1306;
pub const ERROR_INVALID_OWNER: u32 = 1307;
pub const ERROR_INVALID_PRIMARY_GROUP: u32 = 1308;
pub const ERROR_NO_IMPERSONATION_TOKEN: u32 = 1309;
pub const ERROR_CANT_DISABLE_MANDATORY: u32 = 1310;
pub const ERROR_NO_LOGON_SERVERS: u32 = 1311;
pub const ERROR_NO_SUCH_LOGON_SESSION: u32 = 1312;
pub const ERROR_NO_SUCH_PRIVILEGE: u32 = 1313;
pub const ERROR_PRIVILEGE_NOT_HELD: u32 = 1314;
pub const ERROR_INVALID_ACCOUNT_NAME: u32 = 1315;
pub const ERROR_USER_EXISTS: u32 = 1316;
pub const ERROR_NO_SUCH_USER: u32 = 1317;
pub const ERROR_GROUP_EXISTS: u32 = 1318;
pub const ERROR_NO_SUCH_GROUP: u32 = 1319;
pub const ERROR_MEMBER_IN_GROUP: u32 = 1320;
pub const ERROR_MEMBER_NOT_IN_GROUP: u32 = 1321;
pub const ERROR_LAST_ADMIN: u32 = 1322;
pub const ERROR_WRONG_PASSWORD: u32 = 1323;
pub const ERROR_ILL_FORMED_PASSWORD: u32 = 1324;
pub const ERROR_PASSWORD_RESTRICTION: u32 = 1325;
pub const ERROR_LOGON_FAILURE: u32 = 1326;
pub const ERROR_ACCOUNT_RESTRICTION: u32 = 1327;
pub const ERROR_INVALID_LOGON_HOURS: u32 = 1328;
pub const ERROR_INVALID_WORKSTATION: u32 = 1329;
pub const ERROR_PASSWORD_EXPIRED: u32 = 1330;
pub const ERROR_ACCOUNT_DISABLED: u32 = 1331;
pub const ERROR_NONE_MAPPED: u32 = 1332;
pub const ERROR_TOO_MANY_LUIDS_REQUESTED: u32 = 1333;
pub const ERROR_LUIDS_EXHAUSTED: u32 = 1334;
pub const ERROR_INVALID_SUB_AUTHORITY: u32 = 1335;
pub const ERROR_INVALID_ACL: u32 = 1336;
pub const ERROR_INVALID_SID: u32 = 1337;
pub const ERROR_INVALID_SECURITY_DESCR: u32 = 1338;
pub const ERROR_BAD_INHERITANCE_ACL: u32 = 1340;
pub const ERROR_SERVER_DISABLED: u32 = 1341;
pub const ERROR_SERVER_NOT_DISABLED: u32 = 1342;
pub const ERROR_INVALID_ID_AUTHORITY: u32 = 1343;
pub const ERROR_ALLOTTED_SPACE_EXCEEDED: u32 = 1344;
pub const ERROR_INVALID_GROUP_ATTRIBUTES: u32 = 1345;
pub const ERROR_BAD_IMPERSONATION_LEVEL: u32 = 1346;
pub const ERROR_CANT_OPEN_ANONYMOUS: u32 = 1347;
pub const ERROR_BAD_VALIDATION_CLASS: u32 = 1348;
pub const ERROR_BAD_TOKEN_TYPE: u32 = 1349;
pub const ERROR_NO_SECURITY_ON_OBJECT: u32 = 1350;
pub const ERROR_CANT_ACCESS_DOMAIN_INFO: u32 = 1351;
pub const ERROR_INVALID_SERVER_STATE: u32 = 1352;
pub const ERROR_INVALID_DOMAIN_STATE: u32 = 1353;
pub const ERROR_INVALID_DOMAIN_ROLE: u32 = 1354;
pub const ERROR_NO_SUCH_DOMAIN: u32 = 1355;
pub const ERROR_DOMAIN_EXISTS: u32 = 1356;
pub const ERROR_DOMAIN_LIMIT_EXCEEDED: u32 = 1357;
pub const ERROR_INTERNAL_DB_CORRUPTION: u32 = 1358;
pub const ERROR_INTERNAL_ERROR: u32 = 1359;
pub const ERROR_GENERIC_NOT_MAPPED: u32 = 1360;
pub const ERROR_BAD_DESCRIPTOR_FORMAT: u32 = 1361;
pub const ERROR_NOT_LOGON_PROCESS: u32 = 1362;
pub const ERROR_LOGON_SESSION_EXISTS: u32 = 1363;
pub const ERROR_NO_SUCH_PACKAGE: u32 = 1364;
pub const ERROR_BAD_LOGON_SESSION_STATE: u32 = 1365;
pub const ERROR_LOGON_SESSION_COLLISION: u32 = 1366;
pub const ERROR_INVALID_LOGON_TYPE: u32 = 1367;
pub const ERROR_CANNOT_IMPERSONATE: u32 = 1368;
pub const ERROR_RXACT_INVALID_STATE: u32 = 1369;
pub const ERROR_RXACT_COMMIT_FAILURE: u32 = 1370;
pub const ERROR_SPECIAL_ACCOUNT: u32 = 1371;
pub const ERROR_SPECIAL_GROUP: u32 = 1372;
pub const ERROR_SPECIAL_USER: u32 = 1373;
pub const ERROR_MEMBERS_PRIMARY_GROUP: u32 = 1374;
pub const ERROR_TOKEN_ALREADY_IN_USE: u32 = 1375;
pub const ERROR_NO_SUCH_ALIAS: u32 = 1376;
pub const ERROR_MEMBER_NOT_IN_ALIAS: u32 = 1377;
pub const ERROR_MEMBER_IN_ALIAS: u32 = 1378;
pub const ERROR_ALIAS_EXISTS: u32 = 1379;
pub const ERROR_LOGON_NOT_GRANTED: u32 = 1380;
pub const ERROR_TOO_MANY_SECRETS: u32 = 1381;
pub const ERROR_SECRET_TOO_LONG: u32 = 1382;
pub const ERROR_INTERNAL_DB_ERROR: u32 = 1383;
pub const ERROR_TOO_MANY_CONTEXT_IDS: u32 = 1384;
pub const ERROR_LOGON_TYPE_NOT_GRANTED: u32 = 1385;
pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED: u32 = 1386;
pub const ERROR_NO_SUCH_MEMBER: u32 = 1387;
pub const ERROR_INVALID_MEMBER: u32 = 1388;
pub const ERROR_TOO_MANY_SIDS: u32 = 1389;
pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED: u32 = 1390;
pub const ERROR_NO_INHERITANCE: u32 = 1391;
pub const ERROR_FILE_CORRUPT: u32 = 1392;
pub const ERROR_DISK_CORRUPT: u32 = 1393;
pub const ERROR_NO_USER_SESSION_KEY: u32 = 1394;
pub const ERROR_LICENSE_QUOTA_EXCEEDED: u32 = 1395;
pub const ERROR_WRONG_TARGET_NAME: u32 = 1396;
pub const ERROR_MUTUAL_AUTH_FAILED: u32 = 1397;
pub const ERROR_TIME_SKEW: u32 = 1398;
pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED: u32 = 1399;
pub const ERROR_INVALID_WINDOW_HANDLE: u32 = 1400;
pub const ERROR_INVALID_MENU_HANDLE: u32 = 1401;
pub const ERROR_INVALID_CURSOR_HANDLE: u32 = 1402;
pub const ERROR_INVALID_ACCEL_HANDLE: u32 = 1403;
pub const ERROR_INVALID_HOOK_HANDLE: u32 = 1404;
pub const ERROR_INVALID_DWP_HANDLE: u32 = 1405;
pub const ERROR_TLW_WITH_WSCHILD: u32 = 1406;
pub const ERROR_CANNOT_FIND_WND_CLASS: u32 = 1407;
pub const ERROR_WINDOW_OF_OTHER_THREAD: u32 = 1408;
pub const ERROR_HOTKEY_ALREADY_REGISTERED: u32 = 1409;
pub const ERROR_CLASS_ALREADY_EXISTS: u32 = 1410;
pub const ERROR_CLASS_DOES_NOT_EXIST: u32 = 1411;
pub const ERROR_CLASS_HAS_WINDOWS: u32 = 1412;
pub const ERROR_INVALID_INDEX: u32 = 1413;
pub const ERROR_INVALID_ICON_HANDLE: u32 = 1414;
pub const ERROR_PRIVATE_DIALOG_INDEX: u32 = 1415;
pub const ERROR_LISTBOX_ID_NOT_FOUND: u32 = 1416;
pub const ERROR_NO_WILDCARD_CHARACTERS: u32 = 1417;
pub const ERROR_CLIPBOARD_NOT_OPEN: u32 = 1418;
pub const ERROR_HOTKEY_NOT_REGISTERED: u32 = 1419;
pub const ERROR_WINDOW_NOT_DIALOG: u32 = 1420;
pub const ERROR_CONTROL_ID_NOT_FOUND: u32 = 1421;
pub const ERROR_INVALID_COMBOBOX_MESSAGE: u32 = 1422;
pub const ERROR_WINDOW_NOT_COMBOBOX: u32 = 1423;
pub const ERROR_INVALID_EDIT_HEIGHT: u32 = 1424;
pub const ERROR_DC_NOT_FOUND: u32 = 1425;
pub const ERROR_INVALID_HOOK_FILTER: u32 = 1426;
pub const ERROR_INVALID_FILTER_PROC: u32 = 1427;
pub const ERROR_HOOK_NEEDS_HMOD: u32 = 1428;
pub const ERROR_GLOBAL_ONLY_HOOK: u32 = 1429;
pub const ERROR_JOURNAL_HOOK_SET: u32 = 1430;
pub const ERROR_HOOK_NOT_INSTALLED: u32 = 1431;
pub const ERROR_INVALID_LB_MESSAGE: u32 = 1432;
pub const ERROR_SETCOUNT_ON_BAD_LB: u32 = 1433;
pub const ERROR_LB_WITHOUT_TABSTOPS: u32 = 1434;
pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD: u32 = 1435;
pub const ERROR_CHILD_WINDOW_MENU: u32 = 1436;
pub const ERROR_NO_SYSTEM_MENU: u32 = 1437;
pub const ERROR_INVALID_MSGBOX_STYLE: u32 = 1438;
pub const ERROR_INVALID_SPI_VALUE: u32 = 1439;
pub const ERROR_SCREEN_ALREADY_LOCKED: u32 = 1440;
pub const ERROR_HWNDS_HAVE_DIFF_PARENT: u32 = 1441;
pub const ERROR_NOT_CHILD_WINDOW: u32 = 1442;
pub const ERROR_INVALID_GW_COMMAND: u32 = 1443;
pub const ERROR_INVALID_THREAD_ID: u32 = 1444;
pub const ERROR_NON_MDICHILD_WINDOW: u32 = 1445;
pub const ERROR_POPUP_ALREADY_ACTIVE: u32 = 1446;
pub const ERROR_NO_SCROLLBARS: u32 = 1447;
pub const ERROR_INVALID_SCROLLBAR_RANGE: u32 = 1448;
pub const ERROR_INVALID_SHOWWIN_COMMAND: u32 = 1449;
pub const ERROR_NO_SYSTEM_RESOURCES: u32 = 1450;
pub const ERROR_NONPAGED_SYSTEM_RESOURCES: u32 = 1451;
pub const ERROR_PAGED_SYSTEM_RESOURCES: u32 = 1452;
pub const ERROR_WORKING_SET_QUOTA: u32 = 1453;
pub const ERROR_PAGEFILE_QUOTA: u32 = 1454;
pub const ERROR_COMMITMENT_LIMIT: u32 = 1455;
pub const ERROR_MENU_ITEM_NOT_FOUND: u32 = 1456;
pub const ERROR_INVALID_KEYBOARD_HANDLE: u32 = 1457;
pub const ERROR_HOOK_TYPE_NOT_ALLOWED: u32 = 1458;
pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION: u32 = 1459;
pub const ERROR_TIMEOUT: u32 = 1460;
pub const ERROR_INVALID_MONITOR_HANDLE: u32 = 1461;
pub const ERROR_INCORRECT_SIZE: u32 = 1462;
pub const ERROR_SYMLINK_CLASS_DISABLED: u32 = 1463;
pub const ERROR_SYMLINK_NOT_SUPPORTED: u32 = 1464;
pub const ERROR_XML_PARSE_ERROR: u32 = 1465;
pub const ERROR_XMLDSIG_ERROR: u32 = 1466;
pub const ERROR_RESTART_APPLICATION: u32 = 1467;
pub const ERROR_WRONG_COMPARTMENT: u32 = 1468;
pub const ERROR_AUTHIP_FAILURE: u32 = 1469;
pub const ERROR_NO_NVRAM_RESOURCES: u32 = 1470;
pub const ERROR_NOT_GUI_PROCESS: u32 = 1471;
pub const ERROR_EVENTLOG_FILE_CORRUPT: u32 = 1500;
pub const ERROR_EVENTLOG_CANT_START: u32 = 1501;
pub const ERROR_LOG_FILE_FULL: u32 = 1502;
pub const ERROR_EVENTLOG_FILE_CHANGED: u32 = 1503;
pub const ERROR_CONTAINER_ASSIGNED: u32 = 1504;
pub const ERROR_JOB_NO_CONTAINER: u32 = 1505;
pub const ERROR_INVALID_TASK_NAME: u32 = 1550;
pub const ERROR_INVALID_TASK_INDEX: u32 = 1551;
pub const ERROR_THREAD_ALREADY_IN_TASK: u32 = 1552;
pub const ERROR_INSTALL_SERVICE_FAILURE: u32 = 1601;
pub const ERROR_INSTALL_USEREXIT: u32 = 1602;
pub const ERROR_INSTALL_FAILURE: u32 = 1603;
pub const ERROR_INSTALL_SUSPEND: u32 = 1604;
pub const ERROR_UNKNOWN_PRODUCT: u32 = 1605;
pub const ERROR_UNKNOWN_FEATURE: u32 = 1606;
pub const ERROR_UNKNOWN_COMPONENT: u32 = 1607;
pub const ERROR_UNKNOWN_PROPERTY: u32 = 1608;
pub const ERROR_INVALID_HANDLE_STATE: u32 = 1609;
pub const ERROR_BAD_CONFIGURATION: u32 = 1610;
pub const ERROR_INDEX_ABSENT: u32 = 1611;
pub const ERROR_INSTALL_SOURCE_ABSENT: u32 = 1612;
pub const ERROR_INSTALL_PACKAGE_VERSION: u32 = 1613;
pub const ERROR_PRODUCT_UNINSTALLED: u32 = 1614;
pub const ERROR_BAD_QUERY_SYNTAX: u32 = 1615;
pub const ERROR_INVALID_FIELD: u32 = 1616;
pub const ERROR_DEVICE_REMOVED: u32 = 1617;
pub const ERROR_INSTALL_ALREADY_RUNNING: u32 = 1618;
pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED: u32 = 1619;
pub const ERROR_INSTALL_PACKAGE_INVALID: u32 = 1620;
pub const ERROR_INSTALL_UI_FAILURE: u32 = 1621;
pub const ERROR_INSTALL_LOG_FAILURE: u32 = 1622;
pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED: u32 = 1623;
pub const ERROR_INSTALL_TRANSFORM_FAILURE: u32 = 1624;
pub const ERROR_INSTALL_PACKAGE_REJECTED: u32 = 1625;
pub const ERROR_FUNCTION_NOT_CALLED: u32 = 1626;
pub const ERROR_FUNCTION_FAILED: u32 = 1627;
pub const ERROR_INVALID_TABLE: u32 = 1628;
pub const ERROR_DATATYPE_MISMATCH: u32 = 1629;
pub const ERROR_UNSUPPORTED_TYPE: u32 = 1630;
pub const ERROR_CREATE_FAILED: u32 = 1631;
pub const ERROR_INSTALL_TEMP_UNWRITABLE: u32 = 1632;
pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED: u32 = 1633;
pub const ERROR_INSTALL_NOTUSED: u32 = 1634;
pub const ERROR_PATCH_PACKAGE_OPEN_FAILED: u32 = 1635;
pub const ERROR_PATCH_PACKAGE_INVALID: u32 = 1636;
pub const ERROR_PATCH_PACKAGE_UNSUPPORTED: u32 = 1637;
pub const ERROR_PRODUCT_VERSION: u32 = 1638;
pub const ERROR_INVALID_COMMAND_LINE: u32 = 1639;
pub const ERROR_INSTALL_REMOTE_DISALLOWED: u32 = 1640;
pub const ERROR_SUCCESS_REBOOT_INITIATED: u32 = 1641;
pub const ERROR_PATCH_TARGET_NOT_FOUND: u32 = 1642;
pub const ERROR_PATCH_PACKAGE_REJECTED: u32 = 1643;
pub const ERROR_INSTALL_TRANSFORM_REJECTED: u32 = 1644;
pub const ERROR_INSTALL_REMOTE_PROHIBITED: u32 = 1645;
pub const ERROR_PATCH_REMOVAL_UNSUPPORTED: u32 = 1646;
pub const ERROR_UNKNOWN_PATCH: u32 = 1647;
pub const ERROR_PATCH_NO_SEQUENCE: u32 = 1648;
pub const ERROR_PATCH_REMOVAL_DISALLOWED: u32 = 1649;
pub const ERROR_INVALID_PATCH_XML: u32 = 1650;
pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT: u32 = 1651;
pub const ERROR_INSTALL_SERVICE_SAFEBOOT: u32 = 1652;
pub const ERROR_FAIL_FAST_EXCEPTION: u32 = 1653;
pub const ERROR_INSTALL_REJECTED: u32 = 1654;
pub const ERROR_DYNAMIC_CODE_BLOCKED: u32 = 1655;
pub const ERROR_NOT_SAME_OBJECT: u32 = 1656;
pub const ERROR_STRICT_CFG_VIOLATION: u32 = 1657;
pub const ERROR_SET_CONTEXT_DENIED: u32 = 1660;
pub const ERROR_CROSS_PARTITION_VIOLATION: u32 = 1661;
pub const ERROR_RETURN_ADDRESS_HIJACK_ATTEMPT: u32 = 1662;
pub const RPC_S_INVALID_STRING_BINDING: u32 = 1700;
pub const RPC_S_WRONG_KIND_OF_BINDING: u32 = 1701;
pub const RPC_S_INVALID_BINDING: u32 = 1702;
pub const RPC_S_PROTSEQ_NOT_SUPPORTED: u32 = 1703;
pub const RPC_S_INVALID_RPC_PROTSEQ: u32 = 1704;
pub const RPC_S_INVALID_STRING_UUID: u32 = 1705;
pub const RPC_S_INVALID_ENDPOINT_FORMAT: u32 = 1706;
pub const RPC_S_INVALID_NET_ADDR: u32 = 1707;
pub const RPC_S_NO_ENDPOINT_FOUND: u32 = 1708;
pub const RPC_S_INVALID_TIMEOUT: u32 = 1709;
pub const RPC_S_OBJECT_NOT_FOUND: u32 = 1710;
pub const RPC_S_ALREADY_REGISTERED: u32 = 1711;
pub const RPC_S_TYPE_ALREADY_REGISTERED: u32 = 1712;
pub const RPC_S_ALREADY_LISTENING: u32 = 1713;
pub const RPC_S_NO_PROTSEQS_REGISTERED: u32 = 1714;
pub const RPC_S_NOT_LISTENING: u32 = 1715;
pub const RPC_S_UNKNOWN_MGR_TYPE: u32 = 1716;
pub const RPC_S_UNKNOWN_IF: u32 = 1717;
pub const RPC_S_NO_BINDINGS: u32 = 1718;
pub const RPC_S_NO_PROTSEQS: u32 = 1719;
pub const RPC_S_CANT_CREATE_ENDPOINT: u32 = 1720;
pub const RPC_S_OUT_OF_RESOURCES: u32 = 1721;
pub const RPC_S_SERVER_UNAVAILABLE: u32 = 1722;
pub const RPC_S_SERVER_TOO_BUSY: u32 = 1723;
pub const RPC_S_INVALID_NETWORK_OPTIONS: u32 = 1724;
pub const RPC_S_NO_CALL_ACTIVE: u32 = 1725;
pub const RPC_S_CALL_FAILED: u32 = 1726;
pub const RPC_S_CALL_FAILED_DNE: u32 = 1727;
pub const RPC_S_PROTOCOL_ERROR: u32 = 1728;
pub const RPC_S_PROXY_ACCESS_DENIED: u32 = 1729;
pub const RPC_S_UNSUPPORTED_TRANS_SYN: u32 = 1730;
pub const RPC_S_UNSUPPORTED_TYPE: u32 = 1732;
pub const RPC_S_INVALID_TAG: u32 = 1733;
pub const RPC_S_INVALID_BOUND: u32 = 1734;
pub const RPC_S_NO_ENTRY_NAME: u32 = 1735;
pub const RPC_S_INVALID_NAME_SYNTAX: u32 = 1736;
pub const RPC_S_UNSUPPORTED_NAME_SYNTAX: u32 = 1737;
pub const RPC_S_UUID_NO_ADDRESS: u32 = 1739;
pub const RPC_S_DUPLICATE_ENDPOINT: u32 = 1740;
pub const RPC_S_UNKNOWN_AUTHN_TYPE: u32 = 1741;
pub const RPC_S_MAX_CALLS_TOO_SMALL: u32 = 1742;
pub const RPC_S_STRING_TOO_LONG: u32 = 1743;
pub const RPC_S_PROTSEQ_NOT_FOUND: u32 = 1744;
pub const RPC_S_PROCNUM_OUT_OF_RANGE: u32 = 1745;
pub const RPC_S_BINDING_HAS_NO_AUTH: u32 = 1746;
pub const RPC_S_UNKNOWN_AUTHN_SERVICE: u32 = 1747;
pub const RPC_S_UNKNOWN_AUTHN_LEVEL: u32 = 1748;
pub const RPC_S_INVALID_AUTH_IDENTITY: u32 = 1749;
pub const RPC_S_UNKNOWN_AUTHZ_SERVICE: u32 = 1750;
pub const EPT_S_INVALID_ENTRY: u32 = 1751;
pub const EPT_S_CANT_PERFORM_OP: u32 = 1752;
pub const EPT_S_NOT_REGISTERED: u32 = 1753;
pub const RPC_S_NOTHING_TO_EXPORT: u32 = 1754;
pub const RPC_S_INCOMPLETE_NAME: u32 = 1755;
pub const RPC_S_INVALID_VERS_OPTION: u32 = 1756;
pub const RPC_S_NO_MORE_MEMBERS: u32 = 1757;
pub const RPC_S_NOT_ALL_OBJS_UNEXPORTED: u32 = 1758;
pub const RPC_S_INTERFACE_NOT_FOUND: u32 = 1759;
pub const RPC_S_ENTRY_ALREADY_EXISTS: u32 = 1760;
pub const RPC_S_ENTRY_NOT_FOUND: u32 = 1761;
pub const RPC_S_NAME_SERVICE_UNAVAILABLE: u32 = 1762;
pub const RPC_S_INVALID_NAF_ID: u32 = 1763;
pub const RPC_S_CANNOT_SUPPORT: u32 = 1764;
pub const RPC_S_NO_CONTEXT_AVAILABLE: u32 = 1765;
pub const RPC_S_INTERNAL_ERROR: u32 = 1766;
pub const RPC_S_ZERO_DIVIDE: u32 = 1767;
pub const RPC_S_ADDRESS_ERROR: u32 = 1768;
pub const RPC_S_FP_DIV_ZERO: u32 = 1769;
pub const RPC_S_FP_UNDERFLOW: u32 = 1770;
pub const RPC_S_FP_OVERFLOW: u32 = 1771;
pub const RPC_X_NO_MORE_ENTRIES: u32 = 1772;
pub const RPC_X_SS_CHAR_TRANS_OPEN_FAIL: u32 = 1773;
pub const RPC_X_SS_CHAR_TRANS_SHORT_FILE: u32 = 1774;
pub const RPC_X_SS_IN_NULL_CONTEXT: u32 = 1775;
pub const RPC_X_SS_CONTEXT_DAMAGED: u32 = 1777;
pub const RPC_X_SS_HANDLES_MISMATCH: u32 = 1778;
pub const RPC_X_SS_CANNOT_GET_CALL_HANDLE: u32 = 1779;
pub const RPC_X_NULL_REF_POINTER: u32 = 1780;
pub const RPC_X_ENUM_VALUE_OUT_OF_RANGE: u32 = 1781;
pub const RPC_X_BYTE_COUNT_TOO_SMALL: u32 = 1782;
pub const RPC_X_BAD_STUB_DATA: u32 = 1783;
pub const ERROR_INVALID_USER_BUFFER: u32 = 1784;
pub const ERROR_UNRECOGNIZED_MEDIA: u32 = 1785;
pub const ERROR_NO_TRUST_LSA_SECRET: u32 = 1786;
pub const ERROR_NO_TRUST_SAM_ACCOUNT: u32 = 1787;
pub const ERROR_TRUSTED_DOMAIN_FAILURE: u32 = 1788;
pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE: u32 = 1789;
pub const ERROR_TRUST_FAILURE: u32 = 1790;
pub const RPC_S_CALL_IN_PROGRESS: u32 = 1791;
pub const ERROR_NETLOGON_NOT_STARTED: u32 = 1792;
pub const ERROR_ACCOUNT_EXPIRED: u32 = 1793;
pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES: u32 = 1794;
pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED: u32 = 1795;
pub const ERROR_UNKNOWN_PORT: u32 = 1796;
pub const ERROR_UNKNOWN_PRINTER_DRIVER: u32 = 1797;
pub const ERROR_UNKNOWN_PRINTPROCESSOR: u32 = 1798;
pub const ERROR_INVALID_SEPARATOR_FILE: u32 = 1799;
pub const ERROR_INVALID_PRIORITY: u32 = 1800;
pub const ERROR_INVALID_PRINTER_NAME: u32 = 1801;
pub const ERROR_PRINTER_ALREADY_EXISTS: u32 = 1802;
pub const ERROR_INVALID_PRINTER_COMMAND: u32 = 1803;
pub const ERROR_INVALID_DATATYPE: u32 = 1804;
pub const ERROR_INVALID_ENVIRONMENT: u32 = 1805;
pub const RPC_S_NO_MORE_BINDINGS: u32 = 1806;
pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT: u32 = 1807;
pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT: u32 = 1808;
pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT: u32 = 1809;
pub const ERROR_DOMAIN_TRUST_INCONSISTENT: u32 = 1810;
pub const ERROR_SERVER_HAS_OPEN_HANDLES: u32 = 1811;
pub const ERROR_RESOURCE_DATA_NOT_FOUND: u32 = 1812;
pub const ERROR_RESOURCE_TYPE_NOT_FOUND: u32 = 1813;
pub const ERROR_RESOURCE_NAME_NOT_FOUND: u32 = 1814;
pub const ERROR_RESOURCE_LANG_NOT_FOUND: u32 = 1815;
pub const ERROR_NOT_ENOUGH_QUOTA: u32 = 1816;
pub const RPC_S_NO_INTERFACES: u32 = 1817;
pub const RPC_S_CALL_CANCELLED: u32 = 1818;
pub const RPC_S_BINDING_INCOMPLETE: u32 = 1819;
pub const RPC_S_COMM_FAILURE: u32 = 1820;
pub const RPC_S_UNSUPPORTED_AUTHN_LEVEL: u32 = 1821;
pub const RPC_S_NO_PRINC_NAME: u32 = 1822;
pub const RPC_S_NOT_RPC_ERROR: u32 = 1823;
pub const RPC_S_UUID_LOCAL_ONLY: u32 = 1824;
pub const RPC_S_SEC_PKG_ERROR: u32 = 1825;
pub const RPC_S_NOT_CANCELLED: u32 = 1826;
pub const RPC_X_INVALID_ES_ACTION: u32 = 1827;
pub const RPC_X_WRONG_ES_VERSION: u32 = 1828;
pub const RPC_X_WRONG_STUB_VERSION: u32 = 1829;
pub const RPC_X_INVALID_PIPE_OBJECT: u32 = 1830;
pub const RPC_X_WRONG_PIPE_ORDER: u32 = 1831;
pub const RPC_X_WRONG_PIPE_VERSION: u32 = 1832;
pub const RPC_S_COOKIE_AUTH_FAILED: u32 = 1833;
pub const RPC_S_DO_NOT_DISTURB: u32 = 1834;
pub const RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED: u32 = 1835;
pub const RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH: u32 = 1836;
pub const RPC_S_GROUP_MEMBER_NOT_FOUND: u32 = 1898;
pub const EPT_S_CANT_CREATE: u32 = 1899;
pub const RPC_S_INVALID_OBJECT: u32 = 1900;
pub const ERROR_INVALID_TIME: u32 = 1901;
pub const ERROR_INVALID_FORM_NAME: u32 = 1902;
pub const ERROR_INVALID_FORM_SIZE: u32 = 1903;
pub const ERROR_ALREADY_WAITING: u32 = 1904;
pub const ERROR_PRINTER_DELETED: u32 = 1905;
pub const ERROR_INVALID_PRINTER_STATE: u32 = 1906;
pub const ERROR_PASSWORD_MUST_CHANGE: u32 = 1907;
pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND: u32 = 1908;
pub const ERROR_ACCOUNT_LOCKED_OUT: u32 = 1909;
pub const OR_INVALID_OXID: u32 = 1910;
pub const OR_INVALID_OID: u32 = 1911;
pub const OR_INVALID_SET: u32 = 1912;
pub const RPC_S_SEND_INCOMPLETE: u32 = 1913;
pub const RPC_S_INVALID_ASYNC_HANDLE: u32 = 1914;
pub const RPC_S_INVALID_ASYNC_CALL: u32 = 1915;
pub const RPC_X_PIPE_CLOSED: u32 = 1916;
pub const RPC_X_PIPE_DISCIPLINE_ERROR: u32 = 1917;
pub const RPC_X_PIPE_EMPTY: u32 = 1918;
pub const ERROR_NO_SITENAME: u32 = 1919;
pub const ERROR_CANT_ACCESS_FILE: u32 = 1920;
pub const ERROR_CANT_RESOLVE_FILENAME: u32 = 1921;
pub const RPC_S_ENTRY_TYPE_MISMATCH: u32 = 1922;
pub const RPC_S_NOT_ALL_OBJS_EXPORTED: u32 = 1923;
pub const RPC_S_INTERFACE_NOT_EXPORTED: u32 = 1924;
pub const RPC_S_PROFILE_NOT_ADDED: u32 = 1925;
pub const RPC_S_PRF_ELT_NOT_ADDED: u32 = 1926;
pub const RPC_S_PRF_ELT_NOT_REMOVED: u32 = 1927;
pub const RPC_S_GRP_ELT_NOT_ADDED: u32 = 1928;
pub const RPC_S_GRP_ELT_NOT_REMOVED: u32 = 1929;
pub const ERROR_KM_DRIVER_BLOCKED: u32 = 1930;
pub const ERROR_CONTEXT_EXPIRED: u32 = 1931;
pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED: u32 = 1932;
pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED: u32 = 1933;
pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED: u32 = 1934;
pub const ERROR_AUTHENTICATION_FIREWALL_FAILED: u32 = 1935;
pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED: u32 = 1936;
pub const ERROR_NTLM_BLOCKED: u32 = 1937;
pub const ERROR_PASSWORD_CHANGE_REQUIRED: u32 = 1938;
pub const ERROR_LOST_MODE_LOGON_RESTRICTION: u32 = 1939;
pub const ERROR_INVALID_PIXEL_FORMAT: u32 = 2000;
pub const ERROR_BAD_DRIVER: u32 = 2001;
pub const ERROR_INVALID_WINDOW_STYLE: u32 = 2002;
pub const ERROR_METAFILE_NOT_SUPPORTED: u32 = 2003;
pub const ERROR_TRANSFORM_NOT_SUPPORTED: u32 = 2004;
pub const ERROR_CLIPPING_NOT_SUPPORTED: u32 = 2005;
pub const ERROR_INVALID_CMM: u32 = 2010;
pub const ERROR_INVALID_PROFILE: u32 = 2011;
pub const ERROR_TAG_NOT_FOUND: u32 = 2012;
pub const ERROR_TAG_NOT_PRESENT: u32 = 2013;
pub const ERROR_DUPLICATE_TAG: u32 = 2014;
pub const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE: u32 = 2015;
pub const ERROR_PROFILE_NOT_FOUND: u32 = 2016;
pub const ERROR_INVALID_COLORSPACE: u32 = 2017;
pub const ERROR_ICM_NOT_ENABLED: u32 = 2018;
pub const ERROR_DELETING_ICM_XFORM: u32 = 2019;
pub const ERROR_INVALID_TRANSFORM: u32 = 2020;
pub const ERROR_COLORSPACE_MISMATCH: u32 = 2021;
pub const ERROR_INVALID_COLORINDEX: u32 = 2022;
pub const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE: u32 = 2023;
pub const ERROR_CONNECTED_OTHER_PASSWORD: u32 = 2108;
pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT: u32 = 2109;
pub const ERROR_BAD_USERNAME: u32 = 2202;
pub const ERROR_NOT_CONNECTED: u32 = 2250;
pub const ERROR_OPEN_FILES: u32 = 2401;
pub const ERROR_ACTIVE_CONNECTIONS: u32 = 2402;
pub const ERROR_DEVICE_IN_USE: u32 = 2404;
pub const ERROR_UNKNOWN_PRINT_MONITOR: u32 = 3000;
pub const ERROR_PRINTER_DRIVER_IN_USE: u32 = 3001;
pub const ERROR_SPOOL_FILE_NOT_FOUND: u32 = 3002;
pub const ERROR_SPL_NO_STARTDOC: u32 = 3003;
pub const ERROR_SPL_NO_ADDJOB: u32 = 3004;
pub const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED: u32 = 3005;
pub const ERROR_PRINT_MONITOR_ALREADY_INSTALLED: u32 = 3006;
pub const ERROR_INVALID_PRINT_MONITOR: u32 = 3007;
pub const ERROR_PRINT_MONITOR_IN_USE: u32 = 3008;
pub const ERROR_PRINTER_HAS_JOBS_QUEUED: u32 = 3009;
pub const ERROR_SUCCESS_REBOOT_REQUIRED: u32 = 3010;
pub const ERROR_SUCCESS_RESTART_REQUIRED: u32 = 3011;
pub const ERROR_PRINTER_NOT_FOUND: u32 = 3012;
pub const ERROR_PRINTER_DRIVER_WARNED: u32 = 3013;
pub const ERROR_PRINTER_DRIVER_BLOCKED: u32 = 3014;
pub const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE: u32 = 3015;
pub const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND: u32 = 3016;
pub const ERROR_FAIL_REBOOT_REQUIRED: u32 = 3017;
pub const ERROR_FAIL_REBOOT_INITIATED: u32 = 3018;
pub const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED: u32 = 3019;
pub const ERROR_PRINT_JOB_RESTART_REQUIRED: u32 = 3020;
pub const ERROR_INVALID_PRINTER_DRIVER_MANIFEST: u32 = 3021;
pub const ERROR_PRINTER_NOT_SHAREABLE: u32 = 3022;
pub const ERROR_SERVER_SERVICE_CALL_REQUIRES_SMB1: u32 = 3023;
pub const ERROR_NETWORK_AUTHENTICATION_PROMPT_CANCELED: u32 = 3024;
pub const ERROR_REMOTE_MAILSLOTS_DEPRECATED: u32 = 3025;
pub const ERROR_REQUEST_PAUSED: u32 = 3050;
pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED: u32 = 3060;
pub const ERROR_APPEXEC_HANDLE_INVALIDATED: u32 = 3061;
pub const ERROR_APPEXEC_INVALID_HOST_GENERATION: u32 = 3062;
pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION: u32 = 3063;
pub const ERROR_APPEXEC_INVALID_HOST_STATE: u32 = 3064;
pub const ERROR_APPEXEC_NO_DONOR: u32 = 3065;
pub const ERROR_APPEXEC_HOST_ID_MISMATCH: u32 = 3066;
pub const ERROR_APPEXEC_UNKNOWN_USER: u32 = 3067;
pub const ERROR_APPEXEC_APP_COMPAT_BLOCK: u32 = 3068;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT: u32 = 3069;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_TERMINATION: u32 = 3070;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_LICENSING: u32 = 3071;
pub const ERROR_APPEXEC_CALLER_WAIT_TIMEOUT_RESOURCES: u32 = 3072;
pub const ERROR_VRF_VOLATILE_CFG_AND_IO_ENABLED: u32 = 3080;
pub const ERROR_VRF_VOLATILE_NOT_STOPPABLE: u32 = 3081;
pub const ERROR_VRF_VOLATILE_SAFE_MODE: u32 = 3082;
pub const ERROR_VRF_VOLATILE_NOT_RUNNABLE_SYSTEM: u32 = 3083;
pub const ERROR_VRF_VOLATILE_NOT_SUPPORTED_RULECLASS: u32 = 3084;
pub const ERROR_VRF_VOLATILE_PROTECTED_DRIVER: u32 = 3085;
pub const ERROR_VRF_VOLATILE_NMI_REGISTERED: u32 = 3086;
pub const ERROR_VRF_VOLATILE_SETTINGS_CONFLICT: u32 = 3087;
pub const ERROR_CAR_LKD_IN_PROGRESS: u32 = 3088;
pub const ERROR_DIF_ZERO_SIZE_INFORMATION: u32 = 3187;
pub const ERROR_DIF_DRIVER_PLUGIN_MISMATCH: u32 = 3188;
pub const ERROR_DIF_DRIVER_THUNKS_NOT_ALLOWED: u32 = 3189;
pub const ERROR_DIF_IOCALLBACK_NOT_REPLACED: u32 = 3190;
pub const ERROR_DIF_LIVEDUMP_LIMIT_EXCEEDED: u32 = 3191;
pub const ERROR_DIF_VOLATILE_SECTION_NOT_LOCKED: u32 = 3192;
pub const ERROR_DIF_VOLATILE_DRIVER_HOTPATCHED: u32 = 3193;
pub const ERROR_DIF_VOLATILE_INVALID_INFO: u32 = 3194;
pub const ERROR_DIF_VOLATILE_DRIVER_IS_NOT_RUNNING: u32 = 3195;
pub const ERROR_DIF_VOLATILE_PLUGIN_IS_NOT_RUNNING: u32 = 3196;
pub const ERROR_DIF_VOLATILE_PLUGIN_CHANGE_NOT_ALLOWED: u32 = 3197;
pub const ERROR_DIF_VOLATILE_NOT_ALLOWED: u32 = 3198;
pub const ERROR_DIF_BINDING_API_NOT_FOUND: u32 = 3199;
pub const ERROR_IO_REISSUE_AS_CACHED: u32 = 3950;
pub const ERROR_WINS_INTERNAL: u32 = 4000;
pub const ERROR_CAN_NOT_DEL_LOCAL_WINS: u32 = 4001;
pub const ERROR_STATIC_INIT: u32 = 4002;
pub const ERROR_INC_BACKUP: u32 = 4003;
pub const ERROR_FULL_BACKUP: u32 = 4004;
pub const ERROR_REC_NON_EXISTENT: u32 = 4005;
pub const ERROR_RPL_NOT_ALLOWED: u32 = 4006;
pub const PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED: u32 = 4050;
pub const PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO: u32 = 4051;
pub const PEERDIST_ERROR_MISSING_DATA: u32 = 4052;
pub const PEERDIST_ERROR_NO_MORE: u32 = 4053;
pub const PEERDIST_ERROR_NOT_INITIALIZED: u32 = 4054;
pub const PEERDIST_ERROR_ALREADY_INITIALIZED: u32 = 4055;
pub const PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS: u32 = 4056;
pub const PEERDIST_ERROR_INVALIDATED: u32 = 4057;
pub const PEERDIST_ERROR_ALREADY_EXISTS: u32 = 4058;
pub const PEERDIST_ERROR_OPERATION_NOTFOUND: u32 = 4059;
pub const PEERDIST_ERROR_ALREADY_COMPLETED: u32 = 4060;
pub const PEERDIST_ERROR_OUT_OF_BOUNDS: u32 = 4061;
pub const PEERDIST_ERROR_VERSION_UNSUPPORTED: u32 = 4062;
pub const PEERDIST_ERROR_INVALID_CONFIGURATION: u32 = 4063;
pub const PEERDIST_ERROR_NOT_LICENSED: u32 = 4064;
pub const PEERDIST_ERROR_SERVICE_UNAVAILABLE: u32 = 4065;
pub const PEERDIST_ERROR_TRUST_FAILURE: u32 = 4066;
pub const ERROR_DHCP_ADDRESS_CONFLICT: u32 = 4100;
pub const ERROR_WMI_GUID_NOT_FOUND: u32 = 4200;
pub const ERROR_WMI_INSTANCE_NOT_FOUND: u32 = 4201;
pub const ERROR_WMI_ITEMID_NOT_FOUND: u32 = 4202;
pub const ERROR_WMI_TRY_AGAIN: u32 = 4203;
pub const ERROR_WMI_DP_NOT_FOUND: u32 = 4204;
pub const ERROR_WMI_UNRESOLVED_INSTANCE_REF: u32 = 4205;
pub const ERROR_WMI_ALREADY_ENABLED: u32 = 4206;
pub const ERROR_WMI_GUID_DISCONNECTED: u32 = 4207;
pub const ERROR_WMI_SERVER_UNAVAILABLE: u32 = 4208;
pub const ERROR_WMI_DP_FAILED: u32 = 4209;
pub const ERROR_WMI_INVALID_MOF: u32 = 4210;
pub const ERROR_WMI_INVALID_REGINFO: u32 = 4211;
pub const ERROR_WMI_ALREADY_DISABLED: u32 = 4212;
pub const ERROR_WMI_READ_ONLY: u32 = 4213;
pub const ERROR_WMI_SET_FAILURE: u32 = 4214;
pub const ERROR_NOT_APPCONTAINER: u32 = 4250;
pub const ERROR_APPCONTAINER_REQUIRED: u32 = 4251;
pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER: u32 = 4252;
pub const ERROR_INVALID_PACKAGE_SID_LENGTH: u32 = 4253;
pub const ERROR_INVALID_MEDIA: u32 = 4300;
pub const ERROR_INVALID_LIBRARY: u32 = 4301;
pub const ERROR_INVALID_MEDIA_POOL: u32 = 4302;
pub const ERROR_DRIVE_MEDIA_MISMATCH: u32 = 4303;
pub const ERROR_MEDIA_OFFLINE: u32 = 4304;
pub const ERROR_LIBRARY_OFFLINE: u32 = 4305;
pub const ERROR_EMPTY: u32 = 4306;
pub const ERROR_NOT_EMPTY: u32 = 4307;
pub const ERROR_MEDIA_UNAVAILABLE: u32 = 4308;
pub const ERROR_RESOURCE_DISABLED: u32 = 4309;
pub const ERROR_INVALID_CLEANER: u32 = 4310;
pub const ERROR_UNABLE_TO_CLEAN: u32 = 4311;
pub const ERROR_OBJECT_NOT_FOUND: u32 = 4312;
pub const ERROR_DATABASE_FAILURE: u32 = 4313;
pub const ERROR_DATABASE_FULL: u32 = 4314;
pub const ERROR_MEDIA_INCOMPATIBLE: u32 = 4315;
pub const ERROR_RESOURCE_NOT_PRESENT: u32 = 4316;
pub const ERROR_INVALID_OPERATION: u32 = 4317;
pub const ERROR_MEDIA_NOT_AVAILABLE: u32 = 4318;
pub const ERROR_DEVICE_NOT_AVAILABLE: u32 = 4319;
pub const ERROR_REQUEST_REFUSED: u32 = 4320;
pub const ERROR_INVALID_DRIVE_OBJECT: u32 = 4321;
pub const ERROR_LIBRARY_FULL: u32 = 4322;
pub const ERROR_MEDIUM_NOT_ACCESSIBLE: u32 = 4323;
pub const ERROR_UNABLE_TO_LOAD_MEDIUM: u32 = 4324;
pub const ERROR_UNABLE_TO_INVENTORY_DRIVE: u32 = 4325;
pub const ERROR_UNABLE_TO_INVENTORY_SLOT: u32 = 4326;
pub const ERROR_UNABLE_TO_INVENTORY_TRANSPORT: u32 = 4327;
pub const ERROR_TRANSPORT_FULL: u32 = 4328;
pub const ERROR_CONTROLLING_IEPORT: u32 = 4329;
pub const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA: u32 = 4330;
pub const ERROR_CLEANER_SLOT_SET: u32 = 4331;
pub const ERROR_CLEANER_SLOT_NOT_SET: u32 = 4332;
pub const ERROR_CLEANER_CARTRIDGE_SPENT: u32 = 4333;
pub const ERROR_UNEXPECTED_OMID: u32 = 4334;
pub const ERROR_CANT_DELETE_LAST_ITEM: u32 = 4335;
pub const ERROR_MESSAGE_EXCEEDS_MAX_SIZE: u32 = 4336;
pub const ERROR_VOLUME_CONTAINS_SYS_FILES: u32 = 4337;
pub const ERROR_INDIGENOUS_TYPE: u32 = 4338;
pub const ERROR_NO_SUPPORTING_DRIVES: u32 = 4339;
pub const ERROR_CLEANER_CARTRIDGE_INSTALLED: u32 = 4340;
pub const ERROR_IEPORT_FULL: u32 = 4341;
pub const ERROR_FILE_OFFLINE: u32 = 4350;
pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE: u32 = 4351;
pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR: u32 = 4352;
pub const ERROR_NOT_A_REPARSE_POINT: u32 = 4390;
pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT: u32 = 4391;
pub const ERROR_INVALID_REPARSE_DATA: u32 = 4392;
pub const ERROR_REPARSE_TAG_INVALID: u32 = 4393;
pub const ERROR_REPARSE_TAG_MISMATCH: u32 = 4394;
pub const ERROR_REPARSE_POINT_ENCOUNTERED: u32 = 4395;
pub const ERROR_APP_DATA_NOT_FOUND: u32 = 4400;
pub const ERROR_APP_DATA_EXPIRED: u32 = 4401;
pub const ERROR_APP_DATA_CORRUPT: u32 = 4402;
pub const ERROR_APP_DATA_LIMIT_EXCEEDED: u32 = 4403;
pub const ERROR_APP_DATA_REBOOT_REQUIRED: u32 = 4404;
pub const ERROR_SECUREBOOT_ROLLBACK_DETECTED: u32 = 4420;
pub const ERROR_SECUREBOOT_POLICY_VIOLATION: u32 = 4421;
pub const ERROR_SECUREBOOT_INVALID_POLICY: u32 = 4422;
pub const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND: u32 = 4423;
pub const ERROR_SECUREBOOT_POLICY_NOT_SIGNED: u32 = 4424;
pub const ERROR_SECUREBOOT_NOT_ENABLED: u32 = 4425;
pub const ERROR_SECUREBOOT_FILE_REPLACED: u32 = 4426;
pub const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED: u32 = 4427;
pub const ERROR_SECUREBOOT_POLICY_UNKNOWN: u32 = 4428;
pub const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION: u32 = 4429;
pub const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH: u32 = 4430;
pub const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED: u32 = 4431;
pub const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH: u32 = 4432;
pub const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING: u32 = 4433;
pub const ERROR_SECUREBOOT_NOT_BASE_POLICY: u32 = 4434;
pub const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY: u32 = 4435;
pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED: u32 = 4440;
pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED: u32 = 4441;
pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED: u32 = 4442;
pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED: u32 = 4443;
pub const ERROR_ALREADY_HAS_STREAM_ID: u32 = 4444;
pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED: u32 = 4445;
pub const ERROR_WOF_WIM_HEADER_CORRUPT: u32 = 4446;
pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT: u32 = 4447;
pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT: u32 = 4448;
pub const ERROR_OBJECT_IS_IMMUTABLE: u32 = 4449;
pub const ERROR_VOLUME_NOT_SIS_ENABLED: u32 = 4500;
pub const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED: u32 = 4550;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION: u32 = 4551;
pub const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY: u32 = 4552;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED: u32 = 4553;
pub const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES: u32 = 4554;
pub const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED: u32 = 4555;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_MALICIOUS: u32 = 4556;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_PUA: u32 = 4557;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_DANGEROUS_EXT: u32 = 4558;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_OFFLINE: u32 = 4559;
pub const ERROR_VSM_NOT_INITIALIZED: u32 = 4560;
pub const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE: u32 = 4561;
pub const ERROR_VSM_KEY_CI_POLICY_ROLLBACK_DETECTED: u32 = 4562;
pub const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED: u32 = 4570;
pub const ERROR_PLATFORM_MANIFEST_INVALID: u32 = 4571;
pub const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED: u32 = 4572;
pub const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED: u32 = 4573;
pub const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND: u32 = 4574;
pub const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE: u32 = 4575;
pub const ERROR_PLATFORM_MANIFEST_NOT_SIGNED: u32 = 4576;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_UNFRIENDLY_FILE: u32 = 4580;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_UNATTAINABLE: u32 = 4581;
pub const ERROR_SYSTEM_INTEGRITY_REPUTATION_EXPLICIT_DENY_FILE: u32 = 4582;
pub const ERROR_SYSTEM_INTEGRITY_WHQL_NOT_SATISFIED: u32 = 4583;
pub const ERROR_DEPENDENT_RESOURCE_EXISTS: u32 = 5001;
pub const ERROR_DEPENDENCY_NOT_FOUND: u32 = 5002;
pub const ERROR_DEPENDENCY_ALREADY_EXISTS: u32 = 5003;
pub const ERROR_RESOURCE_NOT_ONLINE: u32 = 5004;
pub const ERROR_HOST_NODE_NOT_AVAILABLE: u32 = 5005;
pub const ERROR_RESOURCE_NOT_AVAILABLE: u32 = 5006;
pub const ERROR_RESOURCE_NOT_FOUND: u32 = 5007;
pub const ERROR_SHUTDOWN_CLUSTER: u32 = 5008;
pub const ERROR_CANT_EVICT_ACTIVE_NODE: u32 = 5009;
pub const ERROR_OBJECT_ALREADY_EXISTS: u32 = 5010;
pub const ERROR_OBJECT_IN_LIST: u32 = 5011;
pub const ERROR_GROUP_NOT_AVAILABLE: u32 = 5012;
pub const ERROR_GROUP_NOT_FOUND: u32 = 5013;
pub const ERROR_GROUP_NOT_ONLINE: u32 = 5014;
pub const ERROR_HOST_NODE_NOT_RESOURCE_OWNER: u32 = 5015;
pub const ERROR_HOST_NODE_NOT_GROUP_OWNER: u32 = 5016;
pub const ERROR_RESMON_CREATE_FAILED: u32 = 5017;
pub const ERROR_RESMON_ONLINE_FAILED: u32 = 5018;
pub const ERROR_RESOURCE_ONLINE: u32 = 5019;
pub const ERROR_QUORUM_RESOURCE: u32 = 5020;
pub const ERROR_NOT_QUORUM_CAPABLE: u32 = 5021;
pub const ERROR_CLUSTER_SHUTTING_DOWN: u32 = 5022;
pub const ERROR_INVALID_STATE: u32 = 5023;
pub const ERROR_RESOURCE_PROPERTIES_STORED: u32 = 5024;
pub const ERROR_NOT_QUORUM_CLASS: u32 = 5025;
pub const ERROR_CORE_RESOURCE: u32 = 5026;
pub const ERROR_QUORUM_RESOURCE_ONLINE_FAILED: u32 = 5027;
pub const ERROR_QUORUMLOG_OPEN_FAILED: u32 = 5028;
pub const ERROR_CLUSTERLOG_CORRUPT: u32 = 5029;
pub const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE: u32 = 5030;
pub const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE: u32 = 5031;
pub const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND: u32 = 5032;
pub const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE: u32 = 5033;
pub const ERROR_QUORUM_OWNER_ALIVE: u32 = 5034;
pub const ERROR_NETWORK_NOT_AVAILABLE: u32 = 5035;
pub const ERROR_NODE_NOT_AVAILABLE: u32 = 5036;
pub const ERROR_ALL_NODES_NOT_AVAILABLE: u32 = 5037;
pub const ERROR_RESOURCE_FAILED: u32 = 5038;
pub const ERROR_CLUSTER_INVALID_NODE: u32 = 5039;
pub const ERROR_CLUSTER_NODE_EXISTS: u32 = 5040;
pub const ERROR_CLUSTER_JOIN_IN_PROGRESS: u32 = 5041;
pub const ERROR_CLUSTER_NODE_NOT_FOUND: u32 = 5042;
pub const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND: u32 = 5043;
pub const ERROR_CLUSTER_NETWORK_EXISTS: u32 = 5044;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND: u32 = 5045;
pub const ERROR_CLUSTER_NETINTERFACE_EXISTS: u32 = 5046;
pub const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND: u32 = 5047;
pub const ERROR_CLUSTER_INVALID_REQUEST: u32 = 5048;
pub const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER: u32 = 5049;
pub const ERROR_CLUSTER_NODE_DOWN: u32 = 5050;
pub const ERROR_CLUSTER_NODE_UNREACHABLE: u32 = 5051;
pub const ERROR_CLUSTER_NODE_NOT_MEMBER: u32 = 5052;
pub const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS: u32 = 5053;
pub const ERROR_CLUSTER_INVALID_NETWORK: u32 = 5054;
pub const ERROR_CLUSTER_NODE_UP: u32 = 5056;
pub const ERROR_CLUSTER_IPADDR_IN_USE: u32 = 5057;
pub const ERROR_CLUSTER_NODE_NOT_PAUSED: u32 = 5058;
pub const ERROR_CLUSTER_NO_SECURITY_CONTEXT: u32 = 5059;
pub const ERROR_CLUSTER_NETWORK_NOT_INTERNAL: u32 = 5060;
pub const ERROR_CLUSTER_NODE_ALREADY_UP: u32 = 5061;
pub const ERROR_CLUSTER_NODE_ALREADY_DOWN: u32 = 5062;
pub const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE: u32 = 5063;
pub const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE: u32 = 5064;
pub const ERROR_CLUSTER_NODE_ALREADY_MEMBER: u32 = 5065;
pub const ERROR_CLUSTER_LAST_INTERNAL_NETWORK: u32 = 5066;
pub const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS: u32 = 5067;
pub const ERROR_INVALID_OPERATION_ON_QUORUM: u32 = 5068;
pub const ERROR_DEPENDENCY_NOT_ALLOWED: u32 = 5069;
pub const ERROR_CLUSTER_NODE_PAUSED: u32 = 5070;
pub const ERROR_NODE_CANT_HOST_RESOURCE: u32 = 5071;
pub const ERROR_CLUSTER_NODE_NOT_READY: u32 = 5072;
pub const ERROR_CLUSTER_NODE_SHUTTING_DOWN: u32 = 5073;
pub const ERROR_CLUSTER_JOIN_ABORTED: u32 = 5074;
pub const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS: u32 = 5075;
pub const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED: u32 = 5076;
pub const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED: u32 = 5077;
pub const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND: u32 = 5078;
pub const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED: u32 = 5079;
pub const ERROR_CLUSTER_RESNAME_NOT_FOUND: u32 = 5080;
pub const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED: u32 = 5081;
pub const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST: u32 = 5082;
pub const ERROR_CLUSTER_DATABASE_SEQMISMATCH: u32 = 5083;
pub const ERROR_RESMON_INVALID_STATE: u32 = 5084;
pub const ERROR_CLUSTER_GUM_NOT_LOCKER: u32 = 5085;
pub const ERROR_QUORUM_DISK_NOT_FOUND: u32 = 5086;
pub const ERROR_DATABASE_BACKUP_CORRUPT: u32 = 5087;
pub const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT: u32 = 5088;
pub const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE: u32 = 5089;
pub const ERROR_NO_ADMIN_ACCESS_POINT: u32 = 5090;
pub const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE: u32 = 5890;
pub const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND: u32 = 5891;
pub const ERROR_CLUSTER_MEMBERSHIP_HALT: u32 = 5892;
pub const ERROR_CLUSTER_INSTANCE_ID_MISMATCH: u32 = 5893;
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP: u32 = 5894;
pub const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH: u32 = 5895;
pub const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP: u32 = 5896;
pub const ERROR_CLUSTER_PARAMETER_MISMATCH: u32 = 5897;
pub const ERROR_NODE_CANNOT_BE_CLUSTERED: u32 = 5898;
pub const ERROR_CLUSTER_WRONG_OS_VERSION: u32 = 5899;
pub const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME: u32 = 5900;
pub const ERROR_CLUSCFG_ALREADY_COMMITTED: u32 = 5901;
pub const ERROR_CLUSCFG_ROLLBACK_FAILED: u32 = 5902;
pub const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT: u32 = 5903;
pub const ERROR_CLUSTER_OLD_VERSION: u32 = 5904;
pub const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME: u32 = 5905;
pub const ERROR_CLUSTER_NO_NET_ADAPTERS: u32 = 5906;
pub const ERROR_CLUSTER_POISONED: u32 = 5907;
pub const ERROR_CLUSTER_GROUP_MOVING: u32 = 5908;
pub const ERROR_CLUSTER_RESOURCE_TYPE_BUSY: u32 = 5909;
pub const ERROR_RESOURCE_CALL_TIMED_OUT: u32 = 5910;
pub const ERROR_INVALID_CLUSTER_IPV6_ADDRESS: u32 = 5911;
pub const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION: u32 = 5912;
pub const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS: u32 = 5913;
pub const ERROR_CLUSTER_PARTIAL_SEND: u32 = 5914;
pub const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION: u32 = 5915;
pub const ERROR_CLUSTER_INVALID_STRING_TERMINATION: u32 = 5916;
pub const ERROR_CLUSTER_INVALID_STRING_FORMAT: u32 = 5917;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS: u32 = 5918;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS: u32 = 5919;
pub const ERROR_CLUSTER_NULL_DATA: u32 = 5920;
pub const ERROR_CLUSTER_PARTIAL_READ: u32 = 5921;
pub const ERROR_CLUSTER_PARTIAL_WRITE: u32 = 5922;
pub const ERROR_CLUSTER_CANT_DESERIALIZE_DATA: u32 = 5923;
pub const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT: u32 = 5924;
pub const ERROR_CLUSTER_NO_QUORUM: u32 = 5925;
pub const ERROR_CLUSTER_INVALID_IPV6_NETWORK: u32 = 5926;
pub const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK: u32 = 5927;
pub const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP: u32 = 5928;
pub const ERROR_DEPENDENCY_TREE_TOO_COMPLEX: u32 = 5929;
pub const ERROR_EXCEPTION_IN_RESOURCE_CALL: u32 = 5930;
pub const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION: u32 = 5931;
pub const ERROR_CLUSTER_NOT_INSTALLED: u32 = 5932;
pub const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE: u32 = 5933;
pub const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER: u32 = 5934;
pub const ERROR_CLUSTER_TOO_MANY_NODES: u32 = 5935;
pub const ERROR_CLUSTER_OBJECT_ALREADY_USED: u32 = 5936;
pub const ERROR_NONCORE_GROUPS_FOUND: u32 = 5937;
pub const ERROR_FILE_SHARE_RESOURCE_CONFLICT: u32 = 5938;
pub const ERROR_CLUSTER_EVICT_INVALID_REQUEST: u32 = 5939;
pub const ERROR_CLUSTER_SINGLETON_RESOURCE: u32 = 5940;
pub const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE: u32 = 5941;
pub const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED: u32 = 5942;
pub const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR: u32 = 5943;
pub const ERROR_CLUSTER_GROUP_BUSY: u32 = 5944;
pub const ERROR_CLUSTER_NOT_SHARED_VOLUME: u32 = 5945;
pub const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR: u32 = 5946;
pub const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE: u32 = 5947;
pub const ERROR_CLUSTER_USE_SHARED_VOLUMES_API: u32 = 5948;
pub const ERROR_CLUSTER_BACKUP_IN_PROGRESS: u32 = 5949;
pub const ERROR_NON_CSV_PATH: u32 = 5950;
pub const ERROR_CSV_VOLUME_NOT_LOCAL: u32 = 5951;
pub const ERROR_CLUSTER_WATCHDOG_TERMINATING: u32 = 5952;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES: u32 = 5953;
pub const ERROR_CLUSTER_INVALID_NODE_WEIGHT: u32 = 5954;
pub const ERROR_CLUSTER_RESOURCE_VETOED_CALL: u32 = 5955;
pub const ERROR_RESMON_SYSTEM_RESOURCES_LACKING: u32 = 5956;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION: u32 = 5957;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE: u32 = 5958;
pub const ERROR_CLUSTER_GROUP_QUEUED: u32 = 5959;
pub const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS: u32 = 5960;
pub const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED: u32 = 5961;
pub const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS: u32 = 5962;
pub const ERROR_CLUSTER_DISK_NOT_CONNECTED: u32 = 5963;
pub const ERROR_DISK_NOT_CSV_CAPABLE: u32 = 5964;
pub const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE: u32 = 5965;
pub const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED: u32 = 5966;
pub const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED: u32 = 5967;
pub const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES: u32 = 5968;
pub const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES: u32 = 5969;
pub const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE: u32 = 5970;
pub const ERROR_CLUSTER_AFFINITY_CONFLICT: u32 = 5971;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE: u32 = 5972;
pub const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS: u32 = 5973;
pub const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED: u32 = 5974;
pub const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED: u32 = 5975;
pub const ERROR_CLUSTER_UPGRADE_IN_PROGRESS: u32 = 5976;
pub const ERROR_CLUSTER_UPGRADE_INCOMPLETE: u32 = 5977;
pub const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD: u32 = 5978;
pub const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT: u32 = 5979;
pub const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER: u32 = 5980;
pub const ERROR_CLUSTER_RESOURCE_NOT_MONITORED: u32 = 5981;
pub const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED: u32 = 5982;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICATED: u32 = 5983;
pub const ERROR_CLUSTER_NODE_ISOLATED: u32 = 5984;
pub const ERROR_CLUSTER_NODE_QUARANTINED: u32 = 5985;
pub const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED: u32 = 5986;
pub const ERROR_CLUSTER_SPACE_DEGRADED: u32 = 5987;
pub const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED: u32 = 5988;
pub const ERROR_CLUSTER_CSV_INVALID_HANDLE: u32 = 5989;
pub const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR: u32 = 5990;
pub const ERROR_GROUPSET_NOT_AVAILABLE: u32 = 5991;
pub const ERROR_GROUPSET_NOT_FOUND: u32 = 5992;
pub const ERROR_GROUPSET_CANT_PROVIDE: u32 = 5993;
pub const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND: u32 = 5994;
pub const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY: u32 = 5995;
pub const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION: u32 = 5996;
pub const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS: u32 = 5997;
pub const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME: u32 = 5998;
pub const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE: u32 = 5999;
pub const ERROR_ENCRYPTION_FAILED: u32 = 6000;
pub const ERROR_DECRYPTION_FAILED: u32 = 6001;
pub const ERROR_FILE_ENCRYPTED: u32 = 6002;
pub const ERROR_NO_RECOVERY_POLICY: u32 = 6003;
pub const ERROR_NO_EFS: u32 = 6004;
pub const ERROR_WRONG_EFS: u32 = 6005;
pub const ERROR_NO_USER_KEYS: u32 = 6006;
pub const ERROR_FILE_NOT_ENCRYPTED: u32 = 6007;
pub const ERROR_NOT_EXPORT_FORMAT: u32 = 6008;
pub const ERROR_FILE_READ_ONLY: u32 = 6009;
pub const ERROR_DIR_EFS_DISALLOWED: u32 = 6010;
pub const ERROR_EFS_SERVER_NOT_TRUSTED: u32 = 6011;
pub const ERROR_BAD_RECOVERY_POLICY: u32 = 6012;
pub const ERROR_EFS_ALG_BLOB_TOO_BIG: u32 = 6013;
pub const ERROR_VOLUME_NOT_SUPPORT_EFS: u32 = 6014;
pub const ERROR_EFS_DISABLED: u32 = 6015;
pub const ERROR_EFS_VERSION_NOT_SUPPORT: u32 = 6016;
pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE: u32 = 6017;
pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER: u32 = 6018;
pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE: u32 = 6019;
pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE: u32 = 6020;
pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE: u32 = 6021;
pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION: u32 = 6022;
pub const ERROR_WIP_ENCRYPTION_FAILED: u32 = 6023;
pub const ERROR_PDE_ENCRYPTION_UNAVAILABLE_FAILURE: u32 = 6024;
pub const ERROR_PDE_DECRYPTION_UNAVAILABLE_FAILURE: u32 = 6025;
pub const ERROR_PDE_DECRYPTION_UNAVAILABLE: u32 = 6026;
pub const ERROR_NO_BROWSER_SERVERS_FOUND: u32 = 6118;
pub const SCHED_E_SERVICE_NOT_LOCALSYSTEM: u32 = 6200;
pub const ERROR_CLUSTER_OBJECT_IS_CLUSTER_SET_VM: u32 = 6250;
pub const ERROR_CNU_TEMPLATE_ALREADY_EXISTS: u32 = 6251;
pub const ERROR_CNU_TEMPLATE_NAME_NOT_FOUND: u32 = 6252;
pub const ERROR_CNU_RUN_NAME_NOT_FOUND: u32 = 6253;
pub const ERROR_CNU_RUN_ALREADY_IN_PROGRESS: u32 = 6254;
pub const ERROR_CNU_RUN_NOT_IN_PROGRESS: u32 = 6255;
pub const ERROR_CNU_NOT_READY: u32 = 6256;
pub const ERROR_LOG_SECTOR_INVALID: u32 = 6600;
pub const ERROR_LOG_SECTOR_PARITY_INVALID: u32 = 6601;
pub const ERROR_LOG_SECTOR_REMAPPED: u32 = 6602;
pub const ERROR_LOG_BLOCK_INCOMPLETE: u32 = 6603;
pub const ERROR_LOG_INVALID_RANGE: u32 = 6604;
pub const ERROR_LOG_BLOCKS_EXHAUSTED: u32 = 6605;
pub const ERROR_LOG_READ_CONTEXT_INVALID: u32 = 6606;
pub const ERROR_LOG_RESTART_INVALID: u32 = 6607;
pub const ERROR_LOG_BLOCK_VERSION: u32 = 6608;
pub const ERROR_LOG_BLOCK_INVALID: u32 = 6609;
pub const ERROR_LOG_READ_MODE_INVALID: u32 = 6610;
pub const ERROR_LOG_NO_RESTART: u32 = 6611;
pub const ERROR_LOG_METADATA_CORRUPT: u32 = 6612;
pub const ERROR_LOG_METADATA_INVALID: u32 = 6613;
pub const ERROR_LOG_METADATA_INCONSISTENT: u32 = 6614;
pub const ERROR_LOG_RESERVATION_INVALID: u32 = 6615;
pub const ERROR_LOG_CANT_DELETE: u32 = 6616;
pub const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED: u32 = 6617;
pub const ERROR_LOG_START_OF_LOG: u32 = 6618;
pub const ERROR_LOG_POLICY_ALREADY_INSTALLED: u32 = 6619;
pub const ERROR_LOG_POLICY_NOT_INSTALLED: u32 = 6620;
pub const ERROR_LOG_POLICY_INVALID: u32 = 6621;
pub const ERROR_LOG_POLICY_CONFLICT: u32 = 6622;
pub const ERROR_LOG_PINNED_ARCHIVE_TAIL: u32 = 6623;
pub const ERROR_LOG_RECORD_NONEXISTENT: u32 = 6624;
pub const ERROR_LOG_RECORDS_RESERVED_INVALID: u32 = 6625;
pub const ERROR_LOG_SPACE_RESERVED_INVALID: u32 = 6626;
pub const ERROR_LOG_TAIL_INVALID: u32 = 6627;
pub const ERROR_LOG_FULL: u32 = 6628;
pub const ERROR_COULD_NOT_RESIZE_LOG: u32 = 6629;
pub const ERROR_LOG_MULTIPLEXED: u32 = 6630;
pub const ERROR_LOG_DEDICATED: u32 = 6631;
pub const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS: u32 = 6632;
pub const ERROR_LOG_ARCHIVE_IN_PROGRESS: u32 = 6633;
pub const ERROR_LOG_EPHEMERAL: u32 = 6634;
pub const ERROR_LOG_NOT_ENOUGH_CONTAINERS: u32 = 6635;
pub const ERROR_LOG_CLIENT_ALREADY_REGISTERED: u32 = 6636;
pub const ERROR_LOG_CLIENT_NOT_REGISTERED: u32 = 6637;
pub const ERROR_LOG_FULL_HANDLER_IN_PROGRESS: u32 = 6638;
pub const ERROR_LOG_CONTAINER_READ_FAILED: u32 = 6639;
pub const ERROR_LOG_CONTAINER_WRITE_FAILED: u32 = 6640;
pub const ERROR_LOG_CONTAINER_OPEN_FAILED: u32 = 6641;
pub const ERROR_LOG_CONTAINER_STATE_INVALID: u32 = 6642;
pub const ERROR_LOG_STATE_INVALID: u32 = 6643;
pub const ERROR_LOG_PINNED: u32 = 6644;
pub const ERROR_LOG_METADATA_FLUSH_FAILED: u32 = 6645;
pub const ERROR_LOG_INCONSISTENT_SECURITY: u32 = 6646;
pub const ERROR_LOG_APPENDED_FLUSH_FAILED: u32 = 6647;
pub const ERROR_LOG_PINNED_RESERVATION: u32 = 6648;
pub const ERROR_INVALID_TRANSACTION: u32 = 6700;
pub const ERROR_TRANSACTION_NOT_ACTIVE: u32 = 6701;
pub const ERROR_TRANSACTION_REQUEST_NOT_VALID: u32 = 6702;
pub const ERROR_TRANSACTION_NOT_REQUESTED: u32 = 6703;
pub const ERROR_TRANSACTION_ALREADY_ABORTED: u32 = 6704;
pub const ERROR_TRANSACTION_ALREADY_COMMITTED: u32 = 6705;
pub const ERROR_TM_INITIALIZATION_FAILED: u32 = 6706;
pub const ERROR_RESOURCEMANAGER_READ_ONLY: u32 = 6707;
pub const ERROR_TRANSACTION_NOT_JOINED: u32 = 6708;
pub const ERROR_TRANSACTION_SUPERIOR_EXISTS: u32 = 6709;
pub const ERROR_CRM_PROTOCOL_ALREADY_EXISTS: u32 = 6710;
pub const ERROR_TRANSACTION_PROPAGATION_FAILED: u32 = 6711;
pub const ERROR_CRM_PROTOCOL_NOT_FOUND: u32 = 6712;
pub const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER: u32 = 6713;
pub const ERROR_CURRENT_TRANSACTION_NOT_VALID: u32 = 6714;
pub const ERROR_TRANSACTION_NOT_FOUND: u32 = 6715;
pub const ERROR_RESOURCEMANAGER_NOT_FOUND: u32 = 6716;
pub const ERROR_ENLISTMENT_NOT_FOUND: u32 = 6717;
pub const ERROR_TRANSACTIONMANAGER_NOT_FOUND: u32 = 6718;
pub const ERROR_TRANSACTIONMANAGER_NOT_ONLINE: u32 = 6719;
pub const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION: u32 = 6720;
pub const ERROR_TRANSACTION_NOT_ROOT: u32 = 6721;
pub const ERROR_TRANSACTION_OBJECT_EXPIRED: u32 = 6722;
pub const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED: u32 = 6723;
pub const ERROR_TRANSACTION_RECORD_TOO_LONG: u32 = 6724;
pub const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED: u32 = 6725;
pub const ERROR_TRANSACTION_INTEGRITY_VIOLATED: u32 = 6726;
pub const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH: u32 = 6727;
pub const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT: u32 = 6728;
pub const ERROR_TRANSACTION_MUST_WRITETHROUGH: u32 = 6729;
pub const ERROR_TRANSACTION_NO_SUPERIOR: u32 = 6730;
pub const ERROR_HEURISTIC_DAMAGE_POSSIBLE: u32 = 6731;
pub const ERROR_TRANSACTIONAL_CONFLICT: u32 = 6800;
pub const ERROR_RM_NOT_ACTIVE: u32 = 6801;
pub const ERROR_RM_METADATA_CORRUPT: u32 = 6802;
pub const ERROR_DIRECTORY_NOT_RM: u32 = 6803;
pub const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE: u32 = 6805;
pub const ERROR_LOG_RESIZE_INVALID_SIZE: u32 = 6806;
pub const ERROR_OBJECT_NO_LONGER_EXISTS: u32 = 6807;
pub const ERROR_STREAM_MINIVERSION_NOT_FOUND: u32 = 6808;
pub const ERROR_STREAM_MINIVERSION_NOT_VALID: u32 = 6809;
pub const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION: u32 = 6810;
pub const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT: u32 = 6811;
pub const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS: u32 = 6812;
pub const ERROR_REMOTE_FILE_VERSION_MISMATCH: u32 = 6814;
pub const ERROR_HANDLE_NO_LONGER_VALID: u32 = 6815;
pub const ERROR_NO_TXF_METADATA: u32 = 6816;
pub const ERROR_LOG_CORRUPTION_DETECTED: u32 = 6817;
pub const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN: u32 = 6818;
pub const ERROR_RM_DISCONNECTED: u32 = 6819;
pub const ERROR_ENLISTMENT_NOT_SUPERIOR: u32 = 6820;
pub const ERROR_RECOVERY_NOT_NEEDED: u32 = 6821;
pub const ERROR_RM_ALREADY_STARTED: u32 = 6822;
pub const ERROR_FILE_IDENTITY_NOT_PERSISTENT: u32 = 6823;
pub const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY: u32 = 6824;
pub const ERROR_CANT_CROSS_RM_BOUNDARY: u32 = 6825;
pub const ERROR_TXF_DIR_NOT_EMPTY: u32 = 6826;
pub const ERROR_INDOUBT_TRANSACTIONS_EXIST: u32 = 6827;
pub const ERROR_TM_VOLATILE: u32 = 6828;
pub const ERROR_ROLLBACK_TIMER_EXPIRED: u32 = 6829;
pub const ERROR_TXF_ATTRIBUTE_CORRUPT: u32 = 6830;
pub const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION: u32 = 6831;
pub const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED: u32 = 6832;
pub const ERROR_LOG_GROWTH_FAILED: u32 = 6833;
pub const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE: u32 = 6834;
pub const ERROR_TXF_METADATA_ALREADY_PRESENT: u32 = 6835;
pub const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET: u32 = 6836;
pub const ERROR_TRANSACTION_REQUIRED_PROMOTION: u32 = 6837;
pub const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION: u32 = 6838;
pub const ERROR_TRANSACTIONS_NOT_FROZEN: u32 = 6839;
pub const ERROR_TRANSACTION_FREEZE_IN_PROGRESS: u32 = 6840;
pub const ERROR_NOT_SNAPSHOT_VOLUME: u32 = 6841;
pub const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES: u32 = 6842;
pub const ERROR_DATA_LOST_REPAIR: u32 = 6843;
pub const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION: u32 = 6844;
pub const ERROR_TM_IDENTITY_MISMATCH: u32 = 6845;
pub const ERROR_FLOATED_SECTION: u32 = 6846;
pub const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK: u32 = 6847;
pub const ERROR_CANNOT_ABORT_TRANSACTIONS: u32 = 6848;
pub const ERROR_BAD_CLUSTERS: u32 = 6849;
pub const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION: u32 = 6850;
pub const ERROR_VOLUME_DIRTY: u32 = 6851;
pub const ERROR_NO_LINK_TRACKING_IN_TRANSACTION: u32 = 6852;
pub const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION: u32 = 6853;
pub const ERROR_EXPIRED_HANDLE: u32 = 6854;
pub const ERROR_TRANSACTION_NOT_ENLISTED: u32 = 6855;
pub const ERROR_ENLISTMENT_NOT_INITIALIZED: u32 = 6856;
pub const ERROR_CTX_WINSTATION_NAME_INVALID: u32 = 7001;
pub const ERROR_CTX_INVALID_PD: u32 = 7002;
pub const ERROR_CTX_PD_NOT_FOUND: u32 = 7003;
pub const ERROR_CTX_WD_NOT_FOUND: u32 = 7004;
pub const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY: u32 = 7005;
pub const ERROR_CTX_SERVICE_NAME_COLLISION: u32 = 7006;
pub const ERROR_CTX_CLOSE_PENDING: u32 = 7007;
pub const ERROR_CTX_NO_OUTBUF: u32 = 7008;
pub const ERROR_CTX_MODEM_INF_NOT_FOUND: u32 = 7009;
pub const ERROR_CTX_INVALID_MODEMNAME: u32 = 7010;
pub const ERROR_CTX_MODEM_RESPONSE_ERROR: u32 = 7011;
pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT: u32 = 7012;
pub const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER: u32 = 7013;
pub const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE: u32 = 7014;
pub const ERROR_CTX_MODEM_RESPONSE_BUSY: u32 = 7015;
pub const ERROR_CTX_MODEM_RESPONSE_VOICE: u32 = 7016;
pub const ERROR_CTX_TD_ERROR: u32 = 7017;
pub const ERROR_CTX_WINSTATION_NOT_FOUND: u32 = 7022;
pub const ERROR_CTX_WINSTATION_ALREADY_EXISTS: u32 = 7023;
pub const ERROR_CTX_WINSTATION_BUSY: u32 = 7024;
pub const ERROR_CTX_BAD_VIDEO_MODE: u32 = 7025;
pub const ERROR_CTX_GRAPHICS_INVALID: u32 = 7035;
pub const ERROR_CTX_LOGON_DISABLED: u32 = 7037;
pub const ERROR_CTX_NOT_CONSOLE: u32 = 7038;
pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT: u32 = 7040;
pub const ERROR_CTX_CONSOLE_DISCONNECT: u32 = 7041;
pub const ERROR_CTX_CONSOLE_CONNECT: u32 = 7042;
pub const ERROR_CTX_SHADOW_DENIED: u32 = 7044;
pub const ERROR_CTX_WINSTATION_ACCESS_DENIED: u32 = 7045;
pub const ERROR_CTX_INVALID_WD: u32 = 7049;
pub const ERROR_CTX_SHADOW_INVALID: u32 = 7050;
pub const ERROR_CTX_SHADOW_DISABLED: u32 = 7051;
pub const ERROR_CTX_CLIENT_LICENSE_IN_USE: u32 = 7052;
pub const ERROR_CTX_CLIENT_LICENSE_NOT_SET: u32 = 7053;
pub const ERROR_CTX_LICENSE_NOT_AVAILABLE: u32 = 7054;
pub const ERROR_CTX_LICENSE_CLIENT_INVALID: u32 = 7055;
pub const ERROR_CTX_LICENSE_EXPIRED: u32 = 7056;
pub const ERROR_CTX_SHADOW_NOT_RUNNING: u32 = 7057;
pub const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE: u32 = 7058;
pub const ERROR_ACTIVATION_COUNT_EXCEEDED: u32 = 7059;
pub const ERROR_CTX_WINSTATIONS_DISABLED: u32 = 7060;
pub const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED: u32 = 7061;
pub const ERROR_CTX_SESSION_IN_USE: u32 = 7062;
pub const ERROR_CTX_NO_FORCE_LOGOFF: u32 = 7063;
pub const ERROR_CTX_ACCOUNT_RESTRICTION: u32 = 7064;
pub const ERROR_RDP_PROTOCOL_ERROR: u32 = 7065;
pub const ERROR_CTX_CDM_CONNECT: u32 = 7066;
pub const ERROR_CTX_CDM_DISCONNECT: u32 = 7067;
pub const ERROR_CTX_SECURITY_LAYER_ERROR: u32 = 7068;
pub const ERROR_TS_INCOMPATIBLE_SESSIONS: u32 = 7069;
pub const ERROR_TS_VIDEO_SUBSYSTEM_ERROR: u32 = 7070;
pub const FRS_ERR_INVALID_API_SEQUENCE: u32 = 8001;
pub const FRS_ERR_STARTING_SERVICE: u32 = 8002;
pub const FRS_ERR_STOPPING_SERVICE: u32 = 8003;
pub const FRS_ERR_INTERNAL_API: u32 = 8004;
pub const FRS_ERR_INTERNAL: u32 = 8005;
pub const FRS_ERR_SERVICE_COMM: u32 = 8006;
pub const FRS_ERR_INSUFFICIENT_PRIV: u32 = 8007;
pub const FRS_ERR_AUTHENTICATION: u32 = 8008;
pub const FRS_ERR_PARENT_INSUFFICIENT_PRIV: u32 = 8009;
pub const FRS_ERR_PARENT_AUTHENTICATION: u32 = 8010;
pub const FRS_ERR_CHILD_TO_PARENT_COMM: u32 = 8011;
pub const FRS_ERR_PARENT_TO_CHILD_COMM: u32 = 8012;
pub const FRS_ERR_SYSVOL_POPULATE: u32 = 8013;
pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: u32 = 8014;
pub const FRS_ERR_SYSVOL_IS_BUSY: u32 = 8015;
pub const FRS_ERR_SYSVOL_DEMOTE: u32 = 8016;
pub const FRS_ERR_INVALID_SERVICE_PARAMETER: u32 = 8017;
pub const DS_S_SUCCESS: u32 = 0;
pub const ERROR_DS_NOT_INSTALLED: u32 = 8200;
pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY: u32 = 8201;
pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE: u32 = 8202;
pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX: u32 = 8203;
pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED: u32 = 8204;
pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS: u32 = 8205;
pub const ERROR_DS_BUSY: u32 = 8206;
pub const ERROR_DS_UNAVAILABLE: u32 = 8207;
pub const ERROR_DS_NO_RIDS_ALLOCATED: u32 = 8208;
pub const ERROR_DS_NO_MORE_RIDS: u32 = 8209;
pub const ERROR_DS_INCORRECT_ROLE_OWNER: u32 = 8210;
pub const ERROR_DS_RIDMGR_INIT_ERROR: u32 = 8211;
pub const ERROR_DS_OBJ_CLASS_VIOLATION: u32 = 8212;
pub const ERROR_DS_CANT_ON_NON_LEAF: u32 = 8213;
pub const ERROR_DS_CANT_ON_RDN: u32 = 8214;
pub const ERROR_DS_CANT_MOD_OBJ_CLASS: u32 = 8215;
pub const ERROR_DS_CROSS_DOM_MOVE_ERROR: u32 = 8216;
pub const ERROR_DS_GC_NOT_AVAILABLE: u32 = 8217;
pub const ERROR_SHARED_POLICY: u32 = 8218;
pub const ERROR_POLICY_OBJECT_NOT_FOUND: u32 = 8219;
pub const ERROR_POLICY_ONLY_IN_DS: u32 = 8220;
pub const ERROR_PROMOTION_ACTIVE: u32 = 8221;
pub const ERROR_NO_PROMOTION_ACTIVE: u32 = 8222;
pub const ERROR_DS_OPERATIONS_ERROR: u32 = 8224;
pub const ERROR_DS_PROTOCOL_ERROR: u32 = 8225;
pub const ERROR_DS_TIMELIMIT_EXCEEDED: u32 = 8226;
pub const ERROR_DS_SIZELIMIT_EXCEEDED: u32 = 8227;
pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED: u32 = 8228;
pub const ERROR_DS_COMPARE_FALSE: u32 = 8229;
pub const ERROR_DS_COMPARE_TRUE: u32 = 8230;
pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED: u32 = 8231;
pub const ERROR_DS_STRONG_AUTH_REQUIRED: u32 = 8232;
pub const ERROR_DS_INAPPROPRIATE_AUTH: u32 = 8233;
pub const ERROR_DS_AUTH_UNKNOWN: u32 = 8234;
pub const ERROR_DS_REFERRAL: u32 = 8235;
pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION: u32 = 8236;
pub const ERROR_DS_CONFIDENTIALITY_REQUIRED: u32 = 8237;
pub const ERROR_DS_INAPPROPRIATE_MATCHING: u32 = 8238;
pub const ERROR_DS_CONSTRAINT_VIOLATION: u32 = 8239;
pub const ERROR_DS_NO_SUCH_OBJECT: u32 = 8240;
pub const ERROR_DS_ALIAS_PROBLEM: u32 = 8241;
pub const ERROR_DS_INVALID_DN_SYNTAX: u32 = 8242;
pub const ERROR_DS_IS_LEAF: u32 = 8243;
pub const ERROR_DS_ALIAS_DEREF_PROBLEM: u32 = 8244;
pub const ERROR_DS_UNWILLING_TO_PERFORM: u32 = 8245;
pub const ERROR_DS_LOOP_DETECT: u32 = 8246;
pub const ERROR_DS_NAMING_VIOLATION: u32 = 8247;
pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE: u32 = 8248;
pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS: u32 = 8249;
pub const ERROR_DS_SERVER_DOWN: u32 = 8250;
pub const ERROR_DS_LOCAL_ERROR: u32 = 8251;
pub const ERROR_DS_ENCODING_ERROR: u32 = 8252;
pub const ERROR_DS_DECODING_ERROR: u32 = 8253;
pub const ERROR_DS_FILTER_UNKNOWN: u32 = 8254;
pub const ERROR_DS_PARAM_ERROR: u32 = 8255;
pub const ERROR_DS_NOT_SUPPORTED: u32 = 8256;
pub const ERROR_DS_NO_RESULTS_RETURNED: u32 = 8257;
pub const ERROR_DS_CONTROL_NOT_FOUND: u32 = 8258;
pub const ERROR_DS_CLIENT_LOOP: u32 = 8259;
pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED: u32 = 8260;
pub const ERROR_DS_SORT_CONTROL_MISSING: u32 = 8261;
pub const ERROR_DS_OFFSET_RANGE_ERROR: u32 = 8262;
pub const ERROR_DS_RIDMGR_DISABLED: u32 = 8263;
pub const ERROR_DS_ROOT_MUST_BE_NC: u32 = 8301;
pub const ERROR_DS_ADD_REPLICA_INHIBITED: u32 = 8302;
pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA: u32 = 8303;
pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED: u32 = 8304;
pub const ERROR_DS_OBJ_STRING_NAME_EXISTS: u32 = 8305;
pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA: u32 = 8306;
pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA: u32 = 8307;
pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND: u32 = 8308;
pub const ERROR_DS_USER_BUFFER_TO_SMALL: u32 = 8309;
pub const ERROR_DS_ATT_IS_NOT_ON_OBJ: u32 = 8310;
pub const ERROR_DS_ILLEGAL_MOD_OPERATION: u32 = 8311;
pub const ERROR_DS_OBJ_TOO_LARGE: u32 = 8312;
pub const ERROR_DS_BAD_INSTANCE_TYPE: u32 = 8313;
pub const ERROR_DS_MASTERDSA_REQUIRED: u32 = 8314;
pub const ERROR_DS_OBJECT_CLASS_REQUIRED: u32 = 8315;
pub const ERROR_DS_MISSING_REQUIRED_ATT: u32 = 8316;
pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS: u32 = 8317;
pub const ERROR_DS_ATT_ALREADY_EXISTS: u32 = 8318;
pub const ERROR_DS_CANT_ADD_ATT_VALUES: u32 = 8320;
pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT: u32 = 8321;
pub const ERROR_DS_RANGE_CONSTRAINT: u32 = 8322;
pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS: u32 = 8323;
pub const ERROR_DS_CANT_REM_MISSING_ATT: u32 = 8324;
pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL: u32 = 8325;
pub const ERROR_DS_ROOT_CANT_BE_SUBREF: u32 = 8326;
pub const ERROR_DS_NO_CHAINING: u32 = 8327;
pub const ERROR_DS_NO_CHAINED_EVAL: u32 = 8328;
pub const ERROR_DS_NO_PARENT_OBJECT: u32 = 8329;
pub const ERROR_DS_PARENT_IS_AN_ALIAS: u32 = 8330;
pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS: u32 = 8331;
pub const ERROR_DS_CHILDREN_EXIST: u32 = 8332;
pub const ERROR_DS_OBJ_NOT_FOUND: u32 = 8333;
pub const ERROR_DS_ALIASED_OBJ_MISSING: u32 = 8334;
pub const ERROR_DS_BAD_NAME_SYNTAX: u32 = 8335;
pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS: u32 = 8336;
pub const ERROR_DS_CANT_DEREF_ALIAS: u32 = 8337;
pub const ERROR_DS_OUT_OF_SCOPE: u32 = 8338;
pub const ERROR_DS_OBJECT_BEING_REMOVED: u32 = 8339;
pub const ERROR_DS_CANT_DELETE_DSA_OBJ: u32 = 8340;
pub const ERROR_DS_GENERIC_ERROR: u32 = 8341;
pub const ERROR_DS_DSA_MUST_BE_INT_MASTER: u32 = 8342;
pub const ERROR_DS_CLASS_NOT_DSA: u32 = 8343;
pub const ERROR_DS_INSUFF_ACCESS_RIGHTS: u32 = 8344;
pub const ERROR_DS_ILLEGAL_SUPERIOR: u32 = 8345;
pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM: u32 = 8346;
pub const ERROR_DS_NAME_TOO_MANY_PARTS: u32 = 8347;
pub const ERROR_DS_NAME_TOO_LONG: u32 = 8348;
pub const ERROR_DS_NAME_VALUE_TOO_LONG: u32 = 8349;
pub const ERROR_DS_NAME_UNPARSEABLE: u32 = 8350;
pub const ERROR_DS_NAME_TYPE_UNKNOWN: u32 = 8351;
pub const ERROR_DS_NOT_AN_OBJECT: u32 = 8352;
pub const ERROR_DS_SEC_DESC_TOO_SHORT: u32 = 8353;
pub const ERROR_DS_SEC_DESC_INVALID: u32 = 8354;
pub const ERROR_DS_NO_DELETED_NAME: u32 = 8355;
pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT: u32 = 8356;
pub const ERROR_DS_NCNAME_MUST_BE_NC: u32 = 8357;
pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY: u32 = 8358;
pub const ERROR_DS_CLASS_MUST_BE_CONCRETE: u32 = 8359;
pub const ERROR_DS_INVALID_DMD: u32 = 8360;
pub const ERROR_DS_OBJ_GUID_EXISTS: u32 = 8361;
pub const ERROR_DS_NOT_ON_BACKLINK: u32 = 8362;
pub const ERROR_DS_NO_CROSSREF_FOR_NC: u32 = 8363;
pub const ERROR_DS_SHUTTING_DOWN: u32 = 8364;
pub const ERROR_DS_UNKNOWN_OPERATION: u32 = 8365;
pub const ERROR_DS_INVALID_ROLE_OWNER: u32 = 8366;
pub const ERROR_DS_COULDNT_CONTACT_FSMO: u32 = 8367;
pub const ERROR_DS_CROSS_NC_DN_RENAME: u32 = 8368;
pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY: u32 = 8369;
pub const ERROR_DS_REPLICATOR_ONLY: u32 = 8370;
pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED: u32 = 8371;
pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS: u32 = 8372;
pub const ERROR_DS_NAME_REFERENCE_INVALID: u32 = 8373;
pub const ERROR_DS_CROSS_REF_EXISTS: u32 = 8374;
pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF: u32 = 8375;
pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD: u32 = 8376;
pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX: u32 = 8377;
pub const ERROR_DS_DUP_RDN: u32 = 8378;
pub const ERROR_DS_DUP_OID: u32 = 8379;
pub const ERROR_DS_DUP_MAPI_ID: u32 = 8380;
pub const ERROR_DS_DUP_SCHEMA_ID_GUID: u32 = 8381;
pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME: u32 = 8382;
pub const ERROR_DS_SEMANTIC_ATT_TEST: u32 = 8383;
pub const ERROR_DS_SYNTAX_MISMATCH: u32 = 8384;
pub const ERROR_DS_EXISTS_IN_MUST_HAVE: u32 = 8385;
pub const ERROR_DS_EXISTS_IN_MAY_HAVE: u32 = 8386;
pub const ERROR_DS_NONEXISTENT_MAY_HAVE: u32 = 8387;
pub const ERROR_DS_NONEXISTENT_MUST_HAVE: u32 = 8388;
pub const ERROR_DS_AUX_CLS_TEST_FAIL: u32 = 8389;
pub const ERROR_DS_NONEXISTENT_POSS_SUP: u32 = 8390;
pub const ERROR_DS_SUB_CLS_TEST_FAIL: u32 = 8391;
pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX: u32 = 8392;
pub const ERROR_DS_EXISTS_IN_AUX_CLS: u32 = 8393;
pub const ERROR_DS_EXISTS_IN_SUB_CLS: u32 = 8394;
pub const ERROR_DS_EXISTS_IN_POSS_SUP: u32 = 8395;
pub const ERROR_DS_RECALCSCHEMA_FAILED: u32 = 8396;
pub const ERROR_DS_TREE_DELETE_NOT_FINISHED: u32 = 8397;
pub const ERROR_DS_CANT_DELETE: u32 = 8398;
pub const ERROR_DS_ATT_SCHEMA_REQ_ID: u32 = 8399;
pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX: u32 = 8400;
pub const ERROR_DS_CANT_CACHE_ATT: u32 = 8401;
pub const ERROR_DS_CANT_CACHE_CLASS: u32 = 8402;
pub const ERROR_DS_CANT_REMOVE_ATT_CACHE: u32 = 8403;
pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE: u32 = 8404;
pub const ERROR_DS_CANT_RETRIEVE_DN: u32 = 8405;
pub const ERROR_DS_MISSING_SUPREF: u32 = 8406;
pub const ERROR_DS_CANT_RETRIEVE_INSTANCE: u32 = 8407;
pub const ERROR_DS_CODE_INCONSISTENCY: u32 = 8408;
pub const ERROR_DS_DATABASE_ERROR: u32 = 8409;
pub const ERROR_DS_GOVERNSID_MISSING: u32 = 8410;
pub const ERROR_DS_MISSING_EXPECTED_ATT: u32 = 8411;
pub const ERROR_DS_NCNAME_MISSING_CR_REF: u32 = 8412;
pub const ERROR_DS_SECURITY_CHECKING_ERROR: u32 = 8413;
pub const ERROR_DS_SCHEMA_NOT_LOADED: u32 = 8414;
pub const ERROR_DS_SCHEMA_ALLOC_FAILED: u32 = 8415;
pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX: u32 = 8416;
pub const ERROR_DS_GCVERIFY_ERROR: u32 = 8417;
pub const ERROR_DS_DRA_SCHEMA_MISMATCH: u32 = 8418;
pub const ERROR_DS_CANT_FIND_DSA_OBJ: u32 = 8419;
pub const ERROR_DS_CANT_FIND_EXPECTED_NC: u32 = 8420;
pub const ERROR_DS_CANT_FIND_NC_IN_CACHE: u32 = 8421;
pub const ERROR_DS_CANT_RETRIEVE_CHILD: u32 = 8422;
pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY: u32 = 8423;
pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC: u32 = 8424;
pub const ERROR_DS_BAD_HIERARCHY_FILE: u32 = 8425;
pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED: u32 = 8426;
pub const ERROR_DS_CONFIG_PARAM_MISSING: u32 = 8427;
pub const ERROR_DS_COUNTING_AB_INDICES_FAILED: u32 = 8428;
pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED: u32 = 8429;
pub const ERROR_DS_INTERNAL_FAILURE: u32 = 8430;
pub const ERROR_DS_UNKNOWN_ERROR: u32 = 8431;
pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP: u32 = 8432;
pub const ERROR_DS_REFUSING_FSMO_ROLES: u32 = 8433;
pub const ERROR_DS_MISSING_FSMO_SETTINGS: u32 = 8434;
pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES: u32 = 8435;
pub const ERROR_DS_DRA_GENERIC: u32 = 8436;
pub const ERROR_DS_DRA_INVALID_PARAMETER: u32 = 8437;
pub const ERROR_DS_DRA_BUSY: u32 = 8438;
pub const ERROR_DS_DRA_BAD_DN: u32 = 8439;
pub const ERROR_DS_DRA_BAD_NC: u32 = 8440;
pub const ERROR_DS_DRA_DN_EXISTS: u32 = 8441;
pub const ERROR_DS_DRA_INTERNAL_ERROR: u32 = 8442;
pub const ERROR_DS_DRA_INCONSISTENT_DIT: u32 = 8443;
pub const ERROR_DS_DRA_CONNECTION_FAILED: u32 = 8444;
pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE: u32 = 8445;
pub const ERROR_DS_DRA_OUT_OF_MEM: u32 = 8446;
pub const ERROR_DS_DRA_MAIL_PROBLEM: u32 = 8447;
pub const ERROR_DS_DRA_REF_ALREADY_EXISTS: u32 = 8448;
pub const ERROR_DS_DRA_REF_NOT_FOUND: u32 = 8449;
pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE: u32 = 8450;
pub const ERROR_DS_DRA_DB_ERROR: u32 = 8451;
pub const ERROR_DS_DRA_NO_REPLICA: u32 = 8452;
pub const ERROR_DS_DRA_ACCESS_DENIED: u32 = 8453;
pub const ERROR_DS_DRA_NOT_SUPPORTED: u32 = 8454;
pub const ERROR_DS_DRA_RPC_CANCELLED: u32 = 8455;
pub const ERROR_DS_DRA_SOURCE_DISABLED: u32 = 8456;
pub const ERROR_DS_DRA_SINK_DISABLED: u32 = 8457;
pub const ERROR_DS_DRA_NAME_COLLISION: u32 = 8458;
pub const ERROR_DS_DRA_SOURCE_REINSTALLED: u32 = 8459;
pub const ERROR_DS_DRA_MISSING_PARENT: u32 = 8460;
pub const ERROR_DS_DRA_PREEMPTED: u32 = 8461;
pub const ERROR_DS_DRA_ABANDON_SYNC: u32 = 8462;
pub const ERROR_DS_DRA_SHUTDOWN: u32 = 8463;
pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET: u32 = 8464;
pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA: u32 = 8465;
pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED: u32 = 8466;
pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH: u32 = 8467;
pub const ERROR_DS_DUP_LINK_ID: u32 = 8468;
pub const ERROR_DS_NAME_ERROR_RESOLVING: u32 = 8469;
pub const ERROR_DS_NAME_ERROR_NOT_FOUND: u32 = 8470;
pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE: u32 = 8471;
pub const ERROR_DS_NAME_ERROR_NO_MAPPING: u32 = 8472;
pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY: u32 = 8473;
pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING: u32 = 8474;
pub const ERROR_DS_CONSTRUCTED_ATT_MOD: u32 = 8475;
pub const ERROR_DS_WRONG_OM_OBJ_CLASS: u32 = 8476;
pub const ERROR_DS_DRA_REPL_PENDING: u32 = 8477;
pub const ERROR_DS_DS_REQUIRED: u32 = 8478;
pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME: u32 = 8479;
pub const ERROR_DS_NON_BASE_SEARCH: u32 = 8480;
pub const ERROR_DS_CANT_RETRIEVE_ATTS: u32 = 8481;
pub const ERROR_DS_BACKLINK_WITHOUT_LINK: u32 = 8482;
pub const ERROR_DS_EPOCH_MISMATCH: u32 = 8483;
pub const ERROR_DS_SRC_NAME_MISMATCH: u32 = 8484;
pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL: u32 = 8485;
pub const ERROR_DS_DST_NC_MISMATCH: u32 = 8486;
pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC: u32 = 8487;
pub const ERROR_DS_SRC_GUID_MISMATCH: u32 = 8488;
pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT: u32 = 8489;
pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS: u32 = 8490;
pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD: u32 = 8491;
pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION: u32 = 8492;
pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS: u32 = 8493;
pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT: u32 = 8494;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE: u32 = 8495;
pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE: u32 = 8496;
pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER: u32 = 8497;
pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP: u32 = 8498;
pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP: u32 = 8499;
pub const ERROR_DS_INVALID_SEARCH_FLAG: u32 = 8500;
pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC: u32 = 8501;
pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE: u32 = 8502;
pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE: u32 = 8503;
pub const ERROR_DS_SAM_INIT_FAILURE: u32 = 8504;
pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION: u32 = 8505;
pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID: u32 = 8506;
pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD: u32 = 8507;
pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE: u32 = 8508;
pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED: u32 = 8509;
pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA: u32 = 8510;
pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION: u32 = 8511;
pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE: u32 = 8512;
pub const ERROR_DS_INVALID_GROUP_TYPE: u32 = 8513;
pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN: u32 = 8514;
pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN: u32 = 8515;
pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER: u32 = 8516;
pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER: u32 = 8517;
pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER: u32 = 8518;
pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER: u32 = 8519;
pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER: u32 = 8520;
pub const ERROR_DS_HAVE_PRIMARY_MEMBERS: u32 = 8521;
pub const ERROR_DS_STRING_SD_CONVERSION_FAILED: u32 = 8522;
pub const ERROR_DS_NAMING_MASTER_GC: u32 = 8523;
pub const ERROR_DS_DNS_LOOKUP_FAILURE: u32 = 8524;
pub const ERROR_DS_COULDNT_UPDATE_SPNS: u32 = 8525;
pub const ERROR_DS_CANT_RETRIEVE_SD: u32 = 8526;
pub const ERROR_DS_KEY_NOT_UNIQUE: u32 = 8527;
pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX: u32 = 8528;
pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD: u32 = 8529;
pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY: u32 = 8530;
pub const ERROR_DS_CANT_START: u32 = 8531;
pub const ERROR_DS_INIT_FAILURE: u32 = 8532;
pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION: u32 = 8533;
pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST: u32 = 8534;
pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST: u32 = 8535;
pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED: u32 = 8536;
pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN: u32 = 8537;
pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER: u32 = 8538;
pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST: u32 = 8539;
pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH: u32 = 8540;
pub const ERROR_SAM_INIT_FAILURE: u32 = 8541;
pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP: u32 = 8542;
pub const ERROR_DS_DRA_SCHEMA_CONFLICT: u32 = 8543;
pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT: u32 = 8544;
pub const ERROR_DS_DRA_OBJ_NC_MISMATCH: u32 = 8545;
pub const ERROR_DS_NC_STILL_HAS_DSAS: u32 = 8546;
pub const ERROR_DS_GC_REQUIRED: u32 = 8547;
pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY: u32 = 8548;
pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS: u32 = 8549;
pub const ERROR_DS_CANT_ADD_TO_GC: u32 = 8550;
pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC: u32 = 8551;
pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED: u32 = 8552;
pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC: u32 = 8553;
pub const ERROR_DS_INVALID_NAME_FOR_SPN: u32 = 8554;
pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS: u32 = 8555;
pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES: u32 = 8556;
pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED: u32 = 8557;
pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC: u32 = 8558;
pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER: u32 = 8559;
pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ: u32 = 8560;
pub const ERROR_DS_INIT_FAILURE_CONSOLE: u32 = 8561;
pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE: u32 = 8562;
pub const ERROR_DS_FOREST_VERSION_TOO_HIGH: u32 = 8563;
pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH: u32 = 8564;
pub const ERROR_DS_FOREST_VERSION_TOO_LOW: u32 = 8565;
pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW: u32 = 8566;
pub const ERROR_DS_INCOMPATIBLE_VERSION: u32 = 8567;
pub const ERROR_DS_LOW_DSA_VERSION: u32 = 8568;
pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN: u32 = 8569;
pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER: u32 = 8570;
pub const ERROR_DS_NAME_NOT_UNIQUE: u32 = 8571;
pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4: u32 = 8572;
pub const ERROR_DS_OUT_OF_VERSION_STORE: u32 = 8573;
pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED: u32 = 8574;
pub const ERROR_DS_NO_REF_DOMAIN: u32 = 8575;
pub const ERROR_DS_RESERVED_LINK_ID: u32 = 8576;
pub const ERROR_DS_LINK_ID_NOT_AVAILABLE: u32 = 8577;
pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER: u32 = 8578;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE: u32 = 8579;
pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC: u32 = 8580;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG: u32 = 8581;
pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT: u32 = 8582;
pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL: u32 = 8583;
pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER: u32 = 8584;
pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD: u32 = 8585;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2: u32 = 8586;
pub const ERROR_DS_THREAD_LIMIT_EXCEEDED: u32 = 8587;
pub const ERROR_DS_NOT_CLOSEST: u32 = 8588;
pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF: u32 = 8589;
pub const ERROR_DS_SINGLE_USER_MODE_FAILED: u32 = 8590;
pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR: u32 = 8591;
pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR: u32 = 8592;
pub const ERROR_DS_DIFFERENT_REPL_EPOCHS: u32 = 8593;
pub const ERROR_DS_DRS_EXTENSIONS_CHANGED: u32 = 8594;
pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR: u32 = 8595;
pub const ERROR_DS_NO_MSDS_INTID: u32 = 8596;
pub const ERROR_DS_DUP_MSDS_INTID: u32 = 8597;
pub const ERROR_DS_EXISTS_IN_RDNATTID: u32 = 8598;
pub const ERROR_DS_AUTHORIZATION_FAILED: u32 = 8599;
pub const ERROR_DS_INVALID_SCRIPT: u32 = 8600;
pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED: u32 = 8601;
pub const ERROR_DS_CROSS_REF_BUSY: u32 = 8602;
pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN: u32 = 8603;
pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC: u32 = 8604;
pub const ERROR_DS_DUPLICATE_ID_FOUND: u32 = 8605;
pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT: u32 = 8606;
pub const ERROR_DS_GROUP_CONVERSION_ERROR: u32 = 8607;
pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP: u32 = 8608;
pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP: u32 = 8609;
pub const ERROR_DS_ROLE_NOT_VERIFIED: u32 = 8610;
pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL: u32 = 8611;
pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS: u32 = 8612;
pub const ERROR_DS_EXISTING_AD_CHILD_NC: u32 = 8613;
pub const ERROR_DS_REPL_LIFETIME_EXCEEDED: u32 = 8614;
pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER: u32 = 8615;
pub const ERROR_DS_LDAP_SEND_QUEUE_FULL: u32 = 8616;
pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW: u32 = 8617;
pub const ERROR_DS_POLICY_NOT_KNOWN: u32 = 8618;
pub const ERROR_NO_SITE_SETTINGS_OBJECT: u32 = 8619;
pub const ERROR_NO_SECRETS: u32 = 8620;
pub const ERROR_NO_WRITABLE_DC_FOUND: u32 = 8621;
pub const ERROR_DS_NO_SERVER_OBJECT: u32 = 8622;
pub const ERROR_DS_NO_NTDSA_OBJECT: u32 = 8623;
pub const ERROR_DS_NON_ASQ_SEARCH: u32 = 8624;
pub const ERROR_DS_AUDIT_FAILURE: u32 = 8625;
pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE: u32 = 8626;
pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE: u32 = 8627;
pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP: u32 = 8628;
pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR: u32 = 8629;
pub const ERROR_DS_DRA_SECRETS_DENIED: u32 = 8630;
pub const ERROR_DS_RESERVED_MAPI_ID: u32 = 8631;
pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE: u32 = 8632;
pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET: u32 = 8633;
pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST: u32 = 8634;
pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST: u32 = 8635;
pub const ERROR_INVALID_USER_PRINCIPAL_NAME: u32 = 8636;
pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS: u32 = 8637;
pub const ERROR_DS_OID_NOT_FOUND: u32 = 8638;
pub const ERROR_DS_DRA_RECYCLED_TARGET: u32 = 8639;
pub const ERROR_DS_DISALLOWED_NC_REDIRECT: u32 = 8640;
pub const ERROR_DS_HIGH_ADLDS_FFL: u32 = 8641;
pub const ERROR_DS_HIGH_DSA_VERSION: u32 = 8642;
pub const ERROR_DS_LOW_ADLDS_FFL: u32 = 8643;
pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION: u32 = 8644;
pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED: u32 = 8645;
pub const ERROR_INCORRECT_ACCOUNT_TYPE: u32 = 8646;
pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST: u32 = 8647;
pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST: u32 = 8648;
pub const ERROR_DS_MISSING_FOREST_TRUST: u32 = 8649;
pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE: u32 = 8650;
pub const ERROR_WEAK_WHFBKEY_BLOCKED: u32 = 8651;
pub const ERROR_DS_PER_ATTRIBUTE_AUTHZ_FAILED_DURING_ADD: u32 = 8652;
pub const ERROR_LOCAL_POLICY_MODIFICATION_NOT_SUPPORTED: u32 = 8653;
pub const ERROR_POLICY_CONTROLLED_ACCOUNT: u32 = 8654;
pub const ERROR_LAPS_LEGACY_SCHEMA_MISSING: u32 = 8655;
pub const ERROR_LAPS_SCHEMA_MISSING: u32 = 8656;
pub const ERROR_LAPS_ENCRYPTION_REQUIRES_2016_DFL: u32 = 8657;
pub const ERROR_LAPS_PROCESS_TERMINATED: u32 = 8658;
pub const ERROR_DS_JET_RECORD_TOO_BIG: u32 = 8659;
pub const ERROR_DS_REPLICA_PAGE_SIZE_MISMATCH: u32 = 8660;
pub const DNS_ERROR_RESPONSE_CODES_BASE: u32 = 9000;
pub const DNS_ERROR_RCODE_NO_ERROR: u32 = 0;
pub const DNS_ERROR_MASK: u32 = 9000;
pub const DNS_ERROR_RCODE_FORMAT_ERROR: u32 = 9001;
pub const DNS_ERROR_RCODE_SERVER_FAILURE: u32 = 9002;
pub const DNS_ERROR_RCODE_NAME_ERROR: u32 = 9003;
pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED: u32 = 9004;
pub const DNS_ERROR_RCODE_REFUSED: u32 = 9005;
pub const DNS_ERROR_RCODE_YXDOMAIN: u32 = 9006;
pub const DNS_ERROR_RCODE_YXRRSET: u32 = 9007;
pub const DNS_ERROR_RCODE_NXRRSET: u32 = 9008;
pub const DNS_ERROR_RCODE_NOTAUTH: u32 = 9009;
pub const DNS_ERROR_RCODE_NOTZONE: u32 = 9010;
pub const DNS_ERROR_RCODE_BADSIG: u32 = 9016;
pub const DNS_ERROR_RCODE_BADKEY: u32 = 9017;
pub const DNS_ERROR_RCODE_BADTIME: u32 = 9018;
pub const DNS_ERROR_RCODE_LAST: u32 = 9018;
pub const DNS_ERROR_DNSSEC_BASE: u32 = 9100;
pub const DNS_ERROR_KEYMASTER_REQUIRED: u32 = 9101;
pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE: u32 = 9102;
pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1: u32 = 9103;
pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS: u32 = 9104;
pub const DNS_ERROR_UNSUPPORTED_ALGORITHM: u32 = 9105;
pub const DNS_ERROR_INVALID_KEY_SIZE: u32 = 9106;
pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE: u32 = 9107;
pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION: u32 = 9108;
pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR: u32 = 9109;
pub const DNS_ERROR_UNEXPECTED_CNG_ERROR: u32 = 9110;
pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION: u32 = 9111;
pub const DNS_ERROR_KSP_NOT_ACCESSIBLE: u32 = 9112;
pub const DNS_ERROR_TOO_MANY_SKDS: u32 = 9113;
pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD: u32 = 9114;
pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET: u32 = 9115;
pub const DNS_ERROR_ROLLOVER_IN_PROGRESS: u32 = 9116;
pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT: u32 = 9117;
pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK: u32 = 9118;
pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD: u32 = 9119;
pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED: u32 = 9120;
pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE: u32 = 9121;
pub const DNS_ERROR_BAD_KEYMASTER: u32 = 9122;
pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD: u32 = 9123;
pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT: u32 = 9124;
pub const DNS_ERROR_DNSSEC_IS_DISABLED: u32 = 9125;
pub const DNS_ERROR_INVALID_XML: u32 = 9126;
pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS: u32 = 9127;
pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE: u32 = 9128;
pub const DNS_ERROR_NSEC3_NAME_COLLISION: u32 = 9129;
pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1: u32 = 9130;
pub const DNS_ERROR_PACKET_FMT_BASE: u32 = 9500;
pub const DNS_INFO_NO_RECORDS: u32 = 9501;
pub const DNS_ERROR_BAD_PACKET: u32 = 9502;
pub const DNS_ERROR_NO_PACKET: u32 = 9503;
pub const DNS_ERROR_RCODE: u32 = 9504;
pub const DNS_ERROR_UNSECURE_PACKET: u32 = 9505;
pub const DNS_STATUS_PACKET_UNSECURE: u32 = 9505;
pub const DNS_REQUEST_PENDING: u32 = 9506;
pub const DNS_ERROR_NO_MEMORY: u32 = 14;
pub const DNS_ERROR_INVALID_NAME: u32 = 123;
pub const DNS_ERROR_INVALID_DATA: u32 = 13;
pub const DNS_ERROR_GENERAL_API_BASE: u32 = 9550;
pub const DNS_ERROR_INVALID_TYPE: u32 = 9551;
pub const DNS_ERROR_INVALID_IP_ADDRESS: u32 = 9552;
pub const DNS_ERROR_INVALID_PROPERTY: u32 = 9553;
pub const DNS_ERROR_TRY_AGAIN_LATER: u32 = 9554;
pub const DNS_ERROR_NOT_UNIQUE: u32 = 9555;
pub const DNS_ERROR_NON_RFC_NAME: u32 = 9556;
pub const DNS_STATUS_FQDN: u32 = 9557;
pub const DNS_STATUS_DOTTED_NAME: u32 = 9558;
pub const DNS_STATUS_SINGLE_PART_NAME: u32 = 9559;
pub const DNS_ERROR_INVALID_NAME_CHAR: u32 = 9560;
pub const DNS_ERROR_NUMERIC_NAME: u32 = 9561;
pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER: u32 = 9562;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION: u32 = 9563;
pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS: u32 = 9564;
pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS: u32 = 9565;
pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL: u32 = 9566;
pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE: u32 = 9567;
pub const DNS_ERROR_BACKGROUND_LOADING: u32 = 9568;
pub const DNS_ERROR_NOT_ALLOWED_ON_RODC: u32 = 9569;
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME: u32 = 9570;
pub const DNS_ERROR_DELEGATION_REQUIRED: u32 = 9571;
pub const DNS_ERROR_INVALID_POLICY_TABLE: u32 = 9572;
pub const DNS_ERROR_ADDRESS_REQUIRED: u32 = 9573;
pub const DNS_ERROR_ZONE_BASE: u32 = 9600;
pub const DNS_ERROR_ZONE_DOES_NOT_EXIST: u32 = 9601;
pub const DNS_ERROR_NO_ZONE_INFO: u32 = 9602;
pub const DNS_ERROR_INVALID_ZONE_OPERATION: u32 = 9603;
pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR: u32 = 9604;
pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD: u32 = 9605;
pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS: u32 = 9606;
pub const DNS_ERROR_ZONE_LOCKED: u32 = 9607;
pub const DNS_ERROR_ZONE_CREATION_FAILED: u32 = 9608;
pub const DNS_ERROR_ZONE_ALREADY_EXISTS: u32 = 9609;
pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS: u32 = 9610;
pub const DNS_ERROR_INVALID_ZONE_TYPE: u32 = 9611;
pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP: u32 = 9612;
pub const DNS_ERROR_ZONE_NOT_SECONDARY: u32 = 9613;
pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES: u32 = 9614;
pub const DNS_ERROR_WINS_INIT_FAILED: u32 = 9615;
pub const DNS_ERROR_NEED_WINS_SERVERS: u32 = 9616;
pub const DNS_ERROR_NBSTAT_INIT_FAILED: u32 = 9617;
pub const DNS_ERROR_SOA_DELETE_INVALID: u32 = 9618;
pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS: u32 = 9619;
pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP: u32 = 9620;
pub const DNS_ERROR_ZONE_IS_SHUTDOWN: u32 = 9621;
pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING: u32 = 9622;
pub const DNS_ERROR_DATAFILE_BASE: u32 = 9650;
pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE: u32 = 9651;
pub const DNS_ERROR_INVALID_DATAFILE_NAME: u32 = 9652;
pub const DNS_ERROR_DATAFILE_OPEN_FAILURE: u32 = 9653;
pub const DNS_ERROR_FILE_WRITEBACK_FAILED: u32 = 9654;
pub const DNS_ERROR_DATAFILE_PARSING: u32 = 9655;
pub const DNS_ERROR_DATABASE_BASE: u32 = 9700;
pub const DNS_ERROR_RECORD_DOES_NOT_EXIST: u32 = 9701;
pub const DNS_ERROR_RECORD_FORMAT: u32 = 9702;
pub const DNS_ERROR_NODE_CREATION_FAILED: u32 = 9703;
pub const DNS_ERROR_UNKNOWN_RECORD_TYPE: u32 = 9704;
pub const DNS_ERROR_RECORD_TIMED_OUT: u32 = 9705;
pub const DNS_ERROR_NAME_NOT_IN_ZONE: u32 = 9706;
pub const DNS_ERROR_CNAME_LOOP: u32 = 9707;
pub const DNS_ERROR_NODE_IS_CNAME: u32 = 9708;
pub const DNS_ERROR_CNAME_COLLISION: u32 = 9709;
pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT: u32 = 9710;
pub const DNS_ERROR_RECORD_ALREADY_EXISTS: u32 = 9711;
pub const DNS_ERROR_SECONDARY_DATA: u32 = 9712;
pub const DNS_ERROR_NO_CREATE_CACHE_DATA: u32 = 9713;
pub const DNS_ERROR_NAME_DOES_NOT_EXIST: u32 = 9714;
pub const DNS_WARNING_PTR_CREATE_FAILED: u32 = 9715;
pub const DNS_WARNING_DOMAIN_UNDELETED: u32 = 9716;
pub const DNS_ERROR_DS_UNAVAILABLE: u32 = 9717;
pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS: u32 = 9718;
pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE: u32 = 9719;
pub const DNS_ERROR_NODE_IS_DNAME: u32 = 9720;
pub const DNS_ERROR_DNAME_COLLISION: u32 = 9721;
pub const DNS_ERROR_ALIAS_LOOP: u32 = 9722;
pub const DNS_ERROR_OPERATION_BASE: u32 = 9750;
pub const DNS_INFO_AXFR_COMPLETE: u32 = 9751;
pub const DNS_ERROR_AXFR: u32 = 9752;
pub const DNS_INFO_ADDED_LOCAL_WINS: u32 = 9753;
pub const DNS_ERROR_SECURE_BASE: u32 = 9800;
pub const DNS_STATUS_CONTINUE_NEEDED: u32 = 9801;
pub const DNS_ERROR_SETUP_BASE: u32 = 9850;
pub const DNS_ERROR_NO_TCPIP: u32 = 9851;
pub const DNS_ERROR_NO_DNS_SERVERS: u32 = 9852;
pub const DNS_ERROR_DP_BASE: u32 = 9900;
pub const DNS_ERROR_DP_DOES_NOT_EXIST: u32 = 9901;
pub const DNS_ERROR_DP_ALREADY_EXISTS: u32 = 9902;
pub const DNS_ERROR_DP_NOT_ENLISTED: u32 = 9903;
pub const DNS_ERROR_DP_ALREADY_ENLISTED: u32 = 9904;
pub const DNS_ERROR_DP_NOT_AVAILABLE: u32 = 9905;
pub const DNS_ERROR_DP_FSMO_ERROR: u32 = 9906;
pub const DNS_ERROR_RRL_NOT_ENABLED: u32 = 9911;
pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE: u32 = 9912;
pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX: u32 = 9913;
pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX: u32 = 9914;
pub const DNS_ERROR_RRL_INVALID_TC_RATE: u32 = 9915;
pub const DNS_ERROR_RRL_INVALID_LEAK_RATE: u32 = 9916;
pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE: u32 = 9917;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS: u32 = 9921;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST: u32 = 9922;
pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED: u32 = 9923;
pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME: u32 = 9924;
pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE: u32 = 9925;
pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS: u32 = 9951;
pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST: u32 = 9952;
pub const DNS_ERROR_DEFAULT_ZONESCOPE: u32 = 9953;
pub const DNS_ERROR_INVALID_ZONESCOPE_NAME: u32 = 9954;
pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES: u32 = 9955;
pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED: u32 = 9956;
pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED: u32 = 9957;
pub const DNS_ERROR_INVALID_SCOPE_NAME: u32 = 9958;
pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST: u32 = 9959;
pub const DNS_ERROR_DEFAULT_SCOPE: u32 = 9960;
pub const DNS_ERROR_INVALID_SCOPE_OPERATION: u32 = 9961;
pub const DNS_ERROR_SCOPE_LOCKED: u32 = 9962;
pub const DNS_ERROR_SCOPE_ALREADY_EXISTS: u32 = 9963;
pub const DNS_ERROR_POLICY_ALREADY_EXISTS: u32 = 9971;
pub const DNS_ERROR_POLICY_DOES_NOT_EXIST: u32 = 9972;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA: u32 = 9973;
pub const DNS_ERROR_POLICY_INVALID_SETTINGS: u32 = 9974;
pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED: u32 = 9975;
pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST: u32 = 9976;
pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS: u32 = 9977;
pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST: u32 = 9978;
pub const DNS_ERROR_SUBNET_ALREADY_EXISTS: u32 = 9979;
pub const DNS_ERROR_POLICY_LOCKED: u32 = 9980;
pub const DNS_ERROR_POLICY_INVALID_WEIGHT: u32 = 9981;
pub const DNS_ERROR_POLICY_INVALID_NAME: u32 = 9982;
pub const DNS_ERROR_POLICY_MISSING_CRITERIA: u32 = 9983;
pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME: u32 = 9984;
pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID: u32 = 9985;
pub const DNS_ERROR_POLICY_SCOPE_MISSING: u32 = 9986;
pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED: u32 = 9987;
pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED: u32 = 9988;
pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED: u32 = 9989;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET: u32 = 9990;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL: u32 = 9991;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL: u32 = 9992;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE: u32 = 9993;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN: u32 = 9994;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE: u32 = 9995;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY: u32 = 9996;
pub const WSABASEERR: u32 = 10000;
pub const WSAEINTR: u32 = 10004;
pub const WSAEBADF: u32 = 10009;
pub const WSAEACCES: u32 = 10013;
pub const WSAEFAULT: u32 = 10014;
pub const WSAEINVAL: u32 = 10022;
pub const WSAEMFILE: u32 = 10024;
pub const WSAEWOULDBLOCK: u32 = 10035;
pub const WSAEINPROGRESS: u32 = 10036;
pub const WSAEALREADY: u32 = 10037;
pub const WSAENOTSOCK: u32 = 10038;
pub const WSAEDESTADDRREQ: u32 = 10039;
pub const WSAEMSGSIZE: u32 = 10040;
pub const WSAEPROTOTYPE: u32 = 10041;
pub const WSAENOPROTOOPT: u32 = 10042;
pub const WSAEPROTONOSUPPORT: u32 = 10043;
pub const WSAESOCKTNOSUPPORT: u32 = 10044;
pub const WSAEOPNOTSUPP: u32 = 10045;
pub const WSAEPFNOSUPPORT: u32 = 10046;
pub const WSAEAFNOSUPPORT: u32 = 10047;
pub const WSAEADDRINUSE: u32 = 10048;
pub const WSAEADDRNOTAVAIL: u32 = 10049;
pub const WSAENETDOWN: u32 = 10050;
pub const WSAENETUNREACH: u32 = 10051;
pub const WSAENETRESET: u32 = 10052;
pub const WSAECONNABORTED: u32 = 10053;
pub const WSAECONNRESET: u32 = 10054;
pub const WSAENOBUFS: u32 = 10055;
pub const WSAEISCONN: u32 = 10056;
pub const WSAENOTCONN: u32 = 10057;
pub const WSAESHUTDOWN: u32 = 10058;
pub const WSAETOOMANYREFS: u32 = 10059;
pub const WSAETIMEDOUT: u32 = 10060;
pub const WSAECONNREFUSED: u32 = 10061;
pub const WSAELOOP: u32 = 10062;
pub const WSAENAMETOOLONG: u32 = 10063;
pub const WSAEHOSTDOWN: u32 = 10064;
pub const WSAEHOSTUNREACH: u32 = 10065;
pub const WSAENOTEMPTY: u32 = 10066;
pub const WSAEPROCLIM: u32 = 10067;
pub const WSAEUSERS: u32 = 10068;
pub const WSAEDQUOT: u32 = 10069;
pub const WSAESTALE: u32 = 10070;
pub const WSAEREMOTE: u32 = 10071;
pub const WSASYSNOTREADY: u32 = 10091;
pub const WSAVERNOTSUPPORTED: u32 = 10092;
pub const WSANOTINITIALISED: u32 = 10093;
pub const WSAEDISCON: u32 = 10101;
pub const WSAENOMORE: u32 = 10102;
pub const WSAECANCELLED: u32 = 10103;
pub const WSAEINVALIDPROCTABLE: u32 = 10104;
pub const WSAEINVALIDPROVIDER: u32 = 10105;
pub const WSAEPROVIDERFAILEDINIT: u32 = 10106;
pub const WSASYSCALLFAILURE: u32 = 10107;
pub const WSASERVICE_NOT_FOUND: u32 = 10108;
pub const WSATYPE_NOT_FOUND: u32 = 10109;
pub const WSA_E_NO_MORE: u32 = 10110;
pub const WSA_E_CANCELLED: u32 = 10111;
pub const WSAEREFUSED: u32 = 10112;
pub const WSAHOST_NOT_FOUND: u32 = 11001;
pub const WSATRY_AGAIN: u32 = 11002;
pub const WSANO_RECOVERY: u32 = 11003;
pub const WSANO_DATA: u32 = 11004;
pub const WSA_QOS_RECEIVERS: u32 = 11005;
pub const WSA_QOS_SENDERS: u32 = 11006;
pub const WSA_QOS_NO_SENDERS: u32 = 11007;
pub const WSA_QOS_NO_RECEIVERS: u32 = 11008;
pub const WSA_QOS_REQUEST_CONFIRMED: u32 = 11009;
pub const WSA_QOS_ADMISSION_FAILURE: u32 = 11010;
pub const WSA_QOS_POLICY_FAILURE: u32 = 11011;
pub const WSA_QOS_BAD_STYLE: u32 = 11012;
pub const WSA_QOS_BAD_OBJECT: u32 = 11013;
pub const WSA_QOS_TRAFFIC_CTRL_ERROR: u32 = 11014;
pub const WSA_QOS_GENERIC_ERROR: u32 = 11015;
pub const WSA_QOS_ESERVICETYPE: u32 = 11016;
pub const WSA_QOS_EFLOWSPEC: u32 = 11017;
pub const WSA_QOS_EPROVSPECBUF: u32 = 11018;
pub const WSA_QOS_EFILTERSTYLE: u32 = 11019;
pub const WSA_QOS_EFILTERTYPE: u32 = 11020;
pub const WSA_QOS_EFILTERCOUNT: u32 = 11021;
pub const WSA_QOS_EOBJLENGTH: u32 = 11022;
pub const WSA_QOS_EFLOWCOUNT: u32 = 11023;
pub const WSA_QOS_EUNKOWNPSOBJ: u32 = 11024;
pub const WSA_QOS_EPOLICYOBJ: u32 = 11025;
pub const WSA_QOS_EFLOWDESC: u32 = 11026;
pub const WSA_QOS_EPSFLOWSPEC: u32 = 11027;
pub const WSA_QOS_EPSFILTERSPEC: u32 = 11028;
pub const WSA_QOS_ESDMODEOBJ: u32 = 11029;
pub const WSA_QOS_ESHAPERATEOBJ: u32 = 11030;
pub const WSA_QOS_RESERVED_PETYPE: u32 = 11031;
pub const WSA_SECURE_HOST_NOT_FOUND: u32 = 11032;
pub const WSA_IPSEC_NAME_POLICY_ERROR: u32 = 11033;
pub const ERROR_IPSEC_QM_POLICY_EXISTS: u32 = 13000;
pub const ERROR_IPSEC_QM_POLICY_NOT_FOUND: u32 = 13001;
pub const ERROR_IPSEC_QM_POLICY_IN_USE: u32 = 13002;
pub const ERROR_IPSEC_MM_POLICY_EXISTS: u32 = 13003;
pub const ERROR_IPSEC_MM_POLICY_NOT_FOUND: u32 = 13004;
pub const ERROR_IPSEC_MM_POLICY_IN_USE: u32 = 13005;
pub const ERROR_IPSEC_MM_FILTER_EXISTS: u32 = 13006;
pub const ERROR_IPSEC_MM_FILTER_NOT_FOUND: u32 = 13007;
pub const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS: u32 = 13008;
pub const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND: u32 = 13009;
pub const ERROR_IPSEC_MM_AUTH_EXISTS: u32 = 13010;
pub const ERROR_IPSEC_MM_AUTH_NOT_FOUND: u32 = 13011;
pub const ERROR_IPSEC_MM_AUTH_IN_USE: u32 = 13012;
pub const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND: u32 = 13013;
pub const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND: u32 = 13014;
pub const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND: u32 = 13015;
pub const ERROR_IPSEC_TUNNEL_FILTER_EXISTS: u32 = 13016;
pub const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND: u32 = 13017;
pub const ERROR_IPSEC_MM_FILTER_PENDING_DELETION: u32 = 13018;
pub const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION: u32 = 13019;
pub const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION: u32 = 13020;
pub const ERROR_IPSEC_MM_POLICY_PENDING_DELETION: u32 = 13021;
pub const ERROR_IPSEC_MM_AUTH_PENDING_DELETION: u32 = 13022;
pub const ERROR_IPSEC_QM_POLICY_PENDING_DELETION: u32 = 13023;
pub const WARNING_IPSEC_MM_POLICY_PRUNED: u32 = 13024;
pub const WARNING_IPSEC_QM_POLICY_PRUNED: u32 = 13025;
pub const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN: u32 = 13800;
pub const ERROR_IPSEC_IKE_AUTH_FAIL: u32 = 13801;
pub const ERROR_IPSEC_IKE_ATTRIB_FAIL: u32 = 13802;
pub const ERROR_IPSEC_IKE_NEGOTIATION_PENDING: u32 = 13803;
pub const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR: u32 = 13804;
pub const ERROR_IPSEC_IKE_TIMED_OUT: u32 = 13805;
pub const ERROR_IPSEC_IKE_NO_CERT: u32 = 13806;
pub const ERROR_IPSEC_IKE_SA_DELETED: u32 = 13807;
pub const ERROR_IPSEC_IKE_SA_REAPED: u32 = 13808;
pub const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP: u32 = 13809;
pub const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP: u32 = 13810;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_MM: u32 = 13811;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM: u32 = 13812;
pub const ERROR_IPSEC_IKE_DROP_NO_RESPONSE: u32 = 13813;
pub const ERROR_IPSEC_IKE_MM_DELAY_DROP: u32 = 13814;
pub const ERROR_IPSEC_IKE_QM_DELAY_DROP: u32 = 13815;
pub const ERROR_IPSEC_IKE_ERROR: u32 = 13816;
pub const ERROR_IPSEC_IKE_CRL_FAILED: u32 = 13817;
pub const ERROR_IPSEC_IKE_INVALID_KEY_USAGE: u32 = 13818;
pub const ERROR_IPSEC_IKE_INVALID_CERT_TYPE: u32 = 13819;
pub const ERROR_IPSEC_IKE_NO_PRIVATE_KEY: u32 = 13820;
pub const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY: u32 = 13821;
pub const ERROR_IPSEC_IKE_DH_FAIL: u32 = 13822;
pub const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED: u32 = 13823;
pub const ERROR_IPSEC_IKE_INVALID_HEADER: u32 = 13824;
pub const ERROR_IPSEC_IKE_NO_POLICY: u32 = 13825;
pub const ERROR_IPSEC_IKE_INVALID_SIGNATURE: u32 = 13826;
pub const ERROR_IPSEC_IKE_KERBEROS_ERROR: u32 = 13827;
pub const ERROR_IPSEC_IKE_NO_PUBLIC_KEY: u32 = 13828;
pub const ERROR_IPSEC_IKE_PROCESS_ERR: u32 = 13829;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SA: u32 = 13830;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_PROP: u32 = 13831;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS: u32 = 13832;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_KE: u32 = 13833;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_ID: u32 = 13834;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT: u32 = 13835;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ: u32 = 13836;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_HASH: u32 = 13837;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SIG: u32 = 13838;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE: u32 = 13839;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY: u32 = 13840;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE: u32 = 13841;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR: u32 = 13842;
pub const ERROR_IPSEC_IKE_INVALID_PAYLOAD: u32 = 13843;
pub const ERROR_IPSEC_IKE_LOAD_SOFT_SA: u32 = 13844;
pub const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN: u32 = 13845;
pub const ERROR_IPSEC_IKE_INVALID_COOKIE: u32 = 13846;
pub const ERROR_IPSEC_IKE_NO_PEER_CERT: u32 = 13847;
pub const ERROR_IPSEC_IKE_PEER_CRL_FAILED: u32 = 13848;
pub const ERROR_IPSEC_IKE_POLICY_CHANGE: u32 = 13849;
pub const ERROR_IPSEC_IKE_NO_MM_POLICY: u32 = 13850;
pub const ERROR_IPSEC_IKE_NOTCBPRIV: u32 = 13851;
pub const ERROR_IPSEC_IKE_SECLOADFAIL: u32 = 13852;
pub const ERROR_IPSEC_IKE_FAILSSPINIT: u32 = 13853;
pub const ERROR_IPSEC_IKE_FAILQUERYSSP: u32 = 13854;
pub const ERROR_IPSEC_IKE_SRVACQFAIL: u32 = 13855;
pub const ERROR_IPSEC_IKE_SRVQUERYCRED: u32 = 13856;
pub const ERROR_IPSEC_IKE_GETSPIFAIL: u32 = 13857;
pub const ERROR_IPSEC_IKE_INVALID_FILTER: u32 = 13858;
pub const ERROR_IPSEC_IKE_OUT_OF_MEMORY: u32 = 13859;
pub const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED: u32 = 13860;
pub const ERROR_IPSEC_IKE_INVALID_POLICY: u32 = 13861;
pub const ERROR_IPSEC_IKE_UNKNOWN_DOI: u32 = 13862;
pub const ERROR_IPSEC_IKE_INVALID_SITUATION: u32 = 13863;
pub const ERROR_IPSEC_IKE_DH_FAILURE: u32 = 13864;
pub const ERROR_IPSEC_IKE_INVALID_GROUP: u32 = 13865;
pub const ERROR_IPSEC_IKE_ENCRYPT: u32 = 13866;
pub const ERROR_IPSEC_IKE_DECRYPT: u32 = 13867;
pub const ERROR_IPSEC_IKE_POLICY_MATCH: u32 = 13868;
pub const ERROR_IPSEC_IKE_UNSUPPORTED_ID: u32 = 13869;
pub const ERROR_IPSEC_IKE_INVALID_HASH: u32 = 13870;
pub const ERROR_IPSEC_IKE_INVALID_HASH_ALG: u32 = 13871;
pub const ERROR_IPSEC_IKE_INVALID_HASH_SIZE: u32 = 13872;
pub const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG: u32 = 13873;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_ALG: u32 = 13874;
pub const ERROR_IPSEC_IKE_INVALID_SIG: u32 = 13875;
pub const ERROR_IPSEC_IKE_LOAD_FAILED: u32 = 13876;
pub const ERROR_IPSEC_IKE_RPC_DELETE: u32 = 13877;
pub const ERROR_IPSEC_IKE_BENIGN_REINIT: u32 = 13878;
pub const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY: u32 = 13879;
pub const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION: u32 = 13880;
pub const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN: u32 = 13881;
pub const ERROR_IPSEC_IKE_MM_LIMIT: u32 = 13882;
pub const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED: u32 = 13883;
pub const ERROR_IPSEC_IKE_QM_LIMIT: u32 = 13884;
pub const ERROR_IPSEC_IKE_MM_EXPIRED: u32 = 13885;
pub const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID: u32 = 13886;
pub const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH: u32 = 13887;
pub const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID: u32 = 13888;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD: u32 = 13889;
pub const ERROR_IPSEC_IKE_DOS_COOKIE_SENT: u32 = 13890;
pub const ERROR_IPSEC_IKE_SHUTTING_DOWN: u32 = 13891;
pub const ERROR_IPSEC_IKE_CGA_AUTH_FAILED: u32 = 13892;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA: u32 = 13893;
pub const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM: u32 = 13894;
pub const ERROR_IPSEC_IKE_QM_EXPIRED: u32 = 13895;
pub const ERROR_IPSEC_IKE_TOO_MANY_FILTERS: u32 = 13896;
pub const ERROR_IPSEC_IKE_NEG_STATUS_END: u32 = 13897;
pub const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL: u32 = 13898;
pub const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE: u32 = 13899;
pub const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING: u32 = 13900;
pub const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING: u32 = 13901;
pub const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS: u32 = 13902;
pub const ERROR_IPSEC_IKE_RATELIMIT_DROP: u32 = 13903;
pub const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE: u32 = 13904;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE: u32 = 13905;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE: u32 = 13906;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY: u32 = 13907;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE: u32 = 13908;
pub const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END: u32 = 13909;
pub const ERROR_IPSEC_BAD_SPI: u32 = 13910;
pub const ERROR_IPSEC_SA_LIFETIME_EXPIRED: u32 = 13911;
pub const ERROR_IPSEC_WRONG_SA: u32 = 13912;
pub const ERROR_IPSEC_REPLAY_CHECK_FAILED: u32 = 13913;
pub const ERROR_IPSEC_INVALID_PACKET: u32 = 13914;
pub const ERROR_IPSEC_INTEGRITY_CHECK_FAILED: u32 = 13915;
pub const ERROR_IPSEC_CLEAR_TEXT_DROP: u32 = 13916;
pub const ERROR_IPSEC_AUTH_FIREWALL_DROP: u32 = 13917;
pub const ERROR_IPSEC_THROTTLE_DROP: u32 = 13918;
pub const ERROR_IPSEC_DOSP_BLOCK: u32 = 13925;
pub const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST: u32 = 13926;
pub const ERROR_IPSEC_DOSP_INVALID_PACKET: u32 = 13927;
pub const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED: u32 = 13928;
pub const ERROR_IPSEC_DOSP_MAX_ENTRIES: u32 = 13929;
pub const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED: u32 = 13930;
pub const ERROR_IPSEC_DOSP_NOT_INSTALLED: u32 = 13931;
pub const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES: u32 = 13932;
pub const ERROR_SXS_SECTION_NOT_FOUND: u32 = 14000;
pub const ERROR_SXS_CANT_GEN_ACTCTX: u32 = 14001;
pub const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT: u32 = 14002;
pub const ERROR_SXS_ASSEMBLY_NOT_FOUND: u32 = 14003;
pub const ERROR_SXS_MANIFEST_FORMAT_ERROR: u32 = 14004;
pub const ERROR_SXS_MANIFEST_PARSE_ERROR: u32 = 14005;
pub const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED: u32 = 14006;
pub const ERROR_SXS_KEY_NOT_FOUND: u32 = 14007;
pub const ERROR_SXS_VERSION_CONFLICT: u32 = 14008;
pub const ERROR_SXS_WRONG_SECTION_TYPE: u32 = 14009;
pub const ERROR_SXS_THREAD_QUERIES_DISABLED: u32 = 14010;
pub const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET: u32 = 14011;
pub const ERROR_SXS_UNKNOWN_ENCODING_GROUP: u32 = 14012;
pub const ERROR_SXS_UNKNOWN_ENCODING: u32 = 14013;
pub const ERROR_SXS_INVALID_XML_NAMESPACE_URI: u32 = 14014;
pub const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED: u32 = 14015;
pub const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED: u32 = 14016;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE: u32 = 14017;
pub const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE: u32 = 14018;
pub const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE: u32 = 14019;
pub const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT: u32 = 14020;
pub const ERROR_SXS_DUPLICATE_DLL_NAME: u32 = 14021;
pub const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME: u32 = 14022;
pub const ERROR_SXS_DUPLICATE_CLSID: u32 = 14023;
pub const ERROR_SXS_DUPLICATE_IID: u32 = 14024;
pub const ERROR_SXS_DUPLICATE_TLBID: u32 = 14025;
pub const ERROR_SXS_DUPLICATE_PROGID: u32 = 14026;
pub const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME: u32 = 14027;
pub const ERROR_SXS_FILE_HASH_MISMATCH: u32 = 14028;
pub const ERROR_SXS_POLICY_PARSE_ERROR: u32 = 14029;
pub const ERROR_SXS_XML_E_MISSINGQUOTE: u32 = 14030;
pub const ERROR_SXS_XML_E_COMMENTSYNTAX: u32 = 14031;
pub const ERROR_SXS_XML_E_BADSTARTNAMECHAR: u32 = 14032;
pub const ERROR_SXS_XML_E_BADNAMECHAR: u32 = 14033;
pub const ERROR_SXS_XML_E_BADCHARINSTRING: u32 = 14034;
pub const ERROR_SXS_XML_E_XMLDECLSYNTAX: u32 = 14035;
pub const ERROR_SXS_XML_E_BADCHARDATA: u32 = 14036;
pub const ERROR_SXS_XML_E_MISSINGWHITESPACE: u32 = 14037;
pub const ERROR_SXS_XML_E_EXPECTINGTAGEND: u32 = 14038;
pub const ERROR_SXS_XML_E_MISSINGSEMICOLON: u32 = 14039;
pub const ERROR_SXS_XML_E_UNBALANCEDPAREN: u32 = 14040;
pub const ERROR_SXS_XML_E_INTERNALERROR: u32 = 14041;
pub const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE: u32 = 14042;
pub const ERROR_SXS_XML_E_INCOMPLETE_ENCODING: u32 = 14043;
pub const ERROR_SXS_XML_E_MISSING_PAREN: u32 = 14044;
pub const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE: u32 = 14045;
pub const ERROR_SXS_XML_E_MULTIPLE_COLONS: u32 = 14046;
pub const ERROR_SXS_XML_E_INVALID_DECIMAL: u32 = 14047;
pub const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL: u32 = 14048;
pub const ERROR_SXS_XML_E_INVALID_UNICODE: u32 = 14049;
pub const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK: u32 = 14050;
pub const ERROR_SXS_XML_E_UNEXPECTEDENDTAG: u32 = 14051;
pub const ERROR_SXS_XML_E_UNCLOSEDTAG: u32 = 14052;
pub const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE: u32 = 14053;
pub const ERROR_SXS_XML_E_MULTIPLEROOTS: u32 = 14054;
pub const ERROR_SXS_XML_E_INVALIDATROOTLEVEL: u32 = 14055;
pub const ERROR_SXS_XML_E_BADXMLDECL: u32 = 14056;
pub const ERROR_SXS_XML_E_MISSINGROOT: u32 = 14057;
pub const ERROR_SXS_XML_E_UNEXPECTEDEOF: u32 = 14058;
pub const ERROR_SXS_XML_E_BADPEREFINSUBSET: u32 = 14059;
pub const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG: u32 = 14060;
pub const ERROR_SXS_XML_E_UNCLOSEDENDTAG: u32 = 14061;
pub const ERROR_SXS_XML_E_UNCLOSEDSTRING: u32 = 14062;
pub const ERROR_SXS_XML_E_UNCLOSEDCOMMENT: u32 = 14063;
pub const ERROR_SXS_XML_E_UNCLOSEDDECL: u32 = 14064;
pub const ERROR_SXS_XML_E_UNCLOSEDCDATA: u32 = 14065;
pub const ERROR_SXS_XML_E_RESERVEDNAMESPACE: u32 = 14066;
pub const ERROR_SXS_XML_E_INVALIDENCODING: u32 = 14067;
pub const ERROR_SXS_XML_E_INVALIDSWITCH: u32 = 14068;
pub const ERROR_SXS_XML_E_BADXMLCASE: u32 = 14069;
pub const ERROR_SXS_XML_E_INVALID_STANDALONE: u32 = 14070;
pub const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE: u32 = 14071;
pub const ERROR_SXS_XML_E_INVALID_VERSION: u32 = 14072;
pub const ERROR_SXS_XML_E_MISSINGEQUALS: u32 = 14073;
pub const ERROR_SXS_PROTECTION_RECOVERY_FAILED: u32 = 14074;
pub const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT: u32 = 14075;
pub const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID: u32 = 14076;
pub const ERROR_SXS_UNTRANSLATABLE_HRESULT: u32 = 14077;
pub const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING: u32 = 14078;
pub const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE: u32 = 14079;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME: u32 = 14080;
pub const ERROR_SXS_ASSEMBLY_MISSING: u32 = 14081;
pub const ERROR_SXS_CORRUPT_ACTIVATION_STACK: u32 = 14082;
pub const ERROR_SXS_CORRUPTION: u32 = 14083;
pub const ERROR_SXS_EARLY_DEACTIVATION: u32 = 14084;
pub const ERROR_SXS_INVALID_DEACTIVATION: u32 = 14085;
pub const ERROR_SXS_MULTIPLE_DEACTIVATION: u32 = 14086;
pub const ERROR_SXS_PROCESS_TERMINATION_REQUESTED: u32 = 14087;
pub const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT: u32 = 14088;
pub const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY: u32 = 14089;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE: u32 = 14090;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME: u32 = 14091;
pub const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE: u32 = 14092;
pub const ERROR_SXS_IDENTITY_PARSE_ERROR: u32 = 14093;
pub const ERROR_MALFORMED_SUBSTITUTION_STRING: u32 = 14094;
pub const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN: u32 = 14095;
pub const ERROR_UNMAPPED_SUBSTITUTION_STRING: u32 = 14096;
pub const ERROR_SXS_ASSEMBLY_NOT_LOCKED: u32 = 14097;
pub const ERROR_SXS_COMPONENT_STORE_CORRUPT: u32 = 14098;
pub const ERROR_ADVANCED_INSTALLER_FAILED: u32 = 14099;
pub const ERROR_XML_ENCODING_MISMATCH: u32 = 14100;
pub const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT: u32 = 14101;
pub const ERROR_SXS_IDENTITIES_DIFFERENT: u32 = 14102;
pub const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT: u32 = 14103;
pub const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY: u32 = 14104;
pub const ERROR_SXS_MANIFEST_TOO_BIG: u32 = 14105;
pub const ERROR_SXS_SETTING_NOT_REGISTERED: u32 = 14106;
pub const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE: u32 = 14107;
pub const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED: u32 = 14108;
pub const ERROR_GENERIC_COMMAND_FAILED: u32 = 14109;
pub const ERROR_SXS_FILE_HASH_MISSING: u32 = 14110;
pub const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS: u32 = 14111;
pub const ERROR_EVT_INVALID_CHANNEL_PATH: u32 = 15000;
pub const ERROR_EVT_INVALID_QUERY: u32 = 15001;
pub const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND: u32 = 15002;
pub const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND: u32 = 15003;
pub const ERROR_EVT_INVALID_PUBLISHER_NAME: u32 = 15004;
pub const ERROR_EVT_INVALID_EVENT_DATA: u32 = 15005;
pub const ERROR_EVT_CHANNEL_NOT_FOUND: u32 = 15007;
pub const ERROR_EVT_MALFORMED_XML_TEXT: u32 = 15008;
pub const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL: u32 = 15009;
pub const ERROR_EVT_CONFIGURATION_ERROR: u32 = 15010;
pub const ERROR_EVT_QUERY_RESULT_STALE: u32 = 15011;
pub const ERROR_EVT_QUERY_RESULT_INVALID_POSITION: u32 = 15012;
pub const ERROR_EVT_NON_VALIDATING_MSXML: u32 = 15013;
pub const ERROR_EVT_FILTER_ALREADYSCOPED: u32 = 15014;
pub const ERROR_EVT_FILTER_NOTELTSET: u32 = 15015;
pub const ERROR_EVT_FILTER_INVARG: u32 = 15016;
pub const ERROR_EVT_FILTER_INVTEST: u32 = 15017;
pub const ERROR_EVT_FILTER_INVTYPE: u32 = 15018;
pub const ERROR_EVT_FILTER_PARSEERR: u32 = 15019;
pub const ERROR_EVT_FILTER_UNSUPPORTEDOP: u32 = 15020;
pub const ERROR_EVT_FILTER_UNEXPECTEDTOKEN: u32 = 15021;
pub const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL: u32 = 15022;
pub const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE: u32 = 15023;
pub const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE: u32 = 15024;
pub const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE: u32 = 15025;
pub const ERROR_EVT_FILTER_TOO_COMPLEX: u32 = 15026;
pub const ERROR_EVT_MESSAGE_NOT_FOUND: u32 = 15027;
pub const ERROR_EVT_MESSAGE_ID_NOT_FOUND: u32 = 15028;
pub const ERROR_EVT_UNRESOLVED_VALUE_INSERT: u32 = 15029;
pub const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT: u32 = 15030;
pub const ERROR_EVT_MAX_INSERTS_REACHED: u32 = 15031;
pub const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND: u32 = 15032;
pub const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND: u32 = 15033;
pub const ERROR_EVT_VERSION_TOO_OLD: u32 = 15034;
pub const ERROR_EVT_VERSION_TOO_NEW: u32 = 15035;
pub const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY: u32 = 15036;
pub const ERROR_EVT_PUBLISHER_DISABLED: u32 = 15037;
pub const ERROR_EVT_FILTER_OUT_OF_RANGE: u32 = 15038;
pub const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE: u32 = 15080;
pub const ERROR_EC_LOG_DISABLED: u32 = 15081;
pub const ERROR_EC_CIRCULAR_FORWARDING: u32 = 15082;
pub const ERROR_EC_CREDSTORE_FULL: u32 = 15083;
pub const ERROR_EC_CRED_NOT_FOUND: u32 = 15084;
pub const ERROR_EC_NO_ACTIVE_CHANNEL: u32 = 15085;
pub const ERROR_MUI_FILE_NOT_FOUND: u32 = 15100;
pub const ERROR_MUI_INVALID_FILE: u32 = 15101;
pub const ERROR_MUI_INVALID_RC_CONFIG: u32 = 15102;
pub const ERROR_MUI_INVALID_LOCALE_NAME: u32 = 15103;
pub const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME: u32 = 15104;
pub const ERROR_MUI_FILE_NOT_LOADED: u32 = 15105;
pub const ERROR_RESOURCE_ENUM_USER_STOP: u32 = 15106;
pub const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED: u32 = 15107;
pub const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME: u32 = 15108;
pub const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE: u32 = 15110;
pub const ERROR_MRM_INVALID_PRICONFIG: u32 = 15111;
pub const ERROR_MRM_INVALID_FILE_TYPE: u32 = 15112;
pub const ERROR_MRM_UNKNOWN_QUALIFIER: u32 = 15113;
pub const ERROR_MRM_INVALID_QUALIFIER_VALUE: u32 = 15114;
pub const ERROR_MRM_NO_CANDIDATE: u32 = 15115;
pub const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE: u32 = 15116;
pub const ERROR_MRM_RESOURCE_TYPE_MISMATCH: u32 = 15117;
pub const ERROR_MRM_DUPLICATE_MAP_NAME: u32 = 15118;
pub const ERROR_MRM_DUPLICATE_ENTRY: u32 = 15119;
pub const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER: u32 = 15120;
pub const ERROR_MRM_FILEPATH_TOO_LONG: u32 = 15121;
pub const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE: u32 = 15122;
pub const ERROR_MRM_INVALID_PRI_FILE: u32 = 15126;
pub const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND: u32 = 15127;
pub const ERROR_MRM_MAP_NOT_FOUND: u32 = 15135;
pub const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE: u32 = 15136;
pub const ERROR_MRM_INVALID_QUALIFIER_OPERATOR: u32 = 15137;
pub const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE: u32 = 15138;
pub const ERROR_MRM_AUTOMERGE_ENABLED: u32 = 15139;
pub const ERROR_MRM_TOO_MANY_RESOURCES: u32 = 15140;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE: u32 = 15141;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE: u32 = 15142;
pub const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD: u32 = 15143;
pub const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST: u32 = 15144;
pub const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT: u32 = 15145;
pub const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE: u32 = 15146;
pub const ERROR_MRM_GENERATION_COUNT_MISMATCH: u32 = 15147;
pub const ERROR_PRI_MERGE_VERSION_MISMATCH: u32 = 15148;
pub const ERROR_PRI_MERGE_MISSING_SCHEMA: u32 = 15149;
pub const ERROR_PRI_MERGE_LOAD_FILE_FAILED: u32 = 15150;
pub const ERROR_PRI_MERGE_ADD_FILE_FAILED: u32 = 15151;
pub const ERROR_PRI_MERGE_WRITE_FILE_FAILED: u32 = 15152;
pub const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED: u32 = 15153;
pub const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED: u32 = 15154;
pub const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED: u32 = 15155;
pub const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED: u32 = 15156;
pub const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED: u32 = 15157;
pub const ERROR_PRI_MERGE_INVALID_FILE_NAME: u32 = 15158;
pub const ERROR_MRM_PACKAGE_NOT_FOUND: u32 = 15159;
pub const ERROR_MRM_MISSING_DEFAULT_LANGUAGE: u32 = 15160;
pub const ERROR_MRM_SCOPE_ITEM_CONFLICT: u32 = 15161;
pub const ERROR_MCA_INVALID_CAPABILITIES_STRING: u32 = 15200;
pub const ERROR_MCA_INVALID_VCP_VERSION: u32 = 15201;
pub const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION: u32 = 15202;
pub const ERROR_MCA_MCCS_VERSION_MISMATCH: u32 = 15203;
pub const ERROR_MCA_UNSUPPORTED_MCCS_VERSION: u32 = 15204;
pub const ERROR_MCA_INTERNAL_ERROR: u32 = 15205;
pub const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED: u32 = 15206;
pub const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE: u32 = 15207;
pub const ERROR_AMBIGUOUS_SYSTEM_DEVICE: u32 = 15250;
pub const ERROR_SYSTEM_DEVICE_NOT_FOUND: u32 = 15299;
pub const ERROR_HASH_NOT_SUPPORTED: u32 = 15300;
pub const ERROR_HASH_NOT_PRESENT: u32 = 15301;
pub const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED: u32 = 15321;
pub const ERROR_GPIO_CLIENT_INFORMATION_INVALID: u32 = 15322;
pub const ERROR_GPIO_VERSION_NOT_SUPPORTED: u32 = 15323;
pub const ERROR_GPIO_INVALID_REGISTRATION_PACKET: u32 = 15324;
pub const ERROR_GPIO_OPERATION_DENIED: u32 = 15325;
pub const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE: u32 = 15326;
pub const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED: u32 = 15327;
pub const ERROR_CANNOT_SWITCH_RUNLEVEL: u32 = 15400;
pub const ERROR_INVALID_RUNLEVEL_SETTING: u32 = 15401;
pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT: u32 = 15402;
pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT: u32 = 15403;
pub const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS: u32 = 15404;
pub const ERROR_SERVICES_FAILED_AUTOSTART: u32 = 15405;
pub const ERROR_COM_TASK_STOP_PENDING: u32 = 15501;
pub const ERROR_INSTALL_OPEN_PACKAGE_FAILED: u32 = 15600;
pub const ERROR_INSTALL_PACKAGE_NOT_FOUND: u32 = 15601;
pub const ERROR_INSTALL_INVALID_PACKAGE: u32 = 15602;
pub const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED: u32 = 15603;
pub const ERROR_INSTALL_OUT_OF_DISK_SPACE: u32 = 15604;
pub const ERROR_INSTALL_NETWORK_FAILURE: u32 = 15605;
pub const ERROR_INSTALL_REGISTRATION_FAILURE: u32 = 15606;
pub const ERROR_INSTALL_DEREGISTRATION_FAILURE: u32 = 15607;
pub const ERROR_INSTALL_CANCEL: u32 = 15608;
pub const ERROR_INSTALL_FAILED: u32 = 15609;
pub const ERROR_REMOVE_FAILED: u32 = 15610;
pub const ERROR_PACKAGE_ALREADY_EXISTS: u32 = 15611;
pub const ERROR_NEEDS_REMEDIATION: u32 = 15612;
pub const ERROR_INSTALL_PREREQUISITE_FAILED: u32 = 15613;
pub const ERROR_PACKAGE_REPOSITORY_CORRUPTED: u32 = 15614;
pub const ERROR_INSTALL_POLICY_FAILURE: u32 = 15615;
pub const ERROR_PACKAGE_UPDATING: u32 = 15616;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY: u32 = 15617;
pub const ERROR_PACKAGES_IN_USE: u32 = 15618;
pub const ERROR_RECOVERY_FILE_CORRUPT: u32 = 15619;
pub const ERROR_INVALID_STAGED_SIGNATURE: u32 = 15620;
pub const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED: u32 = 15621;
pub const ERROR_INSTALL_PACKAGE_DOWNGRADE: u32 = 15622;
pub const ERROR_SYSTEM_NEEDS_REMEDIATION: u32 = 15623;
pub const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN: u32 = 15624;
pub const ERROR_RESILIENCY_FILE_CORRUPT: u32 = 15625;
pub const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING: u32 = 15626;
pub const ERROR_PACKAGE_MOVE_FAILED: u32 = 15627;
pub const ERROR_INSTALL_VOLUME_NOT_EMPTY: u32 = 15628;
pub const ERROR_INSTALL_VOLUME_OFFLINE: u32 = 15629;
pub const ERROR_INSTALL_VOLUME_CORRUPT: u32 = 15630;
pub const ERROR_NEEDS_REGISTRATION: u32 = 15631;
pub const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE: u32 = 15632;
pub const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED: u32 = 15633;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE: u32 = 15634;
pub const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM: u32 = 15635;
pub const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING: u32 = 15636;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE: u32 = 15637;
pub const ERROR_PACKAGE_STAGING_ONHOLD: u32 = 15638;
pub const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE: u32 = 15639;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY: u32 = 15640;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF: u32 = 15641;
pub const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED: u32 = 15642;
pub const ERROR_PACKAGES_REPUTATION_CHECK_FAILED: u32 = 15643;
pub const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT: u32 = 15644;
pub const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED: u32 = 15645;
pub const ERROR_APPINSTALLER_ACTIVATION_BLOCKED: u32 = 15646;
pub const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED: u32 = 15647;
pub const ERROR_APPX_RAW_DATA_WRITE_FAILED: u32 = 15648;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE: u32 = 15649;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE: u32 = 15650;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY: u32 = 15651;
pub const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY: u32 = 15652;
pub const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER: u32 = 15653;
pub const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED: u32 = 15654;
pub const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE: u32 = 15655;
pub const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES: u32 = 15656;
pub const ERROR_REDIRECTION_TO_DEFAULT_ACCOUNT_NOT_ALLOWED: u32 = 15657;
pub const ERROR_PACKAGE_LACKS_CAPABILITY_TO_DEPLOY_ON_HOST: u32 = 15658;
pub const ERROR_UNSIGNED_PACKAGE_INVALID_CONTENT: u32 = 15659;
pub const ERROR_UNSIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE: u32 = 15660;
pub const ERROR_SIGNED_PACKAGE_INVALID_PUBLISHER_NAMESPACE: u32 = 15661;
pub const ERROR_PACKAGE_EXTERNAL_LOCATION_NOT_ALLOWED: u32 = 15662;
pub const ERROR_INSTALL_FULLTRUST_HOSTRUNTIME_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY: u32 =
    15663;
pub const ERROR_PACKAGE_LACKS_CAPABILITY_FOR_MANDATORY_STARTUPTASKS: u32 = 15664;
pub const ERROR_INSTALL_RESOLVE_HOSTRUNTIME_DEPENDENCY_FAILED: u32 = 15665;
pub const ERROR_MACHINE_SCOPE_NOT_ALLOWED: u32 = 15666;
pub const ERROR_CLASSIC_COMPAT_MODE_NOT_ALLOWED: u32 = 15667;
pub const ERROR_STAGEFROMUPDATEAGENT_PACKAGE_NOT_APPLICABLE: u32 = 15668;
pub const ERROR_PACKAGE_NOT_REGISTERED_FOR_USER: u32 = 15669;
pub const ERROR_PACKAGE_NAME_MISMATCH: u32 = 15670;
pub const ERROR_APPINSTALLER_URI_IN_USE: u32 = 15671;
pub const ERROR_APPINSTALLER_IS_MANAGED_BY_SYSTEM: u32 = 15672;
pub const ERROR_SERVICE_BLOCKED_BY_SYSPREP_IN_PROGRESS: u32 = 15673;
pub const ERROR_UNSUPPORTED_ARM32_PACKAGE_REQUIRES_REMEDIAITON: u32 = 15674;
pub const ERROR_UUP_PRODUCT_NOT_APPLICABLE: u32 = 15675;
pub const ERROR_BLOCKED_BY_PENDING_PACKAGE_REMOVAL: u32 = 15676;
pub const APPMODEL_ERROR_NO_PACKAGE: u32 = 15700;
pub const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT: u32 = 15701;
pub const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT: u32 = 15702;
pub const APPMODEL_ERROR_NO_APPLICATION: u32 = 15703;
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED: u32 = 15704;
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID: u32 = 15705;
pub const APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE: u32 = 15706;
pub const APPMODEL_ERROR_NO_MUTABLE_DIRECTORY: u32 = 15707;
pub const ERROR_STATE_LOAD_STORE_FAILED: u32 = 15800;
pub const ERROR_STATE_GET_VERSION_FAILED: u32 = 15801;
pub const ERROR_STATE_SET_VERSION_FAILED: u32 = 15802;
pub const ERROR_STATE_STRUCTURED_RESET_FAILED: u32 = 15803;
pub const ERROR_STATE_OPEN_CONTAINER_FAILED: u32 = 15804;
pub const ERROR_STATE_CREATE_CONTAINER_FAILED: u32 = 15805;
pub const ERROR_STATE_DELETE_CONTAINER_FAILED: u32 = 15806;
pub const ERROR_STATE_READ_SETTING_FAILED: u32 = 15807;
pub const ERROR_STATE_WRITE_SETTING_FAILED: u32 = 15808;
pub const ERROR_STATE_DELETE_SETTING_FAILED: u32 = 15809;
pub const ERROR_STATE_QUERY_SETTING_FAILED: u32 = 15810;
pub const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED: u32 = 15811;
pub const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED: u32 = 15812;
pub const ERROR_STATE_ENUMERATE_CONTAINER_FAILED: u32 = 15813;
pub const ERROR_STATE_ENUMERATE_SETTINGS_FAILED: u32 = 15814;
pub const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: u32 = 15815;
pub const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED: u32 = 15816;
pub const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED: u32 = 15817;
pub const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED: u32 = 15818;
pub const ERROR_API_UNAVAILABLE: u32 = 15841;
pub const STORE_ERROR_UNLICENSED: u32 = 15861;
pub const STORE_ERROR_UNLICENSED_USER: u32 = 15862;
pub const STORE_ERROR_PENDING_COM_TRANSACTION: u32 = 15863;
pub const STORE_ERROR_LICENSE_REVOKED: u32 = 15864;
pub const SEVERITY_SUCCESS: u32 = 0;
pub const SEVERITY_ERROR: u32 = 1;
pub const FACILITY_NT_BIT: u32 = 268435456;
pub const NOERROR: u32 = 0;
pub const DRAGDROP_E_FIRST: u32 = 2147746048;
pub const DRAGDROP_E_LAST: u32 = 2147746063;
pub const DRAGDROP_S_FIRST: u32 = 262400;
pub const DRAGDROP_S_LAST: u32 = 262415;
pub const CLASSFACTORY_E_FIRST: u32 = 2147746064;
pub const CLASSFACTORY_E_LAST: u32 = 2147746079;
pub const CLASSFACTORY_S_FIRST: u32 = 262416;
pub const CLASSFACTORY_S_LAST: u32 = 262431;
pub const MARSHAL_E_FIRST: u32 = 2147746080;
pub const MARSHAL_E_LAST: u32 = 2147746095;
pub const MARSHAL_S_FIRST: u32 = 262432;
pub const MARSHAL_S_LAST: u32 = 262447;
pub const DATA_E_FIRST: u32 = 2147746096;
pub const DATA_E_LAST: u32 = 2147746111;
pub const DATA_S_FIRST: u32 = 262448;
pub const DATA_S_LAST: u32 = 262463;
pub const VIEW_E_FIRST: u32 = 2147746112;
pub const VIEW_E_LAST: u32 = 2147746127;
pub const VIEW_S_FIRST: u32 = 262464;
pub const VIEW_S_LAST: u32 = 262479;
pub const REGDB_E_FIRST: u32 = 2147746128;
pub const REGDB_E_LAST: u32 = 2147746143;
pub const REGDB_S_FIRST: u32 = 262480;
pub const REGDB_S_LAST: u32 = 262495;
pub const CAT_E_FIRST: u32 = 2147746144;
pub const CAT_E_LAST: u32 = 2147746145;
pub const CS_E_FIRST: u32 = 2147746148;
pub const CS_E_LAST: u32 = 2147746159;
pub const CACHE_E_FIRST: u32 = 2147746160;
pub const CACHE_E_LAST: u32 = 2147746175;
pub const CACHE_S_FIRST: u32 = 262512;
pub const CACHE_S_LAST: u32 = 262527;
pub const OLEOBJ_E_FIRST: u32 = 2147746176;
pub const OLEOBJ_E_LAST: u32 = 2147746191;
pub const OLEOBJ_S_FIRST: u32 = 262528;
pub const OLEOBJ_S_LAST: u32 = 262543;
pub const CLIENTSITE_E_FIRST: u32 = 2147746192;
pub const CLIENTSITE_E_LAST: u32 = 2147746207;
pub const CLIENTSITE_S_FIRST: u32 = 262544;
pub const CLIENTSITE_S_LAST: u32 = 262559;
pub const INPLACE_E_FIRST: u32 = 2147746208;
pub const INPLACE_E_LAST: u32 = 2147746223;
pub const INPLACE_S_FIRST: u32 = 262560;
pub const INPLACE_S_LAST: u32 = 262575;
pub const ENUM_E_FIRST: u32 = 2147746224;
pub const ENUM_E_LAST: u32 = 2147746239;
pub const ENUM_S_FIRST: u32 = 262576;
pub const ENUM_S_LAST: u32 = 262591;
pub const CONVERT10_E_FIRST: u32 = 2147746240;
pub const CONVERT10_E_LAST: u32 = 2147746255;
pub const CONVERT10_S_FIRST: u32 = 262592;
pub const CONVERT10_S_LAST: u32 = 262607;
pub const CLIPBRD_E_FIRST: u32 = 2147746256;
pub const CLIPBRD_E_LAST: u32 = 2147746271;
pub const CLIPBRD_S_FIRST: u32 = 262608;
pub const CLIPBRD_S_LAST: u32 = 262623;
pub const MK_E_FIRST: u32 = 2147746272;
pub const MK_E_LAST: u32 = 2147746287;
pub const MK_S_FIRST: u32 = 262624;
pub const MK_S_LAST: u32 = 262639;
pub const CO_E_FIRST: u32 = 2147746288;
pub const CO_E_LAST: u32 = 2147746303;
pub const CO_S_FIRST: u32 = 262640;
pub const CO_S_LAST: u32 = 262655;
pub const EVENT_E_FIRST: u32 = 2147746304;
pub const EVENT_E_LAST: u32 = 2147746335;
pub const EVENT_S_FIRST: u32 = 262656;
pub const EVENT_S_LAST: u32 = 262687;
pub const XACT_E_FIRST: u32 = 2147799040;
pub const XACT_E_LAST: u32 = 2147799083;
pub const XACT_S_FIRST: u32 = 315392;
pub const XACT_S_LAST: u32 = 315408;
pub const CONTEXT_E_FIRST: u32 = 2147803136;
pub const CONTEXT_E_LAST: u32 = 2147803183;
pub const CONTEXT_S_FIRST: u32 = 319488;
pub const CONTEXT_S_LAST: u32 = 319535;
pub const NTE_OP_OK: u32 = 0;
pub const SCARD_S_SUCCESS: u32 = 0;
pub const TC_NORMAL: u32 = 0;
pub const TC_HARDERR: u32 = 1;
pub const TC_GP_TRAP: u32 = 2;
pub const TC_SIGNAL: u32 = 3;
pub const AC_LINE_OFFLINE: u32 = 0;
pub const AC_LINE_ONLINE: u32 = 1;
pub const AC_LINE_BACKUP_POWER: u32 = 2;
pub const AC_LINE_UNKNOWN: u32 = 255;
pub const BATTERY_FLAG_HIGH: u32 = 1;
pub const BATTERY_FLAG_LOW: u32 = 2;
pub const BATTERY_FLAG_CRITICAL: u32 = 4;
pub const BATTERY_FLAG_CHARGING: u32 = 8;
pub const BATTERY_FLAG_NO_BATTERY: u32 = 128;
pub const BATTERY_FLAG_UNKNOWN: u32 = 255;
pub const BATTERY_PERCENTAGE_UNKNOWN: u32 = 255;
pub const SYSTEM_STATUS_FLAG_POWER_SAVING_ON: u32 = 1;
pub const BATTERY_LIFE_UNKNOWN: u32 = 4294967295;
pub const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID: u32 = 1;
pub const ACTCTX_FLAG_LANGID_VALID: u32 = 2;
pub const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID: u32 = 4;
pub const ACTCTX_FLAG_RESOURCE_NAME_VALID: u32 = 8;
pub const ACTCTX_FLAG_SET_PROCESS_DEFAULT: u32 = 16;
pub const ACTCTX_FLAG_APPLICATION_NAME_VALID: u32 = 32;
pub const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF: u32 = 64;
pub const ACTCTX_FLAG_HMODULE_VALID: u32 = 128;
pub const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION: u32 = 1;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX: u32 = 1;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS: u32 = 2;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA: u32 = 4;
pub const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED: u32 = 1;
pub const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX: u32 = 4;
pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE: u32 = 8;
pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS: u32 = 16;
pub const QUERY_ACTCTX_FLAG_NO_ADDREF: u32 = 2147483648;
pub const RESTART_MAX_CMD_LINE: u32 = 1024;
pub const RESTART_NO_CRASH: u32 = 1;
pub const RESTART_NO_HANG: u32 = 2;
pub const RESTART_NO_PATCH: u32 = 4;
pub const RESTART_NO_REBOOT: u32 = 8;
pub const RECOVERY_DEFAULT_PING_INTERVAL: u32 = 5000;
pub const RECOVERY_MAX_PING_INTERVAL: u32 = 300000;
pub const FILE_RENAME_FLAG_REPLACE_IF_EXISTS: u32 = 1;
pub const FILE_RENAME_FLAG_POSIX_SEMANTICS: u32 = 2;
pub const FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE: u32 = 4;
pub const FILE_DISPOSITION_FLAG_DO_NOT_DELETE: u32 = 0;
pub const FILE_DISPOSITION_FLAG_DELETE: u32 = 1;
pub const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS: u32 = 2;
pub const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK: u32 = 4;
pub const FILE_DISPOSITION_FLAG_ON_CLOSE: u32 = 8;
pub const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE: u32 = 16;
pub const STORAGE_INFO_FLAGS_ALIGNED_DEVICE: u32 = 1;
pub const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE: u32 = 2;
pub const STORAGE_INFO_OFFSET_UNKNOWN: u32 = 4294967295;
pub const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK: u32 = 1;
pub const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE: u32 = 2;
pub const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE: u32 = 4;
pub const RPI_FLAG_SMB2_SHARECAP_TIMEWARP: u32 = 2;
pub const RPI_FLAG_SMB2_SHARECAP_DFS: u32 = 8;
pub const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY: u32 = 16;
pub const RPI_FLAG_SMB2_SHARECAP_SCALEOUT: u32 = 32;
pub const RPI_FLAG_SMB2_SHARECAP_CLUSTER: u32 = 64;
pub const RPI_SMB2_SHAREFLAG_ENCRYPT_DATA: u32 = 1;
pub const RPI_SMB2_SHAREFLAG_COMPRESS_DATA: u32 = 2;
pub const RPI_SMB2_FLAG_SERVERCAP_DFS: u32 = 1;
pub const RPI_SMB2_FLAG_SERVERCAP_LEASING: u32 = 2;
pub const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU: u32 = 4;
pub const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL: u32 = 8;
pub const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES: u32 = 16;
pub const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING: u32 = 32;
pub const SYMBOLIC_LINK_FLAG_DIRECTORY: u32 = 1;
pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE: u32 = 2;
pub const MICROSOFT_WINDOWS_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: u32 = 1;
pub const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS: u32 = 0;
pub const R2_BLACK: u32 = 1;
pub const R2_NOTMERGEPEN: u32 = 2;
pub const R2_MASKNOTPEN: u32 = 3;
pub const R2_NOTCOPYPEN: u32 = 4;
pub const R2_MASKPENNOT: u32 = 5;
pub const R2_NOT: u32 = 6;
pub const R2_XORPEN: u32 = 7;
pub const R2_NOTMASKPEN: u32 = 8;
pub const R2_MASKPEN: u32 = 9;
pub const R2_NOTXORPEN: u32 = 10;
pub const R2_NOP: u32 = 11;
pub const R2_MERGENOTPEN: u32 = 12;
pub const R2_COPYPEN: u32 = 13;
pub const R2_MERGEPENNOT: u32 = 14;
pub const R2_MERGEPEN: u32 = 15;
pub const R2_WHITE: u32 = 16;
pub const R2_LAST: u32 = 16;
pub const GDI_ERROR: u32 = 4294967295;
pub const ERROR: u32 = 0;
pub const NULLREGION: u32 = 1;
pub const SIMPLEREGION: u32 = 2;
pub const COMPLEXREGION: u32 = 3;
pub const RGN_ERROR: u32 = 0;
pub const RGN_AND: u32 = 1;
pub const RGN_OR: u32 = 2;
pub const RGN_XOR: u32 = 3;
pub const RGN_DIFF: u32 = 4;
pub const RGN_COPY: u32 = 5;
pub const RGN_MIN: u32 = 1;
pub const RGN_MAX: u32 = 5;
pub const BLACKONWHITE: u32 = 1;
pub const WHITEONBLACK: u32 = 2;
pub const COLORONCOLOR: u32 = 3;
pub const HALFTONE: u32 = 4;
pub const MAXSTRETCHBLTMODE: u32 = 4;
pub const STRETCH_ANDSCANS: u32 = 1;
pub const STRETCH_ORSCANS: u32 = 2;
pub const STRETCH_DELETESCANS: u32 = 3;
pub const STRETCH_HALFTONE: u32 = 4;
pub const ALTERNATE: u32 = 1;
pub const WINDING: u32 = 2;
pub const POLYFILL_LAST: u32 = 2;
pub const LAYOUT_RTL: u32 = 1;
pub const LAYOUT_BTT: u32 = 2;
pub const LAYOUT_VBH: u32 = 4;
pub const LAYOUT_ORIENTATIONMASK: u32 = 7;
pub const LAYOUT_BITMAPORIENTATIONPRESERVED: u32 = 8;
pub const TA_NOUPDATECP: u32 = 0;
pub const TA_UPDATECP: u32 = 1;
pub const TA_LEFT: u32 = 0;
pub const TA_RIGHT: u32 = 2;
pub const TA_CENTER: u32 = 6;
pub const TA_TOP: u32 = 0;
pub const TA_BOTTOM: u32 = 8;
pub const TA_BASELINE: u32 = 24;
pub const TA_RTLREADING: u32 = 256;
pub const TA_MASK: u32 = 287;
pub const VTA_BASELINE: u32 = 24;
pub const VTA_LEFT: u32 = 8;
pub const VTA_RIGHT: u32 = 0;
pub const VTA_CENTER: u32 = 6;
pub const VTA_BOTTOM: u32 = 2;
pub const VTA_TOP: u32 = 0;
pub const ETO_OPAQUE: u32 = 2;
pub const ETO_CLIPPED: u32 = 4;
pub const ETO_GLYPH_INDEX: u32 = 16;
pub const ETO_RTLREADING: u32 = 128;
pub const ETO_NUMERICSLOCAL: u32 = 1024;
pub const ETO_NUMERICSLATIN: u32 = 2048;
pub const ETO_IGNORELANGUAGE: u32 = 4096;
pub const ETO_PDY: u32 = 8192;
pub const ETO_REVERSE_INDEX_MAP: u32 = 65536;
pub const ASPECT_FILTERING: u32 = 1;
pub const DCB_RESET: u32 = 1;
pub const DCB_ACCUMULATE: u32 = 2;
pub const DCB_DIRTY: u32 = 2;
pub const DCB_SET: u32 = 3;
pub const DCB_ENABLE: u32 = 4;
pub const DCB_DISABLE: u32 = 8;
pub const META_SETBKCOLOR: u32 = 513;
pub const META_SETBKMODE: u32 = 258;
pub const META_SETMAPMODE: u32 = 259;
pub const META_SETROP2: u32 = 260;
pub const META_SETRELABS: u32 = 261;
pub const META_SETPOLYFILLMODE: u32 = 262;
pub const META_SETSTRETCHBLTMODE: u32 = 263;
pub const META_SETTEXTCHAREXTRA: u32 = 264;
pub const META_SETTEXTCOLOR: u32 = 521;
pub const META_SETTEXTJUSTIFICATION: u32 = 522;
pub const META_SETWINDOWORG: u32 = 523;
pub const META_SETWINDOWEXT: u32 = 524;
pub const META_SETVIEWPORTORG: u32 = 525;
pub const META_SETVIEWPORTEXT: u32 = 526;
pub const META_OFFSETWINDOWORG: u32 = 527;
pub const META_SCALEWINDOWEXT: u32 = 1040;
pub const META_OFFSETVIEWPORTORG: u32 = 529;
pub const META_SCALEVIEWPORTEXT: u32 = 1042;
pub const META_LINETO: u32 = 531;
pub const META_MOVETO: u32 = 532;
pub const META_EXCLUDECLIPRECT: u32 = 1045;
pub const META_INTERSECTCLIPRECT: u32 = 1046;
pub const META_ARC: u32 = 2071;
pub const META_ELLIPSE: u32 = 1048;
pub const META_FLOODFILL: u32 = 1049;
pub const META_PIE: u32 = 2074;
pub const META_RECTANGLE: u32 = 1051;
pub const META_ROUNDRECT: u32 = 1564;
pub const META_PATBLT: u32 = 1565;
pub const META_SAVEDC: u32 = 30;
pub const META_SETPIXEL: u32 = 1055;
pub const META_OFFSETCLIPRGN: u32 = 544;
pub const META_TEXTOUT: u32 = 1313;
pub const META_BITBLT: u32 = 2338;
pub const META_STRETCHBLT: u32 = 2851;
pub const META_POLYGON: u32 = 804;
pub const META_POLYLINE: u32 = 805;
pub const META_ESCAPE: u32 = 1574;
pub const META_RESTOREDC: u32 = 295;
pub const META_FILLREGION: u32 = 552;
pub const META_FRAMEREGION: u32 = 1065;
pub const META_INVERTREGION: u32 = 298;
pub const META_PAINTREGION: u32 = 299;
pub const META_SELECTCLIPREGION: u32 = 300;
pub const META_SELECTOBJECT: u32 = 301;
pub const META_SETTEXTALIGN: u32 = 302;
pub const META_CHORD: u32 = 2096;
pub const META_SETMAPPERFLAGS: u32 = 561;
pub const META_EXTTEXTOUT: u32 = 2610;
pub const META_SETDIBTODEV: u32 = 3379;
pub const META_SELECTPALETTE: u32 = 564;
pub const META_REALIZEPALETTE: u32 = 53;
pub const META_ANIMATEPALETTE: u32 = 1078;
pub const META_SETPALENTRIES: u32 = 55;
pub const META_POLYPOLYGON: u32 = 1336;
pub const META_RESIZEPALETTE: u32 = 313;
pub const META_DIBBITBLT: u32 = 2368;
pub const META_DIBSTRETCHBLT: u32 = 2881;
pub const META_DIBCREATEPATTERNBRUSH: u32 = 322;
pub const META_STRETCHDIB: u32 = 3907;
pub const META_EXTFLOODFILL: u32 = 1352;
pub const META_SETLAYOUT: u32 = 329;
pub const META_DELETEOBJECT: u32 = 496;
pub const META_CREATEPALETTE: u32 = 247;
pub const META_CREATEPATTERNBRUSH: u32 = 505;
pub const META_CREATEPENINDIRECT: u32 = 762;
pub const META_CREATEFONTINDIRECT: u32 = 763;
pub const META_CREATEBRUSHINDIRECT: u32 = 764;
pub const META_CREATEREGION: u32 = 1791;
pub const NEWFRAME: u32 = 1;
pub const ABORTDOC: u32 = 2;
pub const NEXTBAND: u32 = 3;
pub const SETCOLORTABLE: u32 = 4;
pub const GETCOLORTABLE: u32 = 5;
pub const FLUSHOUTPUT: u32 = 6;
pub const DRAFTMODE: u32 = 7;
pub const QUERYESCSUPPORT: u32 = 8;
pub const SETABORTPROC: u32 = 9;
pub const STARTDOC: u32 = 10;
pub const ENDDOC: u32 = 11;
pub const GETPHYSPAGESIZE: u32 = 12;
pub const GETPRINTINGOFFSET: u32 = 13;
pub const GETSCALINGFACTOR: u32 = 14;
pub const MFCOMMENT: u32 = 15;
pub const GETPENWIDTH: u32 = 16;
pub const SETCOPYCOUNT: u32 = 17;
pub const SELECTPAPERSOURCE: u32 = 18;
pub const DEVICEDATA: u32 = 19;
pub const PASSTHROUGH: u32 = 19;
pub const GETTECHNOLGY: u32 = 20;
pub const GETTECHNOLOGY: u32 = 20;
pub const SETLINECAP: u32 = 21;
pub const SETLINEJOIN: u32 = 22;
pub const SETMITERLIMIT: u32 = 23;
pub const BANDINFO: u32 = 24;
pub const DRAWPATTERNRECT: u32 = 25;
pub const GETVECTORPENSIZE: u32 = 26;
pub const GETVECTORBRUSHSIZE: u32 = 27;
pub const ENABLEDUPLEX: u32 = 28;
pub const GETSETPAPERBINS: u32 = 29;
pub const GETSETPRINTORIENT: u32 = 30;
pub const ENUMPAPERBINS: u32 = 31;
pub const SETDIBSCALING: u32 = 32;
pub const EPSPRINTING: u32 = 33;
pub const ENUMPAPERMETRICS: u32 = 34;
pub const GETSETPAPERMETRICS: u32 = 35;
pub const POSTSCRIPT_DATA: u32 = 37;
pub const POSTSCRIPT_IGNORE: u32 = 38;
pub const MOUSETRAILS: u32 = 39;
pub const GETDEVICEUNITS: u32 = 42;
pub const GETEXTENDEDTEXTMETRICS: u32 = 256;
pub const GETEXTENTTABLE: u32 = 257;
pub const GETPAIRKERNTABLE: u32 = 258;
pub const GETTRACKKERNTABLE: u32 = 259;
pub const EXTTEXTOUT: u32 = 512;
pub const GETFACENAME: u32 = 513;
pub const DOWNLOADFACE: u32 = 514;
pub const ENABLERELATIVEWIDTHS: u32 = 768;
pub const ENABLEPAIRKERNING: u32 = 769;
pub const SETKERNTRACK: u32 = 770;
pub const SETALLJUSTVALUES: u32 = 771;
pub const SETCHARSET: u32 = 772;
pub const STRETCHBLT: u32 = 2048;
pub const METAFILE_DRIVER: u32 = 2049;
pub const GETSETSCREENPARAMS: u32 = 3072;
pub const QUERYDIBSUPPORT: u32 = 3073;
pub const BEGIN_PATH: u32 = 4096;
pub const CLIP_TO_PATH: u32 = 4097;
pub const END_PATH: u32 = 4098;
pub const EXT_DEVICE_CAPS: u32 = 4099;
pub const RESTORE_CTM: u32 = 4100;
pub const SAVE_CTM: u32 = 4101;
pub const SET_ARC_DIRECTION: u32 = 4102;
pub const SET_BACKGROUND_COLOR: u32 = 4103;
pub const SET_POLY_MODE: u32 = 4104;
pub const SET_SCREEN_ANGLE: u32 = 4105;
pub const SET_SPREAD: u32 = 4106;
pub const TRANSFORM_CTM: u32 = 4107;
pub const SET_CLIP_BOX: u32 = 4108;
pub const SET_BOUNDS: u32 = 4109;
pub const SET_MIRROR_MODE: u32 = 4110;
pub const OPENCHANNEL: u32 = 4110;
pub const DOWNLOADHEADER: u32 = 4111;
pub const CLOSECHANNEL: u32 = 4112;
pub const POSTSCRIPT_PASSTHROUGH: u32 = 4115;
pub const ENCAPSULATED_POSTSCRIPT: u32 = 4116;
pub const POSTSCRIPT_IDENTIFY: u32 = 4117;
pub const POSTSCRIPT_INJECTION: u32 = 4118;
pub const CHECKJPEGFORMAT: u32 = 4119;
pub const CHECKPNGFORMAT: u32 = 4120;
pub const GET_PS_FEATURESETTING: u32 = 4121;
pub const GDIPLUS_TS_QUERYVER: u32 = 4122;
pub const GDIPLUS_TS_RECORD: u32 = 4123;
pub const MILCORE_TS_QUERYVER_RESULT_FALSE: u32 = 0;
pub const MILCORE_TS_QUERYVER_RESULT_TRUE: u32 = 2147483647;
pub const SPCLPASSTHROUGH2: u32 = 4568;
pub const PSIDENT_GDICENTRIC: u32 = 0;
pub const PSIDENT_PSCENTRIC: u32 = 1;
pub const PSINJECT_BEGINSTREAM: u32 = 1;
pub const PSINJECT_PSADOBE: u32 = 2;
pub const PSINJECT_PAGESATEND: u32 = 3;
pub const PSINJECT_PAGES: u32 = 4;
pub const PSINJECT_DOCNEEDEDRES: u32 = 5;
pub const PSINJECT_DOCSUPPLIEDRES: u32 = 6;
pub const PSINJECT_PAGEORDER: u32 = 7;
pub const PSINJECT_ORIENTATION: u32 = 8;
pub const PSINJECT_BOUNDINGBOX: u32 = 9;
pub const PSINJECT_DOCUMENTPROCESSCOLORS: u32 = 10;
pub const PSINJECT_COMMENTS: u32 = 11;
pub const PSINJECT_BEGINDEFAULTS: u32 = 12;
pub const PSINJECT_ENDDEFAULTS: u32 = 13;
pub const PSINJECT_BEGINPROLOG: u32 = 14;
pub const PSINJECT_ENDPROLOG: u32 = 15;
pub const PSINJECT_BEGINSETUP: u32 = 16;
pub const PSINJECT_ENDSETUP: u32 = 17;
pub const PSINJECT_TRAILER: u32 = 18;
pub const PSINJECT_EOF: u32 = 19;
pub const PSINJECT_ENDSTREAM: u32 = 20;
pub const PSINJECT_DOCUMENTPROCESSCOLORSATEND: u32 = 21;
pub const PSINJECT_PAGENUMBER: u32 = 100;
pub const PSINJECT_BEGINPAGESETUP: u32 = 101;
pub const PSINJECT_ENDPAGESETUP: u32 = 102;
pub const PSINJECT_PAGETRAILER: u32 = 103;
pub const PSINJECT_PLATECOLOR: u32 = 104;
pub const PSINJECT_SHOWPAGE: u32 = 105;
pub const PSINJECT_PAGEBBOX: u32 = 106;
pub const PSINJECT_ENDPAGECOMMENTS: u32 = 107;
pub const PSINJECT_VMSAVE: u32 = 200;
pub const PSINJECT_VMRESTORE: u32 = 201;
pub const PSINJECT_DLFONT: u32 = 3722304989;
pub const FEATURESETTING_NUP: u32 = 0;
pub const FEATURESETTING_OUTPUT: u32 = 1;
pub const FEATURESETTING_PSLEVEL: u32 = 2;
pub const FEATURESETTING_CUSTPAPER: u32 = 3;
pub const FEATURESETTING_MIRROR: u32 = 4;
pub const FEATURESETTING_NEGATIVE: u32 = 5;
pub const FEATURESETTING_PROTOCOL: u32 = 6;
pub const FEATURESETTING_PRIVATE_BEGIN: u32 = 4096;
pub const FEATURESETTING_PRIVATE_END: u32 = 8191;
pub const PSPROTOCOL_ASCII: u32 = 0;
pub const PSPROTOCOL_BCP: u32 = 1;
pub const PSPROTOCOL_TBCP: u32 = 2;
pub const PSPROTOCOL_BINARY: u32 = 3;
pub const QDI_SETDIBITS: u32 = 1;
pub const QDI_GETDIBITS: u32 = 2;
pub const QDI_DIBTOSCREEN: u32 = 4;
pub const QDI_STRETCHDIB: u32 = 8;
pub const SP_NOTREPORTED: u32 = 16384;
pub const SP_ERROR: i32 = -1;
pub const SP_APPABORT: i32 = -2;
pub const SP_USERABORT: i32 = -3;
pub const SP_OUTOFDISK: i32 = -4;
pub const SP_OUTOFMEMORY: i32 = -5;
pub const PR_JOBSTATUS: u32 = 0;
pub const OBJ_PEN: u32 = 1;
pub const OBJ_BRUSH: u32 = 2;
pub const OBJ_DC: u32 = 3;
pub const OBJ_METADC: u32 = 4;
pub const OBJ_PAL: u32 = 5;
pub const OBJ_FONT: u32 = 6;
pub const OBJ_BITMAP: u32 = 7;
pub const OBJ_REGION: u32 = 8;
pub const OBJ_METAFILE: u32 = 9;
pub const OBJ_MEMDC: u32 = 10;
pub const OBJ_EXTPEN: u32 = 11;
pub const OBJ_ENHMETADC: u32 = 12;
pub const OBJ_ENHMETAFILE: u32 = 13;
pub const OBJ_COLORSPACE: u32 = 14;
pub const GDI_OBJ_LAST: u32 = 14;
pub const GDI_MIN_OBJ_TYPE: u32 = 1;
pub const GDI_MAX_OBJ_TYPE: u32 = 14;
pub const MWT_IDENTITY: u32 = 1;
pub const MWT_LEFTMULTIPLY: u32 = 2;
pub const MWT_RIGHTMULTIPLY: u32 = 3;
pub const MWT_MIN: u32 = 1;
pub const MWT_MAX: u32 = 3;
pub const CS_ENABLE: u32 = 1;
pub const CS_DISABLE: u32 = 2;
pub const CS_DELETE_TRANSFORM: u32 = 3;
pub const LCS_CALIBRATED_RGB: u32 = 0;
pub const LCS_GM_BUSINESS: u32 = 1;
pub const LCS_GM_GRAPHICS: u32 = 2;
pub const LCS_GM_IMAGES: u32 = 4;
pub const LCS_GM_ABS_COLORIMETRIC: u32 = 8;
pub const CM_OUT_OF_GAMUT: u32 = 255;
pub const CM_IN_GAMUT: u32 = 0;
pub const ICM_ADDPROFILE: u32 = 1;
pub const ICM_DELETEPROFILE: u32 = 2;
pub const ICM_QUERYPROFILE: u32 = 3;
pub const ICM_SETDEFAULTPROFILE: u32 = 4;
pub const ICM_REGISTERICMATCHER: u32 = 5;
pub const ICM_UNREGISTERICMATCHER: u32 = 6;
pub const ICM_QUERYMATCH: u32 = 7;
pub const BI_RGB: u32 = 0;
pub const BI_RLE8: u32 = 1;
pub const BI_RLE4: u32 = 2;
pub const BI_BITFIELDS: u32 = 3;
pub const BI_JPEG: u32 = 4;
pub const BI_PNG: u32 = 5;
pub const TCI_SRCCHARSET: u32 = 1;
pub const TCI_SRCCODEPAGE: u32 = 2;
pub const TCI_SRCFONTSIG: u32 = 3;
pub const TCI_SRCLOCALE: u32 = 4096;
pub const TMPF_FIXED_PITCH: u32 = 1;
pub const TMPF_VECTOR: u32 = 2;
pub const TMPF_DEVICE: u32 = 8;
pub const TMPF_TRUETYPE: u32 = 4;
pub const NTM_REGULAR: u32 = 64;
pub const NTM_BOLD: u32 = 32;
pub const NTM_ITALIC: u32 = 1;
pub const NTM_NONNEGATIVE_AC: u32 = 65536;
pub const NTM_PS_OPENTYPE: u32 = 131072;
pub const NTM_TT_OPENTYPE: u32 = 262144;
pub const NTM_MULTIPLEMASTER: u32 = 524288;
pub const NTM_TYPE1: u32 = 1048576;
pub const NTM_DSIG: u32 = 2097152;
pub const LF_FACESIZE: u32 = 32;
pub const LF_FULLFACESIZE: u32 = 64;
pub const OUT_DEFAULT_PRECIS: u32 = 0;
pub const OUT_STRING_PRECIS: u32 = 1;
pub const OUT_CHARACTER_PRECIS: u32 = 2;
pub const OUT_STROKE_PRECIS: u32 = 3;
pub const OUT_TT_PRECIS: u32 = 4;
pub const OUT_DEVICE_PRECIS: u32 = 5;
pub const OUT_RASTER_PRECIS: u32 = 6;
pub const OUT_TT_ONLY_PRECIS: u32 = 7;
pub const OUT_OUTLINE_PRECIS: u32 = 8;
pub const OUT_SCREEN_OUTLINE_PRECIS: u32 = 9;
pub const OUT_PS_ONLY_PRECIS: u32 = 10;
pub const CLIP_DEFAULT_PRECIS: u32 = 0;
pub const CLIP_CHARACTER_PRECIS: u32 = 1;
pub const CLIP_STROKE_PRECIS: u32 = 2;
pub const CLIP_MASK: u32 = 15;
pub const CLIP_LH_ANGLES: u32 = 16;
pub const CLIP_TT_ALWAYS: u32 = 32;
pub const CLIP_DFA_DISABLE: u32 = 64;
pub const CLIP_EMBEDDED: u32 = 128;
pub const DEFAULT_QUALITY: u32 = 0;
pub const DRAFT_QUALITY: u32 = 1;
pub const PROOF_QUALITY: u32 = 2;
pub const NONANTIALIASED_QUALITY: u32 = 3;
pub const ANTIALIASED_QUALITY: u32 = 4;
pub const CLEARTYPE_QUALITY: u32 = 5;
pub const CLEARTYPE_NATURAL_QUALITY: u32 = 6;
pub const DEFAULT_PITCH: u32 = 0;
pub const FIXED_PITCH: u32 = 1;
pub const VARIABLE_PITCH: u32 = 2;
pub const MONO_FONT: u32 = 8;
pub const ANSI_CHARSET: u32 = 0;
pub const DEFAULT_CHARSET: u32 = 1;
pub const SYMBOL_CHARSET: u32 = 2;
pub const SHIFTJIS_CHARSET: u32 = 128;
pub const HANGEUL_CHARSET: u32 = 129;
pub const HANGUL_CHARSET: u32 = 129;
pub const GB2312_CHARSET: u32 = 134;
pub const CHINESEBIG5_CHARSET: u32 = 136;
pub const OEM_CHARSET: u32 = 255;
pub const JOHAB_CHARSET: u32 = 130;
pub const HEBREW_CHARSET: u32 = 177;
pub const ARABIC_CHARSET: u32 = 178;
pub const GREEK_CHARSET: u32 = 161;
pub const TURKISH_CHARSET: u32 = 162;
pub const VIETNAMESE_CHARSET: u32 = 163;
pub const THAI_CHARSET: u32 = 222;
pub const EASTEUROPE_CHARSET: u32 = 238;
pub const RUSSIAN_CHARSET: u32 = 204;
pub const MAC_CHARSET: u32 = 77;
pub const BALTIC_CHARSET: u32 = 186;
pub const FS_LATIN1: u32 = 1;
pub const FS_LATIN2: u32 = 2;
pub const FS_CYRILLIC: u32 = 4;
pub const FS_GREEK: u32 = 8;
pub const FS_TURKISH: u32 = 16;
pub const FS_HEBREW: u32 = 32;
pub const FS_ARABIC: u32 = 64;
pub const FS_BALTIC: u32 = 128;
pub const FS_VIETNAMESE: u32 = 256;
pub const FS_THAI: u32 = 65536;
pub const FS_JISJAPAN: u32 = 131072;
pub const FS_CHINESESIMP: u32 = 262144;
pub const FS_WANSUNG: u32 = 524288;
pub const FS_CHINESETRAD: u32 = 1048576;
pub const FS_JOHAB: u32 = 2097152;
pub const FS_SYMBOL: u32 = 2147483648;
pub const FF_DONTCARE: u32 = 0;
pub const FF_ROMAN: u32 = 16;
pub const FF_SWISS: u32 = 32;
pub const FF_MODERN: u32 = 48;
pub const FF_SCRIPT: u32 = 64;
pub const FF_DECORATIVE: u32 = 80;
pub const FW_DONTCARE: u32 = 0;
pub const FW_THIN: u32 = 100;
pub const FW_EXTRALIGHT: u32 = 200;
pub const FW_LIGHT: u32 = 300;
pub const FW_NORMAL: u32 = 400;
pub const FW_MEDIUM: u32 = 500;
pub const FW_SEMIBOLD: u32 = 600;
pub const FW_BOLD: u32 = 700;
pub const FW_EXTRABOLD: u32 = 800;
pub const FW_HEAVY: u32 = 900;
pub const FW_ULTRALIGHT: u32 = 200;
pub const FW_REGULAR: u32 = 400;
pub const FW_DEMIBOLD: u32 = 600;
pub const FW_ULTRABOLD: u32 = 800;
pub const FW_BLACK: u32 = 900;
pub const PANOSE_COUNT: u32 = 10;
pub const PAN_FAMILYTYPE_INDEX: u32 = 0;
pub const PAN_SERIFSTYLE_INDEX: u32 = 1;
pub const PAN_WEIGHT_INDEX: u32 = 2;
pub const PAN_PROPORTION_INDEX: u32 = 3;
pub const PAN_CONTRAST_INDEX: u32 = 4;
pub const PAN_STROKEVARIATION_INDEX: u32 = 5;
pub const PAN_ARMSTYLE_INDEX: u32 = 6;
pub const PAN_LETTERFORM_INDEX: u32 = 7;
pub const PAN_MIDLINE_INDEX: u32 = 8;
pub const PAN_XHEIGHT_INDEX: u32 = 9;
pub const PAN_CULTURE_LATIN: u32 = 0;
pub const PAN_ANY: u32 = 0;
pub const PAN_NO_FIT: u32 = 1;
pub const PAN_FAMILY_TEXT_DISPLAY: u32 = 2;
pub const PAN_FAMILY_SCRIPT: u32 = 3;
pub const PAN_FAMILY_DECORATIVE: u32 = 4;
pub const PAN_FAMILY_PICTORIAL: u32 = 5;
pub const PAN_SERIF_COVE: u32 = 2;
pub const PAN_SERIF_OBTUSE_COVE: u32 = 3;
pub const PAN_SERIF_SQUARE_COVE: u32 = 4;
pub const PAN_SERIF_OBTUSE_SQUARE_COVE: u32 = 5;
pub const PAN_SERIF_SQUARE: u32 = 6;
pub const PAN_SERIF_THIN: u32 = 7;
pub const PAN_SERIF_BONE: u32 = 8;
pub const PAN_SERIF_EXAGGERATED: u32 = 9;
pub const PAN_SERIF_TRIANGLE: u32 = 10;
pub const PAN_SERIF_NORMAL_SANS: u32 = 11;
pub const PAN_SERIF_OBTUSE_SANS: u32 = 12;
pub const PAN_SERIF_PERP_SANS: u32 = 13;
pub const PAN_SERIF_FLARED: u32 = 14;
pub const PAN_SERIF_ROUNDED: u32 = 15;
pub const PAN_WEIGHT_VERY_LIGHT: u32 = 2;
pub const PAN_WEIGHT_LIGHT: u32 = 3;
pub const PAN_WEIGHT_THIN: u32 = 4;
pub const PAN_WEIGHT_BOOK: u32 = 5;
pub const PAN_WEIGHT_MEDIUM: u32 = 6;
pub const PAN_WEIGHT_DEMI: u32 = 7;
pub const PAN_WEIGHT_BOLD: u32 = 8;
pub const PAN_WEIGHT_HEAVY: u32 = 9;
pub const PAN_WEIGHT_BLACK: u32 = 10;
pub const PAN_WEIGHT_NORD: u32 = 11;
pub const PAN_PROP_OLD_STYLE: u32 = 2;
pub const PAN_PROP_MODERN: u32 = 3;
pub const PAN_PROP_EVEN_WIDTH: u32 = 4;
pub const PAN_PROP_EXPANDED: u32 = 5;
pub const PAN_PROP_CONDENSED: u32 = 6;
pub const PAN_PROP_VERY_EXPANDED: u32 = 7;
pub const PAN_PROP_VERY_CONDENSED: u32 = 8;
pub const PAN_PROP_MONOSPACED: u32 = 9;
pub const PAN_CONTRAST_NONE: u32 = 2;
pub const PAN_CONTRAST_VERY_LOW: u32 = 3;
pub const PAN_CONTRAST_LOW: u32 = 4;
pub const PAN_CONTRAST_MEDIUM_LOW: u32 = 5;
pub const PAN_CONTRAST_MEDIUM: u32 = 6;
pub const PAN_CONTRAST_MEDIUM_HIGH: u32 = 7;
pub const PAN_CONTRAST_HIGH: u32 = 8;
pub const PAN_CONTRAST_VERY_HIGH: u32 = 9;
pub const PAN_STROKE_GRADUAL_DIAG: u32 = 2;
pub const PAN_STROKE_GRADUAL_TRAN: u32 = 3;
pub const PAN_STROKE_GRADUAL_VERT: u32 = 4;
pub const PAN_STROKE_GRADUAL_HORZ: u32 = 5;
pub const PAN_STROKE_RAPID_VERT: u32 = 6;
pub const PAN_STROKE_RAPID_HORZ: u32 = 7;
pub const PAN_STROKE_INSTANT_VERT: u32 = 8;
pub const PAN_STRAIGHT_ARMS_HORZ: u32 = 2;
pub const PAN_STRAIGHT_ARMS_WEDGE: u32 = 3;
pub const PAN_STRAIGHT_ARMS_VERT: u32 = 4;
pub const PAN_STRAIGHT_ARMS_SINGLE_SERIF: u32 = 5;
pub const PAN_STRAIGHT_ARMS_DOUBLE_SERIF: u32 = 6;
pub const PAN_BENT_ARMS_HORZ: u32 = 7;
pub const PAN_BENT_ARMS_WEDGE: u32 = 8;
pub const PAN_BENT_ARMS_VERT: u32 = 9;
pub const PAN_BENT_ARMS_SINGLE_SERIF: u32 = 10;
pub const PAN_BENT_ARMS_DOUBLE_SERIF: u32 = 11;
pub const PAN_LETT_NORMAL_CONTACT: u32 = 2;
pub const PAN_LETT_NORMAL_WEIGHTED: u32 = 3;
pub const PAN_LETT_NORMAL_BOXED: u32 = 4;
pub const PAN_LETT_NORMAL_FLATTENED: u32 = 5;
pub const PAN_LETT_NORMAL_ROUNDED: u32 = 6;
pub const PAN_LETT_NORMAL_OFF_CENTER: u32 = 7;
pub const PAN_LETT_NORMAL_SQUARE: u32 = 8;
pub const PAN_LETT_OBLIQUE_CONTACT: u32 = 9;
pub const PAN_LETT_OBLIQUE_WEIGHTED: u32 = 10;
pub const PAN_LETT_OBLIQUE_BOXED: u32 = 11;
pub const PAN_LETT_OBLIQUE_FLATTENED: u32 = 12;
pub const PAN_LETT_OBLIQUE_ROUNDED: u32 = 13;
pub const PAN_LETT_OBLIQUE_OFF_CENTER: u32 = 14;
pub const PAN_LETT_OBLIQUE_SQUARE: u32 = 15;
pub const PAN_MIDLINE_STANDARD_TRIMMED: u32 = 2;
pub const PAN_MIDLINE_STANDARD_POINTED: u32 = 3;
pub const PAN_MIDLINE_STANDARD_SERIFED: u32 = 4;
pub const PAN_MIDLINE_HIGH_TRIMMED: u32 = 5;
pub const PAN_MIDLINE_HIGH_POINTED: u32 = 6;
pub const PAN_MIDLINE_HIGH_SERIFED: u32 = 7;
pub const PAN_MIDLINE_CONSTANT_TRIMMED: u32 = 8;
pub const PAN_MIDLINE_CONSTANT_POINTED: u32 = 9;
pub const PAN_MIDLINE_CONSTANT_SERIFED: u32 = 10;
pub const PAN_MIDLINE_LOW_TRIMMED: u32 = 11;
pub const PAN_MIDLINE_LOW_POINTED: u32 = 12;
pub const PAN_MIDLINE_LOW_SERIFED: u32 = 13;
pub const PAN_XHEIGHT_CONSTANT_SMALL: u32 = 2;
pub const PAN_XHEIGHT_CONSTANT_STD: u32 = 3;
pub const PAN_XHEIGHT_CONSTANT_LARGE: u32 = 4;
pub const PAN_XHEIGHT_DUCKING_SMALL: u32 = 5;
pub const PAN_XHEIGHT_DUCKING_STD: u32 = 6;
pub const PAN_XHEIGHT_DUCKING_LARGE: u32 = 7;
pub const ELF_VENDOR_SIZE: u32 = 4;
pub const ELF_VERSION: u32 = 0;
pub const ELF_CULTURE_LATIN: u32 = 0;
pub const RASTER_FONTTYPE: u32 = 1;
pub const DEVICE_FONTTYPE: u32 = 2;
pub const TRUETYPE_FONTTYPE: u32 = 4;
pub const PC_RESERVED: u32 = 1;
pub const PC_EXPLICIT: u32 = 2;
pub const PC_NOCOLLAPSE: u32 = 4;
pub const TRANSPARENT: u32 = 1;
pub const OPAQUE: u32 = 2;
pub const BKMODE_LAST: u32 = 2;
pub const GM_COMPATIBLE: u32 = 1;
pub const GM_ADVANCED: u32 = 2;
pub const GM_LAST: u32 = 2;
pub const PT_CLOSEFIGURE: u32 = 1;
pub const PT_LINETO: u32 = 2;
pub const PT_BEZIERTO: u32 = 4;
pub const PT_MOVETO: u32 = 6;
pub const MM_TEXT: u32 = 1;
pub const MM_LOMETRIC: u32 = 2;
pub const MM_HIMETRIC: u32 = 3;
pub const MM_LOENGLISH: u32 = 4;
pub const MM_HIENGLISH: u32 = 5;
pub const MM_TWIPS: u32 = 6;
pub const MM_ISOTROPIC: u32 = 7;
pub const MM_ANISOTROPIC: u32 = 8;
pub const MM_MIN: u32 = 1;
pub const MM_MAX: u32 = 8;
pub const MM_MAX_FIXEDSCALE: u32 = 6;
pub const ABSOLUTE: u32 = 1;
pub const RELATIVE: u32 = 2;
pub const WHITE_BRUSH: u32 = 0;
pub const LTGRAY_BRUSH: u32 = 1;
pub const GRAY_BRUSH: u32 = 2;
pub const DKGRAY_BRUSH: u32 = 3;
pub const BLACK_BRUSH: u32 = 4;
pub const NULL_BRUSH: u32 = 5;
pub const HOLLOW_BRUSH: u32 = 5;
pub const WHITE_PEN: u32 = 6;
pub const BLACK_PEN: u32 = 7;
pub const NULL_PEN: u32 = 8;
pub const OEM_FIXED_FONT: u32 = 10;
pub const ANSI_FIXED_FONT: u32 = 11;
pub const ANSI_VAR_FONT: u32 = 12;
pub const SYSTEM_FONT: u32 = 13;
pub const DEVICE_DEFAULT_FONT: u32 = 14;
pub const DEFAULT_PALETTE: u32 = 15;
pub const SYSTEM_FIXED_FONT: u32 = 16;
pub const DEFAULT_GUI_FONT: u32 = 17;
pub const DC_BRUSH: u32 = 18;
pub const DC_PEN: u32 = 19;
pub const STOCK_LAST: u32 = 19;
pub const CLR_INVALID: u32 = 4294967295;
pub const BS_SOLID: u32 = 0;
pub const BS_NULL: u32 = 1;
pub const BS_HOLLOW: u32 = 1;
pub const BS_HATCHED: u32 = 2;
pub const BS_PATTERN: u32 = 3;
pub const BS_INDEXED: u32 = 4;
pub const BS_DIBPATTERN: u32 = 5;
pub const BS_DIBPATTERNPT: u32 = 6;
pub const BS_PATTERN8X8: u32 = 7;
pub const BS_DIBPATTERN8X8: u32 = 8;
pub const BS_MONOPATTERN: u32 = 9;
pub const HS_HORIZONTAL: u32 = 0;
pub const HS_VERTICAL: u32 = 1;
pub const HS_FDIAGONAL: u32 = 2;
pub const HS_BDIAGONAL: u32 = 3;
pub const HS_CROSS: u32 = 4;
pub const HS_DIAGCROSS: u32 = 5;
pub const HS_API_MAX: u32 = 12;
pub const PS_SOLID: u32 = 0;
pub const PS_DASH: u32 = 1;
pub const PS_DOT: u32 = 2;
pub const PS_DASHDOT: u32 = 3;
pub const PS_DASHDOTDOT: u32 = 4;
pub const PS_NULL: u32 = 5;
pub const PS_INSIDEFRAME: u32 = 6;
pub const PS_USERSTYLE: u32 = 7;
pub const PS_ALTERNATE: u32 = 8;
pub const PS_STYLE_MASK: u32 = 15;
pub const PS_ENDCAP_ROUND: u32 = 0;
pub const PS_ENDCAP_SQUARE: u32 = 256;
pub const PS_ENDCAP_FLAT: u32 = 512;
pub const PS_ENDCAP_MASK: u32 = 3840;
pub const PS_JOIN_ROUND: u32 = 0;
pub const PS_JOIN_BEVEL: u32 = 4096;
pub const PS_JOIN_MITER: u32 = 8192;
pub const PS_JOIN_MASK: u32 = 61440;
pub const PS_COSMETIC: u32 = 0;
pub const PS_GEOMETRIC: u32 = 65536;
pub const PS_TYPE_MASK: u32 = 983040;
pub const AD_COUNTERCLOCKWISE: u32 = 1;
pub const AD_CLOCKWISE: u32 = 2;
pub const DRIVERVERSION: u32 = 0;
pub const TECHNOLOGY: u32 = 2;
pub const HORZSIZE: u32 = 4;
pub const VERTSIZE: u32 = 6;
pub const HORZRES: u32 = 8;
pub const VERTRES: u32 = 10;
pub const BITSPIXEL: u32 = 12;
pub const PLANES: u32 = 14;
pub const NUMBRUSHES: u32 = 16;
pub const NUMPENS: u32 = 18;
pub const NUMMARKERS: u32 = 20;
pub const NUMFONTS: u32 = 22;
pub const NUMCOLORS: u32 = 24;
pub const PDEVICESIZE: u32 = 26;
pub const CURVECAPS: u32 = 28;
pub const LINECAPS: u32 = 30;
pub const POLYGONALCAPS: u32 = 32;
pub const TEXTCAPS: u32 = 34;
pub const CLIPCAPS: u32 = 36;
pub const RASTERCAPS: u32 = 38;
pub const ASPECTX: u32 = 40;
pub const ASPECTY: u32 = 42;
pub const ASPECTXY: u32 = 44;
pub const LOGPIXELSX: u32 = 88;
pub const LOGPIXELSY: u32 = 90;
pub const SIZEPALETTE: u32 = 104;
pub const NUMRESERVED: u32 = 106;
pub const COLORRES: u32 = 108;
pub const PHYSICALWIDTH: u32 = 110;
pub const PHYSICALHEIGHT: u32 = 111;
pub const PHYSICALOFFSETX: u32 = 112;
pub const PHYSICALOFFSETY: u32 = 113;
pub const SCALINGFACTORX: u32 = 114;
pub const SCALINGFACTORY: u32 = 115;
pub const VREFRESH: u32 = 116;
pub const DESKTOPVERTRES: u32 = 117;
pub const DESKTOPHORZRES: u32 = 118;
pub const BLTALIGNMENT: u32 = 119;
pub const SHADEBLENDCAPS: u32 = 120;
pub const COLORMGMTCAPS: u32 = 121;
pub const DT_PLOTTER: u32 = 0;
pub const DT_RASDISPLAY: u32 = 1;
pub const DT_RASPRINTER: u32 = 2;
pub const DT_RASCAMERA: u32 = 3;
pub const DT_CHARSTREAM: u32 = 4;
pub const DT_METAFILE: u32 = 5;
pub const DT_DISPFILE: u32 = 6;
pub const CC_NONE: u32 = 0;
pub const CC_CIRCLES: u32 = 1;
pub const CC_PIE: u32 = 2;
pub const CC_CHORD: u32 = 4;
pub const CC_ELLIPSES: u32 = 8;
pub const CC_WIDE: u32 = 16;
pub const CC_STYLED: u32 = 32;
pub const CC_WIDESTYLED: u32 = 64;
pub const CC_INTERIORS: u32 = 128;
pub const CC_ROUNDRECT: u32 = 256;
pub const LC_NONE: u32 = 0;
pub const LC_POLYLINE: u32 = 2;
pub const LC_MARKER: u32 = 4;
pub const LC_POLYMARKER: u32 = 8;
pub const LC_WIDE: u32 = 16;
pub const LC_STYLED: u32 = 32;
pub const LC_WIDESTYLED: u32 = 64;
pub const LC_INTERIORS: u32 = 128;
pub const PC_NONE: u32 = 0;
pub const PC_POLYGON: u32 = 1;
pub const PC_RECTANGLE: u32 = 2;
pub const PC_WINDPOLYGON: u32 = 4;
pub const PC_TRAPEZOID: u32 = 4;
pub const PC_SCANLINE: u32 = 8;
pub const PC_WIDE: u32 = 16;
pub const PC_STYLED: u32 = 32;
pub const PC_WIDESTYLED: u32 = 64;
pub const PC_INTERIORS: u32 = 128;
pub const PC_POLYPOLYGON: u32 = 256;
pub const PC_PATHS: u32 = 512;
pub const CP_NONE: u32 = 0;
pub const CP_RECTANGLE: u32 = 1;
pub const CP_REGION: u32 = 2;
pub const TC_OP_CHARACTER: u32 = 1;
pub const TC_OP_STROKE: u32 = 2;
pub const TC_CP_STROKE: u32 = 4;
pub const TC_CR_90: u32 = 8;
pub const TC_CR_ANY: u32 = 16;
pub const TC_SF_X_YINDEP: u32 = 32;
pub const TC_SA_DOUBLE: u32 = 64;
pub const TC_SA_INTEGER: u32 = 128;
pub const TC_SA_CONTIN: u32 = 256;
pub const TC_EA_DOUBLE: u32 = 512;
pub const TC_IA_ABLE: u32 = 1024;
pub const TC_UA_ABLE: u32 = 2048;
pub const TC_SO_ABLE: u32 = 4096;
pub const TC_RA_ABLE: u32 = 8192;
pub const TC_VA_ABLE: u32 = 16384;
pub const TC_RESERVED: u32 = 32768;
pub const TC_SCROLLBLT: u32 = 65536;
pub const RC_BITBLT: u32 = 1;
pub const RC_BANDING: u32 = 2;
pub const RC_SCALING: u32 = 4;
pub const RC_BITMAP64: u32 = 8;
pub const RC_GDI20_OUTPUT: u32 = 16;
pub const RC_GDI20_STATE: u32 = 32;
pub const RC_SAVEBITMAP: u32 = 64;
pub const RC_DI_BITMAP: u32 = 128;
pub const RC_PALETTE: u32 = 256;
pub const RC_DIBTODEV: u32 = 512;
pub const RC_BIGFONT: u32 = 1024;
pub const RC_STRETCHBLT: u32 = 2048;
pub const RC_FLOODFILL: u32 = 4096;
pub const RC_STRETCHDIB: u32 = 8192;
pub const RC_OP_DX_OUTPUT: u32 = 16384;
pub const RC_DEVBITS: u32 = 32768;
pub const SB_NONE: u32 = 0;
pub const SB_CONST_ALPHA: u32 = 1;
pub const SB_PIXEL_ALPHA: u32 = 2;
pub const SB_PREMULT_ALPHA: u32 = 4;
pub const SB_GRAD_RECT: u32 = 16;
pub const SB_GRAD_TRI: u32 = 32;
pub const CM_NONE: u32 = 0;
pub const CM_DEVICE_ICM: u32 = 1;
pub const CM_GAMMA_RAMP: u32 = 2;
pub const CM_CMYK_COLOR: u32 = 4;
pub const DIB_RGB_COLORS: u32 = 0;
pub const DIB_PAL_COLORS: u32 = 1;
pub const SYSPAL_ERROR: u32 = 0;
pub const SYSPAL_STATIC: u32 = 1;
pub const SYSPAL_NOSTATIC: u32 = 2;
pub const SYSPAL_NOSTATIC256: u32 = 3;
pub const CBM_INIT: u32 = 4;
pub const FLOODFILLBORDER: u32 = 0;
pub const FLOODFILLSURFACE: u32 = 1;
pub const CCHDEVICENAME: u32 = 32;
pub const CCHFORMNAME: u32 = 32;
pub const DM_SPECVERSION: u32 = 1025;
pub const DM_ORIENTATION: u32 = 1;
pub const DM_PAPERSIZE: u32 = 2;
pub const DM_PAPERLENGTH: u32 = 4;
pub const DM_PAPERWIDTH: u32 = 8;
pub const DM_SCALE: u32 = 16;
pub const DM_POSITION: u32 = 32;
pub const DM_NUP: u32 = 64;
pub const DM_DISPLAYORIENTATION: u32 = 128;
pub const DM_COPIES: u32 = 256;
pub const DM_DEFAULTSOURCE: u32 = 512;
pub const DM_PRINTQUALITY: u32 = 1024;
pub const DM_COLOR: u32 = 2048;
pub const DM_DUPLEX: u32 = 4096;
pub const DM_YRESOLUTION: u32 = 8192;
pub const DM_TTOPTION: u32 = 16384;
pub const DM_COLLATE: u32 = 32768;
pub const DM_FORMNAME: u32 = 65536;
pub const DM_LOGPIXELS: u32 = 131072;
pub const DM_BITSPERPEL: u32 = 262144;
pub const DM_PELSWIDTH: u32 = 524288;
pub const DM_PELSHEIGHT: u32 = 1048576;
pub const DM_DISPLAYFLAGS: u32 = 2097152;
pub const DM_DISPLAYFREQUENCY: u32 = 4194304;
pub const DM_ICMMETHOD: u32 = 8388608;
pub const DM_ICMINTENT: u32 = 16777216;
pub const DM_MEDIATYPE: u32 = 33554432;
pub const DM_DITHERTYPE: u32 = 67108864;
pub const DM_PANNINGWIDTH: u32 = 134217728;
pub const DM_PANNINGHEIGHT: u32 = 268435456;
pub const DM_DISPLAYFIXEDOUTPUT: u32 = 536870912;
pub const DMORIENT_PORTRAIT: u32 = 1;
pub const DMORIENT_LANDSCAPE: u32 = 2;
pub const DMPAPER_LETTER: u32 = 1;
pub const DMPAPER_LETTERSMALL: u32 = 2;
pub const DMPAPER_TABLOID: u32 = 3;
pub const DMPAPER_LEDGER: u32 = 4;
pub const DMPAPER_LEGAL: u32 = 5;
pub const DMPAPER_STATEMENT: u32 = 6;
pub const DMPAPER_EXECUTIVE: u32 = 7;
pub const DMPAPER_A3: u32 = 8;
pub const DMPAPER_A4: u32 = 9;
pub const DMPAPER_A4SMALL: u32 = 10;
pub const DMPAPER_A5: u32 = 11;
pub const DMPAPER_B4: u32 = 12;
pub const DMPAPER_B5: u32 = 13;
pub const DMPAPER_FOLIO: u32 = 14;
pub const DMPAPER_QUARTO: u32 = 15;
pub const DMPAPER_10X14: u32 = 16;
pub const DMPAPER_11X17: u32 = 17;
pub const DMPAPER_NOTE: u32 = 18;
pub const DMPAPER_ENV_9: u32 = 19;
pub const DMPAPER_ENV_10: u32 = 20;
pub const DMPAPER_ENV_11: u32 = 21;
pub const DMPAPER_ENV_12: u32 = 22;
pub const DMPAPER_ENV_14: u32 = 23;
pub const DMPAPER_CSHEET: u32 = 24;
pub const DMPAPER_DSHEET: u32 = 25;
pub const DMPAPER_ESHEET: u32 = 26;
pub const DMPAPER_ENV_DL: u32 = 27;
pub const DMPAPER_ENV_C5: u32 = 28;
pub const DMPAPER_ENV_C3: u32 = 29;
pub const DMPAPER_ENV_C4: u32 = 30;
pub const DMPAPER_ENV_C6: u32 = 31;
pub const DMPAPER_ENV_C65: u32 = 32;
pub const DMPAPER_ENV_B4: u32 = 33;
pub const DMPAPER_ENV_B5: u32 = 34;
pub const DMPAPER_ENV_B6: u32 = 35;
pub const DMPAPER_ENV_ITALY: u32 = 36;
pub const DMPAPER_ENV_MONARCH: u32 = 37;
pub const DMPAPER_ENV_PERSONAL: u32 = 38;
pub const DMPAPER_FANFOLD_US: u32 = 39;
pub const DMPAPER_FANFOLD_STD_GERMAN: u32 = 40;
pub const DMPAPER_FANFOLD_LGL_GERMAN: u32 = 41;
pub const DMPAPER_ISO_B4: u32 = 42;
pub const DMPAPER_JAPANESE_POSTCARD: u32 = 43;
pub const DMPAPER_9X11: u32 = 44;
pub const DMPAPER_10X11: u32 = 45;
pub const DMPAPER_15X11: u32 = 46;
pub const DMPAPER_ENV_INVITE: u32 = 47;
pub const DMPAPER_RESERVED_48: u32 = 48;
pub const DMPAPER_RESERVED_49: u32 = 49;
pub const DMPAPER_LETTER_EXTRA: u32 = 50;
pub const DMPAPER_LEGAL_EXTRA: u32 = 51;
pub const DMPAPER_TABLOID_EXTRA: u32 = 52;
pub const DMPAPER_A4_EXTRA: u32 = 53;
pub const DMPAPER_LETTER_TRANSVERSE: u32 = 54;
pub const DMPAPER_A4_TRANSVERSE: u32 = 55;
pub const DMPAPER_LETTER_EXTRA_TRANSVERSE: u32 = 56;
pub const DMPAPER_A_PLUS: u32 = 57;
pub const DMPAPER_B_PLUS: u32 = 58;
pub const DMPAPER_LETTER_PLUS: u32 = 59;
pub const DMPAPER_A4_PLUS: u32 = 60;
pub const DMPAPER_A5_TRANSVERSE: u32 = 61;
pub const DMPAPER_B5_TRANSVERSE: u32 = 62;
pub const DMPAPER_A3_EXTRA: u32 = 63;
pub const DMPAPER_A5_EXTRA: u32 = 64;
pub const DMPAPER_B5_EXTRA: u32 = 65;
pub const DMPAPER_A2: u32 = 66;
pub const DMPAPER_A3_TRANSVERSE: u32 = 67;
pub const DMPAPER_A3_EXTRA_TRANSVERSE: u32 = 68;
pub const DMPAPER_DBL_JAPANESE_POSTCARD: u32 = 69;
pub const DMPAPER_A6: u32 = 70;
pub const DMPAPER_JENV_KAKU2: u32 = 71;
pub const DMPAPER_JENV_KAKU3: u32 = 72;
pub const DMPAPER_JENV_CHOU3: u32 = 73;
pub const DMPAPER_JENV_CHOU4: u32 = 74;
pub const DMPAPER_LETTER_ROTATED: u32 = 75;
pub const DMPAPER_A3_ROTATED: u32 = 76;
pub const DMPAPER_A4_ROTATED: u32 = 77;
pub const DMPAPER_A5_ROTATED: u32 = 78;
pub const DMPAPER_B4_JIS_ROTATED: u32 = 79;
pub const DMPAPER_B5_JIS_ROTATED: u32 = 80;
pub const DMPAPER_JAPANESE_POSTCARD_ROTATED: u32 = 81;
pub const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED: u32 = 82;
pub const DMPAPER_A6_ROTATED: u32 = 83;
pub const DMPAPER_JENV_KAKU2_ROTATED: u32 = 84;
pub const DMPAPER_JENV_KAKU3_ROTATED: u32 = 85;
pub const DMPAPER_JENV_CHOU3_ROTATED: u32 = 86;
pub const DMPAPER_JENV_CHOU4_ROTATED: u32 = 87;
pub const DMPAPER_B6_JIS: u32 = 88;
pub const DMPAPER_B6_JIS_ROTATED: u32 = 89;
pub const DMPAPER_12X11: u32 = 90;
pub const DMPAPER_JENV_YOU4: u32 = 91;
pub const DMPAPER_JENV_YOU4_ROTATED: u32 = 92;
pub const DMPAPER_P16K: u32 = 93;
pub const DMPAPER_P32K: u32 = 94;
pub const DMPAPER_P32KBIG: u32 = 95;
pub const DMPAPER_PENV_1: u32 = 96;
pub const DMPAPER_PENV_2: u32 = 97;
pub const DMPAPER_PENV_3: u32 = 98;
pub const DMPAPER_PENV_4: u32 = 99;
pub const DMPAPER_PENV_5: u32 = 100;
pub const DMPAPER_PENV_6: u32 = 101;
pub const DMPAPER_PENV_7: u32 = 102;
pub const DMPAPER_PENV_8: u32 = 103;
pub const DMPAPER_PENV_9: u32 = 104;
pub const DMPAPER_PENV_10: u32 = 105;
pub const DMPAPER_P16K_ROTATED: u32 = 106;
pub const DMPAPER_P32K_ROTATED: u32 = 107;
pub const DMPAPER_P32KBIG_ROTATED: u32 = 108;
pub const DMPAPER_PENV_1_ROTATED: u32 = 109;
pub const DMPAPER_PENV_2_ROTATED: u32 = 110;
pub const DMPAPER_PENV_3_ROTATED: u32 = 111;
pub const DMPAPER_PENV_4_ROTATED: u32 = 112;
pub const DMPAPER_PENV_5_ROTATED: u32 = 113;
pub const DMPAPER_PENV_6_ROTATED: u32 = 114;
pub const DMPAPER_PENV_7_ROTATED: u32 = 115;
pub const DMPAPER_PENV_8_ROTATED: u32 = 116;
pub const DMPAPER_PENV_9_ROTATED: u32 = 117;
pub const DMPAPER_PENV_10_ROTATED: u32 = 118;
pub const DMPAPER_LAST: u32 = 118;
pub const DMPAPER_USER: u32 = 256;
pub const DMBIN_UPPER: u32 = 1;
pub const DMBIN_ONLYONE: u32 = 1;
pub const DMBIN_LOWER: u32 = 2;
pub const DMBIN_MIDDLE: u32 = 3;
pub const DMBIN_MANUAL: u32 = 4;
pub const DMBIN_ENVELOPE: u32 = 5;
pub const DMBIN_ENVMANUAL: u32 = 6;
pub const DMBIN_AUTO: u32 = 7;
pub const DMBIN_TRACTOR: u32 = 8;
pub const DMBIN_SMALLFMT: u32 = 9;
pub const DMBIN_LARGEFMT: u32 = 10;
pub const DMBIN_LARGECAPACITY: u32 = 11;
pub const DMBIN_CASSETTE: u32 = 14;
pub const DMBIN_FORMSOURCE: u32 = 15;
pub const DMBIN_LAST: u32 = 15;
pub const DMBIN_USER: u32 = 256;
pub const DMRES_DRAFT: i32 = -1;
pub const DMRES_LOW: i32 = -2;
pub const DMRES_MEDIUM: i32 = -3;
pub const DMRES_HIGH: i32 = -4;
pub const DMCOLOR_MONOCHROME: u32 = 1;
pub const DMCOLOR_COLOR: u32 = 2;
pub const DMDUP_SIMPLEX: u32 = 1;
pub const DMDUP_VERTICAL: u32 = 2;
pub const DMDUP_HORIZONTAL: u32 = 3;
pub const DMTT_BITMAP: u32 = 1;
pub const DMTT_DOWNLOAD: u32 = 2;
pub const DMTT_SUBDEV: u32 = 3;
pub const DMTT_DOWNLOAD_OUTLINE: u32 = 4;
pub const DMCOLLATE_FALSE: u32 = 0;
pub const DMCOLLATE_TRUE: u32 = 1;
pub const DMDO_DEFAULT: u32 = 0;
pub const DMDO_90: u32 = 1;
pub const DMDO_180: u32 = 2;
pub const DMDO_270: u32 = 3;
pub const DMDFO_DEFAULT: u32 = 0;
pub const DMDFO_STRETCH: u32 = 1;
pub const DMDFO_CENTER: u32 = 2;
pub const DM_INTERLACED: u32 = 2;
pub const DMDISPLAYFLAGS_TEXTMODE: u32 = 4;
pub const DMNUP_SYSTEM: u32 = 1;
pub const DMNUP_ONEUP: u32 = 2;
pub const DMICMMETHOD_NONE: u32 = 1;
pub const DMICMMETHOD_SYSTEM: u32 = 2;
pub const DMICMMETHOD_DRIVER: u32 = 3;
pub const DMICMMETHOD_DEVICE: u32 = 4;
pub const DMICMMETHOD_USER: u32 = 256;
pub const DMICM_SATURATE: u32 = 1;
pub const DMICM_CONTRAST: u32 = 2;
pub const DMICM_COLORIMETRIC: u32 = 3;
pub const DMICM_ABS_COLORIMETRIC: u32 = 4;
pub const DMICM_USER: u32 = 256;
pub const DMMEDIA_STANDARD: u32 = 1;
pub const DMMEDIA_TRANSPARENCY: u32 = 2;
pub const DMMEDIA_GLOSSY: u32 = 3;
pub const DMMEDIA_USER: u32 = 256;
pub const DMDITHER_NONE: u32 = 1;
pub const DMDITHER_COARSE: u32 = 2;
pub const DMDITHER_FINE: u32 = 3;
pub const DMDITHER_LINEART: u32 = 4;
pub const DMDITHER_ERRORDIFFUSION: u32 = 5;
pub const DMDITHER_RESERVED6: u32 = 6;
pub const DMDITHER_RESERVED7: u32 = 7;
pub const DMDITHER_RESERVED8: u32 = 8;
pub const DMDITHER_RESERVED9: u32 = 9;
pub const DMDITHER_GRAYSCALE: u32 = 10;
pub const DMDITHER_USER: u32 = 256;
pub const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP: u32 = 1;
pub const DISPLAY_DEVICE_MULTI_DRIVER: u32 = 2;
pub const DISPLAY_DEVICE_PRIMARY_DEVICE: u32 = 4;
pub const DISPLAY_DEVICE_MIRRORING_DRIVER: u32 = 8;
pub const DISPLAY_DEVICE_VGA_COMPATIBLE: u32 = 16;
pub const DISPLAY_DEVICE_REMOVABLE: u32 = 32;
pub const DISPLAY_DEVICE_ACC_DRIVER: u32 = 64;
pub const DISPLAY_DEVICE_MODESPRUNED: u32 = 134217728;
pub const DISPLAY_DEVICE_RDPUDD: u32 = 16777216;
pub const DISPLAY_DEVICE_REMOTE: u32 = 67108864;
pub const DISPLAY_DEVICE_DISCONNECT: u32 = 33554432;
pub const DISPLAY_DEVICE_TS_COMPATIBLE: u32 = 2097152;
pub const DISPLAY_DEVICE_UNSAFE_MODES_ON: u32 = 524288;
pub const DISPLAY_DEVICE_ACTIVE: u32 = 1;
pub const DISPLAY_DEVICE_ATTACHED: u32 = 2;
pub const DISPLAYCONFIG_MAXPATH: u32 = 1024;
pub const DISPLAYCONFIG_PATH_MODE_IDX_INVALID: u32 = 4294967295;
pub const DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID: u32 = 65535;
pub const DISPLAYCONFIG_SOURCE_IN_USE: u32 = 1;
pub const DISPLAYCONFIG_TARGET_IN_USE: u32 = 1;
pub const DISPLAYCONFIG_TARGET_FORCIBLE: u32 = 2;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT: u32 = 4;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH: u32 = 8;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM: u32 = 16;
pub const DISPLAYCONFIG_TARGET_IS_HMD: u32 = 32;
pub const DISPLAYCONFIG_PATH_ACTIVE: u32 = 1;
pub const DISPLAYCONFIG_PATH_PREFERRED_UNSCALED: u32 = 4;
pub const DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE: u32 = 8;
pub const DISPLAYCONFIG_PATH_BOOST_REFRESH_RATE: u32 = 16;
pub const DISPLAYCONFIG_PATH_VALID_FLAGS: u32 = 29;
pub const QDC_ALL_PATHS: u32 = 1;
pub const QDC_ONLY_ACTIVE_PATHS: u32 = 2;
pub const QDC_DATABASE_CURRENT: u32 = 4;
pub const QDC_VIRTUAL_MODE_AWARE: u32 = 16;
pub const QDC_INCLUDE_HMD: u32 = 32;
pub const QDC_VIRTUAL_REFRESH_RATE_AWARE: u32 = 64;
pub const SDC_TOPOLOGY_INTERNAL: u32 = 1;
pub const SDC_TOPOLOGY_CLONE: u32 = 2;
pub const SDC_TOPOLOGY_EXTEND: u32 = 4;
pub const SDC_TOPOLOGY_EXTERNAL: u32 = 8;
pub const SDC_TOPOLOGY_SUPPLIED: u32 = 16;
pub const SDC_USE_DATABASE_CURRENT: u32 = 15;
pub const SDC_USE_SUPPLIED_DISPLAY_CONFIG: u32 = 32;
pub const SDC_VALIDATE: u32 = 64;
pub const SDC_APPLY: u32 = 128;
pub const SDC_NO_OPTIMIZATION: u32 = 256;
pub const SDC_SAVE_TO_DATABASE: u32 = 512;
pub const SDC_ALLOW_CHANGES: u32 = 1024;
pub const SDC_PATH_PERSIST_IF_REQUIRED: u32 = 2048;
pub const SDC_FORCE_MODE_ENUMERATION: u32 = 4096;
pub const SDC_ALLOW_PATH_ORDER_CHANGES: u32 = 8192;
pub const SDC_VIRTUAL_MODE_AWARE: u32 = 32768;
pub const SDC_VIRTUAL_REFRESH_RATE_AWARE: u32 = 131072;
pub const RDH_RECTANGLES: u32 = 1;
pub const SYSRGN: u32 = 4;
pub const GGO_METRICS: u32 = 0;
pub const GGO_BITMAP: u32 = 1;
pub const GGO_NATIVE: u32 = 2;
pub const GGO_BEZIER: u32 = 3;
pub const GGO_GRAY2_BITMAP: u32 = 4;
pub const GGO_GRAY4_BITMAP: u32 = 5;
pub const GGO_GRAY8_BITMAP: u32 = 6;
pub const GGO_GLYPH_INDEX: u32 = 128;
pub const GGO_UNHINTED: u32 = 256;
pub const TT_POLYGON_TYPE: u32 = 24;
pub const TT_PRIM_LINE: u32 = 1;
pub const TT_PRIM_QSPLINE: u32 = 2;
pub const TT_PRIM_CSPLINE: u32 = 3;
pub const GCP_DBCS: u32 = 1;
pub const GCP_REORDER: u32 = 2;
pub const GCP_USEKERNING: u32 = 8;
pub const GCP_GLYPHSHAPE: u32 = 16;
pub const GCP_LIGATE: u32 = 32;
pub const GCP_DIACRITIC: u32 = 256;
pub const GCP_KASHIDA: u32 = 1024;
pub const GCP_ERROR: u32 = 32768;
pub const FLI_MASK: u32 = 4155;
pub const GCP_JUSTIFY: u32 = 65536;
pub const FLI_GLYPHS: u32 = 262144;
pub const GCP_CLASSIN: u32 = 524288;
pub const GCP_MAXEXTENT: u32 = 1048576;
pub const GCP_JUSTIFYIN: u32 = 2097152;
pub const GCP_DISPLAYZWG: u32 = 4194304;
pub const GCP_SYMSWAPOFF: u32 = 8388608;
pub const GCP_NUMERICOVERRIDE: u32 = 16777216;
pub const GCP_NEUTRALOVERRIDE: u32 = 33554432;
pub const GCP_NUMERICSLATIN: u32 = 67108864;
pub const GCP_NUMERICSLOCAL: u32 = 134217728;
pub const GCPCLASS_LATIN: u32 = 1;
pub const GCPCLASS_HEBREW: u32 = 2;
pub const GCPCLASS_ARABIC: u32 = 2;
pub const GCPCLASS_NEUTRAL: u32 = 3;
pub const GCPCLASS_LOCALNUMBER: u32 = 4;
pub const GCPCLASS_LATINNUMBER: u32 = 5;
pub const GCPCLASS_LATINNUMERICTERMINATOR: u32 = 6;
pub const GCPCLASS_LATINNUMERICSEPARATOR: u32 = 7;
pub const GCPCLASS_NUMERICSEPARATOR: u32 = 8;
pub const GCPCLASS_PREBOUNDLTR: u32 = 128;
pub const GCPCLASS_PREBOUNDRTL: u32 = 64;
pub const GCPCLASS_POSTBOUNDLTR: u32 = 32;
pub const GCPCLASS_POSTBOUNDRTL: u32 = 16;
pub const GCPGLYPH_LINKBEFORE: u32 = 32768;
pub const GCPGLYPH_LINKAFTER: u32 = 16384;
pub const TT_AVAILABLE: u32 = 1;
pub const TT_ENABLED: u32 = 2;
pub const PFD_TYPE_RGBA: u32 = 0;
pub const PFD_TYPE_COLORINDEX: u32 = 1;
pub const PFD_MAIN_PLANE: u32 = 0;
pub const PFD_OVERLAY_PLANE: u32 = 1;
pub const PFD_UNDERLAY_PLANE: i32 = -1;
pub const PFD_DOUBLEBUFFER: u32 = 1;
pub const PFD_STEREO: u32 = 2;
pub const PFD_DRAW_TO_WINDOW: u32 = 4;
pub const PFD_DRAW_TO_BITMAP: u32 = 8;
pub const PFD_SUPPORT_GDI: u32 = 16;
pub const PFD_SUPPORT_OPENGL: u32 = 32;
pub const PFD_GENERIC_FORMAT: u32 = 64;
pub const PFD_NEED_PALETTE: u32 = 128;
pub const PFD_NEED_SYSTEM_PALETTE: u32 = 256;
pub const PFD_SWAP_EXCHANGE: u32 = 512;
pub const PFD_SWAP_COPY: u32 = 1024;
pub const PFD_SWAP_LAYER_BUFFERS: u32 = 2048;
pub const PFD_GENERIC_ACCELERATED: u32 = 4096;
pub const PFD_SUPPORT_DIRECTDRAW: u32 = 8192;
pub const PFD_DIRECT3D_ACCELERATED: u32 = 16384;
pub const PFD_SUPPORT_COMPOSITION: u32 = 32768;
pub const PFD_DEPTH_DONTCARE: u32 = 536870912;
pub const PFD_DOUBLEBUFFER_DONTCARE: u32 = 1073741824;
pub const PFD_STEREO_DONTCARE: u32 = 2147483648;
pub const DC_BINADJUST: u32 = 19;
pub const DC_EMF_COMPLIANT: u32 = 20;
pub const DC_DATATYPE_PRODUCED: u32 = 21;
pub const DC_COLLATE: u32 = 22;
pub const DC_MANUFACTURER: u32 = 23;
pub const DC_MODEL: u32 = 24;
pub const DC_PERSONALITY: u32 = 25;
pub const DC_PRINTRATE: u32 = 26;
pub const DC_PRINTRATEUNIT: u32 = 27;
pub const PRINTRATEUNIT_PPM: u32 = 1;
pub const PRINTRATEUNIT_CPS: u32 = 2;
pub const PRINTRATEUNIT_LPM: u32 = 3;
pub const PRINTRATEUNIT_IPM: u32 = 4;
pub const DC_PRINTERMEM: u32 = 28;
pub const DC_MEDIAREADY: u32 = 29;
pub const DC_STAPLE: u32 = 30;
pub const DC_PRINTRATEPPM: u32 = 31;
pub const DC_COLORDEVICE: u32 = 32;
pub const DC_NUP: u32 = 33;
pub const DC_MEDIATYPENAMES: u32 = 34;
pub const DC_MEDIATYPES: u32 = 35;
pub const DCTT_BITMAP: u32 = 1;
pub const DCTT_DOWNLOAD: u32 = 2;
pub const DCTT_SUBDEV: u32 = 4;
pub const DCTT_DOWNLOAD_OUTLINE: u32 = 8;
pub const DCBA_FACEUPNONE: u32 = 0;
pub const DCBA_FACEUPCENTER: u32 = 1;
pub const DCBA_FACEUPLEFT: u32 = 2;
pub const DCBA_FACEUPRIGHT: u32 = 3;
pub const DCBA_FACEDOWNNONE: u32 = 256;
pub const DCBA_FACEDOWNCENTER: u32 = 257;
pub const DCBA_FACEDOWNLEFT: u32 = 258;
pub const DCBA_FACEDOWNRIGHT: u32 = 259;
pub const GS_8BIT_INDICES: u32 = 1;
pub const GGI_MARK_NONEXISTING_GLYPHS: u32 = 1;
pub const MM_MAX_NUMAXES: u32 = 16;
pub const FR_PRIVATE: u32 = 16;
pub const FR_NOT_ENUM: u32 = 32;
pub const MM_MAX_AXES_NAMELEN: u32 = 16;
pub const AC_SRC_OVER: u32 = 0;
pub const AC_SRC_ALPHA: u32 = 1;
pub const GRADIENT_FILL_RECT_H: u32 = 0;
pub const GRADIENT_FILL_RECT_V: u32 = 1;
pub const GRADIENT_FILL_TRIANGLE: u32 = 2;
pub const GRADIENT_FILL_OP_FLAG: u32 = 255;
pub const CA_NEGATIVE: u32 = 1;
pub const CA_LOG_FILTER: u32 = 2;
pub const ILLUMINANT_DEVICE_DEFAULT: u32 = 0;
pub const ILLUMINANT_A: u32 = 1;
pub const ILLUMINANT_B: u32 = 2;
pub const ILLUMINANT_C: u32 = 3;
pub const ILLUMINANT_D50: u32 = 4;
pub const ILLUMINANT_D55: u32 = 5;
pub const ILLUMINANT_D65: u32 = 6;
pub const ILLUMINANT_D75: u32 = 7;
pub const ILLUMINANT_F2: u32 = 8;
pub const ILLUMINANT_MAX_INDEX: u32 = 8;
pub const ILLUMINANT_TUNGSTEN: u32 = 1;
pub const ILLUMINANT_DAYLIGHT: u32 = 3;
pub const ILLUMINANT_FLUORESCENT: u32 = 8;
pub const ILLUMINANT_NTSC: u32 = 3;
pub const DI_APPBANDING: u32 = 1;
pub const DI_ROPS_READ_DESTINATION: u32 = 2;
pub const FONTMAPPER_MAX: u32 = 10;
pub const ICM_OFF: u32 = 1;
pub const ICM_ON: u32 = 2;
pub const ICM_QUERY: u32 = 3;
pub const ICM_DONE_OUTSIDEDC: u32 = 4;
pub const ENHMETA_SIGNATURE: u32 = 1179469088;
pub const ENHMETA_STOCK_OBJECT: u32 = 2147483648;
pub const EMR_HEADER: u32 = 1;
pub const EMR_POLYBEZIER: u32 = 2;
pub const EMR_POLYGON: u32 = 3;
pub const EMR_POLYLINE: u32 = 4;
pub const EMR_POLYBEZIERTO: u32 = 5;
pub const EMR_POLYLINETO: u32 = 6;
pub const EMR_POLYPOLYLINE: u32 = 7;
pub const EMR_POLYPOLYGON: u32 = 8;
pub const EMR_SETWINDOWEXTEX: u32 = 9;
pub const EMR_SETWINDOWORGEX: u32 = 10;
pub const EMR_SETVIEWPORTEXTEX: u32 = 11;
pub const EMR_SETVIEWPORTORGEX: u32 = 12;
pub const EMR_SETBRUSHORGEX: u32 = 13;
pub const EMR_EOF: u32 = 14;
pub const EMR_SETPIXELV: u32 = 15;
pub const EMR_SETMAPPERFLAGS: u32 = 16;
pub const EMR_SETMAPMODE: u32 = 17;
pub const EMR_SETBKMODE: u32 = 18;
pub const EMR_SETPOLYFILLMODE: u32 = 19;
pub const EMR_SETROP2: u32 = 20;
pub const EMR_SETSTRETCHBLTMODE: u32 = 21;
pub const EMR_SETTEXTALIGN: u32 = 22;
pub const EMR_SETCOLORADJUSTMENT: u32 = 23;
pub const EMR_SETTEXTCOLOR: u32 = 24;
pub const EMR_SETBKCOLOR: u32 = 25;
pub const EMR_OFFSETCLIPRGN: u32 = 26;
pub const EMR_MOVETOEX: u32 = 27;
pub const EMR_SETMETARGN: u32 = 28;
pub const EMR_EXCLUDECLIPRECT: u32 = 29;
pub const EMR_INTERSECTCLIPRECT: u32 = 30;
pub const EMR_SCALEVIEWPORTEXTEX: u32 = 31;
pub const EMR_SCALEWINDOWEXTEX: u32 = 32;
pub const EMR_SAVEDC: u32 = 33;
pub const EMR_RESTOREDC: u32 = 34;
pub const EMR_SETWORLDTRANSFORM: u32 = 35;
pub const EMR_MODIFYWORLDTRANSFORM: u32 = 36;
pub const EMR_SELECTOBJECT: u32 = 37;
pub const EMR_CREATEPEN: u32 = 38;
pub const EMR_CREATEBRUSHINDIRECT: u32 = 39;
pub const EMR_DELETEOBJECT: u32 = 40;
pub const EMR_ANGLEARC: u32 = 41;
pub const EMR_ELLIPSE: u32 = 42;
pub const EMR_RECTANGLE: u32 = 43;
pub const EMR_ROUNDRECT: u32 = 44;
pub const EMR_ARC: u32 = 45;
pub const EMR_CHORD: u32 = 46;
pub const EMR_PIE: u32 = 47;
pub const EMR_SELECTPALETTE: u32 = 48;
pub const EMR_CREATEPALETTE: u32 = 49;
pub const EMR_SETPALETTEENTRIES: u32 = 50;
pub const EMR_RESIZEPALETTE: u32 = 51;
pub const EMR_REALIZEPALETTE: u32 = 52;
pub const EMR_EXTFLOODFILL: u32 = 53;
pub const EMR_LINETO: u32 = 54;
pub const EMR_ARCTO: u32 = 55;
pub const EMR_POLYDRAW: u32 = 56;
pub const EMR_SETARCDIRECTION: u32 = 57;
pub const EMR_SETMITERLIMIT: u32 = 58;
pub const EMR_BEGINPATH: u32 = 59;
pub const EMR_ENDPATH: u32 = 60;
pub const EMR_CLOSEFIGURE: u32 = 61;
pub const EMR_FILLPATH: u32 = 62;
pub const EMR_STROKEANDFILLPATH: u32 = 63;
pub const EMR_STROKEPATH: u32 = 64;
pub const EMR_FLATTENPATH: u32 = 65;
pub const EMR_WIDENPATH: u32 = 66;
pub const EMR_SELECTCLIPPATH: u32 = 67;
pub const EMR_ABORTPATH: u32 = 68;
pub const EMR_GDICOMMENT: u32 = 70;
pub const EMR_FILLRGN: u32 = 71;
pub const EMR_FRAMERGN: u32 = 72;
pub const EMR_INVERTRGN: u32 = 73;
pub const EMR_PAINTRGN: u32 = 74;
pub const EMR_EXTSELECTCLIPRGN: u32 = 75;
pub const EMR_BITBLT: u32 = 76;
pub const EMR_STRETCHBLT: u32 = 77;
pub const EMR_MASKBLT: u32 = 78;
pub const EMR_PLGBLT: u32 = 79;
pub const EMR_SETDIBITSTODEVICE: u32 = 80;
pub const EMR_STRETCHDIBITS: u32 = 81;
pub const EMR_EXTCREATEFONTINDIRECTW: u32 = 82;
pub const EMR_EXTTEXTOUTA: u32 = 83;
pub const EMR_EXTTEXTOUTW: u32 = 84;
pub const EMR_POLYBEZIER16: u32 = 85;
pub const EMR_POLYGON16: u32 = 86;
pub const EMR_POLYLINE16: u32 = 87;
pub const EMR_POLYBEZIERTO16: u32 = 88;
pub const EMR_POLYLINETO16: u32 = 89;
pub const EMR_POLYPOLYLINE16: u32 = 90;
pub const EMR_POLYPOLYGON16: u32 = 91;
pub const EMR_POLYDRAW16: u32 = 92;
pub const EMR_CREATEMONOBRUSH: u32 = 93;
pub const EMR_CREATEDIBPATTERNBRUSHPT: u32 = 94;
pub const EMR_EXTCREATEPEN: u32 = 95;
pub const EMR_POLYTEXTOUTA: u32 = 96;
pub const EMR_POLYTEXTOUTW: u32 = 97;
pub const EMR_SETICMMODE: u32 = 98;
pub const EMR_CREATECOLORSPACE: u32 = 99;
pub const EMR_SETCOLORSPACE: u32 = 100;
pub const EMR_DELETECOLORSPACE: u32 = 101;
pub const EMR_GLSRECORD: u32 = 102;
pub const EMR_GLSBOUNDEDRECORD: u32 = 103;
pub const EMR_PIXELFORMAT: u32 = 104;
pub const EMR_RESERVED_105: u32 = 105;
pub const EMR_RESERVED_106: u32 = 106;
pub const EMR_RESERVED_107: u32 = 107;
pub const EMR_RESERVED_108: u32 = 108;
pub const EMR_RESERVED_109: u32 = 109;
pub const EMR_RESERVED_110: u32 = 110;
pub const EMR_COLORCORRECTPALETTE: u32 = 111;
pub const EMR_SETICMPROFILEA: u32 = 112;
pub const EMR_SETICMPROFILEW: u32 = 113;
pub const EMR_ALPHABLEND: u32 = 114;
pub const EMR_SETLAYOUT: u32 = 115;
pub const EMR_TRANSPARENTBLT: u32 = 116;
pub const EMR_RESERVED_117: u32 = 117;
pub const EMR_GRADIENTFILL: u32 = 118;
pub const EMR_RESERVED_119: u32 = 119;
pub const EMR_RESERVED_120: u32 = 120;
pub const EMR_COLORMATCHTOTARGETW: u32 = 121;
pub const EMR_CREATECOLORSPACEW: u32 = 122;
pub const EMR_MIN: u32 = 1;
pub const EMR_MAX: u32 = 122;
pub const SETICMPROFILE_EMBEDED: u32 = 1;
pub const CREATECOLORSPACE_EMBEDED: u32 = 1;
pub const COLORMATCHTOTARGET_EMBEDED: u32 = 1;
pub const GDICOMMENT_IDENTIFIER: u32 = 1128875079;
pub const GDICOMMENT_WINDOWS_METAFILE: u32 = 2147483649;
pub const GDICOMMENT_BEGINGROUP: u32 = 2;
pub const GDICOMMENT_ENDGROUP: u32 = 3;
pub const GDICOMMENT_MULTIFORMATS: u32 = 1073741828;
pub const EPS_SIGNATURE: u32 = 1179865157;
pub const GDICOMMENT_UNICODE_STRING: u32 = 64;
pub const GDICOMMENT_UNICODE_END: u32 = 128;
pub const WGL_FONT_LINES: u32 = 0;
pub const WGL_FONT_POLYGONS: u32 = 1;
pub const LPD_DOUBLEBUFFER: u32 = 1;
pub const LPD_STEREO: u32 = 2;
pub const LPD_SUPPORT_GDI: u32 = 16;
pub const LPD_SUPPORT_OPENGL: u32 = 32;
pub const LPD_SHARE_DEPTH: u32 = 64;
pub const LPD_SHARE_STENCIL: u32 = 128;
pub const LPD_SHARE_ACCUM: u32 = 256;
pub const LPD_SWAP_EXCHANGE: u32 = 512;
pub const LPD_SWAP_COPY: u32 = 1024;
pub const LPD_TRANSPARENT: u32 = 4096;
pub const LPD_TYPE_RGBA: u32 = 0;
pub const LPD_TYPE_COLORINDEX: u32 = 1;
pub const WGL_SWAP_MAIN_PLANE: u32 = 1;
pub const WGL_SWAP_OVERLAY1: u32 = 2;
pub const WGL_SWAP_OVERLAY2: u32 = 4;
pub const WGL_SWAP_OVERLAY3: u32 = 8;
pub const WGL_SWAP_OVERLAY4: u32 = 16;
pub const WGL_SWAP_OVERLAY5: u32 = 32;
pub const WGL_SWAP_OVERLAY6: u32 = 64;
pub const WGL_SWAP_OVERLAY7: u32 = 128;
pub const WGL_SWAP_OVERLAY8: u32 = 256;
pub const WGL_SWAP_OVERLAY9: u32 = 512;
pub const WGL_SWAP_OVERLAY10: u32 = 1024;
pub const WGL_SWAP_OVERLAY11: u32 = 2048;
pub const WGL_SWAP_OVERLAY12: u32 = 4096;
pub const WGL_SWAP_OVERLAY13: u32 = 8192;
pub const WGL_SWAP_OVERLAY14: u32 = 16384;
pub const WGL_SWAP_OVERLAY15: u32 = 32768;
pub const WGL_SWAP_UNDERLAY1: u32 = 65536;
pub const WGL_SWAP_UNDERLAY2: u32 = 131072;
pub const WGL_SWAP_UNDERLAY3: u32 = 262144;
pub const WGL_SWAP_UNDERLAY4: u32 = 524288;
pub const WGL_SWAP_UNDERLAY5: u32 = 1048576;
pub const WGL_SWAP_UNDERLAY6: u32 = 2097152;
pub const WGL_SWAP_UNDERLAY7: u32 = 4194304;
pub const WGL_SWAP_UNDERLAY8: u32 = 8388608;
pub const WGL_SWAP_UNDERLAY9: u32 = 16777216;
pub const WGL_SWAP_UNDERLAY10: u32 = 33554432;
pub const WGL_SWAP_UNDERLAY11: u32 = 67108864;
pub const WGL_SWAP_UNDERLAY12: u32 = 134217728;
pub const WGL_SWAP_UNDERLAY13: u32 = 268435456;
pub const WGL_SWAP_UNDERLAY14: u32 = 536870912;
pub const WGL_SWAP_UNDERLAY15: u32 = 1073741824;
pub const WGL_SWAPMULTIPLE_MAX: u32 = 16;
pub const DIFFERENCE: u32 = 11;
pub const SB_MIN: u32 = 0;
pub const SB_HORZ: u32 = 0;
pub const SB_VERT: u32 = 1;
pub const SB_CTL: u32 = 2;
pub const SB_BOTH: u32 = 3;
pub const SB_LINEUP: u32 = 0;
pub const SB_LINELEFT: u32 = 0;
pub const SB_LINEDOWN: u32 = 1;
pub const SB_LINERIGHT: u32 = 1;
pub const SB_PAGEUP: u32 = 2;
pub const SB_PAGELEFT: u32 = 2;
pub const SB_PAGEDOWN: u32 = 3;
pub const SB_PAGERIGHT: u32 = 3;
pub const SB_THUMBPOSITION: u32 = 4;
pub const SB_THUMBTRACK: u32 = 5;
pub const SB_TOP: u32 = 6;
pub const SB_LEFT: u32 = 6;
pub const SB_BOTTOM: u32 = 7;
pub const SB_RIGHT: u32 = 7;
pub const SB_ENDSCROLL: u32 = 8;
pub const SW_HIDE: u32 = 0;
pub const SW_SHOWNORMAL: u32 = 1;
pub const SW_NORMAL: u32 = 1;
pub const SW_SHOWMINIMIZED: u32 = 2;
pub const SW_SHOWMAXIMIZED: u32 = 3;
pub const SW_MAXIMIZE: u32 = 3;
pub const SW_SHOWNOACTIVATE: u32 = 4;
pub const SW_SHOW: u32 = 5;
pub const SW_MINIMIZE: u32 = 6;
pub const SW_SHOWMINNOACTIVE: u32 = 7;
pub const SW_SHOWNA: u32 = 8;
pub const SW_RESTORE: u32 = 9;
pub const SW_SHOWDEFAULT: u32 = 10;
pub const SW_FORCEMINIMIZE: u32 = 11;
pub const SW_MAX: u32 = 11;
pub const HIDE_WINDOW: u32 = 0;
pub const SHOW_OPENWINDOW: u32 = 1;
pub const SHOW_ICONWINDOW: u32 = 2;
pub const SHOW_FULLSCREEN: u32 = 3;
pub const SHOW_OPENNOACTIVATE: u32 = 4;
pub const SW_PARENTCLOSING: u32 = 1;
pub const SW_OTHERZOOM: u32 = 2;
pub const SW_PARENTOPENING: u32 = 3;
pub const SW_OTHERUNZOOM: u32 = 4;
pub const AW_HOR_POSITIVE: u32 = 1;
pub const AW_HOR_NEGATIVE: u32 = 2;
pub const AW_VER_POSITIVE: u32 = 4;
pub const AW_VER_NEGATIVE: u32 = 8;
pub const AW_CENTER: u32 = 16;
pub const AW_HIDE: u32 = 65536;
pub const AW_ACTIVATE: u32 = 131072;
pub const AW_SLIDE: u32 = 262144;
pub const AW_BLEND: u32 = 524288;
pub const KF_EXTENDED: u32 = 256;
pub const KF_DLGMODE: u32 = 2048;
pub const KF_MENUMODE: u32 = 4096;
pub const KF_ALTDOWN: u32 = 8192;
pub const KF_REPEAT: u32 = 16384;
pub const KF_UP: u32 = 32768;
pub const VK_LBUTTON: u32 = 1;
pub const VK_RBUTTON: u32 = 2;
pub const VK_CANCEL: u32 = 3;
pub const VK_MBUTTON: u32 = 4;
pub const VK_XBUTTON1: u32 = 5;
pub const VK_XBUTTON2: u32 = 6;
pub const VK_BACK: u32 = 8;
pub const VK_TAB: u32 = 9;
pub const VK_CLEAR: u32 = 12;
pub const VK_RETURN: u32 = 13;
pub const VK_SHIFT: u32 = 16;
pub const VK_CONTROL: u32 = 17;
pub const VK_MENU: u32 = 18;
pub const VK_PAUSE: u32 = 19;
pub const VK_CAPITAL: u32 = 20;
pub const VK_KANA: u32 = 21;
pub const VK_HANGEUL: u32 = 21;
pub const VK_HANGUL: u32 = 21;
pub const VK_IME_ON: u32 = 22;
pub const VK_JUNJA: u32 = 23;
pub const VK_FINAL: u32 = 24;
pub const VK_HANJA: u32 = 25;
pub const VK_KANJI: u32 = 25;
pub const VK_IME_OFF: u32 = 26;
pub const VK_ESCAPE: u32 = 27;
pub const VK_CONVERT: u32 = 28;
pub const VK_NONCONVERT: u32 = 29;
pub const VK_ACCEPT: u32 = 30;
pub const VK_MODECHANGE: u32 = 31;
pub const VK_SPACE: u32 = 32;
pub const VK_PRIOR: u32 = 33;
pub const VK_NEXT: u32 = 34;
pub const VK_END: u32 = 35;
pub const VK_HOME: u32 = 36;
pub const VK_LEFT: u32 = 37;
pub const VK_UP: u32 = 38;
pub const VK_RIGHT: u32 = 39;
pub const VK_DOWN: u32 = 40;
pub const VK_SELECT: u32 = 41;
pub const VK_PRINT: u32 = 42;
pub const VK_EXECUTE: u32 = 43;
pub const VK_SNAPSHOT: u32 = 44;
pub const VK_INSERT: u32 = 45;
pub const VK_DELETE: u32 = 46;
pub const VK_HELP: u32 = 47;
pub const VK_LWIN: u32 = 91;
pub const VK_RWIN: u32 = 92;
pub const VK_APPS: u32 = 93;
pub const VK_SLEEP: u32 = 95;
pub const VK_NUMPAD0: u32 = 96;
pub const VK_NUMPAD1: u32 = 97;
pub const VK_NUMPAD2: u32 = 98;
pub const VK_NUMPAD3: u32 = 99;
pub const VK_NUMPAD4: u32 = 100;
pub const VK_NUMPAD5: u32 = 101;
pub const VK_NUMPAD6: u32 = 102;
pub const VK_NUMPAD7: u32 = 103;
pub const VK_NUMPAD8: u32 = 104;
pub const VK_NUMPAD9: u32 = 105;
pub const VK_MULTIPLY: u32 = 106;
pub const VK_ADD: u32 = 107;
pub const VK_SEPARATOR: u32 = 108;
pub const VK_SUBTRACT: u32 = 109;
pub const VK_DECIMAL: u32 = 110;
pub const VK_DIVIDE: u32 = 111;
pub const VK_F1: u32 = 112;
pub const VK_F2: u32 = 113;
pub const VK_F3: u32 = 114;
pub const VK_F4: u32 = 115;
pub const VK_F5: u32 = 116;
pub const VK_F6: u32 = 117;
pub const VK_F7: u32 = 118;
pub const VK_F8: u32 = 119;
pub const VK_F9: u32 = 120;
pub const VK_F10: u32 = 121;
pub const VK_F11: u32 = 122;
pub const VK_F12: u32 = 123;
pub const VK_F13: u32 = 124;
pub const VK_F14: u32 = 125;
pub const VK_F15: u32 = 126;
pub const VK_F16: u32 = 127;
pub const VK_F17: u32 = 128;
pub const VK_F18: u32 = 129;
pub const VK_F19: u32 = 130;
pub const VK_F20: u32 = 131;
pub const VK_F21: u32 = 132;
pub const VK_F22: u32 = 133;
pub const VK_F23: u32 = 134;
pub const VK_F24: u32 = 135;
pub const VK_NAVIGATION_VIEW: u32 = 136;
pub const VK_NAVIGATION_MENU: u32 = 137;
pub const VK_NAVIGATION_UP: u32 = 138;
pub const VK_NAVIGATION_DOWN: u32 = 139;
pub const VK_NAVIGATION_LEFT: u32 = 140;
pub const VK_NAVIGATION_RIGHT: u32 = 141;
pub const VK_NAVIGATION_ACCEPT: u32 = 142;
pub const VK_NAVIGATION_CANCEL: u32 = 143;
pub const VK_NUMLOCK: u32 = 144;
pub const VK_SCROLL: u32 = 145;
pub const VK_OEM_NEC_EQUAL: u32 = 146;
pub const VK_OEM_FJ_JISHO: u32 = 146;
pub const VK_OEM_FJ_MASSHOU: u32 = 147;
pub const VK_OEM_FJ_TOUROKU: u32 = 148;
pub const VK_OEM_FJ_LOYA: u32 = 149;
pub const VK_OEM_FJ_ROYA: u32 = 150;
pub const VK_LSHIFT: u32 = 160;
pub const VK_RSHIFT: u32 = 161;
pub const VK_LCONTROL: u32 = 162;
pub const VK_RCONTROL: u32 = 163;
pub const VK_LMENU: u32 = 164;
pub const VK_RMENU: u32 = 165;
pub const VK_BROWSER_BACK: u32 = 166;
pub const VK_BROWSER_FORWARD: u32 = 167;
pub const VK_BROWSER_REFRESH: u32 = 168;
pub const VK_BROWSER_STOP: u32 = 169;
pub const VK_BROWSER_SEARCH: u32 = 170;
pub const VK_BROWSER_FAVORITES: u32 = 171;
pub const VK_BROWSER_HOME: u32 = 172;
pub const VK_VOLUME_MUTE: u32 = 173;
pub const VK_VOLUME_DOWN: u32 = 174;
pub const VK_VOLUME_UP: u32 = 175;
pub const VK_MEDIA_NEXT_TRACK: u32 = 176;
pub const VK_MEDIA_PREV_TRACK: u32 = 177;
pub const VK_MEDIA_STOP: u32 = 178;
pub const VK_MEDIA_PLAY_PAUSE: u32 = 179;
pub const VK_LAUNCH_MAIL: u32 = 180;
pub const VK_LAUNCH_MEDIA_SELECT: u32 = 181;
pub const VK_LAUNCH_APP1: u32 = 182;
pub const VK_LAUNCH_APP2: u32 = 183;
pub const VK_OEM_1: u32 = 186;
pub const VK_OEM_PLUS: u32 = 187;
pub const VK_OEM_COMMA: u32 = 188;
pub const VK_OEM_MINUS: u32 = 189;
pub const VK_OEM_PERIOD: u32 = 190;
pub const VK_OEM_2: u32 = 191;
pub const VK_OEM_3: u32 = 192;
pub const VK_GAMEPAD_A: u32 = 195;
pub const VK_GAMEPAD_B: u32 = 196;
pub const VK_GAMEPAD_X: u32 = 197;
pub const VK_GAMEPAD_Y: u32 = 198;
pub const VK_GAMEPAD_RIGHT_SHOULDER: u32 = 199;
pub const VK_GAMEPAD_LEFT_SHOULDER: u32 = 200;
pub const VK_GAMEPAD_LEFT_TRIGGER: u32 = 201;
pub const VK_GAMEPAD_RIGHT_TRIGGER: u32 = 202;
pub const VK_GAMEPAD_DPAD_UP: u32 = 203;
pub const VK_GAMEPAD_DPAD_DOWN: u32 = 204;
pub const VK_GAMEPAD_DPAD_LEFT: u32 = 205;
pub const VK_GAMEPAD_DPAD_RIGHT: u32 = 206;
pub const VK_GAMEPAD_MENU: u32 = 207;
pub const VK_GAMEPAD_VIEW: u32 = 208;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON: u32 = 209;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON: u32 = 210;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP: u32 = 211;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN: u32 = 212;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT: u32 = 213;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT: u32 = 214;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP: u32 = 215;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN: u32 = 216;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT: u32 = 217;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT: u32 = 218;
pub const VK_OEM_4: u32 = 219;
pub const VK_OEM_5: u32 = 220;
pub const VK_OEM_6: u32 = 221;
pub const VK_OEM_7: u32 = 222;
pub const VK_OEM_8: u32 = 223;
pub const VK_OEM_AX: u32 = 225;
pub const VK_OEM_102: u32 = 226;
pub const VK_ICO_HELP: u32 = 227;
pub const VK_ICO_00: u32 = 228;
pub const VK_PROCESSKEY: u32 = 229;
pub const VK_ICO_CLEAR: u32 = 230;
pub const VK_PACKET: u32 = 231;
pub const VK_OEM_RESET: u32 = 233;
pub const VK_OEM_JUMP: u32 = 234;
pub const VK_OEM_PA1: u32 = 235;
pub const VK_OEM_PA2: u32 = 236;
pub const VK_OEM_PA3: u32 = 237;
pub const VK_OEM_WSCTRL: u32 = 238;
pub const VK_OEM_CUSEL: u32 = 239;
pub const VK_OEM_ATTN: u32 = 240;
pub const VK_OEM_FINISH: u32 = 241;
pub const VK_OEM_COPY: u32 = 242;
pub const VK_OEM_AUTO: u32 = 243;
pub const VK_OEM_ENLW: u32 = 244;
pub const VK_OEM_BACKTAB: u32 = 245;
pub const VK_ATTN: u32 = 246;
pub const VK_CRSEL: u32 = 247;
pub const VK_EXSEL: u32 = 248;
pub const VK_EREOF: u32 = 249;
pub const VK_PLAY: u32 = 250;
pub const VK_ZOOM: u32 = 251;
pub const VK_NONAME: u32 = 252;
pub const VK_PA1: u32 = 253;
pub const VK_OEM_CLEAR: u32 = 254;
pub const WH_MIN: i32 = -1;
pub const WH_MSGFILTER: i32 = -1;
pub const WH_JOURNALRECORD: u32 = 0;
pub const WH_JOURNALPLAYBACK: u32 = 1;
pub const WH_KEYBOARD: u32 = 2;
pub const WH_GETMESSAGE: u32 = 3;
pub const WH_CALLWNDPROC: u32 = 4;
pub const WH_CBT: u32 = 5;
pub const WH_SYSMSGFILTER: u32 = 6;
pub const WH_MOUSE: u32 = 7;
pub const WH_DEBUG: u32 = 9;
pub const WH_SHELL: u32 = 10;
pub const WH_FOREGROUNDIDLE: u32 = 11;
pub const WH_CALLWNDPROCRET: u32 = 12;
pub const WH_KEYBOARD_LL: u32 = 13;
pub const WH_MOUSE_LL: u32 = 14;
pub const WH_MAX: u32 = 14;
pub const WH_MINHOOK: i32 = -1;
pub const WH_MAXHOOK: u32 = 14;
pub const HC_ACTION: u32 = 0;
pub const HC_GETNEXT: u32 = 1;
pub const HC_SKIP: u32 = 2;
pub const HC_NOREMOVE: u32 = 3;
pub const HC_NOREM: u32 = 3;
pub const HC_SYSMODALON: u32 = 4;
pub const HC_SYSMODALOFF: u32 = 5;
pub const HCBT_MOVESIZE: u32 = 0;
pub const HCBT_MINMAX: u32 = 1;
pub const HCBT_QS: u32 = 2;
pub const HCBT_CREATEWND: u32 = 3;
pub const HCBT_DESTROYWND: u32 = 4;
pub const HCBT_ACTIVATE: u32 = 5;
pub const HCBT_CLICKSKIPPED: u32 = 6;
pub const HCBT_KEYSKIPPED: u32 = 7;
pub const HCBT_SYSCOMMAND: u32 = 8;
pub const HCBT_SETFOCUS: u32 = 9;
pub const WTS_CONSOLE_CONNECT: u32 = 1;
pub const WTS_CONSOLE_DISCONNECT: u32 = 2;
pub const WTS_REMOTE_CONNECT: u32 = 3;
pub const WTS_REMOTE_DISCONNECT: u32 = 4;
pub const WTS_SESSION_LOGON: u32 = 5;
pub const WTS_SESSION_LOGOFF: u32 = 6;
pub const WTS_SESSION_LOCK: u32 = 7;
pub const WTS_SESSION_UNLOCK: u32 = 8;
pub const WTS_SESSION_REMOTE_CONTROL: u32 = 9;
pub const WTS_SESSION_CREATE: u32 = 10;
pub const WTS_SESSION_TERMINATE: u32 = 11;
pub const MSGF_DIALOGBOX: u32 = 0;
pub const MSGF_MESSAGEBOX: u32 = 1;
pub const MSGF_MENU: u32 = 2;
pub const MSGF_SCROLLBAR: u32 = 5;
pub const MSGF_NEXTWINDOW: u32 = 6;
pub const MSGF_MAX: u32 = 8;
pub const MSGF_USER: u32 = 4096;
pub const HSHELL_WINDOWCREATED: u32 = 1;
pub const HSHELL_WINDOWDESTROYED: u32 = 2;
pub const HSHELL_ACTIVATESHELLWINDOW: u32 = 3;
pub const HSHELL_WINDOWACTIVATED: u32 = 4;
pub const HSHELL_GETMINRECT: u32 = 5;
pub const HSHELL_REDRAW: u32 = 6;
pub const HSHELL_TASKMAN: u32 = 7;
pub const HSHELL_LANGUAGE: u32 = 8;
pub const HSHELL_SYSMENU: u32 = 9;
pub const HSHELL_ENDTASK: u32 = 10;
pub const HSHELL_ACCESSIBILITYSTATE: u32 = 11;
pub const HSHELL_APPCOMMAND: u32 = 12;
pub const HSHELL_WINDOWREPLACED: u32 = 13;
pub const HSHELL_WINDOWREPLACING: u32 = 14;
pub const HSHELL_MONITORCHANGED: u32 = 16;
pub const HSHELL_HIGHBIT: u32 = 32768;
pub const HSHELL_FLASH: u32 = 32774;
pub const HSHELL_RUDEAPPACTIVATED: u32 = 32772;
pub const APPCOMMAND_BROWSER_BACKWARD: u32 = 1;
pub const APPCOMMAND_BROWSER_FORWARD: u32 = 2;
pub const APPCOMMAND_BROWSER_REFRESH: u32 = 3;
pub const APPCOMMAND_BROWSER_STOP: u32 = 4;
pub const APPCOMMAND_BROWSER_SEARCH: u32 = 5;
pub const APPCOMMAND_BROWSER_FAVORITES: u32 = 6;
pub const APPCOMMAND_BROWSER_HOME: u32 = 7;
pub const APPCOMMAND_VOLUME_MUTE: u32 = 8;
pub const APPCOMMAND_VOLUME_DOWN: u32 = 9;
pub const APPCOMMAND_VOLUME_UP: u32 = 10;
pub const APPCOMMAND_MEDIA_NEXTTRACK: u32 = 11;
pub const APPCOMMAND_MEDIA_PREVIOUSTRACK: u32 = 12;
pub const APPCOMMAND_MEDIA_STOP: u32 = 13;
pub const APPCOMMAND_MEDIA_PLAY_PAUSE: u32 = 14;
pub const APPCOMMAND_LAUNCH_MAIL: u32 = 15;
pub const APPCOMMAND_LAUNCH_MEDIA_SELECT: u32 = 16;
pub const APPCOMMAND_LAUNCH_APP1: u32 = 17;
pub const APPCOMMAND_LAUNCH_APP2: u32 = 18;
pub const APPCOMMAND_BASS_DOWN: u32 = 19;
pub const APPCOMMAND_BASS_BOOST: u32 = 20;
pub const APPCOMMAND_BASS_UP: u32 = 21;
pub const APPCOMMAND_TREBLE_DOWN: u32 = 22;
pub const APPCOMMAND_TREBLE_UP: u32 = 23;
pub const APPCOMMAND_MICROPHONE_VOLUME_MUTE: u32 = 24;
pub const APPCOMMAND_MICROPHONE_VOLUME_DOWN: u32 = 25;
pub const APPCOMMAND_MICROPHONE_VOLUME_UP: u32 = 26;
pub const APPCOMMAND_HELP: u32 = 27;
pub const APPCOMMAND_FIND: u32 = 28;
pub const APPCOMMAND_NEW: u32 = 29;
pub const APPCOMMAND_OPEN: u32 = 30;
pub const APPCOMMAND_CLOSE: u32 = 31;
pub const APPCOMMAND_SAVE: u32 = 32;
pub const APPCOMMAND_PRINT: u32 = 33;
pub const APPCOMMAND_UNDO: u32 = 34;
pub const APPCOMMAND_REDO: u32 = 35;
pub const APPCOMMAND_COPY: u32 = 36;
pub const APPCOMMAND_CUT: u32 = 37;
pub const APPCOMMAND_PASTE: u32 = 38;
pub const APPCOMMAND_REPLY_TO_MAIL: u32 = 39;
pub const APPCOMMAND_FORWARD_MAIL: u32 = 40;
pub const APPCOMMAND_SEND_MAIL: u32 = 41;
pub const APPCOMMAND_SPELL_CHECK: u32 = 42;
pub const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE: u32 = 43;
pub const APPCOMMAND_MIC_ON_OFF_TOGGLE: u32 = 44;
pub const APPCOMMAND_CORRECTION_LIST: u32 = 45;
pub const APPCOMMAND_MEDIA_PLAY: u32 = 46;
pub const APPCOMMAND_MEDIA_PAUSE: u32 = 47;
pub const APPCOMMAND_MEDIA_RECORD: u32 = 48;
pub const APPCOMMAND_MEDIA_FAST_FORWARD: u32 = 49;
pub const APPCOMMAND_MEDIA_REWIND: u32 = 50;
pub const APPCOMMAND_MEDIA_CHANNEL_UP: u32 = 51;
pub const APPCOMMAND_MEDIA_CHANNEL_DOWN: u32 = 52;
pub const APPCOMMAND_DELETE: u32 = 53;
pub const APPCOMMAND_DWM_FLIP3D: u32 = 54;
pub const FAPPCOMMAND_MOUSE: u32 = 32768;
pub const FAPPCOMMAND_KEY: u32 = 0;
pub const FAPPCOMMAND_OEM: u32 = 4096;
pub const FAPPCOMMAND_MASK: u32 = 61440;
pub const LLKHF_EXTENDED: u32 = 1;
pub const LLKHF_INJECTED: u32 = 16;
pub const LLKHF_ALTDOWN: u32 = 32;
pub const LLKHF_UP: u32 = 128;
pub const LLKHF_LOWER_IL_INJECTED: u32 = 2;
pub const LLMHF_INJECTED: u32 = 1;
pub const LLMHF_LOWER_IL_INJECTED: u32 = 2;
pub const HKL_PREV: u32 = 0;
pub const HKL_NEXT: u32 = 1;
pub const KLF_ACTIVATE: u32 = 1;
pub const KLF_SUBSTITUTE_OK: u32 = 2;
pub const KLF_REORDER: u32 = 8;
pub const KLF_REPLACELANG: u32 = 16;
pub const KLF_NOTELLSHELL: u32 = 128;
pub const KLF_SETFORPROCESS: u32 = 256;
pub const KLF_SHIFTLOCK: u32 = 65536;
pub const KLF_RESET: u32 = 1073741824;
pub const INPUTLANGCHANGE_SYSCHARSET: u32 = 1;
pub const INPUTLANGCHANGE_FORWARD: u32 = 2;
pub const INPUTLANGCHANGE_BACKWARD: u32 = 4;
pub const KL_NAMELENGTH: u32 = 9;
pub const GMMP_USE_DISPLAY_POINTS: u32 = 1;
pub const GMMP_USE_HIGH_RESOLUTION_POINTS: u32 = 2;
pub const DESKTOP_READOBJECTS: u32 = 1;
pub const DESKTOP_CREATEWINDOW: u32 = 2;
pub const DESKTOP_CREATEMENU: u32 = 4;
pub const DESKTOP_HOOKCONTROL: u32 = 8;
pub const DESKTOP_JOURNALRECORD: u32 = 16;
pub const DESKTOP_JOURNALPLAYBACK: u32 = 32;
pub const DESKTOP_ENUMERATE: u32 = 64;
pub const DESKTOP_WRITEOBJECTS: u32 = 128;
pub const DESKTOP_SWITCHDESKTOP: u32 = 256;
pub const DF_ALLOWOTHERACCOUNTHOOK: u32 = 1;
pub const WINSTA_ENUMDESKTOPS: u32 = 1;
pub const WINSTA_READATTRIBUTES: u32 = 2;
pub const WINSTA_ACCESSCLIPBOARD: u32 = 4;
pub const WINSTA_CREATEDESKTOP: u32 = 8;
pub const WINSTA_WRITEATTRIBUTES: u32 = 16;
pub const WINSTA_ACCESSGLOBALATOMS: u32 = 32;
pub const WINSTA_EXITWINDOWS: u32 = 64;
pub const WINSTA_ENUMERATE: u32 = 256;
pub const WINSTA_READSCREEN: u32 = 512;
pub const WINSTA_ALL_ACCESS: u32 = 895;
pub const CWF_CREATE_ONLY: u32 = 1;
pub const WSF_VISIBLE: u32 = 1;
pub const UOI_FLAGS: u32 = 1;
pub const UOI_NAME: u32 = 2;
pub const UOI_TYPE: u32 = 3;
pub const UOI_USER_SID: u32 = 4;
pub const UOI_HEAPSIZE: u32 = 5;
pub const UOI_IO: u32 = 6;
pub const UOI_TIMERPROC_EXCEPTION_SUPPRESSION: u32 = 7;
pub const GWL_WNDPROC: i32 = -4;
pub const GWL_HINSTANCE: i32 = -6;
pub const GWL_HWNDPARENT: i32 = -8;
pub const GWL_STYLE: i32 = -16;
pub const GWL_EXSTYLE: i32 = -20;
pub const GWL_USERDATA: i32 = -21;
pub const GWL_ID: i32 = -12;
pub const GWLP_WNDPROC: i32 = -4;
pub const GWLP_HINSTANCE: i32 = -6;
pub const GWLP_HWNDPARENT: i32 = -8;
pub const GWLP_USERDATA: i32 = -21;
pub const GWLP_ID: i32 = -12;
pub const GCL_MENUNAME: i32 = -8;
pub const GCL_HBRBACKGROUND: i32 = -10;
pub const GCL_HCURSOR: i32 = -12;
pub const GCL_HICON: i32 = -14;
pub const GCL_HMODULE: i32 = -16;
pub const GCL_CBWNDEXTRA: i32 = -18;
pub const GCL_CBCLSEXTRA: i32 = -20;
pub const GCL_WNDPROC: i32 = -24;
pub const GCL_STYLE: i32 = -26;
pub const GCW_ATOM: i32 = -32;
pub const GCL_HICONSM: i32 = -34;
pub const GCLP_MENUNAME: i32 = -8;
pub const GCLP_HBRBACKGROUND: i32 = -10;
pub const GCLP_HCURSOR: i32 = -12;
pub const GCLP_HICON: i32 = -14;
pub const GCLP_HMODULE: i32 = -16;
pub const GCLP_WNDPROC: i32 = -24;
pub const GCLP_HICONSM: i32 = -34;
pub const WM_NULL: u32 = 0;
pub const WM_CREATE: u32 = 1;
pub const WM_DESTROY: u32 = 2;
pub const WM_MOVE: u32 = 3;
pub const WM_SIZE: u32 = 5;
pub const WM_ACTIVATE: u32 = 6;
pub const WA_INACTIVE: u32 = 0;
pub const WA_ACTIVE: u32 = 1;
pub const WA_CLICKACTIVE: u32 = 2;
pub const WM_SETFOCUS: u32 = 7;
pub const WM_KILLFOCUS: u32 = 8;
pub const WM_ENABLE: u32 = 10;
pub const WM_SETREDRAW: u32 = 11;
pub const WM_SETTEXT: u32 = 12;
pub const WM_GETTEXT: u32 = 13;
pub const WM_GETTEXTLENGTH: u32 = 14;
pub const WM_PAINT: u32 = 15;
pub const WM_CLOSE: u32 = 16;
pub const WM_QUERYENDSESSION: u32 = 17;
pub const WM_QUERYOPEN: u32 = 19;
pub const WM_ENDSESSION: u32 = 22;
pub const WM_QUIT: u32 = 18;
pub const WM_ERASEBKGND: u32 = 20;
pub const WM_SYSCOLORCHANGE: u32 = 21;
pub const WM_SHOWWINDOW: u32 = 24;
pub const WM_WININICHANGE: u32 = 26;
pub const WM_SETTINGCHANGE: u32 = 26;
pub const WM_DEVMODECHANGE: u32 = 27;
pub const WM_ACTIVATEAPP: u32 = 28;
pub const WM_FONTCHANGE: u32 = 29;
pub const WM_TIMECHANGE: u32 = 30;
pub const WM_CANCELMODE: u32 = 31;
pub const WM_SETCURSOR: u32 = 32;
pub const WM_MOUSEACTIVATE: u32 = 33;
pub const WM_CHILDACTIVATE: u32 = 34;
pub const WM_QUEUESYNC: u32 = 35;
pub const WM_GETMINMAXINFO: u32 = 36;
pub const WM_PAINTICON: u32 = 38;
pub const WM_ICONERASEBKGND: u32 = 39;
pub const WM_NEXTDLGCTL: u32 = 40;
pub const WM_SPOOLERSTATUS: u32 = 42;
pub const WM_DRAWITEM: u32 = 43;
pub const WM_MEASUREITEM: u32 = 44;
pub const WM_DELETEITEM: u32 = 45;
pub const WM_VKEYTOITEM: u32 = 46;
pub const WM_CHARTOITEM: u32 = 47;
pub const WM_SETFONT: u32 = 48;
pub const WM_GETFONT: u32 = 49;
pub const WM_SETHOTKEY: u32 = 50;
pub const WM_GETHOTKEY: u32 = 51;
pub const WM_QUERYDRAGICON: u32 = 55;
pub const WM_COMPAREITEM: u32 = 57;
pub const WM_GETOBJECT: u32 = 61;
pub const WM_COMPACTING: u32 = 65;
pub const WM_COMMNOTIFY: u32 = 68;
pub const WM_WINDOWPOSCHANGING: u32 = 70;
pub const WM_WINDOWPOSCHANGED: u32 = 71;
pub const WM_POWER: u32 = 72;
pub const PWR_OK: u32 = 1;
pub const PWR_FAIL: i32 = -1;
pub const PWR_SUSPENDREQUEST: u32 = 1;
pub const PWR_SUSPENDRESUME: u32 = 2;
pub const PWR_CRITICALRESUME: u32 = 3;
pub const WM_COPYDATA: u32 = 74;
pub const WM_CANCELJOURNAL: u32 = 75;
pub const WM_NOTIFY: u32 = 78;
pub const WM_INPUTLANGCHANGEREQUEST: u32 = 80;
pub const WM_INPUTLANGCHANGE: u32 = 81;
pub const WM_TCARD: u32 = 82;
pub const WM_HELP: u32 = 83;
pub const WM_USERCHANGED: u32 = 84;
pub const WM_NOTIFYFORMAT: u32 = 85;
pub const NFR_ANSI: u32 = 1;
pub const NFR_UNICODE: u32 = 2;
pub const NF_QUERY: u32 = 3;
pub const NF_REQUERY: u32 = 4;
pub const WM_CONTEXTMENU: u32 = 123;
pub const WM_STYLECHANGING: u32 = 124;
pub const WM_STYLECHANGED: u32 = 125;
pub const WM_DISPLAYCHANGE: u32 = 126;
pub const WM_GETICON: u32 = 127;
pub const WM_SETICON: u32 = 128;
pub const WM_NCCREATE: u32 = 129;
pub const WM_NCDESTROY: u32 = 130;
pub const WM_NCCALCSIZE: u32 = 131;
pub const WM_NCHITTEST: u32 = 132;
pub const WM_NCPAINT: u32 = 133;
pub const WM_NCACTIVATE: u32 = 134;
pub const WM_GETDLGCODE: u32 = 135;
pub const WM_SYNCPAINT: u32 = 136;
pub const WM_NCMOUSEMOVE: u32 = 160;
pub const WM_NCLBUTTONDOWN: u32 = 161;
pub const WM_NCLBUTTONUP: u32 = 162;
pub const WM_NCLBUTTONDBLCLK: u32 = 163;
pub const WM_NCRBUTTONDOWN: u32 = 164;
pub const WM_NCRBUTTONUP: u32 = 165;
pub const WM_NCRBUTTONDBLCLK: u32 = 166;
pub const WM_NCMBUTTONDOWN: u32 = 167;
pub const WM_NCMBUTTONUP: u32 = 168;
pub const WM_NCMBUTTONDBLCLK: u32 = 169;
pub const WM_NCXBUTTONDOWN: u32 = 171;
pub const WM_NCXBUTTONUP: u32 = 172;
pub const WM_NCXBUTTONDBLCLK: u32 = 173;
pub const WM_INPUT_DEVICE_CHANGE: u32 = 254;
pub const WM_INPUT: u32 = 255;
pub const WM_KEYFIRST: u32 = 256;
pub const WM_KEYDOWN: u32 = 256;
pub const WM_KEYUP: u32 = 257;
pub const WM_CHAR: u32 = 258;
pub const WM_DEADCHAR: u32 = 259;
pub const WM_SYSKEYDOWN: u32 = 260;
pub const WM_SYSKEYUP: u32 = 261;
pub const WM_SYSCHAR: u32 = 262;
pub const WM_SYSDEADCHAR: u32 = 263;
pub const WM_UNICHAR: u32 = 265;
pub const WM_KEYLAST: u32 = 265;
pub const UNICODE_NOCHAR: u32 = 65535;
pub const WM_IME_STARTCOMPOSITION: u32 = 269;
pub const WM_IME_ENDCOMPOSITION: u32 = 270;
pub const WM_IME_COMPOSITION: u32 = 271;
pub const WM_IME_KEYLAST: u32 = 271;
pub const WM_INITDIALOG: u32 = 272;
pub const WM_COMMAND: u32 = 273;
pub const WM_SYSCOMMAND: u32 = 274;
pub const WM_TIMER: u32 = 275;
pub const WM_HSCROLL: u32 = 276;
pub const WM_VSCROLL: u32 = 277;
pub const WM_INITMENU: u32 = 278;
pub const WM_INITMENUPOPUP: u32 = 279;
pub const WM_GESTURE: u32 = 281;
pub const WM_GESTURENOTIFY: u32 = 282;
pub const WM_MENUSELECT: u32 = 287;
pub const WM_MENUCHAR: u32 = 288;
pub const WM_ENTERIDLE: u32 = 289;
pub const WM_MENURBUTTONUP: u32 = 290;
pub const WM_MENUDRAG: u32 = 291;
pub const WM_MENUGETOBJECT: u32 = 292;
pub const WM_UNINITMENUPOPUP: u32 = 293;
pub const WM_MENUCOMMAND: u32 = 294;
pub const WM_CHANGEUISTATE: u32 = 295;
pub const WM_UPDATEUISTATE: u32 = 296;
pub const WM_QUERYUISTATE: u32 = 297;
pub const UIS_SET: u32 = 1;
pub const UIS_CLEAR: u32 = 2;
pub const UIS_INITIALIZE: u32 = 3;
pub const UISF_HIDEFOCUS: u32 = 1;
pub const UISF_HIDEACCEL: u32 = 2;
pub const UISF_ACTIVE: u32 = 4;
pub const WM_CTLCOLORMSGBOX: u32 = 306;
pub const WM_CTLCOLOREDIT: u32 = 307;
pub const WM_CTLCOLORLISTBOX: u32 = 308;
pub const WM_CTLCOLORBTN: u32 = 309;
pub const WM_CTLCOLORDLG: u32 = 310;
pub const WM_CTLCOLORSCROLLBAR: u32 = 311;
pub const WM_CTLCOLORSTATIC: u32 = 312;
pub const MN_GETHMENU: u32 = 481;
pub const WM_MOUSEFIRST: u32 = 512;
pub const WM_MOUSEMOVE: u32 = 512;
pub const WM_LBUTTONDOWN: u32 = 513;
pub const WM_LBUTTONUP: u32 = 514;
pub const WM_LBUTTONDBLCLK: u32 = 515;
pub const WM_RBUTTONDOWN: u32 = 516;
pub const WM_RBUTTONUP: u32 = 517;
pub const WM_RBUTTONDBLCLK: u32 = 518;
pub const WM_MBUTTONDOWN: u32 = 519;
pub const WM_MBUTTONUP: u32 = 520;
pub const WM_MBUTTONDBLCLK: u32 = 521;
pub const WM_MOUSEWHEEL: u32 = 522;
pub const WM_XBUTTONDOWN: u32 = 523;
pub const WM_XBUTTONUP: u32 = 524;
pub const WM_XBUTTONDBLCLK: u32 = 525;
pub const WM_MOUSEHWHEEL: u32 = 526;
pub const WM_MOUSELAST: u32 = 526;
pub const WHEEL_DELTA: u32 = 120;
pub const XBUTTON1: u32 = 1;
pub const XBUTTON2: u32 = 2;
pub const WM_PARENTNOTIFY: u32 = 528;
pub const WM_ENTERMENULOOP: u32 = 529;
pub const WM_EXITMENULOOP: u32 = 530;
pub const WM_NEXTMENU: u32 = 531;
pub const WM_SIZING: u32 = 532;
pub const WM_CAPTURECHANGED: u32 = 533;
pub const WM_MOVING: u32 = 534;
pub const WM_POWERBROADCAST: u32 = 536;
pub const PBT_APMQUERYSUSPEND: u32 = 0;
pub const PBT_APMQUERYSTANDBY: u32 = 1;
pub const PBT_APMQUERYSUSPENDFAILED: u32 = 2;
pub const PBT_APMQUERYSTANDBYFAILED: u32 = 3;
pub const PBT_APMSUSPEND: u32 = 4;
pub const PBT_APMSTANDBY: u32 = 5;
pub const PBT_APMRESUMECRITICAL: u32 = 6;
pub const PBT_APMRESUMESUSPEND: u32 = 7;
pub const PBT_APMRESUMESTANDBY: u32 = 8;
pub const PBTF_APMRESUMEFROMFAILURE: u32 = 1;
pub const PBT_APMBATTERYLOW: u32 = 9;
pub const PBT_APMPOWERSTATUSCHANGE: u32 = 10;
pub const PBT_APMOEMEVENT: u32 = 11;
pub const PBT_APMRESUMEAUTOMATIC: u32 = 18;
pub const PBT_POWERSETTINGCHANGE: u32 = 32787;
pub const WM_DEVICECHANGE: u32 = 537;
pub const WM_MDICREATE: u32 = 544;
pub const WM_MDIDESTROY: u32 = 545;
pub const WM_MDIACTIVATE: u32 = 546;
pub const WM_MDIRESTORE: u32 = 547;
pub const WM_MDINEXT: u32 = 548;
pub const WM_MDIMAXIMIZE: u32 = 549;
pub const WM_MDITILE: u32 = 550;
pub const WM_MDICASCADE: u32 = 551;
pub const WM_MDIICONARRANGE: u32 = 552;
pub const WM_MDIGETACTIVE: u32 = 553;
pub const WM_MDISETMENU: u32 = 560;
pub const WM_ENTERSIZEMOVE: u32 = 561;
pub const WM_EXITSIZEMOVE: u32 = 562;
pub const WM_DROPFILES: u32 = 563;
pub const WM_MDIREFRESHMENU: u32 = 564;
pub const WM_POINTERDEVICECHANGE: u32 = 568;
pub const WM_POINTERDEVICEINRANGE: u32 = 569;
pub const WM_POINTERDEVICEOUTOFRANGE: u32 = 570;
pub const WM_TOUCH: u32 = 576;
pub const WM_NCPOINTERUPDATE: u32 = 577;
pub const WM_NCPOINTERDOWN: u32 = 578;
pub const WM_NCPOINTERUP: u32 = 579;
pub const WM_POINTERUPDATE: u32 = 581;
pub const WM_POINTERDOWN: u32 = 582;
pub const WM_POINTERUP: u32 = 583;
pub const WM_POINTERENTER: u32 = 585;
pub const WM_POINTERLEAVE: u32 = 586;
pub const WM_POINTERACTIVATE: u32 = 587;
pub const WM_POINTERCAPTURECHANGED: u32 = 588;
pub const WM_TOUCHHITTESTING: u32 = 589;
pub const WM_POINTERWHEEL: u32 = 590;
pub const WM_POINTERHWHEEL: u32 = 591;
pub const DM_POINTERHITTEST: u32 = 592;
pub const WM_POINTERROUTEDTO: u32 = 593;
pub const WM_POINTERROUTEDAWAY: u32 = 594;
pub const WM_POINTERROUTEDRELEASED: u32 = 595;
pub const WM_IME_SETCONTEXT: u32 = 641;
pub const WM_IME_NOTIFY: u32 = 642;
pub const WM_IME_CONTROL: u32 = 643;
pub const WM_IME_COMPOSITIONFULL: u32 = 644;
pub const WM_IME_SELECT: u32 = 645;
pub const WM_IME_CHAR: u32 = 646;
pub const WM_IME_REQUEST: u32 = 648;
pub const WM_IME_KEYDOWN: u32 = 656;
pub const WM_IME_KEYUP: u32 = 657;
pub const WM_MOUSEHOVER: u32 = 673;
pub const WM_MOUSELEAVE: u32 = 675;
pub const WM_NCMOUSEHOVER: u32 = 672;
pub const WM_NCMOUSELEAVE: u32 = 674;
pub const WM_WTSSESSION_CHANGE: u32 = 689;
pub const WM_TABLET_FIRST: u32 = 704;
pub const WM_TABLET_LAST: u32 = 735;
pub const WM_DPICHANGED: u32 = 736;
pub const WM_DPICHANGED_BEFOREPARENT: u32 = 738;
pub const WM_DPICHANGED_AFTERPARENT: u32 = 739;
pub const WM_GETDPISCALEDSIZE: u32 = 740;
pub const WM_CUT: u32 = 768;
pub const WM_COPY: u32 = 769;
pub const WM_PASTE: u32 = 770;
pub const WM_CLEAR: u32 = 771;
pub const WM_UNDO: u32 = 772;
pub const WM_RENDERFORMAT: u32 = 773;
pub const WM_RENDERALLFORMATS: u32 = 774;
pub const WM_DESTROYCLIPBOARD: u32 = 775;
pub const WM_DRAWCLIPBOARD: u32 = 776;
pub const WM_PAINTCLIPBOARD: u32 = 777;
pub const WM_VSCROLLCLIPBOARD: u32 = 778;
pub const WM_SIZECLIPBOARD: u32 = 779;
pub const WM_ASKCBFORMATNAME: u32 = 780;
pub const WM_CHANGECBCHAIN: u32 = 781;
pub const WM_HSCROLLCLIPBOARD: u32 = 782;
pub const WM_QUERYNEWPALETTE: u32 = 783;
pub const WM_PALETTEISCHANGING: u32 = 784;
pub const WM_PALETTECHANGED: u32 = 785;
pub const WM_HOTKEY: u32 = 786;
pub const WM_PRINT: u32 = 791;
pub const WM_PRINTCLIENT: u32 = 792;
pub const WM_APPCOMMAND: u32 = 793;
pub const WM_THEMECHANGED: u32 = 794;
pub const WM_CLIPBOARDUPDATE: u32 = 797;
pub const WM_DWMCOMPOSITIONCHANGED: u32 = 798;
pub const WM_DWMNCRENDERINGCHANGED: u32 = 799;
pub const WM_DWMCOLORIZATIONCOLORCHANGED: u32 = 800;
pub const WM_DWMWINDOWMAXIMIZEDCHANGE: u32 = 801;
pub const WM_DWMSENDICONICTHUMBNAIL: u32 = 803;
pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP: u32 = 806;
pub const WM_GETTITLEBARINFOEX: u32 = 831;
pub const WM_HANDHELDFIRST: u32 = 856;
pub const WM_HANDHELDLAST: u32 = 863;
pub const WM_AFXFIRST: u32 = 864;
pub const WM_AFXLAST: u32 = 895;
pub const WM_PENWINFIRST: u32 = 896;
pub const WM_PENWINLAST: u32 = 911;
pub const WM_APP: u32 = 32768;
pub const WM_USER: u32 = 1024;
pub const WMSZ_LEFT: u32 = 1;
pub const WMSZ_RIGHT: u32 = 2;
pub const WMSZ_TOP: u32 = 3;
pub const WMSZ_TOPLEFT: u32 = 4;
pub const WMSZ_TOPRIGHT: u32 = 5;
pub const WMSZ_BOTTOM: u32 = 6;
pub const WMSZ_BOTTOMLEFT: u32 = 7;
pub const WMSZ_BOTTOMRIGHT: u32 = 8;
pub const HTERROR: i32 = -2;
pub const HTTRANSPARENT: i32 = -1;
pub const HTNOWHERE: u32 = 0;
pub const HTCLIENT: u32 = 1;
pub const HTCAPTION: u32 = 2;
pub const HTSYSMENU: u32 = 3;
pub const HTGROWBOX: u32 = 4;
pub const HTSIZE: u32 = 4;
pub const HTMENU: u32 = 5;
pub const HTHSCROLL: u32 = 6;
pub const HTVSCROLL: u32 = 7;
pub const HTMINBUTTON: u32 = 8;
pub const HTMAXBUTTON: u32 = 9;
pub const HTLEFT: u32 = 10;
pub const HTRIGHT: u32 = 11;
pub const HTTOP: u32 = 12;
pub const HTTOPLEFT: u32 = 13;
pub const HTTOPRIGHT: u32 = 14;
pub const HTBOTTOM: u32 = 15;
pub const HTBOTTOMLEFT: u32 = 16;
pub const HTBOTTOMRIGHT: u32 = 17;
pub const HTBORDER: u32 = 18;
pub const HTREDUCE: u32 = 8;
pub const HTZOOM: u32 = 9;
pub const HTSIZEFIRST: u32 = 10;
pub const HTSIZELAST: u32 = 17;
pub const HTOBJECT: u32 = 19;
pub const HTCLOSE: u32 = 20;
pub const HTHELP: u32 = 21;
pub const SMTO_NORMAL: u32 = 0;
pub const SMTO_BLOCK: u32 = 1;
pub const SMTO_ABORTIFHUNG: u32 = 2;
pub const SMTO_NOTIMEOUTIFNOTHUNG: u32 = 8;
pub const SMTO_ERRORONEXIT: u32 = 32;
pub const MA_ACTIVATE: u32 = 1;
pub const MA_ACTIVATEANDEAT: u32 = 2;
pub const MA_NOACTIVATE: u32 = 3;
pub const MA_NOACTIVATEANDEAT: u32 = 4;
pub const ICON_SMALL: u32 = 0;
pub const ICON_BIG: u32 = 1;
pub const ICON_SMALL2: u32 = 2;
pub const SIZE_RESTORED: u32 = 0;
pub const SIZE_MINIMIZED: u32 = 1;
pub const SIZE_MAXIMIZED: u32 = 2;
pub const SIZE_MAXSHOW: u32 = 3;
pub const SIZE_MAXHIDE: u32 = 4;
pub const SIZENORMAL: u32 = 0;
pub const SIZEICONIC: u32 = 1;
pub const SIZEFULLSCREEN: u32 = 2;
pub const SIZEZOOMSHOW: u32 = 3;
pub const SIZEZOOMHIDE: u32 = 4;
pub const WVR_ALIGNTOP: u32 = 16;
pub const WVR_ALIGNLEFT: u32 = 32;
pub const WVR_ALIGNBOTTOM: u32 = 64;
pub const WVR_ALIGNRIGHT: u32 = 128;
pub const WVR_HREDRAW: u32 = 256;
pub const WVR_VREDRAW: u32 = 512;
pub const WVR_REDRAW: u32 = 768;
pub const WVR_VALIDRECTS: u32 = 1024;
pub const MK_LBUTTON: u32 = 1;
pub const MK_RBUTTON: u32 = 2;
pub const MK_SHIFT: u32 = 4;
pub const MK_CONTROL: u32 = 8;
pub const MK_MBUTTON: u32 = 16;
pub const MK_XBUTTON1: u32 = 32;
pub const MK_XBUTTON2: u32 = 64;
pub const TME_HOVER: u32 = 1;
pub const TME_LEAVE: u32 = 2;
pub const TME_NONCLIENT: u32 = 16;
pub const TME_QUERY: u32 = 1073741824;
pub const TME_CANCEL: u32 = 2147483648;
pub const HOVER_DEFAULT: u32 = 4294967295;
pub const WS_OVERLAPPED: u32 = 0;
pub const WS_POPUP: u32 = 2147483648;
pub const WS_CHILD: u32 = 1073741824;
pub const WS_MINIMIZE: u32 = 536870912;
pub const WS_VISIBLE: u32 = 268435456;
pub const WS_DISABLED: u32 = 134217728;
pub const WS_CLIPSIBLINGS: u32 = 67108864;
pub const WS_CLIPCHILDREN: u32 = 33554432;
pub const WS_MAXIMIZE: u32 = 16777216;
pub const WS_CAPTION: u32 = 12582912;
pub const WS_BORDER: u32 = 8388608;
pub const WS_DLGFRAME: u32 = 4194304;
pub const WS_VSCROLL: u32 = 2097152;
pub const WS_HSCROLL: u32 = 1048576;
pub const WS_SYSMENU: u32 = 524288;
pub const WS_THICKFRAME: u32 = 262144;
pub const WS_GROUP: u32 = 131072;
pub const WS_TABSTOP: u32 = 65536;
pub const WS_MINIMIZEBOX: u32 = 131072;
pub const WS_MAXIMIZEBOX: u32 = 65536;
pub const WS_TILED: u32 = 0;
pub const WS_ICONIC: u32 = 536870912;
pub const WS_SIZEBOX: u32 = 262144;
pub const WS_OVERLAPPEDWINDOW: u32 = 13565952;
pub const WS_POPUPWINDOW: u32 = 2156396544;
pub const WS_CHILDWINDOW: u32 = 1073741824;
pub const WS_EX_DLGMODALFRAME: u32 = 1;
pub const WS_EX_NOPARENTNOTIFY: u32 = 4;
pub const WS_EX_TOPMOST: u32 = 8;
pub const WS_EX_ACCEPTFILES: u32 = 16;
pub const WS_EX_TRANSPARENT: u32 = 32;
pub const WS_EX_MDICHILD: u32 = 64;
pub const WS_EX_TOOLWINDOW: u32 = 128;
pub const WS_EX_WINDOWEDGE: u32 = 256;
pub const WS_EX_CLIENTEDGE: u32 = 512;
pub const WS_EX_CONTEXTHELP: u32 = 1024;
pub const WS_EX_RIGHT: u32 = 4096;
pub const WS_EX_LEFT: u32 = 0;
pub const WS_EX_RTLREADING: u32 = 8192;
pub const WS_EX_LTRREADING: u32 = 0;
pub const WS_EX_LEFTSCROLLBAR: u32 = 16384;
pub const WS_EX_RIGHTSCROLLBAR: u32 = 0;
pub const WS_EX_CONTROLPARENT: u32 = 65536;
pub const WS_EX_STATICEDGE: u32 = 131072;
pub const WS_EX_APPWINDOW: u32 = 262144;
pub const WS_EX_OVERLAPPEDWINDOW: u32 = 768;
pub const WS_EX_PALETTEWINDOW: u32 = 392;
pub const WS_EX_LAYERED: u32 = 524288;
pub const WS_EX_NOINHERITLAYOUT: u32 = 1048576;
pub const WS_EX_NOREDIRECTIONBITMAP: u32 = 2097152;
pub const WS_EX_LAYOUTRTL: u32 = 4194304;
pub const WS_EX_COMPOSITED: u32 = 33554432;
pub const WS_EX_NOACTIVATE: u32 = 134217728;
pub const CS_VREDRAW: u32 = 1;
pub const CS_HREDRAW: u32 = 2;
pub const CS_DBLCLKS: u32 = 8;
pub const CS_OWNDC: u32 = 32;
pub const CS_CLASSDC: u32 = 64;
pub const CS_PARENTDC: u32 = 128;
pub const CS_NOCLOSE: u32 = 512;
pub const CS_SAVEBITS: u32 = 2048;
pub const CS_BYTEALIGNCLIENT: u32 = 4096;
pub const CS_BYTEALIGNWINDOW: u32 = 8192;
pub const CS_GLOBALCLASS: u32 = 16384;
pub const CS_IME: u32 = 65536;
pub const CS_DROPSHADOW: u32 = 131072;
pub const PRF_CHECKVISIBLE: u32 = 1;
pub const PRF_NONCLIENT: u32 = 2;
pub const PRF_CLIENT: u32 = 4;
pub const PRF_ERASEBKGND: u32 = 8;
pub const PRF_CHILDREN: u32 = 16;
pub const PRF_OWNED: u32 = 32;
pub const BDR_RAISEDOUTER: u32 = 1;
pub const BDR_SUNKENOUTER: u32 = 2;
pub const BDR_RAISEDINNER: u32 = 4;
pub const BDR_SUNKENINNER: u32 = 8;
pub const BDR_OUTER: u32 = 3;
pub const BDR_INNER: u32 = 12;
pub const BDR_RAISED: u32 = 5;
pub const BDR_SUNKEN: u32 = 10;
pub const EDGE_RAISED: u32 = 5;
pub const EDGE_SUNKEN: u32 = 10;
pub const EDGE_ETCHED: u32 = 6;
pub const EDGE_BUMP: u32 = 9;
pub const BF_LEFT: u32 = 1;
pub const BF_TOP: u32 = 2;
pub const BF_RIGHT: u32 = 4;
pub const BF_BOTTOM: u32 = 8;
pub const BF_TOPLEFT: u32 = 3;
pub const BF_TOPRIGHT: u32 = 6;
pub const BF_BOTTOMLEFT: u32 = 9;
pub const BF_BOTTOMRIGHT: u32 = 12;
pub const BF_RECT: u32 = 15;
pub const BF_DIAGONAL: u32 = 16;
pub const BF_DIAGONAL_ENDTOPRIGHT: u32 = 22;
pub const BF_DIAGONAL_ENDTOPLEFT: u32 = 19;
pub const BF_DIAGONAL_ENDBOTTOMLEFT: u32 = 25;
pub const BF_DIAGONAL_ENDBOTTOMRIGHT: u32 = 28;
pub const BF_MIDDLE: u32 = 2048;
pub const BF_SOFT: u32 = 4096;
pub const BF_ADJUST: u32 = 8192;
pub const BF_FLAT: u32 = 16384;
pub const BF_MONO: u32 = 32768;
pub const DFC_CAPTION: u32 = 1;
pub const DFC_MENU: u32 = 2;
pub const DFC_SCROLL: u32 = 3;
pub const DFC_BUTTON: u32 = 4;
pub const DFC_POPUPMENU: u32 = 5;
pub const DFCS_CAPTIONCLOSE: u32 = 0;
pub const DFCS_CAPTIONMIN: u32 = 1;
pub const DFCS_CAPTIONMAX: u32 = 2;
pub const DFCS_CAPTIONRESTORE: u32 = 3;
pub const DFCS_CAPTIONHELP: u32 = 4;
pub const DFCS_MENUARROW: u32 = 0;
pub const DFCS_MENUCHECK: u32 = 1;
pub const DFCS_MENUBULLET: u32 = 2;
pub const DFCS_MENUARROWRIGHT: u32 = 4;
pub const DFCS_SCROLLUP: u32 = 0;
pub const DFCS_SCROLLDOWN: u32 = 1;
pub const DFCS_SCROLLLEFT: u32 = 2;
pub const DFCS_SCROLLRIGHT: u32 = 3;
pub const DFCS_SCROLLCOMBOBOX: u32 = 5;
pub const DFCS_SCROLLSIZEGRIP: u32 = 8;
pub const DFCS_SCROLLSIZEGRIPRIGHT: u32 = 16;
pub const DFCS_BUTTONCHECK: u32 = 0;
pub const DFCS_BUTTONRADIOIMAGE: u32 = 1;
pub const DFCS_BUTTONRADIOMASK: u32 = 2;
pub const DFCS_BUTTONRADIO: u32 = 4;
pub const DFCS_BUTTON3STATE: u32 = 8;
pub const DFCS_BUTTONPUSH: u32 = 16;
pub const DFCS_INACTIVE: u32 = 256;
pub const DFCS_PUSHED: u32 = 512;
pub const DFCS_CHECKED: u32 = 1024;
pub const DFCS_TRANSPARENT: u32 = 2048;
pub const DFCS_HOT: u32 = 4096;
pub const DFCS_ADJUSTRECT: u32 = 8192;
pub const DFCS_FLAT: u32 = 16384;
pub const DFCS_MONO: u32 = 32768;
pub const DC_ACTIVE: u32 = 1;
pub const DC_SMALLCAP: u32 = 2;
pub const DC_ICON: u32 = 4;
pub const DC_TEXT: u32 = 8;
pub const DC_INBUTTON: u32 = 16;
pub const DC_GRADIENT: u32 = 32;
pub const DC_BUTTONS: u32 = 4096;
pub const IDANI_OPEN: u32 = 1;
pub const IDANI_CAPTION: u32 = 3;
pub const CF_TEXT: u32 = 1;
pub const CF_BITMAP: u32 = 2;
pub const CF_METAFILEPICT: u32 = 3;
pub const CF_SYLK: u32 = 4;
pub const CF_DIF: u32 = 5;
pub const CF_TIFF: u32 = 6;
pub const CF_OEMTEXT: u32 = 7;
pub const CF_DIB: u32 = 8;
pub const CF_PALETTE: u32 = 9;
pub const CF_PENDATA: u32 = 10;
pub const CF_RIFF: u32 = 11;
pub const CF_WAVE: u32 = 12;
pub const CF_UNICODETEXT: u32 = 13;
pub const CF_ENHMETAFILE: u32 = 14;
pub const CF_HDROP: u32 = 15;
pub const CF_LOCALE: u32 = 16;
pub const CF_DIBV5: u32 = 17;
pub const CF_MAX: u32 = 18;
pub const CF_OWNERDISPLAY: u32 = 128;
pub const CF_DSPTEXT: u32 = 129;
pub const CF_DSPBITMAP: u32 = 130;
pub const CF_DSPMETAFILEPICT: u32 = 131;
pub const CF_DSPENHMETAFILE: u32 = 142;
pub const CF_PRIVATEFIRST: u32 = 512;
pub const CF_PRIVATELAST: u32 = 767;
pub const CF_GDIOBJFIRST: u32 = 768;
pub const CF_GDIOBJLAST: u32 = 1023;
pub const FVIRTKEY: u32 = 1;
pub const FNOINVERT: u32 = 2;
pub const FSHIFT: u32 = 4;
pub const FCONTROL: u32 = 8;
pub const FALT: u32 = 16;
pub const WPF_SETMINPOSITION: u32 = 1;
pub const WPF_RESTORETOMAXIMIZED: u32 = 2;
pub const WPF_ASYNCWINDOWPLACEMENT: u32 = 4;
pub const ODT_MENU: u32 = 1;
pub const ODT_LISTBOX: u32 = 2;
pub const ODT_COMBOBOX: u32 = 3;
pub const ODT_BUTTON: u32 = 4;
pub const ODT_STATIC: u32 = 5;
pub const ODA_DRAWENTIRE: u32 = 1;
pub const ODA_SELECT: u32 = 2;
pub const ODA_FOCUS: u32 = 4;
pub const ODS_SELECTED: u32 = 1;
pub const ODS_GRAYED: u32 = 2;
pub const ODS_DISABLED: u32 = 4;
pub const ODS_CHECKED: u32 = 8;
pub const ODS_FOCUS: u32 = 16;
pub const ODS_DEFAULT: u32 = 32;
pub const ODS_COMBOBOXEDIT: u32 = 4096;
pub const ODS_HOTLIGHT: u32 = 64;
pub const ODS_INACTIVE: u32 = 128;
pub const ODS_NOACCEL: u32 = 256;
pub const ODS_NOFOCUSRECT: u32 = 512;
pub const PM_NOREMOVE: u32 = 0;
pub const PM_REMOVE: u32 = 1;
pub const PM_NOYIELD: u32 = 2;
pub const MOD_ALT: u32 = 1;
pub const MOD_CONTROL: u32 = 2;
pub const MOD_SHIFT: u32 = 4;
pub const MOD_WIN: u32 = 8;
pub const MOD_NOREPEAT: u32 = 16384;
pub const IDHOT_SNAPWINDOW: i32 = -1;
pub const IDHOT_SNAPDESKTOP: i32 = -2;
pub const ENDSESSION_CLOSEAPP: u32 = 1;
pub const ENDSESSION_CRITICAL: u32 = 1073741824;
pub const ENDSESSION_LOGOFF: u32 = 2147483648;
pub const EWX_LOGOFF: u32 = 0;
pub const EWX_SHUTDOWN: u32 = 1;
pub const EWX_REBOOT: u32 = 2;
pub const EWX_FORCE: u32 = 4;
pub const EWX_POWEROFF: u32 = 8;
pub const EWX_FORCEIFHUNG: u32 = 16;
pub const EWX_QUICKRESOLVE: u32 = 32;
pub const EWX_RESTARTAPPS: u32 = 64;
pub const EWX_HYBRID_SHUTDOWN: u32 = 4194304;
pub const EWX_BOOTOPTIONS: u32 = 16777216;
pub const EWX_ARSO: u32 = 67108864;
pub const EWX_CHECK_SAFE_FOR_SERVER: u32 = 134217728;
pub const EWX_SYSTEM_INITIATED: u32 = 268435456;
pub const BSM_ALLCOMPONENTS: u32 = 0;
pub const BSM_VXDS: u32 = 1;
pub const BSM_NETDRIVER: u32 = 2;
pub const BSM_INSTALLABLEDRIVERS: u32 = 4;
pub const BSM_APPLICATIONS: u32 = 8;
pub const BSM_ALLDESKTOPS: u32 = 16;
pub const BSF_QUERY: u32 = 1;
pub const BSF_IGNORECURRENTTASK: u32 = 2;
pub const BSF_FLUSHDISK: u32 = 4;
pub const BSF_NOHANG: u32 = 8;
pub const BSF_POSTMESSAGE: u32 = 16;
pub const BSF_FORCEIFHUNG: u32 = 32;
pub const BSF_NOTIMEOUTIFNOTHUNG: u32 = 64;
pub const BSF_ALLOWSFW: u32 = 128;
pub const BSF_SENDNOTIFYMESSAGE: u32 = 256;
pub const BSF_RETURNHDESK: u32 = 512;
pub const BSF_LUID: u32 = 1024;
pub const BROADCAST_QUERY_DENY: u32 = 1112363332;
pub const DEVICE_NOTIFY_WINDOW_HANDLE: u32 = 0;
pub const DEVICE_NOTIFY_SERVICE_HANDLE: u32 = 1;
pub const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES: u32 = 4;
pub const ISMEX_NOSEND: u32 = 0;
pub const ISMEX_SEND: u32 = 1;
pub const ISMEX_NOTIFY: u32 = 2;
pub const ISMEX_CALLBACK: u32 = 4;
pub const ISMEX_REPLIED: u32 = 8;
pub const PW_CLIENTONLY: u32 = 1;
pub const PW_RENDERFULLCONTENT: u32 = 2;
pub const LWA_COLORKEY: u32 = 1;
pub const LWA_ALPHA: u32 = 2;
pub const ULW_COLORKEY: u32 = 1;
pub const ULW_ALPHA: u32 = 2;
pub const ULW_OPAQUE: u32 = 4;
pub const ULW_EX_NORESIZE: u32 = 8;
pub const FLASHW_STOP: u32 = 0;
pub const FLASHW_CAPTION: u32 = 1;
pub const FLASHW_TRAY: u32 = 2;
pub const FLASHW_ALL: u32 = 3;
pub const FLASHW_TIMER: u32 = 4;
pub const FLASHW_TIMERNOFG: u32 = 12;
pub const WDA_NONE: u32 = 0;
pub const WDA_MONITOR: u32 = 1;
pub const WDA_EXCLUDEFROMCAPTURE: u32 = 17;
pub const SWP_NONE: u32 = 0;
pub const SWP_NOSIZE: u32 = 1;
pub const SWP_NOMOVE: u32 = 2;
pub const SWP_NOZORDER: u32 = 4;
pub const SWP_NOREDRAW: u32 = 8;
pub const SWP_NOACTIVATE: u32 = 16;
pub const SWP_FRAMECHANGED: u32 = 32;
pub const SWP_SHOWWINDOW: u32 = 64;
pub const SWP_HIDEWINDOW: u32 = 128;
pub const SWP_NOCOPYBITS: u32 = 256;
pub const SWP_NOOWNERZORDER: u32 = 512;
pub const SWP_NOSENDCHANGING: u32 = 1024;
pub const SWP_DRAWFRAME: u32 = 32;
pub const SWP_NOREPOSITION: u32 = 512;
pub const SWP_DEFERERASE: u32 = 8192;
pub const SWP_ASYNCWINDOWPOS: u32 = 16384;
pub const DLGWINDOWEXTRA: u32 = 30;
pub const KEYEVENTF_EXTENDEDKEY: u32 = 1;
pub const KEYEVENTF_KEYUP: u32 = 2;
pub const KEYEVENTF_UNICODE: u32 = 4;
pub const KEYEVENTF_SCANCODE: u32 = 8;
pub const MOUSEEVENTF_MOVE: u32 = 1;
pub const MOUSEEVENTF_LEFTDOWN: u32 = 2;
pub const MOUSEEVENTF_LEFTUP: u32 = 4;
pub const MOUSEEVENTF_RIGHTDOWN: u32 = 8;
pub const MOUSEEVENTF_RIGHTUP: u32 = 16;
pub const MOUSEEVENTF_MIDDLEDOWN: u32 = 32;
pub const MOUSEEVENTF_MIDDLEUP: u32 = 64;
pub const MOUSEEVENTF_XDOWN: u32 = 128;
pub const MOUSEEVENTF_XUP: u32 = 256;
pub const MOUSEEVENTF_WHEEL: u32 = 2048;
pub const MOUSEEVENTF_HWHEEL: u32 = 4096;
pub const MOUSEEVENTF_MOVE_NOCOALESCE: u32 = 8192;
pub const MOUSEEVENTF_VIRTUALDESK: u32 = 16384;
pub const MOUSEEVENTF_ABSOLUTE: u32 = 32768;
pub const INPUT_MOUSE: u32 = 0;
pub const INPUT_KEYBOARD: u32 = 1;
pub const INPUT_HARDWARE: u32 = 2;
pub const TOUCHEVENTF_MOVE: u32 = 1;
pub const TOUCHEVENTF_DOWN: u32 = 2;
pub const TOUCHEVENTF_UP: u32 = 4;
pub const TOUCHEVENTF_INRANGE: u32 = 8;
pub const TOUCHEVENTF_PRIMARY: u32 = 16;
pub const TOUCHEVENTF_NOCOALESCE: u32 = 32;
pub const TOUCHEVENTF_PEN: u32 = 64;
pub const TOUCHEVENTF_PALM: u32 = 128;
pub const TOUCHINPUTMASKF_TIMEFROMSYSTEM: u32 = 1;
pub const TOUCHINPUTMASKF_EXTRAINFO: u32 = 2;
pub const TOUCHINPUTMASKF_CONTACTAREA: u32 = 4;
pub const TWF_FINETOUCH: u32 = 1;
pub const TWF_WANTPALM: u32 = 2;
pub const POINTER_FLAG_NONE: u32 = 0;
pub const POINTER_FLAG_NEW: u32 = 1;
pub const POINTER_FLAG_INRANGE: u32 = 2;
pub const POINTER_FLAG_INCONTACT: u32 = 4;
pub const POINTER_FLAG_FIRSTBUTTON: u32 = 16;
pub const POINTER_FLAG_SECONDBUTTON: u32 = 32;
pub const POINTER_FLAG_THIRDBUTTON: u32 = 64;
pub const POINTER_FLAG_FOURTHBUTTON: u32 = 128;
pub const POINTER_FLAG_FIFTHBUTTON: u32 = 256;
pub const POINTER_FLAG_PRIMARY: u32 = 8192;
pub const POINTER_FLAG_CONFIDENCE: u32 = 16384;
pub const POINTER_FLAG_CANCELED: u32 = 32768;
pub const POINTER_FLAG_DOWN: u32 = 65536;
pub const POINTER_FLAG_UPDATE: u32 = 131072;
pub const POINTER_FLAG_UP: u32 = 262144;
pub const POINTER_FLAG_WHEEL: u32 = 524288;
pub const POINTER_FLAG_HWHEEL: u32 = 1048576;
pub const POINTER_FLAG_CAPTURECHANGED: u32 = 2097152;
pub const POINTER_FLAG_HASTRANSFORM: u32 = 4194304;
pub const POINTER_MOD_SHIFT: u32 = 4;
pub const POINTER_MOD_CTRL: u32 = 8;
pub const TOUCH_FLAG_NONE: u32 = 0;
pub const TOUCH_MASK_NONE: u32 = 0;
pub const TOUCH_MASK_CONTACTAREA: u32 = 1;
pub const TOUCH_MASK_ORIENTATION: u32 = 2;
pub const TOUCH_MASK_PRESSURE: u32 = 4;
pub const PEN_FLAG_NONE: u32 = 0;
pub const PEN_FLAG_BARREL: u32 = 1;
pub const PEN_FLAG_INVERTED: u32 = 2;
pub const PEN_FLAG_ERASER: u32 = 4;
pub const PEN_MASK_NONE: u32 = 0;
pub const PEN_MASK_PRESSURE: u32 = 1;
pub const PEN_MASK_ROTATION: u32 = 2;
pub const PEN_MASK_TILT_X: u32 = 4;
pub const PEN_MASK_TILT_Y: u32 = 8;
pub const POINTER_MESSAGE_FLAG_NEW: u32 = 1;
pub const POINTER_MESSAGE_FLAG_INRANGE: u32 = 2;
pub const POINTER_MESSAGE_FLAG_INCONTACT: u32 = 4;
pub const POINTER_MESSAGE_FLAG_FIRSTBUTTON: u32 = 16;
pub const POINTER_MESSAGE_FLAG_SECONDBUTTON: u32 = 32;
pub const POINTER_MESSAGE_FLAG_THIRDBUTTON: u32 = 64;
pub const POINTER_MESSAGE_FLAG_FOURTHBUTTON: u32 = 128;
pub const POINTER_MESSAGE_FLAG_FIFTHBUTTON: u32 = 256;
pub const POINTER_MESSAGE_FLAG_PRIMARY: u32 = 8192;
pub const POINTER_MESSAGE_FLAG_CONFIDENCE: u32 = 16384;
pub const POINTER_MESSAGE_FLAG_CANCELED: u32 = 32768;
pub const PA_ACTIVATE: u32 = 1;
pub const PA_NOACTIVATE: u32 = 3;
pub const MAX_TOUCH_COUNT: u32 = 256;
pub const TOUCH_FEEDBACK_DEFAULT: u32 = 1;
pub const TOUCH_FEEDBACK_INDIRECT: u32 = 2;
pub const TOUCH_FEEDBACK_NONE: u32 = 3;
pub const TOUCH_HIT_TESTING_DEFAULT: u32 = 0;
pub const TOUCH_HIT_TESTING_CLIENT: u32 = 1;
pub const TOUCH_HIT_TESTING_NONE: u32 = 2;
pub const TOUCH_HIT_TESTING_PROXIMITY_CLOSEST: u32 = 0;
pub const TOUCH_HIT_TESTING_PROXIMITY_FARTHEST: u32 = 4095;
pub const GWFS_INCLUDE_ANCESTORS: u32 = 1;
pub const MAPVK_VK_TO_VSC: u32 = 0;
pub const MAPVK_VSC_TO_VK: u32 = 1;
pub const MAPVK_VK_TO_CHAR: u32 = 2;
pub const MAPVK_VSC_TO_VK_EX: u32 = 3;
pub const MAPVK_VK_TO_VSC_EX: u32 = 4;
pub const MWMO_WAITALL: u32 = 1;
pub const MWMO_ALERTABLE: u32 = 2;
pub const MWMO_INPUTAVAILABLE: u32 = 4;
pub const QS_KEY: u32 = 1;
pub const QS_MOUSEMOVE: u32 = 2;
pub const QS_MOUSEBUTTON: u32 = 4;
pub const QS_POSTMESSAGE: u32 = 8;
pub const QS_TIMER: u32 = 16;
pub const QS_PAINT: u32 = 32;
pub const QS_SENDMESSAGE: u32 = 64;
pub const QS_HOTKEY: u32 = 128;
pub const QS_ALLPOSTMESSAGE: u32 = 256;
pub const QS_RAWINPUT: u32 = 1024;
pub const QS_TOUCH: u32 = 2048;
pub const QS_POINTER: u32 = 4096;
pub const QS_MOUSE: u32 = 6;
pub const QS_INPUT: u32 = 7175;
pub const QS_ALLEVENTS: u32 = 7359;
pub const QS_ALLINPUT: u32 = 7423;
pub const USER_TIMER_MAXIMUM: u32 = 2147483647;
pub const USER_TIMER_MINIMUM: u32 = 10;
pub const TIMERV_DEFAULT_COALESCING: u32 = 0;
pub const TIMERV_NO_COALESCING: u32 = 4294967295;
pub const TIMERV_COALESCING_MIN: u32 = 1;
pub const TIMERV_COALESCING_MAX: u32 = 2147483637;
pub const SM_CXSCREEN: u32 = 0;
pub const SM_CYSCREEN: u32 = 1;
pub const SM_CXVSCROLL: u32 = 2;
pub const SM_CYHSCROLL: u32 = 3;
pub const SM_CYCAPTION: u32 = 4;
pub const SM_CXBORDER: u32 = 5;
pub const SM_CYBORDER: u32 = 6;
pub const SM_CXDLGFRAME: u32 = 7;
pub const SM_CYDLGFRAME: u32 = 8;
pub const SM_CYVTHUMB: u32 = 9;
pub const SM_CXHTHUMB: u32 = 10;
pub const SM_CXICON: u32 = 11;
pub const SM_CYICON: u32 = 12;
pub const SM_CXCURSOR: u32 = 13;
pub const SM_CYCURSOR: u32 = 14;
pub const SM_CYMENU: u32 = 15;
pub const SM_CXFULLSCREEN: u32 = 16;
pub const SM_CYFULLSCREEN: u32 = 17;
pub const SM_CYKANJIWINDOW: u32 = 18;
pub const SM_MOUSEPRESENT: u32 = 19;
pub const SM_CYVSCROLL: u32 = 20;
pub const SM_CXHSCROLL: u32 = 21;
pub const SM_DEBUG: u32 = 22;
pub const SM_SWAPBUTTON: u32 = 23;
pub const SM_RESERVED1: u32 = 24;
pub const SM_RESERVED2: u32 = 25;
pub const SM_RESERVED3: u32 = 26;
pub const SM_RESERVED4: u32 = 27;
pub const SM_CXMIN: u32 = 28;
pub const SM_CYMIN: u32 = 29;
pub const SM_CXSIZE: u32 = 30;
pub const SM_CYSIZE: u32 = 31;
pub const SM_CXFRAME: u32 = 32;
pub const SM_CYFRAME: u32 = 33;
pub const SM_CXMINTRACK: u32 = 34;
pub const SM_CYMINTRACK: u32 = 35;
pub const SM_CXDOUBLECLK: u32 = 36;
pub const SM_CYDOUBLECLK: u32 = 37;
pub const SM_CXICONSPACING: u32 = 38;
pub const SM_CYICONSPACING: u32 = 39;
pub const SM_MENUDROPALIGNMENT: u32 = 40;
pub const SM_PENWINDOWS: u32 = 41;
pub const SM_DBCSENABLED: u32 = 42;
pub const SM_CMOUSEBUTTONS: u32 = 43;
pub const SM_CXFIXEDFRAME: u32 = 7;
pub const SM_CYFIXEDFRAME: u32 = 8;
pub const SM_CXSIZEFRAME: u32 = 32;
pub const SM_CYSIZEFRAME: u32 = 33;
pub const SM_SECURE: u32 = 44;
pub const SM_CXEDGE: u32 = 45;
pub const SM_CYEDGE: u32 = 46;
pub const SM_CXMINSPACING: u32 = 47;
pub const SM_CYMINSPACING: u32 = 48;
pub const SM_CXSMICON: u32 = 49;
pub const SM_CYSMICON: u32 = 50;
pub const SM_CYSMCAPTION: u32 = 51;
pub const SM_CXSMSIZE: u32 = 52;
pub const SM_CYSMSIZE: u32 = 53;
pub const SM_CXMENUSIZE: u32 = 54;
pub const SM_CYMENUSIZE: u32 = 55;
pub const SM_ARRANGE: u32 = 56;
pub const SM_CXMINIMIZED: u32 = 57;
pub const SM_CYMINIMIZED: u32 = 58;
pub const SM_CXMAXTRACK: u32 = 59;
pub const SM_CYMAXTRACK: u32 = 60;
pub const SM_CXMAXIMIZED: u32 = 61;
pub const SM_CYMAXIMIZED: u32 = 62;
pub const SM_NETWORK: u32 = 63;
pub const SM_CLEANBOOT: u32 = 67;
pub const SM_CXDRAG: u32 = 68;
pub const SM_CYDRAG: u32 = 69;
pub const SM_SHOWSOUNDS: u32 = 70;
pub const SM_CXMENUCHECK: u32 = 71;
pub const SM_CYMENUCHECK: u32 = 72;
pub const SM_SLOWMACHINE: u32 = 73;
pub const SM_MIDEASTENABLED: u32 = 74;
pub const SM_MOUSEWHEELPRESENT: u32 = 75;
pub const SM_XVIRTUALSCREEN: u32 = 76;
pub const SM_YVIRTUALSCREEN: u32 = 77;
pub const SM_CXVIRTUALSCREEN: u32 = 78;
pub const SM_CYVIRTUALSCREEN: u32 = 79;
pub const SM_CMONITORS: u32 = 80;
pub const SM_SAMEDISPLAYFORMAT: u32 = 81;
pub const SM_IMMENABLED: u32 = 82;
pub const SM_CXFOCUSBORDER: u32 = 83;
pub const SM_CYFOCUSBORDER: u32 = 84;
pub const SM_TABLETPC: u32 = 86;
pub const SM_MEDIACENTER: u32 = 87;
pub const SM_STARTER: u32 = 88;
pub const SM_SERVERR2: u32 = 89;
pub const SM_MOUSEHORIZONTALWHEELPRESENT: u32 = 91;
pub const SM_CXPADDEDBORDER: u32 = 92;
pub const SM_DIGITIZER: u32 = 94;
pub const SM_MAXIMUMTOUCHES: u32 = 95;
pub const SM_CMETRICS: u32 = 97;
pub const SM_REMOTESESSION: u32 = 4096;
pub const SM_SHUTTINGDOWN: u32 = 8192;
pub const SM_REMOTECONTROL: u32 = 8193;
pub const SM_CARETBLINKINGENABLED: u32 = 8194;
pub const SM_CONVERTIBLESLATEMODE: u32 = 8195;
pub const SM_SYSTEMDOCKED: u32 = 8196;
pub const MENU_GET_ITEM_INFO: u32 = 1;
pub const MENU_GET_ITEM_DATA: u32 = 2;
pub const MENU_GET_SUBMENU: u32 = 4;
pub const MENU_INSERT_MENU: u32 = 8;
pub const MENU_INSERT_ITEM: u32 = 16;
pub const MENU_DELETE_MENU: u32 = 32;
pub const MENU_SET_ITEM_INFO: u32 = 64;
pub const MENU_ENABLE_ITEM: u32 = 128;
pub const MENU_CHECK_ITEM: u32 = 256;
pub const MENU_SET_DEFAULT_ITEM: u32 = 512;
pub const MENU_SET_ITEM_DATA: u32 = 1024;
pub const MENU_SET_SUBMENU: u32 = 2048;
pub const MENU_READ_ACCESS: u32 = 131079;
pub const MENU_WRITE_ACCESS: u32 = 135160;
pub const MENU_EXECUTE_ACCESS: u32 = 131072;
pub const MENU_ALL_ACCESS: u32 = 2035711;
pub const PMB_ACTIVE: u32 = 1;
pub const MNC_IGNORE: u32 = 0;
pub const MNC_CLOSE: u32 = 1;
pub const MNC_EXECUTE: u32 = 2;
pub const MNC_SELECT: u32 = 3;
pub const MNS_NOCHECK: u32 = 2147483648;
pub const MNS_MODELESS: u32 = 1073741824;
pub const MNS_DRAGDROP: u32 = 536870912;
pub const MNS_AUTODISMISS: u32 = 268435456;
pub const MNS_NOTIFYBYPOS: u32 = 134217728;
pub const MNS_CHECKORBMP: u32 = 67108864;
pub const MIM_MAXHEIGHT: u32 = 1;
pub const MIM_BACKGROUND: u32 = 2;
pub const MIM_HELPID: u32 = 4;
pub const MIM_MENUDATA: u32 = 8;
pub const MIM_STYLE: u32 = 16;
pub const MIM_APPLYTOSUBMENUS: u32 = 2147483648;
pub const MND_CONTINUE: u32 = 0;
pub const MND_ENDMENU: u32 = 1;
pub const MNGOF_TOPGAP: u32 = 1;
pub const MNGOF_BOTTOMGAP: u32 = 2;
pub const MNGO_NOINTERFACE: u32 = 0;
pub const MNGO_NOERROR: u32 = 1;
pub const MIIM_STATE: u32 = 1;
pub const MIIM_ID: u32 = 2;
pub const MIIM_SUBMENU: u32 = 4;
pub const MIIM_CHECKMARKS: u32 = 8;
pub const MIIM_TYPE: u32 = 16;
pub const MIIM_DATA: u32 = 32;
pub const MIIM_STRING: u32 = 64;
pub const MIIM_BITMAP: u32 = 128;
pub const MIIM_FTYPE: u32 = 256;
pub const GMDI_USEDISABLED: u32 = 1;
pub const GMDI_GOINTOPOPUPS: u32 = 2;
pub const TPM_LEFTBUTTON: u32 = 0;
pub const TPM_RIGHTBUTTON: u32 = 2;
pub const TPM_LEFTALIGN: u32 = 0;
pub const TPM_CENTERALIGN: u32 = 4;
pub const TPM_RIGHTALIGN: u32 = 8;
pub const TPM_TOPALIGN: u32 = 0;
pub const TPM_VCENTERALIGN: u32 = 16;
pub const TPM_BOTTOMALIGN: u32 = 32;
pub const TPM_HORIZONTAL: u32 = 0;
pub const TPM_VERTICAL: u32 = 64;
pub const TPM_NONOTIFY: u32 = 128;
pub const TPM_RETURNCMD: u32 = 256;
pub const TPM_RECURSE: u32 = 1;
pub const TPM_HORPOSANIMATION: u32 = 1024;
pub const TPM_HORNEGANIMATION: u32 = 2048;
pub const TPM_VERPOSANIMATION: u32 = 4096;
pub const TPM_VERNEGANIMATION: u32 = 8192;
pub const TPM_NOANIMATION: u32 = 16384;
pub const TPM_LAYOUTRTL: u32 = 32768;
pub const TPM_WORKAREA: u32 = 65536;
pub const DOF_EXECUTABLE: u32 = 32769;
pub const DOF_DOCUMENT: u32 = 32770;
pub const DOF_DIRECTORY: u32 = 32771;
pub const DOF_MULTIPLE: u32 = 32772;
pub const DOF_PROGMAN: u32 = 1;
pub const DOF_SHELLDATA: u32 = 2;
pub const DO_DROPFILE: u32 = 1162627398;
pub const DO_PRINTFILE: u32 = 1414419024;
pub const DT_TOP: u32 = 0;
pub const DT_LEFT: u32 = 0;
pub const DT_CENTER: u32 = 1;
pub const DT_RIGHT: u32 = 2;
pub const DT_VCENTER: u32 = 4;
pub const DT_BOTTOM: u32 = 8;
pub const DT_WORDBREAK: u32 = 16;
pub const DT_SINGLELINE: u32 = 32;
pub const DT_EXPANDTABS: u32 = 64;
pub const DT_TABSTOP: u32 = 128;
pub const DT_NOCLIP: u32 = 256;
pub const DT_EXTERNALLEADING: u32 = 512;
pub const DT_CALCRECT: u32 = 1024;
pub const DT_NOPREFIX: u32 = 2048;
pub const DT_INTERNAL: u32 = 4096;
pub const DT_EDITCONTROL: u32 = 8192;
pub const DT_PATH_ELLIPSIS: u32 = 16384;
pub const DT_END_ELLIPSIS: u32 = 32768;
pub const DT_MODIFYSTRING: u32 = 65536;
pub const DT_RTLREADING: u32 = 131072;
pub const DT_WORD_ELLIPSIS: u32 = 262144;
pub const DT_NOFULLWIDTHCHARBREAK: u32 = 524288;
pub const DT_HIDEPREFIX: u32 = 1048576;
pub const DT_PREFIXONLY: u32 = 2097152;
pub const DST_COMPLEX: u32 = 0;
pub const DST_TEXT: u32 = 1;
pub const DST_PREFIXTEXT: u32 = 2;
pub const DST_ICON: u32 = 3;
pub const DST_BITMAP: u32 = 4;
pub const DSS_NORMAL: u32 = 0;
pub const DSS_UNION: u32 = 16;
pub const DSS_DISABLED: u32 = 32;
pub const DSS_MONO: u32 = 128;
pub const DSS_HIDEPREFIX: u32 = 512;
pub const DSS_PREFIXONLY: u32 = 1024;
pub const DSS_RIGHT: u32 = 32768;
pub const LSFW_LOCK: u32 = 1;
pub const LSFW_UNLOCK: u32 = 2;
pub const DCX_WINDOW: u32 = 1;
pub const DCX_CACHE: u32 = 2;
pub const DCX_NORESETATTRS: u32 = 4;
pub const DCX_CLIPCHILDREN: u32 = 8;
pub const DCX_CLIPSIBLINGS: u32 = 16;
pub const DCX_PARENTCLIP: u32 = 32;
pub const DCX_EXCLUDERGN: u32 = 64;
pub const DCX_INTERSECTRGN: u32 = 128;
pub const DCX_EXCLUDEUPDATE: u32 = 256;
pub const DCX_INTERSECTUPDATE: u32 = 512;
pub const DCX_LOCKWINDOWUPDATE: u32 = 1024;
pub const DCX_VALIDATE: u32 = 2097152;
pub const RDW_INVALIDATE: u32 = 1;
pub const RDW_INTERNALPAINT: u32 = 2;
pub const RDW_ERASE: u32 = 4;
pub const RDW_VALIDATE: u32 = 8;
pub const RDW_NOINTERNALPAINT: u32 = 16;
pub const RDW_NOERASE: u32 = 32;
pub const RDW_NOCHILDREN: u32 = 64;
pub const RDW_ALLCHILDREN: u32 = 128;
pub const RDW_UPDATENOW: u32 = 256;
pub const RDW_ERASENOW: u32 = 512;
pub const RDW_FRAME: u32 = 1024;
pub const RDW_NOFRAME: u32 = 2048;
pub const SW_SCROLLCHILDREN: u32 = 1;
pub const SW_INVALIDATE: u32 = 2;
pub const SW_ERASE: u32 = 4;
pub const SW_SMOOTHSCROLL: u32 = 16;
pub const ESB_ENABLE_BOTH: u32 = 0;
pub const ESB_DISABLE_BOTH: u32 = 3;
pub const ESB_DISABLE_LEFT: u32 = 1;
pub const ESB_DISABLE_RIGHT: u32 = 2;
pub const ESB_DISABLE_UP: u32 = 1;
pub const ESB_DISABLE_DOWN: u32 = 2;
pub const ESB_DISABLE_LTUP: u32 = 1;
pub const ESB_DISABLE_RTDN: u32 = 2;
pub const HELPINFO_WINDOW: u32 = 1;
pub const HELPINFO_MENUITEM: u32 = 2;
pub const MB_OK: u32 = 0;
pub const MB_OKCANCEL: u32 = 1;
pub const MB_ABORTRETRYIGNORE: u32 = 2;
pub const MB_YESNOCANCEL: u32 = 3;
pub const MB_YESNO: u32 = 4;
pub const MB_RETRYCANCEL: u32 = 5;
pub const MB_CANCELTRYCONTINUE: u32 = 6;
pub const MB_ICONHAND: u32 = 16;
pub const MB_ICONQUESTION: u32 = 32;
pub const MB_ICONEXCLAMATION: u32 = 48;
pub const MB_ICONASTERISK: u32 = 64;
pub const MB_USERICON: u32 = 128;
pub const MB_ICONWARNING: u32 = 48;
pub const MB_ICONERROR: u32 = 16;
pub const MB_ICONINFORMATION: u32 = 64;
pub const MB_ICONSTOP: u32 = 16;
pub const MB_DEFBUTTON1: u32 = 0;
pub const MB_DEFBUTTON2: u32 = 256;
pub const MB_DEFBUTTON3: u32 = 512;
pub const MB_DEFBUTTON4: u32 = 768;
pub const MB_APPLMODAL: u32 = 0;
pub const MB_SYSTEMMODAL: u32 = 4096;
pub const MB_TASKMODAL: u32 = 8192;
pub const MB_HELP: u32 = 16384;
pub const MB_NOFOCUS: u32 = 32768;
pub const MB_SETFOREGROUND: u32 = 65536;
pub const MB_DEFAULT_DESKTOP_ONLY: u32 = 131072;
pub const MB_TOPMOST: u32 = 262144;
pub const MB_RIGHT: u32 = 524288;
pub const MB_RTLREADING: u32 = 1048576;
pub const MB_SERVICE_NOTIFICATION: u32 = 2097152;
pub const MB_SERVICE_NOTIFICATION_NT3X: u32 = 262144;
pub const MB_TYPEMASK: u32 = 15;
pub const MB_ICONMASK: u32 = 240;
pub const MB_DEFMASK: u32 = 3840;
pub const MB_MODEMASK: u32 = 12288;
pub const MB_MISCMASK: u32 = 49152;
pub const CWP_ALL: u32 = 0;
pub const CWP_SKIPINVISIBLE: u32 = 1;
pub const CWP_SKIPDISABLED: u32 = 2;
pub const CWP_SKIPTRANSPARENT: u32 = 4;
pub const CTLCOLOR_MSGBOX: u32 = 0;
pub const CTLCOLOR_EDIT: u32 = 1;
pub const CTLCOLOR_LISTBOX: u32 = 2;
pub const CTLCOLOR_BTN: u32 = 3;
pub const CTLCOLOR_DLG: u32 = 4;
pub const CTLCOLOR_SCROLLBAR: u32 = 5;
pub const CTLCOLOR_STATIC: u32 = 6;
pub const CTLCOLOR_MAX: u32 = 7;
pub const COLOR_SCROLLBAR: u32 = 0;
pub const COLOR_BACKGROUND: u32 = 1;
pub const COLOR_ACTIVECAPTION: u32 = 2;
pub const COLOR_INACTIVECAPTION: u32 = 3;
pub const COLOR_MENU: u32 = 4;
pub const COLOR_WINDOW: u32 = 5;
pub const COLOR_WINDOWFRAME: u32 = 6;
pub const COLOR_MENUTEXT: u32 = 7;
pub const COLOR_WINDOWTEXT: u32 = 8;
pub const COLOR_CAPTIONTEXT: u32 = 9;
pub const COLOR_ACTIVEBORDER: u32 = 10;
pub const COLOR_INACTIVEBORDER: u32 = 11;
pub const COLOR_APPWORKSPACE: u32 = 12;
pub const COLOR_HIGHLIGHT: u32 = 13;
pub const COLOR_HIGHLIGHTTEXT: u32 = 14;
pub const COLOR_BTNFACE: u32 = 15;
pub const COLOR_BTNSHADOW: u32 = 16;
pub const COLOR_GRAYTEXT: u32 = 17;
pub const COLOR_BTNTEXT: u32 = 18;
pub const COLOR_INACTIVECAPTIONTEXT: u32 = 19;
pub const COLOR_BTNHIGHLIGHT: u32 = 20;
pub const COLOR_3DDKSHADOW: u32 = 21;
pub const COLOR_3DLIGHT: u32 = 22;
pub const COLOR_INFOTEXT: u32 = 23;
pub const COLOR_INFOBK: u32 = 24;
pub const COLOR_HOTLIGHT: u32 = 26;
pub const COLOR_GRADIENTACTIVECAPTION: u32 = 27;
pub const COLOR_GRADIENTINACTIVECAPTION: u32 = 28;
pub const COLOR_MENUHILIGHT: u32 = 29;
pub const COLOR_MENUBAR: u32 = 30;
pub const COLOR_DESKTOP: u32 = 1;
pub const COLOR_3DFACE: u32 = 15;
pub const COLOR_3DSHADOW: u32 = 16;
pub const COLOR_3DHIGHLIGHT: u32 = 20;
pub const COLOR_3DHILIGHT: u32 = 20;
pub const COLOR_BTNHILIGHT: u32 = 20;
pub const GW_HWNDFIRST: u32 = 0;
pub const GW_HWNDLAST: u32 = 1;
pub const GW_HWNDNEXT: u32 = 2;
pub const GW_HWNDPREV: u32 = 3;
pub const GW_OWNER: u32 = 4;
pub const GW_CHILD: u32 = 5;
pub const GW_ENABLEDPOPUP: u32 = 6;
pub const GW_MAX: u32 = 6;
pub const MF_INSERT: u32 = 0;
pub const MF_CHANGE: u32 = 128;
pub const MF_APPEND: u32 = 256;
pub const MF_DELETE: u32 = 512;
pub const MF_REMOVE: u32 = 4096;
pub const MF_BYCOMMAND: u32 = 0;
pub const MF_BYPOSITION: u32 = 1024;
pub const MF_SEPARATOR: u32 = 2048;
pub const MF_ENABLED: u32 = 0;
pub const MF_GRAYED: u32 = 1;
pub const MF_DISABLED: u32 = 2;
pub const MF_UNCHECKED: u32 = 0;
pub const MF_CHECKED: u32 = 8;
pub const MF_USECHECKBITMAPS: u32 = 512;
pub const MF_STRING: u32 = 0;
pub const MF_BITMAP: u32 = 4;
pub const MF_OWNERDRAW: u32 = 256;
pub const MF_POPUP: u32 = 16;
pub const MF_MENUBARBREAK: u32 = 32;
pub const MF_MENUBREAK: u32 = 64;
pub const MF_UNHILITE: u32 = 0;
pub const MF_HILITE: u32 = 128;
pub const MF_DEFAULT: u32 = 4096;
pub const MF_SYSMENU: u32 = 8192;
pub const MF_HELP: u32 = 16384;
pub const MF_RIGHTJUSTIFY: u32 = 16384;
pub const MF_MOUSESELECT: u32 = 32768;
pub const MF_END: u32 = 128;
pub const MFT_STRING: u32 = 0;
pub const MFT_BITMAP: u32 = 4;
pub const MFT_MENUBARBREAK: u32 = 32;
pub const MFT_MENUBREAK: u32 = 64;
pub const MFT_OWNERDRAW: u32 = 256;
pub const MFT_RADIOCHECK: u32 = 512;
pub const MFT_SEPARATOR: u32 = 2048;
pub const MFT_RIGHTORDER: u32 = 8192;
pub const MFT_RIGHTJUSTIFY: u32 = 16384;
pub const MFS_GRAYED: u32 = 3;
pub const MFS_DISABLED: u32 = 3;
pub const MFS_CHECKED: u32 = 8;
pub const MFS_HILITE: u32 = 128;
pub const MFS_ENABLED: u32 = 0;
pub const MFS_UNCHECKED: u32 = 0;
pub const MFS_UNHILITE: u32 = 0;
pub const MFS_DEFAULT: u32 = 4096;
pub const SC_SIZE: u32 = 61440;
pub const SC_MOVE: u32 = 61456;
pub const SC_MINIMIZE: u32 = 61472;
pub const SC_MAXIMIZE: u32 = 61488;
pub const SC_NEXTWINDOW: u32 = 61504;
pub const SC_PREVWINDOW: u32 = 61520;
pub const SC_CLOSE: u32 = 61536;
pub const SC_VSCROLL: u32 = 61552;
pub const SC_HSCROLL: u32 = 61568;
pub const SC_MOUSEMENU: u32 = 61584;
pub const SC_KEYMENU: u32 = 61696;
pub const SC_ARRANGE: u32 = 61712;
pub const SC_RESTORE: u32 = 61728;
pub const SC_TASKLIST: u32 = 61744;
pub const SC_SCREENSAVE: u32 = 61760;
pub const SC_HOTKEY: u32 = 61776;
pub const SC_DEFAULT: u32 = 61792;
pub const SC_MONITORPOWER: u32 = 61808;
pub const SC_CONTEXTHELP: u32 = 61824;
pub const SC_SEPARATOR: u32 = 61455;
pub const SCF_ISSECURE: u32 = 1;
pub const SC_ICON: u32 = 61472;
pub const SC_ZOOM: u32 = 61488;
pub const CURSOR_CREATION_SCALING_NONE: u32 = 1;
pub const CURSOR_CREATION_SCALING_DEFAULT: u32 = 2;
pub const IMAGE_BITMAP: u32 = 0;
pub const IMAGE_ICON: u32 = 1;
pub const IMAGE_CURSOR: u32 = 2;
pub const IMAGE_ENHMETAFILE: u32 = 3;
pub const LR_DEFAULTCOLOR: u32 = 0;
pub const LR_MONOCHROME: u32 = 1;
pub const LR_COLOR: u32 = 2;
pub const LR_COPYRETURNORG: u32 = 4;
pub const LR_COPYDELETEORG: u32 = 8;
pub const LR_LOADFROMFILE: u32 = 16;
pub const LR_LOADTRANSPARENT: u32 = 32;
pub const LR_DEFAULTSIZE: u32 = 64;
pub const LR_VGACOLOR: u32 = 128;
pub const LR_LOADMAP3DCOLORS: u32 = 4096;
pub const LR_CREATEDIBSECTION: u32 = 8192;
pub const LR_COPYFROMRESOURCE: u32 = 16384;
pub const LR_SHARED: u32 = 32768;
pub const DI_MASK: u32 = 1;
pub const DI_IMAGE: u32 = 2;
pub const DI_NORMAL: u32 = 3;
pub const DI_COMPAT: u32 = 4;
pub const DI_DEFAULTSIZE: u32 = 8;
pub const DI_NOMIRROR: u32 = 16;
pub const RES_ICON: u32 = 1;
pub const RES_CURSOR: u32 = 2;
pub const ORD_LANGDRIVER: u32 = 1;
pub const IDOK: u32 = 1;
pub const IDCANCEL: u32 = 2;
pub const IDABORT: u32 = 3;
pub const IDRETRY: u32 = 4;
pub const IDIGNORE: u32 = 5;
pub const IDYES: u32 = 6;
pub const IDNO: u32 = 7;
pub const IDCLOSE: u32 = 8;
pub const IDHELP: u32 = 9;
pub const IDTRYAGAIN: u32 = 10;
pub const IDCONTINUE: u32 = 11;
pub const IDTIMEOUT: u32 = 32000;
pub const ES_LEFT: u32 = 0;
pub const ES_CENTER: u32 = 1;
pub const ES_RIGHT: u32 = 2;
pub const ES_MULTILINE: u32 = 4;
pub const ES_UPPERCASE: u32 = 8;
pub const ES_LOWERCASE: u32 = 16;
pub const ES_PASSWORD: u32 = 32;
pub const ES_AUTOVSCROLL: u32 = 64;
pub const ES_AUTOHSCROLL: u32 = 128;
pub const ES_NOHIDESEL: u32 = 256;
pub const ES_OEMCONVERT: u32 = 1024;
pub const ES_READONLY: u32 = 2048;
pub const ES_WANTRETURN: u32 = 4096;
pub const ES_NUMBER: u32 = 8192;
pub const EN_SETFOCUS: u32 = 256;
pub const EN_KILLFOCUS: u32 = 512;
pub const EN_CHANGE: u32 = 768;
pub const EN_UPDATE: u32 = 1024;
pub const EN_ERRSPACE: u32 = 1280;
pub const EN_MAXTEXT: u32 = 1281;
pub const EN_HSCROLL: u32 = 1537;
pub const EN_VSCROLL: u32 = 1538;
pub const EN_ALIGN_LTR_EC: u32 = 1792;
pub const EN_ALIGN_RTL_EC: u32 = 1793;
pub const EN_BEFORE_PASTE: u32 = 2048;
pub const EN_AFTER_PASTE: u32 = 2049;
pub const EC_LEFTMARGIN: u32 = 1;
pub const EC_RIGHTMARGIN: u32 = 2;
pub const EC_USEFONTINFO: u32 = 65535;
pub const EMSIS_COMPOSITIONSTRING: u32 = 1;
pub const EIMES_GETCOMPSTRATONCE: u32 = 1;
pub const EIMES_CANCELCOMPSTRINFOCUS: u32 = 2;
pub const EIMES_COMPLETECOMPSTRKILLFOCUS: u32 = 4;
pub const EM_GETSEL: u32 = 176;
pub const EM_SETSEL: u32 = 177;
pub const EM_GETRECT: u32 = 178;
pub const EM_SETRECT: u32 = 179;
pub const EM_SETRECTNP: u32 = 180;
pub const EM_SCROLL: u32 = 181;
pub const EM_LINESCROLL: u32 = 182;
pub const EM_SCROLLCARET: u32 = 183;
pub const EM_GETMODIFY: u32 = 184;
pub const EM_SETMODIFY: u32 = 185;
pub const EM_GETLINECOUNT: u32 = 186;
pub const EM_LINEINDEX: u32 = 187;
pub const EM_SETHANDLE: u32 = 188;
pub const EM_GETHANDLE: u32 = 189;
pub const EM_GETTHUMB: u32 = 190;
pub const EM_LINELENGTH: u32 = 193;
pub const EM_REPLACESEL: u32 = 194;
pub const EM_GETLINE: u32 = 196;
pub const EM_LIMITTEXT: u32 = 197;
pub const EM_CANUNDO: u32 = 198;
pub const EM_UNDO: u32 = 199;
pub const EM_FMTLINES: u32 = 200;
pub const EM_LINEFROMCHAR: u32 = 201;
pub const EM_SETTABSTOPS: u32 = 203;
pub const EM_SETPASSWORDCHAR: u32 = 204;
pub const EM_EMPTYUNDOBUFFER: u32 = 205;
pub const EM_GETFIRSTVISIBLELINE: u32 = 206;
pub const EM_SETREADONLY: u32 = 207;
pub const EM_SETWORDBREAKPROC: u32 = 208;
pub const EM_GETWORDBREAKPROC: u32 = 209;
pub const EM_GETPASSWORDCHAR: u32 = 210;
pub const EM_SETMARGINS: u32 = 211;
pub const EM_GETMARGINS: u32 = 212;
pub const EM_SETLIMITTEXT: u32 = 197;
pub const EM_GETLIMITTEXT: u32 = 213;
pub const EM_POSFROMCHAR: u32 = 214;
pub const EM_CHARFROMPOS: u32 = 215;
pub const EM_SETIMESTATUS: u32 = 216;
pub const EM_GETIMESTATUS: u32 = 217;
pub const EM_ENABLEFEATURE: u32 = 218;
pub const WB_LEFT: u32 = 0;
pub const WB_RIGHT: u32 = 1;
pub const WB_ISDELIMITER: u32 = 2;
pub const BS_PUSHBUTTON: u32 = 0;
pub const BS_DEFPUSHBUTTON: u32 = 1;
pub const BS_CHECKBOX: u32 = 2;
pub const BS_AUTOCHECKBOX: u32 = 3;
pub const BS_RADIOBUTTON: u32 = 4;
pub const BS_3STATE: u32 = 5;
pub const BS_AUTO3STATE: u32 = 6;
pub const BS_GROUPBOX: u32 = 7;
pub const BS_USERBUTTON: u32 = 8;
pub const BS_AUTORADIOBUTTON: u32 = 9;
pub const BS_PUSHBOX: u32 = 10;
pub const BS_OWNERDRAW: u32 = 11;
pub const BS_TYPEMASK: u32 = 15;
pub const BS_LEFTTEXT: u32 = 32;
pub const BS_TEXT: u32 = 0;
pub const BS_ICON: u32 = 64;
pub const BS_BITMAP: u32 = 128;
pub const BS_LEFT: u32 = 256;
pub const BS_RIGHT: u32 = 512;
pub const BS_CENTER: u32 = 768;
pub const BS_TOP: u32 = 1024;
pub const BS_BOTTOM: u32 = 2048;
pub const BS_VCENTER: u32 = 3072;
pub const BS_PUSHLIKE: u32 = 4096;
pub const BS_MULTILINE: u32 = 8192;
pub const BS_NOTIFY: u32 = 16384;
pub const BS_FLAT: u32 = 32768;
pub const BS_RIGHTBUTTON: u32 = 32;
pub const BN_CLICKED: u32 = 0;
pub const BN_PAINT: u32 = 1;
pub const BN_HILITE: u32 = 2;
pub const BN_UNHILITE: u32 = 3;
pub const BN_DISABLE: u32 = 4;
pub const BN_DOUBLECLICKED: u32 = 5;
pub const BN_PUSHED: u32 = 2;
pub const BN_UNPUSHED: u32 = 3;
pub const BN_DBLCLK: u32 = 5;
pub const BN_SETFOCUS: u32 = 6;
pub const BN_KILLFOCUS: u32 = 7;
pub const BM_GETCHECK: u32 = 240;
pub const BM_SETCHECK: u32 = 241;
pub const BM_GETSTATE: u32 = 242;
pub const BM_SETSTATE: u32 = 243;
pub const BM_SETSTYLE: u32 = 244;
pub const BM_CLICK: u32 = 245;
pub const BM_GETIMAGE: u32 = 246;
pub const BM_SETIMAGE: u32 = 247;
pub const BM_SETDONTCLICK: u32 = 248;
pub const BST_UNCHECKED: u32 = 0;
pub const BST_CHECKED: u32 = 1;
pub const BST_INDETERMINATE: u32 = 2;
pub const BST_PUSHED: u32 = 4;
pub const BST_FOCUS: u32 = 8;
pub const SS_LEFT: u32 = 0;
pub const SS_CENTER: u32 = 1;
pub const SS_RIGHT: u32 = 2;
pub const SS_ICON: u32 = 3;
pub const SS_BLACKRECT: u32 = 4;
pub const SS_GRAYRECT: u32 = 5;
pub const SS_WHITERECT: u32 = 6;
pub const SS_BLACKFRAME: u32 = 7;
pub const SS_GRAYFRAME: u32 = 8;
pub const SS_WHITEFRAME: u32 = 9;
pub const SS_USERITEM: u32 = 10;
pub const SS_SIMPLE: u32 = 11;
pub const SS_LEFTNOWORDWRAP: u32 = 12;
pub const SS_OWNERDRAW: u32 = 13;
pub const SS_BITMAP: u32 = 14;
pub const SS_ENHMETAFILE: u32 = 15;
pub const SS_ETCHEDHORZ: u32 = 16;
pub const SS_ETCHEDVERT: u32 = 17;
pub const SS_ETCHEDFRAME: u32 = 18;
pub const SS_TYPEMASK: u32 = 31;
pub const SS_REALSIZECONTROL: u32 = 64;
pub const SS_NOPREFIX: u32 = 128;
pub const SS_NOTIFY: u32 = 256;
pub const SS_CENTERIMAGE: u32 = 512;
pub const SS_RIGHTJUST: u32 = 1024;
pub const SS_REALSIZEIMAGE: u32 = 2048;
pub const SS_SUNKEN: u32 = 4096;
pub const SS_EDITCONTROL: u32 = 8192;
pub const SS_ENDELLIPSIS: u32 = 16384;
pub const SS_PATHELLIPSIS: u32 = 32768;
pub const SS_WORDELLIPSIS: u32 = 49152;
pub const SS_ELLIPSISMASK: u32 = 49152;
pub const STM_SETICON: u32 = 368;
pub const STM_GETICON: u32 = 369;
pub const STM_SETIMAGE: u32 = 370;
pub const STM_GETIMAGE: u32 = 371;
pub const STN_CLICKED: u32 = 0;
pub const STN_DBLCLK: u32 = 1;
pub const STN_ENABLE: u32 = 2;
pub const STN_DISABLE: u32 = 3;
pub const STM_MSGMAX: u32 = 372;
pub const DWL_MSGRESULT: u32 = 0;
pub const DWL_DLGPROC: u32 = 4;
pub const DWL_USER: u32 = 8;
pub const DWLP_MSGRESULT: u32 = 0;
pub const DDL_READWRITE: u32 = 0;
pub const DDL_READONLY: u32 = 1;
pub const DDL_HIDDEN: u32 = 2;
pub const DDL_SYSTEM: u32 = 4;
pub const DDL_DIRECTORY: u32 = 16;
pub const DDL_ARCHIVE: u32 = 32;
pub const DDL_POSTMSGS: u32 = 8192;
pub const DDL_DRIVES: u32 = 16384;
pub const DDL_EXCLUSIVE: u32 = 32768;
pub const DS_ABSALIGN: u32 = 1;
pub const DS_SYSMODAL: u32 = 2;
pub const DS_LOCALEDIT: u32 = 32;
pub const DS_SETFONT: u32 = 64;
pub const DS_MODALFRAME: u32 = 128;
pub const DS_NOIDLEMSG: u32 = 256;
pub const DS_SETFOREGROUND: u32 = 512;
pub const DS_3DLOOK: u32 = 4;
pub const DS_FIXEDSYS: u32 = 8;
pub const DS_NOFAILCREATE: u32 = 16;
pub const DS_CONTROL: u32 = 1024;
pub const DS_CENTER: u32 = 2048;
pub const DS_CENTERMOUSE: u32 = 4096;
pub const DS_CONTEXTHELP: u32 = 8192;
pub const DS_SHELLFONT: u32 = 72;
pub const DM_GETDEFID: u32 = 1024;
pub const DM_SETDEFID: u32 = 1025;
pub const DM_REPOSITION: u32 = 1026;
pub const DC_HASDEFID: u32 = 21323;
pub const DLGC_WANTARROWS: u32 = 1;
pub const DLGC_WANTTAB: u32 = 2;
pub const DLGC_WANTALLKEYS: u32 = 4;
pub const DLGC_WANTMESSAGE: u32 = 4;
pub const DLGC_HASSETSEL: u32 = 8;
pub const DLGC_DEFPUSHBUTTON: u32 = 16;
pub const DLGC_UNDEFPUSHBUTTON: u32 = 32;
pub const DLGC_RADIOBUTTON: u32 = 64;
pub const DLGC_WANTCHARS: u32 = 128;
pub const DLGC_STATIC: u32 = 256;
pub const DLGC_BUTTON: u32 = 8192;
pub const LB_CTLCODE: u32 = 0;
pub const LB_OKAY: u32 = 0;
pub const LB_ERR: i32 = -1;
pub const LB_ERRSPACE: i32 = -2;
pub const LBN_ERRSPACE: i32 = -2;
pub const LBN_SELCHANGE: u32 = 1;
pub const LBN_DBLCLK: u32 = 2;
pub const LBN_SELCANCEL: u32 = 3;
pub const LBN_SETFOCUS: u32 = 4;
pub const LBN_KILLFOCUS: u32 = 5;
pub const LB_ADDSTRING: u32 = 384;
pub const LB_INSERTSTRING: u32 = 385;
pub const LB_DELETESTRING: u32 = 386;
pub const LB_SELITEMRANGEEX: u32 = 387;
pub const LB_RESETCONTENT: u32 = 388;
pub const LB_SETSEL: u32 = 389;
pub const LB_SETCURSEL: u32 = 390;
pub const LB_GETSEL: u32 = 391;
pub const LB_GETCURSEL: u32 = 392;
pub const LB_GETTEXT: u32 = 393;
pub const LB_GETTEXTLEN: u32 = 394;
pub const LB_GETCOUNT: u32 = 395;
pub const LB_SELECTSTRING: u32 = 396;
pub const LB_DIR: u32 = 397;
pub const LB_GETTOPINDEX: u32 = 398;
pub const LB_FINDSTRING: u32 = 399;
pub const LB_GETSELCOUNT: u32 = 400;
pub const LB_GETSELITEMS: u32 = 401;
pub const LB_SETTABSTOPS: u32 = 402;
pub const LB_GETHORIZONTALEXTENT: u32 = 403;
pub const LB_SETHORIZONTALEXTENT: u32 = 404;
pub const LB_SETCOLUMNWIDTH: u32 = 405;
pub const LB_ADDFILE: u32 = 406;
pub const LB_SETTOPINDEX: u32 = 407;
pub const LB_GETITEMRECT: u32 = 408;
pub const LB_GETITEMDATA: u32 = 409;
pub const LB_SETITEMDATA: u32 = 410;
pub const LB_SELITEMRANGE: u32 = 411;
pub const LB_SETANCHORINDEX: u32 = 412;
pub const LB_GETANCHORINDEX: u32 = 413;
pub const LB_SETCARETINDEX: u32 = 414;
pub const LB_GETCARETINDEX: u32 = 415;
pub const LB_SETITEMHEIGHT: u32 = 416;
pub const LB_GETITEMHEIGHT: u32 = 417;
pub const LB_FINDSTRINGEXACT: u32 = 418;
pub const LB_SETLOCALE: u32 = 421;
pub const LB_GETLOCALE: u32 = 422;
pub const LB_SETCOUNT: u32 = 423;
pub const LB_INITSTORAGE: u32 = 424;
pub const LB_ITEMFROMPOINT: u32 = 425;
pub const LB_GETLISTBOXINFO: u32 = 434;
pub const LB_MSGMAX: u32 = 435;
pub const LBS_NOTIFY: u32 = 1;
pub const LBS_SORT: u32 = 2;
pub const LBS_NOREDRAW: u32 = 4;
pub const LBS_MULTIPLESEL: u32 = 8;
pub const LBS_OWNERDRAWFIXED: u32 = 16;
pub const LBS_OWNERDRAWVARIABLE: u32 = 32;
pub const LBS_HASSTRINGS: u32 = 64;
pub const LBS_USETABSTOPS: u32 = 128;
pub const LBS_NOINTEGRALHEIGHT: u32 = 256;
pub const LBS_MULTICOLUMN: u32 = 512;
pub const LBS_WANTKEYBOARDINPUT: u32 = 1024;
pub const LBS_EXTENDEDSEL: u32 = 2048;
pub const LBS_DISABLENOSCROLL: u32 = 4096;
pub const LBS_NODATA: u32 = 8192;
pub const LBS_NOSEL: u32 = 16384;
pub const LBS_COMBOBOX: u32 = 32768;
pub const LBS_STANDARD: u32 = 10485763;
pub const CB_OKAY: u32 = 0;
pub const CB_ERR: i32 = -1;
pub const CB_ERRSPACE: i32 = -2;
pub const CBN_ERRSPACE: i32 = -1;
pub const CBN_SELCHANGE: u32 = 1;
pub const CBN_DBLCLK: u32 = 2;
pub const CBN_SETFOCUS: u32 = 3;
pub const CBN_KILLFOCUS: u32 = 4;
pub const CBN_EDITCHANGE: u32 = 5;
pub const CBN_EDITUPDATE: u32 = 6;
pub const CBN_DROPDOWN: u32 = 7;
pub const CBN_CLOSEUP: u32 = 8;
pub const CBN_SELENDOK: u32 = 9;
pub const CBN_SELENDCANCEL: u32 = 10;
pub const CBS_SIMPLE: u32 = 1;
pub const CBS_DROPDOWN: u32 = 2;
pub const CBS_DROPDOWNLIST: u32 = 3;
pub const CBS_OWNERDRAWFIXED: u32 = 16;
pub const CBS_OWNERDRAWVARIABLE: u32 = 32;
pub const CBS_AUTOHSCROLL: u32 = 64;
pub const CBS_OEMCONVERT: u32 = 128;
pub const CBS_SORT: u32 = 256;
pub const CBS_HASSTRINGS: u32 = 512;
pub const CBS_NOINTEGRALHEIGHT: u32 = 1024;
pub const CBS_DISABLENOSCROLL: u32 = 2048;
pub const CBS_UPPERCASE: u32 = 8192;
pub const CBS_LOWERCASE: u32 = 16384;
pub const CB_GETEDITSEL: u32 = 320;
pub const CB_LIMITTEXT: u32 = 321;
pub const CB_SETEDITSEL: u32 = 322;
pub const CB_ADDSTRING: u32 = 323;
pub const CB_DELETESTRING: u32 = 324;
pub const CB_DIR: u32 = 325;
pub const CB_GETCOUNT: u32 = 326;
pub const CB_GETCURSEL: u32 = 327;
pub const CB_GETLBTEXT: u32 = 328;
pub const CB_GETLBTEXTLEN: u32 = 329;
pub const CB_INSERTSTRING: u32 = 330;
pub const CB_RESETCONTENT: u32 = 331;
pub const CB_FINDSTRING: u32 = 332;
pub const CB_SELECTSTRING: u32 = 333;
pub const CB_SETCURSEL: u32 = 334;
pub const CB_SHOWDROPDOWN: u32 = 335;
pub const CB_GETITEMDATA: u32 = 336;
pub const CB_SETITEMDATA: u32 = 337;
pub const CB_GETDROPPEDCONTROLRECT: u32 = 338;
pub const CB_SETITEMHEIGHT: u32 = 339;
pub const CB_GETITEMHEIGHT: u32 = 340;
pub const CB_SETEXTENDEDUI: u32 = 341;
pub const CB_GETEXTENDEDUI: u32 = 342;
pub const CB_GETDROPPEDSTATE: u32 = 343;
pub const CB_FINDSTRINGEXACT: u32 = 344;
pub const CB_SETLOCALE: u32 = 345;
pub const CB_GETLOCALE: u32 = 346;
pub const CB_GETTOPINDEX: u32 = 347;
pub const CB_SETTOPINDEX: u32 = 348;
pub const CB_GETHORIZONTALEXTENT: u32 = 349;
pub const CB_SETHORIZONTALEXTENT: u32 = 350;
pub const CB_GETDROPPEDWIDTH: u32 = 351;
pub const CB_SETDROPPEDWIDTH: u32 = 352;
pub const CB_INITSTORAGE: u32 = 353;
pub const CB_GETCOMBOBOXINFO: u32 = 356;
pub const CB_MSGMAX: u32 = 357;
pub const SBS_HORZ: u32 = 0;
pub const SBS_VERT: u32 = 1;
pub const SBS_TOPALIGN: u32 = 2;
pub const SBS_LEFTALIGN: u32 = 2;
pub const SBS_BOTTOMALIGN: u32 = 4;
pub const SBS_RIGHTALIGN: u32 = 4;
pub const SBS_SIZEBOXTOPLEFTALIGN: u32 = 2;
pub const SBS_SIZEBOXBOTTOMRIGHTALIGN: u32 = 4;
pub const SBS_SIZEBOX: u32 = 8;
pub const SBS_SIZEGRIP: u32 = 16;
pub const SBM_SETPOS: u32 = 224;
pub const SBM_GETPOS: u32 = 225;
pub const SBM_SETRANGE: u32 = 226;
pub const SBM_SETRANGEREDRAW: u32 = 230;
pub const SBM_GETRANGE: u32 = 227;
pub const SBM_ENABLE_ARROWS: u32 = 228;
pub const SBM_SETSCROLLINFO: u32 = 233;
pub const SBM_GETSCROLLINFO: u32 = 234;
pub const SBM_GETSCROLLBARINFO: u32 = 235;
pub const SIF_RANGE: u32 = 1;
pub const SIF_PAGE: u32 = 2;
pub const SIF_POS: u32 = 4;
pub const SIF_DISABLENOSCROLL: u32 = 8;
pub const SIF_TRACKPOS: u32 = 16;
pub const SIF_ALL: u32 = 23;
pub const MDIS_ALLCHILDSTYLES: u32 = 1;
pub const MDITILE_VERTICAL: u32 = 0;
pub const MDITILE_HORIZONTAL: u32 = 1;
pub const MDITILE_SKIPDISABLED: u32 = 2;
pub const MDITILE_ZORDER: u32 = 4;
pub const HELP_CONTEXT: u32 = 1;
pub const HELP_QUIT: u32 = 2;
pub const HELP_INDEX: u32 = 3;
pub const HELP_CONTENTS: u32 = 3;
pub const HELP_HELPONHELP: u32 = 4;
pub const HELP_SETINDEX: u32 = 5;
pub const HELP_SETCONTENTS: u32 = 5;
pub const HELP_CONTEXTPOPUP: u32 = 8;
pub const HELP_FORCEFILE: u32 = 9;
pub const HELP_KEY: u32 = 257;
pub const HELP_COMMAND: u32 = 258;
pub const HELP_PARTIALKEY: u32 = 261;
pub const HELP_MULTIKEY: u32 = 513;
pub const HELP_SETWINPOS: u32 = 515;
pub const HELP_CONTEXTMENU: u32 = 10;
pub const HELP_FINDER: u32 = 11;
pub const HELP_WM_HELP: u32 = 12;
pub const HELP_SETPOPUP_POS: u32 = 13;
pub const HELP_TCARD: u32 = 32768;
pub const HELP_TCARD_DATA: u32 = 16;
pub const HELP_TCARD_OTHER_CALLER: u32 = 17;
pub const IDH_NO_HELP: u32 = 28440;
pub const IDH_MISSING_CONTEXT: u32 = 28441;
pub const IDH_GENERIC_HELP_BUTTON: u32 = 28442;
pub const IDH_OK: u32 = 28443;
pub const IDH_CANCEL: u32 = 28444;
pub const IDH_HELP: u32 = 28445;
pub const GR_GDIOBJECTS: u32 = 0;
pub const GR_USEROBJECTS: u32 = 1;
pub const GR_GDIOBJECTS_PEAK: u32 = 2;
pub const GR_USEROBJECTS_PEAK: u32 = 4;
pub const SPI_GETBEEP: u32 = 1;
pub const SPI_SETBEEP: u32 = 2;
pub const SPI_GETMOUSE: u32 = 3;
pub const SPI_SETMOUSE: u32 = 4;
pub const SPI_GETBORDER: u32 = 5;
pub const SPI_SETBORDER: u32 = 6;
pub const SPI_GETKEYBOARDSPEED: u32 = 10;
pub const SPI_SETKEYBOARDSPEED: u32 = 11;
pub const SPI_LANGDRIVER: u32 = 12;
pub const SPI_ICONHORIZONTALSPACING: u32 = 13;
pub const SPI_GETSCREENSAVETIMEOUT: u32 = 14;
pub const SPI_SETSCREENSAVETIMEOUT: u32 = 15;
pub const SPI_GETSCREENSAVEACTIVE: u32 = 16;
pub const SPI_SETSCREENSAVEACTIVE: u32 = 17;
pub const SPI_GETGRIDGRANULARITY: u32 = 18;
pub const SPI_SETGRIDGRANULARITY: u32 = 19;
pub const SPI_SETDESKWALLPAPER: u32 = 20;
pub const SPI_SETDESKPATTERN: u32 = 21;
pub const SPI_GETKEYBOARDDELAY: u32 = 22;
pub const SPI_SETKEYBOARDDELAY: u32 = 23;
pub const SPI_ICONVERTICALSPACING: u32 = 24;
pub const SPI_GETICONTITLEWRAP: u32 = 25;
pub const SPI_SETICONTITLEWRAP: u32 = 26;
pub const SPI_GETMENUDROPALIGNMENT: u32 = 27;
pub const SPI_SETMENUDROPALIGNMENT: u32 = 28;
pub const SPI_SETDOUBLECLKWIDTH: u32 = 29;
pub const SPI_SETDOUBLECLKHEIGHT: u32 = 30;
pub const SPI_GETICONTITLELOGFONT: u32 = 31;
pub const SPI_SETDOUBLECLICKTIME: u32 = 32;
pub const SPI_SETMOUSEBUTTONSWAP: u32 = 33;
pub const SPI_SETICONTITLELOGFONT: u32 = 34;
pub const SPI_GETFASTTASKSWITCH: u32 = 35;
pub const SPI_SETFASTTASKSWITCH: u32 = 36;
pub const SPI_SETDRAGFULLWINDOWS: u32 = 37;
pub const SPI_GETDRAGFULLWINDOWS: u32 = 38;
pub const SPI_GETNONCLIENTMETRICS: u32 = 41;
pub const SPI_SETNONCLIENTMETRICS: u32 = 42;
pub const SPI_GETMINIMIZEDMETRICS: u32 = 43;
pub const SPI_SETMINIMIZEDMETRICS: u32 = 44;
pub const SPI_GETICONMETRICS: u32 = 45;
pub const SPI_SETICONMETRICS: u32 = 46;
pub const SPI_SETWORKAREA: u32 = 47;
pub const SPI_GETWORKAREA: u32 = 48;
pub const SPI_SETPENWINDOWS: u32 = 49;
pub const SPI_GETHIGHCONTRAST: u32 = 66;
pub const SPI_SETHIGHCONTRAST: u32 = 67;
pub const SPI_GETKEYBOARDPREF: u32 = 68;
pub const SPI_SETKEYBOARDPREF: u32 = 69;
pub const SPI_GETSCREENREADER: u32 = 70;
pub const SPI_SETSCREENREADER: u32 = 71;
pub const SPI_GETANIMATION: u32 = 72;
pub const SPI_SETANIMATION: u32 = 73;
pub const SPI_GETFONTSMOOTHING: u32 = 74;
pub const SPI_SETFONTSMOOTHING: u32 = 75;
pub const SPI_SETDRAGWIDTH: u32 = 76;
pub const SPI_SETDRAGHEIGHT: u32 = 77;
pub const SPI_SETHANDHELD: u32 = 78;
pub const SPI_GETLOWPOWERTIMEOUT: u32 = 79;
pub const SPI_GETPOWEROFFTIMEOUT: u32 = 80;
pub const SPI_SETLOWPOWERTIMEOUT: u32 = 81;
pub const SPI_SETPOWEROFFTIMEOUT: u32 = 82;
pub const SPI_GETLOWPOWERACTIVE: u32 = 83;
pub const SPI_GETPOWEROFFACTIVE: u32 = 84;
pub const SPI_SETLOWPOWERACTIVE: u32 = 85;
pub const SPI_SETPOWEROFFACTIVE: u32 = 86;
pub const SPI_SETCURSORS: u32 = 87;
pub const SPI_SETICONS: u32 = 88;
pub const SPI_GETDEFAULTINPUTLANG: u32 = 89;
pub const SPI_SETDEFAULTINPUTLANG: u32 = 90;
pub const SPI_SETLANGTOGGLE: u32 = 91;
pub const SPI_GETWINDOWSEXTENSION: u32 = 92;
pub const SPI_SETMOUSETRAILS: u32 = 93;
pub const SPI_GETMOUSETRAILS: u32 = 94;
pub const SPI_SETSCREENSAVERRUNNING: u32 = 97;
pub const SPI_SCREENSAVERRUNNING: u32 = 97;
pub const SPI_GETFILTERKEYS: u32 = 50;
pub const SPI_SETFILTERKEYS: u32 = 51;
pub const SPI_GETTOGGLEKEYS: u32 = 52;
pub const SPI_SETTOGGLEKEYS: u32 = 53;
pub const SPI_GETMOUSEKEYS: u32 = 54;
pub const SPI_SETMOUSEKEYS: u32 = 55;
pub const SPI_GETSHOWSOUNDS: u32 = 56;
pub const SPI_SETSHOWSOUNDS: u32 = 57;
pub const SPI_GETSTICKYKEYS: u32 = 58;
pub const SPI_SETSTICKYKEYS: u32 = 59;
pub const SPI_GETACCESSTIMEOUT: u32 = 60;
pub const SPI_SETACCESSTIMEOUT: u32 = 61;
pub const SPI_GETSERIALKEYS: u32 = 62;
pub const SPI_SETSERIALKEYS: u32 = 63;
pub const SPI_GETSOUNDSENTRY: u32 = 64;
pub const SPI_SETSOUNDSENTRY: u32 = 65;
pub const SPI_GETSNAPTODEFBUTTON: u32 = 95;
pub const SPI_SETSNAPTODEFBUTTON: u32 = 96;
pub const SPI_GETMOUSEHOVERWIDTH: u32 = 98;
pub const SPI_SETMOUSEHOVERWIDTH: u32 = 99;
pub const SPI_GETMOUSEHOVERHEIGHT: u32 = 100;
pub const SPI_SETMOUSEHOVERHEIGHT: u32 = 101;
pub const SPI_GETMOUSEHOVERTIME: u32 = 102;
pub const SPI_SETMOUSEHOVERTIME: u32 = 103;
pub const SPI_GETWHEELSCROLLLINES: u32 = 104;
pub const SPI_SETWHEELSCROLLLINES: u32 = 105;
pub const SPI_GETMENUSHOWDELAY: u32 = 106;
pub const SPI_SETMENUSHOWDELAY: u32 = 107;
pub const SPI_GETWHEELSCROLLCHARS: u32 = 108;
pub const SPI_SETWHEELSCROLLCHARS: u32 = 109;
pub const SPI_GETSHOWIMEUI: u32 = 110;
pub const SPI_SETSHOWIMEUI: u32 = 111;
pub const SPI_GETMOUSESPEED: u32 = 112;
pub const SPI_SETMOUSESPEED: u32 = 113;
pub const SPI_GETSCREENSAVERRUNNING: u32 = 114;
pub const SPI_GETDESKWALLPAPER: u32 = 115;
pub const SPI_GETAUDIODESCRIPTION: u32 = 116;
pub const SPI_SETAUDIODESCRIPTION: u32 = 117;
pub const SPI_GETSCREENSAVESECURE: u32 = 118;
pub const SPI_SETSCREENSAVESECURE: u32 = 119;
pub const SPI_GETHUNGAPPTIMEOUT: u32 = 120;
pub const SPI_SETHUNGAPPTIMEOUT: u32 = 121;
pub const SPI_GETWAITTOKILLTIMEOUT: u32 = 122;
pub const SPI_SETWAITTOKILLTIMEOUT: u32 = 123;
pub const SPI_GETWAITTOKILLSERVICETIMEOUT: u32 = 124;
pub const SPI_SETWAITTOKILLSERVICETIMEOUT: u32 = 125;
pub const SPI_GETMOUSEDOCKTHRESHOLD: u32 = 126;
pub const SPI_SETMOUSEDOCKTHRESHOLD: u32 = 127;
pub const SPI_GETPENDOCKTHRESHOLD: u32 = 128;
pub const SPI_SETPENDOCKTHRESHOLD: u32 = 129;
pub const SPI_GETWINARRANGING: u32 = 130;
pub const SPI_SETWINARRANGING: u32 = 131;
pub const SPI_GETMOUSEDRAGOUTTHRESHOLD: u32 = 132;
pub const SPI_SETMOUSEDRAGOUTTHRESHOLD: u32 = 133;
pub const SPI_GETPENDRAGOUTTHRESHOLD: u32 = 134;
pub const SPI_SETPENDRAGOUTTHRESHOLD: u32 = 135;
pub const SPI_GETMOUSESIDEMOVETHRESHOLD: u32 = 136;
pub const SPI_SETMOUSESIDEMOVETHRESHOLD: u32 = 137;
pub const SPI_GETPENSIDEMOVETHRESHOLD: u32 = 138;
pub const SPI_SETPENSIDEMOVETHRESHOLD: u32 = 139;
pub const SPI_GETDRAGFROMMAXIMIZE: u32 = 140;
pub const SPI_SETDRAGFROMMAXIMIZE: u32 = 141;
pub const SPI_GETSNAPSIZING: u32 = 142;
pub const SPI_SETSNAPSIZING: u32 = 143;
pub const SPI_GETDOCKMOVING: u32 = 144;
pub const SPI_SETDOCKMOVING: u32 = 145;
pub const MAX_TOUCH_PREDICTION_FILTER_TAPS: u32 = 3;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY: u32 = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME: u32 = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP: u32 = 1;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA: f64 = 0.001;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN: f64 = 0.9;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX: f64 = 0.999;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE: f64 = 0.001;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA: f64 = 0.99;
pub const SPI_GETTOUCHPREDICTIONPARAMETERS: u32 = 156;
pub const SPI_SETTOUCHPREDICTIONPARAMETERS: u32 = 157;
pub const MAX_LOGICALDPIOVERRIDE: u32 = 2;
pub const MIN_LOGICALDPIOVERRIDE: i32 = -2;
pub const SPI_GETLOGICALDPIOVERRIDE: u32 = 158;
pub const SPI_SETLOGICALDPIOVERRIDE: u32 = 159;
pub const SPI_GETMENURECT: u32 = 162;
pub const SPI_SETMENURECT: u32 = 163;
pub const SPI_GETTOUCHPADPARAMETERS: u32 = 174;
pub const SPI_SETTOUCHPADPARAMETERS: u32 = 175;
pub const SPI_GETACTIVEWINDOWTRACKING: u32 = 4096;
pub const SPI_SETACTIVEWINDOWTRACKING: u32 = 4097;
pub const SPI_GETMENUANIMATION: u32 = 4098;
pub const SPI_SETMENUANIMATION: u32 = 4099;
pub const SPI_GETCOMBOBOXANIMATION: u32 = 4100;
pub const SPI_SETCOMBOBOXANIMATION: u32 = 4101;
pub const SPI_GETLISTBOXSMOOTHSCROLLING: u32 = 4102;
pub const SPI_SETLISTBOXSMOOTHSCROLLING: u32 = 4103;
pub const SPI_GETGRADIENTCAPTIONS: u32 = 4104;
pub const SPI_SETGRADIENTCAPTIONS: u32 = 4105;
pub const SPI_GETKEYBOARDCUES: u32 = 4106;
pub const SPI_SETKEYBOARDCUES: u32 = 4107;
pub const SPI_GETMENUUNDERLINES: u32 = 4106;
pub const SPI_SETMENUUNDERLINES: u32 = 4107;
pub const SPI_GETACTIVEWNDTRKZORDER: u32 = 4108;
pub const SPI_SETACTIVEWNDTRKZORDER: u32 = 4109;
pub const SPI_GETHOTTRACKING: u32 = 4110;
pub const SPI_SETHOTTRACKING: u32 = 4111;
pub const SPI_GETMENUFADE: u32 = 4114;
pub const SPI_SETMENUFADE: u32 = 4115;
pub const SPI_GETSELECTIONFADE: u32 = 4116;
pub const SPI_SETSELECTIONFADE: u32 = 4117;
pub const SPI_GETTOOLTIPANIMATION: u32 = 4118;
pub const SPI_SETTOOLTIPANIMATION: u32 = 4119;
pub const SPI_GETTOOLTIPFADE: u32 = 4120;
pub const SPI_SETTOOLTIPFADE: u32 = 4121;
pub const SPI_GETCURSORSHADOW: u32 = 4122;
pub const SPI_SETCURSORSHADOW: u32 = 4123;
pub const SPI_GETMOUSESONAR: u32 = 4124;
pub const SPI_SETMOUSESONAR: u32 = 4125;
pub const SPI_GETMOUSECLICKLOCK: u32 = 4126;
pub const SPI_SETMOUSECLICKLOCK: u32 = 4127;
pub const SPI_GETMOUSEVANISH: u32 = 4128;
pub const SPI_SETMOUSEVANISH: u32 = 4129;
pub const SPI_GETFLATMENU: u32 = 4130;
pub const SPI_SETFLATMENU: u32 = 4131;
pub const SPI_GETDROPSHADOW: u32 = 4132;
pub const SPI_SETDROPSHADOW: u32 = 4133;
pub const SPI_GETBLOCKSENDINPUTRESETS: u32 = 4134;
pub const SPI_SETBLOCKSENDINPUTRESETS: u32 = 4135;
pub const SPI_GETUIEFFECTS: u32 = 4158;
pub const SPI_SETUIEFFECTS: u32 = 4159;
pub const SPI_GETDISABLEOVERLAPPEDCONTENT: u32 = 4160;
pub const SPI_SETDISABLEOVERLAPPEDCONTENT: u32 = 4161;
pub const SPI_GETCLIENTAREAANIMATION: u32 = 4162;
pub const SPI_SETCLIENTAREAANIMATION: u32 = 4163;
pub const SPI_GETCLEARTYPE: u32 = 4168;
pub const SPI_SETCLEARTYPE: u32 = 4169;
pub const SPI_GETSPEECHRECOGNITION: u32 = 4170;
pub const SPI_SETSPEECHRECOGNITION: u32 = 4171;
pub const SPI_GETCARETBROWSING: u32 = 4172;
pub const SPI_SETCARETBROWSING: u32 = 4173;
pub const SPI_GETTHREADLOCALINPUTSETTINGS: u32 = 4174;
pub const SPI_SETTHREADLOCALINPUTSETTINGS: u32 = 4175;
pub const SPI_GETSYSTEMLANGUAGEBAR: u32 = 4176;
pub const SPI_SETSYSTEMLANGUAGEBAR: u32 = 4177;
pub const SPI_GETFOREGROUNDLOCKTIMEOUT: u32 = 8192;
pub const SPI_SETFOREGROUNDLOCKTIMEOUT: u32 = 8193;
pub const SPI_GETACTIVEWNDTRKTIMEOUT: u32 = 8194;
pub const SPI_SETACTIVEWNDTRKTIMEOUT: u32 = 8195;
pub const SPI_GETFOREGROUNDFLASHCOUNT: u32 = 8196;
pub const SPI_SETFOREGROUNDFLASHCOUNT: u32 = 8197;
pub const SPI_GETCARETWIDTH: u32 = 8198;
pub const SPI_SETCARETWIDTH: u32 = 8199;
pub const SPI_GETMOUSECLICKLOCKTIME: u32 = 8200;
pub const SPI_SETMOUSECLICKLOCKTIME: u32 = 8201;
pub const SPI_GETFONTSMOOTHINGTYPE: u32 = 8202;
pub const SPI_SETFONTSMOOTHINGTYPE: u32 = 8203;
pub const FE_FONTSMOOTHINGSTANDARD: u32 = 1;
pub const FE_FONTSMOOTHINGCLEARTYPE: u32 = 2;
pub const SPI_GETFONTSMOOTHINGCONTRAST: u32 = 8204;
pub const SPI_SETFONTSMOOTHINGCONTRAST: u32 = 8205;
pub const SPI_GETFOCUSBORDERWIDTH: u32 = 8206;
pub const SPI_SETFOCUSBORDERWIDTH: u32 = 8207;
pub const SPI_GETFOCUSBORDERHEIGHT: u32 = 8208;
pub const SPI_SETFOCUSBORDERHEIGHT: u32 = 8209;
pub const SPI_GETFONTSMOOTHINGORIENTATION: u32 = 8210;
pub const SPI_SETFONTSMOOTHINGORIENTATION: u32 = 8211;
pub const FE_FONTSMOOTHINGORIENTATIONBGR: u32 = 0;
pub const FE_FONTSMOOTHINGORIENTATIONRGB: u32 = 1;
pub const SPI_GETMINIMUMHITRADIUS: u32 = 8212;
pub const SPI_SETMINIMUMHITRADIUS: u32 = 8213;
pub const SPI_GETMESSAGEDURATION: u32 = 8214;
pub const SPI_SETMESSAGEDURATION: u32 = 8215;
pub const SPI_GETCONTACTVISUALIZATION: u32 = 8216;
pub const SPI_SETCONTACTVISUALIZATION: u32 = 8217;
pub const CONTACTVISUALIZATION_OFF: u32 = 0;
pub const CONTACTVISUALIZATION_ON: u32 = 1;
pub const CONTACTVISUALIZATION_PRESENTATIONMODE: u32 = 2;
pub const SPI_GETGESTUREVISUALIZATION: u32 = 8218;
pub const SPI_SETGESTUREVISUALIZATION: u32 = 8219;
pub const GESTUREVISUALIZATION_OFF: u32 = 0;
pub const GESTUREVISUALIZATION_ON: u32 = 31;
pub const GESTUREVISUALIZATION_TAP: u32 = 1;
pub const GESTUREVISUALIZATION_DOUBLETAP: u32 = 2;
pub const GESTUREVISUALIZATION_PRESSANDTAP: u32 = 4;
pub const GESTUREVISUALIZATION_PRESSANDHOLD: u32 = 8;
pub const GESTUREVISUALIZATION_RIGHTTAP: u32 = 16;
pub const SPI_GETMOUSEWHEELROUTING: u32 = 8220;
pub const SPI_SETMOUSEWHEELROUTING: u32 = 8221;
pub const MOUSEWHEEL_ROUTING_FOCUS: u32 = 0;
pub const MOUSEWHEEL_ROUTING_HYBRID: u32 = 1;
pub const MOUSEWHEEL_ROUTING_MOUSE_POS: u32 = 2;
pub const SPI_GETPENVISUALIZATION: u32 = 8222;
pub const SPI_SETPENVISUALIZATION: u32 = 8223;
pub const PENVISUALIZATION_ON: u32 = 35;
pub const PENVISUALIZATION_OFF: u32 = 0;
pub const PENVISUALIZATION_TAP: u32 = 1;
pub const PENVISUALIZATION_DOUBLETAP: u32 = 2;
pub const PENVISUALIZATION_CURSOR: u32 = 32;
pub const SPI_GETPENARBITRATIONTYPE: u32 = 8224;
pub const SPI_SETPENARBITRATIONTYPE: u32 = 8225;
pub const PENARBITRATIONTYPE_NONE: u32 = 0;
pub const PENARBITRATIONTYPE_WIN8: u32 = 1;
pub const PENARBITRATIONTYPE_FIS: u32 = 2;
pub const PENARBITRATIONTYPE_SPT: u32 = 3;
pub const PENARBITRATIONTYPE_MAX: u32 = 4;
pub const SPI_GETCARETTIMEOUT: u32 = 8226;
pub const SPI_SETCARETTIMEOUT: u32 = 8227;
pub const SPI_GETHANDEDNESS: u32 = 8228;
pub const SPI_SETHANDEDNESS: u32 = 8229;
pub const SPIF_UPDATEINIFILE: u32 = 1;
pub const SPIF_SENDWININICHANGE: u32 = 2;
pub const SPIF_SENDCHANGE: u32 = 2;
pub const METRICS_USEDEFAULT: i32 = -1;
pub const ARW_BOTTOMLEFT: u32 = 0;
pub const ARW_BOTTOMRIGHT: u32 = 1;
pub const ARW_TOPLEFT: u32 = 2;
pub const ARW_TOPRIGHT: u32 = 3;
pub const ARW_STARTMASK: u32 = 3;
pub const ARW_STARTRIGHT: u32 = 1;
pub const ARW_STARTTOP: u32 = 2;
pub const ARW_LEFT: u32 = 0;
pub const ARW_RIGHT: u32 = 0;
pub const ARW_UP: u32 = 4;
pub const ARW_DOWN: u32 = 4;
pub const ARW_HIDE: u32 = 8;
pub const SERKF_SERIALKEYSON: u32 = 1;
pub const SERKF_AVAILABLE: u32 = 2;
pub const SERKF_INDICATOR: u32 = 4;
pub const HCF_HIGHCONTRASTON: u32 = 1;
pub const HCF_AVAILABLE: u32 = 2;
pub const HCF_HOTKEYACTIVE: u32 = 4;
pub const HCF_CONFIRMHOTKEY: u32 = 8;
pub const HCF_HOTKEYSOUND: u32 = 16;
pub const HCF_INDICATOR: u32 = 32;
pub const HCF_HOTKEYAVAILABLE: u32 = 64;
pub const HCF_LOGONDESKTOP: u32 = 256;
pub const HCF_DEFAULTDESKTOP: u32 = 512;
pub const HCF_OPTION_NOTHEMECHANGE: u32 = 4096;
pub const CDS_UPDATEREGISTRY: u32 = 1;
pub const CDS_TEST: u32 = 2;
pub const CDS_FULLSCREEN: u32 = 4;
pub const CDS_GLOBAL: u32 = 8;
pub const CDS_SET_PRIMARY: u32 = 16;
pub const CDS_VIDEOPARAMETERS: u32 = 32;
pub const CDS_ENABLE_UNSAFE_MODES: u32 = 256;
pub const CDS_DISABLE_UNSAFE_MODES: u32 = 512;
pub const CDS_RESET: u32 = 1073741824;
pub const CDS_RESET_EX: u32 = 536870912;
pub const CDS_NORESET: u32 = 268435456;
pub const VP_COMMAND_GET: u32 = 1;
pub const VP_COMMAND_SET: u32 = 2;
pub const VP_FLAGS_TV_MODE: u32 = 1;
pub const VP_FLAGS_TV_STANDARD: u32 = 2;
pub const VP_FLAGS_FLICKER: u32 = 4;
pub const VP_FLAGS_OVERSCAN: u32 = 8;
pub const VP_FLAGS_MAX_UNSCALED: u32 = 16;
pub const VP_FLAGS_POSITION: u32 = 32;
pub const VP_FLAGS_BRIGHTNESS: u32 = 64;
pub const VP_FLAGS_CONTRAST: u32 = 128;
pub const VP_FLAGS_COPYPROTECT: u32 = 256;
pub const VP_MODE_WIN_GRAPHICS: u32 = 1;
pub const VP_MODE_TV_PLAYBACK: u32 = 2;
pub const VP_TV_STANDARD_NTSC_M: u32 = 1;
pub const VP_TV_STANDARD_NTSC_M_J: u32 = 2;
pub const VP_TV_STANDARD_PAL_B: u32 = 4;
pub const VP_TV_STANDARD_PAL_D: u32 = 8;
pub const VP_TV_STANDARD_PAL_H: u32 = 16;
pub const VP_TV_STANDARD_PAL_I: u32 = 32;
pub const VP_TV_STANDARD_PAL_M: u32 = 64;
pub const VP_TV_STANDARD_PAL_N: u32 = 128;
pub const VP_TV_STANDARD_SECAM_B: u32 = 256;
pub const VP_TV_STANDARD_SECAM_D: u32 = 512;
pub const VP_TV_STANDARD_SECAM_G: u32 = 1024;
pub const VP_TV_STANDARD_SECAM_H: u32 = 2048;
pub const VP_TV_STANDARD_SECAM_K: u32 = 4096;
pub const VP_TV_STANDARD_SECAM_K1: u32 = 8192;
pub const VP_TV_STANDARD_SECAM_L: u32 = 16384;
pub const VP_TV_STANDARD_WIN_VGA: u32 = 32768;
pub const VP_TV_STANDARD_NTSC_433: u32 = 65536;
pub const VP_TV_STANDARD_PAL_G: u32 = 131072;
pub const VP_TV_STANDARD_PAL_60: u32 = 262144;
pub const VP_TV_STANDARD_SECAM_L1: u32 = 524288;
pub const VP_CP_TYPE_APS_TRIGGER: u32 = 1;
pub const VP_CP_TYPE_MACROVISION: u32 = 2;
pub const VP_CP_CMD_ACTIVATE: u32 = 1;
pub const VP_CP_CMD_DEACTIVATE: u32 = 2;
pub const VP_CP_CMD_CHANGE: u32 = 4;
pub const DISP_CHANGE_SUCCESSFUL: u32 = 0;
pub const DISP_CHANGE_RESTART: u32 = 1;
pub const DISP_CHANGE_FAILED: i32 = -1;
pub const DISP_CHANGE_BADMODE: i32 = -2;
pub const DISP_CHANGE_NOTUPDATED: i32 = -3;
pub const DISP_CHANGE_BADFLAGS: i32 = -4;
pub const DISP_CHANGE_BADPARAM: i32 = -5;
pub const DISP_CHANGE_BADDUALVIEW: i32 = -6;
pub const EDS_RAWMODE: u32 = 2;
pub const EDS_ROTATEDMODE: u32 = 4;
pub const EDD_GET_DEVICE_INTERFACE_NAME: u32 = 1;
pub const FKF_FILTERKEYSON: u32 = 1;
pub const FKF_AVAILABLE: u32 = 2;
pub const FKF_HOTKEYACTIVE: u32 = 4;
pub const FKF_CONFIRMHOTKEY: u32 = 8;
pub const FKF_HOTKEYSOUND: u32 = 16;
pub const FKF_INDICATOR: u32 = 32;
pub const FKF_CLICKON: u32 = 64;
pub const SKF_STICKYKEYSON: u32 = 1;
pub const SKF_AVAILABLE: u32 = 2;
pub const SKF_HOTKEYACTIVE: u32 = 4;
pub const SKF_CONFIRMHOTKEY: u32 = 8;
pub const SKF_HOTKEYSOUND: u32 = 16;
pub const SKF_INDICATOR: u32 = 32;
pub const SKF_AUDIBLEFEEDBACK: u32 = 64;
pub const SKF_TRISTATE: u32 = 128;
pub const SKF_TWOKEYSOFF: u32 = 256;
pub const SKF_LALTLATCHED: u32 = 268435456;
pub const SKF_LCTLLATCHED: u32 = 67108864;
pub const SKF_LSHIFTLATCHED: u32 = 16777216;
pub const SKF_RALTLATCHED: u32 = 536870912;
pub const SKF_RCTLLATCHED: u32 = 134217728;
pub const SKF_RSHIFTLATCHED: u32 = 33554432;
pub const SKF_LWINLATCHED: u32 = 1073741824;
pub const SKF_RWINLATCHED: u32 = 2147483648;
pub const SKF_LALTLOCKED: u32 = 1048576;
pub const SKF_LCTLLOCKED: u32 = 262144;
pub const SKF_LSHIFTLOCKED: u32 = 65536;
pub const SKF_RALTLOCKED: u32 = 2097152;
pub const SKF_RCTLLOCKED: u32 = 524288;
pub const SKF_RSHIFTLOCKED: u32 = 131072;
pub const SKF_LWINLOCKED: u32 = 4194304;
pub const SKF_RWINLOCKED: u32 = 8388608;
pub const MKF_MOUSEKEYSON: u32 = 1;
pub const MKF_AVAILABLE: u32 = 2;
pub const MKF_HOTKEYACTIVE: u32 = 4;
pub const MKF_CONFIRMHOTKEY: u32 = 8;
pub const MKF_HOTKEYSOUND: u32 = 16;
pub const MKF_INDICATOR: u32 = 32;
pub const MKF_MODIFIERS: u32 = 64;
pub const MKF_REPLACENUMBERS: u32 = 128;
pub const MKF_LEFTBUTTONSEL: u32 = 268435456;
pub const MKF_RIGHTBUTTONSEL: u32 = 536870912;
pub const MKF_LEFTBUTTONDOWN: u32 = 16777216;
pub const MKF_RIGHTBUTTONDOWN: u32 = 33554432;
pub const MKF_MOUSEMODE: u32 = 2147483648;
pub const ATF_TIMEOUTON: u32 = 1;
pub const ATF_ONOFFFEEDBACK: u32 = 2;
pub const SSGF_NONE: u32 = 0;
pub const SSGF_DISPLAY: u32 = 3;
pub const SSTF_NONE: u32 = 0;
pub const SSTF_CHARS: u32 = 1;
pub const SSTF_BORDER: u32 = 2;
pub const SSTF_DISPLAY: u32 = 3;
pub const SSWF_NONE: u32 = 0;
pub const SSWF_TITLE: u32 = 1;
pub const SSWF_WINDOW: u32 = 2;
pub const SSWF_DISPLAY: u32 = 3;
pub const SSWF_CUSTOM: u32 = 4;
pub const SSF_SOUNDSENTRYON: u32 = 1;
pub const SSF_AVAILABLE: u32 = 2;
pub const SSF_INDICATOR: u32 = 4;
pub const TKF_TOGGLEKEYSON: u32 = 1;
pub const TKF_AVAILABLE: u32 = 2;
pub const TKF_HOTKEYACTIVE: u32 = 4;
pub const TKF_CONFIRMHOTKEY: u32 = 8;
pub const TKF_HOTKEYSOUND: u32 = 16;
pub const TKF_INDICATOR: u32 = 32;
pub const SLE_ERROR: u32 = 1;
pub const SLE_MINORERROR: u32 = 2;
pub const SLE_WARNING: u32 = 3;
pub const MONITOR_DEFAULTTONULL: u32 = 0;
pub const MONITOR_DEFAULTTOPRIMARY: u32 = 1;
pub const MONITOR_DEFAULTTONEAREST: u32 = 2;
pub const MONITORINFOF_PRIMARY: u32 = 1;
pub const WINEVENT_OUTOFCONTEXT: u32 = 0;
pub const WINEVENT_SKIPOWNTHREAD: u32 = 1;
pub const WINEVENT_SKIPOWNPROCESS: u32 = 2;
pub const WINEVENT_INCONTEXT: u32 = 4;
pub const CHILDID_SELF: u32 = 0;
pub const INDEXID_OBJECT: u32 = 0;
pub const INDEXID_CONTAINER: u32 = 0;
pub const EVENT_MIN: u32 = 1;
pub const EVENT_MAX: u32 = 2147483647;
pub const EVENT_SYSTEM_SOUND: u32 = 1;
pub const EVENT_SYSTEM_ALERT: u32 = 2;
pub const EVENT_SYSTEM_FOREGROUND: u32 = 3;
pub const EVENT_SYSTEM_MENUSTART: u32 = 4;
pub const EVENT_SYSTEM_MENUEND: u32 = 5;
pub const EVENT_SYSTEM_MENUPOPUPSTART: u32 = 6;
pub const EVENT_SYSTEM_MENUPOPUPEND: u32 = 7;
pub const EVENT_SYSTEM_CAPTURESTART: u32 = 8;
pub const EVENT_SYSTEM_CAPTUREEND: u32 = 9;
pub const EVENT_SYSTEM_MOVESIZESTART: u32 = 10;
pub const EVENT_SYSTEM_MOVESIZEEND: u32 = 11;
pub const EVENT_SYSTEM_CONTEXTHELPSTART: u32 = 12;
pub const EVENT_SYSTEM_CONTEXTHELPEND: u32 = 13;
pub const EVENT_SYSTEM_DRAGDROPSTART: u32 = 14;
pub const EVENT_SYSTEM_DRAGDROPEND: u32 = 15;
pub const EVENT_SYSTEM_DIALOGSTART: u32 = 16;
pub const EVENT_SYSTEM_DIALOGEND: u32 = 17;
pub const EVENT_SYSTEM_SCROLLINGSTART: u32 = 18;
pub const EVENT_SYSTEM_SCROLLINGEND: u32 = 19;
pub const EVENT_SYSTEM_SWITCHSTART: u32 = 20;
pub const EVENT_SYSTEM_SWITCHEND: u32 = 21;
pub const EVENT_SYSTEM_MINIMIZESTART: u32 = 22;
pub const EVENT_SYSTEM_MINIMIZEEND: u32 = 23;
pub const EVENT_SYSTEM_DESKTOPSWITCH: u32 = 32;
pub const EVENT_SYSTEM_SWITCHER_APPGRABBED: u32 = 36;
pub const EVENT_SYSTEM_SWITCHER_APPOVERTARGET: u32 = 37;
pub const EVENT_SYSTEM_SWITCHER_APPDROPPED: u32 = 38;
pub const EVENT_SYSTEM_SWITCHER_CANCELLED: u32 = 39;
pub const EVENT_SYSTEM_IME_KEY_NOTIFICATION: u32 = 41;
pub const EVENT_SYSTEM_END: u32 = 255;
pub const EVENT_OEM_DEFINED_START: u32 = 257;
pub const EVENT_OEM_DEFINED_END: u32 = 511;
pub const EVENT_UIA_EVENTID_START: u32 = 19968;
pub const EVENT_UIA_EVENTID_END: u32 = 20223;
pub const EVENT_UIA_PROPID_START: u32 = 29952;
pub const EVENT_UIA_PROPID_END: u32 = 30207;
pub const EVENT_CONSOLE_CARET: u32 = 16385;
pub const EVENT_CONSOLE_UPDATE_REGION: u32 = 16386;
pub const EVENT_CONSOLE_UPDATE_SIMPLE: u32 = 16387;
pub const EVENT_CONSOLE_UPDATE_SCROLL: u32 = 16388;
pub const EVENT_CONSOLE_LAYOUT: u32 = 16389;
pub const EVENT_CONSOLE_START_APPLICATION: u32 = 16390;
pub const EVENT_CONSOLE_END_APPLICATION: u32 = 16391;
pub const CONSOLE_APPLICATION_16BIT: u32 = 0;
pub const CONSOLE_CARET_SELECTION: u32 = 1;
pub const CONSOLE_CARET_VISIBLE: u32 = 2;
pub const EVENT_CONSOLE_END: u32 = 16639;
pub const EVENT_OBJECT_CREATE: u32 = 32768;
pub const EVENT_OBJECT_DESTROY: u32 = 32769;
pub const EVENT_OBJECT_SHOW: u32 = 32770;
pub const EVENT_OBJECT_HIDE: u32 = 32771;
pub const EVENT_OBJECT_REORDER: u32 = 32772;
pub const EVENT_OBJECT_FOCUS: u32 = 32773;
pub const EVENT_OBJECT_SELECTION: u32 = 32774;
pub const EVENT_OBJECT_SELECTIONADD: u32 = 32775;
pub const EVENT_OBJECT_SELECTIONREMOVE: u32 = 32776;
pub const EVENT_OBJECT_SELECTIONWITHIN: u32 = 32777;
pub const EVENT_OBJECT_STATECHANGE: u32 = 32778;
pub const EVENT_OBJECT_LOCATIONCHANGE: u32 = 32779;
pub const EVENT_OBJECT_NAMECHANGE: u32 = 32780;
pub const EVENT_OBJECT_DESCRIPTIONCHANGE: u32 = 32781;
pub const EVENT_OBJECT_VALUECHANGE: u32 = 32782;
pub const EVENT_OBJECT_PARENTCHANGE: u32 = 32783;
pub const EVENT_OBJECT_HELPCHANGE: u32 = 32784;
pub const EVENT_OBJECT_DEFACTIONCHANGE: u32 = 32785;
pub const EVENT_OBJECT_ACCELERATORCHANGE: u32 = 32786;
pub const EVENT_OBJECT_INVOKED: u32 = 32787;
pub const EVENT_OBJECT_TEXTSELECTIONCHANGED: u32 = 32788;
pub const EVENT_OBJECT_CONTENTSCROLLED: u32 = 32789;
pub const EVENT_SYSTEM_ARRANGMENTPREVIEW: u32 = 32790;
pub const EVENT_OBJECT_CLOAKED: u32 = 32791;
pub const EVENT_OBJECT_UNCLOAKED: u32 = 32792;
pub const EVENT_OBJECT_LIVEREGIONCHANGED: u32 = 32793;
pub const EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED: u32 = 32800;
pub const EVENT_OBJECT_DRAGSTART: u32 = 32801;
pub const EVENT_OBJECT_DRAGCANCEL: u32 = 32802;
pub const EVENT_OBJECT_DRAGCOMPLETE: u32 = 32803;
pub const EVENT_OBJECT_DRAGENTER: u32 = 32804;
pub const EVENT_OBJECT_DRAGLEAVE: u32 = 32805;
pub const EVENT_OBJECT_DRAGDROPPED: u32 = 32806;
pub const EVENT_OBJECT_IME_SHOW: u32 = 32807;
pub const EVENT_OBJECT_IME_HIDE: u32 = 32808;
pub const EVENT_OBJECT_IME_CHANGE: u32 = 32809;
pub const EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED: u32 = 32816;
pub const EVENT_OBJECT_END: u32 = 33023;
pub const EVENT_AIA_START: u32 = 40960;
pub const EVENT_AIA_END: u32 = 45055;
pub const SOUND_SYSTEM_STARTUP: u32 = 1;
pub const SOUND_SYSTEM_SHUTDOWN: u32 = 2;
pub const SOUND_SYSTEM_BEEP: u32 = 3;
pub const SOUND_SYSTEM_ERROR: u32 = 4;
pub const SOUND_SYSTEM_QUESTION: u32 = 5;
pub const SOUND_SYSTEM_WARNING: u32 = 6;
pub const SOUND_SYSTEM_INFORMATION: u32 = 7;
pub const SOUND_SYSTEM_MAXIMIZE: u32 = 8;
pub const SOUND_SYSTEM_MINIMIZE: u32 = 9;
pub const SOUND_SYSTEM_RESTOREUP: u32 = 10;
pub const SOUND_SYSTEM_RESTOREDOWN: u32 = 11;
pub const SOUND_SYSTEM_APPSTART: u32 = 12;
pub const SOUND_SYSTEM_FAULT: u32 = 13;
pub const SOUND_SYSTEM_APPEND: u32 = 14;
pub const SOUND_SYSTEM_MENUCOMMAND: u32 = 15;
pub const SOUND_SYSTEM_MENUPOPUP: u32 = 16;
pub const CSOUND_SYSTEM: u32 = 16;
pub const ALERT_SYSTEM_INFORMATIONAL: u32 = 1;
pub const ALERT_SYSTEM_WARNING: u32 = 2;
pub const ALERT_SYSTEM_ERROR: u32 = 3;
pub const ALERT_SYSTEM_QUERY: u32 = 4;
pub const ALERT_SYSTEM_CRITICAL: u32 = 5;
pub const CALERT_SYSTEM: u32 = 6;
pub const GUI_CARETBLINKING: u32 = 1;
pub const GUI_INMOVESIZE: u32 = 2;
pub const GUI_INMENUMODE: u32 = 4;
pub const GUI_SYSTEMMENUMODE: u32 = 8;
pub const GUI_POPUPMENUMODE: u32 = 16;
pub const GUI_16BITTASK: u32 = 0;
pub const USER_DEFAULT_SCREEN_DPI: u32 = 96;
pub const STATE_SYSTEM_UNAVAILABLE: u32 = 1;
pub const STATE_SYSTEM_SELECTED: u32 = 2;
pub const STATE_SYSTEM_FOCUSED: u32 = 4;
pub const STATE_SYSTEM_PRESSED: u32 = 8;
pub const STATE_SYSTEM_CHECKED: u32 = 16;
pub const STATE_SYSTEM_MIXED: u32 = 32;
pub const STATE_SYSTEM_INDETERMINATE: u32 = 32;
pub const STATE_SYSTEM_READONLY: u32 = 64;
pub const STATE_SYSTEM_HOTTRACKED: u32 = 128;
pub const STATE_SYSTEM_DEFAULT: u32 = 256;
pub const STATE_SYSTEM_EXPANDED: u32 = 512;
pub const STATE_SYSTEM_COLLAPSED: u32 = 1024;
pub const STATE_SYSTEM_BUSY: u32 = 2048;
pub const STATE_SYSTEM_FLOATING: u32 = 4096;
pub const STATE_SYSTEM_MARQUEED: u32 = 8192;
pub const STATE_SYSTEM_ANIMATED: u32 = 16384;
pub const STATE_SYSTEM_INVISIBLE: u32 = 32768;
pub const STATE_SYSTEM_OFFSCREEN: u32 = 65536;
pub const STATE_SYSTEM_SIZEABLE: u32 = 131072;
pub const STATE_SYSTEM_MOVEABLE: u32 = 262144;
pub const STATE_SYSTEM_SELFVOICING: u32 = 524288;
pub const STATE_SYSTEM_FOCUSABLE: u32 = 1048576;
pub const STATE_SYSTEM_SELECTABLE: u32 = 2097152;
pub const STATE_SYSTEM_LINKED: u32 = 4194304;
pub const STATE_SYSTEM_TRAVERSED: u32 = 8388608;
pub const STATE_SYSTEM_MULTISELECTABLE: u32 = 16777216;
pub const STATE_SYSTEM_EXTSELECTABLE: u32 = 33554432;
pub const STATE_SYSTEM_ALERT_LOW: u32 = 67108864;
pub const STATE_SYSTEM_ALERT_MEDIUM: u32 = 134217728;
pub const STATE_SYSTEM_ALERT_HIGH: u32 = 268435456;
pub const STATE_SYSTEM_PROTECTED: u32 = 536870912;
pub const STATE_SYSTEM_VALID: u32 = 1073741823;
pub const CCHILDREN_TITLEBAR: u32 = 5;
pub const CCHILDREN_SCROLLBAR: u32 = 5;
pub const CURSOR_SHOWING: u32 = 1;
pub const CURSOR_SUPPRESSED: u32 = 2;
pub const WS_ACTIVECAPTION: u32 = 1;
pub const GA_PARENT: u32 = 1;
pub const GA_ROOT: u32 = 2;
pub const GA_ROOTOWNER: u32 = 3;
pub const RIM_INPUT: u32 = 0;
pub const RIM_INPUTSINK: u32 = 1;
pub const RIM_TYPEMOUSE: u32 = 0;
pub const RIM_TYPEKEYBOARD: u32 = 1;
pub const RIM_TYPEHID: u32 = 2;
pub const RIM_TYPEMAX: u32 = 2;
pub const RI_MOUSE_LEFT_BUTTON_DOWN: u32 = 1;
pub const RI_MOUSE_LEFT_BUTTON_UP: u32 = 2;
pub const RI_MOUSE_RIGHT_BUTTON_DOWN: u32 = 4;
pub const RI_MOUSE_RIGHT_BUTTON_UP: u32 = 8;
pub const RI_MOUSE_MIDDLE_BUTTON_DOWN: u32 = 16;
pub const RI_MOUSE_MIDDLE_BUTTON_UP: u32 = 32;
pub const RI_MOUSE_BUTTON_1_DOWN: u32 = 1;
pub const RI_MOUSE_BUTTON_1_UP: u32 = 2;
pub const RI_MOUSE_BUTTON_2_DOWN: u32 = 4;
pub const RI_MOUSE_BUTTON_2_UP: u32 = 8;
pub const RI_MOUSE_BUTTON_3_DOWN: u32 = 16;
pub const RI_MOUSE_BUTTON_3_UP: u32 = 32;
pub const RI_MOUSE_BUTTON_4_DOWN: u32 = 64;
pub const RI_MOUSE_BUTTON_4_UP: u32 = 128;
pub const RI_MOUSE_BUTTON_5_DOWN: u32 = 256;
pub const RI_MOUSE_BUTTON_5_UP: u32 = 512;
pub const RI_MOUSE_WHEEL: u32 = 1024;
pub const RI_MOUSE_HWHEEL: u32 = 2048;
pub const MOUSE_MOVE_RELATIVE: u32 = 0;
pub const MOUSE_MOVE_ABSOLUTE: u32 = 1;
pub const MOUSE_VIRTUAL_DESKTOP: u32 = 2;
pub const MOUSE_ATTRIBUTES_CHANGED: u32 = 4;
pub const MOUSE_MOVE_NOCOALESCE: u32 = 8;
pub const KEYBOARD_OVERRUN_MAKE_CODE: u32 = 255;
pub const RI_KEY_MAKE: u32 = 0;
pub const RI_KEY_BREAK: u32 = 1;
pub const RI_KEY_E0: u32 = 2;
pub const RI_KEY_E1: u32 = 4;
pub const RI_KEY_TERMSRV_SET_LED: u32 = 8;
pub const RI_KEY_TERMSRV_SHADOW: u32 = 16;
pub const RID_INPUT: u32 = 268435459;
pub const RID_HEADER: u32 = 268435461;
pub const RIDI_PREPARSEDDATA: u32 = 536870917;
pub const RIDI_DEVICENAME: u32 = 536870919;
pub const RIDI_DEVICEINFO: u32 = 536870923;
pub const RIDEV_REMOVE: u32 = 1;
pub const RIDEV_EXCLUDE: u32 = 16;
pub const RIDEV_PAGEONLY: u32 = 32;
pub const RIDEV_NOLEGACY: u32 = 48;
pub const RIDEV_INPUTSINK: u32 = 256;
pub const RIDEV_CAPTUREMOUSE: u32 = 512;
pub const RIDEV_NOHOTKEYS: u32 = 512;
pub const RIDEV_APPKEYS: u32 = 1024;
pub const RIDEV_EXINPUTSINK: u32 = 4096;
pub const RIDEV_DEVNOTIFY: u32 = 8192;
pub const RIDEV_EXMODEMASK: u32 = 240;
pub const GIDC_ARRIVAL: u32 = 1;
pub const GIDC_REMOVAL: u32 = 2;
pub const POINTER_DEVICE_PRODUCT_STRING_MAX: u32 = 520;
pub const PDC_ARRIVAL: u32 = 1;
pub const PDC_REMOVAL: u32 = 2;
pub const PDC_ORIENTATION_0: u32 = 4;
pub const PDC_ORIENTATION_90: u32 = 8;
pub const PDC_ORIENTATION_180: u32 = 16;
pub const PDC_ORIENTATION_270: u32 = 32;
pub const PDC_MODE_DEFAULT: u32 = 64;
pub const PDC_MODE_CENTERED: u32 = 128;
pub const PDC_MAPPING_CHANGE: u32 = 256;
pub const PDC_RESOLUTION: u32 = 512;
pub const PDC_ORIGIN: u32 = 1024;
pub const PDC_MODE_ASPECTRATIOPRESERVED: u32 = 2048;
pub const TOUCHPAD_PARAMETERS_LATEST_VERSION: u32 = 1;
pub const TOUCHPAD_PARAMETERS_VERSION_1: u32 = 1;
pub const MSGFLT_ADD: u32 = 1;
pub const MSGFLT_REMOVE: u32 = 2;
pub const MSGFLTINFO_NONE: u32 = 0;
pub const MSGFLTINFO_ALREADYALLOWED_FORWND: u32 = 1;
pub const MSGFLTINFO_ALREADYDISALLOWED_FORWND: u32 = 2;
pub const MSGFLTINFO_ALLOWED_HIGHER: u32 = 3;
pub const MSGFLT_RESET: u32 = 0;
pub const MSGFLT_ALLOW: u32 = 1;
pub const MSGFLT_DISALLOW: u32 = 2;
pub const GF_BEGIN: u32 = 1;
pub const GF_INERTIA: u32 = 2;
pub const GF_END: u32 = 4;
pub const GID_BEGIN: u32 = 1;
pub const GID_END: u32 = 2;
pub const GID_ZOOM: u32 = 3;
pub const GID_PAN: u32 = 4;
pub const GID_ROTATE: u32 = 5;
pub const GID_TWOFINGERTAP: u32 = 6;
pub const GID_PRESSANDTAP: u32 = 7;
pub const GID_ROLLOVER: u32 = 7;
pub const GC_ALLGESTURES: u32 = 1;
pub const GC_ZOOM: u32 = 1;
pub const GC_PAN: u32 = 1;
pub const GC_PAN_WITH_SINGLE_FINGER_VERTICALLY: u32 = 2;
pub const GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY: u32 = 4;
pub const GC_PAN_WITH_GUTTER: u32 = 8;
pub const GC_PAN_WITH_INERTIA: u32 = 16;
pub const GC_ROTATE: u32 = 1;
pub const GC_TWOFINGERTAP: u32 = 1;
pub const GC_PRESSANDTAP: u32 = 1;
pub const GC_ROLLOVER: u32 = 1;
pub const GESTURECONFIGMAXCOUNT: u32 = 256;
pub const GCF_INCLUDE_ANCESTORS: u32 = 1;
pub const NID_INTEGRATED_TOUCH: u32 = 1;
pub const NID_EXTERNAL_TOUCH: u32 = 2;
pub const NID_INTEGRATED_PEN: u32 = 4;
pub const NID_EXTERNAL_PEN: u32 = 8;
pub const NID_MULTI_INPUT: u32 = 64;
pub const NID_READY: u32 = 128;
pub const MAX_STR_BLOCKREASON: u32 = 256;
pub const WM_TOOLTIPDISMISS: u32 = 837;
pub const INVALID_MONITOR_TOPOLOGY_ID: u32 = 0;
pub const MAX_LEADBYTES: u32 = 12;
pub const MAX_DEFAULTCHAR: u32 = 2;
pub const HIGH_SURROGATE_START: u32 = 55296;
pub const HIGH_SURROGATE_END: u32 = 56319;
pub const LOW_SURROGATE_START: u32 = 56320;
pub const LOW_SURROGATE_END: u32 = 57343;
pub const MB_PRECOMPOSED: u32 = 1;
pub const MB_COMPOSITE: u32 = 2;
pub const MB_USEGLYPHCHARS: u32 = 4;
pub const MB_ERR_INVALID_CHARS: u32 = 8;
pub const WC_COMPOSITECHECK: u32 = 512;
pub const WC_DISCARDNS: u32 = 16;
pub const WC_SEPCHARS: u32 = 32;
pub const WC_DEFAULTCHAR: u32 = 64;
pub const WC_ERR_INVALID_CHARS: u32 = 128;
pub const WC_NO_BEST_FIT_CHARS: u32 = 1024;
pub const CT_CTYPE1: u32 = 1;
pub const CT_CTYPE2: u32 = 2;
pub const CT_CTYPE3: u32 = 4;
pub const C1_UPPER: u32 = 1;
pub const C1_LOWER: u32 = 2;
pub const C1_DIGIT: u32 = 4;
pub const C1_SPACE: u32 = 8;
pub const C1_PUNCT: u32 = 16;
pub const C1_CNTRL: u32 = 32;
pub const C1_BLANK: u32 = 64;
pub const C1_XDIGIT: u32 = 128;
pub const C1_ALPHA: u32 = 256;
pub const C1_DEFINED: u32 = 512;
pub const C2_LEFTTORIGHT: u32 = 1;
pub const C2_RIGHTTOLEFT: u32 = 2;
pub const C2_EUROPENUMBER: u32 = 3;
pub const C2_EUROPESEPARATOR: u32 = 4;
pub const C2_EUROPETERMINATOR: u32 = 5;
pub const C2_ARABICNUMBER: u32 = 6;
pub const C2_COMMONSEPARATOR: u32 = 7;
pub const C2_BLOCKSEPARATOR: u32 = 8;
pub const C2_SEGMENTSEPARATOR: u32 = 9;
pub const C2_WHITESPACE: u32 = 10;
pub const C2_OTHERNEUTRAL: u32 = 11;
pub const C2_NOTAPPLICABLE: u32 = 0;
pub const C3_NONSPACING: u32 = 1;
pub const C3_DIACRITIC: u32 = 2;
pub const C3_VOWELMARK: u32 = 4;
pub const C3_SYMBOL: u32 = 8;
pub const C3_KATAKANA: u32 = 16;
pub const C3_HIRAGANA: u32 = 32;
pub const C3_HALFWIDTH: u32 = 64;
pub const C3_FULLWIDTH: u32 = 128;
pub const C3_IDEOGRAPH: u32 = 256;
pub const C3_KASHIDA: u32 = 512;
pub const C3_LEXICAL: u32 = 1024;
pub const C3_HIGHSURROGATE: u32 = 2048;
pub const C3_LOWSURROGATE: u32 = 4096;
pub const C3_ALPHA: u32 = 32768;
pub const C3_NOTAPPLICABLE: u32 = 0;
pub const NORM_IGNORECASE: u32 = 1;
pub const NORM_IGNORENONSPACE: u32 = 2;
pub const NORM_IGNORESYMBOLS: u32 = 4;
pub const LINGUISTIC_IGNORECASE: u32 = 16;
pub const LINGUISTIC_IGNOREDIACRITIC: u32 = 32;
pub const NORM_IGNOREKANATYPE: u32 = 65536;
pub const NORM_IGNOREWIDTH: u32 = 131072;
pub const NORM_LINGUISTIC_CASING: u32 = 134217728;
pub const MAP_FOLDCZONE: u32 = 16;
pub const MAP_PRECOMPOSED: u32 = 32;
pub const MAP_COMPOSITE: u32 = 64;
pub const MAP_FOLDDIGITS: u32 = 128;
pub const MAP_EXPAND_LIGATURES: u32 = 8192;
pub const LCMAP_LOWERCASE: u32 = 256;
pub const LCMAP_UPPERCASE: u32 = 512;
pub const LCMAP_TITLECASE: u32 = 768;
pub const LCMAP_SORTKEY: u32 = 1024;
pub const LCMAP_BYTEREV: u32 = 2048;
pub const LCMAP_HIRAGANA: u32 = 1048576;
pub const LCMAP_KATAKANA: u32 = 2097152;
pub const LCMAP_HALFWIDTH: u32 = 4194304;
pub const LCMAP_FULLWIDTH: u32 = 8388608;
pub const LCMAP_LINGUISTIC_CASING: u32 = 16777216;
pub const LCMAP_SIMPLIFIED_CHINESE: u32 = 33554432;
pub const LCMAP_TRADITIONAL_CHINESE: u32 = 67108864;
pub const LCMAP_SORTHANDLE: u32 = 536870912;
pub const LCMAP_HASH: u32 = 262144;
pub const FIND_STARTSWITH: u32 = 1048576;
pub const FIND_ENDSWITH: u32 = 2097152;
pub const FIND_FROMSTART: u32 = 4194304;
pub const FIND_FROMEND: u32 = 8388608;
pub const LGRPID_INSTALLED: u32 = 1;
pub const LGRPID_SUPPORTED: u32 = 2;
pub const LCID_INSTALLED: u32 = 1;
pub const LCID_SUPPORTED: u32 = 2;
pub const LCID_ALTERNATE_SORTS: u32 = 4;
pub const LOCALE_ALL: u32 = 0;
pub const LOCALE_WINDOWS: u32 = 1;
pub const LOCALE_SUPPLEMENTAL: u32 = 2;
pub const LOCALE_ALTERNATE_SORTS: u32 = 4;
pub const LOCALE_REPLACEMENT: u32 = 8;
pub const LOCALE_NEUTRALDATA: u32 = 16;
pub const LOCALE_SPECIFICDATA: u32 = 32;
pub const CP_INSTALLED: u32 = 1;
pub const CP_SUPPORTED: u32 = 2;
pub const SORT_STRINGSORT: u32 = 4096;
pub const SORT_DIGITSASNUMBERS: u32 = 8;
pub const CSTR_LESS_THAN: u32 = 1;
pub const CSTR_EQUAL: u32 = 2;
pub const CSTR_GREATER_THAN: u32 = 3;
pub const CP_ACP: u32 = 0;
pub const CP_OEMCP: u32 = 1;
pub const CP_MACCP: u32 = 2;
pub const CP_THREAD_ACP: u32 = 3;
pub const CP_SYMBOL: u32 = 42;
pub const CP_UTF7: u32 = 65000;
pub const CP_UTF8: u32 = 65001;
pub const CTRY_DEFAULT: u32 = 0;
pub const CTRY_ALBANIA: u32 = 355;
pub const CTRY_ALGERIA: u32 = 213;
pub const CTRY_ARGENTINA: u32 = 54;
pub const CTRY_ARMENIA: u32 = 374;
pub const CTRY_AUSTRALIA: u32 = 61;
pub const CTRY_AUSTRIA: u32 = 43;
pub const CTRY_AZERBAIJAN: u32 = 994;
pub const CTRY_BAHRAIN: u32 = 973;
pub const CTRY_BELARUS: u32 = 375;
pub const CTRY_BELGIUM: u32 = 32;
pub const CTRY_BELIZE: u32 = 501;
pub const CTRY_BOLIVIA: u32 = 591;
pub const CTRY_BRAZIL: u32 = 55;
pub const CTRY_BRUNEI_DARUSSALAM: u32 = 673;
pub const CTRY_BULGARIA: u32 = 359;
pub const CTRY_CANADA: u32 = 2;
pub const CTRY_CARIBBEAN: u32 = 1;
pub const CTRY_CHILE: u32 = 56;
pub const CTRY_COLOMBIA: u32 = 57;
pub const CTRY_COSTA_RICA: u32 = 506;
pub const CTRY_CROATIA: u32 = 385;
pub const CTRY_CZECH: u32 = 420;
pub const CTRY_DENMARK: u32 = 45;
pub const CTRY_DOMINICAN_REPUBLIC: u32 = 1;
pub const CTRY_ECUADOR: u32 = 593;
pub const CTRY_EGYPT: u32 = 20;
pub const CTRY_EL_SALVADOR: u32 = 503;
pub const CTRY_ESTONIA: u32 = 372;
pub const CTRY_FAEROE_ISLANDS: u32 = 298;
pub const CTRY_FINLAND: u32 = 358;
pub const CTRY_FRANCE: u32 = 33;
pub const CTRY_GEORGIA: u32 = 995;
pub const CTRY_GERMANY: u32 = 49;
pub const CTRY_GREECE: u32 = 30;
pub const CTRY_GUATEMALA: u32 = 502;
pub const CTRY_HONDURAS: u32 = 504;
pub const CTRY_HONG_KONG: u32 = 852;
pub const CTRY_HUNGARY: u32 = 36;
pub const CTRY_ICELAND: u32 = 354;
pub const CTRY_INDIA: u32 = 91;
pub const CTRY_INDONESIA: u32 = 62;
pub const CTRY_IRAN: u32 = 981;
pub const CTRY_IRAQ: u32 = 964;
pub const CTRY_IRELAND: u32 = 353;
pub const CTRY_ISRAEL: u32 = 972;
pub const CTRY_ITALY: u32 = 39;
pub const CTRY_JAMAICA: u32 = 1;
pub const CTRY_JAPAN: u32 = 81;
pub const CTRY_JORDAN: u32 = 962;
pub const CTRY_KAZAKSTAN: u32 = 7;
pub const CTRY_KENYA: u32 = 254;
pub const CTRY_KUWAIT: u32 = 965;
pub const CTRY_KYRGYZSTAN: u32 = 996;
pub const CTRY_LATVIA: u32 = 371;
pub const CTRY_LEBANON: u32 = 961;
pub const CTRY_LIBYA: u32 = 218;
pub const CTRY_LIECHTENSTEIN: u32 = 41;
pub const CTRY_LITHUANIA: u32 = 370;
pub const CTRY_LUXEMBOURG: u32 = 352;
pub const CTRY_MACAU: u32 = 853;
pub const CTRY_MACEDONIA: u32 = 389;
pub const CTRY_MALAYSIA: u32 = 60;
pub const CTRY_MALDIVES: u32 = 960;
pub const CTRY_MEXICO: u32 = 52;
pub const CTRY_MONACO: u32 = 33;
pub const CTRY_MONGOLIA: u32 = 976;
pub const CTRY_MOROCCO: u32 = 212;
pub const CTRY_NETHERLANDS: u32 = 31;
pub const CTRY_NEW_ZEALAND: u32 = 64;
pub const CTRY_NICARAGUA: u32 = 505;
pub const CTRY_NORWAY: u32 = 47;
pub const CTRY_OMAN: u32 = 968;
pub const CTRY_PAKISTAN: u32 = 92;
pub const CTRY_PANAMA: u32 = 507;
pub const CTRY_PARAGUAY: u32 = 595;
pub const CTRY_PERU: u32 = 51;
pub const CTRY_PHILIPPINES: u32 = 63;
pub const CTRY_POLAND: u32 = 48;
pub const CTRY_PORTUGAL: u32 = 351;
pub const CTRY_PRCHINA: u32 = 86;
pub const CTRY_PUERTO_RICO: u32 = 1;
pub const CTRY_QATAR: u32 = 974;
pub const CTRY_ROMANIA: u32 = 40;
pub const CTRY_RUSSIA: u32 = 7;
pub const CTRY_SAUDI_ARABIA: u32 = 966;
pub const CTRY_SERBIA: u32 = 381;
pub const CTRY_SINGAPORE: u32 = 65;
pub const CTRY_SLOVAK: u32 = 421;
pub const CTRY_SLOVENIA: u32 = 386;
pub const CTRY_SOUTH_AFRICA: u32 = 27;
pub const CTRY_SOUTH_KOREA: u32 = 82;
pub const CTRY_SPAIN: u32 = 34;
pub const CTRY_SWEDEN: u32 = 46;
pub const CTRY_SWITZERLAND: u32 = 41;
pub const CTRY_SYRIA: u32 = 963;
pub const CTRY_TAIWAN: u32 = 886;
pub const CTRY_TATARSTAN: u32 = 7;
pub const CTRY_THAILAND: u32 = 66;
pub const CTRY_TRINIDAD_Y_TOBAGO: u32 = 1;
pub const CTRY_TUNISIA: u32 = 216;
pub const CTRY_TURKEY: u32 = 90;
pub const CTRY_UAE: u32 = 971;
pub const CTRY_UKRAINE: u32 = 380;
pub const CTRY_UNITED_KINGDOM: u32 = 44;
pub const CTRY_UNITED_STATES: u32 = 1;
pub const CTRY_URUGUAY: u32 = 598;
pub const CTRY_UZBEKISTAN: u32 = 7;
pub const CTRY_VENEZUELA: u32 = 58;
pub const CTRY_VIET_NAM: u32 = 84;
pub const CTRY_YEMEN: u32 = 967;
pub const CTRY_ZIMBABWE: u32 = 263;
pub const LOCALE_NOUSEROVERRIDE: u32 = 2147483648;
pub const LOCALE_USE_CP_ACP: u32 = 1073741824;
pub const LOCALE_RETURN_NUMBER: u32 = 536870912;
pub const LOCALE_RETURN_GENITIVE_NAMES: u32 = 268435456;
pub const LOCALE_ALLOW_NEUTRAL_NAMES: u32 = 134217728;
pub const LOCALE_SLOCALIZEDDISPLAYNAME: u32 = 2;
pub const LOCALE_SENGLISHDISPLAYNAME: u32 = 114;
pub const LOCALE_SNATIVEDISPLAYNAME: u32 = 115;
pub const LOCALE_SLOCALIZEDLANGUAGENAME: u32 = 111;
pub const LOCALE_SENGLISHLANGUAGENAME: u32 = 4097;
pub const LOCALE_SNATIVELANGUAGENAME: u32 = 4;
pub const LOCALE_SLOCALIZEDCOUNTRYNAME: u32 = 6;
pub const LOCALE_SENGLISHCOUNTRYNAME: u32 = 4098;
pub const LOCALE_SNATIVECOUNTRYNAME: u32 = 8;
pub const LOCALE_IDIALINGCODE: u32 = 5;
pub const LOCALE_SLIST: u32 = 12;
pub const LOCALE_IMEASURE: u32 = 13;
pub const LOCALE_SDECIMAL: u32 = 14;
pub const LOCALE_STHOUSAND: u32 = 15;
pub const LOCALE_SGROUPING: u32 = 16;
pub const LOCALE_IDIGITS: u32 = 17;
pub const LOCALE_ILZERO: u32 = 18;
pub const LOCALE_INEGNUMBER: u32 = 4112;
pub const LOCALE_SNATIVEDIGITS: u32 = 19;
pub const LOCALE_SCURRENCY: u32 = 20;
pub const LOCALE_SINTLSYMBOL: u32 = 21;
pub const LOCALE_SMONDECIMALSEP: u32 = 22;
pub const LOCALE_SMONTHOUSANDSEP: u32 = 23;
pub const LOCALE_SMONGROUPING: u32 = 24;
pub const LOCALE_ICURRDIGITS: u32 = 25;
pub const LOCALE_ICURRENCY: u32 = 27;
pub const LOCALE_INEGCURR: u32 = 28;
pub const LOCALE_SSHORTDATE: u32 = 31;
pub const LOCALE_SLONGDATE: u32 = 32;
pub const LOCALE_STIMEFORMAT: u32 = 4099;
pub const LOCALE_SAM: u32 = 40;
pub const LOCALE_SPM: u32 = 41;
pub const LOCALE_ICALENDARTYPE: u32 = 4105;
pub const LOCALE_IOPTIONALCALENDAR: u32 = 4107;
pub const LOCALE_IFIRSTDAYOFWEEK: u32 = 4108;
pub const LOCALE_IFIRSTWEEKOFYEAR: u32 = 4109;
pub const LOCALE_SDAYNAME1: u32 = 42;
pub const LOCALE_SDAYNAME2: u32 = 43;
pub const LOCALE_SDAYNAME3: u32 = 44;
pub const LOCALE_SDAYNAME4: u32 = 45;
pub const LOCALE_SDAYNAME5: u32 = 46;
pub const LOCALE_SDAYNAME6: u32 = 47;
pub const LOCALE_SDAYNAME7: u32 = 48;
pub const LOCALE_SABBREVDAYNAME1: u32 = 49;
pub const LOCALE_SABBREVDAYNAME2: u32 = 50;
pub const LOCALE_SABBREVDAYNAME3: u32 = 51;
pub const LOCALE_SABBREVDAYNAME4: u32 = 52;
pub const LOCALE_SABBREVDAYNAME5: u32 = 53;
pub const LOCALE_SABBREVDAYNAME6: u32 = 54;
pub const LOCALE_SABBREVDAYNAME7: u32 = 55;
pub const LOCALE_SMONTHNAME1: u32 = 56;
pub const LOCALE_SMONTHNAME2: u32 = 57;
pub const LOCALE_SMONTHNAME3: u32 = 58;
pub const LOCALE_SMONTHNAME4: u32 = 59;
pub const LOCALE_SMONTHNAME5: u32 = 60;
pub const LOCALE_SMONTHNAME6: u32 = 61;
pub const LOCALE_SMONTHNAME7: u32 = 62;
pub const LOCALE_SMONTHNAME8: u32 = 63;
pub const LOCALE_SMONTHNAME9: u32 = 64;
pub const LOCALE_SMONTHNAME10: u32 = 65;
pub const LOCALE_SMONTHNAME11: u32 = 66;
pub const LOCALE_SMONTHNAME12: u32 = 67;
pub const LOCALE_SMONTHNAME13: u32 = 4110;
pub const LOCALE_SABBREVMONTHNAME1: u32 = 68;
pub const LOCALE_SABBREVMONTHNAME2: u32 = 69;
pub const LOCALE_SABBREVMONTHNAME3: u32 = 70;
pub const LOCALE_SABBREVMONTHNAME4: u32 = 71;
pub const LOCALE_SABBREVMONTHNAME5: u32 = 72;
pub const LOCALE_SABBREVMONTHNAME6: u32 = 73;
pub const LOCALE_SABBREVMONTHNAME7: u32 = 74;
pub const LOCALE_SABBREVMONTHNAME8: u32 = 75;
pub const LOCALE_SABBREVMONTHNAME9: u32 = 76;
pub const LOCALE_SABBREVMONTHNAME10: u32 = 77;
pub const LOCALE_SABBREVMONTHNAME11: u32 = 78;
pub const LOCALE_SABBREVMONTHNAME12: u32 = 79;
pub const LOCALE_SABBREVMONTHNAME13: u32 = 4111;
pub const LOCALE_SPOSITIVESIGN: u32 = 80;
pub const LOCALE_SNEGATIVESIGN: u32 = 81;
pub const LOCALE_IPOSSIGNPOSN: u32 = 82;
pub const LOCALE_INEGSIGNPOSN: u32 = 83;
pub const LOCALE_IPOSSYMPRECEDES: u32 = 84;
pub const LOCALE_IPOSSEPBYSPACE: u32 = 85;
pub const LOCALE_INEGSYMPRECEDES: u32 = 86;
pub const LOCALE_INEGSEPBYSPACE: u32 = 87;
pub const LOCALE_FONTSIGNATURE: u32 = 88;
pub const LOCALE_SISO639LANGNAME: u32 = 89;
pub const LOCALE_SISO3166CTRYNAME: u32 = 90;
pub const LOCALE_IPAPERSIZE: u32 = 4106;
pub const LOCALE_SENGCURRNAME: u32 = 4103;
pub const LOCALE_SNATIVECURRNAME: u32 = 4104;
pub const LOCALE_SYEARMONTH: u32 = 4102;
pub const LOCALE_SSORTNAME: u32 = 4115;
pub const LOCALE_IDIGITSUBSTITUTION: u32 = 4116;
pub const LOCALE_SNAME: u32 = 92;
pub const LOCALE_SDURATION: u32 = 93;
pub const LOCALE_SSHORTESTDAYNAME1: u32 = 96;
pub const LOCALE_SSHORTESTDAYNAME2: u32 = 97;
pub const LOCALE_SSHORTESTDAYNAME3: u32 = 98;
pub const LOCALE_SSHORTESTDAYNAME4: u32 = 99;
pub const LOCALE_SSHORTESTDAYNAME5: u32 = 100;
pub const LOCALE_SSHORTESTDAYNAME6: u32 = 101;
pub const LOCALE_SSHORTESTDAYNAME7: u32 = 102;
pub const LOCALE_SISO639LANGNAME2: u32 = 103;
pub const LOCALE_SISO3166CTRYNAME2: u32 = 104;
pub const LOCALE_SNAN: u32 = 105;
pub const LOCALE_SPOSINFINITY: u32 = 106;
pub const LOCALE_SNEGINFINITY: u32 = 107;
pub const LOCALE_SSCRIPTS: u32 = 108;
pub const LOCALE_SPARENT: u32 = 109;
pub const LOCALE_SCONSOLEFALLBACKNAME: u32 = 110;
pub const LOCALE_IREADINGLAYOUT: u32 = 112;
pub const LOCALE_INEUTRAL: u32 = 113;
pub const LOCALE_INEGATIVEPERCENT: u32 = 116;
pub const LOCALE_IPOSITIVEPERCENT: u32 = 117;
pub const LOCALE_SPERCENT: u32 = 118;
pub const LOCALE_SPERMILLE: u32 = 119;
pub const LOCALE_SMONTHDAY: u32 = 120;
pub const LOCALE_SSHORTTIME: u32 = 121;
pub const LOCALE_SOPENTYPELANGUAGETAG: u32 = 122;
pub const LOCALE_SSORTLOCALE: u32 = 123;
pub const LOCALE_SRELATIVELONGDATE: u32 = 124;
pub const LOCALE_ICONSTRUCTEDLOCALE: u32 = 125;
pub const LOCALE_SSHORTESTAM: u32 = 126;
pub const LOCALE_SSHORTESTPM: u32 = 127;
pub const LOCALE_IUSEUTF8LEGACYACP: u32 = 1638;
pub const LOCALE_IUSEUTF8LEGACYOEMCP: u32 = 2457;
pub const LOCALE_IDEFAULTCODEPAGE: u32 = 11;
pub const LOCALE_IDEFAULTANSICODEPAGE: u32 = 4100;
pub const LOCALE_IDEFAULTMACCODEPAGE: u32 = 4113;
pub const LOCALE_IDEFAULTEBCDICCODEPAGE: u32 = 4114;
pub const LOCALE_ILANGUAGE: u32 = 1;
pub const LOCALE_SABBREVLANGNAME: u32 = 3;
pub const LOCALE_SABBREVCTRYNAME: u32 = 7;
pub const LOCALE_IGEOID: u32 = 91;
pub const LOCALE_IDEFAULTLANGUAGE: u32 = 9;
pub const LOCALE_IDEFAULTCOUNTRY: u32 = 10;
pub const LOCALE_IINTLCURRDIGITS: u32 = 26;
pub const LOCALE_SDATE: u32 = 29;
pub const LOCALE_STIME: u32 = 30;
pub const LOCALE_IDATE: u32 = 33;
pub const LOCALE_ILDATE: u32 = 34;
pub const LOCALE_ITIME: u32 = 35;
pub const LOCALE_ITIMEMARKPOSN: u32 = 4101;
pub const LOCALE_ICENTURY: u32 = 36;
pub const LOCALE_ITLZERO: u32 = 37;
pub const LOCALE_IDAYLZERO: u32 = 38;
pub const LOCALE_IMONLZERO: u32 = 39;
pub const LOCALE_SKEYBOARDSTOINSTALL: u32 = 94;
pub const LOCALE_SLANGUAGE: u32 = 2;
pub const LOCALE_SLANGDISPLAYNAME: u32 = 111;
pub const LOCALE_SENGLANGUAGE: u32 = 4097;
pub const LOCALE_SNATIVELANGNAME: u32 = 4;
pub const LOCALE_SCOUNTRY: u32 = 6;
pub const LOCALE_SENGCOUNTRY: u32 = 4098;
pub const LOCALE_SNATIVECTRYNAME: u32 = 8;
pub const LOCALE_ICOUNTRY: u32 = 5;
pub const LOCALE_S1159: u32 = 40;
pub const LOCALE_S2359: u32 = 41;
pub const TIME_NOMINUTESORSECONDS: u32 = 1;
pub const TIME_NOSECONDS: u32 = 2;
pub const TIME_NOTIMEMARKER: u32 = 4;
pub const TIME_FORCE24HOURFORMAT: u32 = 8;
pub const DATE_SHORTDATE: u32 = 1;
pub const DATE_LONGDATE: u32 = 2;
pub const DATE_USE_ALT_CALENDAR: u32 = 4;
pub const DATE_YEARMONTH: u32 = 8;
pub const DATE_LTRREADING: u32 = 16;
pub const DATE_RTLREADING: u32 = 32;
pub const DATE_AUTOLAYOUT: u32 = 64;
pub const DATE_MONTHDAY: u32 = 128;
pub const CAL_NOUSEROVERRIDE: u32 = 2147483648;
pub const CAL_USE_CP_ACP: u32 = 1073741824;
pub const CAL_RETURN_NUMBER: u32 = 536870912;
pub const CAL_RETURN_GENITIVE_NAMES: u32 = 268435456;
pub const CAL_ICALINTVALUE: u32 = 1;
pub const CAL_SCALNAME: u32 = 2;
pub const CAL_IYEAROFFSETRANGE: u32 = 3;
pub const CAL_SERASTRING: u32 = 4;
pub const CAL_SSHORTDATE: u32 = 5;
pub const CAL_SLONGDATE: u32 = 6;
pub const CAL_SDAYNAME1: u32 = 7;
pub const CAL_SDAYNAME2: u32 = 8;
pub const CAL_SDAYNAME3: u32 = 9;
pub const CAL_SDAYNAME4: u32 = 10;
pub const CAL_SDAYNAME5: u32 = 11;
pub const CAL_SDAYNAME6: u32 = 12;
pub const CAL_SDAYNAME7: u32 = 13;
pub const CAL_SABBREVDAYNAME1: u32 = 14;
pub const CAL_SABBREVDAYNAME2: u32 = 15;
pub const CAL_SABBREVDAYNAME3: u32 = 16;
pub const CAL_SABBREVDAYNAME4: u32 = 17;
pub const CAL_SABBREVDAYNAME5: u32 = 18;
pub const CAL_SABBREVDAYNAME6: u32 = 19;
pub const CAL_SABBREVDAYNAME7: u32 = 20;
pub const CAL_SMONTHNAME1: u32 = 21;
pub const CAL_SMONTHNAME2: u32 = 22;
pub const CAL_SMONTHNAME3: u32 = 23;
pub const CAL_SMONTHNAME4: u32 = 24;
pub const CAL_SMONTHNAME5: u32 = 25;
pub const CAL_SMONTHNAME6: u32 = 26;
pub const CAL_SMONTHNAME7: u32 = 27;
pub const CAL_SMONTHNAME8: u32 = 28;
pub const CAL_SMONTHNAME9: u32 = 29;
pub const CAL_SMONTHNAME10: u32 = 30;
pub const CAL_SMONTHNAME11: u32 = 31;
pub const CAL_SMONTHNAME12: u32 = 32;
pub const CAL_SMONTHNAME13: u32 = 33;
pub const CAL_SABBREVMONTHNAME1: u32 = 34;
pub const CAL_SABBREVMONTHNAME2: u32 = 35;
pub const CAL_SABBREVMONTHNAME3: u32 = 36;
pub const CAL_SABBREVMONTHNAME4: u32 = 37;
pub const CAL_SABBREVMONTHNAME5: u32 = 38;
pub const CAL_SABBREVMONTHNAME6: u32 = 39;
pub const CAL_SABBREVMONTHNAME7: u32 = 40;
pub const CAL_SABBREVMONTHNAME8: u32 = 41;
pub const CAL_SABBREVMONTHNAME9: u32 = 42;
pub const CAL_SABBREVMONTHNAME10: u32 = 43;
pub const CAL_SABBREVMONTHNAME11: u32 = 44;
pub const CAL_SABBREVMONTHNAME12: u32 = 45;
pub const CAL_SABBREVMONTHNAME13: u32 = 46;
pub const CAL_SYEARMONTH: u32 = 47;
pub const CAL_ITWODIGITYEARMAX: u32 = 48;
pub const CAL_SSHORTESTDAYNAME1: u32 = 49;
pub const CAL_SSHORTESTDAYNAME2: u32 = 50;
pub const CAL_SSHORTESTDAYNAME3: u32 = 51;
pub const CAL_SSHORTESTDAYNAME4: u32 = 52;
pub const CAL_SSHORTESTDAYNAME5: u32 = 53;
pub const CAL_SSHORTESTDAYNAME6: u32 = 54;
pub const CAL_SSHORTESTDAYNAME7: u32 = 55;
pub const CAL_SMONTHDAY: u32 = 56;
pub const CAL_SABBREVERASTRING: u32 = 57;
pub const CAL_SRELATIVELONGDATE: u32 = 58;
pub const CAL_SENGLISHERANAME: u32 = 59;
pub const CAL_SENGLISHABBREVERANAME: u32 = 60;
pub const CAL_SJAPANESEERAFIRSTYEAR: u32 = 61;
pub const ENUM_ALL_CALENDARS: u32 = 4294967295;
pub const CAL_GREGORIAN: u32 = 1;
pub const CAL_GREGORIAN_US: u32 = 2;
pub const CAL_JAPAN: u32 = 3;
pub const CAL_TAIWAN: u32 = 4;
pub const CAL_KOREA: u32 = 5;
pub const CAL_HIJRI: u32 = 6;
pub const CAL_THAI: u32 = 7;
pub const CAL_HEBREW: u32 = 8;
pub const CAL_GREGORIAN_ME_FRENCH: u32 = 9;
pub const CAL_GREGORIAN_ARABIC: u32 = 10;
pub const CAL_GREGORIAN_XLIT_ENGLISH: u32 = 11;
pub const CAL_GREGORIAN_XLIT_FRENCH: u32 = 12;
pub const CAL_PERSIAN: u32 = 22;
pub const CAL_UMALQURA: u32 = 23;
pub const LGRPID_WESTERN_EUROPE: u32 = 1;
pub const LGRPID_CENTRAL_EUROPE: u32 = 2;
pub const LGRPID_BALTIC: u32 = 3;
pub const LGRPID_GREEK: u32 = 4;
pub const LGRPID_CYRILLIC: u32 = 5;
pub const LGRPID_TURKIC: u32 = 6;
pub const LGRPID_TURKISH: u32 = 6;
pub const LGRPID_JAPANESE: u32 = 7;
pub const LGRPID_KOREAN: u32 = 8;
pub const LGRPID_TRADITIONAL_CHINESE: u32 = 9;
pub const LGRPID_SIMPLIFIED_CHINESE: u32 = 10;
pub const LGRPID_THAI: u32 = 11;
pub const LGRPID_HEBREW: u32 = 12;
pub const LGRPID_ARABIC: u32 = 13;
pub const LGRPID_VIETNAMESE: u32 = 14;
pub const LGRPID_INDIC: u32 = 15;
pub const LGRPID_GEORGIAN: u32 = 16;
pub const LGRPID_ARMENIAN: u32 = 17;
pub const MUI_LANGUAGE_ID: u32 = 4;
pub const MUI_LANGUAGE_NAME: u32 = 8;
pub const MUI_MERGE_SYSTEM_FALLBACK: u32 = 16;
pub const MUI_MERGE_USER_FALLBACK: u32 = 32;
pub const MUI_UI_FALLBACK: u32 = 48;
pub const MUI_THREAD_LANGUAGES: u32 = 64;
pub const MUI_CONSOLE_FILTER: u32 = 256;
pub const MUI_COMPLEX_SCRIPT_FILTER: u32 = 512;
pub const MUI_RESET_FILTERS: u32 = 1;
pub const MUI_USER_PREFERRED_UI_LANGUAGES: u32 = 16;
pub const MUI_USE_INSTALLED_LANGUAGES: u32 = 32;
pub const MUI_USE_SEARCH_ALL_LANGUAGES: u32 = 64;
pub const MUI_LANG_NEUTRAL_PE_FILE: u32 = 256;
pub const MUI_NON_LANG_NEUTRAL_FILE: u32 = 512;
pub const MUI_MACHINE_LANGUAGE_SETTINGS: u32 = 1024;
pub const MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL: u32 = 1;
pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN: u32 = 2;
pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI: u32 = 4;
pub const MUI_QUERY_TYPE: u32 = 1;
pub const MUI_QUERY_CHECKSUM: u32 = 2;
pub const MUI_QUERY_LANGUAGE_NAME: u32 = 4;
pub const MUI_QUERY_RESOURCE_TYPES: u32 = 8;
pub const MUI_FILEINFO_VERSION: u32 = 1;
pub const MUI_FULL_LANGUAGE: u32 = 1;
pub const MUI_PARTIAL_LANGUAGE: u32 = 2;
pub const MUI_LIP_LANGUAGE: u32 = 4;
pub const MUI_LANGUAGE_INSTALLED: u32 = 32;
pub const MUI_LANGUAGE_LICENSED: u32 = 64;
pub const GEOID_NOT_AVAILABLE: i32 = -1;
pub const SORTING_PARADIGM_NLS: u32 = 0;
pub const SORTING_PARADIGM_ICU: u32 = 16777216;
pub const IDN_ALLOW_UNASSIGNED: u32 = 1;
pub const IDN_USE_STD3_ASCII_RULES: u32 = 2;
pub const IDN_EMAIL_ADDRESS: u32 = 4;
pub const IDN_RAW_PUNYCODE: u32 = 8;
pub const VS_ALLOW_LATIN: u32 = 1;
pub const GSS_ALLOW_INHERITED_COMMON: u32 = 1;
pub const MUI_FORMAT_REG_COMPAT: u32 = 1;
pub const MUI_FORMAT_INF_COMPAT: u32 = 2;
pub const MUI_VERIFY_FILE_EXISTS: u32 = 4;
pub const MUI_SKIP_STRING_CACHE: u32 = 8;
pub const MUI_IMMUTABLE_LOOKUP: u32 = 16;
pub const LOCALE_NAME_INVARIANT: &[u8; 1] = b"\0";
pub const LOCALE_NAME_SYSTEM_DEFAULT: &[u8; 22] = b"!x-sys-default-locale\0";
pub const RIGHT_ALT_PRESSED: u32 = 1;
pub const LEFT_ALT_PRESSED: u32 = 2;
pub const RIGHT_CTRL_PRESSED: u32 = 4;
pub const LEFT_CTRL_PRESSED: u32 = 8;
pub const SHIFT_PRESSED: u32 = 16;
pub const NUMLOCK_ON: u32 = 32;
pub const SCROLLLOCK_ON: u32 = 64;
pub const CAPSLOCK_ON: u32 = 128;
pub const ENHANCED_KEY: u32 = 256;
pub const NLS_DBCSCHAR: u32 = 65536;
pub const NLS_ALPHANUMERIC: u32 = 0;
pub const NLS_KATAKANA: u32 = 131072;
pub const NLS_HIRAGANA: u32 = 262144;
pub const NLS_ROMAN: u32 = 4194304;
pub const NLS_IME_CONVERSION: u32 = 8388608;
pub const ALTNUMPAD_BIT: u32 = 67108864;
pub const NLS_IME_DISABLE: u32 = 536870912;
pub const FROM_LEFT_1ST_BUTTON_PRESSED: u32 = 1;
pub const RIGHTMOST_BUTTON_PRESSED: u32 = 2;
pub const FROM_LEFT_2ND_BUTTON_PRESSED: u32 = 4;
pub const FROM_LEFT_3RD_BUTTON_PRESSED: u32 = 8;
pub const FROM_LEFT_4TH_BUTTON_PRESSED: u32 = 16;
pub const MOUSE_MOVED: u32 = 1;
pub const DOUBLE_CLICK: u32 = 2;
pub const MOUSE_WHEELED: u32 = 4;
pub const MOUSE_HWHEELED: u32 = 8;
pub const KEY_EVENT: u32 = 1;
pub const MOUSE_EVENT: u32 = 2;
pub const WINDOW_BUFFER_SIZE_EVENT: u32 = 4;
pub const MENU_EVENT: u32 = 8;
pub const FOCUS_EVENT: u32 = 16;
pub const ENABLE_PROCESSED_INPUT: u32 = 1;
pub const ENABLE_LINE_INPUT: u32 = 2;
pub const ENABLE_ECHO_INPUT: u32 = 4;
pub const ENABLE_WINDOW_INPUT: u32 = 8;
pub const ENABLE_MOUSE_INPUT: u32 = 16;
pub const ENABLE_INSERT_MODE: u32 = 32;
pub const ENABLE_QUICK_EDIT_MODE: u32 = 64;
pub const ENABLE_EXTENDED_FLAGS: u32 = 128;
pub const ENABLE_AUTO_POSITION: u32 = 256;
pub const ENABLE_VIRTUAL_TERMINAL_INPUT: u32 = 512;
pub const ENABLE_PROCESSED_OUTPUT: u32 = 1;
pub const ENABLE_WRAP_AT_EOL_OUTPUT: u32 = 2;
pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING: u32 = 4;
pub const DISABLE_NEWLINE_AUTO_RETURN: u32 = 8;
pub const ENABLE_LVB_GRID_WORLDWIDE: u32 = 16;
pub const CTRL_C_EVENT: u32 = 0;
pub const CTRL_BREAK_EVENT: u32 = 1;
pub const CTRL_CLOSE_EVENT: u32 = 2;
pub const CTRL_LOGOFF_EVENT: u32 = 5;
pub const CTRL_SHUTDOWN_EVENT: u32 = 6;
pub const PSEUDOCONSOLE_INHERIT_CURSOR: u32 = 1;
pub const FOREGROUND_BLUE: u32 = 1;
pub const FOREGROUND_GREEN: u32 = 2;
pub const FOREGROUND_RED: u32 = 4;
pub const FOREGROUND_INTENSITY: u32 = 8;
pub const BACKGROUND_BLUE: u32 = 16;
pub const BACKGROUND_GREEN: u32 = 32;
pub const BACKGROUND_RED: u32 = 64;
pub const BACKGROUND_INTENSITY: u32 = 128;
pub const COMMON_LVB_LEADING_BYTE: u32 = 256;
pub const COMMON_LVB_TRAILING_BYTE: u32 = 512;
pub const COMMON_LVB_GRID_HORIZONTAL: u32 = 1024;
pub const COMMON_LVB_GRID_LVERTICAL: u32 = 2048;
pub const COMMON_LVB_GRID_RVERTICAL: u32 = 4096;
pub const COMMON_LVB_REVERSE_VIDEO: u32 = 16384;
pub const COMMON_LVB_UNDERSCORE: u32 = 32768;
pub const COMMON_LVB_SBCSDBCS: u32 = 768;
pub const CONSOLE_NO_SELECTION: u32 = 0;
pub const CONSOLE_SELECTION_IN_PROGRESS: u32 = 1;
pub const CONSOLE_SELECTION_NOT_EMPTY: u32 = 2;
pub const CONSOLE_MOUSE_SELECTION: u32 = 4;
pub const CONSOLE_MOUSE_DOWN: u32 = 8;
pub const HISTORY_NO_DUP_FLAG: u32 = 1;
pub const CONSOLE_FULLSCREEN: u32 = 1;
pub const CONSOLE_FULLSCREEN_HARDWARE: u32 = 2;
pub const CONSOLE_FULLSCREEN_MODE: u32 = 1;
pub const CONSOLE_WINDOWED_MODE: u32 = 2;
pub const CONSOLE_TEXTMODE_BUFFER: u32 = 1;
pub const VS_VERSION_INFO: u32 = 1;
pub const VS_USER_DEFINED: u32 = 100;
pub const VS_FFI_SIGNATURE: u32 = 4277077181;
pub const VS_FFI_STRUCVERSION: u32 = 65536;
pub const VS_FFI_FILEFLAGSMASK: u32 = 63;
pub const VS_FF_DEBUG: u32 = 1;
pub const VS_FF_PRERELEASE: u32 = 2;
pub const VS_FF_PATCHED: u32 = 4;
pub const VS_FF_PRIVATEBUILD: u32 = 8;
pub const VS_FF_INFOINFERRED: u32 = 16;
pub const VS_FF_SPECIALBUILD: u32 = 32;
pub const VOS_UNKNOWN: u32 = 0;
pub const VOS_DOS: u32 = 65536;
pub const VOS_OS216: u32 = 131072;
pub const VOS_OS232: u32 = 196608;
pub const VOS_NT: u32 = 262144;
pub const VOS_WINCE: u32 = 327680;
pub const VOS__BASE: u32 = 0;
pub const VOS__WINDOWS16: u32 = 1;
pub const VOS__PM16: u32 = 2;
pub const VOS__PM32: u32 = 3;
pub const VOS__WINDOWS32: u32 = 4;
pub const VOS_DOS_WINDOWS16: u32 = 65537;
pub const VOS_DOS_WINDOWS32: u32 = 65540;
pub const VOS_OS216_PM16: u32 = 131074;
pub const VOS_OS232_PM32: u32 = 196611;
pub const VOS_NT_WINDOWS32: u32 = 262148;
pub const VFT_UNKNOWN: u32 = 0;
pub const VFT_APP: u32 = 1;
pub const VFT_DLL: u32 = 2;
pub const VFT_DRV: u32 = 3;
pub const VFT_FONT: u32 = 4;
pub const VFT_VXD: u32 = 5;
pub const VFT_STATIC_LIB: u32 = 7;
pub const VFT2_UNKNOWN: u32 = 0;
pub const VFT2_DRV_PRINTER: u32 = 1;
pub const VFT2_DRV_KEYBOARD: u32 = 2;
pub const VFT2_DRV_LANGUAGE: u32 = 3;
pub const VFT2_DRV_DISPLAY: u32 = 4;
pub const VFT2_DRV_MOUSE: u32 = 5;
pub const VFT2_DRV_NETWORK: u32 = 6;
pub const VFT2_DRV_SYSTEM: u32 = 7;
pub const VFT2_DRV_INSTALLABLE: u32 = 8;
pub const VFT2_DRV_SOUND: u32 = 9;
pub const VFT2_DRV_COMM: u32 = 10;
pub const VFT2_DRV_INPUTMETHOD: u32 = 11;
pub const VFT2_DRV_VERSIONED_PRINTER: u32 = 12;
pub const VFT2_FONT_RASTER: u32 = 1;
pub const VFT2_FONT_VECTOR: u32 = 2;
pub const VFT2_FONT_TRUETYPE: u32 = 3;
pub const VFFF_ISSHAREDFILE: u32 = 1;
pub const VFF_CURNEDEST: u32 = 1;
pub const VFF_FILEINUSE: u32 = 2;
pub const VFF_BUFFTOOSMALL: u32 = 4;
pub const VIFF_FORCEINSTALL: u32 = 1;
pub const VIFF_DONTDELETEOLD: u32 = 2;
pub const VIF_TEMPFILE: u32 = 1;
pub const VIF_MISMATCH: u32 = 2;
pub const VIF_SRCOLD: u32 = 4;
pub const VIF_DIFFLANG: u32 = 8;
pub const VIF_DIFFCODEPG: u32 = 16;
pub const VIF_DIFFTYPE: u32 = 32;
pub const VIF_WRITEPROT: u32 = 64;
pub const VIF_FILEINUSE: u32 = 128;
pub const VIF_OUTOFSPACE: u32 = 256;
pub const VIF_ACCESSVIOLATION: u32 = 512;
pub const VIF_SHARINGVIOLATION: u32 = 1024;
pub const VIF_CANNOTCREATE: u32 = 2048;
pub const VIF_CANNOTDELETE: u32 = 4096;
pub const VIF_CANNOTRENAME: u32 = 8192;
pub const VIF_CANNOTDELETECUR: u32 = 16384;
pub const VIF_OUTOFMEMORY: u32 = 32768;
pub const VIF_CANNOTREADSRC: u32 = 65536;
pub const VIF_CANNOTREADDST: u32 = 131072;
pub const VIF_BUFFTOOSMALL: u32 = 262144;
pub const VIF_CANNOTLOADLZ32: u32 = 524288;
pub const VIF_CANNOTLOADCABINET: u32 = 1048576;
pub const FILE_VER_GET_LOCALISED: u32 = 1;
pub const FILE_VER_GET_NEUTRAL: u32 = 2;
pub const FILE_VER_GET_PREFETCHED: u32 = 4;
pub const RRF_RT_REG_NONE: u32 = 1;
pub const RRF_RT_REG_SZ: u32 = 2;
pub const RRF_RT_REG_EXPAND_SZ: u32 = 4;
pub const RRF_RT_REG_BINARY: u32 = 8;
pub const RRF_RT_REG_DWORD: u32 = 16;
pub const RRF_RT_REG_MULTI_SZ: u32 = 32;
pub const RRF_RT_REG_QWORD: u32 = 64;
pub const RRF_RT_DWORD: u32 = 24;
pub const RRF_RT_QWORD: u32 = 72;
pub const RRF_RT_ANY: u32 = 65535;
pub const RRF_SUBKEY_WOW6464KEY: u32 = 65536;
pub const RRF_SUBKEY_WOW6432KEY: u32 = 131072;
pub const RRF_WOW64_MASK: u32 = 196608;
pub const RRF_NOEXPAND: u32 = 268435456;
pub const RRF_ZEROONFAILURE: u32 = 536870912;
pub const REG_PROCESS_APPKEY: u32 = 1;
pub const REG_USE_CURRENT_SECURITY_CONTEXT: u32 = 2;
pub const PROVIDER_KEEPS_VALUE_LENGTH: u32 = 1;
pub const REG_MUI_STRING_TRUNCATE: u32 = 1;
pub const REG_SECURE_CONNECTION: u32 = 1;
pub const REG_ALLOW_TRANSPORT_FALLBACK: u32 = 2;
pub const REG_ALLOW_UNSECURE_CONNECTION: u32 = 4;
pub const SHTDN_REASON_FLAG_COMMENT_REQUIRED: u32 = 16777216;
pub const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED: u32 = 33554432;
pub const SHTDN_REASON_FLAG_CLEAN_UI: u32 = 67108864;
pub const SHTDN_REASON_FLAG_DIRTY_UI: u32 = 134217728;
pub const SHTDN_REASON_FLAG_MOBILE_UI_RESERVED: u32 = 268435456;
pub const SHTDN_REASON_FLAG_USER_DEFINED: u32 = 1073741824;
pub const SHTDN_REASON_FLAG_PLANNED: u32 = 2147483648;
pub const SHTDN_REASON_MAJOR_OTHER: u32 = 0;
pub const SHTDN_REASON_MAJOR_NONE: u32 = 0;
pub const SHTDN_REASON_MAJOR_HARDWARE: u32 = 65536;
pub const SHTDN_REASON_MAJOR_OPERATINGSYSTEM: u32 = 131072;
pub const SHTDN_REASON_MAJOR_SOFTWARE: u32 = 196608;
pub const SHTDN_REASON_MAJOR_APPLICATION: u32 = 262144;
pub const SHTDN_REASON_MAJOR_SYSTEM: u32 = 327680;
pub const SHTDN_REASON_MAJOR_POWER: u32 = 393216;
pub const SHTDN_REASON_MAJOR_LEGACY_API: u32 = 458752;
pub const SHTDN_REASON_MINOR_OTHER: u32 = 0;
pub const SHTDN_REASON_MINOR_NONE: u32 = 255;
pub const SHTDN_REASON_MINOR_MAINTENANCE: u32 = 1;
pub const SHTDN_REASON_MINOR_INSTALLATION: u32 = 2;
pub const SHTDN_REASON_MINOR_UPGRADE: u32 = 3;
pub const SHTDN_REASON_MINOR_RECONFIG: u32 = 4;
pub const SHTDN_REASON_MINOR_HUNG: u32 = 5;
pub const SHTDN_REASON_MINOR_UNSTABLE: u32 = 6;
pub const SHTDN_REASON_MINOR_DISK: u32 = 7;
pub const SHTDN_REASON_MINOR_PROCESSOR: u32 = 8;
pub const SHTDN_REASON_MINOR_NETWORKCARD: u32 = 9;
pub const SHTDN_REASON_MINOR_POWER_SUPPLY: u32 = 10;
pub const SHTDN_REASON_MINOR_CORDUNPLUGGED: u32 = 11;
pub const SHTDN_REASON_MINOR_ENVIRONMENT: u32 = 12;
pub const SHTDN_REASON_MINOR_HARDWARE_DRIVER: u32 = 13;
pub const SHTDN_REASON_MINOR_OTHERDRIVER: u32 = 14;
pub const SHTDN_REASON_MINOR_BLUESCREEN: u32 = 15;
pub const SHTDN_REASON_MINOR_SERVICEPACK: u32 = 16;
pub const SHTDN_REASON_MINOR_HOTFIX: u32 = 17;
pub const SHTDN_REASON_MINOR_SECURITYFIX: u32 = 18;
pub const SHTDN_REASON_MINOR_SECURITY: u32 = 19;
pub const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY: u32 = 20;
pub const SHTDN_REASON_MINOR_WMI: u32 = 21;
pub const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL: u32 = 22;
pub const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL: u32 = 23;
pub const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL: u32 = 24;
pub const SHTDN_REASON_MINOR_MMC: u32 = 25;
pub const SHTDN_REASON_MINOR_SYSTEMRESTORE: u32 = 26;
pub const SHTDN_REASON_MINOR_TERMSRV: u32 = 32;
pub const SHTDN_REASON_MINOR_DC_PROMOTION: u32 = 33;
pub const SHTDN_REASON_MINOR_DC_DEMOTION: u32 = 34;
pub const SHTDN_REASON_UNKNOWN: u32 = 255;
pub const SHTDN_REASON_LEGACY_API: u32 = 2147942400;
pub const SHTDN_REASON_VALID_BIT_MASK: u32 = 3238002687;
pub const PCLEANUI: u32 = 2214592512;
pub const UCLEANUI: u32 = 67108864;
pub const PDIRTYUI: u32 = 2281701376;
pub const UDIRTYUI: u32 = 134217728;
pub const MAX_REASON_NAME_LEN: u32 = 64;
pub const MAX_REASON_DESC_LEN: u32 = 256;
pub const MAX_REASON_BUGID_LEN: u32 = 32;
pub const MAX_REASON_COMMENT_LEN: u32 = 512;
pub const SHUTDOWN_TYPE_LEN: u32 = 32;
pub const POLICY_SHOWREASONUI_NEVER: u32 = 0;
pub const POLICY_SHOWREASONUI_ALWAYS: u32 = 1;
pub const POLICY_SHOWREASONUI_WORKSTATIONONLY: u32 = 2;
pub const POLICY_SHOWREASONUI_SERVERONLY: u32 = 3;
pub const SNAPSHOT_POLICY_NEVER: u32 = 0;
pub const SNAPSHOT_POLICY_ALWAYS: u32 = 1;
pub const SNAPSHOT_POLICY_UNPLANNED: u32 = 2;
pub const MAX_NUM_REASONS: u32 = 256;
pub const REASON_SWINSTALL: u32 = 196610;
pub const REASON_HWINSTALL: u32 = 65538;
pub const REASON_SERVICEHANG: u32 = 196613;
pub const REASON_UNSTABLE: u32 = 327686;
pub const REASON_SWHWRECONF: u32 = 196612;
pub const REASON_OTHER: u32 = 0;
pub const REASON_UNKNOWN: u32 = 255;
pub const REASON_LEGACY_API: u32 = 2147942400;
pub const REASON_PLANNED_FLAG: u32 = 2147483648;
pub const MAX_SHUTDOWN_TIMEOUT: u32 = 315360000;
pub const SHUTDOWN_FORCE_OTHERS: u32 = 1;
pub const SHUTDOWN_FORCE_SELF: u32 = 2;
pub const SHUTDOWN_RESTART: u32 = 4;
pub const SHUTDOWN_POWEROFF: u32 = 8;
pub const SHUTDOWN_NOREBOOT: u32 = 16;
pub const SHUTDOWN_GRACE_OVERRIDE: u32 = 32;
pub const SHUTDOWN_INSTALL_UPDATES: u32 = 64;
pub const SHUTDOWN_RESTARTAPPS: u32 = 128;
pub const SHUTDOWN_SKIP_SVC_PRESHUTDOWN: u32 = 256;
pub const SHUTDOWN_HYBRID: u32 = 512;
pub const SHUTDOWN_RESTART_BOOTOPTIONS: u32 = 1024;
pub const SHUTDOWN_SOFT_REBOOT: u32 = 2048;
pub const SHUTDOWN_MOBILE_UI: u32 = 4096;
pub const SHUTDOWN_ARSO: u32 = 8192;
pub const SHUTDOWN_CHECK_SAFE_FOR_SERVER: u32 = 16384;
pub const SHUTDOWN_VAIL_CONTAINER: u32 = 32768;
pub const SHUTDOWN_SYSTEM_INITIATED: u32 = 65536;
pub const WNNC_NET_MSNET: u32 = 65536;
pub const WNNC_NET_SMB: u32 = 131072;
pub const WNNC_NET_NETWARE: u32 = 196608;
pub const WNNC_NET_VINES: u32 = 262144;
pub const WNNC_NET_10NET: u32 = 327680;
pub const WNNC_NET_LOCUS: u32 = 393216;
pub const WNNC_NET_SUN_PC_NFS: u32 = 458752;
pub const WNNC_NET_LANSTEP: u32 = 524288;
pub const WNNC_NET_9TILES: u32 = 589824;
pub const WNNC_NET_LANTASTIC: u32 = 655360;
pub const WNNC_NET_AS400: u32 = 720896;
pub const WNNC_NET_FTP_NFS: u32 = 786432;
pub const WNNC_NET_PATHWORKS: u32 = 851968;
pub const WNNC_NET_LIFENET: u32 = 917504;
pub const WNNC_NET_POWERLAN: u32 = 983040;
pub const WNNC_NET_BWNFS: u32 = 1048576;
pub const WNNC_NET_COGENT: u32 = 1114112;
pub const WNNC_NET_FARALLON: u32 = 1179648;
pub const WNNC_NET_APPLETALK: u32 = 1245184;
pub const WNNC_NET_INTERGRAPH: u32 = 1310720;
pub const WNNC_NET_SYMFONET: u32 = 1376256;
pub const WNNC_NET_CLEARCASE: u32 = 1441792;
pub const WNNC_NET_FRONTIER: u32 = 1507328;
pub const WNNC_NET_BMC: u32 = 1572864;
pub const WNNC_NET_DCE: u32 = 1638400;
pub const WNNC_NET_AVID: u32 = 1703936;
pub const WNNC_NET_DOCUSPACE: u32 = 1769472;
pub const WNNC_NET_MANGOSOFT: u32 = 1835008;
pub const WNNC_NET_SERNET: u32 = 1900544;
pub const WNNC_NET_RIVERFRONT1: u32 = 1966080;
pub const WNNC_NET_RIVERFRONT2: u32 = 2031616;
pub const WNNC_NET_DECORB: u32 = 2097152;
pub const WNNC_NET_PROTSTOR: u32 = 2162688;
pub const WNNC_NET_FJ_REDIR: u32 = 2228224;
pub const WNNC_NET_DISTINCT: u32 = 2293760;
pub const WNNC_NET_TWINS: u32 = 2359296;
pub const WNNC_NET_RDR2SAMPLE: u32 = 2424832;
pub const WNNC_NET_CSC: u32 = 2490368;
pub const WNNC_NET_3IN1: u32 = 2555904;
pub const WNNC_NET_EXTENDNET: u32 = 2686976;
pub const WNNC_NET_STAC: u32 = 2752512;
pub const WNNC_NET_FOXBAT: u32 = 2818048;
pub const WNNC_NET_YAHOO: u32 = 2883584;
pub const WNNC_NET_EXIFS: u32 = 2949120;
pub const WNNC_NET_DAV: u32 = 3014656;
pub const WNNC_NET_KNOWARE: u32 = 3080192;
pub const WNNC_NET_OBJECT_DIRE: u32 = 3145728;
pub const WNNC_NET_MASFAX: u32 = 3211264;
pub const WNNC_NET_HOB_NFS: u32 = 3276800;
pub const WNNC_NET_SHIVA: u32 = 3342336;
pub const WNNC_NET_IBMAL: u32 = 3407872;
pub const WNNC_NET_LOCK: u32 = 3473408;
pub const WNNC_NET_TERMSRV: u32 = 3538944;
pub const WNNC_NET_SRT: u32 = 3604480;
pub const WNNC_NET_QUINCY: u32 = 3670016;
pub const WNNC_NET_OPENAFS: u32 = 3735552;
pub const WNNC_NET_AVID1: u32 = 3801088;
pub const WNNC_NET_DFS: u32 = 3866624;
pub const WNNC_NET_KWNP: u32 = 3932160;
pub const WNNC_NET_ZENWORKS: u32 = 3997696;
pub const WNNC_NET_DRIVEONWEB: u32 = 4063232;
pub const WNNC_NET_VMWARE: u32 = 4128768;
pub const WNNC_NET_RSFX: u32 = 4194304;
pub const WNNC_NET_MFILES: u32 = 4259840;
pub const WNNC_NET_MS_NFS: u32 = 4325376;
pub const WNNC_NET_GOOGLE: u32 = 4390912;
pub const WNNC_NET_NDFS: u32 = 4456448;
pub const WNNC_NET_DOCUSHARE: u32 = 4521984;
pub const WNNC_NET_AURISTOR_FS: u32 = 4587520;
pub const WNNC_NET_SECUREAGENT: u32 = 4653056;
pub const WNNC_NET_9P: u32 = 4718592;
pub const WNNC_CRED_MANAGER: u32 = 4294901760;
pub const WNNC_NET_LANMAN: u32 = 131072;
pub const RESOURCE_CONNECTED: u32 = 1;
pub const RESOURCE_GLOBALNET: u32 = 2;
pub const RESOURCE_REMEMBERED: u32 = 3;
pub const RESOURCE_RECENT: u32 = 4;
pub const RESOURCE_CONTEXT: u32 = 5;
pub const RESOURCETYPE_ANY: u32 = 0;
pub const RESOURCETYPE_DISK: u32 = 1;
pub const RESOURCETYPE_PRINT: u32 = 2;
pub const RESOURCETYPE_RESERVED: u32 = 8;
pub const RESOURCETYPE_UNKNOWN: u32 = 4294967295;
pub const RESOURCEUSAGE_CONNECTABLE: u32 = 1;
pub const RESOURCEUSAGE_CONTAINER: u32 = 2;
pub const RESOURCEUSAGE_NOLOCALDEVICE: u32 = 4;
pub const RESOURCEUSAGE_SIBLING: u32 = 8;
pub const RESOURCEUSAGE_ATTACHED: u32 = 16;
pub const RESOURCEUSAGE_ALL: u32 = 19;
pub const RESOURCEUSAGE_RESERVED: u32 = 2147483648;
pub const RESOURCEDISPLAYTYPE_GENERIC: u32 = 0;
pub const RESOURCEDISPLAYTYPE_DOMAIN: u32 = 1;
pub const RESOURCEDISPLAYTYPE_SERVER: u32 = 2;
pub const RESOURCEDISPLAYTYPE_SHARE: u32 = 3;
pub const RESOURCEDISPLAYTYPE_FILE: u32 = 4;
pub const RESOURCEDISPLAYTYPE_GROUP: u32 = 5;
pub const RESOURCEDISPLAYTYPE_NETWORK: u32 = 6;
pub const RESOURCEDISPLAYTYPE_ROOT: u32 = 7;
pub const RESOURCEDISPLAYTYPE_SHAREADMIN: u32 = 8;
pub const RESOURCEDISPLAYTYPE_DIRECTORY: u32 = 9;
pub const RESOURCEDISPLAYTYPE_TREE: u32 = 10;
pub const RESOURCEDISPLAYTYPE_NDSCONTAINER: u32 = 11;
pub const NETPROPERTY_PERSISTENT: u32 = 1;
pub const CONNECT_UPDATE_PROFILE: u32 = 1;
pub const CONNECT_UPDATE_RECENT: u32 = 2;
pub const CONNECT_TEMPORARY: u32 = 4;
pub const CONNECT_INTERACTIVE: u32 = 8;
pub const CONNECT_PROMPT: u32 = 16;
pub const CONNECT_NEED_DRIVE: u32 = 32;
pub const CONNECT_REFCOUNT: u32 = 64;
pub const CONNECT_REDIRECT: u32 = 128;
pub const CONNECT_LOCALDRIVE: u32 = 256;
pub const CONNECT_CURRENT_MEDIA: u32 = 512;
pub const CONNECT_DEFERRED: u32 = 1024;
pub const CONNECT_RESERVED: u32 = 4278190080;
pub const CONNECT_COMMANDLINE: u32 = 2048;
pub const CONNECT_CMD_SAVECRED: u32 = 4096;
pub const CONNECT_CRED_RESET: u32 = 8192;
pub const CONNECT_REQUIRE_INTEGRITY: u32 = 16384;
pub const CONNECT_REQUIRE_PRIVACY: u32 = 32768;
pub const CONNECT_WRITE_THROUGH_SEMANTICS: u32 = 65536;
pub const CONNECT_GLOBAL_MAPPING: u32 = 262144;
pub const CONNDLG_RO_PATH: u32 = 1;
pub const CONNDLG_CONN_POINT: u32 = 2;
pub const CONNDLG_USE_MRU: u32 = 4;
pub const CONNDLG_HIDE_BOX: u32 = 8;
pub const CONNDLG_PERSIST: u32 = 16;
pub const CONNDLG_NOT_PERSIST: u32 = 32;
pub const DISC_UPDATE_PROFILE: u32 = 1;
pub const DISC_NO_FORCE: u32 = 64;
pub const UNIVERSAL_NAME_INFO_LEVEL: u32 = 1;
pub const REMOTE_NAME_INFO_LEVEL: u32 = 2;
pub const WNFMT_MULTILINE: u32 = 1;
pub const WNFMT_ABBREVIATED: u32 = 2;
pub const WNFMT_INENUM: u32 = 16;
pub const WNFMT_CONNECTION: u32 = 32;
pub const NETINFO_DLL16: u32 = 1;
pub const NETINFO_DISKRED: u32 = 4;
pub const NETINFO_PRINTERRED: u32 = 8;
pub const WN_SUCCESS: u32 = 0;
pub const WN_NO_ERROR: u32 = 0;
pub const WN_NOT_SUPPORTED: u32 = 50;
pub const WN_CANCEL: u32 = 1223;
pub const WN_RETRY: u32 = 1237;
pub const WN_NET_ERROR: u32 = 59;
pub const WN_MORE_DATA: u32 = 234;
pub const WN_BAD_POINTER: u32 = 487;
pub const WN_BAD_VALUE: u32 = 87;
pub const WN_BAD_USER: u32 = 2202;
pub const WN_BAD_PASSWORD: u32 = 86;
pub const WN_ACCESS_DENIED: u32 = 5;
pub const WN_FUNCTION_BUSY: u32 = 170;
pub const WN_WINDOWS_ERROR: u32 = 59;
pub const WN_OUT_OF_MEMORY: u32 = 8;
pub const WN_NO_NETWORK: u32 = 1222;
pub const WN_EXTENDED_ERROR: u32 = 1208;
pub const WN_BAD_LEVEL: u32 = 124;
pub const WN_BAD_HANDLE: u32 = 6;
pub const WN_NOT_INITIALIZING: u32 = 1247;
pub const WN_NO_MORE_DEVICES: u32 = 1248;
pub const WN_NOT_CONNECTED: u32 = 2250;
pub const WN_OPEN_FILES: u32 = 2401;
pub const WN_DEVICE_IN_USE: u32 = 2404;
pub const WN_BAD_NETNAME: u32 = 67;
pub const WN_BAD_LOCALNAME: u32 = 1200;
pub const WN_ALREADY_CONNECTED: u32 = 85;
pub const WN_DEVICE_ERROR: u32 = 31;
pub const WN_CONNECTION_CLOSED: u32 = 1201;
pub const WN_NO_NET_OR_BAD_PATH: u32 = 1203;
pub const WN_BAD_PROVIDER: u32 = 1204;
pub const WN_CANNOT_OPEN_PROFILE: u32 = 1205;
pub const WN_BAD_PROFILE: u32 = 1206;
pub const WN_BAD_DEV_TYPE: u32 = 66;
pub const WN_DEVICE_ALREADY_REMEMBERED: u32 = 1202;
pub const WN_CONNECTED_OTHER_PASSWORD: u32 = 2108;
pub const WN_CONNECTED_OTHER_PASSWORD_DEFAULT: u32 = 2109;
pub const WN_NO_MORE_ENTRIES: u32 = 259;
pub const WN_NOT_CONTAINER: u32 = 1207;
pub const WN_NOT_AUTHENTICATED: u32 = 1244;
pub const WN_NOT_LOGGED_ON: u32 = 1245;
pub const WN_NOT_VALIDATED: u32 = 1311;
pub const WNCON_FORNETCARD: u32 = 1;
pub const WNCON_NOTROUTED: u32 = 2;
pub const WNCON_SLOWLINK: u32 = 4;
pub const WNCON_DYNAMIC: u32 = 8;
pub const _STRALIGN_USE_SECURE_CRT: u32 = 1;
pub const SERVICES_ACTIVE_DATABASEW: &[u8; 15] = b"ServicesActive\0";
pub const SERVICES_FAILED_DATABASEW: &[u8; 15] = b"ServicesFailed\0";
pub const SERVICES_ACTIVE_DATABASEA: &[u8; 15] = b"ServicesActive\0";
pub const SERVICES_FAILED_DATABASEA: &[u8; 15] = b"ServicesFailed\0";
pub const SC_GROUP_IDENTIFIERW: u8 = 43u8;
pub const SC_GROUP_IDENTIFIERA: u8 = 43u8;
pub const SERVICES_ACTIVE_DATABASE: &[u8; 15] = b"ServicesActive\0";
pub const SERVICES_FAILED_DATABASE: &[u8; 15] = b"ServicesFailed\0";
pub const SC_GROUP_IDENTIFIER: u8 = 43u8;
pub const SERVICE_NO_CHANGE: u32 = 4294967295;
pub const SERVICE_ACTIVE: u32 = 1;
pub const SERVICE_INACTIVE: u32 = 2;
pub const SERVICE_STATE_ALL: u32 = 3;
pub const SERVICE_CONTROL_STOP: u32 = 1;
pub const SERVICE_CONTROL_PAUSE: u32 = 2;
pub const SERVICE_CONTROL_CONTINUE: u32 = 3;
pub const SERVICE_CONTROL_INTERROGATE: u32 = 4;
pub const SERVICE_CONTROL_SHUTDOWN: u32 = 5;
pub const SERVICE_CONTROL_PARAMCHANGE: u32 = 6;
pub const SERVICE_CONTROL_NETBINDADD: u32 = 7;
pub const SERVICE_CONTROL_NETBINDREMOVE: u32 = 8;
pub const SERVICE_CONTROL_NETBINDENABLE: u32 = 9;
pub const SERVICE_CONTROL_NETBINDDISABLE: u32 = 10;
pub const SERVICE_CONTROL_DEVICEEVENT: u32 = 11;
pub const SERVICE_CONTROL_HARDWAREPROFILECHANGE: u32 = 12;
pub const SERVICE_CONTROL_POWEREVENT: u32 = 13;
pub const SERVICE_CONTROL_SESSIONCHANGE: u32 = 14;
pub const SERVICE_CONTROL_PRESHUTDOWN: u32 = 15;
pub const SERVICE_CONTROL_TIMECHANGE: u32 = 16;
pub const SERVICE_CONTROL_TRIGGEREVENT: u32 = 32;
pub const SERVICE_CONTROL_LOWRESOURCES: u32 = 96;
pub const SERVICE_CONTROL_SYSTEMLOWRESOURCES: u32 = 97;
pub const SERVICE_STOPPED: u32 = 1;
pub const SERVICE_START_PENDING: u32 = 2;
pub const SERVICE_STOP_PENDING: u32 = 3;
pub const SERVICE_RUNNING: u32 = 4;
pub const SERVICE_CONTINUE_PENDING: u32 = 5;
pub const SERVICE_PAUSE_PENDING: u32 = 6;
pub const SERVICE_PAUSED: u32 = 7;
pub const SERVICE_ACCEPT_STOP: u32 = 1;
pub const SERVICE_ACCEPT_PAUSE_CONTINUE: u32 = 2;
pub const SERVICE_ACCEPT_SHUTDOWN: u32 = 4;
pub const SERVICE_ACCEPT_PARAMCHANGE: u32 = 8;
pub const SERVICE_ACCEPT_NETBINDCHANGE: u32 = 16;
pub const SERVICE_ACCEPT_HARDWAREPROFILECHANGE: u32 = 32;
pub const SERVICE_ACCEPT_POWEREVENT: u32 = 64;
pub const SERVICE_ACCEPT_SESSIONCHANGE: u32 = 128;
pub const SERVICE_ACCEPT_PRESHUTDOWN: u32 = 256;
pub const SERVICE_ACCEPT_TIMECHANGE: u32 = 512;
pub const SERVICE_ACCEPT_TRIGGEREVENT: u32 = 1024;
pub const SERVICE_ACCEPT_USER_LOGOFF: u32 = 2048;
pub const SERVICE_ACCEPT_LOWRESOURCES: u32 = 8192;
pub const SERVICE_ACCEPT_SYSTEMLOWRESOURCES: u32 = 16384;
pub const SC_MANAGER_CONNECT: u32 = 1;
pub const SC_MANAGER_CREATE_SERVICE: u32 = 2;
pub const SC_MANAGER_ENUMERATE_SERVICE: u32 = 4;
pub const SC_MANAGER_LOCK: u32 = 8;
pub const SC_MANAGER_QUERY_LOCK_STATUS: u32 = 16;
pub const SC_MANAGER_MODIFY_BOOT_CONFIG: u32 = 32;
pub const SC_MANAGER_ALL_ACCESS: u32 = 983103;
pub const SERVICE_QUERY_CONFIG: u32 = 1;
pub const SERVICE_CHANGE_CONFIG: u32 = 2;
pub const SERVICE_QUERY_STATUS: u32 = 4;
pub const SERVICE_ENUMERATE_DEPENDENTS: u32 = 8;
pub const SERVICE_START: u32 = 16;
pub const SERVICE_STOP: u32 = 32;
pub const SERVICE_PAUSE_CONTINUE: u32 = 64;
pub const SERVICE_INTERROGATE: u32 = 128;
pub const SERVICE_USER_DEFINED_CONTROL: u32 = 256;
pub const SERVICE_ALL_ACCESS: u32 = 983551;
pub const SERVICE_RUNS_IN_SYSTEM_PROCESS: u32 = 1;
pub const SERVICE_CONFIG_DESCRIPTION: u32 = 1;
pub const SERVICE_CONFIG_FAILURE_ACTIONS: u32 = 2;
pub const SERVICE_CONFIG_DELAYED_AUTO_START_INFO: u32 = 3;
pub const SERVICE_CONFIG_FAILURE_ACTIONS_FLAG: u32 = 4;
pub const SERVICE_CONFIG_SERVICE_SID_INFO: u32 = 5;
pub const SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO: u32 = 6;
pub const SERVICE_CONFIG_PRESHUTDOWN_INFO: u32 = 7;
pub const SERVICE_CONFIG_TRIGGER_INFO: u32 = 8;
pub const SERVICE_CONFIG_PREFERRED_NODE: u32 = 9;
pub const SERVICE_CONFIG_LAUNCH_PROTECTED: u32 = 12;
pub const SERVICE_NOTIFY_STATUS_CHANGE_1: u32 = 1;
pub const SERVICE_NOTIFY_STATUS_CHANGE_2: u32 = 2;
pub const SERVICE_NOTIFY_STATUS_CHANGE: u32 = 2;
pub const SERVICE_NOTIFY_STOPPED: u32 = 1;
pub const SERVICE_NOTIFY_START_PENDING: u32 = 2;
pub const SERVICE_NOTIFY_STOP_PENDING: u32 = 4;
pub const SERVICE_NOTIFY_RUNNING: u32 = 8;
pub const SERVICE_NOTIFY_CONTINUE_PENDING: u32 = 16;
pub const SERVICE_NOTIFY_PAUSE_PENDING: u32 = 32;
pub const SERVICE_NOTIFY_PAUSED: u32 = 64;
pub const SERVICE_NOTIFY_CREATED: u32 = 128;
pub const SERVICE_NOTIFY_DELETED: u32 = 256;
pub const SERVICE_NOTIFY_DELETE_PENDING: u32 = 512;
pub const SERVICE_STOP_REASON_FLAG_MIN: u32 = 0;
pub const SERVICE_STOP_REASON_FLAG_UNPLANNED: u32 = 268435456;
pub const SERVICE_STOP_REASON_FLAG_CUSTOM: u32 = 536870912;
pub const SERVICE_STOP_REASON_FLAG_PLANNED: u32 = 1073741824;
pub const SERVICE_STOP_REASON_FLAG_MAX: u32 = 2147483648;
pub const SERVICE_STOP_REASON_MAJOR_MIN: u32 = 0;
pub const SERVICE_STOP_REASON_MAJOR_OTHER: u32 = 65536;
pub const SERVICE_STOP_REASON_MAJOR_HARDWARE: u32 = 131072;
pub const SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM: u32 = 196608;
pub const SERVICE_STOP_REASON_MAJOR_SOFTWARE: u32 = 262144;
pub const SERVICE_STOP_REASON_MAJOR_APPLICATION: u32 = 327680;
pub const SERVICE_STOP_REASON_MAJOR_NONE: u32 = 393216;
pub const SERVICE_STOP_REASON_MAJOR_MAX: u32 = 458752;
pub const SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM: u32 = 4194304;
pub const SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM: u32 = 16711680;
pub const SERVICE_STOP_REASON_MINOR_MIN: u32 = 0;
pub const SERVICE_STOP_REASON_MINOR_OTHER: u32 = 1;
pub const SERVICE_STOP_REASON_MINOR_MAINTENANCE: u32 = 2;
pub const SERVICE_STOP_REASON_MINOR_INSTALLATION: u32 = 3;
pub const SERVICE_STOP_REASON_MINOR_UPGRADE: u32 = 4;
pub const SERVICE_STOP_REASON_MINOR_RECONFIG: u32 = 5;
pub const SERVICE_STOP_REASON_MINOR_HUNG: u32 = 6;
pub const SERVICE_STOP_REASON_MINOR_UNSTABLE: u32 = 7;
pub const SERVICE_STOP_REASON_MINOR_DISK: u32 = 8;
pub const SERVICE_STOP_REASON_MINOR_NETWORKCARD: u32 = 9;
pub const SERVICE_STOP_REASON_MINOR_ENVIRONMENT: u32 = 10;
pub const SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER: u32 = 11;
pub const SERVICE_STOP_REASON_MINOR_OTHERDRIVER: u32 = 12;
pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK: u32 = 13;
pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE: u32 = 14;
pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX: u32 = 15;
pub const SERVICE_STOP_REASON_MINOR_SECURITY: u32 = 16;
pub const SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY: u32 = 17;
pub const SERVICE_STOP_REASON_MINOR_WMI: u32 = 18;
pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL: u32 = 19;
pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL: u32 = 20;
pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL: u32 = 21;
pub const SERVICE_STOP_REASON_MINOR_MMC: u32 = 22;
pub const SERVICE_STOP_REASON_MINOR_NONE: u32 = 23;
pub const SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT: u32 = 24;
pub const SERVICE_STOP_REASON_MINOR_MAX: u32 = 25;
pub const SERVICE_STOP_REASON_MINOR_MIN_CUSTOM: u32 = 256;
pub const SERVICE_STOP_REASON_MINOR_MAX_CUSTOM: u32 = 65535;
pub const SERVICE_CONTROL_STATUS_REASON_INFO: u32 = 1;
pub const SERVICE_SID_TYPE_NONE: u32 = 0;
pub const SERVICE_SID_TYPE_UNRESTRICTED: u32 = 1;
pub const SERVICE_SID_TYPE_RESTRICTED: u32 = 3;
pub const SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL: u32 = 1;
pub const SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY: u32 = 2;
pub const SERVICE_TRIGGER_TYPE_DOMAIN_JOIN: u32 = 3;
pub const SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT: u32 = 4;
pub const SERVICE_TRIGGER_TYPE_GROUP_POLICY: u32 = 5;
pub const SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT: u32 = 6;
pub const SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE: u32 = 7;
pub const SERVICE_TRIGGER_TYPE_CUSTOM: u32 = 20;
pub const SERVICE_TRIGGER_TYPE_AGGREGATE: u32 = 30;
pub const SERVICE_TRIGGER_DATA_TYPE_BINARY: u32 = 1;
pub const SERVICE_TRIGGER_DATA_TYPE_STRING: u32 = 2;
pub const SERVICE_TRIGGER_DATA_TYPE_LEVEL: u32 = 3;
pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY: u32 = 4;
pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL: u32 = 5;
pub const SERVICE_START_REASON_DEMAND: u32 = 1;
pub const SERVICE_START_REASON_AUTO: u32 = 2;
pub const SERVICE_START_REASON_TRIGGER: u32 = 4;
pub const SERVICE_START_REASON_RESTART_ON_FAILURE: u32 = 8;
pub const SERVICE_START_REASON_DELAYEDAUTO: u32 = 16;
pub const SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON: u32 = 1;
pub const SERVICE_LAUNCH_PROTECTED_NONE: u32 = 0;
pub const SERVICE_LAUNCH_PROTECTED_WINDOWS: u32 = 1;
pub const SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT: u32 = 2;
pub const SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT: u32 = 3;
pub const SERVICE_TRIGGER_ACTION_SERVICE_START: u32 = 1;
pub const SERVICE_TRIGGER_ACTION_SERVICE_STOP: u32 = 2;
pub const SERVICE_TRIGGER_STARTED_ARGUMENT: &[u8; 15] = b"TriggerStarted\0";
pub const SC_AGGREGATE_STORAGE_KEY: &[u8; 57] =
    b"System\\CurrentControlSet\\Control\\ServiceAggregatedEvents\0";
pub const DIALOPTION_BILLING: u32 = 64;
pub const DIALOPTION_QUIET: u32 = 128;
pub const DIALOPTION_DIALTONE: u32 = 256;
pub const MDMVOLFLAG_LOW: u32 = 1;
pub const MDMVOLFLAG_MEDIUM: u32 = 2;
pub const MDMVOLFLAG_HIGH: u32 = 4;
pub const MDMVOL_LOW: u32 = 0;
pub const MDMVOL_MEDIUM: u32 = 1;
pub const MDMVOL_HIGH: u32 = 2;
pub const MDMSPKRFLAG_OFF: u32 = 1;
pub const MDMSPKRFLAG_DIAL: u32 = 2;
pub const MDMSPKRFLAG_ON: u32 = 4;
pub const MDMSPKRFLAG_CALLSETUP: u32 = 8;
pub const MDMSPKR_OFF: u32 = 0;
pub const MDMSPKR_DIAL: u32 = 1;
pub const MDMSPKR_ON: u32 = 2;
pub const MDMSPKR_CALLSETUP: u32 = 3;
pub const MDM_COMPRESSION: u32 = 1;
pub const MDM_ERROR_CONTROL: u32 = 2;
pub const MDM_FORCED_EC: u32 = 4;
pub const MDM_CELLULAR: u32 = 8;
pub const MDM_FLOWCONTROL_HARD: u32 = 16;
pub const MDM_FLOWCONTROL_SOFT: u32 = 32;
pub const MDM_CCITT_OVERRIDE: u32 = 64;
pub const MDM_SPEED_ADJUST: u32 = 128;
pub const MDM_TONE_DIAL: u32 = 256;
pub const MDM_BLIND_DIAL: u32 = 512;
pub const MDM_V23_OVERRIDE: u32 = 1024;
pub const MDM_DIAGNOSTICS: u32 = 2048;
pub const MDM_MASK_BEARERMODE: u32 = 61440;
pub const MDM_SHIFT_BEARERMODE: u32 = 12;
pub const MDM_MASK_PROTOCOLID: u32 = 983040;
pub const MDM_SHIFT_PROTOCOLID: u32 = 16;
pub const MDM_MASK_PROTOCOLDATA: u32 = 267386880;
pub const MDM_SHIFT_PROTOCOLDATA: u32 = 20;
pub const MDM_MASK_PROTOCOLINFO: u32 = 268369920;
pub const MDM_SHIFT_PROTOCOLINFO: u32 = 16;
pub const MDM_MASK_EXTENDEDINFO: u32 = 268431360;
pub const MDM_SHIFT_EXTENDEDINFO: u32 = 12;
pub const MDM_BEARERMODE_ANALOG: u32 = 0;
pub const MDM_BEARERMODE_ISDN: u32 = 1;
pub const MDM_BEARERMODE_GSM: u32 = 2;
pub const MDM_PROTOCOLID_DEFAULT: u32 = 0;
pub const MDM_PROTOCOLID_HDLCPPP: u32 = 1;
pub const MDM_PROTOCOLID_V128: u32 = 2;
pub const MDM_PROTOCOLID_X75: u32 = 3;
pub const MDM_PROTOCOLID_V110: u32 = 4;
pub const MDM_PROTOCOLID_V120: u32 = 5;
pub const MDM_PROTOCOLID_AUTO: u32 = 6;
pub const MDM_PROTOCOLID_ANALOG: u32 = 7;
pub const MDM_PROTOCOLID_GPRS: u32 = 8;
pub const MDM_PROTOCOLID_PIAFS: u32 = 9;
pub const MDM_SHIFT_HDLCPPP_SPEED: u32 = 0;
pub const MDM_MASK_HDLCPPP_SPEED: u32 = 7;
pub const MDM_HDLCPPP_SPEED_DEFAULT: u32 = 0;
pub const MDM_HDLCPPP_SPEED_64K: u32 = 1;
pub const MDM_HDLCPPP_SPEED_56K: u32 = 2;
pub const MDM_SHIFT_HDLCPPP_AUTH: u32 = 3;
pub const MDM_MASK_HDLCPPP_AUTH: u32 = 56;
pub const MDM_HDLCPPP_AUTH_DEFAULT: u32 = 0;
pub const MDM_HDLCPPP_AUTH_NONE: u32 = 1;
pub const MDM_HDLCPPP_AUTH_PAP: u32 = 2;
pub const MDM_HDLCPPP_AUTH_CHAP: u32 = 3;
pub const MDM_HDLCPPP_AUTH_MSCHAP: u32 = 4;
pub const MDM_SHIFT_HDLCPPP_ML: u32 = 6;
pub const MDM_MASK_HDLCPPP_ML: u32 = 192;
pub const MDM_HDLCPPP_ML_DEFAULT: u32 = 0;
pub const MDM_HDLCPPP_ML_NONE: u32 = 1;
pub const MDM_HDLCPPP_ML_2: u32 = 2;
pub const MDM_SHIFT_V120_SPEED: u32 = 0;
pub const MDM_MASK_V120_SPEED: u32 = 7;
pub const MDM_V120_SPEED_DEFAULT: u32 = 0;
pub const MDM_V120_SPEED_64K: u32 = 1;
pub const MDM_V120_SPEED_56K: u32 = 2;
pub const MDM_SHIFT_V120_ML: u32 = 6;
pub const MDM_MASK_V120_ML: u32 = 192;
pub const MDM_V120_ML_DEFAULT: u32 = 0;
pub const MDM_V120_ML_NONE: u32 = 1;
pub const MDM_V120_ML_2: u32 = 2;
pub const MDM_SHIFT_X75_DATA: u32 = 0;
pub const MDM_MASK_X75_DATA: u32 = 7;
pub const MDM_X75_DATA_DEFAULT: u32 = 0;
pub const MDM_X75_DATA_64K: u32 = 1;
pub const MDM_X75_DATA_128K: u32 = 2;
pub const MDM_X75_DATA_T_70: u32 = 3;
pub const MDM_X75_DATA_BTX: u32 = 4;
pub const MDM_SHIFT_V110_SPEED: u32 = 0;
pub const MDM_MASK_V110_SPEED: u32 = 15;
pub const MDM_V110_SPEED_DEFAULT: u32 = 0;
pub const MDM_V110_SPEED_1DOT2K: u32 = 1;
pub const MDM_V110_SPEED_2DOT4K: u32 = 2;
pub const MDM_V110_SPEED_4DOT8K: u32 = 3;
pub const MDM_V110_SPEED_9DOT6K: u32 = 4;
pub const MDM_V110_SPEED_12DOT0K: u32 = 5;
pub const MDM_V110_SPEED_14DOT4K: u32 = 6;
pub const MDM_V110_SPEED_19DOT2K: u32 = 7;
pub const MDM_V110_SPEED_28DOT8K: u32 = 8;
pub const MDM_V110_SPEED_38DOT4K: u32 = 9;
pub const MDM_V110_SPEED_57DOT6K: u32 = 10;
pub const MDM_SHIFT_AUTO_SPEED: u32 = 0;
pub const MDM_MASK_AUTO_SPEED: u32 = 7;
pub const MDM_AUTO_SPEED_DEFAULT: u32 = 0;
pub const MDM_SHIFT_AUTO_ML: u32 = 6;
pub const MDM_MASK_AUTO_ML: u32 = 192;
pub const MDM_AUTO_ML_DEFAULT: u32 = 0;
pub const MDM_AUTO_ML_NONE: u32 = 1;
pub const MDM_AUTO_ML_2: u32 = 2;
pub const MDM_ANALOG_RLP_ON: u32 = 0;
pub const MDM_ANALOG_RLP_OFF: u32 = 1;
pub const MDM_ANALOG_V34: u32 = 2;
pub const MDM_PIAFS_INCOMING: u32 = 0;
pub const MDM_PIAFS_OUTGOING: u32 = 1;
pub const STYLE_DESCRIPTION_SIZE: u32 = 32;
pub const IMEMENUITEM_STRING_SIZE: u32 = 80;
pub const IMC_GETCANDIDATEPOS: u32 = 7;
pub const IMC_SETCANDIDATEPOS: u32 = 8;
pub const IMC_GETCOMPOSITIONFONT: u32 = 9;
pub const IMC_SETCOMPOSITIONFONT: u32 = 10;
pub const IMC_GETCOMPOSITIONWINDOW: u32 = 11;
pub const IMC_SETCOMPOSITIONWINDOW: u32 = 12;
pub const IMC_GETSTATUSWINDOWPOS: u32 = 15;
pub const IMC_SETSTATUSWINDOWPOS: u32 = 16;
pub const IMC_CLOSESTATUSWINDOW: u32 = 33;
pub const IMC_OPENSTATUSWINDOW: u32 = 34;
pub const NI_OPENCANDIDATE: u32 = 16;
pub const NI_CLOSECANDIDATE: u32 = 17;
pub const NI_SELECTCANDIDATESTR: u32 = 18;
pub const NI_CHANGECANDIDATELIST: u32 = 19;
pub const NI_FINALIZECONVERSIONRESULT: u32 = 20;
pub const NI_COMPOSITIONSTR: u32 = 21;
pub const NI_SETCANDIDATE_PAGESTART: u32 = 22;
pub const NI_SETCANDIDATE_PAGESIZE: u32 = 23;
pub const NI_IMEMENUSELECTED: u32 = 24;
pub const ISC_SHOWUICANDIDATEWINDOW: u32 = 1;
pub const ISC_SHOWUICOMPOSITIONWINDOW: u32 = 2147483648;
pub const ISC_SHOWUIGUIDELINE: u32 = 1073741824;
pub const ISC_SHOWUIALLCANDIDATEWINDOW: u32 = 15;
pub const ISC_SHOWUIALL: u32 = 3221225487;
pub const CPS_COMPLETE: u32 = 1;
pub const CPS_CONVERT: u32 = 2;
pub const CPS_REVERT: u32 = 3;
pub const CPS_CANCEL: u32 = 4;
pub const MOD_LEFT: u32 = 32768;
pub const MOD_RIGHT: u32 = 16384;
pub const MOD_ON_KEYUP: u32 = 2048;
pub const MOD_IGNORE_ALL_MODIFIER: u32 = 1024;
pub const IME_CHOTKEY_IME_NONIME_TOGGLE: u32 = 16;
pub const IME_CHOTKEY_SHAPE_TOGGLE: u32 = 17;
pub const IME_CHOTKEY_SYMBOL_TOGGLE: u32 = 18;
pub const IME_JHOTKEY_CLOSE_OPEN: u32 = 48;
pub const IME_KHOTKEY_SHAPE_TOGGLE: u32 = 80;
pub const IME_KHOTKEY_HANJACONVERT: u32 = 81;
pub const IME_KHOTKEY_ENGLISH: u32 = 82;
pub const IME_THOTKEY_IME_NONIME_TOGGLE: u32 = 112;
pub const IME_THOTKEY_SHAPE_TOGGLE: u32 = 113;
pub const IME_THOTKEY_SYMBOL_TOGGLE: u32 = 114;
pub const IME_HOTKEY_DSWITCH_FIRST: u32 = 256;
pub const IME_HOTKEY_DSWITCH_LAST: u32 = 287;
pub const IME_HOTKEY_PRIVATE_FIRST: u32 = 512;
pub const IME_ITHOTKEY_RESEND_RESULTSTR: u32 = 512;
pub const IME_ITHOTKEY_PREVIOUS_COMPOSITION: u32 = 513;
pub const IME_ITHOTKEY_UISTYLE_TOGGLE: u32 = 514;
pub const IME_ITHOTKEY_RECONVERTSTRING: u32 = 515;
pub const IME_HOTKEY_PRIVATE_LAST: u32 = 543;
pub const GCS_COMPREADSTR: u32 = 1;
pub const GCS_COMPREADATTR: u32 = 2;
pub const GCS_COMPREADCLAUSE: u32 = 4;
pub const GCS_COMPSTR: u32 = 8;
pub const GCS_COMPATTR: u32 = 16;
pub const GCS_COMPCLAUSE: u32 = 32;
pub const GCS_CURSORPOS: u32 = 128;
pub const GCS_DELTASTART: u32 = 256;
pub const GCS_RESULTREADSTR: u32 = 512;
pub const GCS_RESULTREADCLAUSE: u32 = 1024;
pub const GCS_RESULTSTR: u32 = 2048;
pub const GCS_RESULTCLAUSE: u32 = 4096;
pub const CS_INSERTCHAR: u32 = 8192;
pub const CS_NOMOVECARET: u32 = 16384;
pub const IMEVER_0310: u32 = 196618;
pub const IMEVER_0400: u32 = 262144;
pub const IME_PROP_AT_CARET: u32 = 65536;
pub const IME_PROP_SPECIAL_UI: u32 = 131072;
pub const IME_PROP_CANDLIST_START_FROM_1: u32 = 262144;
pub const IME_PROP_UNICODE: u32 = 524288;
pub const IME_PROP_COMPLETE_ON_UNSELECT: u32 = 1048576;
pub const UI_CAP_2700: u32 = 1;
pub const UI_CAP_ROT90: u32 = 2;
pub const UI_CAP_ROTANY: u32 = 4;
pub const SCS_CAP_COMPSTR: u32 = 1;
pub const SCS_CAP_MAKEREAD: u32 = 2;
pub const SCS_CAP_SETRECONVERTSTRING: u32 = 4;
pub const SELECT_CAP_CONVERSION: u32 = 1;
pub const SELECT_CAP_SENTENCE: u32 = 2;
pub const GGL_LEVEL: u32 = 1;
pub const GGL_INDEX: u32 = 2;
pub const GGL_STRING: u32 = 3;
pub const GGL_PRIVATE: u32 = 4;
pub const GL_LEVEL_NOGUIDELINE: u32 = 0;
pub const GL_LEVEL_FATAL: u32 = 1;
pub const GL_LEVEL_ERROR: u32 = 2;
pub const GL_LEVEL_WARNING: u32 = 3;
pub const GL_LEVEL_INFORMATION: u32 = 4;
pub const GL_ID_UNKNOWN: u32 = 0;
pub const GL_ID_NOMODULE: u32 = 1;
pub const GL_ID_NODICTIONARY: u32 = 16;
pub const GL_ID_CANNOTSAVE: u32 = 17;
pub const GL_ID_NOCONVERT: u32 = 32;
pub const GL_ID_TYPINGERROR: u32 = 33;
pub const GL_ID_TOOMANYSTROKE: u32 = 34;
pub const GL_ID_READINGCONFLICT: u32 = 35;
pub const GL_ID_INPUTREADING: u32 = 36;
pub const GL_ID_INPUTRADICAL: u32 = 37;
pub const GL_ID_INPUTCODE: u32 = 38;
pub const GL_ID_INPUTSYMBOL: u32 = 39;
pub const GL_ID_CHOOSECANDIDATE: u32 = 40;
pub const GL_ID_REVERSECONVERSION: u32 = 41;
pub const GL_ID_PRIVATE_FIRST: u32 = 32768;
pub const GL_ID_PRIVATE_LAST: u32 = 65535;
pub const IGP_PROPERTY: u32 = 4;
pub const IGP_CONVERSION: u32 = 8;
pub const IGP_SENTENCE: u32 = 12;
pub const IGP_UI: u32 = 16;
pub const IGP_SETCOMPSTR: u32 = 20;
pub const IGP_SELECT: u32 = 24;
pub const SCS_SETSTR: u32 = 9;
pub const SCS_CHANGEATTR: u32 = 18;
pub const SCS_CHANGECLAUSE: u32 = 36;
pub const SCS_SETRECONVERTSTRING: u32 = 65536;
pub const SCS_QUERYRECONVERTSTRING: u32 = 131072;
pub const ATTR_INPUT: u32 = 0;
pub const ATTR_TARGET_CONVERTED: u32 = 1;
pub const ATTR_CONVERTED: u32 = 2;
pub const ATTR_TARGET_NOTCONVERTED: u32 = 3;
pub const ATTR_INPUT_ERROR: u32 = 4;
pub const ATTR_FIXEDCONVERTED: u32 = 5;
pub const CFS_DEFAULT: u32 = 0;
pub const CFS_RECT: u32 = 1;
pub const CFS_POINT: u32 = 2;
pub const CFS_FORCE_POSITION: u32 = 32;
pub const CFS_CANDIDATEPOS: u32 = 64;
pub const CFS_EXCLUDE: u32 = 128;
pub const GCL_CONVERSION: u32 = 1;
pub const GCL_REVERSECONVERSION: u32 = 2;
pub const GCL_REVERSE_LENGTH: u32 = 3;
pub const IME_CMODE_ALPHANUMERIC: u32 = 0;
pub const IME_CMODE_NATIVE: u32 = 1;
pub const IME_CMODE_CHINESE: u32 = 1;
pub const IME_CMODE_HANGUL: u32 = 1;
pub const IME_CMODE_JAPANESE: u32 = 1;
pub const IME_CMODE_KATAKANA: u32 = 2;
pub const IME_CMODE_LANGUAGE: u32 = 3;
pub const IME_CMODE_FULLSHAPE: u32 = 8;
pub const IME_CMODE_ROMAN: u32 = 16;
pub const IME_CMODE_CHARCODE: u32 = 32;
pub const IME_CMODE_HANJACONVERT: u32 = 64;
pub const IME_CMODE_NATIVESYMBOL: u32 = 128;
pub const IME_CMODE_HANGEUL: u32 = 1;
pub const IME_CMODE_SOFTKBD: u32 = 128;
pub const IME_CMODE_NOCONVERSION: u32 = 256;
pub const IME_CMODE_EUDC: u32 = 512;
pub const IME_CMODE_SYMBOL: u32 = 1024;
pub const IME_CMODE_FIXED: u32 = 2048;
pub const IME_CMODE_RESERVED: u32 = 4026531840;
pub const IME_SMODE_NONE: u32 = 0;
pub const IME_SMODE_PLAURALCLAUSE: u32 = 1;
pub const IME_SMODE_SINGLECONVERT: u32 = 2;
pub const IME_SMODE_AUTOMATIC: u32 = 4;
pub const IME_SMODE_PHRASEPREDICT: u32 = 8;
pub const IME_SMODE_CONVERSATION: u32 = 16;
pub const IME_SMODE_RESERVED: u32 = 61440;
pub const IME_CAND_UNKNOWN: u32 = 0;
pub const IME_CAND_READ: u32 = 1;
pub const IME_CAND_CODE: u32 = 2;
pub const IME_CAND_MEANING: u32 = 3;
pub const IME_CAND_RADICAL: u32 = 4;
pub const IME_CAND_STROKE: u32 = 5;
pub const IMN_CLOSESTATUSWINDOW: u32 = 1;
pub const IMN_OPENSTATUSWINDOW: u32 = 2;
pub const IMN_CHANGECANDIDATE: u32 = 3;
pub const IMN_CLOSECANDIDATE: u32 = 4;
pub const IMN_OPENCANDIDATE: u32 = 5;
pub const IMN_SETCONVERSIONMODE: u32 = 6;
pub const IMN_SETSENTENCEMODE: u32 = 7;
pub const IMN_SETOPENSTATUS: u32 = 8;
pub const IMN_SETCANDIDATEPOS: u32 = 9;
pub const IMN_SETCOMPOSITIONFONT: u32 = 10;
pub const IMN_SETCOMPOSITIONWINDOW: u32 = 11;
pub const IMN_SETSTATUSWINDOWPOS: u32 = 12;
pub const IMN_GUIDELINE: u32 = 13;
pub const IMN_PRIVATE: u32 = 14;
pub const IMR_COMPOSITIONWINDOW: u32 = 1;
pub const IMR_CANDIDATEWINDOW: u32 = 2;
pub const IMR_COMPOSITIONFONT: u32 = 3;
pub const IMR_RECONVERTSTRING: u32 = 4;
pub const IMR_CONFIRMRECONVERTSTRING: u32 = 5;
pub const IMR_QUERYCHARPOSITION: u32 = 6;
pub const IMR_DOCUMENTFEED: u32 = 7;
pub const IMM_ERROR_NODATA: i32 = -1;
pub const IMM_ERROR_GENERAL: i32 = -2;
pub const IME_CONFIG_GENERAL: u32 = 1;
pub const IME_CONFIG_REGISTERWORD: u32 = 2;
pub const IME_CONFIG_SELECTDICTIONARY: u32 = 3;
pub const IME_ESC_QUERY_SUPPORT: u32 = 3;
pub const IME_ESC_RESERVED_FIRST: u32 = 4;
pub const IME_ESC_RESERVED_LAST: u32 = 2047;
pub const IME_ESC_PRIVATE_FIRST: u32 = 2048;
pub const IME_ESC_PRIVATE_LAST: u32 = 4095;
pub const IME_ESC_SEQUENCE_TO_INTERNAL: u32 = 4097;
pub const IME_ESC_GET_EUDC_DICTIONARY: u32 = 4099;
pub const IME_ESC_SET_EUDC_DICTIONARY: u32 = 4100;
pub const IME_ESC_MAX_KEY: u32 = 4101;
pub const IME_ESC_IME_NAME: u32 = 4102;
pub const IME_ESC_SYNC_HOTKEY: u32 = 4103;
pub const IME_ESC_HANJA_MODE: u32 = 4104;
pub const IME_ESC_AUTOMATA: u32 = 4105;
pub const IME_ESC_PRIVATE_HOTKEY: u32 = 4106;
pub const IME_ESC_GETHELPFILENAME: u32 = 4107;
pub const IME_REGWORD_STYLE_EUDC: u32 = 1;
pub const IME_REGWORD_STYLE_USER_FIRST: u32 = 2147483648;
pub const IME_REGWORD_STYLE_USER_LAST: u32 = 4294967295;
pub const IACE_CHILDREN: u32 = 1;
pub const IACE_DEFAULT: u32 = 16;
pub const IACE_IGNORENOCONTEXT: u32 = 32;
pub const IGIMIF_RIGHTMENU: u32 = 1;
pub const IGIMII_CMODE: u32 = 1;
pub const IGIMII_SMODE: u32 = 2;
pub const IGIMII_CONFIGURE: u32 = 4;
pub const IGIMII_TOOLS: u32 = 8;
pub const IGIMII_HELP: u32 = 16;
pub const IGIMII_OTHER: u32 = 32;
pub const IGIMII_INPUTTOOLS: u32 = 64;
pub const IMFT_RADIOCHECK: u32 = 1;
pub const IMFT_SEPARATOR: u32 = 2;
pub const IMFT_SUBMENU: u32 = 4;
pub const IMFS_GRAYED: u32 = 3;
pub const IMFS_DISABLED: u32 = 3;
pub const IMFS_CHECKED: u32 = 8;
pub const IMFS_HILITE: u32 = 128;
pub const IMFS_ENABLED: u32 = 0;
pub const IMFS_UNCHECKED: u32 = 0;
pub const IMFS_UNHILITE: u32 = 0;
pub const IMFS_DEFAULT: u32 = 4096;
pub const SOFTKEYBOARD_TYPE_T1: u32 = 1;
pub const SOFTKEYBOARD_TYPE_C1: u32 = 2;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const EC_NOFRAME: i32 = -1;
pub const EC_OTHERFRAME: i32 = -2;
pub const EC_ERROR: i32 = -3;
pub const EC_SLAVECOUNTEXCEEDED: i32 = -4;
pub const EC_TIMEOUT: i32 = -5;
pub const EC_MAXECATFRAME: u32 = 1518;
pub const EC_MAXLRWDATA: u32 = 1486;
pub const EC_FIRSTDCDATAGRAM: u32 = 20;
pub const EC_BUFSIZE: u32 = 1518;
pub const EC_ECATTYPE: u32 = 4096;
pub const EC_MAXBUF: u32 = 16;
pub const EC_TIMEOUTRET: u32 = 2000;
pub const EC_TIMEOUTRET3: u32 = 6000;
pub const EC_TIMEOUTSAFE: u32 = 20000;
pub const EC_TIMEOUTEEP: u32 = 20000;
pub const EC_TIMEOUTTXM: u32 = 20000;
pub const EC_TIMEOUTRXM: u32 = 700000;
pub const EC_TIMEOUTSTATE: u32 = 2000000;
pub const EC_MAXEEPBITMAP: u32 = 128;
pub const EC_MAXEEPBUF: u32 = 4096;
pub const EC_DEFAULTRETRIES: u32 = 3;
pub const EC_LOGGROUPOFFSET: u32 = 16;
pub const EC_DATAGRAMFOLLOWS: u32 = 32768;
pub const EC_ESTAT_R64: u32 = 64;
pub const EC_ESTAT_BUSY: u32 = 32768;
pub const EC_ESTAT_EMASK: u32 = 30720;
pub const EC_ESTAT_NACK: u32 = 8192;
pub const ECT_SII_START: u32 = 64;
pub const ECT_SDO_SMCOMMTYPE: u32 = 7168;
pub const ECT_SDO_PDOASSIGN: u32 = 7184;
pub const ECT_SDO_RXPDOASSIGN: u32 = 7186;
pub const ECT_SDO_TXPDOASSIGN: u32 = 7187;
pub const ETH_P_ECAT: u32 = 34980;
pub const SIZEOF_CHAR: u32 = 1;
pub const SIZEOF_SHORT: u32 = 2;
pub const SIZEOF_INT: u32 = 4;
pub const INCL_WINSOCK_API_PROTOTYPES: u32 = 1;
pub const INCL_WINSOCK_API_TYPEDEFS: u32 = 0;
pub const AF_UNSPEC: u32 = 0;
pub const AF_UNIX: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_IMPLINK: u32 = 3;
pub const AF_PUP: u32 = 4;
pub const AF_CHAOS: u32 = 5;
pub const AF_NS: u32 = 6;
pub const AF_IPX: u32 = 6;
pub const AF_ISO: u32 = 7;
pub const AF_OSI: u32 = 7;
pub const AF_ECMA: u32 = 8;
pub const AF_DATAKIT: u32 = 9;
pub const AF_CCITT: u32 = 10;
pub const AF_SNA: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_DLI: u32 = 13;
pub const AF_LAT: u32 = 14;
pub const AF_HYLINK: u32 = 15;
pub const AF_APPLETALK: u32 = 16;
pub const AF_NETBIOS: u32 = 17;
pub const AF_VOICEVIEW: u32 = 18;
pub const AF_FIREFOX: u32 = 19;
pub const AF_UNKNOWN1: u32 = 20;
pub const AF_BAN: u32 = 21;
pub const AF_ATM: u32 = 22;
pub const AF_INET6: u32 = 23;
pub const AF_CLUSTER: u32 = 24;
pub const AF_12844: u32 = 25;
pub const AF_IRDA: u32 = 26;
pub const AF_NETDES: u32 = 28;
pub const AF_TCNPROCESS: u32 = 29;
pub const AF_TCNMESSAGE: u32 = 30;
pub const AF_ICLFXBM: u32 = 31;
pub const AF_BTH: u32 = 32;
pub const AF_LINK: u32 = 33;
pub const AF_HYPERV: u32 = 34;
pub const AF_MAX: u32 = 35;
pub const SOCK_STREAM: u32 = 1;
pub const SOCK_DGRAM: u32 = 2;
pub const SOCK_RAW: u32 = 3;
pub const SOCK_RDM: u32 = 4;
pub const SOCK_SEQPACKET: u32 = 5;
pub const SOL_SOCKET: u32 = 65535;
pub const SOL_IP: u32 = 65531;
pub const SOL_IPV6: u32 = 65530;
pub const SO_DEBUG: u32 = 1;
pub const SO_ACCEPTCONN: u32 = 2;
pub const SO_REUSEADDR: u32 = 4;
pub const SO_KEEPALIVE: u32 = 8;
pub const SO_DONTROUTE: u32 = 16;
pub const SO_BROADCAST: u32 = 32;
pub const SO_USELOOPBACK: u32 = 64;
pub const SO_LINGER: u32 = 128;
pub const SO_OOBINLINE: u32 = 256;
pub const SO_SNDBUF: u32 = 4097;
pub const SO_RCVBUF: u32 = 4098;
pub const SO_SNDLOWAT: u32 = 4099;
pub const SO_RCVLOWAT: u32 = 4100;
pub const SO_SNDTIMEO: u32 = 4101;
pub const SO_RCVTIMEO: u32 = 4102;
pub const SO_ERROR: u32 = 4103;
pub const SO_TYPE: u32 = 4104;
pub const SO_BSP_STATE: u32 = 4105;
pub const SO_GROUP_ID: u32 = 8193;
pub const SO_GROUP_PRIORITY: u32 = 8194;
pub const SO_MAX_MSG_SIZE: u32 = 8195;
pub const SO_CONDITIONAL_ACCEPT: u32 = 12290;
pub const SO_PAUSE_ACCEPT: u32 = 12291;
pub const SO_COMPARTMENT_ID: u32 = 12292;
pub const SO_RANDOMIZE_PORT: u32 = 12293;
pub const SO_PORT_SCALABILITY: u32 = 12294;
pub const SO_REUSE_UNICASTPORT: u32 = 12295;
pub const SO_REUSE_MULTICASTPORT: u32 = 12296;
pub const SO_ORIGINAL_DST: u32 = 12303;
pub const IP6T_SO_ORIGINAL_DST: u32 = 12303;
pub const SO_RECEIVED_HOPLIMIT: u32 = 12304;
pub const SO_RECEIVED_PROCESSOR: u32 = 12305;
pub const WSK_SO_BASE: u32 = 16384;
pub const TCP_NODELAY: u32 = 1;
pub const _SS_MAXSIZE: u32 = 128;
pub const IOC_UNIX: u32 = 0;
pub const IOC_WS2: u32 = 134217728;
pub const IOC_PROTOCOL: u32 = 268435456;
pub const IOC_VENDOR: u32 = 402653184;
pub const IOC_WSK: u32 = 251658240;
pub const IPPROTO_IP: u32 = 0;
pub const IPPORT_TCPMUX: u32 = 1;
pub const IPPORT_ECHO: u32 = 7;
pub const IPPORT_DISCARD: u32 = 9;
pub const IPPORT_SYSTAT: u32 = 11;
pub const IPPORT_DAYTIME: u32 = 13;
pub const IPPORT_NETSTAT: u32 = 15;
pub const IPPORT_QOTD: u32 = 17;
pub const IPPORT_MSP: u32 = 18;
pub const IPPORT_CHARGEN: u32 = 19;
pub const IPPORT_FTP_DATA: u32 = 20;
pub const IPPORT_FTP: u32 = 21;
pub const IPPORT_TELNET: u32 = 23;
pub const IPPORT_SMTP: u32 = 25;
pub const IPPORT_TIMESERVER: u32 = 37;
pub const IPPORT_NAMESERVER: u32 = 42;
pub const IPPORT_WHOIS: u32 = 43;
pub const IPPORT_MTP: u32 = 57;
pub const IPPORT_TFTP: u32 = 69;
pub const IPPORT_RJE: u32 = 77;
pub const IPPORT_FINGER: u32 = 79;
pub const IPPORT_TTYLINK: u32 = 87;
pub const IPPORT_SUPDUP: u32 = 95;
pub const IPPORT_POP3: u32 = 110;
pub const IPPORT_NTP: u32 = 123;
pub const IPPORT_EPMAP: u32 = 135;
pub const IPPORT_NETBIOS_NS: u32 = 137;
pub const IPPORT_NETBIOS_DGM: u32 = 138;
pub const IPPORT_NETBIOS_SSN: u32 = 139;
pub const IPPORT_IMAP: u32 = 143;
pub const IPPORT_SNMP: u32 = 161;
pub const IPPORT_SNMP_TRAP: u32 = 162;
pub const IPPORT_IMAP3: u32 = 220;
pub const IPPORT_LDAP: u32 = 389;
pub const IPPORT_HTTPS: u32 = 443;
pub const IPPORT_MICROSOFT_DS: u32 = 445;
pub const IPPORT_EXECSERVER: u32 = 512;
pub const IPPORT_LOGINSERVER: u32 = 513;
pub const IPPORT_CMDSERVER: u32 = 514;
pub const IPPORT_EFSSERVER: u32 = 520;
pub const IPPORT_BIFFUDP: u32 = 512;
pub const IPPORT_WHOSERVER: u32 = 513;
pub const IPPORT_ROUTESERVER: u32 = 520;
pub const IPPORT_RESERVED: u32 = 1024;
pub const IPPORT_REGISTERED_MIN: u32 = 1024;
pub const IPPORT_REGISTERED_MAX: u32 = 49151;
pub const IPPORT_DYNAMIC_MIN: u32 = 49152;
pub const IPPORT_DYNAMIC_MAX: u32 = 65535;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_CLASSD_NET: u32 = 4026531840;
pub const IN_CLASSD_NSHIFT: u32 = 28;
pub const IN_CLASSD_HOST: u32 = 268435455;
pub const INADDR_LOOPBACK: u32 = 2130706433;
pub const INADDR_NONE: u32 = 4294967295;
pub const IOCPARM_MASK: u32 = 127;
pub const IOC_VOID: u32 = 536870912;
pub const IOC_OUT: u32 = 1073741824;
pub const IOC_IN: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const MSG_TRUNC: u32 = 256;
pub const MSG_CTRUNC: u32 = 512;
pub const MSG_BCAST: u32 = 1024;
pub const MSG_MCAST: u32 = 2048;
pub const MSG_ERRQUEUE: u32 = 4096;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_NUMERICSERV: u32 = 8;
pub const AI_DNS_ONLY: u32 = 16;
pub const AI_FORCE_CLEAR_TEXT: u32 = 32;
pub const AI_BYPASS_DNS_CACHE: u32 = 64;
pub const AI_RETURN_TTL: u32 = 128;
pub const AI_ALL: u32 = 256;
pub const AI_ADDRCONFIG: u32 = 1024;
pub const AI_V4MAPPED: u32 = 2048;
pub const AI_NON_AUTHORITATIVE: u32 = 16384;
pub const AI_SECURE: u32 = 32768;
pub const AI_RETURN_PREFERRED_NAMES: u32 = 65536;
pub const AI_FQDN: u32 = 131072;
pub const AI_FILESERVER: u32 = 262144;
pub const AI_DISABLE_IDN_ENCODING: u32 = 524288;
pub const AI_SECURE_WITH_FALLBACK: u32 = 1048576;
pub const AI_EXCLUSIVE_CUSTOM_SERVERS: u32 = 2097152;
pub const AI_RETURN_RESPONSE_FLAGS: u32 = 268435456;
pub const AI_REQUIRE_SECURE: u32 = 536870912;
pub const AI_RESOLUTION_HANDLE: u32 = 1073741824;
pub const AI_EXTENDED: u32 = 2147483648;
pub const ADDRINFOEX_VERSION_2: u32 = 2;
pub const ADDRINFOEX_VERSION_3: u32 = 3;
pub const ADDRINFOEX_VERSION_4: u32 = 4;
pub const ADDRINFOEX_VERSION_5: u32 = 5;
pub const ADDRINFOEX_VERSION_6: u32 = 6;
pub const ADDRINFOEX_VERSION_7: u32 = 7;
pub const AI_DNS_SERVER_TYPE_UDP: u32 = 1;
pub const AI_DNS_SERVER_TYPE_DOH: u32 = 2;
pub const AI_DNS_SERVER_TYPE_DOT: u32 = 3;
pub const AI_DNS_SERVER_UDP_FALLBACK: u32 = 1;
pub const AI_DNS_RESPONSE_SECURE: u32 = 1;
pub const AI_DNS_RESPONSE_HOSTFILE: u32 = 2;
pub const AI_EXTRA_DNSSEC_REQUIRED: u32 = 1;
pub const NS_ALL: u32 = 0;
pub const NS_SAP: u32 = 1;
pub const NS_NDS: u32 = 2;
pub const NS_PEER_BROWSE: u32 = 3;
pub const NS_SLP: u32 = 5;
pub const NS_DHCP: u32 = 6;
pub const NS_TCPIP_LOCAL: u32 = 10;
pub const NS_TCPIP_HOSTS: u32 = 11;
pub const NS_DNS: u32 = 12;
pub const NS_NETBT: u32 = 13;
pub const NS_WINS: u32 = 14;
pub const NS_NLA: u32 = 15;
pub const NS_BTH: u32 = 16;
pub const NS_NBP: u32 = 20;
pub const NS_MS: u32 = 30;
pub const NS_STDA: u32 = 31;
pub const NS_NTDS: u32 = 32;
pub const NS_EMAIL: u32 = 37;
pub const NS_PNRPNAME: u32 = 38;
pub const NS_PNRPCLOUD: u32 = 39;
pub const NS_X500: u32 = 40;
pub const NS_NIS: u32 = 41;
pub const NS_NISPLUS: u32 = 42;
pub const NS_WRQ: u32 = 50;
pub const NS_NETDES: u32 = 60;
pub const NI_NOFQDN: u32 = 1;
pub const NI_NUMERICHOST: u32 = 2;
pub const NI_NAMEREQD: u32 = 4;
pub const NI_NUMERICSERV: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const FD_SETSIZE: u32 = 64;
pub const IMPLINK_IP: u32 = 155;
pub const IMPLINK_LOWEXPER: u32 = 156;
pub const IMPLINK_HIGHEXPER: u32 = 158;
pub const WSADESCRIPTION_LEN: u32 = 256;
pub const WSASYS_STATUS_LEN: u32 = 128;
pub const SOCKET_ERROR: i32 = -1;
pub const FROM_PROTOCOL_INFO: i32 = -1;
pub const SO_PROTOCOL_INFOA: u32 = 8196;
pub const SO_PROTOCOL_INFOW: u32 = 8197;
pub const SO_PROTOCOL_INFO: u32 = 8196;
pub const PVD_CONFIG: u32 = 12289;
pub const PF_UNSPEC: u32 = 0;
pub const PF_UNIX: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_IMPLINK: u32 = 3;
pub const PF_PUP: u32 = 4;
pub const PF_CHAOS: u32 = 5;
pub const PF_NS: u32 = 6;
pub const PF_IPX: u32 = 6;
pub const PF_ISO: u32 = 7;
pub const PF_OSI: u32 = 7;
pub const PF_ECMA: u32 = 8;
pub const PF_DATAKIT: u32 = 9;
pub const PF_CCITT: u32 = 10;
pub const PF_SNA: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_DLI: u32 = 13;
pub const PF_LAT: u32 = 14;
pub const PF_HYLINK: u32 = 15;
pub const PF_APPLETALK: u32 = 16;
pub const PF_VOICEVIEW: u32 = 18;
pub const PF_FIREFOX: u32 = 19;
pub const PF_UNKNOWN1: u32 = 20;
pub const PF_BAN: u32 = 21;
pub const PF_ATM: u32 = 22;
pub const PF_INET6: u32 = 23;
pub const PF_BTH: u32 = 32;
pub const PF_MAX: u32 = 35;
pub const SOMAXCONN: u32 = 2147483647;
pub const MSG_OOB: u32 = 1;
pub const MSG_PEEK: u32 = 2;
pub const MSG_DONTROUTE: u32 = 4;
pub const MSG_WAITALL: u32 = 8;
pub const MSG_PUSH_IMMEDIATE: u32 = 32;
pub const MSG_PARTIAL: u32 = 32768;
pub const MSG_INTERRUPT: u32 = 16;
pub const MSG_MAXIOVLEN: u32 = 16;
pub const MAXGETHOSTSTRUCT: u32 = 1024;
pub const FD_READ_BIT: u32 = 0;
pub const FD_READ: u32 = 1;
pub const FD_WRITE_BIT: u32 = 1;
pub const FD_WRITE: u32 = 2;
pub const FD_OOB_BIT: u32 = 2;
pub const FD_OOB: u32 = 4;
pub const FD_ACCEPT_BIT: u32 = 3;
pub const FD_ACCEPT: u32 = 8;
pub const FD_CONNECT_BIT: u32 = 4;
pub const FD_CONNECT: u32 = 16;
pub const FD_CLOSE_BIT: u32 = 5;
pub const FD_CLOSE: u32 = 32;
pub const FD_QOS_BIT: u32 = 6;
pub const FD_QOS: u32 = 64;
pub const FD_GROUP_QOS_BIT: u32 = 7;
pub const FD_GROUP_QOS: u32 = 128;
pub const FD_ROUTING_INTERFACE_CHANGE_BIT: u32 = 8;
pub const FD_ROUTING_INTERFACE_CHANGE: u32 = 256;
pub const FD_ADDRESS_LIST_CHANGE_BIT: u32 = 9;
pub const FD_ADDRESS_LIST_CHANGE: u32 = 512;
pub const FD_MAX_EVENTS: u32 = 10;
pub const FD_ALL_EVENTS: u32 = 1023;
pub const HOST_NOT_FOUND: u32 = 11001;
pub const TRY_AGAIN: u32 = 11002;
pub const NO_RECOVERY: u32 = 11003;
pub const NO_DATA: u32 = 11004;
pub const WSANO_ADDRESS: u32 = 11004;
pub const NO_ADDRESS: u32 = 11004;
pub const WSA_IO_PENDING: u32 = 997;
pub const WSA_IO_INCOMPLETE: u32 = 996;
pub const WSA_INVALID_HANDLE: u32 = 6;
pub const WSA_INVALID_PARAMETER: u32 = 87;
pub const WSA_NOT_ENOUGH_MEMORY: u32 = 8;
pub const WSA_OPERATION_ABORTED: u32 = 995;
pub const WSA_MAXIMUM_WAIT_EVENTS: u32 = 64;
pub const WSA_WAIT_TIMEOUT: u32 = 258;
pub const WSA_INFINITE: u32 = 4294967295;
pub const SERVICETYPE_NOTRAFFIC: u32 = 0;
pub const SERVICETYPE_BESTEFFORT: u32 = 1;
pub const SERVICETYPE_CONTROLLEDLOAD: u32 = 2;
pub const SERVICETYPE_GUARANTEED: u32 = 3;
pub const SERVICETYPE_NETWORK_UNAVAILABLE: u32 = 4;
pub const SERVICETYPE_GENERAL_INFORMATION: u32 = 5;
pub const SERVICETYPE_NOCHANGE: u32 = 6;
pub const SERVICETYPE_NONCONFORMING: u32 = 9;
pub const SERVICETYPE_NETWORK_CONTROL: u32 = 10;
pub const SERVICETYPE_QUALITATIVE: u32 = 13;
pub const SERVICE_BESTEFFORT: u32 = 2147549184;
pub const SERVICE_CONTROLLEDLOAD: u32 = 2147614720;
pub const SERVICE_GUARANTEED: u32 = 2147745792;
pub const SERVICE_QUALITATIVE: u32 = 2149580800;
pub const SERVICE_NO_TRAFFIC_CONTROL: u32 = 2164260864;
pub const SERVICE_NO_QOS_SIGNALING: u32 = 1073741824;
pub const QOS_NOT_SPECIFIED: u32 = 4294967295;
pub const POSITIVE_INFINITY_RATE: u32 = 4294967294;
pub const QOS_GENERAL_ID_BASE: u32 = 2000;
pub const QOS_OBJECT_END_OF_LIST: u32 = 2001;
pub const QOS_OBJECT_SD_MODE: u32 = 2002;
pub const QOS_OBJECT_SHAPING_RATE: u32 = 2003;
pub const QOS_OBJECT_DESTADDR: u32 = 2004;
pub const TC_NONCONF_BORROW: u32 = 0;
pub const TC_NONCONF_SHAPE: u32 = 1;
pub const TC_NONCONF_DISCARD: u32 = 2;
pub const TC_NONCONF_BORROW_PLUS: u32 = 3;
pub const CF_ACCEPT: u32 = 0;
pub const CF_REJECT: u32 = 1;
pub const CF_DEFER: u32 = 2;
pub const SD_RECEIVE: u32 = 0;
pub const SD_SEND: u32 = 1;
pub const SD_BOTH: u32 = 2;
pub const SG_UNCONSTRAINED_GROUP: u32 = 1;
pub const SG_CONSTRAINED_GROUP: u32 = 2;
pub const MAX_PROTOCOL_CHAIN: u32 = 7;
pub const BASE_PROTOCOL: u32 = 1;
pub const LAYERED_PROTOCOL: u32 = 0;
pub const WSAPROTOCOL_LEN: u32 = 255;
pub const PFL_MULTIPLE_PROTO_ENTRIES: u32 = 1;
pub const PFL_RECOMMENDED_PROTO_ENTRY: u32 = 2;
pub const PFL_HIDDEN: u32 = 4;
pub const PFL_MATCHES_PROTOCOL_ZERO: u32 = 8;
pub const PFL_NETWORKDIRECT_PROVIDER: u32 = 16;
pub const XP1_CONNECTIONLESS: u32 = 1;
pub const XP1_GUARANTEED_DELIVERY: u32 = 2;
pub const XP1_GUARANTEED_ORDER: u32 = 4;
pub const XP1_MESSAGE_ORIENTED: u32 = 8;
pub const XP1_PSEUDO_STREAM: u32 = 16;
pub const XP1_GRACEFUL_CLOSE: u32 = 32;
pub const XP1_EXPEDITED_DATA: u32 = 64;
pub const XP1_CONNECT_DATA: u32 = 128;
pub const XP1_DISCONNECT_DATA: u32 = 256;
pub const XP1_SUPPORT_BROADCAST: u32 = 512;
pub const XP1_SUPPORT_MULTIPOINT: u32 = 1024;
pub const XP1_MULTIPOINT_CONTROL_PLANE: u32 = 2048;
pub const XP1_MULTIPOINT_DATA_PLANE: u32 = 4096;
pub const XP1_QOS_SUPPORTED: u32 = 8192;
pub const XP1_INTERRUPT: u32 = 16384;
pub const XP1_UNI_SEND: u32 = 32768;
pub const XP1_UNI_RECV: u32 = 65536;
pub const XP1_IFS_HANDLES: u32 = 131072;
pub const XP1_PARTIAL_MESSAGE: u32 = 262144;
pub const XP1_SAN_SUPPORT_SDP: u32 = 524288;
pub const BIGENDIAN: u32 = 0;
pub const LITTLEENDIAN: u32 = 1;
pub const SECURITY_PROTOCOL_NONE: u32 = 0;
pub const JL_SENDER_ONLY: u32 = 1;
pub const JL_RECEIVER_ONLY: u32 = 2;
pub const JL_BOTH: u32 = 4;
pub const WSA_FLAG_OVERLAPPED: u32 = 1;
pub const WSA_FLAG_MULTIPOINT_C_ROOT: u32 = 2;
pub const WSA_FLAG_MULTIPOINT_C_LEAF: u32 = 4;
pub const WSA_FLAG_MULTIPOINT_D_ROOT: u32 = 8;
pub const WSA_FLAG_MULTIPOINT_D_LEAF: u32 = 16;
pub const WSA_FLAG_ACCESS_SYSTEM_SECURITY: u32 = 64;
pub const WSA_FLAG_NO_HANDLE_INHERIT: u32 = 128;
pub const WSA_FLAG_REGISTERED_IO: u32 = 256;
pub const TH_NETDEV: u32 = 1;
pub const TH_TAPI: u32 = 2;
pub const SERVICE_MULTIPLE: u32 = 1;
pub const NS_LOCALNAME: u32 = 19;
pub const RES_UNUSED_1: u32 = 1;
pub const RES_FLUSH_CACHE: u32 = 2;
pub const RES_SERVICE: u32 = 4;
pub const SERVICE_TYPE_VALUE_IPXPORTA: &[u8; 10] = b"IpxSocket\0";
pub const SERVICE_TYPE_VALUE_IPXPORTW: &[u8; 10] = b"IpxSocket\0";
pub const SERVICE_TYPE_VALUE_SAPIDA: &[u8; 6] = b"SapId\0";
pub const SERVICE_TYPE_VALUE_SAPIDW: &[u8; 6] = b"SapId\0";
pub const SERVICE_TYPE_VALUE_TCPPORTA: &[u8; 8] = b"TcpPort\0";
pub const SERVICE_TYPE_VALUE_TCPPORTW: &[u8; 8] = b"TcpPort\0";
pub const SERVICE_TYPE_VALUE_UDPPORTA: &[u8; 8] = b"UdpPort\0";
pub const SERVICE_TYPE_VALUE_UDPPORTW: &[u8; 8] = b"UdpPort\0";
pub const SERVICE_TYPE_VALUE_OBJECTIDA: &[u8; 9] = b"ObjectId\0";
pub const SERVICE_TYPE_VALUE_OBJECTIDW: &[u8; 9] = b"ObjectId\0";
pub const SERVICE_TYPE_VALUE_SAPID: &[u8; 6] = b"SapId\0";
pub const SERVICE_TYPE_VALUE_TCPPORT: &[u8; 8] = b"TcpPort\0";
pub const SERVICE_TYPE_VALUE_UDPPORT: &[u8; 8] = b"UdpPort\0";
pub const SERVICE_TYPE_VALUE_OBJECTID: &[u8; 9] = b"ObjectId\0";
pub const LUP_DEEP: u32 = 1;
pub const LUP_CONTAINERS: u32 = 2;
pub const LUP_NOCONTAINERS: u32 = 4;
pub const LUP_NEAREST: u32 = 8;
pub const LUP_RETURN_NAME: u32 = 16;
pub const LUP_RETURN_TYPE: u32 = 32;
pub const LUP_RETURN_VERSION: u32 = 64;
pub const LUP_RETURN_COMMENT: u32 = 128;
pub const LUP_RETURN_ADDR: u32 = 256;
pub const LUP_RETURN_BLOB: u32 = 512;
pub const LUP_RETURN_ALIASES: u32 = 1024;
pub const LUP_RETURN_QUERY_STRING: u32 = 2048;
pub const LUP_RETURN_ALL: u32 = 4080;
pub const LUP_RES_SERVICE: u32 = 32768;
pub const LUP_FLUSHCACHE: u32 = 4096;
pub const LUP_FLUSHPREVIOUS: u32 = 8192;
pub const LUP_NON_AUTHORITATIVE: u32 = 16384;
pub const LUP_SECURE: u32 = 32768;
pub const LUP_RETURN_PREFERRED_NAMES: u32 = 65536;
pub const LUP_DNS_ONLY: u32 = 131072;
pub const LUP_RETURN_RESPONSE_FLAGS: u32 = 262144;
pub const LUP_RESERVED_UNUSED: u32 = 524288;
pub const LUP_ADDRCONFIG: u32 = 1048576;
pub const LUP_DUAL_ADDR: u32 = 2097152;
pub const LUP_FILESERVER: u32 = 4194304;
pub const LUP_DISABLE_IDN_ENCODING: u32 = 8388608;
pub const LUP_API_ANSI: u32 = 16777216;
pub const LUP_EXTENDED_QUERYSET: u32 = 33554432;
pub const LUP_SECURE_WITH_FALLBACK: u32 = 67108864;
pub const LUP_EXCLUSIVE_CUSTOM_SERVERS: u32 = 134217728;
pub const LUP_REQUIRE_SECURE: u32 = 268435456;
pub const LUP_RETURN_TTL: u32 = 536870912;
pub const LUP_FORCE_CLEAR_TEXT: u32 = 1073741824;
pub const LUP_RESOLUTION_HANDLE: u32 = 2147483648;
pub const RESULT_IS_ALIAS: u32 = 1;
pub const RESULT_IS_ADDED: u32 = 16;
pub const RESULT_IS_CHANGED: u32 = 32;
pub const RESULT_IS_DELETED: u32 = 64;
pub const POLLRDNORM: u32 = 256;
pub const POLLRDBAND: u32 = 512;
pub const POLLIN: u32 = 768;
pub const POLLPRI: u32 = 1024;
pub const POLLWRNORM: u32 = 16;
pub const POLLOUT: u32 = 16;
pub const POLLWRBAND: u32 = 32;
pub const POLLERR: u32 = 1;
pub const POLLHUP: u32 = 2;
pub const POLLNVAL: u32 = 4;
pub const SOCK_NOTIFY_REGISTER_EVENT_NONE: u32 = 0;
pub const SOCK_NOTIFY_REGISTER_EVENT_IN: u32 = 1;
pub const SOCK_NOTIFY_REGISTER_EVENT_OUT: u32 = 2;
pub const SOCK_NOTIFY_REGISTER_EVENT_HANGUP: u32 = 4;
pub const SOCK_NOTIFY_REGISTER_EVENTS_ALL: u32 = 7;
pub const SOCK_NOTIFY_EVENT_IN: u32 = 1;
pub const SOCK_NOTIFY_EVENT_OUT: u32 = 2;
pub const SOCK_NOTIFY_EVENT_HANGUP: u32 = 4;
pub const SOCK_NOTIFY_EVENT_ERR: u32 = 64;
pub const SOCK_NOTIFY_EVENT_REMOVE: u32 = 128;
pub const SOCK_NOTIFY_EVENTS_ALL: u32 = 199;
pub const SOCK_NOTIFY_OP_NONE: u32 = 0;
pub const SOCK_NOTIFY_OP_ENABLE: u32 = 1;
pub const SOCK_NOTIFY_OP_DISABLE: u32 = 2;
pub const SOCK_NOTIFY_OP_REMOVE: u32 = 4;
pub const SOCK_NOTIFY_TRIGGER_ONESHOT: u32 = 1;
pub const SOCK_NOTIFY_TRIGGER_PERSISTENT: u32 = 2;
pub const SOCK_NOTIFY_TRIGGER_LEVEL: u32 = 4;
pub const SOCK_NOTIFY_TRIGGER_EDGE: u32 = 8;
pub const SOCK_NOTIFY_TRIGGER_ALL: u32 = 15;
pub const _O_RDONLY: u32 = 0;
pub const _O_WRONLY: u32 = 1;
pub const _O_RDWR: u32 = 2;
pub const _O_APPEND: u32 = 8;
pub const _O_CREAT: u32 = 256;
pub const _O_TRUNC: u32 = 512;
pub const _O_EXCL: u32 = 1024;
pub const _O_TEXT: u32 = 16384;
pub const _O_BINARY: u32 = 32768;
pub const _O_WTEXT: u32 = 65536;
pub const _O_U16TEXT: u32 = 131072;
pub const _O_U8TEXT: u32 = 262144;
pub const _O_RAW: u32 = 32768;
pub const _O_NOINHERIT: u32 = 128;
pub const _O_TEMPORARY: u32 = 64;
pub const _O_SHORT_LIVED: u32 = 4096;
pub const _O_OBTAIN_DIR: u32 = 8192;
pub const _O_SEQUENTIAL: u32 = 32;
pub const _O_RANDOM: u32 = 16;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_APPEND: u32 = 8;
pub const O_CREAT: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_EXCL: u32 = 1024;
pub const O_TEXT: u32 = 16384;
pub const O_BINARY: u32 = 32768;
pub const O_RAW: u32 = 32768;
pub const O_TEMPORARY: u32 = 64;
pub const O_NOINHERIT: u32 = 128;
pub const O_SEQUENTIAL: u32 = 32;
pub const O_RANDOM: u32 = 16;
pub const HAVE_U_INT8_T: u32 = 1;
pub const HAVE_INT8_T: u32 = 1;
pub const HAVE_U_INT16_T: u32 = 1;
pub const HAVE_INT16_T: u32 = 1;
pub const HAVE_U_INT32_T: u32 = 1;
pub const HAVE_INT32_T: u32 = 1;
pub const PRId64: &[u8; 5] = b"I64d\0";
pub const PRIo64: &[u8; 5] = b"I64o\0";
pub const PRIx64: &[u8; 5] = b"I64x\0";
pub const PRIu64: &[u8; 5] = b"I64u\0";
pub const _CRT_USE_CONFORMING_ANNEX_K_TIME: u32 = 0;
pub const TIME_UTC: u32 = 1;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _A_NORMAL: u32 = 0;
pub const _A_RDONLY: u32 = 1;
pub const _A_HIDDEN: u32 = 2;
pub const _A_SYSTEM: u32 = 4;
pub const _A_SUBDIR: u32 = 16;
pub const _A_ARCH: u32 = 32;
pub const IFF_UP: u32 = 1;
pub const IFF_BROADCAST: u32 = 2;
pub const IFF_LOOPBACK: u32 = 4;
pub const IFF_POINTTOPOINT: u32 = 8;
pub const IFF_MULTICAST: u32 = 16;
pub const IP_OPTIONS: u32 = 1;
pub const IP_HDRINCL: u32 = 2;
pub const IP_TOS: u32 = 3;
pub const IP_TTL: u32 = 4;
pub const IP_MULTICAST_IF: u32 = 9;
pub const IP_MULTICAST_TTL: u32 = 10;
pub const IP_MULTICAST_LOOP: u32 = 11;
pub const IP_ADD_MEMBERSHIP: u32 = 12;
pub const IP_DROP_MEMBERSHIP: u32 = 13;
pub const IP_DONTFRAGMENT: u32 = 14;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 15;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 16;
pub const IP_BLOCK_SOURCE: u32 = 17;
pub const IP_UNBLOCK_SOURCE: u32 = 18;
pub const IP_PKTINFO: u32 = 19;
pub const IP_HOPLIMIT: u32 = 21;
pub const IP_RECVTTL: u32 = 21;
pub const IP_RECEIVE_BROADCAST: u32 = 22;
pub const IP_RECVIF: u32 = 24;
pub const IP_RECVDSTADDR: u32 = 25;
pub const IP_IFLIST: u32 = 28;
pub const IP_ADD_IFLIST: u32 = 29;
pub const IP_DEL_IFLIST: u32 = 30;
pub const IP_UNICAST_IF: u32 = 31;
pub const IP_RTHDR: u32 = 32;
pub const IP_GET_IFLIST: u32 = 33;
pub const IP_RECVRTHDR: u32 = 38;
pub const IP_TCLASS: u32 = 39;
pub const IP_RECVTCLASS: u32 = 40;
pub const IP_RECVTOS: u32 = 40;
pub const IP_ORIGINAL_ARRIVAL_IF: u32 = 47;
pub const IP_ECN: u32 = 50;
pub const IP_RECVECN: u32 = 50;
pub const IP_PKTINFO_EX: u32 = 51;
pub const IP_WFP_REDIRECT_RECORDS: u32 = 60;
pub const IP_WFP_REDIRECT_CONTEXT: u32 = 70;
pub const IP_MTU_DISCOVER: u32 = 71;
pub const IP_MTU: u32 = 73;
pub const IP_NRT_INTERFACE: u32 = 74;
pub const IP_RECVERR: u32 = 75;
pub const IP_USER_MTU: u32 = 76;
pub const IP_UNSPECIFIED_TYPE_OF_SERVICE: i32 = -1;
pub const IN6ADDR_LINKLOCALPREFIX_LENGTH: u32 = 64;
pub const IN6ADDR_MULTICASTPREFIX_LENGTH: u32 = 8;
pub const IN6ADDR_SOLICITEDNODEMULTICASTPREFIX_LENGTH: u32 = 104;
pub const IN6ADDR_V4MAPPEDPREFIX_LENGTH: u32 = 96;
pub const IN6ADDR_6TO4PREFIX_LENGTH: u32 = 16;
pub const IN6ADDR_TEREDOPREFIX_LENGTH: u32 = 32;
pub const MCAST_JOIN_GROUP: u32 = 41;
pub const MCAST_LEAVE_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 45;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 46;
pub const IPV6_HOPOPTS: u32 = 1;
pub const IPV6_HDRINCL: u32 = 2;
pub const IPV6_UNICAST_HOPS: u32 = 4;
pub const IPV6_MULTICAST_IF: u32 = 9;
pub const IPV6_MULTICAST_HOPS: u32 = 10;
pub const IPV6_MULTICAST_LOOP: u32 = 11;
pub const IPV6_ADD_MEMBERSHIP: u32 = 12;
pub const IPV6_JOIN_GROUP: u32 = 12;
pub const IPV6_DROP_MEMBERSHIP: u32 = 13;
pub const IPV6_LEAVE_GROUP: u32 = 13;
pub const IPV6_DONTFRAG: u32 = 14;
pub const IPV6_PKTINFO: u32 = 19;
pub const IPV6_HOPLIMIT: u32 = 21;
pub const IPV6_PROTECTION_LEVEL: u32 = 23;
pub const IPV6_RECVIF: u32 = 24;
pub const IPV6_RECVDSTADDR: u32 = 25;
pub const IPV6_CHECKSUM: u32 = 26;
pub const IPV6_V6ONLY: u32 = 27;
pub const IPV6_IFLIST: u32 = 28;
pub const IPV6_ADD_IFLIST: u32 = 29;
pub const IPV6_DEL_IFLIST: u32 = 30;
pub const IPV6_UNICAST_IF: u32 = 31;
pub const IPV6_RTHDR: u32 = 32;
pub const IPV6_GET_IFLIST: u32 = 33;
pub const IPV6_RECVRTHDR: u32 = 38;
pub const IPV6_TCLASS: u32 = 39;
pub const IPV6_RECVTCLASS: u32 = 40;
pub const IPV6_ECN: u32 = 50;
pub const IPV6_RECVECN: u32 = 50;
pub const IPV6_PKTINFO_EX: u32 = 51;
pub const IPV6_WFP_REDIRECT_RECORDS: u32 = 60;
pub const IPV6_WFP_REDIRECT_CONTEXT: u32 = 70;
pub const IPV6_MTU_DISCOVER: u32 = 71;
pub const IPV6_MTU: u32 = 72;
pub const IPV6_NRT_INTERFACE: u32 = 74;
pub const IPV6_RECVERR: u32 = 75;
pub const IPV6_USER_MTU: u32 = 76;
pub const IP_UNSPECIFIED_HOP_LIMIT: i32 = -1;
pub const IP_PROTECTION_LEVEL: u32 = 23;
pub const PROTECTION_LEVEL_UNRESTRICTED: u32 = 10;
pub const PROTECTION_LEVEL_EDGERESTRICTED: u32 = 20;
pub const PROTECTION_LEVEL_RESTRICTED: u32 = 30;
pub const INET_ADDRSTRLEN: u32 = 22;
pub const INET6_ADDRSTRLEN: u32 = 65;
pub const TCP_OFFLOAD_NO_PREFERENCE: u32 = 0;
pub const TCP_OFFLOAD_NOT_PREFERRED: u32 = 1;
pub const TCP_OFFLOAD_PREFERRED: u32 = 2;
pub const TCP_EXPEDITED_1122: u32 = 2;
pub const TCP_KEEPALIVE: u32 = 3;
pub const TCP_MAXSEG: u32 = 4;
pub const TCP_MAXRT: u32 = 5;
pub const TCP_STDURG: u32 = 6;
pub const TCP_NOURG: u32 = 7;
pub const TCP_ATMARK: u32 = 8;
pub const TCP_NOSYNRETRIES: u32 = 9;
pub const TCP_TIMESTAMPS: u32 = 10;
pub const TCP_OFFLOAD_PREFERENCE: u32 = 11;
pub const TCP_CONGESTION_ALGORITHM: u32 = 12;
pub const TCP_DELAY_FIN_ACK: u32 = 13;
pub const TCP_MAXRTMS: u32 = 14;
pub const TCP_FASTOPEN: u32 = 15;
pub const TCP_KEEPCNT: u32 = 16;
pub const TCP_KEEPIDLE: u32 = 3;
pub const TCP_KEEPINTVL: u32 = 17;
pub const TCP_FAIL_CONNECT_ON_ICMP_ERROR: u32 = 18;
pub const TCP_ICMP_ERROR_INFO: u32 = 19;
pub const UDP_SEND_MSG_SIZE: u32 = 2;
pub const UDP_RECV_MAX_COALESCED_SIZE: u32 = 3;
pub const UDP_COALESCED_INFO: u32 = 3;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const UDP_NOCHECKSUM: u32 = 1;
pub const UDP_CHECKSUM_COVERAGE: u32 = 20;
pub const EAI_AGAIN: u32 = 11002;
pub const EAI_BADFLAGS: u32 = 10022;
pub const EAI_FAIL: u32 = 11003;
pub const EAI_FAMILY: u32 = 10047;
pub const EAI_MEMORY: u32 = 8;
pub const EAI_NOSECURENAME: u32 = 11032;
pub const EAI_NONAME: u32 = 11001;
pub const EAI_SERVICE: u32 = 10109;
pub const EAI_SOCKTYPE: u32 = 10044;
pub const EAI_IPSECPOLICY: u32 = 11033;
pub const EAI_NODATA: u32 = 11001;
pub const GAI_STRERROR_BUFFER_SIZE: u32 = 1024;
pub const IN_LOOPBACKNET: u32 = 127;
pub const IPPROTO_HOPOPTS: u32 = 0;
pub const IPPROTO_IPV6: u32 = 41;
pub const IPPROTO_ROUTING: u32 = 43;
pub const IPPROTO_FRAGMENT: u32 = 44;
pub const IPPROTO_ESP: u32 = 50;
pub const IPPROTO_AH: u32 = 51;
pub const IPPROTO_ICMPV6: u32 = 58;
pub const IPPROTO_NONE: u32 = 59;
pub const IPPROTO_DSTOPTS: u32 = 60;
pub const IPPROTO_PIM: u32 = 103;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IP6OPT_PAD1: u32 = 0;
pub const IP6OPT_PADN: u32 = 1;
pub const IP6OPT_JUMBO: u32 = 194;
pub const IP6OPT_JUMBO_LEN: u32 = 6;
pub const IP6OPT_ROUTER_ALERT: u32 = 5;
pub const IP6OPT_RTALERT_LEN: u32 = 4;
pub const IP6OPT_RTALERT_MLD: u32 = 0;
pub const IP6OPT_RTALERT_RSVP: u32 = 1;
pub const IP6OPT_RTALERT_ACTNET: u32 = 2;
pub const IP6OPT_MINLEN: u32 = 2;
pub const IP6OPT_BINDING_UPDATE: u32 = 198;
pub const IP6OPT_BINDING_ACK: u32 = 7;
pub const IP6OPT_BINDING_REQ: u32 = 8;
pub const IP6OPT_HOME_ADDRESS: u32 = 201;
pub const IP6OPT_EID: u32 = 138;
pub const IP6OPT_TYPE_SKIP: u32 = 0;
pub const IP6OPT_TYPE_DISCARD: u32 = 64;
pub const IP6OPT_TYPE_FORCEICMP: u32 = 128;
pub const IP6OPT_TYPE_ICMP: u32 = 192;
pub const IP6OPT_MUTABLE: u32 = 32;
pub const BPF_RELEASE: u32 = 199606;
pub const BPF_MAXBUFSIZE: u32 = 32768;
pub const BPF_MINBUFSIZE: u32 = 32;
pub const BPF_MAJOR_VERSION: u32 = 1;
pub const BPF_MINOR_VERSION: u32 = 1;
pub const DLT_NULL: u32 = 0;
pub const DLT_EN10MB: u32 = 1;
pub const DLT_EN3MB: u32 = 2;
pub const DLT_AX25: u32 = 3;
pub const DLT_PRONET: u32 = 4;
pub const DLT_CHAOS: u32 = 5;
pub const DLT_IEEE802: u32 = 6;
pub const DLT_ARCNET: u32 = 7;
pub const DLT_SLIP: u32 = 8;
pub const DLT_PPP: u32 = 9;
pub const DLT_FDDI: u32 = 10;
pub const DLT_ATM_RFC1483: u32 = 11;
pub const DLT_RAW: u32 = 12;
pub const DLT_SLIP_BSDOS: u32 = 15;
pub const DLT_PPP_BSDOS: u32 = 16;
pub const DLT_ATM_CLIP: u32 = 19;
pub const DLT_REDBACK_SMARTEDGE: u32 = 32;
pub const DLT_PPP_SERIAL: u32 = 50;
pub const DLT_PPP_ETHER: u32 = 51;
pub const DLT_SYMANTEC_FIREWALL: u32 = 99;
pub const DLT_C_HDLC: u32 = 104;
pub const DLT_CHDLC: u32 = 104;
pub const DLT_IEEE802_11: u32 = 105;
pub const DLT_FRELAY: u32 = 107;
pub const DLT_LOOP: u32 = 108;
pub const DLT_ENC: u32 = 109;
pub const DLT_LINUX_SLL: u32 = 113;
pub const DLT_LTALK: u32 = 114;
pub const DLT_ECONET: u32 = 115;
pub const DLT_IPFILTER: u32 = 116;
pub const DLT_PFLOG: u32 = 117;
pub const DLT_CISCO_IOS: u32 = 118;
pub const DLT_PRISM_HEADER: u32 = 119;
pub const DLT_AIRONET_HEADER: u32 = 120;
pub const DLT_HHDLC: u32 = 121;
pub const DLT_IP_OVER_FC: u32 = 122;
pub const DLT_SUNATM: u32 = 123;
pub const DLT_RIO: u32 = 124;
pub const DLT_PCI_EXP: u32 = 125;
pub const DLT_AURORA: u32 = 126;
pub const DLT_IEEE802_11_RADIO: u32 = 127;
pub const DLT_TZSP: u32 = 128;
pub const DLT_ARCNET_LINUX: u32 = 129;
pub const DLT_JUNIPER_MLPPP: u32 = 130;
pub const DLT_JUNIPER_MLFR: u32 = 131;
pub const DLT_JUNIPER_ES: u32 = 132;
pub const DLT_JUNIPER_GGSN: u32 = 133;
pub const DLT_JUNIPER_MFR: u32 = 134;
pub const DLT_JUNIPER_ATM2: u32 = 135;
pub const DLT_JUNIPER_SERVICES: u32 = 136;
pub const DLT_JUNIPER_ATM1: u32 = 137;
pub const DLT_APPLE_IP_OVER_IEEE1394: u32 = 138;
pub const DLT_MTP2_WITH_PHDR: u32 = 139;
pub const DLT_MTP2: u32 = 140;
pub const DLT_MTP3: u32 = 141;
pub const DLT_SCCP: u32 = 142;
pub const DLT_DOCSIS: u32 = 143;
pub const DLT_LINUX_IRDA: u32 = 144;
pub const DLT_IBM_SP: u32 = 145;
pub const DLT_IBM_SN: u32 = 146;
pub const DLT_USER0: u32 = 147;
pub const DLT_USER1: u32 = 148;
pub const DLT_USER2: u32 = 149;
pub const DLT_USER3: u32 = 150;
pub const DLT_USER4: u32 = 151;
pub const DLT_USER5: u32 = 152;
pub const DLT_USER6: u32 = 153;
pub const DLT_USER7: u32 = 154;
pub const DLT_USER8: u32 = 155;
pub const DLT_USER9: u32 = 156;
pub const DLT_USER10: u32 = 157;
pub const DLT_USER11: u32 = 158;
pub const DLT_USER12: u32 = 159;
pub const DLT_USER13: u32 = 160;
pub const DLT_USER14: u32 = 161;
pub const DLT_USER15: u32 = 162;
pub const DLT_IEEE802_11_RADIO_AVS: u32 = 163;
pub const DLT_JUNIPER_MONITOR: u32 = 164;
pub const DLT_BACNET_MS_TP: u32 = 165;
pub const DLT_PPP_PPPD: u32 = 166;
pub const DLT_PPP_WITH_DIRECTION: u32 = 166;
pub const DLT_LINUX_PPP_WITHDIRECTION: u32 = 166;
pub const DLT_JUNIPER_PPPOE: u32 = 167;
pub const DLT_JUNIPER_PPPOE_ATM: u32 = 168;
pub const DLT_GPRS_LLC: u32 = 169;
pub const DLT_GPF_T: u32 = 170;
pub const DLT_GPF_F: u32 = 171;
pub const DLT_GCOM_T1E1: u32 = 172;
pub const DLT_GCOM_SERIAL: u32 = 173;
pub const DLT_JUNIPER_PIC_PEER: u32 = 174;
pub const DLT_ERF_ETH: u32 = 175;
pub const DLT_ERF_POS: u32 = 176;
pub const DLT_LINUX_LAPD: u32 = 177;
pub const DLT_JUNIPER_ETHER: u32 = 178;
pub const DLT_JUNIPER_PPP: u32 = 179;
pub const DLT_JUNIPER_FRELAY: u32 = 180;
pub const DLT_JUNIPER_CHDLC: u32 = 181;
pub const DLT_MFR: u32 = 182;
pub const DLT_JUNIPER_VP: u32 = 183;
pub const DLT_A429: u32 = 184;
pub const DLT_A653_ICM: u32 = 185;
pub const DLT_USB: u32 = 186;
pub const DLT_BLUETOOTH_HCI_H4: u32 = 187;
pub const DLT_IEEE802_16_MAC_CPS: u32 = 188;
pub const DLT_USB_LINUX: u32 = 189;
pub const DLT_CAN20B: u32 = 190;
pub const DLT_IEEE802_15_4_LINUX: u32 = 191;
pub const DLT_PPI: u32 = 192;
pub const DLT_IEEE802_16_MAC_CPS_RADIO: u32 = 193;
pub const DLT_JUNIPER_ISM: u32 = 194;
pub const DLT_IEEE802_15_4: u32 = 195;
pub const DLT_SITA: u32 = 196;
pub const DLT_ERF: u32 = 197;
pub const DLT_RAIF1: u32 = 198;
pub const DLT_IPMB: u32 = 199;
pub const DLT_JUNIPER_ST: u32 = 200;
pub const DLT_BLUETOOTH_HCI_H4_WITH_PHDR: u32 = 201;
pub const DLT_AX25_KISS: u32 = 202;
pub const DLT_LAPD: u32 = 203;
pub const DLT_PPP_WITH_DIR: u32 = 204;
pub const DLT_C_HDLC_WITH_DIR: u32 = 205;
pub const DLT_FRELAY_WITH_DIR: u32 = 206;
pub const DLT_LAPB_WITH_DIR: u32 = 207;
pub const DLT_IPMB_LINUX: u32 = 209;
pub const DLT_FLEXRAY: u32 = 210;
pub const DLT_MOST: u32 = 211;
pub const DLT_LIN: u32 = 212;
pub const DLT_X2E_SERIAL: u32 = 213;
pub const DLT_X2E_XORAYA: u32 = 214;
pub const DLT_IEEE802_15_4_NONASK_PHY: u32 = 215;
pub const DLT_CLASS_NETBSD_RAWAF: u32 = 35913728;
pub const BPF_LD: u32 = 0;
pub const BPF_LDX: u32 = 1;
pub const BPF_ST: u32 = 2;
pub const BPF_STX: u32 = 3;
pub const BPF_ALU: u32 = 4;
pub const BPF_JMP: u32 = 5;
pub const BPF_RET: u32 = 6;
pub const BPF_MISC: u32 = 7;
pub const BPF_W: u32 = 0;
pub const BPF_H: u32 = 8;
pub const BPF_B: u32 = 16;
pub const BPF_IMM: u32 = 0;
pub const BPF_ABS: u32 = 32;
pub const BPF_IND: u32 = 64;
pub const BPF_MEM: u32 = 96;
pub const BPF_LEN: u32 = 128;
pub const BPF_MSH: u32 = 160;
pub const BPF_ADD: u32 = 0;
pub const BPF_SUB: u32 = 16;
pub const BPF_MUL: u32 = 32;
pub const BPF_DIV: u32 = 48;
pub const BPF_OR: u32 = 64;
pub const BPF_AND: u32 = 80;
pub const BPF_LSH: u32 = 96;
pub const BPF_RSH: u32 = 112;
pub const BPF_NEG: u32 = 128;
pub const BPF_JA: u32 = 0;
pub const BPF_JEQ: u32 = 16;
pub const BPF_JGT: u32 = 32;
pub const BPF_JGE: u32 = 48;
pub const BPF_JSET: u32 = 64;
pub const BPF_K: u32 = 0;
pub const BPF_X: u32 = 8;
pub const BPF_A: u32 = 16;
pub const BPF_TAX: u32 = 0;
pub const BPF_TXA: u32 = 128;
pub const BPF_MEMWORDS: u32 = 16;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const PCAP_VERSION_MAJOR: u32 = 2;
pub const PCAP_VERSION_MINOR: u32 = 4;
pub const PCAP_ERRBUF_SIZE: u32 = 256;
pub const PCAP_IF_LOOPBACK: u32 = 1;
pub const PCAP_ERROR: i32 = -1;
pub const PCAP_ERROR_BREAK: i32 = -2;
pub const PCAP_ERROR_NOT_ACTIVATED: i32 = -3;
pub const PCAP_ERROR_ACTIVATED: i32 = -4;
pub const PCAP_ERROR_NO_SUCH_DEVICE: i32 = -5;
pub const PCAP_ERROR_RFMON_NOTSUP: i32 = -6;
pub const PCAP_ERROR_NOT_RFMON: i32 = -7;
pub const PCAP_ERROR_PERM_DENIED: i32 = -8;
pub const PCAP_ERROR_IFACE_NOT_UP: i32 = -9;
pub const PCAP_WARNING: u32 = 1;
pub const PCAP_WARNING_PROMISC_NOTSUP: u32 = 2;
pub const MODE_CAPT: u32 = 0;
pub const MODE_STAT: u32 = 1;
pub const MODE_MON: u32 = 2;
pub const PCAP_BUF_SIZE: u32 = 1024;
pub const PCAP_SRC_FILE: u32 = 2;
pub const PCAP_SRC_IFLOCAL: u32 = 3;
pub const PCAP_SRC_IFREMOTE: u32 = 4;
pub const PCAP_SRC_FILE_STRING: &[u8; 8] = b"file://\0";
pub const PCAP_SRC_IF_STRING: &[u8; 9] = b"rpcap://\0";
pub const PCAP_OPENFLAG_PROMISCUOUS: u32 = 1;
pub const PCAP_OPENFLAG_DATATX_UDP: u32 = 2;
pub const PCAP_OPENFLAG_NOCAPTURE_RPCAP: u32 = 4;
pub const PCAP_OPENFLAG_NOCAPTURE_LOCAL: u32 = 8;
pub const PCAP_OPENFLAG_MAX_RESPONSIVENESS: u32 = 16;
pub const PCAP_SAMP_NOSAMP: u32 = 0;
pub const PCAP_SAMP_1_EVERY_N: u32 = 1;
pub const PCAP_SAMP_FIRST_AFTER_N_MS: u32 = 2;
pub const RPCAP_RMTAUTH_NULL: u32 = 0;
pub const RPCAP_RMTAUTH_PWD: u32 = 1;
pub const RPCAP_HOSTLIST_SIZE: u32 = 1024;
pub const PACKET_MODE_CAPT: u32 = 0;
pub const PACKET_MODE_STAT: u32 = 1;
pub const PACKET_MODE_MON: u32 = 2;
pub const PACKET_MODE_DUMP: u32 = 16;
pub const NdisMediumNull: i32 = -1;
pub const NdisMediumCHDLC: i32 = -2;
pub const NdisMediumPPPSerial: i32 = -3;
pub const NdisMediumBare80211: i32 = -4;
pub const NdisMediumRadio80211: i32 = -5;
pub const NdisMediumPpi: i32 = -6;
pub const NPF_DISABLE_LOOPBACK: u32 = 1;
pub const NPF_ENABLE_LOOPBACK: u32 = 2;
pub const MAX_LINK_NAME_LENGTH: u32 = 64;
pub const NMAX_PACKET: u32 = 65535;
pub const ADAPTER_NAME_LENGTH: u32 = 268;
pub const ADAPTER_DESC_LENGTH: u32 = 128;
pub const MAX_MAC_ADDR_LENGTH: u32 = 8;
pub const MAX_NETWORK_ADDRESSES: u32 = 16;
pub const INFO_FLAG_NDIS_ADAPTER: u32 = 0;
pub const INFO_FLAG_NDISWAN_ADAPTER: u32 = 1;
pub const INFO_FLAG_DAG_CARD: u32 = 2;
pub const INFO_FLAG_DAG_FILE: u32 = 6;
pub const INFO_FLAG_DONT_EXPORT: u32 = 8;
pub const INFO_FLAG_AIRPCAP_CARD: u32 = 16;
pub const INFO_FLAG_NPFIM_DEVICE: u32 = 32;
pub const PACKET_START_OEM_NO_NETMON: u32 = 1;
pub const EC_MAXELIST: u32 = 64;
pub const EC_MAXNAME: u32 = 40;
pub const EC_MAXSLAVE: u32 = 200;
pub const EC_MAXGROUP: u32 = 2;
pub const EC_MAXIOSEGMENTS: u32 = 64;
pub const EC_MAXMBX: u32 = 1486;
pub const EC_MAXEEPDO: u32 = 512;
pub const EC_MAXSM: u32 = 8;
pub const EC_MAXFMMU: u32 = 4;
pub const EC_MAXLEN_ADAPTERNAME: u32 = 128;
pub const EC_MAX_MAPT: u32 = 1;
pub const ECT_MBXPROT_AOE: u32 = 1;
pub const ECT_MBXPROT_EOE: u32 = 2;
pub const ECT_MBXPROT_COE: u32 = 4;
pub const ECT_MBXPROT_FOE: u32 = 8;
pub const ECT_MBXPROT_SOE: u32 = 16;
pub const ECT_MBXPROT_VOE: u32 = 32;
pub const ECT_COEDET_SDO: u32 = 1;
pub const ECT_COEDET_SDOINFO: u32 = 2;
pub const ECT_COEDET_PDOASSIGN: u32 = 4;
pub const ECT_COEDET_PDOCONFIG: u32 = 8;
pub const ECT_COEDET_UPLOAD: u32 = 16;
pub const ECT_COEDET_SDOCA: u32 = 32;
pub const EC_SMENABLEMASK: u32 = 4294901759;
pub const EC_MAXODLIST: u32 = 1024;
pub const EC_MAXOELIST: u32 = 256;
pub const EC_SOE_DATASTATE_B: u32 = 1;
pub const EC_SOE_NAME_B: u32 = 2;
pub const EC_SOE_ATTRIBUTE_B: u32 = 4;
pub const EC_SOE_UNIT_B: u32 = 8;
pub const EC_SOE_MIN_B: u32 = 16;
pub const EC_SOE_MAX_B: u32 = 32;
pub const EC_SOE_VALUE_B: u32 = 64;
pub const EC_SOE_DEFAULT_B: u32 = 128;
pub const EC_SOE_MAXNAME: u32 = 60;
pub const EC_SOE_MAXMAPPING: u32 = 64;
pub const EC_IDN_MDTCONFIG: u32 = 24;
pub const EC_IDN_ATCONFIG: u32 = 16;
pub const EC_SOE_LENGTH_1: u32 = 0;
pub const EC_SOE_LENGTH_2: u32 = 1;
pub const EC_SOE_LENGTH_4: u32 = 2;
pub const EC_SOE_LENGTH_8: u32 = 3;
pub const EC_SOE_TYPE_BINARY: u32 = 0;
pub const EC_SOE_TYPE_UINT: u32 = 1;
pub const EC_SOE_TYPE_INT: u32 = 2;
pub const EC_SOE_TYPE_HEX: u32 = 3;
pub const EC_SOE_TYPE_STRING: u32 = 4;
pub const EC_SOE_TYPE_IDN: u32 = 5;
pub const EC_SOE_TYPE_FLOAT: u32 = 6;
pub const EC_SOE_TYPE_PARAMETER: u32 = 7;
pub const EOE_DNS_NAME_LENGTH: u32 = 32;
pub const EOE_ETHADDR_LENGTH: u32 = 6;
pub const EOE_HDR_FRAME_TYPE_OFFSET: u32 = 0;
pub const EOE_HDR_FRAME_TYPE: u32 = 15;
pub const EOE_HDR_FRAME_PORT_OFFSET: u32 = 4;
pub const EOE_HDR_FRAME_PORT: u32 = 240;
pub const EOE_HDR_LAST_FRAGMENT_OFFSET: u32 = 8;
pub const EOE_HDR_LAST_FRAGMENT: u32 = 256;
pub const EOE_HDR_TIME_APPEND_OFFSET: u32 = 9;
pub const EOE_HDR_TIME_APPEND: u32 = 512;
pub const EOE_HDR_TIME_REQUEST_OFFSET: u32 = 10;
pub const EOE_HDR_TIME_REQUEST: u32 = 1024;
pub const EOE_HDR_FRAG_NO_OFFSET: u32 = 0;
pub const EOE_HDR_FRAG_NO: u32 = 63;
pub const EOE_HDR_FRAME_OFFSET_OFFSET: u32 = 6;
pub const EOE_HDR_FRAME_OFFSET: u32 = 4032;
pub const EOE_HDR_FRAME_NO_OFFSET: u32 = 12;
pub const EOE_HDR_FRAME_NO: u32 = 61440;
pub const EOE_PARAM_OFFSET: u32 = 4;
pub const EOE_PARAM_MAC_INCLUDE: u32 = 1;
pub const EOE_PARAM_IP_INCLUDE: u32 = 2;
pub const EOE_PARAM_SUBNET_IP_INCLUDE: u32 = 4;
pub const EOE_PARAM_DEFAULT_GATEWAY_INCLUDE: u32 = 8;
pub const EOE_PARAM_DNS_IP_INCLUDE: u32 = 16;
pub const EOE_PARAM_DNS_NAME_INCLUDE: u32 = 32;
pub const EOE_FRAG_DATA: u32 = 0;
pub const EOE_INIT_RESP_TIMESTAMP: u32 = 1;
pub const EOE_INIT_REQ: u32 = 2;
pub const EOE_INIT_RESP: u32 = 3;
pub const EOE_SET_ADDR_FILTER_REQ: u32 = 4;
pub const EOE_SET_ADDR_FILTER_RESP: u32 = 5;
pub const EOE_GET_IP_PARAM_REQ: u32 = 6;
pub const EOE_GET_IP_PARAM_RESP: u32 = 7;
pub const EOE_GET_ADDR_FILTER_REQ: u32 = 8;
pub const EOE_GET_ADDR_FILTER_RESP: u32 = 9;
pub const EOE_RESULT_SUCCESS: u32 = 0;
pub const EOE_RESULT_UNSPECIFIED_ERROR: u32 = 1;
pub const EOE_RESULT_UNSUPPORTED_FRAME_TYPE: u32 = 2;
pub const EOE_RESULT_NO_IP_SUPPORT: u32 = 513;
pub const EOE_RESULT_NO_DHCP_SUPPORT: u32 = 514;
pub const EOE_RESULT_NO_FILTER_SUPPORT: u32 = 1025;
pub const EC_NODEOFFSET: u32 = 4096;
pub const EC_TEMPNODE: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
unsafe extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
unsafe extern "C" {
    pub fn __security_init_cookie();
}
unsafe extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
unsafe extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub const _EXCEPTION_DISPOSITION_ExceptionContinueExecution: _EXCEPTION_DISPOSITION = 0;
pub const _EXCEPTION_DISPOSITION_ExceptionContinueSearch: _EXCEPTION_DISPOSITION = 1;
pub const _EXCEPTION_DISPOSITION_ExceptionNestedException: _EXCEPTION_DISPOSITION = 2;
pub const _EXCEPTION_DISPOSITION_ExceptionCollidedUnwind: _EXCEPTION_DISPOSITION = 3;
pub type _EXCEPTION_DISPOSITION = ::std::os::raw::c_int;
pub use self::_EXCEPTION_DISPOSITION as EXCEPTION_DISPOSITION;
unsafe extern "C" {
    pub fn __C_specific_handler(
        ExceptionRecord: *mut _EXCEPTION_RECORD,
        EstablisherFrame: *mut ::std::os::raw::c_void,
        ContextRecord: *mut _CONTEXT,
        DispatcherContext: *mut _DISPATCHER_CONTEXT,
    ) -> EXCEPTION_DISPOSITION;
}
unsafe extern "C" {
    pub fn _exception_code() -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _exception_info() -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _abnormal_termination() -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
pub type ULONG = ::std::os::raw::c_ulong;
pub type PULONG = *mut ULONG;
pub type USHORT = ::std::os::raw::c_ushort;
pub type PUSHORT = *mut USHORT;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type PUCHAR = *mut UCHAR;
pub type PSZ = *mut ::std::os::raw::c_char;
pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type WORD = ::std::os::raw::c_ushort;
pub type FLOAT = f32;
pub type PFLOAT = *mut FLOAT;
pub type PBOOL = *mut BOOL;
pub type LPBOOL = *mut BOOL;
pub type PBYTE = *mut BYTE;
pub type LPBYTE = *mut BYTE;
pub type PINT = *mut ::std::os::raw::c_int;
pub type LPINT = *mut ::std::os::raw::c_int;
pub type PWORD = *mut WORD;
pub type LPWORD = *mut WORD;
pub type LPLONG = *mut ::std::os::raw::c_long;
pub type PDWORD = *mut DWORD;
pub type LPDWORD = *mut DWORD;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type LPCVOID = *const ::std::os::raw::c_void;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type PUINT = *mut ::std::os::raw::c_uint;
pub type __crt_bool = bool;
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo();
}
unsafe extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
unsafe extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_data_public"]
        [::std::mem::size_of::<__crt_locale_data_public>() - 16usize];
    ["Alignment of __crt_locale_data_public"]
        [::std::mem::align_of::<__crt_locale_data_public>() - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_pctype"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_pctype) - 0usize];
    ["Offset of field: __crt_locale_data_public::_locale_mb_cur_max"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_mb_cur_max) - 8usize];
    ["Offset of field: __crt_locale_data_public::_locale_lc_codepage"]
        [::std::mem::offset_of!(__crt_locale_data_public, _locale_lc_codepage) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __crt_locale_pointers"][::std::mem::size_of::<__crt_locale_pointers>() - 16usize];
    ["Alignment of __crt_locale_pointers"]
        [::std::mem::align_of::<__crt_locale_pointers>() - 8usize];
    ["Offset of field: __crt_locale_pointers::locinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, locinfo) - 0usize];
    ["Offset of field: __crt_locale_pointers::mbcinfo"]
        [::std::mem::offset_of!(__crt_locale_pointers, mbcinfo) - 8usize];
};
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _Mbstatet"][::std::mem::size_of::<_Mbstatet>() - 8usize];
    ["Alignment of _Mbstatet"][::std::mem::align_of::<_Mbstatet>() - 4usize];
    ["Offset of field: _Mbstatet::_Wchar"][::std::mem::offset_of!(_Mbstatet, _Wchar) - 0usize];
    ["Offset of field: _Mbstatet::_Byte"][::std::mem::offset_of!(_Mbstatet, _Byte) - 4usize];
    ["Offset of field: _Mbstatet::_State"][::std::mem::offset_of!(_Mbstatet, _State) - 6usize];
};
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
unsafe extern "C" {
    pub fn __pctype_func() -> *const ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn __pwctype_func() -> *const wctype_t;
}
unsafe extern "C" {
    pub fn iswalnum(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswalpha(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswascii(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswblank(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswcntrl(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswgraph(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswlower(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswprint(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswpunct(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswspace(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswupper(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iswxdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iswcsymf(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iswcsym(_C: wint_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswblank_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn towupper(_C: wint_t) -> wint_t;
}
unsafe extern "C" {
    pub fn towlower(_C: wint_t) -> wint_t;
}
unsafe extern "C" {
    pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
unsafe extern "C" {
    pub fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isleadbyte_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isctype(
        _C: ::std::os::raw::c_int,
        _Type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isctype_l(
        _C: ::std::os::raw::c_int,
        _Type: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalpha(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isalpha_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn islower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _islower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isxdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isxdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isspace(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isspace_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ispunct(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ispunct_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isblank(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isblank_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isalnum(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isalnum_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isprint(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isprint_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isgraph(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _isgraph_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iscntrl(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _iscntrl_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tolower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _toupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __isascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __toascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iscsymf(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __iscsym(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
pub type POINTER_64_INT = ::std::os::raw::c_ulonglong;
pub type INT8 = ::std::os::raw::c_schar;
pub type PINT8 = *mut ::std::os::raw::c_schar;
pub type INT16 = ::std::os::raw::c_short;
pub type PINT16 = *mut ::std::os::raw::c_short;
pub type INT32 = ::std::os::raw::c_int;
pub type PINT32 = *mut ::std::os::raw::c_int;
pub type INT64 = ::std::os::raw::c_longlong;
pub type PINT64 = *mut ::std::os::raw::c_longlong;
pub type UINT8 = ::std::os::raw::c_uchar;
pub type PUINT8 = *mut ::std::os::raw::c_uchar;
pub type UINT16 = ::std::os::raw::c_ushort;
pub type PUINT16 = *mut ::std::os::raw::c_ushort;
pub type UINT32 = ::std::os::raw::c_uint;
pub type PUINT32 = *mut ::std::os::raw::c_uint;
pub type UINT64 = ::std::os::raw::c_ulonglong;
pub type PUINT64 = *mut ::std::os::raw::c_ulonglong;
pub type LONG32 = ::std::os::raw::c_int;
pub type PLONG32 = *mut ::std::os::raw::c_int;
pub type ULONG32 = ::std::os::raw::c_uint;
pub type PULONG32 = *mut ::std::os::raw::c_uint;
pub type DWORD32 = ::std::os::raw::c_uint;
pub type PDWORD32 = *mut ::std::os::raw::c_uint;
pub type INT_PTR = ::std::os::raw::c_longlong;
pub type PINT_PTR = *mut ::std::os::raw::c_longlong;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type PUINT_PTR = *mut ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
pub type PLONG_PTR = *mut ::std::os::raw::c_longlong;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type PULONG_PTR = *mut ::std::os::raw::c_ulonglong;
pub type PHANDLE64 = *mut *mut ::std::os::raw::c_void;
pub type SHANDLE_PTR = ::std::os::raw::c_longlong;
pub type HANDLE_PTR = ::std::os::raw::c_ulonglong;
pub type UHALF_PTR = ::std::os::raw::c_uint;
pub type PUHALF_PTR = *mut ::std::os::raw::c_uint;
pub type HALF_PTR = ::std::os::raw::c_int;
pub type PHALF_PTR = *mut ::std::os::raw::c_int;
pub type SIZE_T = ULONG_PTR;
pub type PSIZE_T = *mut ULONG_PTR;
pub type SSIZE_T = LONG_PTR;
pub type PSSIZE_T = *mut LONG_PTR;
pub type DWORD_PTR = ULONG_PTR;
pub type PDWORD_PTR = *mut ULONG_PTR;
pub type LONG64 = ::std::os::raw::c_longlong;
pub type PLONG64 = *mut ::std::os::raw::c_longlong;
pub type ULONG64 = ::std::os::raw::c_ulonglong;
pub type PULONG64 = *mut ::std::os::raw::c_ulonglong;
pub type DWORD64 = ::std::os::raw::c_ulonglong;
pub type PDWORD64 = *mut ::std::os::raw::c_ulonglong;
pub type KAFFINITY = ULONG_PTR;
pub type PKAFFINITY = *mut KAFFINITY;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type CHAR = ::std::os::raw::c_char;
pub type SHORT = ::std::os::raw::c_short;
pub type LONG = ::std::os::raw::c_long;
pub type WCHAR = wchar_t;
pub type PWCHAR = *mut WCHAR;
pub type LPWCH = *mut WCHAR;
pub type PWCH = *mut WCHAR;
pub type LPCWCH = *const WCHAR;
pub type PCWCH = *const WCHAR;
pub type NWPSTR = *mut WCHAR;
pub type LPWSTR = *mut WCHAR;
pub type PWSTR = *mut WCHAR;
pub type PZPWSTR = *mut PWSTR;
pub type PCZPWSTR = *const PWSTR;
pub type LPUWSTR = *mut WCHAR;
pub type PUWSTR = *mut WCHAR;
pub type LPCWSTR = *const WCHAR;
pub type PCWSTR = *const WCHAR;
pub type PZPCWSTR = *mut PCWSTR;
pub type PCZPCWSTR = *const PCWSTR;
pub type LPCUWSTR = *const WCHAR;
pub type PCUWSTR = *const WCHAR;
pub type PZZWSTR = *mut WCHAR;
pub type PCZZWSTR = *const WCHAR;
pub type PUZZWSTR = *mut WCHAR;
pub type PCUZZWSTR = *const WCHAR;
pub type PNZWCH = *mut WCHAR;
pub type PCNZWCH = *const WCHAR;
pub type PUNZWCH = *mut WCHAR;
pub type PCUNZWCH = *const WCHAR;
pub type LPCWCHAR = *const WCHAR;
pub type PCWCHAR = *const WCHAR;
pub type LPCUWCHAR = *const WCHAR;
pub type PCUWCHAR = *const WCHAR;
pub type UCSCHAR = ::std::os::raw::c_ulong;
pub type PUCSCHAR = *mut UCSCHAR;
pub type PCUCSCHAR = *const UCSCHAR;
pub type PUCSSTR = *mut UCSCHAR;
pub type PUUCSSTR = *mut UCSCHAR;
pub type PCUCSSTR = *const UCSCHAR;
pub type PCUUCSSTR = *const UCSCHAR;
pub type PUUCSCHAR = *mut UCSCHAR;
pub type PCUUCSCHAR = *const UCSCHAR;
pub type PCHAR = *mut CHAR;
pub type LPCH = *mut CHAR;
pub type PCH = *mut CHAR;
pub type LPCCH = *const CHAR;
pub type PCCH = *const CHAR;
pub type NPSTR = *mut CHAR;
pub type LPSTR = *mut CHAR;
pub type PSTR = *mut CHAR;
pub type PZPSTR = *mut PSTR;
pub type PCZPSTR = *const PSTR;
pub type LPCSTR = *const CHAR;
pub type PCSTR = *const CHAR;
pub type PZPCSTR = *mut PCSTR;
pub type PCZPCSTR = *const PCSTR;
pub type PZZSTR = *mut CHAR;
pub type PCZZSTR = *const CHAR;
pub type PNZCH = *mut CHAR;
pub type PCNZCH = *const CHAR;
pub type TCHAR = ::std::os::raw::c_char;
pub type PTCHAR = *mut ::std::os::raw::c_char;
pub type TBYTE = ::std::os::raw::c_uchar;
pub type PTBYTE = *mut ::std::os::raw::c_uchar;
pub type LPTCH = LPCH;
pub type PTCH = LPCH;
pub type LPCTCH = LPCCH;
pub type PCTCH = LPCCH;
pub type PTSTR = LPSTR;
pub type LPTSTR = LPSTR;
pub type PUTSTR = LPSTR;
pub type LPUTSTR = LPSTR;
pub type PCTSTR = LPCSTR;
pub type LPCTSTR = LPCSTR;
pub type PCUTSTR = LPCSTR;
pub type LPCUTSTR = LPCSTR;
pub type PZZTSTR = PZZSTR;
pub type PUZZTSTR = PZZSTR;
pub type PCZZTSTR = PCZZSTR;
pub type PCUZZTSTR = PCZZSTR;
pub type PZPTSTR = PZPSTR;
pub type PNZTCH = PNZCH;
pub type PUNZTCH = PNZCH;
pub type PCNZTCH = PCNZCH;
pub type PCUNZTCH = PCNZCH;
pub type PSHORT = *mut SHORT;
pub type PLONG = *mut LONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_NUMBER {
    pub Group: WORD,
    pub Number: BYTE,
    pub Reserved: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESSOR_NUMBER"][::std::mem::size_of::<_PROCESSOR_NUMBER>() - 4usize];
    ["Alignment of _PROCESSOR_NUMBER"][::std::mem::align_of::<_PROCESSOR_NUMBER>() - 2usize];
    ["Offset of field: _PROCESSOR_NUMBER::Group"]
        [::std::mem::offset_of!(_PROCESSOR_NUMBER, Group) - 0usize];
    ["Offset of field: _PROCESSOR_NUMBER::Number"]
        [::std::mem::offset_of!(_PROCESSOR_NUMBER, Number) - 2usize];
    ["Offset of field: _PROCESSOR_NUMBER::Reserved"]
        [::std::mem::offset_of!(_PROCESSOR_NUMBER, Reserved) - 3usize];
};
pub type PROCESSOR_NUMBER = _PROCESSOR_NUMBER;
pub type PPROCESSOR_NUMBER = *mut _PROCESSOR_NUMBER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GROUP_AFFINITY {
    pub Mask: KAFFINITY,
    pub Group: WORD,
    pub Reserved: [WORD; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GROUP_AFFINITY"][::std::mem::size_of::<_GROUP_AFFINITY>() - 16usize];
    ["Alignment of _GROUP_AFFINITY"][::std::mem::align_of::<_GROUP_AFFINITY>() - 8usize];
    ["Offset of field: _GROUP_AFFINITY::Mask"]
        [::std::mem::offset_of!(_GROUP_AFFINITY, Mask) - 0usize];
    ["Offset of field: _GROUP_AFFINITY::Group"]
        [::std::mem::offset_of!(_GROUP_AFFINITY, Group) - 8usize];
    ["Offset of field: _GROUP_AFFINITY::Reserved"]
        [::std::mem::offset_of!(_GROUP_AFFINITY, Reserved) - 10usize];
};
pub type GROUP_AFFINITY = _GROUP_AFFINITY;
pub type PGROUP_AFFINITY = *mut _GROUP_AFFINITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GROUP_AFFINITY32 {
    pub Mask: DWORD,
    pub Group: WORD,
    pub Reserved: [WORD; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GROUP_AFFINITY32"][::std::mem::size_of::<_GROUP_AFFINITY32>() - 12usize];
    ["Alignment of _GROUP_AFFINITY32"][::std::mem::align_of::<_GROUP_AFFINITY32>() - 4usize];
    ["Offset of field: _GROUP_AFFINITY32::Mask"]
        [::std::mem::offset_of!(_GROUP_AFFINITY32, Mask) - 0usize];
    ["Offset of field: _GROUP_AFFINITY32::Group"]
        [::std::mem::offset_of!(_GROUP_AFFINITY32, Group) - 4usize];
    ["Offset of field: _GROUP_AFFINITY32::Reserved"]
        [::std::mem::offset_of!(_GROUP_AFFINITY32, Reserved) - 6usize];
};
pub type GROUP_AFFINITY32 = _GROUP_AFFINITY32;
pub type PGROUP_AFFINITY32 = *mut _GROUP_AFFINITY32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GROUP_AFFINITY64 {
    pub Mask: ::std::os::raw::c_ulonglong,
    pub Group: WORD,
    pub Reserved: [WORD; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GROUP_AFFINITY64"][::std::mem::size_of::<_GROUP_AFFINITY64>() - 16usize];
    ["Alignment of _GROUP_AFFINITY64"][::std::mem::align_of::<_GROUP_AFFINITY64>() - 8usize];
    ["Offset of field: _GROUP_AFFINITY64::Mask"]
        [::std::mem::offset_of!(_GROUP_AFFINITY64, Mask) - 0usize];
    ["Offset of field: _GROUP_AFFINITY64::Group"]
        [::std::mem::offset_of!(_GROUP_AFFINITY64, Group) - 8usize];
    ["Offset of field: _GROUP_AFFINITY64::Reserved"]
        [::std::mem::offset_of!(_GROUP_AFFINITY64, Reserved) - 10usize];
};
pub type GROUP_AFFINITY64 = _GROUP_AFFINITY64;
pub type PGROUP_AFFINITY64 = *mut _GROUP_AFFINITY64;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type PHANDLE = *mut HANDLE;
pub type FCHAR = BYTE;
pub type FSHORT = WORD;
pub type FLONG = DWORD;
pub type HRESULT = ::std::os::raw::c_long;
pub type CCHAR = ::std::os::raw::c_char;
pub type LCID = DWORD;
pub type PLCID = PDWORD;
pub type LANGID = WORD;
pub const COMPARTMENT_ID_UNSPECIFIED_COMPARTMENT_ID: COMPARTMENT_ID = 0;
pub const COMPARTMENT_ID_DEFAULT_COMPARTMENT_ID: COMPARTMENT_ID = 1;
pub type COMPARTMENT_ID = ::std::os::raw::c_int;
pub type PCOMPARTMENT_ID = *mut COMPARTMENT_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FLOAT128 {
    pub LowPart: ::std::os::raw::c_longlong,
    pub HighPart: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FLOAT128"][::std::mem::size_of::<_FLOAT128>() - 16usize];
    ["Alignment of _FLOAT128"][::std::mem::align_of::<_FLOAT128>() - 8usize];
    ["Offset of field: _FLOAT128::LowPart"][::std::mem::offset_of!(_FLOAT128, LowPart) - 0usize];
    ["Offset of field: _FLOAT128::HighPart"][::std::mem::offset_of!(_FLOAT128, HighPart) - 8usize];
};
pub type FLOAT128 = _FLOAT128;
pub type PFLOAT128 = *mut FLOAT128;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type PLONGLONG = *mut LONGLONG;
pub type PULONGLONG = *mut ULONGLONG;
pub type USN = LONGLONG;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LARGE_INTEGER {
    pub __bindgen_anon_1: _LARGE_INTEGER__bindgen_ty_1,
    pub u: _LARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: LONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LARGE_INTEGER__bindgen_ty_1"]
        [::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_1>() - 8usize];
    ["Alignment of _LARGE_INTEGER__bindgen_ty_1"]
        [::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_1>() - 4usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_1::LowPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_1, LowPart) - 0usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_1::HighPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_1, HighPart) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LARGE_INTEGER__bindgen_ty_2"]
        [::std::mem::size_of::<_LARGE_INTEGER__bindgen_ty_2>() - 8usize];
    ["Alignment of _LARGE_INTEGER__bindgen_ty_2"]
        [::std::mem::align_of::<_LARGE_INTEGER__bindgen_ty_2>() - 4usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_2::LowPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_2, LowPart) - 0usize];
    ["Offset of field: _LARGE_INTEGER__bindgen_ty_2::HighPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER__bindgen_ty_2, HighPart) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LARGE_INTEGER"][::std::mem::size_of::<_LARGE_INTEGER>() - 8usize];
    ["Alignment of _LARGE_INTEGER"][::std::mem::align_of::<_LARGE_INTEGER>() - 8usize];
    ["Offset of field: _LARGE_INTEGER::u"][::std::mem::offset_of!(_LARGE_INTEGER, u) - 0usize];
    ["Offset of field: _LARGE_INTEGER::QuadPart"]
        [::std::mem::offset_of!(_LARGE_INTEGER, QuadPart) - 0usize];
};
pub type LARGE_INTEGER = _LARGE_INTEGER;
pub type PLARGE_INTEGER = *mut LARGE_INTEGER;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ULARGE_INTEGER {
    pub __bindgen_anon_1: _ULARGE_INTEGER__bindgen_ty_1,
    pub u: _ULARGE_INTEGER__bindgen_ty_2,
    pub QuadPart: ULONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ULARGE_INTEGER__bindgen_ty_1 {
    pub LowPart: DWORD,
    pub HighPart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ULARGE_INTEGER__bindgen_ty_1"]
        [::std::mem::size_of::<_ULARGE_INTEGER__bindgen_ty_1>() - 8usize];
    ["Alignment of _ULARGE_INTEGER__bindgen_ty_1"]
        [::std::mem::align_of::<_ULARGE_INTEGER__bindgen_ty_1>() - 4usize];
    ["Offset of field: _ULARGE_INTEGER__bindgen_ty_1::LowPart"]
        [::std::mem::offset_of!(_ULARGE_INTEGER__bindgen_ty_1, LowPart) - 0usize];
    ["Offset of field: _ULARGE_INTEGER__bindgen_ty_1::HighPart"]
        [::std::mem::offset_of!(_ULARGE_INTEGER__bindgen_ty_1, HighPart) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ULARGE_INTEGER__bindgen_ty_2 {
    pub LowPart: DWORD,
    pub HighPart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ULARGE_INTEGER__bindgen_ty_2"]
        [::std::mem::size_of::<_ULARGE_INTEGER__bindgen_ty_2>() - 8usize];
    ["Alignment of _ULARGE_INTEGER__bindgen_ty_2"]
        [::std::mem::align_of::<_ULARGE_INTEGER__bindgen_ty_2>() - 4usize];
    ["Offset of field: _ULARGE_INTEGER__bindgen_ty_2::LowPart"]
        [::std::mem::offset_of!(_ULARGE_INTEGER__bindgen_ty_2, LowPart) - 0usize];
    ["Offset of field: _ULARGE_INTEGER__bindgen_ty_2::HighPart"]
        [::std::mem::offset_of!(_ULARGE_INTEGER__bindgen_ty_2, HighPart) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ULARGE_INTEGER"][::std::mem::size_of::<_ULARGE_INTEGER>() - 8usize];
    ["Alignment of _ULARGE_INTEGER"][::std::mem::align_of::<_ULARGE_INTEGER>() - 8usize];
    ["Offset of field: _ULARGE_INTEGER::u"][::std::mem::offset_of!(_ULARGE_INTEGER, u) - 0usize];
    ["Offset of field: _ULARGE_INTEGER::QuadPart"]
        [::std::mem::offset_of!(_ULARGE_INTEGER, QuadPart) - 0usize];
};
pub type ULARGE_INTEGER = _ULARGE_INTEGER;
pub type PULARGE_INTEGER = *mut ULARGE_INTEGER;
pub type RTL_REFERENCE_COUNT = LONG_PTR;
pub type PRTL_REFERENCE_COUNT = *mut LONG_PTR;
pub type RTL_REFERENCE_COUNT32 = LONG;
pub type PRTL_REFERENCE_COUNT32 = *mut LONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LUID {
    pub LowPart: DWORD,
    pub HighPart: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LUID"][::std::mem::size_of::<_LUID>() - 8usize];
    ["Alignment of _LUID"][::std::mem::align_of::<_LUID>() - 4usize];
    ["Offset of field: _LUID::LowPart"][::std::mem::offset_of!(_LUID, LowPart) - 0usize];
    ["Offset of field: _LUID::HighPart"][::std::mem::offset_of!(_LUID, HighPart) - 4usize];
};
pub type LUID = _LUID;
pub type PLUID = *mut _LUID;
pub type DWORDLONG = ULONGLONG;
pub type PDWORDLONG = *mut DWORDLONG;
unsafe extern "C" {
    pub fn _rotl8(
        Value: ::std::os::raw::c_uchar,
        Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _rotl16(
        Value: ::std::os::raw::c_ushort,
        Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _rotr8(
        Value: ::std::os::raw::c_uchar,
        Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _rotr16(
        Value: ::std::os::raw::c_ushort,
        Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn _rotl(
        Value: ::std::os::raw::c_uint,
        Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _rotl64(
        Value: ::std::os::raw::c_ulonglong,
        Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _rotr(
        Value: ::std::os::raw::c_uint,
        Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _rotr64(
        Value: ::std::os::raw::c_ulonglong,
        Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type BOOLEAN = BYTE;
pub type PBOOLEAN = *mut BOOLEAN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LIST_ENTRY {
    pub Flink: *mut _LIST_ENTRY,
    pub Blink: *mut _LIST_ENTRY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LIST_ENTRY"][::std::mem::size_of::<_LIST_ENTRY>() - 16usize];
    ["Alignment of _LIST_ENTRY"][::std::mem::align_of::<_LIST_ENTRY>() - 8usize];
    ["Offset of field: _LIST_ENTRY::Flink"][::std::mem::offset_of!(_LIST_ENTRY, Flink) - 0usize];
    ["Offset of field: _LIST_ENTRY::Blink"][::std::mem::offset_of!(_LIST_ENTRY, Blink) - 8usize];
};
pub type LIST_ENTRY = _LIST_ENTRY;
pub type PLIST_ENTRY = *mut _LIST_ENTRY;
pub type PRLIST_ENTRY = *mut _LIST_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SINGLE_LIST_ENTRY {
    pub Next: *mut _SINGLE_LIST_ENTRY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SINGLE_LIST_ENTRY"][::std::mem::size_of::<_SINGLE_LIST_ENTRY>() - 8usize];
    ["Alignment of _SINGLE_LIST_ENTRY"][::std::mem::align_of::<_SINGLE_LIST_ENTRY>() - 8usize];
    ["Offset of field: _SINGLE_LIST_ENTRY::Next"]
        [::std::mem::offset_of!(_SINGLE_LIST_ENTRY, Next) - 0usize];
};
pub type SINGLE_LIST_ENTRY = _SINGLE_LIST_ENTRY;
pub type PSINGLE_LIST_ENTRY = *mut _SINGLE_LIST_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LIST_ENTRY32 {
    pub Flink: DWORD,
    pub Blink: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LIST_ENTRY32"][::std::mem::size_of::<LIST_ENTRY32>() - 8usize];
    ["Alignment of LIST_ENTRY32"][::std::mem::align_of::<LIST_ENTRY32>() - 4usize];
    ["Offset of field: LIST_ENTRY32::Flink"][::std::mem::offset_of!(LIST_ENTRY32, Flink) - 0usize];
    ["Offset of field: LIST_ENTRY32::Blink"][::std::mem::offset_of!(LIST_ENTRY32, Blink) - 4usize];
};
pub type PLIST_ENTRY32 = *mut LIST_ENTRY32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LIST_ENTRY64 {
    pub Flink: ULONGLONG,
    pub Blink: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LIST_ENTRY64"][::std::mem::size_of::<LIST_ENTRY64>() - 16usize];
    ["Alignment of LIST_ENTRY64"][::std::mem::align_of::<LIST_ENTRY64>() - 8usize];
    ["Offset of field: LIST_ENTRY64::Flink"][::std::mem::offset_of!(LIST_ENTRY64, Flink) - 0usize];
    ["Offset of field: LIST_ENTRY64::Blink"][::std::mem::offset_of!(LIST_ENTRY64, Blink) - 8usize];
};
pub type PLIST_ENTRY64 = *mut LIST_ENTRY64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUID {
    pub Data1: ::std::os::raw::c_ulong,
    pub Data2: ::std::os::raw::c_ushort,
    pub Data3: ::std::os::raw::c_ushort,
    pub Data4: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GUID"][::std::mem::size_of::<_GUID>() - 16usize];
    ["Alignment of _GUID"][::std::mem::align_of::<_GUID>() - 4usize];
    ["Offset of field: _GUID::Data1"][::std::mem::offset_of!(_GUID, Data1) - 0usize];
    ["Offset of field: _GUID::Data2"][::std::mem::offset_of!(_GUID, Data2) - 4usize];
    ["Offset of field: _GUID::Data3"][::std::mem::offset_of!(_GUID, Data3) - 6usize];
    ["Offset of field: _GUID::Data4"][::std::mem::offset_of!(_GUID, Data4) - 8usize];
};
pub type GUID = _GUID;
pub type LPGUID = *mut GUID;
pub type LPCGUID = *const GUID;
pub type IID = GUID;
pub type LPIID = *mut IID;
pub type CLSID = GUID;
pub type LPCLSID = *mut CLSID;
pub type FMTID = GUID;
pub type LPFMTID = *mut FMTID;
unsafe extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
unsafe extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
unsafe extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
unsafe extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
unsafe extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
unsafe extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OBJECTID {
    pub Lineage: GUID,
    pub Uniquifier: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OBJECTID"][::std::mem::size_of::<_OBJECTID>() - 20usize];
    ["Alignment of _OBJECTID"][::std::mem::align_of::<_OBJECTID>() - 4usize];
    ["Offset of field: _OBJECTID::Lineage"][::std::mem::offset_of!(_OBJECTID, Lineage) - 0usize];
    ["Offset of field: _OBJECTID::Uniquifier"]
        [::std::mem::offset_of!(_OBJECTID, Uniquifier) - 16usize];
};
pub type OBJECTID = _OBJECTID;
pub type PEXCEPTION_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut _EXCEPTION_RECORD,
        arg2: PVOID,
        arg3: *mut _CONTEXT,
        arg4: PVOID,
    ) -> EXCEPTION_DISPOSITION,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub x: ::std::os::raw::c_char,
    pub test: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _bindgen_ty_1"][::std::mem::size_of::<_bindgen_ty_1>() - 16usize];
    ["Alignment of _bindgen_ty_1"][::std::mem::align_of::<_bindgen_ty_1>() - 8usize];
    ["Offset of field: _bindgen_ty_1::x"][::std::mem::offset_of!(_bindgen_ty_1, x) - 0usize];
    ["Offset of field: _bindgen_ty_1::test"][::std::mem::offset_of!(_bindgen_ty_1, test) - 8usize];
};
pub type __C_ASSERT__ = [::std::os::raw::c_char; 1usize];
pub type KSPIN_LOCK = ULONG_PTR;
pub type PKSPIN_LOCK = *mut KSPIN_LOCK;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _M128A {
    pub Low: ULONGLONG,
    pub High: LONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _M128A"][::std::mem::size_of::<_M128A>() - 16usize];
    ["Alignment of _M128A"][::std::mem::align_of::<_M128A>() - 16usize];
    ["Offset of field: _M128A::Low"][::std::mem::offset_of!(_M128A, Low) - 0usize];
    ["Offset of field: _M128A::High"][::std::mem::offset_of!(_M128A, High) - 8usize];
};
pub type M128A = _M128A;
pub type PM128A = *mut _M128A;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_FORMAT {
    pub ControlWord: WORD,
    pub StatusWord: WORD,
    pub TagWord: BYTE,
    pub Reserved1: BYTE,
    pub ErrorOpcode: WORD,
    pub ErrorOffset: DWORD,
    pub ErrorSelector: WORD,
    pub Reserved2: WORD,
    pub DataOffset: DWORD,
    pub DataSelector: WORD,
    pub Reserved3: WORD,
    pub MxCsr: DWORD,
    pub MxCsr_Mask: DWORD,
    pub FloatRegisters: [M128A; 8usize],
    pub XmmRegisters: [M128A; 16usize],
    pub Reserved4: [BYTE; 96usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSAVE_FORMAT"][::std::mem::size_of::<_XSAVE_FORMAT>() - 512usize];
    ["Alignment of _XSAVE_FORMAT"][::std::mem::align_of::<_XSAVE_FORMAT>() - 16usize];
    ["Offset of field: _XSAVE_FORMAT::ControlWord"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, ControlWord) - 0usize];
    ["Offset of field: _XSAVE_FORMAT::StatusWord"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, StatusWord) - 2usize];
    ["Offset of field: _XSAVE_FORMAT::TagWord"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, TagWord) - 4usize];
    ["Offset of field: _XSAVE_FORMAT::Reserved1"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, Reserved1) - 5usize];
    ["Offset of field: _XSAVE_FORMAT::ErrorOpcode"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, ErrorOpcode) - 6usize];
    ["Offset of field: _XSAVE_FORMAT::ErrorOffset"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, ErrorOffset) - 8usize];
    ["Offset of field: _XSAVE_FORMAT::ErrorSelector"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, ErrorSelector) - 12usize];
    ["Offset of field: _XSAVE_FORMAT::Reserved2"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, Reserved2) - 14usize];
    ["Offset of field: _XSAVE_FORMAT::DataOffset"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, DataOffset) - 16usize];
    ["Offset of field: _XSAVE_FORMAT::DataSelector"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, DataSelector) - 20usize];
    ["Offset of field: _XSAVE_FORMAT::Reserved3"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, Reserved3) - 22usize];
    ["Offset of field: _XSAVE_FORMAT::MxCsr"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, MxCsr) - 24usize];
    ["Offset of field: _XSAVE_FORMAT::MxCsr_Mask"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, MxCsr_Mask) - 28usize];
    ["Offset of field: _XSAVE_FORMAT::FloatRegisters"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, FloatRegisters) - 32usize];
    ["Offset of field: _XSAVE_FORMAT::XmmRegisters"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, XmmRegisters) - 160usize];
    ["Offset of field: _XSAVE_FORMAT::Reserved4"]
        [::std::mem::offset_of!(_XSAVE_FORMAT, Reserved4) - 416usize];
};
pub type XSAVE_FORMAT = _XSAVE_FORMAT;
pub type PXSAVE_FORMAT = *mut _XSAVE_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_CET_U_FORMAT {
    pub Ia32CetUMsr: DWORD64,
    pub Ia32Pl3SspMsr: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSAVE_CET_U_FORMAT"][::std::mem::size_of::<_XSAVE_CET_U_FORMAT>() - 16usize];
    ["Alignment of _XSAVE_CET_U_FORMAT"][::std::mem::align_of::<_XSAVE_CET_U_FORMAT>() - 8usize];
    ["Offset of field: _XSAVE_CET_U_FORMAT::Ia32CetUMsr"]
        [::std::mem::offset_of!(_XSAVE_CET_U_FORMAT, Ia32CetUMsr) - 0usize];
    ["Offset of field: _XSAVE_CET_U_FORMAT::Ia32Pl3SspMsr"]
        [::std::mem::offset_of!(_XSAVE_CET_U_FORMAT, Ia32Pl3SspMsr) - 8usize];
};
pub type XSAVE_CET_U_FORMAT = _XSAVE_CET_U_FORMAT;
pub type PXSAVE_CET_U_FORMAT = *mut _XSAVE_CET_U_FORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_ARM64_SVE_HEADER {
    pub VectorLength: DWORD,
    pub VectorRegisterOffset: DWORD,
    pub PredicateRegisterOffset: DWORD,
    pub Reserved: [DWORD; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSAVE_ARM64_SVE_HEADER"][::std::mem::size_of::<_XSAVE_ARM64_SVE_HEADER>() - 32usize];
    ["Alignment of _XSAVE_ARM64_SVE_HEADER"]
        [::std::mem::align_of::<_XSAVE_ARM64_SVE_HEADER>() - 4usize];
    ["Offset of field: _XSAVE_ARM64_SVE_HEADER::VectorLength"]
        [::std::mem::offset_of!(_XSAVE_ARM64_SVE_HEADER, VectorLength) - 0usize];
    ["Offset of field: _XSAVE_ARM64_SVE_HEADER::VectorRegisterOffset"]
        [::std::mem::offset_of!(_XSAVE_ARM64_SVE_HEADER, VectorRegisterOffset) - 4usize];
    ["Offset of field: _XSAVE_ARM64_SVE_HEADER::PredicateRegisterOffset"]
        [::std::mem::offset_of!(_XSAVE_ARM64_SVE_HEADER, PredicateRegisterOffset) - 8usize];
    ["Offset of field: _XSAVE_ARM64_SVE_HEADER::Reserved"]
        [::std::mem::offset_of!(_XSAVE_ARM64_SVE_HEADER, Reserved) - 12usize];
};
pub type XSAVE_ARM64_SVE_HEADER = _XSAVE_ARM64_SVE_HEADER;
pub type PXSAVE_ARM64_SVE_HEADER = *mut _XSAVE_ARM64_SVE_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_AREA_HEADER {
    pub Mask: DWORD64,
    pub CompactionMask: DWORD64,
    pub Reserved2: [DWORD64; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSAVE_AREA_HEADER"][::std::mem::size_of::<_XSAVE_AREA_HEADER>() - 64usize];
    ["Alignment of _XSAVE_AREA_HEADER"][::std::mem::align_of::<_XSAVE_AREA_HEADER>() - 8usize];
    ["Offset of field: _XSAVE_AREA_HEADER::Mask"]
        [::std::mem::offset_of!(_XSAVE_AREA_HEADER, Mask) - 0usize];
    ["Offset of field: _XSAVE_AREA_HEADER::CompactionMask"]
        [::std::mem::offset_of!(_XSAVE_AREA_HEADER, CompactionMask) - 8usize];
    ["Offset of field: _XSAVE_AREA_HEADER::Reserved2"]
        [::std::mem::offset_of!(_XSAVE_AREA_HEADER, Reserved2) - 16usize];
};
pub type XSAVE_AREA_HEADER = _XSAVE_AREA_HEADER;
pub type PXSAVE_AREA_HEADER = *mut _XSAVE_AREA_HEADER;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _XSAVE_AREA {
    pub LegacyState: XSAVE_FORMAT,
    pub Header: XSAVE_AREA_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSAVE_AREA"][::std::mem::size_of::<_XSAVE_AREA>() - 576usize];
    ["Alignment of _XSAVE_AREA"][::std::mem::align_of::<_XSAVE_AREA>() - 16usize];
    ["Offset of field: _XSAVE_AREA::LegacyState"]
        [::std::mem::offset_of!(_XSAVE_AREA, LegacyState) - 0usize];
    ["Offset of field: _XSAVE_AREA::Header"]
        [::std::mem::offset_of!(_XSAVE_AREA, Header) - 512usize];
};
pub type XSAVE_AREA = _XSAVE_AREA;
pub type PXSAVE_AREA = *mut _XSAVE_AREA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSTATE_CONTEXT {
    pub Mask: DWORD64,
    pub Length: DWORD,
    pub Flags: BYTE,
    pub Reserved0: [BYTE; 3usize],
    pub Area: PXSAVE_AREA,
    pub Buffer: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSTATE_CONTEXT"][::std::mem::size_of::<_XSTATE_CONTEXT>() - 32usize];
    ["Alignment of _XSTATE_CONTEXT"][::std::mem::align_of::<_XSTATE_CONTEXT>() - 8usize];
    ["Offset of field: _XSTATE_CONTEXT::Mask"]
        [::std::mem::offset_of!(_XSTATE_CONTEXT, Mask) - 0usize];
    ["Offset of field: _XSTATE_CONTEXT::Length"]
        [::std::mem::offset_of!(_XSTATE_CONTEXT, Length) - 8usize];
    ["Offset of field: _XSTATE_CONTEXT::Flags"]
        [::std::mem::offset_of!(_XSTATE_CONTEXT, Flags) - 12usize];
    ["Offset of field: _XSTATE_CONTEXT::Reserved0"]
        [::std::mem::offset_of!(_XSTATE_CONTEXT, Reserved0) - 13usize];
    ["Offset of field: _XSTATE_CONTEXT::Area"]
        [::std::mem::offset_of!(_XSTATE_CONTEXT, Area) - 16usize];
    ["Offset of field: _XSTATE_CONTEXT::Buffer"]
        [::std::mem::offset_of!(_XSTATE_CONTEXT, Buffer) - 24usize];
};
pub type XSTATE_CONTEXT = _XSTATE_CONTEXT;
pub type PXSTATE_CONTEXT = *mut _XSTATE_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KERNEL_CET_CONTEXT {
    pub Ssp: DWORD64,
    pub Rip: DWORD64,
    pub SegCs: WORD,
    pub __bindgen_anon_1: _KERNEL_CET_CONTEXT__bindgen_ty_1,
    pub Fill: [WORD; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KERNEL_CET_CONTEXT__bindgen_ty_1 {
    pub AllFlags: WORD,
    pub __bindgen_anon_1: _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 2usize];
};
impl _KERNEL_CET_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn UseWrss(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_UseWrss(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn UseWrss_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_UseWrss_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn PopShadowStackOne(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_PopShadowStackOne(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PopShadowStackOne_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_PopShadowStackOne_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Unused(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_Unused(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Unused_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                14u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_Unused_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                14u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        UseWrss: WORD,
        PopShadowStackOne: WORD,
        Unused: WORD,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let UseWrss: u16 = unsafe { ::std::mem::transmute(UseWrss) };
            UseWrss as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let PopShadowStackOne: u16 = unsafe { ::std::mem::transmute(PopShadowStackOne) };
            PopShadowStackOne as u64
        });
        __bindgen_bitfield_unit.set(2usize, 14u8, {
            let Unused: u16 = unsafe { ::std::mem::transmute(Unused) };
            Unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KERNEL_CET_CONTEXT__bindgen_ty_1"]
        [::std::mem::size_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1>() - 2usize];
    ["Alignment of _KERNEL_CET_CONTEXT__bindgen_ty_1"]
        [::std::mem::align_of::<_KERNEL_CET_CONTEXT__bindgen_ty_1>() - 2usize];
    ["Offset of field: _KERNEL_CET_CONTEXT__bindgen_ty_1::AllFlags"]
        [::std::mem::offset_of!(_KERNEL_CET_CONTEXT__bindgen_ty_1, AllFlags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KERNEL_CET_CONTEXT"][::std::mem::size_of::<_KERNEL_CET_CONTEXT>() - 24usize];
    ["Alignment of _KERNEL_CET_CONTEXT"][::std::mem::align_of::<_KERNEL_CET_CONTEXT>() - 8usize];
    ["Offset of field: _KERNEL_CET_CONTEXT::Ssp"]
        [::std::mem::offset_of!(_KERNEL_CET_CONTEXT, Ssp) - 0usize];
    ["Offset of field: _KERNEL_CET_CONTEXT::Rip"]
        [::std::mem::offset_of!(_KERNEL_CET_CONTEXT, Rip) - 8usize];
    ["Offset of field: _KERNEL_CET_CONTEXT::SegCs"]
        [::std::mem::offset_of!(_KERNEL_CET_CONTEXT, SegCs) - 16usize];
    ["Offset of field: _KERNEL_CET_CONTEXT::Fill"]
        [::std::mem::offset_of!(_KERNEL_CET_CONTEXT, Fill) - 20usize];
};
pub type KERNEL_CET_CONTEXT = _KERNEL_CET_CONTEXT;
pub type PKERNEL_CET_CONTEXT = *mut _KERNEL_CET_CONTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_AMD64 {
    pub Count: DWORD,
    pub ScopeRecord: [_SCOPE_TABLE_AMD64__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_AMD64__bindgen_ty_1 {
    pub BeginAddress: DWORD,
    pub EndAddress: DWORD,
    pub HandlerAddress: DWORD,
    pub JumpTarget: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCOPE_TABLE_AMD64__bindgen_ty_1"]
        [::std::mem::size_of::<_SCOPE_TABLE_AMD64__bindgen_ty_1>() - 16usize];
    ["Alignment of _SCOPE_TABLE_AMD64__bindgen_ty_1"]
        [::std::mem::align_of::<_SCOPE_TABLE_AMD64__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SCOPE_TABLE_AMD64__bindgen_ty_1::BeginAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_AMD64__bindgen_ty_1, BeginAddress) - 0usize];
    ["Offset of field: _SCOPE_TABLE_AMD64__bindgen_ty_1::EndAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_AMD64__bindgen_ty_1, EndAddress) - 4usize];
    ["Offset of field: _SCOPE_TABLE_AMD64__bindgen_ty_1::HandlerAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_AMD64__bindgen_ty_1, HandlerAddress) - 8usize];
    ["Offset of field: _SCOPE_TABLE_AMD64__bindgen_ty_1::JumpTarget"]
        [::std::mem::offset_of!(_SCOPE_TABLE_AMD64__bindgen_ty_1, JumpTarget) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCOPE_TABLE_AMD64"][::std::mem::size_of::<_SCOPE_TABLE_AMD64>() - 20usize];
    ["Alignment of _SCOPE_TABLE_AMD64"][::std::mem::align_of::<_SCOPE_TABLE_AMD64>() - 4usize];
    ["Offset of field: _SCOPE_TABLE_AMD64::Count"]
        [::std::mem::offset_of!(_SCOPE_TABLE_AMD64, Count) - 0usize];
    ["Offset of field: _SCOPE_TABLE_AMD64::ScopeRecord"]
        [::std::mem::offset_of!(_SCOPE_TABLE_AMD64, ScopeRecord) - 4usize];
};
pub type SCOPE_TABLE_AMD64 = _SCOPE_TABLE_AMD64;
pub type PSCOPE_TABLE_AMD64 = *mut _SCOPE_TABLE_AMD64;
unsafe extern "C" {
    pub fn _bittest(
        Base: *const ::std::os::raw::c_long,
        Offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittestandcomplement(
        Base: *mut ::std::os::raw::c_long,
        Offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittestandset(
        Base: *mut ::std::os::raw::c_long,
        Offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittestandreset(
        Base: *mut ::std::os::raw::c_long,
        Offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _interlockedbittestandset(
        Base: *mut ::std::os::raw::c_long,
        Offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _interlockedbittestandreset(
        Base: *mut ::std::os::raw::c_long,
        Offset: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittest64(
        Base: *const ::std::os::raw::c_longlong,
        Offset: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittestandcomplement64(
        Base: *mut ::std::os::raw::c_longlong,
        Offset: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittestandset64(
        Base: *mut ::std::os::raw::c_longlong,
        Offset: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _bittestandreset64(
        Base: *mut ::std::os::raw::c_longlong,
        Offset: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _interlockedbittestandset64(
        Base: *mut ::std::os::raw::c_longlong,
        Offset: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _interlockedbittestandreset64(
        Base: *mut ::std::os::raw::c_longlong,
        Offset: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _BitScanForward(
        Index: *mut ::std::os::raw::c_ulong,
        Mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _BitScanReverse(
        Index: *mut ::std::os::raw::c_ulong,
        Mask: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _BitScanForward64(
        Index: *mut ::std::os::raw::c_ulong,
        Mask: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _BitScanReverse64(
        Index: *mut ::std::os::raw::c_ulong,
        Mask: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _InterlockedIncrement16(Addend: *mut ::std::os::raw::c_short)
    -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _InterlockedDecrement16(Addend: *mut ::std::os::raw::c_short)
    -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _InterlockedCompareExchange16(
        Destination: *mut ::std::os::raw::c_short,
        ExChange: ::std::os::raw::c_short,
        Comperand: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _InterlockedAnd(
        Destination: *mut ::std::os::raw::c_long,
        Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedOr(
        Destination: *mut ::std::os::raw::c_long,
        Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedXor(
        Destination: *mut ::std::os::raw::c_long,
        Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedAnd64(
        Destination: *mut ::std::os::raw::c_longlong,
        Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedOr64(
        Destination: *mut ::std::os::raw::c_longlong,
        Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedXor64(
        Destination: *mut ::std::os::raw::c_longlong,
        Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedIncrement(Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedDecrement(Addend: *mut ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedExchange(
        Target: *mut ::std::os::raw::c_long,
        Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedExchangeAdd(
        Addend: *mut ::std::os::raw::c_long,
        Value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedCompareExchange(
        Destination: *mut ::std::os::raw::c_long,
        ExChange: ::std::os::raw::c_long,
        Comperand: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _InterlockedIncrement64(
        Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedDecrement64(
        Addend: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedExchange64(
        Target: *mut ::std::os::raw::c_longlong,
        Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedExchangeAdd64(
        Addend: *mut ::std::os::raw::c_longlong,
        Value: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedCompareExchange64(
        Destination: *mut ::std::os::raw::c_longlong,
        ExChange: ::std::os::raw::c_longlong,
        Comperand: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _InterlockedCompareExchange128(
        Destination: *mut ::std::os::raw::c_longlong,
        ExchangeHigh: ::std::os::raw::c_longlong,
        ExchangeLow: ::std::os::raw::c_longlong,
        ComparandResult: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn _InterlockedCompareExchangePointer(
        Destination: *mut *mut ::std::os::raw::c_void,
        Exchange: *mut ::std::os::raw::c_void,
        Comperand: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _InterlockedExchangePointer(
        Target: *mut *mut ::std::os::raw::c_void,
        Value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn _InterlockedExchange8(
        Target: *mut ::std::os::raw::c_char,
        Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _InterlockedExchange16(
        Destination: *mut ::std::os::raw::c_short,
        ExChange: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _InterlockedExchangeAdd8(
        _Addend: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _InterlockedAnd8(
        Destination: *mut ::std::os::raw::c_char,
        Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _InterlockedOr8(
        Destination: *mut ::std::os::raw::c_char,
        Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _InterlockedXor8(
        Destination: *mut ::std::os::raw::c_char,
        Value: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _InterlockedAnd16(
        Destination: *mut ::std::os::raw::c_short,
        Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _InterlockedOr16(
        Destination: *mut ::std::os::raw::c_short,
        Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn _InterlockedXor16(
        Destination: *mut ::std::os::raw::c_short,
        Value: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_short;
}
unsafe extern "C" {
    pub fn __cpuidex(
        CPUInfo: *mut ::std::os::raw::c_int,
        Function: ::std::os::raw::c_int,
        SubLeaf: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn _mm_clflush(Address: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _ReadWriteBarrier();
}
unsafe extern "C" {
    pub fn __faststorefence();
}
unsafe extern "C" {
    pub fn _mm_lfence();
}
unsafe extern "C" {
    pub fn _mm_mfence();
}
unsafe extern "C" {
    pub fn _mm_sfence();
}
unsafe extern "C" {
    pub fn _mm_pause();
}
unsafe extern "C" {
    pub fn _mm_prefetch(a: *const ::std::os::raw::c_char, sel: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn _m_prefetchw(Source: *const ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn _mm_getcsr() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _mm_setcsr(MxCsr: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn __getcallerseflags() -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn __segmentlimit(Selector: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn __readpmc(Counter: DWORD) -> DWORD64;
}
unsafe extern "C" {
    pub fn __rdtsc() -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn __movsb(Destination: PBYTE, Source: *const BYTE, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __movsw(Destination: PWORD, Source: *const WORD, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __movsd(Destination: PDWORD, Source: *const DWORD, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __movsq(Destination: PDWORD64, Source: *const DWORD64, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __stosb(
        Destination: *mut ::std::os::raw::c_uchar,
        Value: ::std::os::raw::c_uchar,
        Count: ::std::os::raw::c_ulonglong,
    );
}
unsafe extern "C" {
    pub fn __stosw(Destination: PWORD, Value: WORD, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __stosd(Destination: PDWORD, Value: DWORD, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __stosq(Destination: PDWORD64, Value: DWORD64, Count: SIZE_T);
}
unsafe extern "C" {
    pub fn __mulh(
        Multiplier: ::std::os::raw::c_longlong,
        Multiplicand: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn __umulh(
        Multiplier: ::std::os::raw::c_ulonglong,
        Multiplicand: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn __popcnt64(operand: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn __shiftleft128(
        LowPart: ::std::os::raw::c_ulonglong,
        HighPart: ::std::os::raw::c_ulonglong,
        Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn __shiftright128(
        LowPart: ::std::os::raw::c_ulonglong,
        HighPart: ::std::os::raw::c_ulonglong,
        Shift: ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn _mul128(
        Multiplier: ::std::os::raw::c_longlong,
        Multiplicand: ::std::os::raw::c_longlong,
        HighProduct: *mut ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn UnsignedMultiply128(
        Multiplier: DWORD64,
        Multiplicand: DWORD64,
        HighProduct: *mut DWORD64,
    ) -> DWORD64;
}
unsafe extern "C" {
    pub fn _umul128(
        Multiplier: ::std::os::raw::c_ulonglong,
        Multiplicand: ::std::os::raw::c_ulonglong,
        HighProduct: *mut ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn __readgsbyte(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_uchar;
}
unsafe extern "C" {
    pub fn __readgsword(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn __readgsdword(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn __readgsqword(Offset: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn __writegsbyte(Offset: DWORD, Data: BYTE);
}
unsafe extern "C" {
    pub fn __writegsword(Offset: DWORD, Data: WORD);
}
unsafe extern "C" {
    pub fn __writegsdword(Offset: DWORD, Data: DWORD);
}
unsafe extern "C" {
    pub fn __writegsqword(Offset: DWORD, Data: DWORD64);
}
unsafe extern "C" {
    pub fn __incgsbyte(Offset: DWORD);
}
unsafe extern "C" {
    pub fn __addgsbyte(Offset: DWORD, Value: BYTE);
}
unsafe extern "C" {
    pub fn __incgsword(Offset: DWORD);
}
unsafe extern "C" {
    pub fn __addgsword(Offset: DWORD, Value: WORD);
}
unsafe extern "C" {
    pub fn __incgsdword(Offset: DWORD);
}
unsafe extern "C" {
    pub fn __addgsdword(Offset: DWORD, Value: DWORD);
}
unsafe extern "C" {
    pub fn __incgsqword(Offset: DWORD);
}
unsafe extern "C" {
    pub fn __addgsqword(Offset: DWORD, Value: DWORD64);
}
pub type XMM_SAVE_AREA32 = XSAVE_FORMAT;
pub type PXMM_SAVE_AREA32 = *mut XSAVE_FORMAT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _CONTEXT {
    pub P1Home: DWORD64,
    pub P2Home: DWORD64,
    pub P3Home: DWORD64,
    pub P4Home: DWORD64,
    pub P5Home: DWORD64,
    pub P6Home: DWORD64,
    pub ContextFlags: DWORD,
    pub MxCsr: DWORD,
    pub SegCs: WORD,
    pub SegDs: WORD,
    pub SegEs: WORD,
    pub SegFs: WORD,
    pub SegGs: WORD,
    pub SegSs: WORD,
    pub EFlags: DWORD,
    pub Dr0: DWORD64,
    pub Dr1: DWORD64,
    pub Dr2: DWORD64,
    pub Dr3: DWORD64,
    pub Dr6: DWORD64,
    pub Dr7: DWORD64,
    pub Rax: DWORD64,
    pub Rcx: DWORD64,
    pub Rdx: DWORD64,
    pub Rbx: DWORD64,
    pub Rsp: DWORD64,
    pub Rbp: DWORD64,
    pub Rsi: DWORD64,
    pub Rdi: DWORD64,
    pub R8: DWORD64,
    pub R9: DWORD64,
    pub R10: DWORD64,
    pub R11: DWORD64,
    pub R12: DWORD64,
    pub R13: DWORD64,
    pub R14: DWORD64,
    pub R15: DWORD64,
    pub Rip: DWORD64,
    pub __bindgen_anon_1: _CONTEXT__bindgen_ty_1,
    pub VectorRegister: [M128A; 26usize],
    pub VectorControl: DWORD64,
    pub DebugControl: DWORD64,
    pub LastBranchToRip: DWORD64,
    pub LastBranchFromRip: DWORD64,
    pub LastExceptionToRip: DWORD64,
    pub LastExceptionFromRip: DWORD64,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _CONTEXT__bindgen_ty_1 {
    pub FltSave: XMM_SAVE_AREA32,
    pub __bindgen_anon_1: _CONTEXT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    pub Header: [M128A; 2usize],
    pub Legacy: [M128A; 8usize],
    pub Xmm0: M128A,
    pub Xmm1: M128A,
    pub Xmm2: M128A,
    pub Xmm3: M128A,
    pub Xmm4: M128A,
    pub Xmm5: M128A,
    pub Xmm6: M128A,
    pub Xmm7: M128A,
    pub Xmm8: M128A,
    pub Xmm9: M128A,
    pub Xmm10: M128A,
    pub Xmm11: M128A,
    pub Xmm12: M128A,
    pub Xmm13: M128A,
    pub Xmm14: M128A,
    pub Xmm15: M128A,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 416usize];
    ["Alignment of _CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Header"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Header) - 0usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Legacy"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Legacy) - 32usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm0"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm0) - 160usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm1"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm1) - 176usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm2"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm2) - 192usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm3"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm3) - 208usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm4"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm4) - 224usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm5"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm5) - 240usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm6"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm6) - 256usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm7"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm7) - 272usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm8"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm8) - 288usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm9"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm9) - 304usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm10"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm10) - 320usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm11"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm11) - 336usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm12"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm12) - 352usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm13"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm13) - 368usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm14"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm14) - 384usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1__bindgen_ty_1::Xmm15"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1__bindgen_ty_1, Xmm15) - 400usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONTEXT__bindgen_ty_1"][::std::mem::size_of::<_CONTEXT__bindgen_ty_1>() - 512usize];
    ["Alignment of _CONTEXT__bindgen_ty_1"]
        [::std::mem::align_of::<_CONTEXT__bindgen_ty_1>() - 16usize];
    ["Offset of field: _CONTEXT__bindgen_ty_1::FltSave"]
        [::std::mem::offset_of!(_CONTEXT__bindgen_ty_1, FltSave) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONTEXT"][::std::mem::size_of::<_CONTEXT>() - 1232usize];
    ["Alignment of _CONTEXT"][::std::mem::align_of::<_CONTEXT>() - 16usize];
    ["Offset of field: _CONTEXT::P1Home"][::std::mem::offset_of!(_CONTEXT, P1Home) - 0usize];
    ["Offset of field: _CONTEXT::P2Home"][::std::mem::offset_of!(_CONTEXT, P2Home) - 8usize];
    ["Offset of field: _CONTEXT::P3Home"][::std::mem::offset_of!(_CONTEXT, P3Home) - 16usize];
    ["Offset of field: _CONTEXT::P4Home"][::std::mem::offset_of!(_CONTEXT, P4Home) - 24usize];
    ["Offset of field: _CONTEXT::P5Home"][::std::mem::offset_of!(_CONTEXT, P5Home) - 32usize];
    ["Offset of field: _CONTEXT::P6Home"][::std::mem::offset_of!(_CONTEXT, P6Home) - 40usize];
    ["Offset of field: _CONTEXT::ContextFlags"]
        [::std::mem::offset_of!(_CONTEXT, ContextFlags) - 48usize];
    ["Offset of field: _CONTEXT::MxCsr"][::std::mem::offset_of!(_CONTEXT, MxCsr) - 52usize];
    ["Offset of field: _CONTEXT::SegCs"][::std::mem::offset_of!(_CONTEXT, SegCs) - 56usize];
    ["Offset of field: _CONTEXT::SegDs"][::std::mem::offset_of!(_CONTEXT, SegDs) - 58usize];
    ["Offset of field: _CONTEXT::SegEs"][::std::mem::offset_of!(_CONTEXT, SegEs) - 60usize];
    ["Offset of field: _CONTEXT::SegFs"][::std::mem::offset_of!(_CONTEXT, SegFs) - 62usize];
    ["Offset of field: _CONTEXT::SegGs"][::std::mem::offset_of!(_CONTEXT, SegGs) - 64usize];
    ["Offset of field: _CONTEXT::SegSs"][::std::mem::offset_of!(_CONTEXT, SegSs) - 66usize];
    ["Offset of field: _CONTEXT::EFlags"][::std::mem::offset_of!(_CONTEXT, EFlags) - 68usize];
    ["Offset of field: _CONTEXT::Dr0"][::std::mem::offset_of!(_CONTEXT, Dr0) - 72usize];
    ["Offset of field: _CONTEXT::Dr1"][::std::mem::offset_of!(_CONTEXT, Dr1) - 80usize];
    ["Offset of field: _CONTEXT::Dr2"][::std::mem::offset_of!(_CONTEXT, Dr2) - 88usize];
    ["Offset of field: _CONTEXT::Dr3"][::std::mem::offset_of!(_CONTEXT, Dr3) - 96usize];
    ["Offset of field: _CONTEXT::Dr6"][::std::mem::offset_of!(_CONTEXT, Dr6) - 104usize];
    ["Offset of field: _CONTEXT::Dr7"][::std::mem::offset_of!(_CONTEXT, Dr7) - 112usize];
    ["Offset of field: _CONTEXT::Rax"][::std::mem::offset_of!(_CONTEXT, Rax) - 120usize];
    ["Offset of field: _CONTEXT::Rcx"][::std::mem::offset_of!(_CONTEXT, Rcx) - 128usize];
    ["Offset of field: _CONTEXT::Rdx"][::std::mem::offset_of!(_CONTEXT, Rdx) - 136usize];
    ["Offset of field: _CONTEXT::Rbx"][::std::mem::offset_of!(_CONTEXT, Rbx) - 144usize];
    ["Offset of field: _CONTEXT::Rsp"][::std::mem::offset_of!(_CONTEXT, Rsp) - 152usize];
    ["Offset of field: _CONTEXT::Rbp"][::std::mem::offset_of!(_CONTEXT, Rbp) - 160usize];
    ["Offset of field: _CONTEXT::Rsi"][::std::mem::offset_of!(_CONTEXT, Rsi) - 168usize];
    ["Offset of field: _CONTEXT::Rdi"][::std::mem::offset_of!(_CONTEXT, Rdi) - 176usize];
    ["Offset of field: _CONTEXT::R8"][::std::mem::offset_of!(_CONTEXT, R8) - 184usize];
    ["Offset of field: _CONTEXT::R9"][::std::mem::offset_of!(_CONTEXT, R9) - 192usize];
    ["Offset of field: _CONTEXT::R10"][::std::mem::offset_of!(_CONTEXT, R10) - 200usize];
    ["Offset of field: _CONTEXT::R11"][::std::mem::offset_of!(_CONTEXT, R11) - 208usize];
    ["Offset of field: _CONTEXT::R12"][::std::mem::offset_of!(_CONTEXT, R12) - 216usize];
    ["Offset of field: _CONTEXT::R13"][::std::mem::offset_of!(_CONTEXT, R13) - 224usize];
    ["Offset of field: _CONTEXT::R14"][::std::mem::offset_of!(_CONTEXT, R14) - 232usize];
    ["Offset of field: _CONTEXT::R15"][::std::mem::offset_of!(_CONTEXT, R15) - 240usize];
    ["Offset of field: _CONTEXT::Rip"][::std::mem::offset_of!(_CONTEXT, Rip) - 248usize];
    ["Offset of field: _CONTEXT::VectorRegister"]
        [::std::mem::offset_of!(_CONTEXT, VectorRegister) - 768usize];
    ["Offset of field: _CONTEXT::VectorControl"]
        [::std::mem::offset_of!(_CONTEXT, VectorControl) - 1184usize];
    ["Offset of field: _CONTEXT::DebugControl"]
        [::std::mem::offset_of!(_CONTEXT, DebugControl) - 1192usize];
    ["Offset of field: _CONTEXT::LastBranchToRip"]
        [::std::mem::offset_of!(_CONTEXT, LastBranchToRip) - 1200usize];
    ["Offset of field: _CONTEXT::LastBranchFromRip"]
        [::std::mem::offset_of!(_CONTEXT, LastBranchFromRip) - 1208usize];
    ["Offset of field: _CONTEXT::LastExceptionToRip"]
        [::std::mem::offset_of!(_CONTEXT, LastExceptionToRip) - 1216usize];
    ["Offset of field: _CONTEXT::LastExceptionFromRip"]
        [::std::mem::offset_of!(_CONTEXT, LastExceptionFromRip) - 1224usize];
};
pub type CONTEXT = _CONTEXT;
pub type PCONTEXT = *mut _CONTEXT;
pub type RUNTIME_FUNCTION = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PRUNTIME_FUNCTION = *mut _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type SCOPE_TABLE = SCOPE_TABLE_AMD64;
pub type PSCOPE_TABLE = *mut SCOPE_TABLE_AMD64;
pub type GET_RUNTIME_FUNCTION_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(ControlPc: DWORD64, Context: PVOID) -> PRUNTIME_FUNCTION,
>;
pub type PGET_RUNTIME_FUNCTION_CALLBACK = GET_RUNTIME_FUNCTION_CALLBACK;
pub type OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        Process: HANDLE,
        TableAddress: PVOID,
        Entries: PDWORD,
        Functions: *mut PRUNTIME_FUNCTION,
    ) -> DWORD,
>;
pub type POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_CONTEXT {
    pub ControlPc: DWORD64,
    pub ImageBase: DWORD64,
    pub FunctionEntry: PRUNTIME_FUNCTION,
    pub EstablisherFrame: DWORD64,
    pub TargetIp: DWORD64,
    pub ContextRecord: PCONTEXT,
    pub LanguageHandler: PEXCEPTION_ROUTINE,
    pub HandlerData: PVOID,
    pub HistoryTable: *mut _UNWIND_HISTORY_TABLE,
    pub ScopeIndex: DWORD,
    pub Fill0: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPATCHER_CONTEXT"][::std::mem::size_of::<_DISPATCHER_CONTEXT>() - 80usize];
    ["Alignment of _DISPATCHER_CONTEXT"][::std::mem::align_of::<_DISPATCHER_CONTEXT>() - 8usize];
    ["Offset of field: _DISPATCHER_CONTEXT::ControlPc"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, ControlPc) - 0usize];
    ["Offset of field: _DISPATCHER_CONTEXT::ImageBase"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, ImageBase) - 8usize];
    ["Offset of field: _DISPATCHER_CONTEXT::FunctionEntry"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, FunctionEntry) - 16usize];
    ["Offset of field: _DISPATCHER_CONTEXT::EstablisherFrame"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, EstablisherFrame) - 24usize];
    ["Offset of field: _DISPATCHER_CONTEXT::TargetIp"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, TargetIp) - 32usize];
    ["Offset of field: _DISPATCHER_CONTEXT::ContextRecord"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, ContextRecord) - 40usize];
    ["Offset of field: _DISPATCHER_CONTEXT::LanguageHandler"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, LanguageHandler) - 48usize];
    ["Offset of field: _DISPATCHER_CONTEXT::HandlerData"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, HandlerData) - 56usize];
    ["Offset of field: _DISPATCHER_CONTEXT::HistoryTable"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, HistoryTable) - 64usize];
    ["Offset of field: _DISPATCHER_CONTEXT::ScopeIndex"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, ScopeIndex) - 72usize];
    ["Offset of field: _DISPATCHER_CONTEXT::Fill0"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT, Fill0) - 76usize];
};
pub type DISPATCHER_CONTEXT = _DISPATCHER_CONTEXT;
pub type PDISPATCHER_CONTEXT = *mut _DISPATCHER_CONTEXT;
pub type PEXCEPTION_FILTER = ::std::option::Option<
    unsafe extern "C" fn(
        ExceptionPointers: *mut _EXCEPTION_POINTERS,
        EstablisherFrame: PVOID,
    ) -> LONG,
>;
pub type PTERMINATION_HANDLER = ::std::option::Option<
    unsafe extern "C" fn(_abnormal_termination: BOOLEAN, EstablisherFrame: PVOID),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS {
    pub __bindgen_anon_1: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1,
    pub __bindgen_anon_2: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1 {
    pub FloatingContext: [PM128A; 16usize],
    pub __bindgen_anon_1: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1 {
    pub Xmm0: PM128A,
    pub Xmm1: PM128A,
    pub Xmm2: PM128A,
    pub Xmm3: PM128A,
    pub Xmm4: PM128A,
    pub Xmm5: PM128A,
    pub Xmm6: PM128A,
    pub Xmm7: PM128A,
    pub Xmm8: PM128A,
    pub Xmm9: PM128A,
    pub Xmm10: PM128A,
    pub Xmm11: PM128A,
    pub Xmm12: PM128A,
    pub Xmm13: PM128A,
    pub Xmm14: PM128A,
    pub Xmm15: PM128A,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
    >() - 128usize];
    ["Alignment of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm0"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm0
    )
        - 0usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm1"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm1
    )
        - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm2"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm2
    )
        - 16usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm3"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm3
    )
        - 24usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm4"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm4
    )
        - 32usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm5"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm5
    )
        - 40usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm6"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm6
    )
        - 48usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm7"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm7
    )
        - 56usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm8"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm8
    )
        - 64usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm9"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm9
    )
        - 72usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm10"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm10
    )
        - 80usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm11"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm11
    )
        - 88usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm12"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm12
    )
        - 96usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm13"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm13
    )
        - 104usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm14"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm14
    )
        - 112usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1::Xmm15"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1,
        Xmm15
    )
        - 120usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1"]
        [::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1>() - 128usize];
    ["Alignment of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1"]
        [::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1>() - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1::FloatingContext"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1,
        FloatingContext
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2 {
    pub IntegerContext: [PDWORD64; 16usize],
    pub __bindgen_anon_1: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1 {
    pub Rax: PDWORD64,
    pub Rcx: PDWORD64,
    pub Rdx: PDWORD64,
    pub Rbx: PDWORD64,
    pub Rsp: PDWORD64,
    pub Rbp: PDWORD64,
    pub Rsi: PDWORD64,
    pub Rdi: PDWORD64,
    pub R8: PDWORD64,
    pub R9: PDWORD64,
    pub R10: PDWORD64,
    pub R11: PDWORD64,
    pub R12: PDWORD64,
    pub R13: PDWORD64,
    pub R14: PDWORD64,
    pub R15: PDWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
    >() - 128usize];
    ["Alignment of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1"][::std::mem::align_of::<
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rax"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rax
    )
        - 0usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rcx"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rcx
    )
        - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rdx"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rdx
    )
        - 16usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rbx"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rbx
    )
        - 24usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rsp"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rsp
    )
        - 32usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rbp"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rbp
    )
        - 40usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rsi"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rsi
    )
        - 48usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::Rdi"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        Rdi
    )
        - 56usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R8"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R8
    )
        - 64usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R9"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R9
    )
        - 72usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R10"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R10
    )
        - 80usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R11"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R11
    )
        - 88usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R12"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R12
    )
        - 96usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R13"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R13
    )
        - 104usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R14"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R14
    )
        - 112usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1::R15"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1,
        R15
    )
        - 120usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2"]
        [::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2>() - 128usize];
    ["Alignment of _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2"]
        [::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2>() - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2::IntegerContext"][::std::mem::offset_of!(
        _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2,
        IntegerContext
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KNONVOLATILE_CONTEXT_POINTERS"]
        [::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS>() - 256usize];
    ["Alignment of _KNONVOLATILE_CONTEXT_POINTERS"]
        [::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS>() - 8usize];
};
pub type KNONVOLATILE_CONTEXT_POINTERS = _KNONVOLATILE_CONTEXT_POINTERS;
pub type PKNONVOLATILE_CONTEXT_POINTERS = *mut _KNONVOLATILE_CONTEXT_POINTERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM {
    pub Count: DWORD,
    pub ScopeRecord: [_SCOPE_TABLE_ARM__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM__bindgen_ty_1 {
    pub BeginAddress: DWORD,
    pub EndAddress: DWORD,
    pub HandlerAddress: DWORD,
    pub JumpTarget: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCOPE_TABLE_ARM__bindgen_ty_1"]
        [::std::mem::size_of::<_SCOPE_TABLE_ARM__bindgen_ty_1>() - 16usize];
    ["Alignment of _SCOPE_TABLE_ARM__bindgen_ty_1"]
        [::std::mem::align_of::<_SCOPE_TABLE_ARM__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SCOPE_TABLE_ARM__bindgen_ty_1::BeginAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM__bindgen_ty_1, BeginAddress) - 0usize];
    ["Offset of field: _SCOPE_TABLE_ARM__bindgen_ty_1::EndAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM__bindgen_ty_1, EndAddress) - 4usize];
    ["Offset of field: _SCOPE_TABLE_ARM__bindgen_ty_1::HandlerAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM__bindgen_ty_1, HandlerAddress) - 8usize];
    ["Offset of field: _SCOPE_TABLE_ARM__bindgen_ty_1::JumpTarget"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM__bindgen_ty_1, JumpTarget) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCOPE_TABLE_ARM"][::std::mem::size_of::<_SCOPE_TABLE_ARM>() - 20usize];
    ["Alignment of _SCOPE_TABLE_ARM"][::std::mem::align_of::<_SCOPE_TABLE_ARM>() - 4usize];
    ["Offset of field: _SCOPE_TABLE_ARM::Count"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM, Count) - 0usize];
    ["Offset of field: _SCOPE_TABLE_ARM::ScopeRecord"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM, ScopeRecord) - 4usize];
};
pub type SCOPE_TABLE_ARM = _SCOPE_TABLE_ARM;
pub type PSCOPE_TABLE_ARM = *mut _SCOPE_TABLE_ARM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM64 {
    pub Count: DWORD,
    pub ScopeRecord: [_SCOPE_TABLE_ARM64__bindgen_ty_1; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCOPE_TABLE_ARM64__bindgen_ty_1 {
    pub BeginAddress: DWORD,
    pub EndAddress: DWORD,
    pub HandlerAddress: DWORD,
    pub JumpTarget: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCOPE_TABLE_ARM64__bindgen_ty_1"]
        [::std::mem::size_of::<_SCOPE_TABLE_ARM64__bindgen_ty_1>() - 16usize];
    ["Alignment of _SCOPE_TABLE_ARM64__bindgen_ty_1"]
        [::std::mem::align_of::<_SCOPE_TABLE_ARM64__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SCOPE_TABLE_ARM64__bindgen_ty_1::BeginAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM64__bindgen_ty_1, BeginAddress) - 0usize];
    ["Offset of field: _SCOPE_TABLE_ARM64__bindgen_ty_1::EndAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM64__bindgen_ty_1, EndAddress) - 4usize];
    ["Offset of field: _SCOPE_TABLE_ARM64__bindgen_ty_1::HandlerAddress"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM64__bindgen_ty_1, HandlerAddress) - 8usize];
    ["Offset of field: _SCOPE_TABLE_ARM64__bindgen_ty_1::JumpTarget"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM64__bindgen_ty_1, JumpTarget) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCOPE_TABLE_ARM64"][::std::mem::size_of::<_SCOPE_TABLE_ARM64>() - 20usize];
    ["Alignment of _SCOPE_TABLE_ARM64"][::std::mem::align_of::<_SCOPE_TABLE_ARM64>() - 4usize];
    ["Offset of field: _SCOPE_TABLE_ARM64::Count"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM64, Count) - 0usize];
    ["Offset of field: _SCOPE_TABLE_ARM64::ScopeRecord"]
        [::std::mem::offset_of!(_SCOPE_TABLE_ARM64, ScopeRecord) - 4usize];
};
pub type SCOPE_TABLE_ARM64 = _SCOPE_TABLE_ARM64;
pub type PSCOPE_TABLE_ARM64 = *mut _SCOPE_TABLE_ARM64;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ARM64_NT_NEON128 {
    pub __bindgen_anon_1: _ARM64_NT_NEON128__bindgen_ty_1,
    pub D: [f64; 2usize],
    pub S: [f32; 4usize],
    pub H: [WORD; 8usize],
    pub B: [BYTE; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ARM64_NT_NEON128__bindgen_ty_1 {
    pub Low: ULONGLONG,
    pub High: LONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64_NT_NEON128__bindgen_ty_1"]
        [::std::mem::size_of::<_ARM64_NT_NEON128__bindgen_ty_1>() - 16usize];
    ["Alignment of _ARM64_NT_NEON128__bindgen_ty_1"]
        [::std::mem::align_of::<_ARM64_NT_NEON128__bindgen_ty_1>() - 8usize];
    ["Offset of field: _ARM64_NT_NEON128__bindgen_ty_1::Low"]
        [::std::mem::offset_of!(_ARM64_NT_NEON128__bindgen_ty_1, Low) - 0usize];
    ["Offset of field: _ARM64_NT_NEON128__bindgen_ty_1::High"]
        [::std::mem::offset_of!(_ARM64_NT_NEON128__bindgen_ty_1, High) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64_NT_NEON128"][::std::mem::size_of::<_ARM64_NT_NEON128>() - 16usize];
    ["Alignment of _ARM64_NT_NEON128"][::std::mem::align_of::<_ARM64_NT_NEON128>() - 8usize];
    ["Offset of field: _ARM64_NT_NEON128::D"]
        [::std::mem::offset_of!(_ARM64_NT_NEON128, D) - 0usize];
    ["Offset of field: _ARM64_NT_NEON128::S"]
        [::std::mem::offset_of!(_ARM64_NT_NEON128, S) - 0usize];
    ["Offset of field: _ARM64_NT_NEON128::H"]
        [::std::mem::offset_of!(_ARM64_NT_NEON128, H) - 0usize];
    ["Offset of field: _ARM64_NT_NEON128::B"]
        [::std::mem::offset_of!(_ARM64_NT_NEON128, B) - 0usize];
};
pub type ARM64_NT_NEON128 = _ARM64_NT_NEON128;
pub type PARM64_NT_NEON128 = *mut _ARM64_NT_NEON128;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _ARM64_NT_CONTEXT {
    pub ContextFlags: DWORD,
    pub Cpsr: DWORD,
    pub __bindgen_anon_1: _ARM64_NT_CONTEXT__bindgen_ty_1,
    pub Sp: DWORD64,
    pub Pc: DWORD64,
    pub V: [ARM64_NT_NEON128; 32usize],
    pub Fpcr: DWORD,
    pub Fpsr: DWORD,
    pub Bcr: [DWORD; 8usize],
    pub Bvr: [DWORD64; 8usize],
    pub Wcr: [DWORD; 2usize],
    pub Wvr: [DWORD64; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ARM64_NT_CONTEXT__bindgen_ty_1 {
    pub __bindgen_anon_1: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
    pub X: [DWORD64; 31usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    pub X0: DWORD64,
    pub X1: DWORD64,
    pub X2: DWORD64,
    pub X3: DWORD64,
    pub X4: DWORD64,
    pub X5: DWORD64,
    pub X6: DWORD64,
    pub X7: DWORD64,
    pub X8: DWORD64,
    pub X9: DWORD64,
    pub X10: DWORD64,
    pub X11: DWORD64,
    pub X12: DWORD64,
    pub X13: DWORD64,
    pub X14: DWORD64,
    pub X15: DWORD64,
    pub X16: DWORD64,
    pub X17: DWORD64,
    pub X18: DWORD64,
    pub X19: DWORD64,
    pub X20: DWORD64,
    pub X21: DWORD64,
    pub X22: DWORD64,
    pub X23: DWORD64,
    pub X24: DWORD64,
    pub X25: DWORD64,
    pub X26: DWORD64,
    pub X27: DWORD64,
    pub X28: DWORD64,
    pub Fp: DWORD64,
    pub Lr: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 248usize];
    ["Alignment of _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X0"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X0) - 0usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X1"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X1) - 8usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X2"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X2) - 16usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X3"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X3) - 24usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X4"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X4) - 32usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X5"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X5) - 40usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X6"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X6) - 48usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X7"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X7) - 56usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X8"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X8) - 64usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X9"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X9) - 72usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X10"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X10) - 80usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X11"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X11) - 88usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X12"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X12) - 96usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X13"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X13) - 104usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X14"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X14) - 112usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X15"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X15) - 120usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X16"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X16) - 128usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X17"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X17) - 136usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X18"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X18) - 144usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X19"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X19) - 152usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X20"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X20) - 160usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X21"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X21) - 168usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X22"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X22) - 176usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X23"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X23) - 184usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X24"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X24) - 192usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X25"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X25) - 200usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X26"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X26) - 208usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X27"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X27) - 216usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X28"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X28) - 224usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::Fp"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, Fp) - 232usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::Lr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, Lr) - 240usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64_NT_CONTEXT__bindgen_ty_1"]
        [::std::mem::size_of::<_ARM64_NT_CONTEXT__bindgen_ty_1>() - 248usize];
    ["Alignment of _ARM64_NT_CONTEXT__bindgen_ty_1"]
        [::std::mem::align_of::<_ARM64_NT_CONTEXT__bindgen_ty_1>() - 8usize];
    ["Offset of field: _ARM64_NT_CONTEXT__bindgen_ty_1::X"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT__bindgen_ty_1, X) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64_NT_CONTEXT"][::std::mem::size_of::<_ARM64_NT_CONTEXT>() - 912usize];
    ["Alignment of _ARM64_NT_CONTEXT"][::std::mem::align_of::<_ARM64_NT_CONTEXT>() - 16usize];
    ["Offset of field: _ARM64_NT_CONTEXT::ContextFlags"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, ContextFlags) - 0usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Cpsr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Cpsr) - 4usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Sp"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Sp) - 256usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Pc"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Pc) - 264usize];
    ["Offset of field: _ARM64_NT_CONTEXT::V"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, V) - 272usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Fpcr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Fpcr) - 784usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Fpsr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Fpsr) - 788usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Bcr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Bcr) - 792usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Bvr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Bvr) - 824usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Wcr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Wcr) - 888usize];
    ["Offset of field: _ARM64_NT_CONTEXT::Wvr"]
        [::std::mem::offset_of!(_ARM64_NT_CONTEXT, Wvr) - 896usize];
};
pub type ARM64_NT_CONTEXT = _ARM64_NT_CONTEXT;
pub type PARM64_NT_CONTEXT = *mut _ARM64_NT_CONTEXT;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct _ARM64EC_NT_CONTEXT {
    pub __bindgen_anon_1: _ARM64EC_NT_CONTEXT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ARM64EC_NT_CONTEXT__bindgen_ty_1 {
    pub __bindgen_anon_1: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    pub AMD64_P1Home: DWORD64,
    pub AMD64_P2Home: DWORD64,
    pub AMD64_P3Home: DWORD64,
    pub AMD64_P4Home: DWORD64,
    pub AMD64_P5Home: DWORD64,
    pub AMD64_P6Home: DWORD64,
    pub ContextFlags: DWORD,
    pub AMD64_MxCsr_copy: DWORD,
    pub AMD64_SegCs: WORD,
    pub AMD64_SegDs: WORD,
    pub AMD64_SegEs: WORD,
    pub AMD64_SegFs: WORD,
    pub AMD64_SegGs: WORD,
    pub AMD64_SegSs: WORD,
    pub AMD64_EFlags: DWORD,
    pub AMD64_Dr0: DWORD64,
    pub AMD64_Dr1: DWORD64,
    pub AMD64_Dr2: DWORD64,
    pub AMD64_Dr3: DWORD64,
    pub AMD64_Dr6: DWORD64,
    pub AMD64_Dr7: DWORD64,
    pub X8: DWORD64,
    pub X0: DWORD64,
    pub X1: DWORD64,
    pub X27: DWORD64,
    pub Sp: DWORD64,
    pub Fp: DWORD64,
    pub X25: DWORD64,
    pub X26: DWORD64,
    pub X2: DWORD64,
    pub X3: DWORD64,
    pub X4: DWORD64,
    pub X5: DWORD64,
    pub X19: DWORD64,
    pub X20: DWORD64,
    pub X21: DWORD64,
    pub X22: DWORD64,
    pub Pc: DWORD64,
    pub __bindgen_anon_1: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub AMD64_VectorRegister: [ARM64_NT_NEON128; 26usize],
    pub AMD64_VectorControl: DWORD64,
    pub AMD64_DebugControl: DWORD64,
    pub AMD64_LastBranchToRip: DWORD64,
    pub AMD64_LastBranchFromRip: DWORD64,
    pub AMD64_LastExceptionToRip: DWORD64,
    pub AMD64_LastExceptionFromRip: DWORD64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub AMD64_ControlWord: WORD,
    pub AMD64_StatusWord: WORD,
    pub AMD64_TagWord: BYTE,
    pub AMD64_Reserved1: BYTE,
    pub AMD64_ErrorOpcode: WORD,
    pub AMD64_ErrorOffset: DWORD,
    pub AMD64_ErrorSelector: WORD,
    pub AMD64_Reserved2: WORD,
    pub AMD64_DataOffset: DWORD,
    pub AMD64_DataSelector: WORD,
    pub AMD64_Reserved3: WORD,
    pub AMD64_MxCsr: DWORD,
    pub AMD64_MxCsr_Mask: DWORD,
    pub Lr: DWORD64,
    pub X16_0: WORD,
    pub AMD64_St0_Reserved1: WORD,
    pub AMD64_St0_Reserved2: DWORD,
    pub X6: DWORD64,
    pub X16_1: WORD,
    pub AMD64_St1_Reserved1: WORD,
    pub AMD64_St1_Reserved2: DWORD,
    pub X7: DWORD64,
    pub X16_2: WORD,
    pub AMD64_St2_Reserved1: WORD,
    pub AMD64_St2_Reserved2: DWORD,
    pub X9: DWORD64,
    pub X16_3: WORD,
    pub AMD64_St3_Reserved1: WORD,
    pub AMD64_St3_Reserved2: DWORD,
    pub X10: DWORD64,
    pub X17_0: WORD,
    pub AMD64_St4_Reserved1: WORD,
    pub AMD64_St4_Reserved2: DWORD,
    pub X11: DWORD64,
    pub X17_1: WORD,
    pub AMD64_St5_Reserved1: WORD,
    pub AMD64_St5_Reserved2: DWORD,
    pub X12: DWORD64,
    pub X17_2: WORD,
    pub AMD64_St6_Reserved1: WORD,
    pub AMD64_St6_Reserved2: DWORD,
    pub X15: DWORD64,
    pub X17_3: WORD,
    pub AMD64_St7_Reserved1: WORD,
    pub AMD64_St7_Reserved2: DWORD,
    pub V: [ARM64_NT_NEON128; 16usize],
    pub AMD64_XSAVE_FORMAT_Reserved4: [BYTE; 96usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 512usize];
    ["Alignment of _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 8usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_ControlWord",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_ControlWord
    ) - 0usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_StatusWord",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_StatusWord
    ) - 2usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_TagWord",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_TagWord
    ) - 4usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_Reserved1
    ) - 5usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_ErrorOpcode",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_ErrorOpcode
    ) - 6usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_ErrorOffset",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_ErrorOffset
    ) - 8usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_ErrorSelector",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_ErrorSelector
    ) - 12usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_Reserved2
    ) - 14usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_DataOffset",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_DataOffset
    ) - 16usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_DataSelector",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_DataSelector
    ) - 20usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_Reserved3",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_Reserved3
    ) - 22usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_MxCsr"]
        [::std::mem::offset_of!(
            _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
            AMD64_MxCsr
        ) - 24usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_MxCsr_Mask",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_MxCsr_Mask
    ) - 28usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::Lr"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        Lr
    )
        - 32usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X16_0"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X16_0
    )
        - 40usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St0_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St0_Reserved1
    ) - 42usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St0_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St0_Reserved2
    ) - 44usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X6"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X6
    )
        - 48usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X16_1"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X16_1
    )
        - 56usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St1_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St1_Reserved1
    ) - 58usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St1_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St1_Reserved2
    ) - 60usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X7"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X7
    )
        - 64usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X16_2"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X16_2
    )
        - 72usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St2_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St2_Reserved1
    ) - 74usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St2_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St2_Reserved2
    ) - 76usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X9"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X9
    )
        - 80usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X16_3"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X16_3
    )
        - 88usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St3_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St3_Reserved1
    ) - 90usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St3_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St3_Reserved2
    ) - 92usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X10"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X10
    )
        - 96usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X17_0"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X17_0
    )
        - 104usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St4_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St4_Reserved1
    ) - 106usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St4_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St4_Reserved2
    ) - 108usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X11"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X11
    )
        - 112usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X17_1"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X17_1
    )
        - 120usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St5_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St5_Reserved1
    ) - 122usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St5_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St5_Reserved2
    ) - 124usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X12"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X12
    )
        - 128usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X17_2"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X17_2
    )
        - 136usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St6_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St6_Reserved1
    ) - 138usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St6_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St6_Reserved2
    ) - 140usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X15"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X15
    )
        - 144usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::X17_3"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        X17_3
    )
        - 152usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St7_Reserved1",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St7_Reserved1
    ) - 154usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_St7_Reserved2",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_St7_Reserved2
    ) - 156usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::V"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        V
    )
        - 160usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AMD64_XSAVE_FORMAT_Reserved4",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AMD64_XSAVE_FORMAT_Reserved4
    ) - 416usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 1232usize];
    ["Alignment of _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_P1Home"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_P1Home
    ) - 0usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_P2Home"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_P2Home
    ) - 8usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_P3Home"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_P3Home
    ) - 16usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_P4Home"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_P4Home
    ) - 24usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_P5Home"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_P5Home
    ) - 32usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_P6Home"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_P6Home
    ) - 40usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::ContextFlags"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        ContextFlags
    ) - 48usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_MxCsr_copy"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_MxCsr_copy
    )
        - 52usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_SegCs"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_SegCs
    ) - 56usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_SegDs"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_SegDs
    ) - 58usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_SegEs"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_SegEs
    ) - 60usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_SegFs"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_SegFs
    ) - 62usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_SegGs"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_SegGs
    ) - 64usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_SegSs"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_SegSs
    ) - 66usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_EFlags"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_EFlags
    ) - 68usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_Dr0"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_Dr0
    ) - 72usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_Dr1"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_Dr1
    ) - 80usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_Dr2"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_Dr2
    ) - 88usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_Dr3"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_Dr3
    ) - 96usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_Dr6"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_Dr6
    ) - 104usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_Dr7"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_Dr7
    ) - 112usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X8"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X8) - 120usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X0"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X0) - 128usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X1"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X1) - 136usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X27"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X27) - 144usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::Sp"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, Sp) - 152usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::Fp"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, Fp) - 160usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X25"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X25) - 168usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X26"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X26) - 176usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X2"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X2) - 184usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X3"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X3) - 192usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X4"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X4) - 200usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X5"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X5) - 208usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X19"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X19) - 216usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X20"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X20) - 224usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X21"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X21) - 232usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::X22"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, X22) - 240usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::Pc"]
        [::std::mem::offset_of!(_ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1, Pc) - 248usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_VectorRegister"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_VectorRegister
    )
        - 768usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_VectorControl"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_VectorControl
    )
        - 1184usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_DebugControl"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_DebugControl
    )
        - 1192usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_LastBranchToRip"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_LastBranchToRip
    )
        - 1200usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_LastBranchFromRip"][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_LastBranchFromRip
    )
        - 1208usize];
    ["Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_LastExceptionToRip"]
        [::std::mem::offset_of!(
            _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
            AMD64_LastExceptionToRip
        ) - 1216usize];
    [
        "Offset of field: _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1::AMD64_LastExceptionFromRip",
    ][::std::mem::offset_of!(
        _ARM64EC_NT_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        AMD64_LastExceptionFromRip
    ) - 1224usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64EC_NT_CONTEXT__bindgen_ty_1"]
        [::std::mem::size_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1>() - 1232usize];
    ["Alignment of _ARM64EC_NT_CONTEXT__bindgen_ty_1"]
        [::std::mem::align_of::<_ARM64EC_NT_CONTEXT__bindgen_ty_1>() - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ARM64EC_NT_CONTEXT"][::std::mem::size_of::<_ARM64EC_NT_CONTEXT>() - 1232usize];
    ["Alignment of _ARM64EC_NT_CONTEXT"][::std::mem::align_of::<_ARM64EC_NT_CONTEXT>() - 16usize];
};
pub type ARM64EC_NT_CONTEXT = _ARM64EC_NT_CONTEXT;
pub type PARM64EC_NT_CONTEXT = *mut _ARM64EC_NT_CONTEXT;
pub type ARM64_RUNTIME_FUNCTION = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub type PARM64_RUNTIME_FUNCTION = *mut _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPATCHER_CONTEXT_NONVOLREG_ARM64 {
    pub Buffer: [BYTE; 152usize],
    pub __bindgen_anon_1: _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1 {
    pub GpNvRegs: [DWORD64; 11usize],
    pub FpNvRegs: [f64; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1>() - 152usize];
    ["Alignment of _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1>() - 8usize];
    ["Offset of field: _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1::GpNvRegs"][::std::mem::offset_of!(
        _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1,
        GpNvRegs
    ) - 0usize];
    ["Offset of field: _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1::FpNvRegs"][::std::mem::offset_of!(
        _DISPATCHER_CONTEXT_NONVOLREG_ARM64__bindgen_ty_1,
        FpNvRegs
    ) - 88usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPATCHER_CONTEXT_NONVOLREG_ARM64"]
        [::std::mem::size_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64>() - 152usize];
    ["Alignment of _DISPATCHER_CONTEXT_NONVOLREG_ARM64"]
        [::std::mem::align_of::<_DISPATCHER_CONTEXT_NONVOLREG_ARM64>() - 8usize];
    ["Offset of field: _DISPATCHER_CONTEXT_NONVOLREG_ARM64::Buffer"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_NONVOLREG_ARM64, Buffer) - 0usize];
};
pub type DISPATCHER_CONTEXT_NONVOLREG_ARM64 = _DISPATCHER_CONTEXT_NONVOLREG_ARM64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPATCHER_CONTEXT_ARM64 {
    pub ControlPc: ULONG_PTR,
    pub ImageBase: ULONG_PTR,
    pub FunctionEntry: PARM64_RUNTIME_FUNCTION,
    pub EstablisherFrame: ULONG_PTR,
    pub TargetPc: ULONG_PTR,
    pub ContextRecord: PARM64_NT_CONTEXT,
    pub LanguageHandler: PEXCEPTION_ROUTINE,
    pub HandlerData: PVOID,
    pub HistoryTable: *mut _UNWIND_HISTORY_TABLE,
    pub ScopeIndex: DWORD,
    pub ControlPcIsUnwound: BOOLEAN,
    pub NonVolatileRegisters: PBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPATCHER_CONTEXT_ARM64"]
        [::std::mem::size_of::<_DISPATCHER_CONTEXT_ARM64>() - 88usize];
    ["Alignment of _DISPATCHER_CONTEXT_ARM64"]
        [::std::mem::align_of::<_DISPATCHER_CONTEXT_ARM64>() - 8usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::ControlPc"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, ControlPc) - 0usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::ImageBase"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, ImageBase) - 8usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::FunctionEntry"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, FunctionEntry) - 16usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::EstablisherFrame"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, EstablisherFrame) - 24usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::TargetPc"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, TargetPc) - 32usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::ContextRecord"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, ContextRecord) - 40usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::LanguageHandler"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, LanguageHandler) - 48usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::HandlerData"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, HandlerData) - 56usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::HistoryTable"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, HistoryTable) - 64usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::ScopeIndex"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, ScopeIndex) - 72usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::ControlPcIsUnwound"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, ControlPcIsUnwound) - 76usize];
    ["Offset of field: _DISPATCHER_CONTEXT_ARM64::NonVolatileRegisters"]
        [::std::mem::offset_of!(_DISPATCHER_CONTEXT_ARM64, NonVolatileRegisters) - 80usize];
};
pub type DISPATCHER_CONTEXT_ARM64 = _DISPATCHER_CONTEXT_ARM64;
pub type PDISPATCHER_CONTEXT_ARM64 = *mut _DISPATCHER_CONTEXT_ARM64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
    pub X19: PDWORD64,
    pub X20: PDWORD64,
    pub X21: PDWORD64,
    pub X22: PDWORD64,
    pub X23: PDWORD64,
    pub X24: PDWORD64,
    pub X25: PDWORD64,
    pub X26: PDWORD64,
    pub X27: PDWORD64,
    pub X28: PDWORD64,
    pub Fp: PDWORD64,
    pub Lr: PDWORD64,
    pub D8: PDWORD64,
    pub D9: PDWORD64,
    pub D10: PDWORD64,
    pub D11: PDWORD64,
    pub D12: PDWORD64,
    pub D13: PDWORD64,
    pub D14: PDWORD64,
    pub D15: PDWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KNONVOLATILE_CONTEXT_POINTERS_ARM64"]
        [::std::mem::size_of::<_KNONVOLATILE_CONTEXT_POINTERS_ARM64>() - 160usize];
    ["Alignment of _KNONVOLATILE_CONTEXT_POINTERS_ARM64"]
        [::std::mem::align_of::<_KNONVOLATILE_CONTEXT_POINTERS_ARM64>() - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X19"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X19) - 0usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X20"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X20) - 8usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X21"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X21) - 16usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X22"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X22) - 24usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X23"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X23) - 32usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X24"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X24) - 40usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X25"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X25) - 48usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X26"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X26) - 56usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X27"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X27) - 64usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::X28"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, X28) - 72usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::Fp"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, Fp) - 80usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::Lr"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, Lr) - 88usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D8"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D8) - 96usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D9"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D9) - 104usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D10"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D10) - 112usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D11"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D11) - 120usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D12"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D12) - 128usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D13"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D13) - 136usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D14"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D14) - 144usize];
    ["Offset of field: _KNONVOLATILE_CONTEXT_POINTERS_ARM64::D15"]
        [::std::mem::offset_of!(_KNONVOLATILE_CONTEXT_POINTERS_ARM64, D15) - 152usize];
};
pub type KNONVOLATILE_CONTEXT_POINTERS_ARM64 = _KNONVOLATILE_CONTEXT_POINTERS_ARM64;
pub type PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = *mut _KNONVOLATILE_CONTEXT_POINTERS_ARM64;
unsafe extern "C" {
    pub fn __int2c() -> !;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _LDT_ENTRY {
    pub LimitLow: WORD,
    pub BaseLow: WORD,
    pub HighWord: _LDT_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _LDT_ENTRY__bindgen_ty_1 {
    pub Bytes: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1,
    pub Bits: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub BaseMid: BYTE,
    pub Flags1: BYTE,
    pub Flags2: BYTE,
    pub BaseHi: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::BaseMid"]
        [::std::mem::offset_of!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, BaseMid) - 0usize];
    ["Offset of field: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::Flags1"]
        [::std::mem::offset_of!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, Flags1) - 1usize];
    ["Offset of field: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::Flags2"]
        [::std::mem::offset_of!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, Flags2) - 2usize];
    ["Offset of field: _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::BaseHi"]
        [::std::mem::offset_of!(_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, BaseHi) - 3usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>() - 4usize];
};
impl _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn BaseMid(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_BaseMid(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BaseMid_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_BaseMid_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Type(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Type_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Type_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Dpl(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_Dpl(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Dpl_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Dpl_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Pres(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Pres(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Pres_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Pres_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LimitHi(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_LimitHi(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LimitHi_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LimitHi_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Sys(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Sys(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Sys_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Sys_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved_0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved_0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Default_Big(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Default_Big(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Default_Big_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Default_Big_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Granularity(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Granularity(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Granularity_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Granularity_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn BaseHi(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_BaseHi(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BaseHi_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_BaseHi_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        BaseMid: DWORD,
        Type: DWORD,
        Dpl: DWORD,
        Pres: DWORD,
        LimitHi: DWORD,
        Sys: DWORD,
        Reserved_0: DWORD,
        Default_Big: DWORD,
        Granularity: DWORD,
        BaseHi: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let BaseMid: u32 = unsafe { ::std::mem::transmute(BaseMid) };
            BaseMid as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let Type: u32 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let Dpl: u32 = unsafe { ::std::mem::transmute(Dpl) };
            Dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let Pres: u32 = unsafe { ::std::mem::transmute(Pres) };
            Pres as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let LimitHi: u32 = unsafe { ::std::mem::transmute(LimitHi) };
            LimitHi as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let Sys: u32 = unsafe { ::std::mem::transmute(Sys) };
            Sys as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let Reserved_0: u32 = unsafe { ::std::mem::transmute(Reserved_0) };
            Reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let Default_Big: u32 = unsafe { ::std::mem::transmute(Default_Big) };
            Default_Big as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let Granularity: u32 = unsafe { ::std::mem::transmute(Granularity) };
            Granularity as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let BaseHi: u32 = unsafe { ::std::mem::transmute(BaseHi) };
            BaseHi as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDT_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_LDT_ENTRY__bindgen_ty_1>() - 4usize];
    ["Alignment of _LDT_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_LDT_ENTRY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _LDT_ENTRY__bindgen_ty_1::Bytes"]
        [::std::mem::offset_of!(_LDT_ENTRY__bindgen_ty_1, Bytes) - 0usize];
    ["Offset of field: _LDT_ENTRY__bindgen_ty_1::Bits"]
        [::std::mem::offset_of!(_LDT_ENTRY__bindgen_ty_1, Bits) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDT_ENTRY"][::std::mem::size_of::<_LDT_ENTRY>() - 8usize];
    ["Alignment of _LDT_ENTRY"][::std::mem::align_of::<_LDT_ENTRY>() - 4usize];
    ["Offset of field: _LDT_ENTRY::LimitLow"]
        [::std::mem::offset_of!(_LDT_ENTRY, LimitLow) - 0usize];
    ["Offset of field: _LDT_ENTRY::BaseLow"][::std::mem::offset_of!(_LDT_ENTRY, BaseLow) - 2usize];
    ["Offset of field: _LDT_ENTRY::HighWord"]
        [::std::mem::offset_of!(_LDT_ENTRY, HighWord) - 4usize];
};
pub type LDT_ENTRY = _LDT_ENTRY;
pub type PLDT_ENTRY = *mut _LDT_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_FLOATING_SAVE_AREA {
    pub ControlWord: DWORD,
    pub StatusWord: DWORD,
    pub TagWord: DWORD,
    pub ErrorOffset: DWORD,
    pub ErrorSelector: DWORD,
    pub DataOffset: DWORD,
    pub DataSelector: DWORD,
    pub RegisterArea: [BYTE; 80usize],
    pub Cr0NpxState: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_FLOATING_SAVE_AREA"]
        [::std::mem::size_of::<_WOW64_FLOATING_SAVE_AREA>() - 112usize];
    ["Alignment of _WOW64_FLOATING_SAVE_AREA"]
        [::std::mem::align_of::<_WOW64_FLOATING_SAVE_AREA>() - 4usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::ControlWord"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, ControlWord) - 0usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::StatusWord"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, StatusWord) - 4usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::TagWord"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, TagWord) - 8usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::ErrorOffset"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, ErrorOffset) - 12usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::ErrorSelector"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, ErrorSelector) - 16usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::DataOffset"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, DataOffset) - 20usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::DataSelector"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, DataSelector) - 24usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::RegisterArea"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, RegisterArea) - 28usize];
    ["Offset of field: _WOW64_FLOATING_SAVE_AREA::Cr0NpxState"]
        [::std::mem::offset_of!(_WOW64_FLOATING_SAVE_AREA, Cr0NpxState) - 108usize];
};
pub type WOW64_FLOATING_SAVE_AREA = _WOW64_FLOATING_SAVE_AREA;
pub type PWOW64_FLOATING_SAVE_AREA = *mut WOW64_FLOATING_SAVE_AREA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_CONTEXT {
    pub ContextFlags: DWORD,
    pub Dr0: DWORD,
    pub Dr1: DWORD,
    pub Dr2: DWORD,
    pub Dr3: DWORD,
    pub Dr6: DWORD,
    pub Dr7: DWORD,
    pub FloatSave: WOW64_FLOATING_SAVE_AREA,
    pub SegGs: DWORD,
    pub SegFs: DWORD,
    pub SegEs: DWORD,
    pub SegDs: DWORD,
    pub Edi: DWORD,
    pub Esi: DWORD,
    pub Ebx: DWORD,
    pub Edx: DWORD,
    pub Ecx: DWORD,
    pub Eax: DWORD,
    pub Ebp: DWORD,
    pub Eip: DWORD,
    pub SegCs: DWORD,
    pub EFlags: DWORD,
    pub Esp: DWORD,
    pub SegSs: DWORD,
    pub ExtendedRegisters: [BYTE; 512usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_CONTEXT"][::std::mem::size_of::<_WOW64_CONTEXT>() - 716usize];
    ["Alignment of _WOW64_CONTEXT"][::std::mem::align_of::<_WOW64_CONTEXT>() - 4usize];
    ["Offset of field: _WOW64_CONTEXT::ContextFlags"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, ContextFlags) - 0usize];
    ["Offset of field: _WOW64_CONTEXT::Dr0"][::std::mem::offset_of!(_WOW64_CONTEXT, Dr0) - 4usize];
    ["Offset of field: _WOW64_CONTEXT::Dr1"][::std::mem::offset_of!(_WOW64_CONTEXT, Dr1) - 8usize];
    ["Offset of field: _WOW64_CONTEXT::Dr2"][::std::mem::offset_of!(_WOW64_CONTEXT, Dr2) - 12usize];
    ["Offset of field: _WOW64_CONTEXT::Dr3"][::std::mem::offset_of!(_WOW64_CONTEXT, Dr3) - 16usize];
    ["Offset of field: _WOW64_CONTEXT::Dr6"][::std::mem::offset_of!(_WOW64_CONTEXT, Dr6) - 20usize];
    ["Offset of field: _WOW64_CONTEXT::Dr7"][::std::mem::offset_of!(_WOW64_CONTEXT, Dr7) - 24usize];
    ["Offset of field: _WOW64_CONTEXT::FloatSave"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, FloatSave) - 28usize];
    ["Offset of field: _WOW64_CONTEXT::SegGs"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, SegGs) - 140usize];
    ["Offset of field: _WOW64_CONTEXT::SegFs"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, SegFs) - 144usize];
    ["Offset of field: _WOW64_CONTEXT::SegEs"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, SegEs) - 148usize];
    ["Offset of field: _WOW64_CONTEXT::SegDs"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, SegDs) - 152usize];
    ["Offset of field: _WOW64_CONTEXT::Edi"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Edi) - 156usize];
    ["Offset of field: _WOW64_CONTEXT::Esi"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Esi) - 160usize];
    ["Offset of field: _WOW64_CONTEXT::Ebx"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Ebx) - 164usize];
    ["Offset of field: _WOW64_CONTEXT::Edx"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Edx) - 168usize];
    ["Offset of field: _WOW64_CONTEXT::Ecx"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Ecx) - 172usize];
    ["Offset of field: _WOW64_CONTEXT::Eax"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Eax) - 176usize];
    ["Offset of field: _WOW64_CONTEXT::Ebp"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Ebp) - 180usize];
    ["Offset of field: _WOW64_CONTEXT::Eip"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Eip) - 184usize];
    ["Offset of field: _WOW64_CONTEXT::SegCs"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, SegCs) - 188usize];
    ["Offset of field: _WOW64_CONTEXT::EFlags"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, EFlags) - 192usize];
    ["Offset of field: _WOW64_CONTEXT::Esp"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, Esp) - 196usize];
    ["Offset of field: _WOW64_CONTEXT::SegSs"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, SegSs) - 200usize];
    ["Offset of field: _WOW64_CONTEXT::ExtendedRegisters"]
        [::std::mem::offset_of!(_WOW64_CONTEXT, ExtendedRegisters) - 204usize];
};
pub type WOW64_CONTEXT = _WOW64_CONTEXT;
pub type PWOW64_CONTEXT = *mut WOW64_CONTEXT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WOW64_LDT_ENTRY {
    pub LimitLow: WORD,
    pub BaseLow: WORD,
    pub HighWord: _WOW64_LDT_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _WOW64_LDT_ENTRY__bindgen_ty_1 {
    pub Bytes: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1,
    pub Bits: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub BaseMid: BYTE,
    pub Flags1: BYTE,
    pub Flags2: BYTE,
    pub BaseHi: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::BaseMid"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, BaseMid) - 0usize];
    ["Offset of field: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::Flags1"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, Flags1) - 1usize];
    ["Offset of field: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::Flags2"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, Flags2) - 2usize];
    ["Offset of field: _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1::BaseHi"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1, BaseHi) - 3usize];
};
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2>() - 4usize];
};
impl _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn BaseMid(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_BaseMid(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BaseMid_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_BaseMid_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Type(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Type_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Type_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Dpl(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_Dpl(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Dpl_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Dpl_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Pres(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Pres(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Pres_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Pres_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn LimitHi(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_LimitHi(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LimitHi_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LimitHi_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Sys(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Sys(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Sys_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Sys_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved_0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved_0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Default_Big(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Default_Big(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Default_Big_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Default_Big_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Granularity(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Granularity(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Granularity_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Granularity_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn BaseHi(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_BaseHi(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BaseHi_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_BaseHi_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        BaseMid: DWORD,
        Type: DWORD,
        Dpl: DWORD,
        Pres: DWORD,
        LimitHi: DWORD,
        Sys: DWORD,
        Reserved_0: DWORD,
        Default_Big: DWORD,
        Granularity: DWORD,
        BaseHi: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let BaseMid: u32 = unsafe { ::std::mem::transmute(BaseMid) };
            BaseMid as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let Type: u32 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let Dpl: u32 = unsafe { ::std::mem::transmute(Dpl) };
            Dpl as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let Pres: u32 = unsafe { ::std::mem::transmute(Pres) };
            Pres as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let LimitHi: u32 = unsafe { ::std::mem::transmute(LimitHi) };
            LimitHi as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let Sys: u32 = unsafe { ::std::mem::transmute(Sys) };
            Sys as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let Reserved_0: u32 = unsafe { ::std::mem::transmute(Reserved_0) };
            Reserved_0 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let Default_Big: u32 = unsafe { ::std::mem::transmute(Default_Big) };
            Default_Big as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let Granularity: u32 = unsafe { ::std::mem::transmute(Granularity) };
            Granularity as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let BaseHi: u32 = unsafe { ::std::mem::transmute(BaseHi) };
            BaseHi as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_LDT_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_WOW64_LDT_ENTRY__bindgen_ty_1>() - 4usize];
    ["Alignment of _WOW64_LDT_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_WOW64_LDT_ENTRY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _WOW64_LDT_ENTRY__bindgen_ty_1::Bytes"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY__bindgen_ty_1, Bytes) - 0usize];
    ["Offset of field: _WOW64_LDT_ENTRY__bindgen_ty_1::Bits"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY__bindgen_ty_1, Bits) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_LDT_ENTRY"][::std::mem::size_of::<_WOW64_LDT_ENTRY>() - 8usize];
    ["Alignment of _WOW64_LDT_ENTRY"][::std::mem::align_of::<_WOW64_LDT_ENTRY>() - 4usize];
    ["Offset of field: _WOW64_LDT_ENTRY::LimitLow"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY, LimitLow) - 0usize];
    ["Offset of field: _WOW64_LDT_ENTRY::BaseLow"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY, BaseLow) - 2usize];
    ["Offset of field: _WOW64_LDT_ENTRY::HighWord"]
        [::std::mem::offset_of!(_WOW64_LDT_ENTRY, HighWord) - 4usize];
};
pub type WOW64_LDT_ENTRY = _WOW64_LDT_ENTRY;
pub type PWOW64_LDT_ENTRY = *mut _WOW64_LDT_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    pub Selector: DWORD,
    pub Descriptor: WOW64_LDT_ENTRY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WOW64_DESCRIPTOR_TABLE_ENTRY"]
        [::std::mem::size_of::<_WOW64_DESCRIPTOR_TABLE_ENTRY>() - 12usize];
    ["Alignment of _WOW64_DESCRIPTOR_TABLE_ENTRY"]
        [::std::mem::align_of::<_WOW64_DESCRIPTOR_TABLE_ENTRY>() - 4usize];
    ["Offset of field: _WOW64_DESCRIPTOR_TABLE_ENTRY::Selector"]
        [::std::mem::offset_of!(_WOW64_DESCRIPTOR_TABLE_ENTRY, Selector) - 0usize];
    ["Offset of field: _WOW64_DESCRIPTOR_TABLE_ENTRY::Descriptor"]
        [::std::mem::offset_of!(_WOW64_DESCRIPTOR_TABLE_ENTRY, Descriptor) - 4usize];
};
pub type WOW64_DESCRIPTOR_TABLE_ENTRY = _WOW64_DESCRIPTOR_TABLE_ENTRY;
pub type PWOW64_DESCRIPTOR_TABLE_ENTRY = *mut _WOW64_DESCRIPTOR_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD {
    pub ExceptionCode: DWORD,
    pub ExceptionFlags: DWORD,
    pub ExceptionRecord: *mut _EXCEPTION_RECORD,
    pub ExceptionAddress: PVOID,
    pub NumberParameters: DWORD,
    pub ExceptionInformation: [ULONG_PTR; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXCEPTION_RECORD"][::std::mem::size_of::<_EXCEPTION_RECORD>() - 152usize];
    ["Alignment of _EXCEPTION_RECORD"][::std::mem::align_of::<_EXCEPTION_RECORD>() - 8usize];
    ["Offset of field: _EXCEPTION_RECORD::ExceptionCode"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD, ExceptionCode) - 0usize];
    ["Offset of field: _EXCEPTION_RECORD::ExceptionFlags"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD, ExceptionFlags) - 4usize];
    ["Offset of field: _EXCEPTION_RECORD::ExceptionRecord"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD, ExceptionRecord) - 8usize];
    ["Offset of field: _EXCEPTION_RECORD::ExceptionAddress"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD, ExceptionAddress) - 16usize];
    ["Offset of field: _EXCEPTION_RECORD::NumberParameters"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD, NumberParameters) - 24usize];
    ["Offset of field: _EXCEPTION_RECORD::ExceptionInformation"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD, ExceptionInformation) - 32usize];
};
pub type EXCEPTION_RECORD = _EXCEPTION_RECORD;
pub type PEXCEPTION_RECORD = *mut EXCEPTION_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD32 {
    pub ExceptionCode: DWORD,
    pub ExceptionFlags: DWORD,
    pub ExceptionRecord: DWORD,
    pub ExceptionAddress: DWORD,
    pub NumberParameters: DWORD,
    pub ExceptionInformation: [DWORD; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXCEPTION_RECORD32"][::std::mem::size_of::<_EXCEPTION_RECORD32>() - 80usize];
    ["Alignment of _EXCEPTION_RECORD32"][::std::mem::align_of::<_EXCEPTION_RECORD32>() - 4usize];
    ["Offset of field: _EXCEPTION_RECORD32::ExceptionCode"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD32, ExceptionCode) - 0usize];
    ["Offset of field: _EXCEPTION_RECORD32::ExceptionFlags"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD32, ExceptionFlags) - 4usize];
    ["Offset of field: _EXCEPTION_RECORD32::ExceptionRecord"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD32, ExceptionRecord) - 8usize];
    ["Offset of field: _EXCEPTION_RECORD32::ExceptionAddress"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD32, ExceptionAddress) - 12usize];
    ["Offset of field: _EXCEPTION_RECORD32::NumberParameters"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD32, NumberParameters) - 16usize];
    ["Offset of field: _EXCEPTION_RECORD32::ExceptionInformation"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD32, ExceptionInformation) - 20usize];
};
pub type EXCEPTION_RECORD32 = _EXCEPTION_RECORD32;
pub type PEXCEPTION_RECORD32 = *mut _EXCEPTION_RECORD32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_RECORD64 {
    pub ExceptionCode: DWORD,
    pub ExceptionFlags: DWORD,
    pub ExceptionRecord: DWORD64,
    pub ExceptionAddress: DWORD64,
    pub NumberParameters: DWORD,
    pub __unusedAlignment: DWORD,
    pub ExceptionInformation: [DWORD64; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXCEPTION_RECORD64"][::std::mem::size_of::<_EXCEPTION_RECORD64>() - 152usize];
    ["Alignment of _EXCEPTION_RECORD64"][::std::mem::align_of::<_EXCEPTION_RECORD64>() - 8usize];
    ["Offset of field: _EXCEPTION_RECORD64::ExceptionCode"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, ExceptionCode) - 0usize];
    ["Offset of field: _EXCEPTION_RECORD64::ExceptionFlags"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, ExceptionFlags) - 4usize];
    ["Offset of field: _EXCEPTION_RECORD64::ExceptionRecord"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, ExceptionRecord) - 8usize];
    ["Offset of field: _EXCEPTION_RECORD64::ExceptionAddress"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, ExceptionAddress) - 16usize];
    ["Offset of field: _EXCEPTION_RECORD64::NumberParameters"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, NumberParameters) - 24usize];
    ["Offset of field: _EXCEPTION_RECORD64::__unusedAlignment"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, __unusedAlignment) - 28usize];
    ["Offset of field: _EXCEPTION_RECORD64::ExceptionInformation"]
        [::std::mem::offset_of!(_EXCEPTION_RECORD64, ExceptionInformation) - 32usize];
};
pub type EXCEPTION_RECORD64 = _EXCEPTION_RECORD64;
pub type PEXCEPTION_RECORD64 = *mut _EXCEPTION_RECORD64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_POINTERS {
    pub ExceptionRecord: PEXCEPTION_RECORD,
    pub ContextRecord: PCONTEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXCEPTION_POINTERS"][::std::mem::size_of::<_EXCEPTION_POINTERS>() - 16usize];
    ["Alignment of _EXCEPTION_POINTERS"][::std::mem::align_of::<_EXCEPTION_POINTERS>() - 8usize];
    ["Offset of field: _EXCEPTION_POINTERS::ExceptionRecord"]
        [::std::mem::offset_of!(_EXCEPTION_POINTERS, ExceptionRecord) - 0usize];
    ["Offset of field: _EXCEPTION_POINTERS::ContextRecord"]
        [::std::mem::offset_of!(_EXCEPTION_POINTERS, ContextRecord) - 8usize];
};
pub type EXCEPTION_POINTERS = _EXCEPTION_POINTERS;
pub type PEXCEPTION_POINTERS = *mut _EXCEPTION_POINTERS;
pub type PACCESS_TOKEN = PVOID;
pub type PSECURITY_DESCRIPTOR = PVOID;
pub type PSID = PVOID;
pub type PCLAIMS_BLOB = PVOID;
pub type ACCESS_MASK = DWORD;
pub type PACCESS_MASK = *mut ACCESS_MASK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GENERIC_MAPPING {
    pub GenericRead: ACCESS_MASK,
    pub GenericWrite: ACCESS_MASK,
    pub GenericExecute: ACCESS_MASK,
    pub GenericAll: ACCESS_MASK,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GENERIC_MAPPING"][::std::mem::size_of::<_GENERIC_MAPPING>() - 16usize];
    ["Alignment of _GENERIC_MAPPING"][::std::mem::align_of::<_GENERIC_MAPPING>() - 4usize];
    ["Offset of field: _GENERIC_MAPPING::GenericRead"]
        [::std::mem::offset_of!(_GENERIC_MAPPING, GenericRead) - 0usize];
    ["Offset of field: _GENERIC_MAPPING::GenericWrite"]
        [::std::mem::offset_of!(_GENERIC_MAPPING, GenericWrite) - 4usize];
    ["Offset of field: _GENERIC_MAPPING::GenericExecute"]
        [::std::mem::offset_of!(_GENERIC_MAPPING, GenericExecute) - 8usize];
    ["Offset of field: _GENERIC_MAPPING::GenericAll"]
        [::std::mem::offset_of!(_GENERIC_MAPPING, GenericAll) - 12usize];
};
pub type GENERIC_MAPPING = _GENERIC_MAPPING;
pub type PGENERIC_MAPPING = *mut GENERIC_MAPPING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LUID_AND_ATTRIBUTES {
    pub Luid: LUID,
    pub Attributes: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LUID_AND_ATTRIBUTES"][::std::mem::size_of::<_LUID_AND_ATTRIBUTES>() - 12usize];
    ["Alignment of _LUID_AND_ATTRIBUTES"][::std::mem::align_of::<_LUID_AND_ATTRIBUTES>() - 4usize];
    ["Offset of field: _LUID_AND_ATTRIBUTES::Luid"]
        [::std::mem::offset_of!(_LUID_AND_ATTRIBUTES, Luid) - 0usize];
    ["Offset of field: _LUID_AND_ATTRIBUTES::Attributes"]
        [::std::mem::offset_of!(_LUID_AND_ATTRIBUTES, Attributes) - 8usize];
};
pub type LUID_AND_ATTRIBUTES = _LUID_AND_ATTRIBUTES;
pub type PLUID_AND_ATTRIBUTES = *mut _LUID_AND_ATTRIBUTES;
pub type LUID_AND_ATTRIBUTES_ARRAY = [LUID_AND_ATTRIBUTES; 1usize];
pub type PLUID_AND_ATTRIBUTES_ARRAY = *mut LUID_AND_ATTRIBUTES_ARRAY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_IDENTIFIER_AUTHORITY {
    pub Value: [BYTE; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SID_IDENTIFIER_AUTHORITY"]
        [::std::mem::size_of::<_SID_IDENTIFIER_AUTHORITY>() - 6usize];
    ["Alignment of _SID_IDENTIFIER_AUTHORITY"]
        [::std::mem::align_of::<_SID_IDENTIFIER_AUTHORITY>() - 1usize];
    ["Offset of field: _SID_IDENTIFIER_AUTHORITY::Value"]
        [::std::mem::offset_of!(_SID_IDENTIFIER_AUTHORITY, Value) - 0usize];
};
pub type SID_IDENTIFIER_AUTHORITY = _SID_IDENTIFIER_AUTHORITY;
pub type PSID_IDENTIFIER_AUTHORITY = *mut _SID_IDENTIFIER_AUTHORITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID {
    pub Revision: BYTE,
    pub SubAuthorityCount: BYTE,
    pub IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
    pub SubAuthority: [DWORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SID"][::std::mem::size_of::<_SID>() - 12usize];
    ["Alignment of _SID"][::std::mem::align_of::<_SID>() - 4usize];
    ["Offset of field: _SID::Revision"][::std::mem::offset_of!(_SID, Revision) - 0usize];
    ["Offset of field: _SID::SubAuthorityCount"]
        [::std::mem::offset_of!(_SID, SubAuthorityCount) - 1usize];
    ["Offset of field: _SID::IdentifierAuthority"]
        [::std::mem::offset_of!(_SID, IdentifierAuthority) - 2usize];
    ["Offset of field: _SID::SubAuthority"][::std::mem::offset_of!(_SID, SubAuthority) - 8usize];
};
pub type SID = _SID;
pub type PISID = *mut _SID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SE_SID {
    pub Sid: SID,
    pub Buffer: [BYTE; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_SID"][::std::mem::size_of::<_SE_SID>() - 68usize];
    ["Alignment of _SE_SID"][::std::mem::align_of::<_SE_SID>() - 4usize];
    ["Offset of field: _SE_SID::Sid"][::std::mem::offset_of!(_SE_SID, Sid) - 0usize];
    ["Offset of field: _SE_SID::Buffer"][::std::mem::offset_of!(_SE_SID, Buffer) - 0usize];
};
pub type SE_SID = _SE_SID;
pub type PSE_SID = *mut _SE_SID;
pub const _SID_NAME_USE_SidTypeUser: _SID_NAME_USE = 1;
pub const _SID_NAME_USE_SidTypeGroup: _SID_NAME_USE = 2;
pub const _SID_NAME_USE_SidTypeDomain: _SID_NAME_USE = 3;
pub const _SID_NAME_USE_SidTypeAlias: _SID_NAME_USE = 4;
pub const _SID_NAME_USE_SidTypeWellKnownGroup: _SID_NAME_USE = 5;
pub const _SID_NAME_USE_SidTypeDeletedAccount: _SID_NAME_USE = 6;
pub const _SID_NAME_USE_SidTypeInvalid: _SID_NAME_USE = 7;
pub const _SID_NAME_USE_SidTypeUnknown: _SID_NAME_USE = 8;
pub const _SID_NAME_USE_SidTypeComputer: _SID_NAME_USE = 9;
pub const _SID_NAME_USE_SidTypeLabel: _SID_NAME_USE = 10;
pub const _SID_NAME_USE_SidTypeLogonSession: _SID_NAME_USE = 11;
pub type _SID_NAME_USE = ::std::os::raw::c_int;
pub use self::_SID_NAME_USE as SID_NAME_USE;
pub type PSID_NAME_USE = *mut _SID_NAME_USE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_AND_ATTRIBUTES {
    pub Sid: PSID,
    pub Attributes: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SID_AND_ATTRIBUTES"][::std::mem::size_of::<_SID_AND_ATTRIBUTES>() - 16usize];
    ["Alignment of _SID_AND_ATTRIBUTES"][::std::mem::align_of::<_SID_AND_ATTRIBUTES>() - 8usize];
    ["Offset of field: _SID_AND_ATTRIBUTES::Sid"]
        [::std::mem::offset_of!(_SID_AND_ATTRIBUTES, Sid) - 0usize];
    ["Offset of field: _SID_AND_ATTRIBUTES::Attributes"]
        [::std::mem::offset_of!(_SID_AND_ATTRIBUTES, Attributes) - 8usize];
};
pub type SID_AND_ATTRIBUTES = _SID_AND_ATTRIBUTES;
pub type PSID_AND_ATTRIBUTES = *mut _SID_AND_ATTRIBUTES;
pub type SID_AND_ATTRIBUTES_ARRAY = [SID_AND_ATTRIBUTES; 1usize];
pub type PSID_AND_ATTRIBUTES_ARRAY = *mut SID_AND_ATTRIBUTES_ARRAY;
pub type SID_HASH_ENTRY = ULONG_PTR;
pub type PSID_HASH_ENTRY = *mut ULONG_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SID_AND_ATTRIBUTES_HASH {
    pub SidCount: DWORD,
    pub SidAttr: PSID_AND_ATTRIBUTES,
    pub Hash: [SID_HASH_ENTRY; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SID_AND_ATTRIBUTES_HASH"]
        [::std::mem::size_of::<_SID_AND_ATTRIBUTES_HASH>() - 272usize];
    ["Alignment of _SID_AND_ATTRIBUTES_HASH"]
        [::std::mem::align_of::<_SID_AND_ATTRIBUTES_HASH>() - 8usize];
    ["Offset of field: _SID_AND_ATTRIBUTES_HASH::SidCount"]
        [::std::mem::offset_of!(_SID_AND_ATTRIBUTES_HASH, SidCount) - 0usize];
    ["Offset of field: _SID_AND_ATTRIBUTES_HASH::SidAttr"]
        [::std::mem::offset_of!(_SID_AND_ATTRIBUTES_HASH, SidAttr) - 8usize];
    ["Offset of field: _SID_AND_ATTRIBUTES_HASH::Hash"]
        [::std::mem::offset_of!(_SID_AND_ATTRIBUTES_HASH, Hash) - 16usize];
};
pub type SID_AND_ATTRIBUTES_HASH = _SID_AND_ATTRIBUTES_HASH;
pub type PSID_AND_ATTRIBUTES_HASH = *mut _SID_AND_ATTRIBUTES_HASH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ATTRIBUTES_AND_SID {
    pub Attributes: UINT32,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ATTRIBUTES_AND_SID"][::std::mem::size_of::<_ATTRIBUTES_AND_SID>() - 8usize];
    ["Alignment of _ATTRIBUTES_AND_SID"][::std::mem::align_of::<_ATTRIBUTES_AND_SID>() - 4usize];
    ["Offset of field: _ATTRIBUTES_AND_SID::Attributes"]
        [::std::mem::offset_of!(_ATTRIBUTES_AND_SID, Attributes) - 0usize];
    ["Offset of field: _ATTRIBUTES_AND_SID::SidStart"]
        [::std::mem::offset_of!(_ATTRIBUTES_AND_SID, SidStart) - 4usize];
};
pub type ATTRIBUTES_AND_SID = _ATTRIBUTES_AND_SID;
pub type PATTRIBUTES_AND_SID = *mut _ATTRIBUTES_AND_SID;
pub const WELL_KNOWN_SID_TYPE_WinNullSid: WELL_KNOWN_SID_TYPE = 0;
pub const WELL_KNOWN_SID_TYPE_WinWorldSid: WELL_KNOWN_SID_TYPE = 1;
pub const WELL_KNOWN_SID_TYPE_WinLocalSid: WELL_KNOWN_SID_TYPE = 2;
pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerSid: WELL_KNOWN_SID_TYPE = 3;
pub const WELL_KNOWN_SID_TYPE_WinCreatorGroupSid: WELL_KNOWN_SID_TYPE = 4;
pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerServerSid: WELL_KNOWN_SID_TYPE = 5;
pub const WELL_KNOWN_SID_TYPE_WinCreatorGroupServerSid: WELL_KNOWN_SID_TYPE = 6;
pub const WELL_KNOWN_SID_TYPE_WinNtAuthoritySid: WELL_KNOWN_SID_TYPE = 7;
pub const WELL_KNOWN_SID_TYPE_WinDialupSid: WELL_KNOWN_SID_TYPE = 8;
pub const WELL_KNOWN_SID_TYPE_WinNetworkSid: WELL_KNOWN_SID_TYPE = 9;
pub const WELL_KNOWN_SID_TYPE_WinBatchSid: WELL_KNOWN_SID_TYPE = 10;
pub const WELL_KNOWN_SID_TYPE_WinInteractiveSid: WELL_KNOWN_SID_TYPE = 11;
pub const WELL_KNOWN_SID_TYPE_WinServiceSid: WELL_KNOWN_SID_TYPE = 12;
pub const WELL_KNOWN_SID_TYPE_WinAnonymousSid: WELL_KNOWN_SID_TYPE = 13;
pub const WELL_KNOWN_SID_TYPE_WinProxySid: WELL_KNOWN_SID_TYPE = 14;
pub const WELL_KNOWN_SID_TYPE_WinEnterpriseControllersSid: WELL_KNOWN_SID_TYPE = 15;
pub const WELL_KNOWN_SID_TYPE_WinSelfSid: WELL_KNOWN_SID_TYPE = 16;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticatedUserSid: WELL_KNOWN_SID_TYPE = 17;
pub const WELL_KNOWN_SID_TYPE_WinRestrictedCodeSid: WELL_KNOWN_SID_TYPE = 18;
pub const WELL_KNOWN_SID_TYPE_WinTerminalServerSid: WELL_KNOWN_SID_TYPE = 19;
pub const WELL_KNOWN_SID_TYPE_WinRemoteLogonIdSid: WELL_KNOWN_SID_TYPE = 20;
pub const WELL_KNOWN_SID_TYPE_WinLogonIdsSid: WELL_KNOWN_SID_TYPE = 21;
pub const WELL_KNOWN_SID_TYPE_WinLocalSystemSid: WELL_KNOWN_SID_TYPE = 22;
pub const WELL_KNOWN_SID_TYPE_WinLocalServiceSid: WELL_KNOWN_SID_TYPE = 23;
pub const WELL_KNOWN_SID_TYPE_WinNetworkServiceSid: WELL_KNOWN_SID_TYPE = 24;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDomainSid: WELL_KNOWN_SID_TYPE = 25;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAdministratorsSid: WELL_KNOWN_SID_TYPE = 26;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinUsersSid: WELL_KNOWN_SID_TYPE = 27;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinGuestsSid: WELL_KNOWN_SID_TYPE = 28;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPowerUsersSid: WELL_KNOWN_SID_TYPE = 29;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAccountOperatorsSid: WELL_KNOWN_SID_TYPE = 30;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinSystemOperatorsSid: WELL_KNOWN_SID_TYPE = 31;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPrintOperatorsSid: WELL_KNOWN_SID_TYPE = 32;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinBackupOperatorsSid: WELL_KNOWN_SID_TYPE = 33;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinReplicatorSid: WELL_KNOWN_SID_TYPE = 34;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPreWindows2000CompatibleAccessSid: WELL_KNOWN_SID_TYPE = 35;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRemoteDesktopUsersSid: WELL_KNOWN_SID_TYPE = 36;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinNetworkConfigurationOperatorsSid: WELL_KNOWN_SID_TYPE = 37;
pub const WELL_KNOWN_SID_TYPE_WinAccountAdministratorSid: WELL_KNOWN_SID_TYPE = 38;
pub const WELL_KNOWN_SID_TYPE_WinAccountGuestSid: WELL_KNOWN_SID_TYPE = 39;
pub const WELL_KNOWN_SID_TYPE_WinAccountKrbtgtSid: WELL_KNOWN_SID_TYPE = 40;
pub const WELL_KNOWN_SID_TYPE_WinAccountDomainAdminsSid: WELL_KNOWN_SID_TYPE = 41;
pub const WELL_KNOWN_SID_TYPE_WinAccountDomainUsersSid: WELL_KNOWN_SID_TYPE = 42;
pub const WELL_KNOWN_SID_TYPE_WinAccountDomainGuestsSid: WELL_KNOWN_SID_TYPE = 43;
pub const WELL_KNOWN_SID_TYPE_WinAccountComputersSid: WELL_KNOWN_SID_TYPE = 44;
pub const WELL_KNOWN_SID_TYPE_WinAccountControllersSid: WELL_KNOWN_SID_TYPE = 45;
pub const WELL_KNOWN_SID_TYPE_WinAccountCertAdminsSid: WELL_KNOWN_SID_TYPE = 46;
pub const WELL_KNOWN_SID_TYPE_WinAccountSchemaAdminsSid: WELL_KNOWN_SID_TYPE = 47;
pub const WELL_KNOWN_SID_TYPE_WinAccountEnterpriseAdminsSid: WELL_KNOWN_SID_TYPE = 48;
pub const WELL_KNOWN_SID_TYPE_WinAccountPolicyAdminsSid: WELL_KNOWN_SID_TYPE = 49;
pub const WELL_KNOWN_SID_TYPE_WinAccountRasAndIasServersSid: WELL_KNOWN_SID_TYPE = 50;
pub const WELL_KNOWN_SID_TYPE_WinNTLMAuthenticationSid: WELL_KNOWN_SID_TYPE = 51;
pub const WELL_KNOWN_SID_TYPE_WinDigestAuthenticationSid: WELL_KNOWN_SID_TYPE = 52;
pub const WELL_KNOWN_SID_TYPE_WinSChannelAuthenticationSid: WELL_KNOWN_SID_TYPE = 53;
pub const WELL_KNOWN_SID_TYPE_WinThisOrganizationSid: WELL_KNOWN_SID_TYPE = 54;
pub const WELL_KNOWN_SID_TYPE_WinOtherOrganizationSid: WELL_KNOWN_SID_TYPE = 55;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinIncomingForestTrustBuildersSid: WELL_KNOWN_SID_TYPE = 56;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPerfMonitoringUsersSid: WELL_KNOWN_SID_TYPE = 57;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinPerfLoggingUsersSid: WELL_KNOWN_SID_TYPE = 58;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAuthorizationAccessSid: WELL_KNOWN_SID_TYPE = 59;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinTerminalServerLicenseServersSid: WELL_KNOWN_SID_TYPE = 60;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDCOMUsersSid: WELL_KNOWN_SID_TYPE = 61;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinIUsersSid: WELL_KNOWN_SID_TYPE = 62;
pub const WELL_KNOWN_SID_TYPE_WinIUserSid: WELL_KNOWN_SID_TYPE = 63;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinCryptoOperatorsSid: WELL_KNOWN_SID_TYPE = 64;
pub const WELL_KNOWN_SID_TYPE_WinUntrustedLabelSid: WELL_KNOWN_SID_TYPE = 65;
pub const WELL_KNOWN_SID_TYPE_WinLowLabelSid: WELL_KNOWN_SID_TYPE = 66;
pub const WELL_KNOWN_SID_TYPE_WinMediumLabelSid: WELL_KNOWN_SID_TYPE = 67;
pub const WELL_KNOWN_SID_TYPE_WinHighLabelSid: WELL_KNOWN_SID_TYPE = 68;
pub const WELL_KNOWN_SID_TYPE_WinSystemLabelSid: WELL_KNOWN_SID_TYPE = 69;
pub const WELL_KNOWN_SID_TYPE_WinWriteRestrictedCodeSid: WELL_KNOWN_SID_TYPE = 70;
pub const WELL_KNOWN_SID_TYPE_WinCreatorOwnerRightsSid: WELL_KNOWN_SID_TYPE = 71;
pub const WELL_KNOWN_SID_TYPE_WinCacheablePrincipalsGroupSid: WELL_KNOWN_SID_TYPE = 72;
pub const WELL_KNOWN_SID_TYPE_WinNonCacheablePrincipalsGroupSid: WELL_KNOWN_SID_TYPE = 73;
pub const WELL_KNOWN_SID_TYPE_WinEnterpriseReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 74;
pub const WELL_KNOWN_SID_TYPE_WinAccountReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 75;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinEventLogReadersGroup: WELL_KNOWN_SID_TYPE = 76;
pub const WELL_KNOWN_SID_TYPE_WinNewEnterpriseReadonlyControllersSid: WELL_KNOWN_SID_TYPE = 77;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinCertSvcDComAccessGroup: WELL_KNOWN_SID_TYPE = 78;
pub const WELL_KNOWN_SID_TYPE_WinMediumPlusLabelSid: WELL_KNOWN_SID_TYPE = 79;
pub const WELL_KNOWN_SID_TYPE_WinLocalLogonSid: WELL_KNOWN_SID_TYPE = 80;
pub const WELL_KNOWN_SID_TYPE_WinConsoleLogonSid: WELL_KNOWN_SID_TYPE = 81;
pub const WELL_KNOWN_SID_TYPE_WinThisOrganizationCertificateSid: WELL_KNOWN_SID_TYPE = 82;
pub const WELL_KNOWN_SID_TYPE_WinApplicationPackageAuthoritySid: WELL_KNOWN_SID_TYPE = 83;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAnyPackageSid: WELL_KNOWN_SID_TYPE = 84;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityInternetClientSid: WELL_KNOWN_SID_TYPE = 85;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityInternetClientServerSid: WELL_KNOWN_SID_TYPE = 86;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityPrivateNetworkClientServerSid: WELL_KNOWN_SID_TYPE = 87;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityPicturesLibrarySid: WELL_KNOWN_SID_TYPE = 88;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityVideosLibrarySid: WELL_KNOWN_SID_TYPE = 89;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityMusicLibrarySid: WELL_KNOWN_SID_TYPE = 90;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityDocumentsLibrarySid: WELL_KNOWN_SID_TYPE = 91;
pub const WELL_KNOWN_SID_TYPE_WinCapabilitySharedUserCertificatesSid: WELL_KNOWN_SID_TYPE = 92;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityEnterpriseAuthenticationSid: WELL_KNOWN_SID_TYPE = 93;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityRemovableStorageSid: WELL_KNOWN_SID_TYPE = 94;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSRemoteAccessServersSid: WELL_KNOWN_SID_TYPE = 95;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSEndpointServersSid: WELL_KNOWN_SID_TYPE = 96;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRDSManagementServersSid: WELL_KNOWN_SID_TYPE = 97;
pub const WELL_KNOWN_SID_TYPE_WinUserModeDriversSid: WELL_KNOWN_SID_TYPE = 98;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinHyperVAdminsSid: WELL_KNOWN_SID_TYPE = 99;
pub const WELL_KNOWN_SID_TYPE_WinAccountCloneableControllersSid: WELL_KNOWN_SID_TYPE = 100;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinAccessControlAssistanceOperatorsSid: WELL_KNOWN_SID_TYPE =
    101;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinRemoteManagementUsersSid: WELL_KNOWN_SID_TYPE = 102;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationAuthorityAssertedSid: WELL_KNOWN_SID_TYPE = 103;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationServiceAssertedSid: WELL_KNOWN_SID_TYPE = 104;
pub const WELL_KNOWN_SID_TYPE_WinLocalAccountSid: WELL_KNOWN_SID_TYPE = 105;
pub const WELL_KNOWN_SID_TYPE_WinLocalAccountAndAdministratorSid: WELL_KNOWN_SID_TYPE = 106;
pub const WELL_KNOWN_SID_TYPE_WinAccountProtectedUsersSid: WELL_KNOWN_SID_TYPE = 107;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityAppointmentsSid: WELL_KNOWN_SID_TYPE = 108;
pub const WELL_KNOWN_SID_TYPE_WinCapabilityContactsSid: WELL_KNOWN_SID_TYPE = 109;
pub const WELL_KNOWN_SID_TYPE_WinAccountDefaultSystemManagedSid: WELL_KNOWN_SID_TYPE = 110;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDefaultSystemManagedGroupSid: WELL_KNOWN_SID_TYPE = 111;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinStorageReplicaAdminsSid: WELL_KNOWN_SID_TYPE = 112;
pub const WELL_KNOWN_SID_TYPE_WinAccountKeyAdminsSid: WELL_KNOWN_SID_TYPE = 113;
pub const WELL_KNOWN_SID_TYPE_WinAccountEnterpriseKeyAdminsSid: WELL_KNOWN_SID_TYPE = 114;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyTrustSid: WELL_KNOWN_SID_TYPE = 115;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyPropertyMFASid: WELL_KNOWN_SID_TYPE = 116;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationKeyPropertyAttestationSid: WELL_KNOWN_SID_TYPE = 117;
pub const WELL_KNOWN_SID_TYPE_WinAuthenticationFreshKeyAuthSid: WELL_KNOWN_SID_TYPE = 118;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinDeviceOwnersSid: WELL_KNOWN_SID_TYPE = 119;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinUserModeHardwareOperatorsSid: WELL_KNOWN_SID_TYPE = 120;
pub const WELL_KNOWN_SID_TYPE_WinBuiltinOpenSSHUsersSid: WELL_KNOWN_SID_TYPE = 121;
pub type WELL_KNOWN_SID_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL {
    pub AclRevision: BYTE,
    pub Sbz1: BYTE,
    pub AclSize: WORD,
    pub AceCount: WORD,
    pub Sbz2: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACL"][::std::mem::size_of::<_ACL>() - 8usize];
    ["Alignment of _ACL"][::std::mem::align_of::<_ACL>() - 2usize];
    ["Offset of field: _ACL::AclRevision"][::std::mem::offset_of!(_ACL, AclRevision) - 0usize];
    ["Offset of field: _ACL::Sbz1"][::std::mem::offset_of!(_ACL, Sbz1) - 1usize];
    ["Offset of field: _ACL::AclSize"][::std::mem::offset_of!(_ACL, AclSize) - 2usize];
    ["Offset of field: _ACL::AceCount"][::std::mem::offset_of!(_ACL, AceCount) - 4usize];
    ["Offset of field: _ACL::Sbz2"][::std::mem::offset_of!(_ACL, Sbz2) - 6usize];
};
pub type ACL = _ACL;
pub type PACL = *mut ACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACE_HEADER {
    pub AceType: BYTE,
    pub AceFlags: BYTE,
    pub AceSize: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACE_HEADER"][::std::mem::size_of::<_ACE_HEADER>() - 4usize];
    ["Alignment of _ACE_HEADER"][::std::mem::align_of::<_ACE_HEADER>() - 2usize];
    ["Offset of field: _ACE_HEADER::AceType"]
        [::std::mem::offset_of!(_ACE_HEADER, AceType) - 0usize];
    ["Offset of field: _ACE_HEADER::AceFlags"]
        [::std::mem::offset_of!(_ACE_HEADER, AceFlags) - 1usize];
    ["Offset of field: _ACE_HEADER::AceSize"]
        [::std::mem::offset_of!(_ACE_HEADER, AceSize) - 2usize];
};
pub type ACE_HEADER = _ACE_HEADER;
pub type PACE_HEADER = *mut ACE_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_ALLOWED_ACE"][::std::mem::size_of::<_ACCESS_ALLOWED_ACE>() - 12usize];
    ["Alignment of _ACCESS_ALLOWED_ACE"][::std::mem::align_of::<_ACCESS_ALLOWED_ACE>() - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_ALLOWED_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_ACE, SidStart) - 8usize];
};
pub type ACCESS_ALLOWED_ACE = _ACCESS_ALLOWED_ACE;
pub type PACCESS_ALLOWED_ACE = *mut ACCESS_ALLOWED_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_DENIED_ACE"][::std::mem::size_of::<_ACCESS_DENIED_ACE>() - 12usize];
    ["Alignment of _ACCESS_DENIED_ACE"][::std::mem::align_of::<_ACCESS_DENIED_ACE>() - 4usize];
    ["Offset of field: _ACCESS_DENIED_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_DENIED_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_DENIED_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_DENIED_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_DENIED_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_DENIED_ACE, SidStart) - 8usize];
};
pub type ACCESS_DENIED_ACE = _ACCESS_DENIED_ACE;
pub type PACCESS_DENIED_ACE = *mut ACCESS_DENIED_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_AUDIT_ACE"][::std::mem::size_of::<_SYSTEM_AUDIT_ACE>() - 12usize];
    ["Alignment of _SYSTEM_AUDIT_ACE"][::std::mem::align_of::<_SYSTEM_AUDIT_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_AUDIT_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_ACE, SidStart) - 8usize];
};
pub type SYSTEM_AUDIT_ACE = _SYSTEM_AUDIT_ACE;
pub type PSYSTEM_AUDIT_ACE = *mut SYSTEM_AUDIT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_ALARM_ACE"][::std::mem::size_of::<_SYSTEM_ALARM_ACE>() - 12usize];
    ["Alignment of _SYSTEM_ALARM_ACE"][::std::mem::align_of::<_SYSTEM_ALARM_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_ALARM_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_ALARM_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_ALARM_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_ACE, SidStart) - 8usize];
};
pub type SYSTEM_ALARM_ACE = _SYSTEM_ALARM_ACE;
pub type PSYSTEM_ALARM_ACE = *mut SYSTEM_ALARM_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_RESOURCE_ATTRIBUTE_ACE"]
        [::std::mem::size_of::<_SYSTEM_RESOURCE_ATTRIBUTE_ACE>() - 12usize];
    ["Alignment of _SYSTEM_RESOURCE_ATTRIBUTE_ACE"]
        [::std::mem::align_of::<_SYSTEM_RESOURCE_ATTRIBUTE_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_RESOURCE_ATTRIBUTE_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_RESOURCE_ATTRIBUTE_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_RESOURCE_ATTRIBUTE_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_RESOURCE_ATTRIBUTE_ACE, SidStart) - 8usize];
};
pub type SYSTEM_RESOURCE_ATTRIBUTE_ACE = _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
pub type PSYSTEM_RESOURCE_ATTRIBUTE_ACE = *mut _SYSTEM_RESOURCE_ATTRIBUTE_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_SCOPED_POLICY_ID_ACE"]
        [::std::mem::size_of::<_SYSTEM_SCOPED_POLICY_ID_ACE>() - 12usize];
    ["Alignment of _SYSTEM_SCOPED_POLICY_ID_ACE"]
        [::std::mem::align_of::<_SYSTEM_SCOPED_POLICY_ID_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_SCOPED_POLICY_ID_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_SCOPED_POLICY_ID_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_SCOPED_POLICY_ID_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_SCOPED_POLICY_ID_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_SCOPED_POLICY_ID_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_SCOPED_POLICY_ID_ACE, SidStart) - 8usize];
};
pub type SYSTEM_SCOPED_POLICY_ID_ACE = _SYSTEM_SCOPED_POLICY_ID_ACE;
pub type PSYSTEM_SCOPED_POLICY_ID_ACE = *mut _SYSTEM_SCOPED_POLICY_ID_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_MANDATORY_LABEL_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_MANDATORY_LABEL_ACE"]
        [::std::mem::size_of::<_SYSTEM_MANDATORY_LABEL_ACE>() - 12usize];
    ["Alignment of _SYSTEM_MANDATORY_LABEL_ACE"]
        [::std::mem::align_of::<_SYSTEM_MANDATORY_LABEL_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_MANDATORY_LABEL_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_MANDATORY_LABEL_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_MANDATORY_LABEL_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_MANDATORY_LABEL_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_MANDATORY_LABEL_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_MANDATORY_LABEL_ACE, SidStart) - 8usize];
};
pub type SYSTEM_MANDATORY_LABEL_ACE = _SYSTEM_MANDATORY_LABEL_ACE;
pub type PSYSTEM_MANDATORY_LABEL_ACE = *mut _SYSTEM_MANDATORY_LABEL_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_PROCESS_TRUST_LABEL_ACE"]
        [::std::mem::size_of::<_SYSTEM_PROCESS_TRUST_LABEL_ACE>() - 12usize];
    ["Alignment of _SYSTEM_PROCESS_TRUST_LABEL_ACE"]
        [::std::mem::align_of::<_SYSTEM_PROCESS_TRUST_LABEL_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_PROCESS_TRUST_LABEL_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_PROCESS_TRUST_LABEL_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_PROCESS_TRUST_LABEL_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_PROCESS_TRUST_LABEL_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_PROCESS_TRUST_LABEL_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_PROCESS_TRUST_LABEL_ACE, SidStart) - 8usize];
};
pub type SYSTEM_PROCESS_TRUST_LABEL_ACE = _SYSTEM_PROCESS_TRUST_LABEL_ACE;
pub type PSYSTEM_PROCESS_TRUST_LABEL_ACE = *mut _SYSTEM_PROCESS_TRUST_LABEL_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ACCESS_FILTER_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_ACCESS_FILTER_ACE"]
        [::std::mem::size_of::<_SYSTEM_ACCESS_FILTER_ACE>() - 12usize];
    ["Alignment of _SYSTEM_ACCESS_FILTER_ACE"]
        [::std::mem::align_of::<_SYSTEM_ACCESS_FILTER_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_ACCESS_FILTER_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_ACCESS_FILTER_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_ACCESS_FILTER_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_ACCESS_FILTER_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_ACCESS_FILTER_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_ACCESS_FILTER_ACE, SidStart) - 8usize];
};
pub type SYSTEM_ACCESS_FILTER_ACE = _SYSTEM_ACCESS_FILTER_ACE;
pub type PSYSTEM_ACCESS_FILTER_ACE = *mut _SYSTEM_ACCESS_FILTER_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_ALLOWED_OBJECT_ACE"]
        [::std::mem::size_of::<_ACCESS_ALLOWED_OBJECT_ACE>() - 48usize];
    ["Alignment of _ACCESS_ALLOWED_OBJECT_ACE"]
        [::std::mem::align_of::<_ACCESS_ALLOWED_OBJECT_ACE>() - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_ALLOWED_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _ACCESS_ALLOWED_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _ACCESS_ALLOWED_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _ACCESS_ALLOWED_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_OBJECT_ACE, SidStart) - 44usize];
};
pub type ACCESS_ALLOWED_OBJECT_ACE = _ACCESS_ALLOWED_OBJECT_ACE;
pub type PACCESS_ALLOWED_OBJECT_ACE = *mut _ACCESS_ALLOWED_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_DENIED_OBJECT_ACE"]
        [::std::mem::size_of::<_ACCESS_DENIED_OBJECT_ACE>() - 48usize];
    ["Alignment of _ACCESS_DENIED_OBJECT_ACE"]
        [::std::mem::align_of::<_ACCESS_DENIED_OBJECT_ACE>() - 4usize];
    ["Offset of field: _ACCESS_DENIED_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_DENIED_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_DENIED_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_DENIED_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_DENIED_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_ACCESS_DENIED_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _ACCESS_DENIED_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_ACCESS_DENIED_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _ACCESS_DENIED_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_ACCESS_DENIED_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _ACCESS_DENIED_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_DENIED_OBJECT_ACE, SidStart) - 44usize];
};
pub type ACCESS_DENIED_OBJECT_ACE = _ACCESS_DENIED_OBJECT_ACE;
pub type PACCESS_DENIED_OBJECT_ACE = *mut _ACCESS_DENIED_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_AUDIT_OBJECT_ACE"]
        [::std::mem::size_of::<_SYSTEM_AUDIT_OBJECT_ACE>() - 48usize];
    ["Alignment of _SYSTEM_AUDIT_OBJECT_ACE"]
        [::std::mem::align_of::<_SYSTEM_AUDIT_OBJECT_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_AUDIT_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _SYSTEM_AUDIT_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _SYSTEM_AUDIT_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _SYSTEM_AUDIT_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_OBJECT_ACE, SidStart) - 44usize];
};
pub type SYSTEM_AUDIT_OBJECT_ACE = _SYSTEM_AUDIT_OBJECT_ACE;
pub type PSYSTEM_AUDIT_OBJECT_ACE = *mut _SYSTEM_AUDIT_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_ALARM_OBJECT_ACE"]
        [::std::mem::size_of::<_SYSTEM_ALARM_OBJECT_ACE>() - 48usize];
    ["Alignment of _SYSTEM_ALARM_OBJECT_ACE"]
        [::std::mem::align_of::<_SYSTEM_ALARM_OBJECT_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_ALARM_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_ALARM_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_ALARM_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _SYSTEM_ALARM_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _SYSTEM_ALARM_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _SYSTEM_ALARM_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_OBJECT_ACE, SidStart) - 44usize];
};
pub type SYSTEM_ALARM_OBJECT_ACE = _SYSTEM_ALARM_OBJECT_ACE;
pub type PSYSTEM_ALARM_OBJECT_ACE = *mut _SYSTEM_ALARM_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_CALLBACK_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_ALLOWED_CALLBACK_ACE"]
        [::std::mem::size_of::<_ACCESS_ALLOWED_CALLBACK_ACE>() - 12usize];
    ["Alignment of _ACCESS_ALLOWED_CALLBACK_ACE"]
        [::std::mem::align_of::<_ACCESS_ALLOWED_CALLBACK_ACE>() - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_ACE, SidStart) - 8usize];
};
pub type ACCESS_ALLOWED_CALLBACK_ACE = _ACCESS_ALLOWED_CALLBACK_ACE;
pub type PACCESS_ALLOWED_CALLBACK_ACE = *mut _ACCESS_ALLOWED_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_CALLBACK_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_DENIED_CALLBACK_ACE"]
        [::std::mem::size_of::<_ACCESS_DENIED_CALLBACK_ACE>() - 12usize];
    ["Alignment of _ACCESS_DENIED_CALLBACK_ACE"]
        [::std::mem::align_of::<_ACCESS_DENIED_CALLBACK_ACE>() - 4usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_ACE, SidStart) - 8usize];
};
pub type ACCESS_DENIED_CALLBACK_ACE = _ACCESS_DENIED_CALLBACK_ACE;
pub type PACCESS_DENIED_CALLBACK_ACE = *mut _ACCESS_DENIED_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_CALLBACK_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_AUDIT_CALLBACK_ACE"]
        [::std::mem::size_of::<_SYSTEM_AUDIT_CALLBACK_ACE>() - 12usize];
    ["Alignment of _SYSTEM_AUDIT_CALLBACK_ACE"]
        [::std::mem::align_of::<_SYSTEM_AUDIT_CALLBACK_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_ACE, SidStart) - 8usize];
};
pub type SYSTEM_AUDIT_CALLBACK_ACE = _SYSTEM_AUDIT_CALLBACK_ACE;
pub type PSYSTEM_AUDIT_CALLBACK_ACE = *mut _SYSTEM_AUDIT_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_CALLBACK_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_ALARM_CALLBACK_ACE"]
        [::std::mem::size_of::<_SYSTEM_ALARM_CALLBACK_ACE>() - 12usize];
    ["Alignment of _SYSTEM_ALARM_CALLBACK_ACE"]
        [::std::mem::align_of::<_SYSTEM_ALARM_CALLBACK_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_ACE, SidStart) - 8usize];
};
pub type SYSTEM_ALARM_CALLBACK_ACE = _SYSTEM_ALARM_CALLBACK_ACE;
pub type PSYSTEM_ALARM_CALLBACK_ACE = *mut _SYSTEM_ALARM_CALLBACK_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE"]
        [::std::mem::size_of::<_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE>() - 48usize];
    ["Alignment of _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE"]
        [::std::mem::align_of::<_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE>() - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE::InheritedObjectType"][::std::mem::offset_of!(
        _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE,
        InheritedObjectType
    ) - 28usize];
    ["Offset of field: _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, SidStart) - 44usize];
};
pub type ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
pub type PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = *mut _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_DENIED_CALLBACK_OBJECT_ACE"]
        [::std::mem::size_of::<_ACCESS_DENIED_CALLBACK_OBJECT_ACE>() - 48usize];
    ["Alignment of _ACCESS_DENIED_CALLBACK_OBJECT_ACE"]
        [::std::mem::align_of::<_ACCESS_DENIED_CALLBACK_OBJECT_ACE>() - 4usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _ACCESS_DENIED_CALLBACK_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_ACCESS_DENIED_CALLBACK_OBJECT_ACE, SidStart) - 44usize];
};
pub type ACCESS_DENIED_CALLBACK_OBJECT_ACE = _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
pub type PACCESS_DENIED_CALLBACK_OBJECT_ACE = *mut _ACCESS_DENIED_CALLBACK_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE"]
        [::std::mem::size_of::<_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE>() - 48usize];
    ["Alignment of _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE"]
        [::std::mem::align_of::<_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, SidStart) - 44usize];
};
pub type SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
pub type PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = *mut _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    pub Header: ACE_HEADER,
    pub Mask: ACCESS_MASK,
    pub Flags: DWORD,
    pub ObjectType: GUID,
    pub InheritedObjectType: GUID,
    pub SidStart: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_ALARM_CALLBACK_OBJECT_ACE"]
        [::std::mem::size_of::<_SYSTEM_ALARM_CALLBACK_OBJECT_ACE>() - 48usize];
    ["Alignment of _SYSTEM_ALARM_CALLBACK_OBJECT_ACE"]
        [::std::mem::align_of::<_SYSTEM_ALARM_CALLBACK_OBJECT_ACE>() - 4usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_OBJECT_ACE::Header"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE, Header) - 0usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_OBJECT_ACE::Mask"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE, Mask) - 4usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_OBJECT_ACE::Flags"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE, Flags) - 8usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_OBJECT_ACE::ObjectType"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE, ObjectType) - 12usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_OBJECT_ACE::InheritedObjectType"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE, InheritedObjectType) - 28usize];
    ["Offset of field: _SYSTEM_ALARM_CALLBACK_OBJECT_ACE::SidStart"]
        [::std::mem::offset_of!(_SYSTEM_ALARM_CALLBACK_OBJECT_ACE, SidStart) - 44usize];
};
pub type SYSTEM_ALARM_CALLBACK_OBJECT_ACE = _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub type PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = *mut _SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub const _ACL_INFORMATION_CLASS_AclRevisionInformation: _ACL_INFORMATION_CLASS = 1;
pub const _ACL_INFORMATION_CLASS_AclSizeInformation: _ACL_INFORMATION_CLASS = 2;
pub type _ACL_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_ACL_INFORMATION_CLASS as ACL_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL_REVISION_INFORMATION {
    pub AclRevision: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACL_REVISION_INFORMATION"]
        [::std::mem::size_of::<_ACL_REVISION_INFORMATION>() - 4usize];
    ["Alignment of _ACL_REVISION_INFORMATION"]
        [::std::mem::align_of::<_ACL_REVISION_INFORMATION>() - 4usize];
    ["Offset of field: _ACL_REVISION_INFORMATION::AclRevision"]
        [::std::mem::offset_of!(_ACL_REVISION_INFORMATION, AclRevision) - 0usize];
};
pub type ACL_REVISION_INFORMATION = _ACL_REVISION_INFORMATION;
pub type PACL_REVISION_INFORMATION = *mut ACL_REVISION_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACL_SIZE_INFORMATION {
    pub AceCount: DWORD,
    pub AclBytesInUse: DWORD,
    pub AclBytesFree: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACL_SIZE_INFORMATION"][::std::mem::size_of::<_ACL_SIZE_INFORMATION>() - 12usize];
    ["Alignment of _ACL_SIZE_INFORMATION"]
        [::std::mem::align_of::<_ACL_SIZE_INFORMATION>() - 4usize];
    ["Offset of field: _ACL_SIZE_INFORMATION::AceCount"]
        [::std::mem::offset_of!(_ACL_SIZE_INFORMATION, AceCount) - 0usize];
    ["Offset of field: _ACL_SIZE_INFORMATION::AclBytesInUse"]
        [::std::mem::offset_of!(_ACL_SIZE_INFORMATION, AclBytesInUse) - 4usize];
    ["Offset of field: _ACL_SIZE_INFORMATION::AclBytesFree"]
        [::std::mem::offset_of!(_ACL_SIZE_INFORMATION, AclBytesFree) - 8usize];
};
pub type ACL_SIZE_INFORMATION = _ACL_SIZE_INFORMATION;
pub type PACL_SIZE_INFORMATION = *mut ACL_SIZE_INFORMATION;
pub type SECURITY_DESCRIPTOR_CONTROL = WORD;
pub type PSECURITY_DESCRIPTOR_CONTROL = *mut WORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_DESCRIPTOR_RELATIVE {
    pub Revision: BYTE,
    pub Sbz1: BYTE,
    pub Control: SECURITY_DESCRIPTOR_CONTROL,
    pub Owner: DWORD,
    pub Group: DWORD,
    pub Sacl: DWORD,
    pub Dacl: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_DESCRIPTOR_RELATIVE"]
        [::std::mem::size_of::<_SECURITY_DESCRIPTOR_RELATIVE>() - 20usize];
    ["Alignment of _SECURITY_DESCRIPTOR_RELATIVE"]
        [::std::mem::align_of::<_SECURITY_DESCRIPTOR_RELATIVE>() - 4usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Revision"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Revision) - 0usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Sbz1"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Sbz1) - 1usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Control"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Control) - 2usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Owner"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Owner) - 4usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Group"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Group) - 8usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Sacl"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Sacl) - 12usize];
    ["Offset of field: _SECURITY_DESCRIPTOR_RELATIVE::Dacl"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR_RELATIVE, Dacl) - 16usize];
};
pub type SECURITY_DESCRIPTOR_RELATIVE = _SECURITY_DESCRIPTOR_RELATIVE;
pub type PISECURITY_DESCRIPTOR_RELATIVE = *mut _SECURITY_DESCRIPTOR_RELATIVE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_DESCRIPTOR {
    pub Revision: BYTE,
    pub Sbz1: BYTE,
    pub Control: SECURITY_DESCRIPTOR_CONTROL,
    pub Owner: PSID,
    pub Group: PSID,
    pub Sacl: PACL,
    pub Dacl: PACL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_DESCRIPTOR"][::std::mem::size_of::<_SECURITY_DESCRIPTOR>() - 40usize];
    ["Alignment of _SECURITY_DESCRIPTOR"][::std::mem::align_of::<_SECURITY_DESCRIPTOR>() - 8usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Revision"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Revision) - 0usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Sbz1"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Sbz1) - 1usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Control"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Control) - 2usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Owner"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Owner) - 8usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Group"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Group) - 16usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Sacl"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Sacl) - 24usize];
    ["Offset of field: _SECURITY_DESCRIPTOR::Dacl"]
        [::std::mem::offset_of!(_SECURITY_DESCRIPTOR, Dacl) - 32usize];
};
pub type SECURITY_DESCRIPTOR = _SECURITY_DESCRIPTOR;
pub type PISECURITY_DESCRIPTOR = *mut _SECURITY_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_OBJECT_AI_PARAMS {
    pub Size: DWORD,
    pub ConstraintMask: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_OBJECT_AI_PARAMS"]
        [::std::mem::size_of::<_SECURITY_OBJECT_AI_PARAMS>() - 8usize];
    ["Alignment of _SECURITY_OBJECT_AI_PARAMS"]
        [::std::mem::align_of::<_SECURITY_OBJECT_AI_PARAMS>() - 4usize];
    ["Offset of field: _SECURITY_OBJECT_AI_PARAMS::Size"]
        [::std::mem::offset_of!(_SECURITY_OBJECT_AI_PARAMS, Size) - 0usize];
    ["Offset of field: _SECURITY_OBJECT_AI_PARAMS::ConstraintMask"]
        [::std::mem::offset_of!(_SECURITY_OBJECT_AI_PARAMS, ConstraintMask) - 4usize];
};
pub type SECURITY_OBJECT_AI_PARAMS = _SECURITY_OBJECT_AI_PARAMS;
pub type PSECURITY_OBJECT_AI_PARAMS = *mut _SECURITY_OBJECT_AI_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OBJECT_TYPE_LIST {
    pub Level: WORD,
    pub Sbz: WORD,
    pub ObjectType: *mut GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OBJECT_TYPE_LIST"][::std::mem::size_of::<_OBJECT_TYPE_LIST>() - 16usize];
    ["Alignment of _OBJECT_TYPE_LIST"][::std::mem::align_of::<_OBJECT_TYPE_LIST>() - 8usize];
    ["Offset of field: _OBJECT_TYPE_LIST::Level"]
        [::std::mem::offset_of!(_OBJECT_TYPE_LIST, Level) - 0usize];
    ["Offset of field: _OBJECT_TYPE_LIST::Sbz"]
        [::std::mem::offset_of!(_OBJECT_TYPE_LIST, Sbz) - 2usize];
    ["Offset of field: _OBJECT_TYPE_LIST::ObjectType"]
        [::std::mem::offset_of!(_OBJECT_TYPE_LIST, ObjectType) - 8usize];
};
pub type OBJECT_TYPE_LIST = _OBJECT_TYPE_LIST;
pub type POBJECT_TYPE_LIST = *mut _OBJECT_TYPE_LIST;
pub const _AUDIT_EVENT_TYPE_AuditEventObjectAccess: _AUDIT_EVENT_TYPE = 0;
pub const _AUDIT_EVENT_TYPE_AuditEventDirectoryServiceAccess: _AUDIT_EVENT_TYPE = 1;
pub type _AUDIT_EVENT_TYPE = ::std::os::raw::c_int;
pub use self::_AUDIT_EVENT_TYPE as AUDIT_EVENT_TYPE;
pub type PAUDIT_EVENT_TYPE = *mut _AUDIT_EVENT_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PRIVILEGE_SET {
    pub PrivilegeCount: DWORD,
    pub Control: DWORD,
    pub Privilege: [LUID_AND_ATTRIBUTES; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PRIVILEGE_SET"][::std::mem::size_of::<_PRIVILEGE_SET>() - 20usize];
    ["Alignment of _PRIVILEGE_SET"][::std::mem::align_of::<_PRIVILEGE_SET>() - 4usize];
    ["Offset of field: _PRIVILEGE_SET::PrivilegeCount"]
        [::std::mem::offset_of!(_PRIVILEGE_SET, PrivilegeCount) - 0usize];
    ["Offset of field: _PRIVILEGE_SET::Control"]
        [::std::mem::offset_of!(_PRIVILEGE_SET, Control) - 4usize];
    ["Offset of field: _PRIVILEGE_SET::Privilege"]
        [::std::mem::offset_of!(_PRIVILEGE_SET, Privilege) - 8usize];
};
pub type PRIVILEGE_SET = _PRIVILEGE_SET;
pub type PPRIVILEGE_SET = *mut _PRIVILEGE_SET;
pub const _ACCESS_REASON_TYPE_AccessReasonNone: _ACCESS_REASON_TYPE = 0;
pub const _ACCESS_REASON_TYPE_AccessReasonAllowedAce: _ACCESS_REASON_TYPE = 65536;
pub const _ACCESS_REASON_TYPE_AccessReasonDeniedAce: _ACCESS_REASON_TYPE = 131072;
pub const _ACCESS_REASON_TYPE_AccessReasonAllowedParentAce: _ACCESS_REASON_TYPE = 196608;
pub const _ACCESS_REASON_TYPE_AccessReasonDeniedParentAce: _ACCESS_REASON_TYPE = 262144;
pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedByCape: _ACCESS_REASON_TYPE = 327680;
pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedByParentCape: _ACCESS_REASON_TYPE = 393216;
pub const _ACCESS_REASON_TYPE_AccessReasonNotGrantedToAppContainer: _ACCESS_REASON_TYPE = 458752;
pub const _ACCESS_REASON_TYPE_AccessReasonMissingPrivilege: _ACCESS_REASON_TYPE = 1048576;
pub const _ACCESS_REASON_TYPE_AccessReasonFromPrivilege: _ACCESS_REASON_TYPE = 2097152;
pub const _ACCESS_REASON_TYPE_AccessReasonIntegrityLevel: _ACCESS_REASON_TYPE = 3145728;
pub const _ACCESS_REASON_TYPE_AccessReasonOwnership: _ACCESS_REASON_TYPE = 4194304;
pub const _ACCESS_REASON_TYPE_AccessReasonNullDacl: _ACCESS_REASON_TYPE = 5242880;
pub const _ACCESS_REASON_TYPE_AccessReasonEmptyDacl: _ACCESS_REASON_TYPE = 6291456;
pub const _ACCESS_REASON_TYPE_AccessReasonNoSD: _ACCESS_REASON_TYPE = 7340032;
pub const _ACCESS_REASON_TYPE_AccessReasonNoGrant: _ACCESS_REASON_TYPE = 8388608;
pub const _ACCESS_REASON_TYPE_AccessReasonTrustLabel: _ACCESS_REASON_TYPE = 9437184;
pub const _ACCESS_REASON_TYPE_AccessReasonFilterAce: _ACCESS_REASON_TYPE = 10485760;
pub type _ACCESS_REASON_TYPE = ::std::os::raw::c_int;
pub use self::_ACCESS_REASON_TYPE as ACCESS_REASON_TYPE;
pub type ACCESS_REASON = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACCESS_REASONS {
    pub Data: [ACCESS_REASON; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACCESS_REASONS"][::std::mem::size_of::<_ACCESS_REASONS>() - 128usize];
    ["Alignment of _ACCESS_REASONS"][::std::mem::align_of::<_ACCESS_REASONS>() - 4usize];
    ["Offset of field: _ACCESS_REASONS::Data"]
        [::std::mem::offset_of!(_ACCESS_REASONS, Data) - 0usize];
};
pub type ACCESS_REASONS = _ACCESS_REASONS;
pub type PACCESS_REASONS = *mut _ACCESS_REASONS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_SECURITY_DESCRIPTOR {
    pub Size: DWORD,
    pub Flags: DWORD,
    pub SecurityDescriptor: PSECURITY_DESCRIPTOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_SECURITY_DESCRIPTOR"][::std::mem::size_of::<_SE_SECURITY_DESCRIPTOR>() - 16usize];
    ["Alignment of _SE_SECURITY_DESCRIPTOR"]
        [::std::mem::align_of::<_SE_SECURITY_DESCRIPTOR>() - 8usize];
    ["Offset of field: _SE_SECURITY_DESCRIPTOR::Size"]
        [::std::mem::offset_of!(_SE_SECURITY_DESCRIPTOR, Size) - 0usize];
    ["Offset of field: _SE_SECURITY_DESCRIPTOR::Flags"]
        [::std::mem::offset_of!(_SE_SECURITY_DESCRIPTOR, Flags) - 4usize];
    ["Offset of field: _SE_SECURITY_DESCRIPTOR::SecurityDescriptor"]
        [::std::mem::offset_of!(_SE_SECURITY_DESCRIPTOR, SecurityDescriptor) - 8usize];
};
pub type SE_SECURITY_DESCRIPTOR = _SE_SECURITY_DESCRIPTOR;
pub type PSE_SECURITY_DESCRIPTOR = *mut _SE_SECURITY_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_ACCESS_REQUEST {
    pub Size: DWORD,
    pub SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR,
    pub DesiredAccess: ACCESS_MASK,
    pub PreviouslyGrantedAccess: ACCESS_MASK,
    pub PrincipalSelfSid: PSID,
    pub GenericMapping: PGENERIC_MAPPING,
    pub ObjectTypeListCount: DWORD,
    pub ObjectTypeList: POBJECT_TYPE_LIST,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_ACCESS_REQUEST"][::std::mem::size_of::<_SE_ACCESS_REQUEST>() - 56usize];
    ["Alignment of _SE_ACCESS_REQUEST"][::std::mem::align_of::<_SE_ACCESS_REQUEST>() - 8usize];
    ["Offset of field: _SE_ACCESS_REQUEST::Size"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, Size) - 0usize];
    ["Offset of field: _SE_ACCESS_REQUEST::SeSecurityDescriptor"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, SeSecurityDescriptor) - 8usize];
    ["Offset of field: _SE_ACCESS_REQUEST::DesiredAccess"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, DesiredAccess) - 16usize];
    ["Offset of field: _SE_ACCESS_REQUEST::PreviouslyGrantedAccess"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, PreviouslyGrantedAccess) - 20usize];
    ["Offset of field: _SE_ACCESS_REQUEST::PrincipalSelfSid"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, PrincipalSelfSid) - 24usize];
    ["Offset of field: _SE_ACCESS_REQUEST::GenericMapping"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, GenericMapping) - 32usize];
    ["Offset of field: _SE_ACCESS_REQUEST::ObjectTypeListCount"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, ObjectTypeListCount) - 40usize];
    ["Offset of field: _SE_ACCESS_REQUEST::ObjectTypeList"]
        [::std::mem::offset_of!(_SE_ACCESS_REQUEST, ObjectTypeList) - 48usize];
};
pub type SE_ACCESS_REQUEST = _SE_ACCESS_REQUEST;
pub type PSE_ACCESS_REQUEST = *mut _SE_ACCESS_REQUEST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_ACCESS_REPLY {
    pub Size: DWORD,
    pub ResultListCount: DWORD,
    pub GrantedAccess: PACCESS_MASK,
    pub AccessStatus: PDWORD,
    pub AccessReason: PACCESS_REASONS,
    pub Privileges: *mut PPRIVILEGE_SET,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_ACCESS_REPLY"][::std::mem::size_of::<_SE_ACCESS_REPLY>() - 40usize];
    ["Alignment of _SE_ACCESS_REPLY"][::std::mem::align_of::<_SE_ACCESS_REPLY>() - 8usize];
    ["Offset of field: _SE_ACCESS_REPLY::Size"]
        [::std::mem::offset_of!(_SE_ACCESS_REPLY, Size) - 0usize];
    ["Offset of field: _SE_ACCESS_REPLY::ResultListCount"]
        [::std::mem::offset_of!(_SE_ACCESS_REPLY, ResultListCount) - 4usize];
    ["Offset of field: _SE_ACCESS_REPLY::GrantedAccess"]
        [::std::mem::offset_of!(_SE_ACCESS_REPLY, GrantedAccess) - 8usize];
    ["Offset of field: _SE_ACCESS_REPLY::AccessStatus"]
        [::std::mem::offset_of!(_SE_ACCESS_REPLY, AccessStatus) - 16usize];
    ["Offset of field: _SE_ACCESS_REPLY::AccessReason"]
        [::std::mem::offset_of!(_SE_ACCESS_REPLY, AccessReason) - 24usize];
    ["Offset of field: _SE_ACCESS_REPLY::Privileges"]
        [::std::mem::offset_of!(_SE_ACCESS_REPLY, Privileges) - 32usize];
};
pub type SE_ACCESS_REPLY = _SE_ACCESS_REPLY;
pub type PSE_ACCESS_REPLY = *mut _SE_ACCESS_REPLY;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityAnonymous: _SECURITY_IMPERSONATION_LEVEL = 0;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityIdentification: _SECURITY_IMPERSONATION_LEVEL = 1;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityImpersonation: _SECURITY_IMPERSONATION_LEVEL = 2;
pub const _SECURITY_IMPERSONATION_LEVEL_SecurityDelegation: _SECURITY_IMPERSONATION_LEVEL = 3;
pub type _SECURITY_IMPERSONATION_LEVEL = ::std::os::raw::c_int;
pub use self::_SECURITY_IMPERSONATION_LEVEL as SECURITY_IMPERSONATION_LEVEL;
pub type PSECURITY_IMPERSONATION_LEVEL = *mut _SECURITY_IMPERSONATION_LEVEL;
pub const _TOKEN_TYPE_TokenPrimary: _TOKEN_TYPE = 1;
pub const _TOKEN_TYPE_TokenImpersonation: _TOKEN_TYPE = 2;
pub type _TOKEN_TYPE = ::std::os::raw::c_int;
pub use self::_TOKEN_TYPE as TOKEN_TYPE;
pub type PTOKEN_TYPE = *mut TOKEN_TYPE;
pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeDefault: _TOKEN_ELEVATION_TYPE = 1;
pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeFull: _TOKEN_ELEVATION_TYPE = 2;
pub const _TOKEN_ELEVATION_TYPE_TokenElevationTypeLimited: _TOKEN_ELEVATION_TYPE = 3;
pub type _TOKEN_ELEVATION_TYPE = ::std::os::raw::c_int;
pub use self::_TOKEN_ELEVATION_TYPE as TOKEN_ELEVATION_TYPE;
pub type PTOKEN_ELEVATION_TYPE = *mut _TOKEN_ELEVATION_TYPE;
pub const _TOKEN_INFORMATION_CLASS_TokenUser: _TOKEN_INFORMATION_CLASS = 1;
pub const _TOKEN_INFORMATION_CLASS_TokenGroups: _TOKEN_INFORMATION_CLASS = 2;
pub const _TOKEN_INFORMATION_CLASS_TokenPrivileges: _TOKEN_INFORMATION_CLASS = 3;
pub const _TOKEN_INFORMATION_CLASS_TokenOwner: _TOKEN_INFORMATION_CLASS = 4;
pub const _TOKEN_INFORMATION_CLASS_TokenPrimaryGroup: _TOKEN_INFORMATION_CLASS = 5;
pub const _TOKEN_INFORMATION_CLASS_TokenDefaultDacl: _TOKEN_INFORMATION_CLASS = 6;
pub const _TOKEN_INFORMATION_CLASS_TokenSource: _TOKEN_INFORMATION_CLASS = 7;
pub const _TOKEN_INFORMATION_CLASS_TokenType: _TOKEN_INFORMATION_CLASS = 8;
pub const _TOKEN_INFORMATION_CLASS_TokenImpersonationLevel: _TOKEN_INFORMATION_CLASS = 9;
pub const _TOKEN_INFORMATION_CLASS_TokenStatistics: _TOKEN_INFORMATION_CLASS = 10;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedSids: _TOKEN_INFORMATION_CLASS = 11;
pub const _TOKEN_INFORMATION_CLASS_TokenSessionId: _TOKEN_INFORMATION_CLASS = 12;
pub const _TOKEN_INFORMATION_CLASS_TokenGroupsAndPrivileges: _TOKEN_INFORMATION_CLASS = 13;
pub const _TOKEN_INFORMATION_CLASS_TokenSessionReference: _TOKEN_INFORMATION_CLASS = 14;
pub const _TOKEN_INFORMATION_CLASS_TokenSandBoxInert: _TOKEN_INFORMATION_CLASS = 15;
pub const _TOKEN_INFORMATION_CLASS_TokenAuditPolicy: _TOKEN_INFORMATION_CLASS = 16;
pub const _TOKEN_INFORMATION_CLASS_TokenOrigin: _TOKEN_INFORMATION_CLASS = 17;
pub const _TOKEN_INFORMATION_CLASS_TokenElevationType: _TOKEN_INFORMATION_CLASS = 18;
pub const _TOKEN_INFORMATION_CLASS_TokenLinkedToken: _TOKEN_INFORMATION_CLASS = 19;
pub const _TOKEN_INFORMATION_CLASS_TokenElevation: _TOKEN_INFORMATION_CLASS = 20;
pub const _TOKEN_INFORMATION_CLASS_TokenHasRestrictions: _TOKEN_INFORMATION_CLASS = 21;
pub const _TOKEN_INFORMATION_CLASS_TokenAccessInformation: _TOKEN_INFORMATION_CLASS = 22;
pub const _TOKEN_INFORMATION_CLASS_TokenVirtualizationAllowed: _TOKEN_INFORMATION_CLASS = 23;
pub const _TOKEN_INFORMATION_CLASS_TokenVirtualizationEnabled: _TOKEN_INFORMATION_CLASS = 24;
pub const _TOKEN_INFORMATION_CLASS_TokenIntegrityLevel: _TOKEN_INFORMATION_CLASS = 25;
pub const _TOKEN_INFORMATION_CLASS_TokenUIAccess: _TOKEN_INFORMATION_CLASS = 26;
pub const _TOKEN_INFORMATION_CLASS_TokenMandatoryPolicy: _TOKEN_INFORMATION_CLASS = 27;
pub const _TOKEN_INFORMATION_CLASS_TokenLogonSid: _TOKEN_INFORMATION_CLASS = 28;
pub const _TOKEN_INFORMATION_CLASS_TokenIsAppContainer: _TOKEN_INFORMATION_CLASS = 29;
pub const _TOKEN_INFORMATION_CLASS_TokenCapabilities: _TOKEN_INFORMATION_CLASS = 30;
pub const _TOKEN_INFORMATION_CLASS_TokenAppContainerSid: _TOKEN_INFORMATION_CLASS = 31;
pub const _TOKEN_INFORMATION_CLASS_TokenAppContainerNumber: _TOKEN_INFORMATION_CLASS = 32;
pub const _TOKEN_INFORMATION_CLASS_TokenUserClaimAttributes: _TOKEN_INFORMATION_CLASS = 33;
pub const _TOKEN_INFORMATION_CLASS_TokenDeviceClaimAttributes: _TOKEN_INFORMATION_CLASS = 34;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedUserClaimAttributes: _TOKEN_INFORMATION_CLASS =
    35;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedDeviceClaimAttributes: _TOKEN_INFORMATION_CLASS =
    36;
pub const _TOKEN_INFORMATION_CLASS_TokenDeviceGroups: _TOKEN_INFORMATION_CLASS = 37;
pub const _TOKEN_INFORMATION_CLASS_TokenRestrictedDeviceGroups: _TOKEN_INFORMATION_CLASS = 38;
pub const _TOKEN_INFORMATION_CLASS_TokenSecurityAttributes: _TOKEN_INFORMATION_CLASS = 39;
pub const _TOKEN_INFORMATION_CLASS_TokenIsRestricted: _TOKEN_INFORMATION_CLASS = 40;
pub const _TOKEN_INFORMATION_CLASS_TokenProcessTrustLevel: _TOKEN_INFORMATION_CLASS = 41;
pub const _TOKEN_INFORMATION_CLASS_TokenPrivateNameSpace: _TOKEN_INFORMATION_CLASS = 42;
pub const _TOKEN_INFORMATION_CLASS_TokenSingletonAttributes: _TOKEN_INFORMATION_CLASS = 43;
pub const _TOKEN_INFORMATION_CLASS_TokenBnoIsolation: _TOKEN_INFORMATION_CLASS = 44;
pub const _TOKEN_INFORMATION_CLASS_TokenChildProcessFlags: _TOKEN_INFORMATION_CLASS = 45;
pub const _TOKEN_INFORMATION_CLASS_TokenIsLessPrivilegedAppContainer: _TOKEN_INFORMATION_CLASS = 46;
pub const _TOKEN_INFORMATION_CLASS_TokenIsSandboxed: _TOKEN_INFORMATION_CLASS = 47;
pub const _TOKEN_INFORMATION_CLASS_TokenIsAppSilo: _TOKEN_INFORMATION_CLASS = 48;
pub const _TOKEN_INFORMATION_CLASS_TokenLoggingInformation: _TOKEN_INFORMATION_CLASS = 49;
pub const _TOKEN_INFORMATION_CLASS_MaxTokenInfoClass: _TOKEN_INFORMATION_CLASS = 50;
pub type _TOKEN_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_TOKEN_INFORMATION_CLASS as TOKEN_INFORMATION_CLASS;
pub type PTOKEN_INFORMATION_CLASS = *mut _TOKEN_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_USER {
    pub User: SID_AND_ATTRIBUTES,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_USER"][::std::mem::size_of::<_TOKEN_USER>() - 16usize];
    ["Alignment of _TOKEN_USER"][::std::mem::align_of::<_TOKEN_USER>() - 8usize];
    ["Offset of field: _TOKEN_USER::User"][::std::mem::offset_of!(_TOKEN_USER, User) - 0usize];
};
pub type TOKEN_USER = _TOKEN_USER;
pub type PTOKEN_USER = *mut _TOKEN_USER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SE_TOKEN_USER {
    pub __bindgen_anon_1: _SE_TOKEN_USER__bindgen_ty_1,
    pub __bindgen_anon_2: _SE_TOKEN_USER__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SE_TOKEN_USER__bindgen_ty_1 {
    pub TokenUser: TOKEN_USER,
    pub User: SID_AND_ATTRIBUTES,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_TOKEN_USER__bindgen_ty_1"]
        [::std::mem::size_of::<_SE_TOKEN_USER__bindgen_ty_1>() - 16usize];
    ["Alignment of _SE_TOKEN_USER__bindgen_ty_1"]
        [::std::mem::align_of::<_SE_TOKEN_USER__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SE_TOKEN_USER__bindgen_ty_1::TokenUser"]
        [::std::mem::offset_of!(_SE_TOKEN_USER__bindgen_ty_1, TokenUser) - 0usize];
    ["Offset of field: _SE_TOKEN_USER__bindgen_ty_1::User"]
        [::std::mem::offset_of!(_SE_TOKEN_USER__bindgen_ty_1, User) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SE_TOKEN_USER__bindgen_ty_2 {
    pub Sid: SID,
    pub Buffer: [BYTE; 68usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_TOKEN_USER__bindgen_ty_2"]
        [::std::mem::size_of::<_SE_TOKEN_USER__bindgen_ty_2>() - 68usize];
    ["Alignment of _SE_TOKEN_USER__bindgen_ty_2"]
        [::std::mem::align_of::<_SE_TOKEN_USER__bindgen_ty_2>() - 4usize];
    ["Offset of field: _SE_TOKEN_USER__bindgen_ty_2::Sid"]
        [::std::mem::offset_of!(_SE_TOKEN_USER__bindgen_ty_2, Sid) - 0usize];
    ["Offset of field: _SE_TOKEN_USER__bindgen_ty_2::Buffer"]
        [::std::mem::offset_of!(_SE_TOKEN_USER__bindgen_ty_2, Buffer) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_TOKEN_USER"][::std::mem::size_of::<_SE_TOKEN_USER>() - 88usize];
    ["Alignment of _SE_TOKEN_USER"][::std::mem::align_of::<_SE_TOKEN_USER>() - 8usize];
};
pub type SE_TOKEN_USER = _SE_TOKEN_USER;
pub type PSE_TOKEN_USER = _SE_TOKEN_USER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_GROUPS {
    pub GroupCount: DWORD,
    pub Groups: [SID_AND_ATTRIBUTES; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_GROUPS"][::std::mem::size_of::<_TOKEN_GROUPS>() - 24usize];
    ["Alignment of _TOKEN_GROUPS"][::std::mem::align_of::<_TOKEN_GROUPS>() - 8usize];
    ["Offset of field: _TOKEN_GROUPS::GroupCount"]
        [::std::mem::offset_of!(_TOKEN_GROUPS, GroupCount) - 0usize];
    ["Offset of field: _TOKEN_GROUPS::Groups"]
        [::std::mem::offset_of!(_TOKEN_GROUPS, Groups) - 8usize];
};
pub type TOKEN_GROUPS = _TOKEN_GROUPS;
pub type PTOKEN_GROUPS = *mut _TOKEN_GROUPS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_PRIVILEGES {
    pub PrivilegeCount: DWORD,
    pub Privileges: [LUID_AND_ATTRIBUTES; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_PRIVILEGES"][::std::mem::size_of::<_TOKEN_PRIVILEGES>() - 16usize];
    ["Alignment of _TOKEN_PRIVILEGES"][::std::mem::align_of::<_TOKEN_PRIVILEGES>() - 4usize];
    ["Offset of field: _TOKEN_PRIVILEGES::PrivilegeCount"]
        [::std::mem::offset_of!(_TOKEN_PRIVILEGES, PrivilegeCount) - 0usize];
    ["Offset of field: _TOKEN_PRIVILEGES::Privileges"]
        [::std::mem::offset_of!(_TOKEN_PRIVILEGES, Privileges) - 4usize];
};
pub type TOKEN_PRIVILEGES = _TOKEN_PRIVILEGES;
pub type PTOKEN_PRIVILEGES = *mut _TOKEN_PRIVILEGES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_OWNER {
    pub Owner: PSID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_OWNER"][::std::mem::size_of::<_TOKEN_OWNER>() - 8usize];
    ["Alignment of _TOKEN_OWNER"][::std::mem::align_of::<_TOKEN_OWNER>() - 8usize];
    ["Offset of field: _TOKEN_OWNER::Owner"][::std::mem::offset_of!(_TOKEN_OWNER, Owner) - 0usize];
};
pub type TOKEN_OWNER = _TOKEN_OWNER;
pub type PTOKEN_OWNER = *mut _TOKEN_OWNER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_PRIMARY_GROUP {
    pub PrimaryGroup: PSID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_PRIMARY_GROUP"][::std::mem::size_of::<_TOKEN_PRIMARY_GROUP>() - 8usize];
    ["Alignment of _TOKEN_PRIMARY_GROUP"][::std::mem::align_of::<_TOKEN_PRIMARY_GROUP>() - 8usize];
    ["Offset of field: _TOKEN_PRIMARY_GROUP::PrimaryGroup"]
        [::std::mem::offset_of!(_TOKEN_PRIMARY_GROUP, PrimaryGroup) - 0usize];
};
pub type TOKEN_PRIMARY_GROUP = _TOKEN_PRIMARY_GROUP;
pub type PTOKEN_PRIMARY_GROUP = *mut _TOKEN_PRIMARY_GROUP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_DEFAULT_DACL {
    pub DefaultDacl: PACL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_DEFAULT_DACL"][::std::mem::size_of::<_TOKEN_DEFAULT_DACL>() - 8usize];
    ["Alignment of _TOKEN_DEFAULT_DACL"][::std::mem::align_of::<_TOKEN_DEFAULT_DACL>() - 8usize];
    ["Offset of field: _TOKEN_DEFAULT_DACL::DefaultDacl"]
        [::std::mem::offset_of!(_TOKEN_DEFAULT_DACL, DefaultDacl) - 0usize];
};
pub type TOKEN_DEFAULT_DACL = _TOKEN_DEFAULT_DACL;
pub type PTOKEN_DEFAULT_DACL = *mut _TOKEN_DEFAULT_DACL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_USER_CLAIMS {
    pub UserClaims: PCLAIMS_BLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_USER_CLAIMS"][::std::mem::size_of::<_TOKEN_USER_CLAIMS>() - 8usize];
    ["Alignment of _TOKEN_USER_CLAIMS"][::std::mem::align_of::<_TOKEN_USER_CLAIMS>() - 8usize];
    ["Offset of field: _TOKEN_USER_CLAIMS::UserClaims"]
        [::std::mem::offset_of!(_TOKEN_USER_CLAIMS, UserClaims) - 0usize];
};
pub type TOKEN_USER_CLAIMS = _TOKEN_USER_CLAIMS;
pub type PTOKEN_USER_CLAIMS = *mut _TOKEN_USER_CLAIMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_DEVICE_CLAIMS {
    pub DeviceClaims: PCLAIMS_BLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_DEVICE_CLAIMS"][::std::mem::size_of::<_TOKEN_DEVICE_CLAIMS>() - 8usize];
    ["Alignment of _TOKEN_DEVICE_CLAIMS"][::std::mem::align_of::<_TOKEN_DEVICE_CLAIMS>() - 8usize];
    ["Offset of field: _TOKEN_DEVICE_CLAIMS::DeviceClaims"]
        [::std::mem::offset_of!(_TOKEN_DEVICE_CLAIMS, DeviceClaims) - 0usize];
};
pub type TOKEN_DEVICE_CLAIMS = _TOKEN_DEVICE_CLAIMS;
pub type PTOKEN_DEVICE_CLAIMS = *mut _TOKEN_DEVICE_CLAIMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_GROUPS_AND_PRIVILEGES {
    pub SidCount: DWORD,
    pub SidLength: DWORD,
    pub Sids: PSID_AND_ATTRIBUTES,
    pub RestrictedSidCount: DWORD,
    pub RestrictedSidLength: DWORD,
    pub RestrictedSids: PSID_AND_ATTRIBUTES,
    pub PrivilegeCount: DWORD,
    pub PrivilegeLength: DWORD,
    pub Privileges: PLUID_AND_ATTRIBUTES,
    pub AuthenticationId: LUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_GROUPS_AND_PRIVILEGES"]
        [::std::mem::size_of::<_TOKEN_GROUPS_AND_PRIVILEGES>() - 56usize];
    ["Alignment of _TOKEN_GROUPS_AND_PRIVILEGES"]
        [::std::mem::align_of::<_TOKEN_GROUPS_AND_PRIVILEGES>() - 8usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::SidCount"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, SidCount) - 0usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::SidLength"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, SidLength) - 4usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::Sids"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, Sids) - 8usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::RestrictedSidCount"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, RestrictedSidCount) - 16usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::RestrictedSidLength"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, RestrictedSidLength) - 20usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::RestrictedSids"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, RestrictedSids) - 24usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::PrivilegeCount"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, PrivilegeCount) - 32usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::PrivilegeLength"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, PrivilegeLength) - 36usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::Privileges"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, Privileges) - 40usize];
    ["Offset of field: _TOKEN_GROUPS_AND_PRIVILEGES::AuthenticationId"]
        [::std::mem::offset_of!(_TOKEN_GROUPS_AND_PRIVILEGES, AuthenticationId) - 48usize];
};
pub type TOKEN_GROUPS_AND_PRIVILEGES = _TOKEN_GROUPS_AND_PRIVILEGES;
pub type PTOKEN_GROUPS_AND_PRIVILEGES = *mut _TOKEN_GROUPS_AND_PRIVILEGES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_LINKED_TOKEN {
    pub LinkedToken: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_LINKED_TOKEN"][::std::mem::size_of::<_TOKEN_LINKED_TOKEN>() - 8usize];
    ["Alignment of _TOKEN_LINKED_TOKEN"][::std::mem::align_of::<_TOKEN_LINKED_TOKEN>() - 8usize];
    ["Offset of field: _TOKEN_LINKED_TOKEN::LinkedToken"]
        [::std::mem::offset_of!(_TOKEN_LINKED_TOKEN, LinkedToken) - 0usize];
};
pub type TOKEN_LINKED_TOKEN = _TOKEN_LINKED_TOKEN;
pub type PTOKEN_LINKED_TOKEN = *mut _TOKEN_LINKED_TOKEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_ELEVATION {
    pub TokenIsElevated: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_ELEVATION"][::std::mem::size_of::<_TOKEN_ELEVATION>() - 4usize];
    ["Alignment of _TOKEN_ELEVATION"][::std::mem::align_of::<_TOKEN_ELEVATION>() - 4usize];
    ["Offset of field: _TOKEN_ELEVATION::TokenIsElevated"]
        [::std::mem::offset_of!(_TOKEN_ELEVATION, TokenIsElevated) - 0usize];
};
pub type TOKEN_ELEVATION = _TOKEN_ELEVATION;
pub type PTOKEN_ELEVATION = *mut _TOKEN_ELEVATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_MANDATORY_LABEL {
    pub Label: SID_AND_ATTRIBUTES,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_MANDATORY_LABEL"][::std::mem::size_of::<_TOKEN_MANDATORY_LABEL>() - 16usize];
    ["Alignment of _TOKEN_MANDATORY_LABEL"]
        [::std::mem::align_of::<_TOKEN_MANDATORY_LABEL>() - 8usize];
    ["Offset of field: _TOKEN_MANDATORY_LABEL::Label"]
        [::std::mem::offset_of!(_TOKEN_MANDATORY_LABEL, Label) - 0usize];
};
pub type TOKEN_MANDATORY_LABEL = _TOKEN_MANDATORY_LABEL;
pub type PTOKEN_MANDATORY_LABEL = *mut _TOKEN_MANDATORY_LABEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_MANDATORY_POLICY {
    pub Policy: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_MANDATORY_POLICY"][::std::mem::size_of::<_TOKEN_MANDATORY_POLICY>() - 4usize];
    ["Alignment of _TOKEN_MANDATORY_POLICY"]
        [::std::mem::align_of::<_TOKEN_MANDATORY_POLICY>() - 4usize];
    ["Offset of field: _TOKEN_MANDATORY_POLICY::Policy"]
        [::std::mem::offset_of!(_TOKEN_MANDATORY_POLICY, Policy) - 0usize];
};
pub type TOKEN_MANDATORY_POLICY = _TOKEN_MANDATORY_POLICY;
pub type PTOKEN_MANDATORY_POLICY = *mut _TOKEN_MANDATORY_POLICY;
pub type PSECURITY_ATTRIBUTES_OPAQUE = PVOID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_ACCESS_INFORMATION {
    pub SidHash: PSID_AND_ATTRIBUTES_HASH,
    pub RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH,
    pub Privileges: PTOKEN_PRIVILEGES,
    pub AuthenticationId: LUID,
    pub TokenType: TOKEN_TYPE,
    pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    pub MandatoryPolicy: TOKEN_MANDATORY_POLICY,
    pub Flags: DWORD,
    pub AppContainerNumber: DWORD,
    pub PackageSid: PSID,
    pub CapabilitiesHash: PSID_AND_ATTRIBUTES_HASH,
    pub TrustLevelSid: PSID,
    pub SecurityAttributes: PSECURITY_ATTRIBUTES_OPAQUE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_ACCESS_INFORMATION"]
        [::std::mem::size_of::<_TOKEN_ACCESS_INFORMATION>() - 88usize];
    ["Alignment of _TOKEN_ACCESS_INFORMATION"]
        [::std::mem::align_of::<_TOKEN_ACCESS_INFORMATION>() - 8usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::SidHash"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, SidHash) - 0usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::RestrictedSidHash"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, RestrictedSidHash) - 8usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::Privileges"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, Privileges) - 16usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::AuthenticationId"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, AuthenticationId) - 24usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::TokenType"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, TokenType) - 32usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::ImpersonationLevel"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, ImpersonationLevel) - 36usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::MandatoryPolicy"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, MandatoryPolicy) - 40usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::Flags"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, Flags) - 44usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::AppContainerNumber"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, AppContainerNumber) - 48usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::PackageSid"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, PackageSid) - 56usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::CapabilitiesHash"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, CapabilitiesHash) - 64usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::TrustLevelSid"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, TrustLevelSid) - 72usize];
    ["Offset of field: _TOKEN_ACCESS_INFORMATION::SecurityAttributes"]
        [::std::mem::offset_of!(_TOKEN_ACCESS_INFORMATION, SecurityAttributes) - 80usize];
};
pub type TOKEN_ACCESS_INFORMATION = _TOKEN_ACCESS_INFORMATION;
pub type PTOKEN_ACCESS_INFORMATION = *mut _TOKEN_ACCESS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_LOGGING_INFORMATION {
    pub TokenType: TOKEN_TYPE,
    pub TokenElevation: TOKEN_ELEVATION,
    pub TokenElevationType: TOKEN_ELEVATION_TYPE,
    pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    pub IntegrityLevel: DWORD,
    pub User: SID_AND_ATTRIBUTES,
    pub TrustLevelSid: PSID,
    pub SessionId: DWORD,
    pub AppContainerNumber: DWORD,
    pub AuthenticationId: LUID,
    pub GroupCount: DWORD,
    pub GroupsLength: DWORD,
    pub Groups: PSID_AND_ATTRIBUTES,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_LOGGING_INFORMATION"]
        [::std::mem::size_of::<_TOKEN_LOGGING_INFORMATION>() - 80usize];
    ["Alignment of _TOKEN_LOGGING_INFORMATION"]
        [::std::mem::align_of::<_TOKEN_LOGGING_INFORMATION>() - 8usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::TokenType"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, TokenType) - 0usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::TokenElevation"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, TokenElevation) - 4usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::TokenElevationType"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, TokenElevationType) - 8usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::ImpersonationLevel"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, ImpersonationLevel) - 12usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::IntegrityLevel"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, IntegrityLevel) - 16usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::User"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, User) - 24usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::TrustLevelSid"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, TrustLevelSid) - 40usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::SessionId"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, SessionId) - 48usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::AppContainerNumber"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, AppContainerNumber) - 52usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::AuthenticationId"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, AuthenticationId) - 56usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::GroupCount"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, GroupCount) - 64usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::GroupsLength"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, GroupsLength) - 68usize];
    ["Offset of field: _TOKEN_LOGGING_INFORMATION::Groups"]
        [::std::mem::offset_of!(_TOKEN_LOGGING_INFORMATION, Groups) - 72usize];
};
pub type TOKEN_LOGGING_INFORMATION = _TOKEN_LOGGING_INFORMATION;
pub type PTOKEN_LOGGING_INFORMATION = *mut _TOKEN_LOGGING_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_AUDIT_POLICY {
    pub PerUserPolicy: [BYTE; 30usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_AUDIT_POLICY"][::std::mem::size_of::<_TOKEN_AUDIT_POLICY>() - 30usize];
    ["Alignment of _TOKEN_AUDIT_POLICY"][::std::mem::align_of::<_TOKEN_AUDIT_POLICY>() - 1usize];
    ["Offset of field: _TOKEN_AUDIT_POLICY::PerUserPolicy"]
        [::std::mem::offset_of!(_TOKEN_AUDIT_POLICY, PerUserPolicy) - 0usize];
};
pub type TOKEN_AUDIT_POLICY = _TOKEN_AUDIT_POLICY;
pub type PTOKEN_AUDIT_POLICY = *mut _TOKEN_AUDIT_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_SOURCE {
    pub SourceName: [CHAR; 8usize],
    pub SourceIdentifier: LUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_SOURCE"][::std::mem::size_of::<_TOKEN_SOURCE>() - 16usize];
    ["Alignment of _TOKEN_SOURCE"][::std::mem::align_of::<_TOKEN_SOURCE>() - 4usize];
    ["Offset of field: _TOKEN_SOURCE::SourceName"]
        [::std::mem::offset_of!(_TOKEN_SOURCE, SourceName) - 0usize];
    ["Offset of field: _TOKEN_SOURCE::SourceIdentifier"]
        [::std::mem::offset_of!(_TOKEN_SOURCE, SourceIdentifier) - 8usize];
};
pub type TOKEN_SOURCE = _TOKEN_SOURCE;
pub type PTOKEN_SOURCE = *mut _TOKEN_SOURCE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TOKEN_STATISTICS {
    pub TokenId: LUID,
    pub AuthenticationId: LUID,
    pub ExpirationTime: LARGE_INTEGER,
    pub TokenType: TOKEN_TYPE,
    pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    pub DynamicCharged: DWORD,
    pub DynamicAvailable: DWORD,
    pub GroupCount: DWORD,
    pub PrivilegeCount: DWORD,
    pub ModifiedId: LUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_STATISTICS"][::std::mem::size_of::<_TOKEN_STATISTICS>() - 56usize];
    ["Alignment of _TOKEN_STATISTICS"][::std::mem::align_of::<_TOKEN_STATISTICS>() - 8usize];
    ["Offset of field: _TOKEN_STATISTICS::TokenId"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, TokenId) - 0usize];
    ["Offset of field: _TOKEN_STATISTICS::AuthenticationId"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, AuthenticationId) - 8usize];
    ["Offset of field: _TOKEN_STATISTICS::ExpirationTime"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, ExpirationTime) - 16usize];
    ["Offset of field: _TOKEN_STATISTICS::TokenType"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, TokenType) - 24usize];
    ["Offset of field: _TOKEN_STATISTICS::ImpersonationLevel"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, ImpersonationLevel) - 28usize];
    ["Offset of field: _TOKEN_STATISTICS::DynamicCharged"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, DynamicCharged) - 32usize];
    ["Offset of field: _TOKEN_STATISTICS::DynamicAvailable"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, DynamicAvailable) - 36usize];
    ["Offset of field: _TOKEN_STATISTICS::GroupCount"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, GroupCount) - 40usize];
    ["Offset of field: _TOKEN_STATISTICS::PrivilegeCount"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, PrivilegeCount) - 44usize];
    ["Offset of field: _TOKEN_STATISTICS::ModifiedId"]
        [::std::mem::offset_of!(_TOKEN_STATISTICS, ModifiedId) - 48usize];
};
pub type TOKEN_STATISTICS = _TOKEN_STATISTICS;
pub type PTOKEN_STATISTICS = *mut _TOKEN_STATISTICS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_CONTROL {
    pub TokenId: LUID,
    pub AuthenticationId: LUID,
    pub ModifiedId: LUID,
    pub TokenSource: TOKEN_SOURCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_CONTROL"][::std::mem::size_of::<_TOKEN_CONTROL>() - 40usize];
    ["Alignment of _TOKEN_CONTROL"][::std::mem::align_of::<_TOKEN_CONTROL>() - 4usize];
    ["Offset of field: _TOKEN_CONTROL::TokenId"]
        [::std::mem::offset_of!(_TOKEN_CONTROL, TokenId) - 0usize];
    ["Offset of field: _TOKEN_CONTROL::AuthenticationId"]
        [::std::mem::offset_of!(_TOKEN_CONTROL, AuthenticationId) - 8usize];
    ["Offset of field: _TOKEN_CONTROL::ModifiedId"]
        [::std::mem::offset_of!(_TOKEN_CONTROL, ModifiedId) - 16usize];
    ["Offset of field: _TOKEN_CONTROL::TokenSource"]
        [::std::mem::offset_of!(_TOKEN_CONTROL, TokenSource) - 24usize];
};
pub type TOKEN_CONTROL = _TOKEN_CONTROL;
pub type PTOKEN_CONTROL = *mut _TOKEN_CONTROL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_ORIGIN {
    pub OriginatingLogonSession: LUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_ORIGIN"][::std::mem::size_of::<_TOKEN_ORIGIN>() - 8usize];
    ["Alignment of _TOKEN_ORIGIN"][::std::mem::align_of::<_TOKEN_ORIGIN>() - 4usize];
    ["Offset of field: _TOKEN_ORIGIN::OriginatingLogonSession"]
        [::std::mem::offset_of!(_TOKEN_ORIGIN, OriginatingLogonSession) - 0usize];
};
pub type TOKEN_ORIGIN = _TOKEN_ORIGIN;
pub type PTOKEN_ORIGIN = *mut _TOKEN_ORIGIN;
pub const _MANDATORY_LEVEL_MandatoryLevelUntrusted: _MANDATORY_LEVEL = 0;
pub const _MANDATORY_LEVEL_MandatoryLevelLow: _MANDATORY_LEVEL = 1;
pub const _MANDATORY_LEVEL_MandatoryLevelMedium: _MANDATORY_LEVEL = 2;
pub const _MANDATORY_LEVEL_MandatoryLevelHigh: _MANDATORY_LEVEL = 3;
pub const _MANDATORY_LEVEL_MandatoryLevelSystem: _MANDATORY_LEVEL = 4;
pub const _MANDATORY_LEVEL_MandatoryLevelSecureProcess: _MANDATORY_LEVEL = 5;
pub const _MANDATORY_LEVEL_MandatoryLevelCount: _MANDATORY_LEVEL = 6;
pub type _MANDATORY_LEVEL = ::std::os::raw::c_int;
pub use self::_MANDATORY_LEVEL as MANDATORY_LEVEL;
pub type PMANDATORY_LEVEL = *mut _MANDATORY_LEVEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_APPCONTAINER_INFORMATION {
    pub TokenAppContainer: PSID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_APPCONTAINER_INFORMATION"]
        [::std::mem::size_of::<_TOKEN_APPCONTAINER_INFORMATION>() - 8usize];
    ["Alignment of _TOKEN_APPCONTAINER_INFORMATION"]
        [::std::mem::align_of::<_TOKEN_APPCONTAINER_INFORMATION>() - 8usize];
    ["Offset of field: _TOKEN_APPCONTAINER_INFORMATION::TokenAppContainer"]
        [::std::mem::offset_of!(_TOKEN_APPCONTAINER_INFORMATION, TokenAppContainer) - 0usize];
};
pub type TOKEN_APPCONTAINER_INFORMATION = _TOKEN_APPCONTAINER_INFORMATION;
pub type PTOKEN_APPCONTAINER_INFORMATION = *mut _TOKEN_APPCONTAINER_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_SID_INFORMATION {
    pub Sid: PSID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_SID_INFORMATION"][::std::mem::size_of::<_TOKEN_SID_INFORMATION>() - 8usize];
    ["Alignment of _TOKEN_SID_INFORMATION"]
        [::std::mem::align_of::<_TOKEN_SID_INFORMATION>() - 8usize];
    ["Offset of field: _TOKEN_SID_INFORMATION::Sid"]
        [::std::mem::offset_of!(_TOKEN_SID_INFORMATION, Sid) - 0usize];
};
pub type TOKEN_SID_INFORMATION = _TOKEN_SID_INFORMATION;
pub type PTOKEN_SID_INFORMATION = *mut _TOKEN_SID_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TOKEN_BNO_ISOLATION_INFORMATION {
    pub IsolationPrefix: PWSTR,
    pub IsolationEnabled: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TOKEN_BNO_ISOLATION_INFORMATION"]
        [::std::mem::size_of::<_TOKEN_BNO_ISOLATION_INFORMATION>() - 16usize];
    ["Alignment of _TOKEN_BNO_ISOLATION_INFORMATION"]
        [::std::mem::align_of::<_TOKEN_BNO_ISOLATION_INFORMATION>() - 8usize];
    ["Offset of field: _TOKEN_BNO_ISOLATION_INFORMATION::IsolationPrefix"]
        [::std::mem::offset_of!(_TOKEN_BNO_ISOLATION_INFORMATION, IsolationPrefix) - 0usize];
    ["Offset of field: _TOKEN_BNO_ISOLATION_INFORMATION::IsolationEnabled"]
        [::std::mem::offset_of!(_TOKEN_BNO_ISOLATION_INFORMATION, IsolationEnabled) - 8usize];
};
pub type TOKEN_BNO_ISOLATION_INFORMATION = _TOKEN_BNO_ISOLATION_INFORMATION;
pub type PTOKEN_BNO_ISOLATION_INFORMATION = *mut _TOKEN_BNO_ISOLATION_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    pub Version: DWORD64,
    pub Name: PWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>() - 16usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE>() - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE::Version"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, Version) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE::Name"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, Name) - 8usize];
};
pub type CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
pub type PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = *mut _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    pub pValue: PVOID,
    pub ValueLength: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>() - 16usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE>() - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE::pValue"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, pValue) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE::ValueLength"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
        ValueLength
    ) - 8usize];
};
pub type CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
pub type PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE =
    *mut _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
    pub Name: PWSTR,
    pub ValueType: WORD,
    pub Reserved: WORD,
    pub Flags: DWORD,
    pub ValueCount: DWORD,
    pub Values: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1 {
    pub pInt64: PLONG64,
    pub pUint64: PDWORD64,
    pub ppString: *mut PWSTR,
    pub pFqbn: PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,
    pub pOctetString: PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1>() - 8usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1::pInt64"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1, pInt64) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1::pUint64"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1, pUint64) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1::ppString"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1, ppString) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1::pFqbn"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1, pFqbn) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1::pOctetString"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1, pOctetString) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTE_V1"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_V1>() - 32usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTE_V1"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_V1>() - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1::Name"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1, Name) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1::ValueType"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1, ValueType) - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1::Reserved"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1, Reserved) - 10usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1::Flags"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1, Flags) - 12usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1::ValueCount"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1, ValueCount) - 16usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_V1::Values"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_V1, Values) - 24usize];
};
pub type CLAIM_SECURITY_ATTRIBUTE_V1 = _CLAIM_SECURITY_ATTRIBUTE_V1;
pub type PCLAIM_SECURITY_ATTRIBUTE_V1 = *mut _CLAIM_SECURITY_ATTRIBUTE_V1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
    pub Name: DWORD,
    pub ValueType: WORD,
    pub Reserved: WORD,
    pub Flags: DWORD,
    pub ValueCount: DWORD,
    pub Values: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1 {
    pub pInt64: [DWORD; 1usize],
    pub pUint64: [DWORD; 1usize],
    pub ppString: [DWORD; 1usize],
    pub pFqbn: [DWORD; 1usize],
    pub pOctetString: [DWORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1>() - 4usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1::pInt64"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
        pInt64
    ) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1::pUint64"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
        pUint64
    ) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1::ppString"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
        ppString
    ) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1::pFqbn"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
        pFqbn
    ) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1::pOctetString"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1,
        pOctetString
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>() - 20usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1>() - 4usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1::Name"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, Name) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1::ValueType"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, ValueType) - 4usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1::Reserved"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, Reserved) - 6usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1::Flags"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, Flags) - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1::ValueCount"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, ValueCount) - 12usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1::Values"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, Values) - 16usize];
};
pub type CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
pub type PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = *mut _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
    pub Version: WORD,
    pub Reserved: WORD,
    pub AttributeCount: DWORD,
    pub Attribute: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1 {
    pub pAttributeV1: PCLAIM_SECURITY_ATTRIBUTE_V1,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1>() - 8usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1>() - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1::pAttributeV1"][::std::mem::offset_of!(
        _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1,
        pAttributeV1
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CLAIM_SECURITY_ATTRIBUTES_INFORMATION"]
        [::std::mem::size_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION>() - 16usize];
    ["Alignment of _CLAIM_SECURITY_ATTRIBUTES_INFORMATION"]
        [::std::mem::align_of::<_CLAIM_SECURITY_ATTRIBUTES_INFORMATION>() - 8usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION::Version"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION, Version) - 0usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION::Reserved"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION, Reserved) - 2usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION::AttributeCount"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION, AttributeCount) - 4usize];
    ["Offset of field: _CLAIM_SECURITY_ATTRIBUTES_INFORMATION::Attribute"]
        [::std::mem::offset_of!(_CLAIM_SECURITY_ATTRIBUTES_INFORMATION, Attribute) - 8usize];
};
pub type CLAIM_SECURITY_ATTRIBUTES_INFORMATION = _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub type PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = *mut _CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub type SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN;
pub type PSECURITY_CONTEXT_TRACKING_MODE = *mut BOOLEAN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_QUALITY_OF_SERVICE {
    pub Length: DWORD,
    pub ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    pub ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE,
    pub EffectiveOnly: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_QUALITY_OF_SERVICE"]
        [::std::mem::size_of::<_SECURITY_QUALITY_OF_SERVICE>() - 12usize];
    ["Alignment of _SECURITY_QUALITY_OF_SERVICE"]
        [::std::mem::align_of::<_SECURITY_QUALITY_OF_SERVICE>() - 4usize];
    ["Offset of field: _SECURITY_QUALITY_OF_SERVICE::Length"]
        [::std::mem::offset_of!(_SECURITY_QUALITY_OF_SERVICE, Length) - 0usize];
    ["Offset of field: _SECURITY_QUALITY_OF_SERVICE::ImpersonationLevel"]
        [::std::mem::offset_of!(_SECURITY_QUALITY_OF_SERVICE, ImpersonationLevel) - 4usize];
    ["Offset of field: _SECURITY_QUALITY_OF_SERVICE::ContextTrackingMode"]
        [::std::mem::offset_of!(_SECURITY_QUALITY_OF_SERVICE, ContextTrackingMode) - 8usize];
    ["Offset of field: _SECURITY_QUALITY_OF_SERVICE::EffectiveOnly"]
        [::std::mem::offset_of!(_SECURITY_QUALITY_OF_SERVICE, EffectiveOnly) - 9usize];
};
pub type SECURITY_QUALITY_OF_SERVICE = _SECURITY_QUALITY_OF_SERVICE;
pub type PSECURITY_QUALITY_OF_SERVICE = *mut _SECURITY_QUALITY_OF_SERVICE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SE_IMPERSONATION_STATE {
    pub Token: PACCESS_TOKEN,
    pub CopyOnOpen: BOOLEAN,
    pub EffectiveOnly: BOOLEAN,
    pub Level: SECURITY_IMPERSONATION_LEVEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SE_IMPERSONATION_STATE"][::std::mem::size_of::<_SE_IMPERSONATION_STATE>() - 16usize];
    ["Alignment of _SE_IMPERSONATION_STATE"]
        [::std::mem::align_of::<_SE_IMPERSONATION_STATE>() - 8usize];
    ["Offset of field: _SE_IMPERSONATION_STATE::Token"]
        [::std::mem::offset_of!(_SE_IMPERSONATION_STATE, Token) - 0usize];
    ["Offset of field: _SE_IMPERSONATION_STATE::CopyOnOpen"]
        [::std::mem::offset_of!(_SE_IMPERSONATION_STATE, CopyOnOpen) - 8usize];
    ["Offset of field: _SE_IMPERSONATION_STATE::EffectiveOnly"]
        [::std::mem::offset_of!(_SE_IMPERSONATION_STATE, EffectiveOnly) - 9usize];
    ["Offset of field: _SE_IMPERSONATION_STATE::Level"]
        [::std::mem::offset_of!(_SE_IMPERSONATION_STATE, Level) - 12usize];
};
pub type SE_IMPERSONATION_STATE = _SE_IMPERSONATION_STATE;
pub type PSE_IMPERSONATION_STATE = *mut _SE_IMPERSONATION_STATE;
pub type SECURITY_INFORMATION = DWORD;
pub type PSECURITY_INFORMATION = *mut DWORD;
pub type SE_SIGNING_LEVEL = BYTE;
pub type PSE_SIGNING_LEVEL = *mut BYTE;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureNone: _SE_IMAGE_SIGNATURE_TYPE = 0;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureEmbedded: _SE_IMAGE_SIGNATURE_TYPE = 1;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCache: _SE_IMAGE_SIGNATURE_TYPE = 2;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogCached: _SE_IMAGE_SIGNATURE_TYPE = 3;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogNotCached: _SE_IMAGE_SIGNATURE_TYPE = 4;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignatureCatalogHint: _SE_IMAGE_SIGNATURE_TYPE = 5;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignaturePackageCatalog: _SE_IMAGE_SIGNATURE_TYPE = 6;
pub const _SE_IMAGE_SIGNATURE_TYPE_SeImageSignaturePplMitigated: _SE_IMAGE_SIGNATURE_TYPE = 7;
pub type _SE_IMAGE_SIGNATURE_TYPE = ::std::os::raw::c_int;
pub use self::_SE_IMAGE_SIGNATURE_TYPE as SE_IMAGE_SIGNATURE_TYPE;
pub type PSE_IMAGE_SIGNATURE_TYPE = *mut _SE_IMAGE_SIGNATURE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_CAPABILITIES {
    pub AppContainerSid: PSID,
    pub Capabilities: PSID_AND_ATTRIBUTES,
    pub CapabilityCount: DWORD,
    pub Reserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_CAPABILITIES"][::std::mem::size_of::<_SECURITY_CAPABILITIES>() - 24usize];
    ["Alignment of _SECURITY_CAPABILITIES"]
        [::std::mem::align_of::<_SECURITY_CAPABILITIES>() - 8usize];
    ["Offset of field: _SECURITY_CAPABILITIES::AppContainerSid"]
        [::std::mem::offset_of!(_SECURITY_CAPABILITIES, AppContainerSid) - 0usize];
    ["Offset of field: _SECURITY_CAPABILITIES::Capabilities"]
        [::std::mem::offset_of!(_SECURITY_CAPABILITIES, Capabilities) - 8usize];
    ["Offset of field: _SECURITY_CAPABILITIES::CapabilityCount"]
        [::std::mem::offset_of!(_SECURITY_CAPABILITIES, CapabilityCount) - 16usize];
    ["Offset of field: _SECURITY_CAPABILITIES::Reserved"]
        [::std::mem::offset_of!(_SECURITY_CAPABILITIES, Reserved) - 20usize];
};
pub type SECURITY_CAPABILITIES = _SECURITY_CAPABILITIES;
pub type PSECURITY_CAPABILITIES = *mut _SECURITY_CAPABILITIES;
pub type LPSECURITY_CAPABILITIES = *mut _SECURITY_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOB_SET_ARRAY {
    pub JobHandle: HANDLE,
    pub MemberLevel: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOB_SET_ARRAY"][::std::mem::size_of::<_JOB_SET_ARRAY>() - 16usize];
    ["Alignment of _JOB_SET_ARRAY"][::std::mem::align_of::<_JOB_SET_ARRAY>() - 8usize];
    ["Offset of field: _JOB_SET_ARRAY::JobHandle"]
        [::std::mem::offset_of!(_JOB_SET_ARRAY, JobHandle) - 0usize];
    ["Offset of field: _JOB_SET_ARRAY::MemberLevel"]
        [::std::mem::offset_of!(_JOB_SET_ARRAY, MemberLevel) - 8usize];
    ["Offset of field: _JOB_SET_ARRAY::Flags"]
        [::std::mem::offset_of!(_JOB_SET_ARRAY, Flags) - 12usize];
};
pub type JOB_SET_ARRAY = _JOB_SET_ARRAY;
pub type PJOB_SET_ARRAY = *mut _JOB_SET_ARRAY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_REGISTRATION_RECORD {
    pub Next: *mut _EXCEPTION_REGISTRATION_RECORD,
    pub Handler: PEXCEPTION_ROUTINE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXCEPTION_REGISTRATION_RECORD"]
        [::std::mem::size_of::<_EXCEPTION_REGISTRATION_RECORD>() - 16usize];
    ["Alignment of _EXCEPTION_REGISTRATION_RECORD"]
        [::std::mem::align_of::<_EXCEPTION_REGISTRATION_RECORD>() - 8usize];
    ["Offset of field: _EXCEPTION_REGISTRATION_RECORD::Next"]
        [::std::mem::offset_of!(_EXCEPTION_REGISTRATION_RECORD, Next) - 0usize];
    ["Offset of field: _EXCEPTION_REGISTRATION_RECORD::Handler"]
        [::std::mem::offset_of!(_EXCEPTION_REGISTRATION_RECORD, Handler) - 8usize];
};
pub type EXCEPTION_REGISTRATION_RECORD = _EXCEPTION_REGISTRATION_RECORD;
pub type PEXCEPTION_REGISTRATION_RECORD = *mut EXCEPTION_REGISTRATION_RECORD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB {
    pub ExceptionList: *mut _EXCEPTION_REGISTRATION_RECORD,
    pub StackBase: PVOID,
    pub StackLimit: PVOID,
    pub SubSystemTib: PVOID,
    pub __bindgen_anon_1: _NT_TIB__bindgen_ty_1,
    pub ArbitraryUserPointer: PVOID,
    pub Self_: *mut _NT_TIB,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_TIB__bindgen_ty_1 {
    pub FiberData: PVOID,
    pub Version: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NT_TIB__bindgen_ty_1"][::std::mem::size_of::<_NT_TIB__bindgen_ty_1>() - 8usize];
    ["Alignment of _NT_TIB__bindgen_ty_1"]
        [::std::mem::align_of::<_NT_TIB__bindgen_ty_1>() - 8usize];
    ["Offset of field: _NT_TIB__bindgen_ty_1::FiberData"]
        [::std::mem::offset_of!(_NT_TIB__bindgen_ty_1, FiberData) - 0usize];
    ["Offset of field: _NT_TIB__bindgen_ty_1::Version"]
        [::std::mem::offset_of!(_NT_TIB__bindgen_ty_1, Version) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NT_TIB"][::std::mem::size_of::<_NT_TIB>() - 56usize];
    ["Alignment of _NT_TIB"][::std::mem::align_of::<_NT_TIB>() - 8usize];
    ["Offset of field: _NT_TIB::ExceptionList"]
        [::std::mem::offset_of!(_NT_TIB, ExceptionList) - 0usize];
    ["Offset of field: _NT_TIB::StackBase"][::std::mem::offset_of!(_NT_TIB, StackBase) - 8usize];
    ["Offset of field: _NT_TIB::StackLimit"][::std::mem::offset_of!(_NT_TIB, StackLimit) - 16usize];
    ["Offset of field: _NT_TIB::SubSystemTib"]
        [::std::mem::offset_of!(_NT_TIB, SubSystemTib) - 24usize];
    ["Offset of field: _NT_TIB::ArbitraryUserPointer"]
        [::std::mem::offset_of!(_NT_TIB, ArbitraryUserPointer) - 40usize];
    ["Offset of field: _NT_TIB::Self_"][::std::mem::offset_of!(_NT_TIB, Self_) - 48usize];
};
pub type NT_TIB = _NT_TIB;
pub type PNT_TIB = *mut NT_TIB;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB32 {
    pub ExceptionList: DWORD,
    pub StackBase: DWORD,
    pub StackLimit: DWORD,
    pub SubSystemTib: DWORD,
    pub __bindgen_anon_1: _NT_TIB32__bindgen_ty_1,
    pub ArbitraryUserPointer: DWORD,
    pub Self_: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_TIB32__bindgen_ty_1 {
    pub FiberData: DWORD,
    pub Version: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NT_TIB32__bindgen_ty_1"][::std::mem::size_of::<_NT_TIB32__bindgen_ty_1>() - 4usize];
    ["Alignment of _NT_TIB32__bindgen_ty_1"]
        [::std::mem::align_of::<_NT_TIB32__bindgen_ty_1>() - 4usize];
    ["Offset of field: _NT_TIB32__bindgen_ty_1::FiberData"]
        [::std::mem::offset_of!(_NT_TIB32__bindgen_ty_1, FiberData) - 0usize];
    ["Offset of field: _NT_TIB32__bindgen_ty_1::Version"]
        [::std::mem::offset_of!(_NT_TIB32__bindgen_ty_1, Version) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NT_TIB32"][::std::mem::size_of::<_NT_TIB32>() - 28usize];
    ["Alignment of _NT_TIB32"][::std::mem::align_of::<_NT_TIB32>() - 4usize];
    ["Offset of field: _NT_TIB32::ExceptionList"]
        [::std::mem::offset_of!(_NT_TIB32, ExceptionList) - 0usize];
    ["Offset of field: _NT_TIB32::StackBase"]
        [::std::mem::offset_of!(_NT_TIB32, StackBase) - 4usize];
    ["Offset of field: _NT_TIB32::StackLimit"]
        [::std::mem::offset_of!(_NT_TIB32, StackLimit) - 8usize];
    ["Offset of field: _NT_TIB32::SubSystemTib"]
        [::std::mem::offset_of!(_NT_TIB32, SubSystemTib) - 12usize];
    ["Offset of field: _NT_TIB32::ArbitraryUserPointer"]
        [::std::mem::offset_of!(_NT_TIB32, ArbitraryUserPointer) - 20usize];
    ["Offset of field: _NT_TIB32::Self_"][::std::mem::offset_of!(_NT_TIB32, Self_) - 24usize];
};
pub type NT_TIB32 = _NT_TIB32;
pub type PNT_TIB32 = *mut _NT_TIB32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NT_TIB64 {
    pub ExceptionList: DWORD64,
    pub StackBase: DWORD64,
    pub StackLimit: DWORD64,
    pub SubSystemTib: DWORD64,
    pub __bindgen_anon_1: _NT_TIB64__bindgen_ty_1,
    pub ArbitraryUserPointer: DWORD64,
    pub Self_: DWORD64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NT_TIB64__bindgen_ty_1 {
    pub FiberData: DWORD64,
    pub Version: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NT_TIB64__bindgen_ty_1"][::std::mem::size_of::<_NT_TIB64__bindgen_ty_1>() - 8usize];
    ["Alignment of _NT_TIB64__bindgen_ty_1"]
        [::std::mem::align_of::<_NT_TIB64__bindgen_ty_1>() - 8usize];
    ["Offset of field: _NT_TIB64__bindgen_ty_1::FiberData"]
        [::std::mem::offset_of!(_NT_TIB64__bindgen_ty_1, FiberData) - 0usize];
    ["Offset of field: _NT_TIB64__bindgen_ty_1::Version"]
        [::std::mem::offset_of!(_NT_TIB64__bindgen_ty_1, Version) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NT_TIB64"][::std::mem::size_of::<_NT_TIB64>() - 56usize];
    ["Alignment of _NT_TIB64"][::std::mem::align_of::<_NT_TIB64>() - 8usize];
    ["Offset of field: _NT_TIB64::ExceptionList"]
        [::std::mem::offset_of!(_NT_TIB64, ExceptionList) - 0usize];
    ["Offset of field: _NT_TIB64::StackBase"]
        [::std::mem::offset_of!(_NT_TIB64, StackBase) - 8usize];
    ["Offset of field: _NT_TIB64::StackLimit"]
        [::std::mem::offset_of!(_NT_TIB64, StackLimit) - 16usize];
    ["Offset of field: _NT_TIB64::SubSystemTib"]
        [::std::mem::offset_of!(_NT_TIB64, SubSystemTib) - 24usize];
    ["Offset of field: _NT_TIB64::ArbitraryUserPointer"]
        [::std::mem::offset_of!(_NT_TIB64, ArbitraryUserPointer) - 40usize];
    ["Offset of field: _NT_TIB64::Self_"][::std::mem::offset_of!(_NT_TIB64, Self_) - 48usize];
};
pub type NT_TIB64 = _NT_TIB64;
pub type PNT_TIB64 = *mut _NT_TIB64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UMS_CREATE_THREAD_ATTRIBUTES {
    pub UmsVersion: DWORD,
    pub UmsContext: PVOID,
    pub UmsCompletionList: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UMS_CREATE_THREAD_ATTRIBUTES"]
        [::std::mem::size_of::<_UMS_CREATE_THREAD_ATTRIBUTES>() - 24usize];
    ["Alignment of _UMS_CREATE_THREAD_ATTRIBUTES"]
        [::std::mem::align_of::<_UMS_CREATE_THREAD_ATTRIBUTES>() - 8usize];
    ["Offset of field: _UMS_CREATE_THREAD_ATTRIBUTES::UmsVersion"]
        [::std::mem::offset_of!(_UMS_CREATE_THREAD_ATTRIBUTES, UmsVersion) - 0usize];
    ["Offset of field: _UMS_CREATE_THREAD_ATTRIBUTES::UmsContext"]
        [::std::mem::offset_of!(_UMS_CREATE_THREAD_ATTRIBUTES, UmsContext) - 8usize];
    ["Offset of field: _UMS_CREATE_THREAD_ATTRIBUTES::UmsCompletionList"]
        [::std::mem::offset_of!(_UMS_CREATE_THREAD_ATTRIBUTES, UmsCompletionList) - 16usize];
};
pub type UMS_CREATE_THREAD_ATTRIBUTES = _UMS_CREATE_THREAD_ATTRIBUTES;
pub type PUMS_CREATE_THREAD_ATTRIBUTES = *mut _UMS_CREATE_THREAD_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMPONENT_FILTER {
    pub ComponentFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COMPONENT_FILTER"][::std::mem::size_of::<_COMPONENT_FILTER>() - 4usize];
    ["Alignment of _COMPONENT_FILTER"][::std::mem::align_of::<_COMPONENT_FILTER>() - 4usize];
    ["Offset of field: _COMPONENT_FILTER::ComponentFlags"]
        [::std::mem::offset_of!(_COMPONENT_FILTER, ComponentFlags) - 0usize];
};
pub type COMPONENT_FILTER = _COMPONENT_FILTER;
pub type PCOMPONENT_FILTER = *mut _COMPONENT_FILTER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
    pub TargetAddress: ULONG_PTR,
    pub Flags: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET"]
        [::std::mem::size_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>() - 16usize];
    ["Alignment of _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET"]
        [::std::mem::align_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET>() - 8usize];
    ["Offset of field: _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET::TargetAddress"]
        [::std::mem::offset_of!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, TargetAddress) - 0usize];
    ["Offset of field: _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET::Flags"]
        [::std::mem::offset_of!(_PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, Flags) - 8usize];
};
pub type PROCESS_DYNAMIC_EH_CONTINUATION_TARGET = _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
pub type PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET = *mut _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
    pub NumberOfTargets: WORD,
    pub Reserved: WORD,
    pub Reserved2: DWORD,
    pub Targets: PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION"]
        [::std::mem::size_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION>() - 16usize];
    ["Alignment of _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION"]
        [::std::mem::align_of::<_PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION>() - 8usize];
    ["Offset of field: _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION::NumberOfTargets"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION,
        NumberOfTargets
    )
        - 0usize];
    ["Offset of field: _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION::Reserved"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION,
        Reserved
    ) - 2usize];
    ["Offset of field: _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION::Reserved2"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION,
        Reserved2
    )
        - 4usize];
    ["Offset of field: _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION::Targets"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION,
        Targets
    ) - 8usize];
};
pub type PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION =
    _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
pub type PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION =
    *mut _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
    pub BaseAddress: ULONG_PTR,
    pub Size: SIZE_T,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE"]
        [::std::mem::size_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>() - 24usize];
    ["Alignment of _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE"]
        [::std::mem::align_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE>() - 8usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE::BaseAddress"]
        [::std::mem::offset_of!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, BaseAddress) - 0usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE::Size"]
        [::std::mem::offset_of!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, Size) - 8usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE::Flags"]
        [::std::mem::offset_of!(_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, Flags) - 16usize];
};
pub type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
pub type PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE = *mut _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
    pub NumberOfRanges: WORD,
    pub Reserved: WORD,
    pub Reserved2: DWORD,
    pub Ranges: PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION"]
        [::std::mem::size_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION>() - 16usize];
    ["Alignment of _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION"]
        [::std::mem::align_of::<_PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION>() - 8usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION::NumberOfRanges"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION,
        NumberOfRanges
    )
        - 0usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION::Reserved"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION,
        Reserved
    ) - 2usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION::Reserved2"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION,
        Reserved2
    )
        - 4usize];
    ["Offset of field: _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION::Ranges"][::std::mem::offset_of!(
        _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION,
        Ranges
    ) - 8usize];
};
pub type PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION =
    _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
pub type PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION =
    *mut _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _QUOTA_LIMITS {
    pub PagedPoolLimit: SIZE_T,
    pub NonPagedPoolLimit: SIZE_T,
    pub MinimumWorkingSetSize: SIZE_T,
    pub MaximumWorkingSetSize: SIZE_T,
    pub PagefileLimit: SIZE_T,
    pub TimeLimit: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QUOTA_LIMITS"][::std::mem::size_of::<_QUOTA_LIMITS>() - 48usize];
    ["Alignment of _QUOTA_LIMITS"][::std::mem::align_of::<_QUOTA_LIMITS>() - 8usize];
    ["Offset of field: _QUOTA_LIMITS::PagedPoolLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS, PagedPoolLimit) - 0usize];
    ["Offset of field: _QUOTA_LIMITS::NonPagedPoolLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS, NonPagedPoolLimit) - 8usize];
    ["Offset of field: _QUOTA_LIMITS::MinimumWorkingSetSize"]
        [::std::mem::offset_of!(_QUOTA_LIMITS, MinimumWorkingSetSize) - 16usize];
    ["Offset of field: _QUOTA_LIMITS::MaximumWorkingSetSize"]
        [::std::mem::offset_of!(_QUOTA_LIMITS, MaximumWorkingSetSize) - 24usize];
    ["Offset of field: _QUOTA_LIMITS::PagefileLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS, PagefileLimit) - 32usize];
    ["Offset of field: _QUOTA_LIMITS::TimeLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS, TimeLimit) - 40usize];
};
pub type QUOTA_LIMITS = _QUOTA_LIMITS;
pub type PQUOTA_LIMITS = *mut _QUOTA_LIMITS;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _RATE_QUOTA_LIMIT {
    pub RateData: DWORD,
    pub __bindgen_anon_1: _RATE_QUOTA_LIMIT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RATE_QUOTA_LIMIT__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RATE_QUOTA_LIMIT__bindgen_ty_1"]
        [::std::mem::size_of::<_RATE_QUOTA_LIMIT__bindgen_ty_1>() - 4usize];
    ["Alignment of _RATE_QUOTA_LIMIT__bindgen_ty_1"]
        [::std::mem::align_of::<_RATE_QUOTA_LIMIT__bindgen_ty_1>() - 4usize];
};
impl _RATE_QUOTA_LIMIT__bindgen_ty_1 {
    #[inline]
    pub fn RatePercent(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_RatePercent(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RatePercent_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                7u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RatePercent_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                7u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                25u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                25u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RatePercent: DWORD,
        Reserved0: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let RatePercent: u32 = unsafe { ::std::mem::transmute(RatePercent) };
            RatePercent as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
            Reserved0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RATE_QUOTA_LIMIT"][::std::mem::size_of::<_RATE_QUOTA_LIMIT>() - 4usize];
    ["Alignment of _RATE_QUOTA_LIMIT"][::std::mem::align_of::<_RATE_QUOTA_LIMIT>() - 4usize];
    ["Offset of field: _RATE_QUOTA_LIMIT::RateData"]
        [::std::mem::offset_of!(_RATE_QUOTA_LIMIT, RateData) - 0usize];
};
pub type RATE_QUOTA_LIMIT = _RATE_QUOTA_LIMIT;
pub type PRATE_QUOTA_LIMIT = *mut _RATE_QUOTA_LIMIT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _QUOTA_LIMITS_EX {
    pub PagedPoolLimit: SIZE_T,
    pub NonPagedPoolLimit: SIZE_T,
    pub MinimumWorkingSetSize: SIZE_T,
    pub MaximumWorkingSetSize: SIZE_T,
    pub PagefileLimit: SIZE_T,
    pub TimeLimit: LARGE_INTEGER,
    pub WorkingSetLimit: SIZE_T,
    pub Reserved2: SIZE_T,
    pub Reserved3: SIZE_T,
    pub Reserved4: SIZE_T,
    pub Flags: DWORD,
    pub CpuRateLimit: RATE_QUOTA_LIMIT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QUOTA_LIMITS_EX"][::std::mem::size_of::<_QUOTA_LIMITS_EX>() - 88usize];
    ["Alignment of _QUOTA_LIMITS_EX"][::std::mem::align_of::<_QUOTA_LIMITS_EX>() - 8usize];
    ["Offset of field: _QUOTA_LIMITS_EX::PagedPoolLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, PagedPoolLimit) - 0usize];
    ["Offset of field: _QUOTA_LIMITS_EX::NonPagedPoolLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, NonPagedPoolLimit) - 8usize];
    ["Offset of field: _QUOTA_LIMITS_EX::MinimumWorkingSetSize"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, MinimumWorkingSetSize) - 16usize];
    ["Offset of field: _QUOTA_LIMITS_EX::MaximumWorkingSetSize"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, MaximumWorkingSetSize) - 24usize];
    ["Offset of field: _QUOTA_LIMITS_EX::PagefileLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, PagefileLimit) - 32usize];
    ["Offset of field: _QUOTA_LIMITS_EX::TimeLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, TimeLimit) - 40usize];
    ["Offset of field: _QUOTA_LIMITS_EX::WorkingSetLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, WorkingSetLimit) - 48usize];
    ["Offset of field: _QUOTA_LIMITS_EX::Reserved2"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, Reserved2) - 56usize];
    ["Offset of field: _QUOTA_LIMITS_EX::Reserved3"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, Reserved3) - 64usize];
    ["Offset of field: _QUOTA_LIMITS_EX::Reserved4"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, Reserved4) - 72usize];
    ["Offset of field: _QUOTA_LIMITS_EX::Flags"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, Flags) - 80usize];
    ["Offset of field: _QUOTA_LIMITS_EX::CpuRateLimit"]
        [::std::mem::offset_of!(_QUOTA_LIMITS_EX, CpuRateLimit) - 84usize];
};
pub type QUOTA_LIMITS_EX = _QUOTA_LIMITS_EX;
pub type PQUOTA_LIMITS_EX = *mut _QUOTA_LIMITS_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_COUNTERS {
    pub ReadOperationCount: ULONGLONG,
    pub WriteOperationCount: ULONGLONG,
    pub OtherOperationCount: ULONGLONG,
    pub ReadTransferCount: ULONGLONG,
    pub WriteTransferCount: ULONGLONG,
    pub OtherTransferCount: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_COUNTERS"][::std::mem::size_of::<_IO_COUNTERS>() - 48usize];
    ["Alignment of _IO_COUNTERS"][::std::mem::align_of::<_IO_COUNTERS>() - 8usize];
    ["Offset of field: _IO_COUNTERS::ReadOperationCount"]
        [::std::mem::offset_of!(_IO_COUNTERS, ReadOperationCount) - 0usize];
    ["Offset of field: _IO_COUNTERS::WriteOperationCount"]
        [::std::mem::offset_of!(_IO_COUNTERS, WriteOperationCount) - 8usize];
    ["Offset of field: _IO_COUNTERS::OtherOperationCount"]
        [::std::mem::offset_of!(_IO_COUNTERS, OtherOperationCount) - 16usize];
    ["Offset of field: _IO_COUNTERS::ReadTransferCount"]
        [::std::mem::offset_of!(_IO_COUNTERS, ReadTransferCount) - 24usize];
    ["Offset of field: _IO_COUNTERS::WriteTransferCount"]
        [::std::mem::offset_of!(_IO_COUNTERS, WriteTransferCount) - 32usize];
    ["Offset of field: _IO_COUNTERS::OtherTransferCount"]
        [::std::mem::offset_of!(_IO_COUNTERS, OtherTransferCount) - 40usize];
};
pub type IO_COUNTERS = _IO_COUNTERS;
pub type PIO_COUNTERS = *mut IO_COUNTERS;
pub const _HARDWARE_COUNTER_TYPE_PMCCounter: _HARDWARE_COUNTER_TYPE = 0;
pub const _HARDWARE_COUNTER_TYPE_MaxHardwareCounterType: _HARDWARE_COUNTER_TYPE = 1;
pub type _HARDWARE_COUNTER_TYPE = ::std::os::raw::c_int;
pub use self::_HARDWARE_COUNTER_TYPE as HARDWARE_COUNTER_TYPE;
pub type PHARDWARE_COUNTER_TYPE = *mut _HARDWARE_COUNTER_TYPE;
pub const _PROCESS_MITIGATION_POLICY_ProcessDEPPolicy: _PROCESS_MITIGATION_POLICY = 0;
pub const _PROCESS_MITIGATION_POLICY_ProcessASLRPolicy: _PROCESS_MITIGATION_POLICY = 1;
pub const _PROCESS_MITIGATION_POLICY_ProcessDynamicCodePolicy: _PROCESS_MITIGATION_POLICY = 2;
pub const _PROCESS_MITIGATION_POLICY_ProcessStrictHandleCheckPolicy: _PROCESS_MITIGATION_POLICY = 3;
pub const _PROCESS_MITIGATION_POLICY_ProcessSystemCallDisablePolicy: _PROCESS_MITIGATION_POLICY = 4;
pub const _PROCESS_MITIGATION_POLICY_ProcessMitigationOptionsMask: _PROCESS_MITIGATION_POLICY = 5;
pub const _PROCESS_MITIGATION_POLICY_ProcessExtensionPointDisablePolicy:
    _PROCESS_MITIGATION_POLICY = 6;
pub const _PROCESS_MITIGATION_POLICY_ProcessControlFlowGuardPolicy: _PROCESS_MITIGATION_POLICY = 7;
pub const _PROCESS_MITIGATION_POLICY_ProcessSignaturePolicy: _PROCESS_MITIGATION_POLICY = 8;
pub const _PROCESS_MITIGATION_POLICY_ProcessFontDisablePolicy: _PROCESS_MITIGATION_POLICY = 9;
pub const _PROCESS_MITIGATION_POLICY_ProcessImageLoadPolicy: _PROCESS_MITIGATION_POLICY = 10;
pub const _PROCESS_MITIGATION_POLICY_ProcessSystemCallFilterPolicy: _PROCESS_MITIGATION_POLICY = 11;
pub const _PROCESS_MITIGATION_POLICY_ProcessPayloadRestrictionPolicy: _PROCESS_MITIGATION_POLICY =
    12;
pub const _PROCESS_MITIGATION_POLICY_ProcessChildProcessPolicy: _PROCESS_MITIGATION_POLICY = 13;
pub const _PROCESS_MITIGATION_POLICY_ProcessSideChannelIsolationPolicy: _PROCESS_MITIGATION_POLICY =
    14;
pub const _PROCESS_MITIGATION_POLICY_ProcessUserShadowStackPolicy: _PROCESS_MITIGATION_POLICY = 15;
pub const _PROCESS_MITIGATION_POLICY_ProcessRedirectionTrustPolicy: _PROCESS_MITIGATION_POLICY = 16;
pub const _PROCESS_MITIGATION_POLICY_ProcessUserPointerAuthPolicy: _PROCESS_MITIGATION_POLICY = 17;
pub const _PROCESS_MITIGATION_POLICY_ProcessSEHOPPolicy: _PROCESS_MITIGATION_POLICY = 18;
pub const _PROCESS_MITIGATION_POLICY_MaxProcessMitigationPolicy: _PROCESS_MITIGATION_POLICY = 19;
pub type _PROCESS_MITIGATION_POLICY = ::std::os::raw::c_int;
pub use self::_PROCESS_MITIGATION_POLICY as PROCESS_MITIGATION_POLICY;
pub type PPROCESS_MITIGATION_POLICY = *mut _PROCESS_MITIGATION_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_ASLR_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnableBottomUpRandomization(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableBottomUpRandomization(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableBottomUpRandomization_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableBottomUpRandomization_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableForceRelocateImages(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableForceRelocateImages(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableForceRelocateImages_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableForceRelocateImages_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableHighEntropy(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableHighEntropy(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableHighEntropy_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableHighEntropy_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DisallowStrippedImages(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisallowStrippedImages(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisallowStrippedImages_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisallowStrippedImages_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnableBottomUpRandomization: DWORD,
        EnableForceRelocateImages: DWORD,
        EnableHighEntropy: DWORD,
        DisallowStrippedImages: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnableBottomUpRandomization: u32 =
                unsafe { ::std::mem::transmute(EnableBottomUpRandomization) };
            EnableBottomUpRandomization as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let EnableForceRelocateImages: u32 =
                unsafe { ::std::mem::transmute(EnableForceRelocateImages) };
            EnableForceRelocateImages as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let EnableHighEntropy: u32 = unsafe { ::std::mem::transmute(EnableHighEntropy) };
            EnableHighEntropy as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DisallowStrippedImages: u32 =
                unsafe { ::std::mem::transmute(DisallowStrippedImages) };
            DisallowStrippedImages as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(_PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1, Flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_ASLR_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_ASLR_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_ASLR_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_ASLR_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_ASLR_POLICY = _PROCESS_MITIGATION_ASLR_POLICY;
pub type PPROCESS_MITIGATION_ASLR_POLICY = *mut _PROCESS_MITIGATION_ASLR_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_DEP_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1,
    pub Permanent: BOOLEAN,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Enable(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Enable(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Enable_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Enable_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DisableAtlThunkEmulation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisableAtlThunkEmulation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisableAtlThunkEmulation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisableAtlThunkEmulation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Enable: DWORD,
        DisableAtlThunkEmulation: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Enable: u32 = unsafe { ::std::mem::transmute(Enable) };
            Enable as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DisableAtlThunkEmulation: u32 =
                unsafe { ::std::mem::transmute(DisableAtlThunkEmulation) };
            DisableAtlThunkEmulation as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(_PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1, Flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_DEP_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_DEP_POLICY>() - 8usize];
    ["Alignment of _PROCESS_MITIGATION_DEP_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_DEP_POLICY>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_DEP_POLICY::Permanent"]
        [::std::mem::offset_of!(_PROCESS_MITIGATION_DEP_POLICY, Permanent) - 4usize];
};
pub type PROCESS_MITIGATION_DEP_POLICY = _PROCESS_MITIGATION_DEP_POLICY;
pub type PPROCESS_MITIGATION_DEP_POLICY = *mut _PROCESS_MITIGATION_DEP_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SEHOP_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnableSehop(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableSehop(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableSehop_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableSehop_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnableSehop: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnableSehop: u32 = unsafe { ::std::mem::transmute(EnableSehop) };
            EnableSehop as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(_PROCESS_MITIGATION_SEHOP_POLICY__bindgen_ty_1, Flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SEHOP_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_SEHOP_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SEHOP_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SEHOP_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_SEHOP_POLICY = _PROCESS_MITIGATION_SEHOP_POLICY;
pub type PPROCESS_MITIGATION_SEHOP_POLICY = *mut _PROCESS_MITIGATION_SEHOP_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1:
        _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn RaiseExceptionOnInvalidHandleReference(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_RaiseExceptionOnInvalidHandleReference(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RaiseExceptionOnInvalidHandleReference_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RaiseExceptionOnInvalidHandleReference_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn HandleExceptionsPermanentlyEnabled(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_HandleExceptionsPermanentlyEnabled(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn HandleExceptionsPermanentlyEnabled_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_HandleExceptionsPermanentlyEnabled_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RaiseExceptionOnInvalidHandleReference: DWORD,
        HandleExceptionsPermanentlyEnabled: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let RaiseExceptionOnInvalidHandleReference: u32 =
                unsafe { ::std::mem::transmute(RaiseExceptionOnInvalidHandleReference) };
            RaiseExceptionOnInvalidHandleReference as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let HandleExceptionsPermanentlyEnabled: u32 =
                unsafe { ::std::mem::transmute(HandleExceptionsPermanentlyEnabled) };
            HandleExceptionsPermanentlyEnabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY =
    _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
pub type PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY =
    *mut _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1:
        _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn DisallowWin32kSystemCalls(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisallowWin32kSystemCalls(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisallowWin32kSystemCalls_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisallowWin32kSystemCalls_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditDisallowWin32kSystemCalls(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditDisallowWin32kSystemCalls(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditDisallowWin32kSystemCalls_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditDisallowWin32kSystemCalls_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DisallowFsctlSystemCalls(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisallowFsctlSystemCalls(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisallowFsctlSystemCalls_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisallowFsctlSystemCalls_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditDisallowFsctlSystemCalls(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditDisallowFsctlSystemCalls(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditDisallowFsctlSystemCalls_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditDisallowFsctlSystemCalls_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        DisallowWin32kSystemCalls: DWORD,
        AuditDisallowWin32kSystemCalls: DWORD,
        DisallowFsctlSystemCalls: DWORD,
        AuditDisallowFsctlSystemCalls: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DisallowWin32kSystemCalls: u32 =
                unsafe { ::std::mem::transmute(DisallowWin32kSystemCalls) };
            DisallowWin32kSystemCalls as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AuditDisallowWin32kSystemCalls: u32 =
                unsafe { ::std::mem::transmute(AuditDisallowWin32kSystemCalls) };
            AuditDisallowWin32kSystemCalls as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DisallowFsctlSystemCalls: u32 =
                unsafe { ::std::mem::transmute(DisallowFsctlSystemCalls) };
            DisallowFsctlSystemCalls as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let AuditDisallowFsctlSystemCalls: u32 =
                unsafe { ::std::mem::transmute(AuditDisallowFsctlSystemCalls) };
            AuditDisallowFsctlSystemCalls as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY =
    _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
pub type PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY =
    *mut _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1:
        _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn DisableExtensionPoints(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisableExtensionPoints(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisableExtensionPoints_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisableExtensionPoints_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        DisableExtensionPoints: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DisableExtensionPoints: u32 =
                unsafe { ::std::mem::transmute(DisableExtensionPoints) };
            DisableExtensionPoints as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1>(
        ) - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY =
    _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
pub type PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY =
    *mut _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn ProhibitDynamicCode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ProhibitDynamicCode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ProhibitDynamicCode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ProhibitDynamicCode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AllowThreadOptOut(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AllowThreadOptOut(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllowThreadOptOut_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AllowThreadOptOut_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AllowRemoteDowngrade(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AllowRemoteDowngrade(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllowRemoteDowngrade_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AllowRemoteDowngrade_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditProhibitDynamicCode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditProhibitDynamicCode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditProhibitDynamicCode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditProhibitDynamicCode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ProhibitDynamicCode: DWORD,
        AllowThreadOptOut: DWORD,
        AllowRemoteDowngrade: DWORD,
        AuditProhibitDynamicCode: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let ProhibitDynamicCode: u32 = unsafe { ::std::mem::transmute(ProhibitDynamicCode) };
            ProhibitDynamicCode as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AllowThreadOptOut: u32 = unsafe { ::std::mem::transmute(AllowThreadOptOut) };
            AllowThreadOptOut as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let AllowRemoteDowngrade: u32 = unsafe { ::std::mem::transmute(AllowRemoteDowngrade) };
            AllowRemoteDowngrade as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let AuditProhibitDynamicCode: u32 =
                unsafe { ::std::mem::transmute(AuditProhibitDynamicCode) };
            AuditProhibitDynamicCode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1,
        Flags
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_DYNAMIC_CODE_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
pub type PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = *mut _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnableControlFlowGuard(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableControlFlowGuard(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableControlFlowGuard_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableControlFlowGuard_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableExportSuppression(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableExportSuppression(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableExportSuppression_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableExportSuppression_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn StrictMode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_StrictMode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn StrictMode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_StrictMode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableXfg(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableXfg(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableXfg_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableXfg_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableXfgAuditMode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableXfgAuditMode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableXfgAuditMode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableXfgAuditMode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnableControlFlowGuard: DWORD,
        EnableExportSuppression: DWORD,
        StrictMode: DWORD,
        EnableXfg: DWORD,
        EnableXfgAuditMode: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnableControlFlowGuard: u32 =
                unsafe { ::std::mem::transmute(EnableControlFlowGuard) };
            EnableControlFlowGuard as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let EnableExportSuppression: u32 =
                unsafe { ::std::mem::transmute(EnableExportSuppression) };
            EnableExportSuppression as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let StrictMode: u32 = unsafe { ::std::mem::transmute(StrictMode) };
            StrictMode as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let EnableXfg: u32 = unsafe { ::std::mem::transmute(EnableXfg) };
            EnableXfg as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let EnableXfgAuditMode: u32 = unsafe { ::std::mem::transmute(EnableXfgAuditMode) };
            EnableXfgAuditMode as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY =
    _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
pub type PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY =
    *mut _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn MicrosoftSignedOnly(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MicrosoftSignedOnly(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MicrosoftSignedOnly_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MicrosoftSignedOnly_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn StoreSignedOnly(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_StoreSignedOnly(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn StoreSignedOnly_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_StoreSignedOnly_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MitigationOptIn(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MitigationOptIn(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MitigationOptIn_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MitigationOptIn_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditMicrosoftSignedOnly(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditMicrosoftSignedOnly(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditMicrosoftSignedOnly_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditMicrosoftSignedOnly_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditStoreSignedOnly(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditStoreSignedOnly(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditStoreSignedOnly_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditStoreSignedOnly_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MicrosoftSignedOnly: DWORD,
        StoreSignedOnly: DWORD,
        MitigationOptIn: DWORD,
        AuditMicrosoftSignedOnly: DWORD,
        AuditStoreSignedOnly: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let MicrosoftSignedOnly: u32 = unsafe { ::std::mem::transmute(MicrosoftSignedOnly) };
            MicrosoftSignedOnly as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let StoreSignedOnly: u32 = unsafe { ::std::mem::transmute(StoreSignedOnly) };
            StoreSignedOnly as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let MitigationOptIn: u32 = unsafe { ::std::mem::transmute(MitigationOptIn) };
            MitigationOptIn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let AuditMicrosoftSignedOnly: u32 =
                unsafe { ::std::mem::transmute(AuditMicrosoftSignedOnly) };
            AuditMicrosoftSignedOnly as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let AuditStoreSignedOnly: u32 = unsafe { ::std::mem::transmute(AuditStoreSignedOnly) };
            AuditStoreSignedOnly as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1"][::std::mem::align_of::<
        _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
pub type PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY =
    *mut _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn DisableNonSystemFonts(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisableNonSystemFonts(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisableNonSystemFonts_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisableNonSystemFonts_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditNonSystemFontLoading(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditNonSystemFontLoading(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditNonSystemFontLoading_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditNonSystemFontLoading_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        DisableNonSystemFonts: DWORD,
        AuditNonSystemFontLoading: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DisableNonSystemFonts: u32 =
                unsafe { ::std::mem::transmute(DisableNonSystemFonts) };
            DisableNonSystemFonts as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AuditNonSystemFontLoading: u32 =
                unsafe { ::std::mem::transmute(AuditNonSystemFontLoading) };
            AuditNonSystemFontLoading as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1,
        Flags
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_FONT_DISABLE_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_FONT_DISABLE_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_FONT_DISABLE_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_FONT_DISABLE_POLICY = _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
pub type PPROCESS_MITIGATION_FONT_DISABLE_POLICY = *mut _PROCESS_MITIGATION_FONT_DISABLE_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn NoRemoteImages(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NoRemoteImages(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NoRemoteImages_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_NoRemoteImages_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn NoLowMandatoryLabelImages(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NoLowMandatoryLabelImages(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NoLowMandatoryLabelImages_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_NoLowMandatoryLabelImages_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn PreferSystem32Images(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_PreferSystem32Images(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PreferSystem32Images_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_PreferSystem32Images_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditNoRemoteImages(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditNoRemoteImages(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditNoRemoteImages_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditNoRemoteImages_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditNoLowMandatoryLabelImages(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditNoLowMandatoryLabelImages(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditNoLowMandatoryLabelImages_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditNoLowMandatoryLabelImages_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        NoRemoteImages: DWORD,
        NoLowMandatoryLabelImages: DWORD,
        PreferSystem32Images: DWORD,
        AuditNoRemoteImages: DWORD,
        AuditNoLowMandatoryLabelImages: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let NoRemoteImages: u32 = unsafe { ::std::mem::transmute(NoRemoteImages) };
            NoRemoteImages as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let NoLowMandatoryLabelImages: u32 =
                unsafe { ::std::mem::transmute(NoLowMandatoryLabelImages) };
            NoLowMandatoryLabelImages as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let PreferSystem32Images: u32 = unsafe { ::std::mem::transmute(PreferSystem32Images) };
            PreferSystem32Images as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let AuditNoRemoteImages: u32 = unsafe { ::std::mem::transmute(AuditNoRemoteImages) };
            AuditNoRemoteImages as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let AuditNoLowMandatoryLabelImages: u32 =
                unsafe { ::std::mem::transmute(AuditNoLowMandatoryLabelImages) };
            AuditNoLowMandatoryLabelImages as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1,
        Flags
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_IMAGE_LOAD_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_IMAGE_LOAD_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_IMAGE_LOAD_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_IMAGE_LOAD_POLICY = _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
pub type PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = *mut _PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn FilterId(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_FilterId(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FilterId_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FilterId_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        FilterId: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let FilterId: u32 = unsafe { ::std::mem::transmute(FilterId) };
            FilterId as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY =
    _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
pub type PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY =
    *mut _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1:
        _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnableExportAddressFilter(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableExportAddressFilter(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableExportAddressFilter_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableExportAddressFilter_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditExportAddressFilter(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditExportAddressFilter(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditExportAddressFilter_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditExportAddressFilter_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableExportAddressFilterPlus(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableExportAddressFilterPlus(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableExportAddressFilterPlus_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableExportAddressFilterPlus_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditExportAddressFilterPlus(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditExportAddressFilterPlus(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditExportAddressFilterPlus_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditExportAddressFilterPlus_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableImportAddressFilter(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableImportAddressFilter(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableImportAddressFilter_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableImportAddressFilter_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditImportAddressFilter(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditImportAddressFilter(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditImportAddressFilter_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditImportAddressFilter_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableRopStackPivot(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableRopStackPivot(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableRopStackPivot_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableRopStackPivot_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditRopStackPivot(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditRopStackPivot(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditRopStackPivot_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditRopStackPivot_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableRopCallerCheck(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableRopCallerCheck(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableRopCallerCheck_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableRopCallerCheck_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditRopCallerCheck(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditRopCallerCheck(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditRopCallerCheck_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditRopCallerCheck_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableRopSimExec(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableRopSimExec(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableRopSimExec_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableRopSimExec_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditRopSimExec(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditRopSimExec(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditRopSimExec_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditRopSimExec_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnableExportAddressFilter: DWORD,
        AuditExportAddressFilter: DWORD,
        EnableExportAddressFilterPlus: DWORD,
        AuditExportAddressFilterPlus: DWORD,
        EnableImportAddressFilter: DWORD,
        AuditImportAddressFilter: DWORD,
        EnableRopStackPivot: DWORD,
        AuditRopStackPivot: DWORD,
        EnableRopCallerCheck: DWORD,
        AuditRopCallerCheck: DWORD,
        EnableRopSimExec: DWORD,
        AuditRopSimExec: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnableExportAddressFilter: u32 =
                unsafe { ::std::mem::transmute(EnableExportAddressFilter) };
            EnableExportAddressFilter as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AuditExportAddressFilter: u32 =
                unsafe { ::std::mem::transmute(AuditExportAddressFilter) };
            AuditExportAddressFilter as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let EnableExportAddressFilterPlus: u32 =
                unsafe { ::std::mem::transmute(EnableExportAddressFilterPlus) };
            EnableExportAddressFilterPlus as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let AuditExportAddressFilterPlus: u32 =
                unsafe { ::std::mem::transmute(AuditExportAddressFilterPlus) };
            AuditExportAddressFilterPlus as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let EnableImportAddressFilter: u32 =
                unsafe { ::std::mem::transmute(EnableImportAddressFilter) };
            EnableImportAddressFilter as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let AuditImportAddressFilter: u32 =
                unsafe { ::std::mem::transmute(AuditImportAddressFilter) };
            AuditImportAddressFilter as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let EnableRopStackPivot: u32 = unsafe { ::std::mem::transmute(EnableRopStackPivot) };
            EnableRopStackPivot as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let AuditRopStackPivot: u32 = unsafe { ::std::mem::transmute(AuditRopStackPivot) };
            AuditRopStackPivot as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let EnableRopCallerCheck: u32 = unsafe { ::std::mem::transmute(EnableRopCallerCheck) };
            EnableRopCallerCheck as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let AuditRopCallerCheck: u32 = unsafe { ::std::mem::transmute(AuditRopCallerCheck) };
            AuditRopCallerCheck as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let EnableRopSimExec: u32 = unsafe { ::std::mem::transmute(EnableRopSimExec) };
            EnableRopSimExec as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let AuditRopSimExec: u32 = unsafe { ::std::mem::transmute(AuditRopSimExec) };
            AuditRopSimExec as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY =
    _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
pub type PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY =
    *mut _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn NoChildProcessCreation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NoChildProcessCreation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NoChildProcessCreation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_NoChildProcessCreation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditNoChildProcessCreation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditNoChildProcessCreation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditNoChildProcessCreation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditNoChildProcessCreation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AllowSecureProcessCreation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AllowSecureProcessCreation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllowSecureProcessCreation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AllowSecureProcessCreation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        NoChildProcessCreation: DWORD,
        AuditNoChildProcessCreation: DWORD,
        AllowSecureProcessCreation: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let NoChildProcessCreation: u32 =
                unsafe { ::std::mem::transmute(NoChildProcessCreation) };
            NoChildProcessCreation as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AuditNoChildProcessCreation: u32 =
                unsafe { ::std::mem::transmute(AuditNoChildProcessCreation) };
            AuditNoChildProcessCreation as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let AllowSecureProcessCreation: u32 =
                unsafe { ::std::mem::transmute(AllowSecureProcessCreation) };
            AllowSecureProcessCreation as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1,
        Flags
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_CHILD_PROCESS_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_CHILD_PROCESS_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_CHILD_PROCESS_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_CHILD_PROCESS_POLICY = _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
pub type PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = *mut _PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1:
        _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn SmtBranchTargetIsolation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SmtBranchTargetIsolation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SmtBranchTargetIsolation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SmtBranchTargetIsolation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsolateSecurityDomain(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsolateSecurityDomain(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsolateSecurityDomain_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsolateSecurityDomain_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DisablePageCombine(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisablePageCombine(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisablePageCombine_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisablePageCombine_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SpeculativeStoreBypassDisable(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SpeculativeStoreBypassDisable(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SpeculativeStoreBypassDisable_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SpeculativeStoreBypassDisable_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RestrictCoreSharing(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_RestrictCoreSharing(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RestrictCoreSharing_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RestrictCoreSharing_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                27u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                27u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SmtBranchTargetIsolation: DWORD,
        IsolateSecurityDomain: DWORD,
        DisablePageCombine: DWORD,
        SpeculativeStoreBypassDisable: DWORD,
        RestrictCoreSharing: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let SmtBranchTargetIsolation: u32 =
                unsafe { ::std::mem::transmute(SmtBranchTargetIsolation) };
            SmtBranchTargetIsolation as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IsolateSecurityDomain: u32 =
                unsafe { ::std::mem::transmute(IsolateSecurityDomain) };
            IsolateSecurityDomain as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DisablePageCombine: u32 = unsafe { ::std::mem::transmute(DisablePageCombine) };
            DisablePageCombine as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let SpeculativeStoreBypassDisable: u32 =
                unsafe { ::std::mem::transmute(SpeculativeStoreBypassDisable) };
            SpeculativeStoreBypassDisable as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let RestrictCoreSharing: u32 = unsafe { ::std::mem::transmute(RestrictCoreSharing) };
            RestrictCoreSharing as u64
        });
        __bindgen_bitfield_unit.set(5usize, 27u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY =
    _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
pub type PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY =
    *mut _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnableUserShadowStack(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableUserShadowStack(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableUserShadowStack_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableUserShadowStack_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditUserShadowStack(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditUserShadowStack(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditUserShadowStack_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditUserShadowStack_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetContextIpValidation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SetContextIpValidation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetContextIpValidation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetContextIpValidation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditSetContextIpValidation(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditSetContextIpValidation(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditSetContextIpValidation_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditSetContextIpValidation_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EnableUserShadowStackStrictMode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnableUserShadowStackStrictMode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnableUserShadowStackStrictMode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnableUserShadowStackStrictMode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn BlockNonCetBinaries(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_BlockNonCetBinaries(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BlockNonCetBinaries_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_BlockNonCetBinaries_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn BlockNonCetBinariesNonEhcont(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_BlockNonCetBinariesNonEhcont(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn BlockNonCetBinariesNonEhcont_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_BlockNonCetBinariesNonEhcont_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditBlockNonCetBinaries(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditBlockNonCetBinaries(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditBlockNonCetBinaries_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditBlockNonCetBinaries_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn CetDynamicApisOutOfProcOnly(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_CetDynamicApisOutOfProcOnly(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn CetDynamicApisOutOfProcOnly_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_CetDynamicApisOutOfProcOnly_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn SetContextIpValidationRelaxedMode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SetContextIpValidationRelaxedMode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SetContextIpValidationRelaxedMode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SetContextIpValidationRelaxedMode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                22u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                22u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnableUserShadowStack: DWORD,
        AuditUserShadowStack: DWORD,
        SetContextIpValidation: DWORD,
        AuditSetContextIpValidation: DWORD,
        EnableUserShadowStackStrictMode: DWORD,
        BlockNonCetBinaries: DWORD,
        BlockNonCetBinariesNonEhcont: DWORD,
        AuditBlockNonCetBinaries: DWORD,
        CetDynamicApisOutOfProcOnly: DWORD,
        SetContextIpValidationRelaxedMode: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnableUserShadowStack: u32 =
                unsafe { ::std::mem::transmute(EnableUserShadowStack) };
            EnableUserShadowStack as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AuditUserShadowStack: u32 = unsafe { ::std::mem::transmute(AuditUserShadowStack) };
            AuditUserShadowStack as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let SetContextIpValidation: u32 =
                unsafe { ::std::mem::transmute(SetContextIpValidation) };
            SetContextIpValidation as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let AuditSetContextIpValidation: u32 =
                unsafe { ::std::mem::transmute(AuditSetContextIpValidation) };
            AuditSetContextIpValidation as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let EnableUserShadowStackStrictMode: u32 =
                unsafe { ::std::mem::transmute(EnableUserShadowStackStrictMode) };
            EnableUserShadowStackStrictMode as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let BlockNonCetBinaries: u32 = unsafe { ::std::mem::transmute(BlockNonCetBinaries) };
            BlockNonCetBinaries as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let BlockNonCetBinariesNonEhcont: u32 =
                unsafe { ::std::mem::transmute(BlockNonCetBinariesNonEhcont) };
            BlockNonCetBinariesNonEhcont as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let AuditBlockNonCetBinaries: u32 =
                unsafe { ::std::mem::transmute(AuditBlockNonCetBinaries) };
            AuditBlockNonCetBinaries as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let CetDynamicApisOutOfProcOnly: u32 =
                unsafe { ::std::mem::transmute(CetDynamicApisOutOfProcOnly) };
            CetDynamicApisOutOfProcOnly as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let SetContextIpValidationRelaxedMode: u32 =
                unsafe { ::std::mem::transmute(SetContextIpValidationRelaxedMode) };
            SetContextIpValidationRelaxedMode as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1"][::std::mem::align_of::<
        _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY = _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
pub type PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY =
    *mut _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnablePointerAuthUserIp(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnablePointerAuthUserIp(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnablePointerAuthUserIp_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnablePointerAuthUserIp_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnablePointerAuthUserIp: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnablePointerAuthUserIp: u32 =
                unsafe { ::std::mem::transmute(EnablePointerAuthUserIp) };
            EnablePointerAuthUserIp as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1"][::std::mem::align_of::<
        _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY = _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
pub type PPROCESS_MITIGATION_USER_POINTER_AUTH_POLICY =
    *mut _PROCESS_MITIGATION_USER_POINTER_AUTH_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY {
    pub __bindgen_anon_1: _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1 {
    pub Flags: DWORD,
    pub __bindgen_anon_1: _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn EnforceRedirectionTrust(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EnforceRedirectionTrust(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EnforceRedirectionTrust_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EnforceRedirectionTrust_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AuditRedirectionTrust(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AuditRedirectionTrust(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AuditRedirectionTrust_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AuditRedirectionTrust_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EnforceRedirectionTrust: DWORD,
        AuditRedirectionTrust: DWORD,
        ReservedFlags: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let EnforceRedirectionTrust: u32 =
                unsafe { ::std::mem::transmute(EnforceRedirectionTrust) };
            EnforceRedirectionTrust as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AuditRedirectionTrust: u32 =
                unsafe { ::std::mem::transmute(AuditRedirectionTrust) };
            AuditRedirectionTrust as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let ReservedFlags: u32 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1"][::std::mem::size_of::<
        _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1"][::std::mem::align_of::<
        _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY"]
        [::std::mem::size_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY>() - 4usize];
    ["Alignment of _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY"]
        [::std::mem::align_of::<_PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY>() - 4usize];
};
pub type PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY = _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
pub type PPROCESS_MITIGATION_REDIRECTION_TRUST_POLICY =
    *mut _PROCESS_MITIGATION_REDIRECTION_TRUST_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_NETWORK_COUNTERS {
    pub BytesIn: DWORD64,
    pub BytesOut: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_NETWORK_COUNTERS"]
        [::std::mem::size_of::<_PROCESS_NETWORK_COUNTERS>() - 16usize];
    ["Alignment of _PROCESS_NETWORK_COUNTERS"]
        [::std::mem::align_of::<_PROCESS_NETWORK_COUNTERS>() - 8usize];
    ["Offset of field: _PROCESS_NETWORK_COUNTERS::BytesIn"]
        [::std::mem::offset_of!(_PROCESS_NETWORK_COUNTERS, BytesIn) - 0usize];
    ["Offset of field: _PROCESS_NETWORK_COUNTERS::BytesOut"]
        [::std::mem::offset_of!(_PROCESS_NETWORK_COUNTERS, BytesOut) - 8usize];
};
pub type PROCESS_NETWORK_COUNTERS = _PROCESS_NETWORK_COUNTERS;
pub type PPROCESS_NETWORK_COUNTERS = *mut _PROCESS_NETWORK_COUNTERS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    pub TotalUserTime: LARGE_INTEGER,
    pub TotalKernelTime: LARGE_INTEGER,
    pub ThisPeriodTotalUserTime: LARGE_INTEGER,
    pub ThisPeriodTotalKernelTime: LARGE_INTEGER,
    pub TotalPageFaultCount: DWORD,
    pub TotalProcesses: DWORD,
    pub ActiveProcesses: DWORD,
    pub TotalTerminatedProcesses: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION>() - 48usize];
    ["Alignment of _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::TotalUserTime"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, TotalUserTime) - 0usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::TotalKernelTime"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, TotalKernelTime) - 8usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::ThisPeriodTotalUserTime"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
        ThisPeriodTotalUserTime
    )
        - 16usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::ThisPeriodTotalKernelTime"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
        ThisPeriodTotalKernelTime
    )
        - 24usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::TotalPageFaultCount"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
        TotalPageFaultCount
    ) - 32usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::TotalProcesses"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, TotalProcesses) - 36usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::ActiveProcesses"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
        ActiveProcesses
    ) - 40usize];
    ["Offset of field: _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION::TotalTerminatedProcesses"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
        TotalTerminatedProcesses
    )
        - 44usize];
};
pub type JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
pub type PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = *mut _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    pub PerProcessUserTimeLimit: LARGE_INTEGER,
    pub PerJobUserTimeLimit: LARGE_INTEGER,
    pub LimitFlags: DWORD,
    pub MinimumWorkingSetSize: SIZE_T,
    pub MaximumWorkingSetSize: SIZE_T,
    pub ActiveProcessLimit: DWORD,
    pub Affinity: ULONG_PTR,
    pub PriorityClass: DWORD,
    pub SchedulingClass: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_BASIC_LIMIT_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_BASIC_LIMIT_INFORMATION>() - 64usize];
    ["Alignment of _JOBOBJECT_BASIC_LIMIT_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_BASIC_LIMIT_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::PerProcessUserTimeLimit"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_LIMIT_INFORMATION,
        PerProcessUserTimeLimit
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::PerJobUserTimeLimit"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_LIMIT_INFORMATION, PerJobUserTimeLimit) - 8usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::LimitFlags"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_LIMIT_INFORMATION, LimitFlags) - 16usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::MinimumWorkingSetSize"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_LIMIT_INFORMATION,
        MinimumWorkingSetSize
    ) - 24usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::MaximumWorkingSetSize"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_LIMIT_INFORMATION,
        MaximumWorkingSetSize
    ) - 32usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::ActiveProcessLimit"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_LIMIT_INFORMATION, ActiveProcessLimit) - 40usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::Affinity"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_LIMIT_INFORMATION, Affinity) - 48usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::PriorityClass"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_LIMIT_INFORMATION, PriorityClass) - 56usize];
    ["Offset of field: _JOBOBJECT_BASIC_LIMIT_INFORMATION::SchedulingClass"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_LIMIT_INFORMATION, SchedulingClass) - 60usize];
};
pub type JOBOBJECT_BASIC_LIMIT_INFORMATION = _JOBOBJECT_BASIC_LIMIT_INFORMATION;
pub type PJOBOBJECT_BASIC_LIMIT_INFORMATION = *mut _JOBOBJECT_BASIC_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    pub BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,
    pub IoInfo: IO_COUNTERS,
    pub ProcessMemoryLimit: SIZE_T,
    pub JobMemoryLimit: SIZE_T,
    pub PeakProcessMemoryUsed: SIZE_T,
    pub PeakJobMemoryUsed: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_EXTENDED_LIMIT_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_EXTENDED_LIMIT_INFORMATION>() - 144usize];
    ["Alignment of _JOBOBJECT_EXTENDED_LIMIT_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_EXTENDED_LIMIT_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_EXTENDED_LIMIT_INFORMATION::BasicLimitInformation"][::std::mem::offset_of!(
        _JOBOBJECT_EXTENDED_LIMIT_INFORMATION,
        BasicLimitInformation
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_EXTENDED_LIMIT_INFORMATION::IoInfo"]
        [::std::mem::offset_of!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION, IoInfo) - 64usize];
    ["Offset of field: _JOBOBJECT_EXTENDED_LIMIT_INFORMATION::ProcessMemoryLimit"][::std::mem::offset_of!(
        _JOBOBJECT_EXTENDED_LIMIT_INFORMATION,
        ProcessMemoryLimit
    ) - 112usize];
    ["Offset of field: _JOBOBJECT_EXTENDED_LIMIT_INFORMATION::JobMemoryLimit"]
        [::std::mem::offset_of!(_JOBOBJECT_EXTENDED_LIMIT_INFORMATION, JobMemoryLimit) - 120usize];
    ["Offset of field: _JOBOBJECT_EXTENDED_LIMIT_INFORMATION::PeakProcessMemoryUsed"][::std::mem::offset_of!(
        _JOBOBJECT_EXTENDED_LIMIT_INFORMATION,
        PeakProcessMemoryUsed
    ) - 128usize];
    ["Offset of field: _JOBOBJECT_EXTENDED_LIMIT_INFORMATION::PeakJobMemoryUsed"][::std::mem::offset_of!(
        _JOBOBJECT_EXTENDED_LIMIT_INFORMATION,
        PeakJobMemoryUsed
    ) - 136usize];
};
pub type JOBOBJECT_EXTENDED_LIMIT_INFORMATION = _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
pub type PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = *mut _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    pub NumberOfAssignedProcesses: DWORD,
    pub NumberOfProcessIdsInList: DWORD,
    pub ProcessIdList: [ULONG_PTR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_BASIC_PROCESS_ID_LIST"]
        [::std::mem::size_of::<_JOBOBJECT_BASIC_PROCESS_ID_LIST>() - 16usize];
    ["Alignment of _JOBOBJECT_BASIC_PROCESS_ID_LIST"]
        [::std::mem::align_of::<_JOBOBJECT_BASIC_PROCESS_ID_LIST>() - 8usize];
    ["Offset of field: _JOBOBJECT_BASIC_PROCESS_ID_LIST::NumberOfAssignedProcesses"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_PROCESS_ID_LIST,
        NumberOfAssignedProcesses
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_BASIC_PROCESS_ID_LIST::NumberOfProcessIdsInList"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_PROCESS_ID_LIST,
        NumberOfProcessIdsInList
    ) - 4usize];
    ["Offset of field: _JOBOBJECT_BASIC_PROCESS_ID_LIST::ProcessIdList"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_PROCESS_ID_LIST, ProcessIdList) - 8usize];
};
pub type JOBOBJECT_BASIC_PROCESS_ID_LIST = _JOBOBJECT_BASIC_PROCESS_ID_LIST;
pub type PJOBOBJECT_BASIC_PROCESS_ID_LIST = *mut _JOBOBJECT_BASIC_PROCESS_ID_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    pub UIRestrictionsClass: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_BASIC_UI_RESTRICTIONS"]
        [::std::mem::size_of::<_JOBOBJECT_BASIC_UI_RESTRICTIONS>() - 4usize];
    ["Alignment of _JOBOBJECT_BASIC_UI_RESTRICTIONS"]
        [::std::mem::align_of::<_JOBOBJECT_BASIC_UI_RESTRICTIONS>() - 4usize];
    ["Offset of field: _JOBOBJECT_BASIC_UI_RESTRICTIONS::UIRestrictionsClass"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_UI_RESTRICTIONS, UIRestrictionsClass) - 0usize];
};
pub type JOBOBJECT_BASIC_UI_RESTRICTIONS = _JOBOBJECT_BASIC_UI_RESTRICTIONS;
pub type PJOBOBJECT_BASIC_UI_RESTRICTIONS = *mut _JOBOBJECT_BASIC_UI_RESTRICTIONS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    pub SecurityLimitFlags: DWORD,
    pub JobToken: HANDLE,
    pub SidsToDisable: PTOKEN_GROUPS,
    pub PrivilegesToDelete: PTOKEN_PRIVILEGES,
    pub RestrictedSids: PTOKEN_GROUPS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_SECURITY_LIMIT_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_SECURITY_LIMIT_INFORMATION>() - 40usize];
    ["Alignment of _JOBOBJECT_SECURITY_LIMIT_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_SECURITY_LIMIT_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_SECURITY_LIMIT_INFORMATION::SecurityLimitFlags"][::std::mem::offset_of!(
        _JOBOBJECT_SECURITY_LIMIT_INFORMATION,
        SecurityLimitFlags
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_SECURITY_LIMIT_INFORMATION::JobToken"]
        [::std::mem::offset_of!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION, JobToken) - 8usize];
    ["Offset of field: _JOBOBJECT_SECURITY_LIMIT_INFORMATION::SidsToDisable"]
        [::std::mem::offset_of!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION, SidsToDisable) - 16usize];
    ["Offset of field: _JOBOBJECT_SECURITY_LIMIT_INFORMATION::PrivilegesToDelete"][::std::mem::offset_of!(
        _JOBOBJECT_SECURITY_LIMIT_INFORMATION,
        PrivilegesToDelete
    ) - 24usize];
    ["Offset of field: _JOBOBJECT_SECURITY_LIMIT_INFORMATION::RestrictedSids"]
        [::std::mem::offset_of!(_JOBOBJECT_SECURITY_LIMIT_INFORMATION, RestrictedSids) - 32usize];
};
pub type JOBOBJECT_SECURITY_LIMIT_INFORMATION = _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
pub type PJOBOBJECT_SECURITY_LIMIT_INFORMATION = *mut _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    pub EndOfJobTimeAction: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_END_OF_JOB_TIME_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_END_OF_JOB_TIME_INFORMATION>() - 4usize];
    ["Alignment of _JOBOBJECT_END_OF_JOB_TIME_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_END_OF_JOB_TIME_INFORMATION>() - 4usize];
    ["Offset of field: _JOBOBJECT_END_OF_JOB_TIME_INFORMATION::EndOfJobTimeAction"][::std::mem::offset_of!(
        _JOBOBJECT_END_OF_JOB_TIME_INFORMATION,
        EndOfJobTimeAction
    ) - 0usize];
};
pub type JOBOBJECT_END_OF_JOB_TIME_INFORMATION = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
pub type PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = *mut _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    pub CompletionKey: PVOID,
    pub CompletionPort: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_ASSOCIATE_COMPLETION_PORT"]
        [::std::mem::size_of::<_JOBOBJECT_ASSOCIATE_COMPLETION_PORT>() - 16usize];
    ["Alignment of _JOBOBJECT_ASSOCIATE_COMPLETION_PORT"]
        [::std::mem::align_of::<_JOBOBJECT_ASSOCIATE_COMPLETION_PORT>() - 8usize];
    ["Offset of field: _JOBOBJECT_ASSOCIATE_COMPLETION_PORT::CompletionKey"]
        [::std::mem::offset_of!(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT, CompletionKey) - 0usize];
    ["Offset of field: _JOBOBJECT_ASSOCIATE_COMPLETION_PORT::CompletionPort"]
        [::std::mem::offset_of!(_JOBOBJECT_ASSOCIATE_COMPLETION_PORT, CompletionPort) - 8usize];
};
pub type JOBOBJECT_ASSOCIATE_COMPLETION_PORT = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
pub type PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = *mut _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    pub BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
    pub IoInfo: IO_COUNTERS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>() - 96usize];
    ["Alignment of _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION::BasicInfo"][::std::mem::offset_of!(
        _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION,
        BasicInfo
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION::IoInfo"]
        [::std::mem::offset_of!(_JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, IoInfo) - 48usize];
};
pub type JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION =
    _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
pub type PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION =
    *mut _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION {
    pub DataBytesIn: DWORD64,
    pub DataBytesOut: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION>() - 16usize];
    ["Alignment of _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION::DataBytesIn"]
        [::std::mem::offset_of!(_JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION, DataBytesIn) - 0usize];
    ["Offset of field: _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION::DataBytesOut"]
        [::std::mem::offset_of!(_JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION, DataBytesOut) - 8usize];
};
pub type JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION = _JOBOBJECT_NETWORK_ACCOUNTING_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_JOBSET_INFORMATION {
    pub MemberLevel: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_JOBSET_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_JOBSET_INFORMATION>() - 4usize];
    ["Alignment of _JOBOBJECT_JOBSET_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_JOBSET_INFORMATION>() - 4usize];
    ["Offset of field: _JOBOBJECT_JOBSET_INFORMATION::MemberLevel"]
        [::std::mem::offset_of!(_JOBOBJECT_JOBSET_INFORMATION, MemberLevel) - 0usize];
};
pub type JOBOBJECT_JOBSET_INFORMATION = _JOBOBJECT_JOBSET_INFORMATION;
pub type PJOBOBJECT_JOBSET_INFORMATION = *mut _JOBOBJECT_JOBSET_INFORMATION;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceLow: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 1;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceMedium: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 2;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_ToleranceHigh: _JOBOBJECT_RATE_CONTROL_TOLERANCE = 3;
pub type _JOBOBJECT_RATE_CONTROL_TOLERANCE = ::std::os::raw::c_int;
pub use self::_JOBOBJECT_RATE_CONTROL_TOLERANCE as JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub type PJOBOBJECT_RATE_CONTROL_TOLERANCE = *mut _JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalShort:
    _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 1;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalMedium:
    _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 2;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL_ToleranceIntervalLong:
    _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = 3;
pub type _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = ::std::os::raw::c_int;
pub use self::_JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL as JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
pub type PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL =
    *mut _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    pub IoReadBytesLimit: DWORD64,
    pub IoWriteBytesLimit: DWORD64,
    pub PerJobUserTimeLimit: LARGE_INTEGER,
    pub JobMemoryLimit: DWORD64,
    pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    pub LimitFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>() - 48usize];
    ["Alignment of _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::IoReadBytesLimit"][::std::mem::offset_of!(
        _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,
        IoReadBytesLimit
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::IoWriteBytesLimit"][::std::mem::offset_of!(
        _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,
        IoWriteBytesLimit
    ) - 8usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::PerJobUserTimeLimit"][::std::mem::offset_of!(
        _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,
        PerJobUserTimeLimit
    )
        - 16usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::JobMemoryLimit"][::std::mem::offset_of!(
        _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,
        JobMemoryLimit
    ) - 24usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::RateControlTolerance"][::std::mem::offset_of!(
        _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,
        RateControlTolerance
    )
        - 32usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::RateControlToleranceInterval"][::std::mem::offset_of!(
        _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION,
        RateControlToleranceInterval
    )
        - 36usize];
    ["Offset of field: _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION::LimitFlags"]
        [::std::mem::offset_of!(_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, LimitFlags) - 40usize];
};
pub type JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
pub type PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = *mut _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
    pub IoReadBytesLimit: DWORD64,
    pub IoWriteBytesLimit: DWORD64,
    pub PerJobUserTimeLimit: LARGE_INTEGER,
    pub __bindgen_anon_1: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
    pub __bindgen_anon_2: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
    pub __bindgen_anon_3: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
    pub LimitFlags: DWORD,
    pub IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub JobLowMemoryLimit: DWORD64,
    pub IoRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    pub NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub NetRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1 {
    pub JobHighMemoryLimit: DWORD64,
    pub JobMemoryLimit: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1"][::std::mem::size_of::<
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1"][::std::mem::align_of::<
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
    >() - 8usize];
    [
        "Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1::JobHighMemoryLimit",
    ][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
        JobHighMemoryLimit
    ) - 0usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1::JobMemoryLimit"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1,
        JobMemoryLimit
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2 {
    pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2"][::std::mem::size_of::<
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
    >() - 4usize];
    ["Alignment of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2"][::std::mem::align_of::<
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
    >() - 4usize];
    [
        "Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2::RateControlTolerance",
    ][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
        RateControlTolerance
    ) - 0usize];
    [
        "Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2::CpuRateControlTolerance",
    ][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2,
        CpuRateControlTolerance
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3 {
    pub RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    pub CpuRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3"][::std::mem::size_of::<
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
    >() - 4usize];
    ["Alignment of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3"][::std::mem::align_of::<
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
    >() - 4usize];
    [
        "Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3::RateControlToleranceInterval",
    ][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
        RateControlToleranceInterval
    ) - 0usize];
    [
        "Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3::CpuRateControlToleranceInterval",
    ][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3,
        CpuRateControlToleranceInterval
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2"]
        [::std::mem::size_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2>() - 72usize];
    ["Alignment of JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2"]
        [::std::mem::align_of::<JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2>() - 8usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::IoReadBytesLimit"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        IoReadBytesLimit
    ) - 0usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::IoWriteBytesLimit"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        IoWriteBytesLimit
    ) - 8usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::PerJobUserTimeLimit"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        PerJobUserTimeLimit
    )
        - 16usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::LimitFlags"]
        [::std::mem::offset_of!(JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2, LimitFlags) - 40usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::IoRateControlTolerance"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        IoRateControlTolerance
    )
        - 44usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::JobLowMemoryLimit"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        JobLowMemoryLimit
    ) - 48usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::IoRateControlToleranceInterval"]
        [::std::mem::offset_of!(
            JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
            IoRateControlToleranceInterval
        ) - 56usize];
    ["Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::NetRateControlTolerance"][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        NetRateControlTolerance
    )
        - 60usize];
    [
        "Offset of field: JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2::NetRateControlToleranceInterval",
    ][::std::mem::offset_of!(
        JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2,
        NetRateControlToleranceInterval
    ) - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    pub LimitFlags: DWORD,
    pub ViolationLimitFlags: DWORD,
    pub IoReadBytes: DWORD64,
    pub IoReadBytesLimit: DWORD64,
    pub IoWriteBytes: DWORD64,
    pub IoWriteBytesLimit: DWORD64,
    pub PerJobUserTime: LARGE_INTEGER,
    pub PerJobUserTimeLimit: LARGE_INTEGER,
    pub JobMemory: DWORD64,
    pub JobMemoryLimit: DWORD64,
    pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_LIMIT_VIOLATION_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_LIMIT_VIOLATION_INFORMATION>() - 80usize];
    ["Alignment of _JOBOBJECT_LIMIT_VIOLATION_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_LIMIT_VIOLATION_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::LimitFlags"]
        [::std::mem::offset_of!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION, LimitFlags) - 0usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::ViolationLimitFlags"][::std::mem::offset_of!(
        _JOBOBJECT_LIMIT_VIOLATION_INFORMATION,
        ViolationLimitFlags
    ) - 4usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::IoReadBytes"]
        [::std::mem::offset_of!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION, IoReadBytes) - 8usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::IoReadBytesLimit"][::std::mem::offset_of!(
        _JOBOBJECT_LIMIT_VIOLATION_INFORMATION,
        IoReadBytesLimit
    ) - 16usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::IoWriteBytes"]
        [::std::mem::offset_of!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION, IoWriteBytes) - 24usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::IoWriteBytesLimit"][::std::mem::offset_of!(
        _JOBOBJECT_LIMIT_VIOLATION_INFORMATION,
        IoWriteBytesLimit
    ) - 32usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::PerJobUserTime"]
        [::std::mem::offset_of!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION, PerJobUserTime) - 40usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::PerJobUserTimeLimit"][::std::mem::offset_of!(
        _JOBOBJECT_LIMIT_VIOLATION_INFORMATION,
        PerJobUserTimeLimit
    ) - 48usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::JobMemory"]
        [::std::mem::offset_of!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION, JobMemory) - 56usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::JobMemoryLimit"]
        [::std::mem::offset_of!(_JOBOBJECT_LIMIT_VIOLATION_INFORMATION, JobMemoryLimit) - 64usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::RateControlTolerance"][::std::mem::offset_of!(
        _JOBOBJECT_LIMIT_VIOLATION_INFORMATION,
        RateControlTolerance
    ) - 72usize];
    ["Offset of field: _JOBOBJECT_LIMIT_VIOLATION_INFORMATION::RateControlToleranceLimit"][::std::mem::offset_of!(
        _JOBOBJECT_LIMIT_VIOLATION_INFORMATION,
        RateControlToleranceLimit
    )
        - 76usize];
};
pub type JOBOBJECT_LIMIT_VIOLATION_INFORMATION = _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
pub type PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = *mut _JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
    pub LimitFlags: DWORD,
    pub ViolationLimitFlags: DWORD,
    pub IoReadBytes: DWORD64,
    pub IoReadBytesLimit: DWORD64,
    pub IoWriteBytes: DWORD64,
    pub IoWriteBytesLimit: DWORD64,
    pub PerJobUserTime: LARGE_INTEGER,
    pub PerJobUserTimeLimit: LARGE_INTEGER,
    pub JobMemory: DWORD64,
    pub __bindgen_anon_1: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1,
    pub __bindgen_anon_2: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2,
    pub __bindgen_anon_3: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3,
    pub JobLowMemoryLimit: DWORD64,
    pub IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub IoRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub NetRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1 {
    pub JobHighMemoryLimit: DWORD64,
    pub JobMemoryLimit: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1"]
        [::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1>() - 8usize];
    ["Alignment of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1"]
        [::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1::JobHighMemoryLimit"]
        [::std::mem::offset_of!(
            JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1,
            JobHighMemoryLimit
        ) - 0usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1::JobMemoryLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1,
        JobMemoryLimit
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2 {
    pub RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2"]
        [::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2>() - 4usize];
    ["Alignment of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2"]
        [::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2>() - 4usize];
    [
        "Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2::RateControlTolerance",
    ][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2,
        RateControlTolerance
    ) - 0usize];
    [
        "Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2::CpuRateControlTolerance",
    ][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2,
        CpuRateControlTolerance
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3 {
    pub RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    pub CpuRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3"]
        [::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3>() - 4usize];
    ["Alignment of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3"]
        [::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3>() - 4usize];
    [
        "Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3::RateControlToleranceLimit",
    ][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3,
        RateControlToleranceLimit
    ) - 0usize];
    [
        "Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3::CpuRateControlToleranceLimit",
    ][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3,
        CpuRateControlToleranceLimit
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2"]
        [::std::mem::size_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2>() - 104usize];
    ["Alignment of JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2"]
        [::std::mem::align_of::<JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2>() - 8usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::LimitFlags"]
        [::std::mem::offset_of!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2, LimitFlags) - 0usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::ViolationLimitFlags"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        ViolationLimitFlags
    ) - 4usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::IoReadBytes"]
        [::std::mem::offset_of!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2, IoReadBytes) - 8usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::IoReadBytesLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        IoReadBytesLimit
    ) - 16usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::IoWriteBytes"]
        [::std::mem::offset_of!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2, IoWriteBytes) - 24usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::IoWriteBytesLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        IoWriteBytesLimit
    ) - 32usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::PerJobUserTime"]
        [::std::mem::offset_of!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2, PerJobUserTime) - 40usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::PerJobUserTimeLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        PerJobUserTimeLimit
    ) - 48usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::JobMemory"]
        [::std::mem::offset_of!(JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2, JobMemory) - 56usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::JobLowMemoryLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        JobLowMemoryLimit
    ) - 80usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::IoRateControlTolerance"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        IoRateControlTolerance
    )
        - 88usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::IoRateControlToleranceLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        IoRateControlToleranceLimit
    )
        - 92usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::NetRateControlTolerance"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        NetRateControlTolerance
    )
        - 96usize];
    ["Offset of field: JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2::NetRateControlToleranceLimit"][::std::mem::offset_of!(
        JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2,
        NetRateControlToleranceLimit
    )
        - 100usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    pub ControlFlags: DWORD,
    pub __bindgen_anon_1: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1 {
    pub CpuRate: DWORD,
    pub Weight: DWORD,
    pub __bindgen_anon_1: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    pub MinRate: WORD,
    pub MaxRate: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1>(
        ) - 2usize];
    [
        "Offset of field: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1::MinRate",
    ][::std::mem::offset_of!(
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        MinRate
    ) - 0usize];
    [
        "Offset of field: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1::MaxRate",
    ][::std::mem::offset_of!(
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        MaxRate
    ) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1::CpuRate"][::std::mem::offset_of!(
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1,
        CpuRate
    ) - 0usize];
    ["Offset of field: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1::Weight"][::std::mem::offset_of!(
        _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1,
        Weight
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>() - 8usize];
    ["Alignment of _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION>() - 4usize];
    ["Offset of field: _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION::ControlFlags"]
        [::std::mem::offset_of!(_JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, ControlFlags) - 0usize];
};
pub type JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub type PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = *mut _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_ENABLE:
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 1;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH:
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 2;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG:
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 4;
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS_JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS:
    JOB_OBJECT_NET_RATE_CONTROL_FLAGS = 7;
pub type JOB_OBJECT_NET_RATE_CONTROL_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
    pub MaxBandwidth: DWORD64,
    pub ControlFlags: JOB_OBJECT_NET_RATE_CONTROL_FLAGS,
    pub DscpTag: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_NET_RATE_CONTROL_INFORMATION"]
        [::std::mem::size_of::<JOBOBJECT_NET_RATE_CONTROL_INFORMATION>() - 16usize];
    ["Alignment of JOBOBJECT_NET_RATE_CONTROL_INFORMATION"]
        [::std::mem::align_of::<JOBOBJECT_NET_RATE_CONTROL_INFORMATION>() - 8usize];
    ["Offset of field: JOBOBJECT_NET_RATE_CONTROL_INFORMATION::MaxBandwidth"]
        [::std::mem::offset_of!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION, MaxBandwidth) - 0usize];
    ["Offset of field: JOBOBJECT_NET_RATE_CONTROL_INFORMATION::ControlFlags"]
        [::std::mem::offset_of!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION, ControlFlags) - 8usize];
    ["Offset of field: JOBOBJECT_NET_RATE_CONTROL_INFORMATION::DscpTag"]
        [::std::mem::offset_of!(JOBOBJECT_NET_RATE_CONTROL_INFORMATION, DscpTag) - 12usize];
};
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_ENABLE:
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 1;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME:
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 2;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL:
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 4;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP : JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 8 ;
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS_JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS:
    JOB_OBJECT_IO_RATE_CONTROL_FLAGS = 15;
pub type JOB_OBJECT_IO_RATE_CONTROL_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
    pub MaxIops: LONG64,
    pub MaxBandwidth: LONG64,
    pub ReservationIops: LONG64,
    pub VolumeName: PWSTR,
    pub BaseIoSize: DWORD,
    pub ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    pub VolumeNameLength: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE"]
        [::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE>() - 48usize];
    ["Alignment of JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE"]
        [::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE>() - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::MaxIops"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE, MaxIops) - 0usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::MaxBandwidth"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE,
        MaxBandwidth
    ) - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::ReservationIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE,
        ReservationIops
    ) - 16usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::VolumeName"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE,
        VolumeName
    ) - 24usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::BaseIoSize"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE,
        BaseIoSize
    ) - 32usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::ControlFlags"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE,
        ControlFlags
    ) - 36usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE::VolumeNameLength"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE,
        VolumeNameLength
    )
        - 40usize];
};
pub type JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 =
    JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
    pub MaxIops: LONG64,
    pub MaxBandwidth: LONG64,
    pub ReservationIops: LONG64,
    pub VolumeName: PWSTR,
    pub BaseIoSize: DWORD,
    pub ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    pub VolumeNameLength: WORD,
    pub CriticalReservationIops: LONG64,
    pub ReservationBandwidth: LONG64,
    pub CriticalReservationBandwidth: LONG64,
    pub MaxTimePercent: LONG64,
    pub ReservationTimePercent: LONG64,
    pub CriticalReservationTimePercent: LONG64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2"]
        [::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2>() - 96usize];
    ["Alignment of JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2"]
        [::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2>() - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::MaxIops"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2, MaxIops) - 0usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::MaxBandwidth"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        MaxBandwidth
    ) - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::ReservationIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        ReservationIops
    )
        - 16usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::VolumeName"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        VolumeName
    ) - 24usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::BaseIoSize"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        BaseIoSize
    ) - 32usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::ControlFlags"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        ControlFlags
    ) - 36usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::VolumeNameLength"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        VolumeNameLength
    )
        - 40usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::CriticalReservationIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        CriticalReservationIops
    )
        - 48usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::ReservationBandwidth"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        ReservationBandwidth
    )
        - 56usize];
    [
        "Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::CriticalReservationBandwidth",
    ][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        CriticalReservationBandwidth
    ) - 64usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::MaxTimePercent"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        MaxTimePercent
    )
        - 72usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::ReservationTimePercent"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        ReservationTimePercent
    )
        - 80usize];
    [
        "Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2::CriticalReservationTimePercent",
    ][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2,
        CriticalReservationTimePercent
    ) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
    pub MaxIops: LONG64,
    pub MaxBandwidth: LONG64,
    pub ReservationIops: LONG64,
    pub VolumeName: PWSTR,
    pub BaseIoSize: DWORD,
    pub ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    pub VolumeNameLength: WORD,
    pub CriticalReservationIops: LONG64,
    pub ReservationBandwidth: LONG64,
    pub CriticalReservationBandwidth: LONG64,
    pub MaxTimePercent: LONG64,
    pub ReservationTimePercent: LONG64,
    pub CriticalReservationTimePercent: LONG64,
    pub SoftMaxIops: LONG64,
    pub SoftMaxBandwidth: LONG64,
    pub SoftMaxTimePercent: LONG64,
    pub LimitExcessNotifyIops: LONG64,
    pub LimitExcessNotifyBandwidth: LONG64,
    pub LimitExcessNotifyTimePercent: LONG64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3"]
        [::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3>() - 144usize];
    ["Alignment of JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3"]
        [::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3>() - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::MaxIops"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3, MaxIops) - 0usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::MaxBandwidth"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        MaxBandwidth
    ) - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::ReservationIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        ReservationIops
    )
        - 16usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::VolumeName"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        VolumeName
    ) - 24usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::BaseIoSize"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        BaseIoSize
    ) - 32usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::ControlFlags"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        ControlFlags
    ) - 36usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::VolumeNameLength"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        VolumeNameLength
    )
        - 40usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::CriticalReservationIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        CriticalReservationIops
    )
        - 48usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::ReservationBandwidth"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        ReservationBandwidth
    )
        - 56usize];
    [
        "Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::CriticalReservationBandwidth",
    ][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        CriticalReservationBandwidth
    ) - 64usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::MaxTimePercent"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        MaxTimePercent
    )
        - 72usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::ReservationTimePercent"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        ReservationTimePercent
    )
        - 80usize];
    [
        "Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::CriticalReservationTimePercent",
    ][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        CriticalReservationTimePercent
    ) - 88usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::SoftMaxIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        SoftMaxIops
    ) - 96usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::SoftMaxBandwidth"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        SoftMaxBandwidth
    )
        - 104usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::SoftMaxTimePercent"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        SoftMaxTimePercent
    )
        - 112usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::LimitExcessNotifyIops"][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        LimitExcessNotifyIops
    )
        - 120usize];
    [
        "Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::LimitExcessNotifyBandwidth",
    ][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        LimitExcessNotifyBandwidth
    ) - 128usize];
    [
        "Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3::LimitExcessNotifyTimePercent",
    ][::std::mem::offset_of!(
        JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3,
        LimitExcessNotifyTimePercent
    ) - 136usize];
};
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE:
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 1;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE:
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 2;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS_JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS:
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = 3;
pub type JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
    pub IoCount: ULONG_PTR,
    pub TotalNonOverlappedQueueTime: ULONGLONG,
    pub TotalNonOverlappedServiceTime: ULONGLONG,
    pub TotalSize: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_IO_ATTRIBUTION_STATS"]
        [::std::mem::size_of::<_JOBOBJECT_IO_ATTRIBUTION_STATS>() - 32usize];
    ["Alignment of _JOBOBJECT_IO_ATTRIBUTION_STATS"]
        [::std::mem::align_of::<_JOBOBJECT_IO_ATTRIBUTION_STATS>() - 8usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_STATS::IoCount"]
        [::std::mem::offset_of!(_JOBOBJECT_IO_ATTRIBUTION_STATS, IoCount) - 0usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_STATS::TotalNonOverlappedQueueTime"][::std::mem::offset_of!(
        _JOBOBJECT_IO_ATTRIBUTION_STATS,
        TotalNonOverlappedQueueTime
    ) - 8usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_STATS::TotalNonOverlappedServiceTime"][::std::mem::offset_of!(
        _JOBOBJECT_IO_ATTRIBUTION_STATS,
        TotalNonOverlappedServiceTime
    )
        - 16usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_STATS::TotalSize"]
        [::std::mem::offset_of!(_JOBOBJECT_IO_ATTRIBUTION_STATS, TotalSize) - 24usize];
};
pub type JOBOBJECT_IO_ATTRIBUTION_STATS = _JOBOBJECT_IO_ATTRIBUTION_STATS;
pub type PJOBOBJECT_IO_ATTRIBUTION_STATS = *mut _JOBOBJECT_IO_ATTRIBUTION_STATS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
    pub ControlFlags: DWORD,
    pub ReadStats: JOBOBJECT_IO_ATTRIBUTION_STATS,
    pub WriteStats: JOBOBJECT_IO_ATTRIBUTION_STATS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JOBOBJECT_IO_ATTRIBUTION_INFORMATION"]
        [::std::mem::size_of::<_JOBOBJECT_IO_ATTRIBUTION_INFORMATION>() - 72usize];
    ["Alignment of _JOBOBJECT_IO_ATTRIBUTION_INFORMATION"]
        [::std::mem::align_of::<_JOBOBJECT_IO_ATTRIBUTION_INFORMATION>() - 8usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_INFORMATION::ControlFlags"]
        [::std::mem::offset_of!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION, ControlFlags) - 0usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_INFORMATION::ReadStats"]
        [::std::mem::offset_of!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION, ReadStats) - 8usize];
    ["Offset of field: _JOBOBJECT_IO_ATTRIBUTION_INFORMATION::WriteStats"]
        [::std::mem::offset_of!(_JOBOBJECT_IO_ATTRIBUTION_INFORMATION, WriteStats) - 40usize];
};
pub type JOBOBJECT_IO_ATTRIBUTION_INFORMATION = _JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub type PJOBOBJECT_IO_ATTRIBUTION_INFORMATION = *mut _JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicAccountingInformation: _JOBOBJECTINFOCLASS = 1;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicLimitInformation: _JOBOBJECTINFOCLASS = 2;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicProcessIdList: _JOBOBJECTINFOCLASS = 3;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicUIRestrictions: _JOBOBJECTINFOCLASS = 4;
pub const _JOBOBJECTINFOCLASS_JobObjectSecurityLimitInformation: _JOBOBJECTINFOCLASS = 5;
pub const _JOBOBJECTINFOCLASS_JobObjectEndOfJobTimeInformation: _JOBOBJECTINFOCLASS = 6;
pub const _JOBOBJECTINFOCLASS_JobObjectAssociateCompletionPortInformation: _JOBOBJECTINFOCLASS = 7;
pub const _JOBOBJECTINFOCLASS_JobObjectBasicAndIoAccountingInformation: _JOBOBJECTINFOCLASS = 8;
pub const _JOBOBJECTINFOCLASS_JobObjectExtendedLimitInformation: _JOBOBJECTINFOCLASS = 9;
pub const _JOBOBJECTINFOCLASS_JobObjectJobSetInformation: _JOBOBJECTINFOCLASS = 10;
pub const _JOBOBJECTINFOCLASS_JobObjectGroupInformation: _JOBOBJECTINFOCLASS = 11;
pub const _JOBOBJECTINFOCLASS_JobObjectNotificationLimitInformation: _JOBOBJECTINFOCLASS = 12;
pub const _JOBOBJECTINFOCLASS_JobObjectLimitViolationInformation: _JOBOBJECTINFOCLASS = 13;
pub const _JOBOBJECTINFOCLASS_JobObjectGroupInformationEx: _JOBOBJECTINFOCLASS = 14;
pub const _JOBOBJECTINFOCLASS_JobObjectCpuRateControlInformation: _JOBOBJECTINFOCLASS = 15;
pub const _JOBOBJECTINFOCLASS_JobObjectCompletionFilter: _JOBOBJECTINFOCLASS = 16;
pub const _JOBOBJECTINFOCLASS_JobObjectCompletionCounter: _JOBOBJECTINFOCLASS = 17;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved1Information: _JOBOBJECTINFOCLASS = 18;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved2Information: _JOBOBJECTINFOCLASS = 19;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved3Information: _JOBOBJECTINFOCLASS = 20;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved4Information: _JOBOBJECTINFOCLASS = 21;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved5Information: _JOBOBJECTINFOCLASS = 22;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved6Information: _JOBOBJECTINFOCLASS = 23;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved7Information: _JOBOBJECTINFOCLASS = 24;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved8Information: _JOBOBJECTINFOCLASS = 25;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved9Information: _JOBOBJECTINFOCLASS = 26;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved10Information: _JOBOBJECTINFOCLASS = 27;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved11Information: _JOBOBJECTINFOCLASS = 28;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved12Information: _JOBOBJECTINFOCLASS = 29;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved13Information: _JOBOBJECTINFOCLASS = 30;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved14Information: _JOBOBJECTINFOCLASS = 31;
pub const _JOBOBJECTINFOCLASS_JobObjectNetRateControlInformation: _JOBOBJECTINFOCLASS = 32;
pub const _JOBOBJECTINFOCLASS_JobObjectNotificationLimitInformation2: _JOBOBJECTINFOCLASS = 33;
pub const _JOBOBJECTINFOCLASS_JobObjectLimitViolationInformation2: _JOBOBJECTINFOCLASS = 34;
pub const _JOBOBJECTINFOCLASS_JobObjectCreateSilo: _JOBOBJECTINFOCLASS = 35;
pub const _JOBOBJECTINFOCLASS_JobObjectSiloBasicInformation: _JOBOBJECTINFOCLASS = 36;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved15Information: _JOBOBJECTINFOCLASS = 37;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved16Information: _JOBOBJECTINFOCLASS = 38;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved17Information: _JOBOBJECTINFOCLASS = 39;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved18Information: _JOBOBJECTINFOCLASS = 40;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved19Information: _JOBOBJECTINFOCLASS = 41;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved20Information: _JOBOBJECTINFOCLASS = 42;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved21Information: _JOBOBJECTINFOCLASS = 43;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved22Information: _JOBOBJECTINFOCLASS = 44;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved23Information: _JOBOBJECTINFOCLASS = 45;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved24Information: _JOBOBJECTINFOCLASS = 46;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved25Information: _JOBOBJECTINFOCLASS = 47;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved26Information: _JOBOBJECTINFOCLASS = 48;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved27Information: _JOBOBJECTINFOCLASS = 49;
pub const _JOBOBJECTINFOCLASS_JobObjectReserved28Information: _JOBOBJECTINFOCLASS = 50;
pub const _JOBOBJECTINFOCLASS_JobObjectNetworkAccountingInformation: _JOBOBJECTINFOCLASS = 51;
pub const _JOBOBJECTINFOCLASS_MaxJobObjectInfoClass: _JOBOBJECTINFOCLASS = 52;
pub type _JOBOBJECTINFOCLASS = ::std::os::raw::c_int;
pub use self::_JOBOBJECTINFOCLASS as JOBOBJECTINFOCLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SILOOBJECT_BASIC_INFORMATION {
    pub SiloId: DWORD,
    pub SiloParentId: DWORD,
    pub NumberOfProcesses: DWORD,
    pub IsInServerSilo: BOOLEAN,
    pub Reserved: [BYTE; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SILOOBJECT_BASIC_INFORMATION"]
        [::std::mem::size_of::<_SILOOBJECT_BASIC_INFORMATION>() - 16usize];
    ["Alignment of _SILOOBJECT_BASIC_INFORMATION"]
        [::std::mem::align_of::<_SILOOBJECT_BASIC_INFORMATION>() - 4usize];
    ["Offset of field: _SILOOBJECT_BASIC_INFORMATION::SiloId"]
        [::std::mem::offset_of!(_SILOOBJECT_BASIC_INFORMATION, SiloId) - 0usize];
    ["Offset of field: _SILOOBJECT_BASIC_INFORMATION::SiloParentId"]
        [::std::mem::offset_of!(_SILOOBJECT_BASIC_INFORMATION, SiloParentId) - 4usize];
    ["Offset of field: _SILOOBJECT_BASIC_INFORMATION::NumberOfProcesses"]
        [::std::mem::offset_of!(_SILOOBJECT_BASIC_INFORMATION, NumberOfProcesses) - 8usize];
    ["Offset of field: _SILOOBJECT_BASIC_INFORMATION::IsInServerSilo"]
        [::std::mem::offset_of!(_SILOOBJECT_BASIC_INFORMATION, IsInServerSilo) - 12usize];
    ["Offset of field: _SILOOBJECT_BASIC_INFORMATION::Reserved"]
        [::std::mem::offset_of!(_SILOOBJECT_BASIC_INFORMATION, Reserved) - 13usize];
};
pub type SILOOBJECT_BASIC_INFORMATION = _SILOOBJECT_BASIC_INFORMATION;
pub type PSILOOBJECT_BASIC_INFORMATION = *mut _SILOOBJECT_BASIC_INFORMATION;
pub const _SERVERSILO_STATE_SERVERSILO_INITING: _SERVERSILO_STATE = 0;
pub const _SERVERSILO_STATE_SERVERSILO_STARTED: _SERVERSILO_STATE = 1;
pub const _SERVERSILO_STATE_SERVERSILO_SHUTTING_DOWN: _SERVERSILO_STATE = 2;
pub const _SERVERSILO_STATE_SERVERSILO_TERMINATING: _SERVERSILO_STATE = 3;
pub const _SERVERSILO_STATE_SERVERSILO_TERMINATED: _SERVERSILO_STATE = 4;
pub type _SERVERSILO_STATE = ::std::os::raw::c_int;
pub use self::_SERVERSILO_STATE as SERVERSILO_STATE;
pub type PSERVERSILO_STATE = *mut _SERVERSILO_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVERSILO_BASIC_INFORMATION {
    pub ServiceSessionId: DWORD,
    pub State: SERVERSILO_STATE,
    pub ExitStatus: DWORD,
    pub Reserved: BOOLEAN,
    pub ApiSetSchema: PVOID,
    pub HostApiSetSchema: PVOID,
    pub ContainerBuildNumber: DWORD,
    pub HostBuildNumber: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVERSILO_BASIC_INFORMATION"]
        [::std::mem::size_of::<_SERVERSILO_BASIC_INFORMATION>() - 40usize];
    ["Alignment of _SERVERSILO_BASIC_INFORMATION"]
        [::std::mem::align_of::<_SERVERSILO_BASIC_INFORMATION>() - 8usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::ServiceSessionId"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, ServiceSessionId) - 0usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::State"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, State) - 4usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::ExitStatus"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, ExitStatus) - 8usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::Reserved"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, Reserved) - 12usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::ApiSetSchema"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, ApiSetSchema) - 16usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::HostApiSetSchema"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, HostApiSetSchema) - 24usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::ContainerBuildNumber"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, ContainerBuildNumber) - 32usize];
    ["Offset of field: _SERVERSILO_BASIC_INFORMATION::HostBuildNumber"]
        [::std::mem::offset_of!(_SERVERSILO_BASIC_INFORMATION, HostBuildNumber) - 36usize];
};
pub type SERVERSILO_BASIC_INFORMATION = _SERVERSILO_BASIC_INFORMATION;
pub type PSERVERSILO_BASIC_INFORMATION = *mut _SERVERSILO_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVERSILO_DIAGNOSTIC_INFORMATION {
    pub ReportId: GUID,
    pub ExitStatus: DWORD,
    pub CriticalProcessName: [WCHAR; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVERSILO_DIAGNOSTIC_INFORMATION"]
        [::std::mem::size_of::<_SERVERSILO_DIAGNOSTIC_INFORMATION>() - 52usize];
    ["Alignment of _SERVERSILO_DIAGNOSTIC_INFORMATION"]
        [::std::mem::align_of::<_SERVERSILO_DIAGNOSTIC_INFORMATION>() - 4usize];
    ["Offset of field: _SERVERSILO_DIAGNOSTIC_INFORMATION::ReportId"]
        [::std::mem::offset_of!(_SERVERSILO_DIAGNOSTIC_INFORMATION, ReportId) - 0usize];
    ["Offset of field: _SERVERSILO_DIAGNOSTIC_INFORMATION::ExitStatus"]
        [::std::mem::offset_of!(_SERVERSILO_DIAGNOSTIC_INFORMATION, ExitStatus) - 16usize];
    ["Offset of field: _SERVERSILO_DIAGNOSTIC_INFORMATION::CriticalProcessName"]
        [::std::mem::offset_of!(_SERVERSILO_DIAGNOSTIC_INFORMATION, CriticalProcessName) - 20usize];
};
pub type SERVERSILO_DIAGNOSTIC_INFORMATION = _SERVERSILO_DIAGNOSTIC_INFORMATION;
pub type PSERVERSILO_DIAGNOSTIC_INFORMATION = *mut _SERVERSILO_DIAGNOSTIC_INFORMATION;
pub const _FIRMWARE_TYPE_FirmwareTypeUnknown: _FIRMWARE_TYPE = 0;
pub const _FIRMWARE_TYPE_FirmwareTypeBios: _FIRMWARE_TYPE = 1;
pub const _FIRMWARE_TYPE_FirmwareTypeUefi: _FIRMWARE_TYPE = 2;
pub const _FIRMWARE_TYPE_FirmwareTypeMax: _FIRMWARE_TYPE = 3;
pub type _FIRMWARE_TYPE = ::std::os::raw::c_int;
pub use self::_FIRMWARE_TYPE as FIRMWARE_TYPE;
pub type PFIRMWARE_TYPE = *mut _FIRMWARE_TYPE;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorCore: _LOGICAL_PROCESSOR_RELATIONSHIP =
    0;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationNumaNode: _LOGICAL_PROCESSOR_RELATIONSHIP = 1;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationCache: _LOGICAL_PROCESSOR_RELATIONSHIP = 2;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorPackage:
    _LOGICAL_PROCESSOR_RELATIONSHIP = 3;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationGroup: _LOGICAL_PROCESSOR_RELATIONSHIP = 4;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorDie: _LOGICAL_PROCESSOR_RELATIONSHIP = 5;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationNumaNodeEx: _LOGICAL_PROCESSOR_RELATIONSHIP = 6;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationProcessorModule: _LOGICAL_PROCESSOR_RELATIONSHIP =
    7;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP_RelationAll: _LOGICAL_PROCESSOR_RELATIONSHIP = 65535;
pub type _LOGICAL_PROCESSOR_RELATIONSHIP = ::std::os::raw::c_int;
pub use self::_LOGICAL_PROCESSOR_RELATIONSHIP as LOGICAL_PROCESSOR_RELATIONSHIP;
pub const _PROCESSOR_CACHE_TYPE_CacheUnified: _PROCESSOR_CACHE_TYPE = 0;
pub const _PROCESSOR_CACHE_TYPE_CacheInstruction: _PROCESSOR_CACHE_TYPE = 1;
pub const _PROCESSOR_CACHE_TYPE_CacheData: _PROCESSOR_CACHE_TYPE = 2;
pub const _PROCESSOR_CACHE_TYPE_CacheTrace: _PROCESSOR_CACHE_TYPE = 3;
pub const _PROCESSOR_CACHE_TYPE_CacheUnknown: _PROCESSOR_CACHE_TYPE = 4;
pub type _PROCESSOR_CACHE_TYPE = ::std::os::raw::c_int;
pub use self::_PROCESSOR_CACHE_TYPE as PROCESSOR_CACHE_TYPE;
pub type PPROCESSOR_CACHE_TYPE = *mut _PROCESSOR_CACHE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CACHE_DESCRIPTOR {
    pub Level: BYTE,
    pub Associativity: BYTE,
    pub LineSize: WORD,
    pub Size: DWORD,
    pub Type: PROCESSOR_CACHE_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CACHE_DESCRIPTOR"][::std::mem::size_of::<_CACHE_DESCRIPTOR>() - 12usize];
    ["Alignment of _CACHE_DESCRIPTOR"][::std::mem::align_of::<_CACHE_DESCRIPTOR>() - 4usize];
    ["Offset of field: _CACHE_DESCRIPTOR::Level"]
        [::std::mem::offset_of!(_CACHE_DESCRIPTOR, Level) - 0usize];
    ["Offset of field: _CACHE_DESCRIPTOR::Associativity"]
        [::std::mem::offset_of!(_CACHE_DESCRIPTOR, Associativity) - 1usize];
    ["Offset of field: _CACHE_DESCRIPTOR::LineSize"]
        [::std::mem::offset_of!(_CACHE_DESCRIPTOR, LineSize) - 2usize];
    ["Offset of field: _CACHE_DESCRIPTOR::Size"]
        [::std::mem::offset_of!(_CACHE_DESCRIPTOR, Size) - 4usize];
    ["Offset of field: _CACHE_DESCRIPTOR::Type"]
        [::std::mem::offset_of!(_CACHE_DESCRIPTOR, Type) - 8usize];
};
pub type CACHE_DESCRIPTOR = _CACHE_DESCRIPTOR;
pub type PCACHE_DESCRIPTOR = *mut _CACHE_DESCRIPTOR;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    pub ProcessorMask: ULONG_PTR,
    pub Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
    pub __bindgen_anon_1: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1 {
    pub ProcessorCore: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    pub NumaNode: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2,
    pub Cache: CACHE_DESCRIPTOR,
    pub Reserved: [ULONGLONG; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    pub Flags: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1>(
        ) - 1usize];
    ["Alignment of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1>(
        ) - 1usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1::Flags"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        Flags
    )
        - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2 {
    pub NodeNumber: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2>(
        ) - 4usize];
    ["Alignment of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2>(
        ) - 4usize];
    [
        "Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2::NodeNumber",
    ][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2,
        NodeNumber
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1>() - 16usize];
    ["Alignment of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1::ProcessorCore"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
        ProcessorCore
    )
        - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1::NumaNode"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
        NumaNode
    ) - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1::Cache"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
        Cache
    ) - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1::Reserved"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1,
        Reserved
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION"]
        [::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION>() - 32usize];
    ["Alignment of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION"]
        [::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION>() - 8usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::ProcessorMask"]
        [::std::mem::offset_of!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION, ProcessorMask) - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION::Relationship"]
        [::std::mem::offset_of!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION, Relationship) - 8usize];
};
pub type SYSTEM_LOGICAL_PROCESSOR_INFORMATION = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
pub type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = *mut _SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_RELATIONSHIP {
    pub Flags: BYTE,
    pub EfficiencyClass: BYTE,
    pub Reserved: [BYTE; 20usize],
    pub GroupCount: WORD,
    pub GroupMask: [GROUP_AFFINITY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESSOR_RELATIONSHIP"][::std::mem::size_of::<_PROCESSOR_RELATIONSHIP>() - 40usize];
    ["Alignment of _PROCESSOR_RELATIONSHIP"]
        [::std::mem::align_of::<_PROCESSOR_RELATIONSHIP>() - 8usize];
    ["Offset of field: _PROCESSOR_RELATIONSHIP::Flags"]
        [::std::mem::offset_of!(_PROCESSOR_RELATIONSHIP, Flags) - 0usize];
    ["Offset of field: _PROCESSOR_RELATIONSHIP::EfficiencyClass"]
        [::std::mem::offset_of!(_PROCESSOR_RELATIONSHIP, EfficiencyClass) - 1usize];
    ["Offset of field: _PROCESSOR_RELATIONSHIP::Reserved"]
        [::std::mem::offset_of!(_PROCESSOR_RELATIONSHIP, Reserved) - 2usize];
    ["Offset of field: _PROCESSOR_RELATIONSHIP::GroupCount"]
        [::std::mem::offset_of!(_PROCESSOR_RELATIONSHIP, GroupCount) - 22usize];
    ["Offset of field: _PROCESSOR_RELATIONSHIP::GroupMask"]
        [::std::mem::offset_of!(_PROCESSOR_RELATIONSHIP, GroupMask) - 24usize];
};
pub type PROCESSOR_RELATIONSHIP = _PROCESSOR_RELATIONSHIP;
pub type PPROCESSOR_RELATIONSHIP = *mut _PROCESSOR_RELATIONSHIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _NUMA_NODE_RELATIONSHIP {
    pub NodeNumber: DWORD,
    pub Reserved: [BYTE; 18usize],
    pub GroupCount: WORD,
    pub __bindgen_anon_1: _NUMA_NODE_RELATIONSHIP__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _NUMA_NODE_RELATIONSHIP__bindgen_ty_1 {
    pub GroupMask: GROUP_AFFINITY,
    pub GroupMasks: [GROUP_AFFINITY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NUMA_NODE_RELATIONSHIP__bindgen_ty_1"]
        [::std::mem::size_of::<_NUMA_NODE_RELATIONSHIP__bindgen_ty_1>() - 16usize];
    ["Alignment of _NUMA_NODE_RELATIONSHIP__bindgen_ty_1"]
        [::std::mem::align_of::<_NUMA_NODE_RELATIONSHIP__bindgen_ty_1>() - 8usize];
    ["Offset of field: _NUMA_NODE_RELATIONSHIP__bindgen_ty_1::GroupMask"]
        [::std::mem::offset_of!(_NUMA_NODE_RELATIONSHIP__bindgen_ty_1, GroupMask) - 0usize];
    ["Offset of field: _NUMA_NODE_RELATIONSHIP__bindgen_ty_1::GroupMasks"]
        [::std::mem::offset_of!(_NUMA_NODE_RELATIONSHIP__bindgen_ty_1, GroupMasks) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NUMA_NODE_RELATIONSHIP"][::std::mem::size_of::<_NUMA_NODE_RELATIONSHIP>() - 40usize];
    ["Alignment of _NUMA_NODE_RELATIONSHIP"]
        [::std::mem::align_of::<_NUMA_NODE_RELATIONSHIP>() - 8usize];
    ["Offset of field: _NUMA_NODE_RELATIONSHIP::NodeNumber"]
        [::std::mem::offset_of!(_NUMA_NODE_RELATIONSHIP, NodeNumber) - 0usize];
    ["Offset of field: _NUMA_NODE_RELATIONSHIP::Reserved"]
        [::std::mem::offset_of!(_NUMA_NODE_RELATIONSHIP, Reserved) - 4usize];
    ["Offset of field: _NUMA_NODE_RELATIONSHIP::GroupCount"]
        [::std::mem::offset_of!(_NUMA_NODE_RELATIONSHIP, GroupCount) - 22usize];
};
pub type NUMA_NODE_RELATIONSHIP = _NUMA_NODE_RELATIONSHIP;
pub type PNUMA_NODE_RELATIONSHIP = *mut _NUMA_NODE_RELATIONSHIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CACHE_RELATIONSHIP {
    pub Level: BYTE,
    pub Associativity: BYTE,
    pub LineSize: WORD,
    pub CacheSize: DWORD,
    pub Type: PROCESSOR_CACHE_TYPE,
    pub Reserved: [BYTE; 18usize],
    pub GroupCount: WORD,
    pub __bindgen_anon_1: _CACHE_RELATIONSHIP__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CACHE_RELATIONSHIP__bindgen_ty_1 {
    pub GroupMask: GROUP_AFFINITY,
    pub GroupMasks: [GROUP_AFFINITY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CACHE_RELATIONSHIP__bindgen_ty_1"]
        [::std::mem::size_of::<_CACHE_RELATIONSHIP__bindgen_ty_1>() - 16usize];
    ["Alignment of _CACHE_RELATIONSHIP__bindgen_ty_1"]
        [::std::mem::align_of::<_CACHE_RELATIONSHIP__bindgen_ty_1>() - 8usize];
    ["Offset of field: _CACHE_RELATIONSHIP__bindgen_ty_1::GroupMask"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP__bindgen_ty_1, GroupMask) - 0usize];
    ["Offset of field: _CACHE_RELATIONSHIP__bindgen_ty_1::GroupMasks"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP__bindgen_ty_1, GroupMasks) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CACHE_RELATIONSHIP"][::std::mem::size_of::<_CACHE_RELATIONSHIP>() - 48usize];
    ["Alignment of _CACHE_RELATIONSHIP"][::std::mem::align_of::<_CACHE_RELATIONSHIP>() - 8usize];
    ["Offset of field: _CACHE_RELATIONSHIP::Level"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, Level) - 0usize];
    ["Offset of field: _CACHE_RELATIONSHIP::Associativity"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, Associativity) - 1usize];
    ["Offset of field: _CACHE_RELATIONSHIP::LineSize"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, LineSize) - 2usize];
    ["Offset of field: _CACHE_RELATIONSHIP::CacheSize"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, CacheSize) - 4usize];
    ["Offset of field: _CACHE_RELATIONSHIP::Type"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, Type) - 8usize];
    ["Offset of field: _CACHE_RELATIONSHIP::Reserved"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, Reserved) - 12usize];
    ["Offset of field: _CACHE_RELATIONSHIP::GroupCount"]
        [::std::mem::offset_of!(_CACHE_RELATIONSHIP, GroupCount) - 30usize];
};
pub type CACHE_RELATIONSHIP = _CACHE_RELATIONSHIP;
pub type PCACHE_RELATIONSHIP = *mut _CACHE_RELATIONSHIP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_GROUP_INFO {
    pub MaximumProcessorCount: BYTE,
    pub ActiveProcessorCount: BYTE,
    pub Reserved: [BYTE; 38usize],
    pub ActiveProcessorMask: KAFFINITY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESSOR_GROUP_INFO"][::std::mem::size_of::<_PROCESSOR_GROUP_INFO>() - 48usize];
    ["Alignment of _PROCESSOR_GROUP_INFO"]
        [::std::mem::align_of::<_PROCESSOR_GROUP_INFO>() - 8usize];
    ["Offset of field: _PROCESSOR_GROUP_INFO::MaximumProcessorCount"]
        [::std::mem::offset_of!(_PROCESSOR_GROUP_INFO, MaximumProcessorCount) - 0usize];
    ["Offset of field: _PROCESSOR_GROUP_INFO::ActiveProcessorCount"]
        [::std::mem::offset_of!(_PROCESSOR_GROUP_INFO, ActiveProcessorCount) - 1usize];
    ["Offset of field: _PROCESSOR_GROUP_INFO::Reserved"]
        [::std::mem::offset_of!(_PROCESSOR_GROUP_INFO, Reserved) - 2usize];
    ["Offset of field: _PROCESSOR_GROUP_INFO::ActiveProcessorMask"]
        [::std::mem::offset_of!(_PROCESSOR_GROUP_INFO, ActiveProcessorMask) - 40usize];
};
pub type PROCESSOR_GROUP_INFO = _PROCESSOR_GROUP_INFO;
pub type PPROCESSOR_GROUP_INFO = *mut _PROCESSOR_GROUP_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GROUP_RELATIONSHIP {
    pub MaximumGroupCount: WORD,
    pub ActiveGroupCount: WORD,
    pub Reserved: [BYTE; 20usize],
    pub GroupInfo: [PROCESSOR_GROUP_INFO; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GROUP_RELATIONSHIP"][::std::mem::size_of::<_GROUP_RELATIONSHIP>() - 72usize];
    ["Alignment of _GROUP_RELATIONSHIP"][::std::mem::align_of::<_GROUP_RELATIONSHIP>() - 8usize];
    ["Offset of field: _GROUP_RELATIONSHIP::MaximumGroupCount"]
        [::std::mem::offset_of!(_GROUP_RELATIONSHIP, MaximumGroupCount) - 0usize];
    ["Offset of field: _GROUP_RELATIONSHIP::ActiveGroupCount"]
        [::std::mem::offset_of!(_GROUP_RELATIONSHIP, ActiveGroupCount) - 2usize];
    ["Offset of field: _GROUP_RELATIONSHIP::Reserved"]
        [::std::mem::offset_of!(_GROUP_RELATIONSHIP, Reserved) - 4usize];
    ["Offset of field: _GROUP_RELATIONSHIP::GroupInfo"]
        [::std::mem::offset_of!(_GROUP_RELATIONSHIP, GroupInfo) - 24usize];
};
pub type GROUP_RELATIONSHIP = _GROUP_RELATIONSHIP;
pub type PGROUP_RELATIONSHIP = *mut _GROUP_RELATIONSHIP;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    pub Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
    pub Size: DWORD,
    pub __bindgen_anon_1: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1 {
    pub Processor: PROCESSOR_RELATIONSHIP,
    pub NumaNode: NUMA_NODE_RELATIONSHIP,
    pub Cache: CACHE_RELATIONSHIP,
    pub Group: GROUP_RELATIONSHIP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1"]
        [::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1>() - 72usize];
    ["Alignment of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1"]
        [::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1::Processor"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
        Processor
    )
        - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1::NumaNode"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
        NumaNode
    )
        - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1::Cache"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
        Cache
    ) - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1::Group"][::std::mem::offset_of!(
        _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1,
        Group
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX"]
        [::std::mem::size_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>() - 80usize];
    ["Alignment of _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX"]
        [::std::mem::align_of::<_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX>() - 8usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX::Relationship"]
        [::std::mem::offset_of!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, Relationship) - 0usize];
    ["Offset of field: _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX::Size"]
        [::std::mem::offset_of!(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, Size) - 4usize];
};
pub type SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub type PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = *mut _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub const _CPU_SET_INFORMATION_TYPE_CpuSetInformation: _CPU_SET_INFORMATION_TYPE = 0;
pub type _CPU_SET_INFORMATION_TYPE = ::std::os::raw::c_int;
pub use self::_CPU_SET_INFORMATION_TYPE as CPU_SET_INFORMATION_TYPE;
pub type PCPU_SET_INFORMATION_TYPE = *mut _CPU_SET_INFORMATION_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_CPU_SET_INFORMATION {
    pub Size: DWORD,
    pub Type: CPU_SET_INFORMATION_TYPE,
    pub __bindgen_anon_1: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1 {
    pub CpuSet: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    pub Id: DWORD,
    pub Group: WORD,
    pub LogicalProcessorIndex: BYTE,
    pub CoreIndex: BYTE,
    pub LastLevelCacheIndex: BYTE,
    pub NumaNodeIndex: BYTE,
    pub EfficiencyClass: BYTE,
    pub __bindgen_anon_1: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
    pub AllocationTag: DWORD64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub AllFlags: BYTE,
    pub __bindgen_anon_1:
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 1usize];
    [
        "Alignment of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1",
    ][::std::mem::align_of::<
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 1usize];
};
impl _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Parked(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Parked(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Parked_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_Parked_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Allocated(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_Allocated(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Allocated_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_Allocated_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AllocatedToTargetProcess(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_AllocatedToTargetProcess(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllocatedToTargetProcess_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_AllocatedToTargetProcess_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RealTime(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_RealTime(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RealTime_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_RealTime_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedFlags(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_ReservedFlags(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedFlags_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                4u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedFlags_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Parked: BYTE,
        Allocated: BYTE,
        AllocatedToTargetProcess: BYTE,
        RealTime: BYTE,
        ReservedFlags: BYTE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Parked: u8 = unsafe { ::std::mem::transmute(Parked) };
            Parked as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Allocated: u8 = unsafe { ::std::mem::transmute(Allocated) };
            Allocated as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let AllocatedToTargetProcess: u8 =
                unsafe { ::std::mem::transmute(AllocatedToTargetProcess) };
            AllocatedToTargetProcess as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let RealTime: u8 = unsafe { ::std::mem::transmute(RealTime) };
            RealTime as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let ReservedFlags: u8 = unsafe { ::std::mem::transmute(ReservedFlags) };
            ReservedFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 1usize];
    ["Alignment of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 1usize];
    [
        "Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::AllFlags",
    ][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        AllFlags
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 {
    pub Reserved: DWORD,
    pub SchedulingClass: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<
            _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        >() - 4usize];
    ["Alignment of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<
            _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        >() - 4usize];
    [
        "Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::Reserved",
    ][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        Reserved
    ) - 0usize];
    [
        "Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2::SchedulingClass",
    ][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2,
        SchedulingClass
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    >() - 24usize];
    ["Alignment of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::Id"][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        Id
    ) - 0usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::Group"][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        Group
    ) - 4usize];
    [
        "Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::LogicalProcessorIndex",
    ][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        LogicalProcessorIndex
    ) - 6usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::CoreIndex"][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        CoreIndex
    )
        - 7usize];
    [
        "Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::LastLevelCacheIndex",
    ][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        LastLevelCacheIndex
    ) - 8usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::NumaNodeIndex"][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        NumaNodeIndex
    )
        - 9usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::EfficiencyClass"][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        EfficiencyClass
    )
        - 10usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1::AllocationTag"][::std::mem::offset_of!(
        _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1,
        AllocationTag
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1>() - 24usize];
    ["Alignment of _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1::CpuSet"]
        [::std::mem::offset_of!(_SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1, CpuSet) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_CPU_SET_INFORMATION"]
        [::std::mem::size_of::<_SYSTEM_CPU_SET_INFORMATION>() - 32usize];
    ["Alignment of _SYSTEM_CPU_SET_INFORMATION"]
        [::std::mem::align_of::<_SYSTEM_CPU_SET_INFORMATION>() - 8usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION::Size"]
        [::std::mem::offset_of!(_SYSTEM_CPU_SET_INFORMATION, Size) - 0usize];
    ["Offset of field: _SYSTEM_CPU_SET_INFORMATION::Type"]
        [::std::mem::offset_of!(_SYSTEM_CPU_SET_INFORMATION, Type) - 4usize];
};
pub type SYSTEM_CPU_SET_INFORMATION = _SYSTEM_CPU_SET_INFORMATION;
pub type PSYSTEM_CPU_SET_INFORMATION = *mut _SYSTEM_CPU_SET_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POOL_ZEROING_INFORMATION {
    pub PoolZeroingSupportPresent: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_POOL_ZEROING_INFORMATION"]
        [::std::mem::size_of::<_SYSTEM_POOL_ZEROING_INFORMATION>() - 1usize];
    ["Alignment of _SYSTEM_POOL_ZEROING_INFORMATION"]
        [::std::mem::align_of::<_SYSTEM_POOL_ZEROING_INFORMATION>() - 1usize];
    ["Offset of field: _SYSTEM_POOL_ZEROING_INFORMATION::PoolZeroingSupportPresent"][::std::mem::offset_of!(
        _SYSTEM_POOL_ZEROING_INFORMATION,
        PoolZeroingSupportPresent
    ) - 0usize];
};
pub type SYSTEM_POOL_ZEROING_INFORMATION = _SYSTEM_POOL_ZEROING_INFORMATION;
pub type PSYSTEM_POOL_ZEROING_INFORMATION = *mut _SYSTEM_POOL_ZEROING_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    pub CycleTime: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION"]
        [::std::mem::size_of::<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>() - 8usize];
    ["Alignment of _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION"]
        [::std::mem::align_of::<_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION>() - 8usize];
    ["Offset of field: _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION::CycleTime"]
        [::std::mem::offset_of!(_SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, CycleTime) - 0usize];
};
pub type SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
pub type PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = *mut _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION"]
        [::std::mem::size_of::<_SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION>() - 4usize];
    ["Alignment of _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION"]
        [::std::mem::align_of::<_SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION>() - 4usize];
};
impl _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION {
    #[inline]
    pub fn Machine(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_Machine(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Machine_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Machine_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn KernelMode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_KernelMode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn KernelMode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_KernelMode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn UserMode(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_UserMode(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn UserMode_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_UserMode_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Native(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Native(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Native_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Native_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Process(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Process(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Process_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Process_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn WoW64Container(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_WoW64Container(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn WoW64Container_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_WoW64Container_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedZero0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedZero0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedZero0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedZero0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Machine: DWORD,
        KernelMode: DWORD,
        UserMode: DWORD,
        Native: DWORD,
        Process: DWORD,
        WoW64Container: DWORD,
        ReservedZero0: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let Machine: u32 = unsafe { ::std::mem::transmute(Machine) };
            Machine as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let KernelMode: u32 = unsafe { ::std::mem::transmute(KernelMode) };
            KernelMode as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let UserMode: u32 = unsafe { ::std::mem::transmute(UserMode) };
            UserMode as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let Native: u32 = unsafe { ::std::mem::transmute(Native) };
            Native as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let Process: u32 = unsafe { ::std::mem::transmute(Process) };
            Process as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let WoW64Container: u32 = unsafe { ::std::mem::transmute(WoW64Container) };
            WoW64Container as u64
        });
        __bindgen_bitfield_unit.set(21usize, 11u8, {
            let ReservedZero0: u32 = unsafe { ::std::mem::transmute(ReservedZero0) };
            ReservedZero0 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION =
    _SYSTEM_SUPPORTED_PROCESSOR_ARCHITECTURES_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _XSTATE_FEATURE {
    pub Offset: DWORD,
    pub Size: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSTATE_FEATURE"][::std::mem::size_of::<_XSTATE_FEATURE>() - 8usize];
    ["Alignment of _XSTATE_FEATURE"][::std::mem::align_of::<_XSTATE_FEATURE>() - 4usize];
    ["Offset of field: _XSTATE_FEATURE::Offset"]
        [::std::mem::offset_of!(_XSTATE_FEATURE, Offset) - 0usize];
    ["Offset of field: _XSTATE_FEATURE::Size"]
        [::std::mem::offset_of!(_XSTATE_FEATURE, Size) - 4usize];
};
pub type XSTATE_FEATURE = _XSTATE_FEATURE;
pub type PXSTATE_FEATURE = *mut _XSTATE_FEATURE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XSTATE_CONFIGURATION {
    pub EnabledFeatures: DWORD64,
    pub EnabledVolatileFeatures: DWORD64,
    pub Size: DWORD,
    pub __bindgen_anon_1: _XSTATE_CONFIGURATION__bindgen_ty_1,
    pub Features: [XSTATE_FEATURE; 64usize],
    pub EnabledSupervisorFeatures: DWORD64,
    pub AlignedFeatures: DWORD64,
    pub AllFeatureSize: DWORD,
    pub AllFeatures: [DWORD; 64usize],
    pub EnabledUserVisibleSupervisorFeatures: DWORD64,
    pub ExtendedFeatureDisableFeatures: DWORD64,
    pub AllNonLargeFeatureSize: DWORD,
    pub MaxSveVectorLength: WORD,
    pub Spare1: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XSTATE_CONFIGURATION__bindgen_ty_1 {
    pub ControlFlags: DWORD,
    pub __bindgen_anon_1: _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn OptimizedSave(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_OptimizedSave(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn OptimizedSave_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_OptimizedSave_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn CompactionEnabled(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_CompactionEnabled(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn CompactionEnabled_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_CompactionEnabled_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ExtendedFeatureDisable(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ExtendedFeatureDisable(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ExtendedFeatureDisable_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ExtendedFeatureDisable_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        OptimizedSave: DWORD,
        CompactionEnabled: DWORD,
        ExtendedFeatureDisable: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let OptimizedSave: u32 = unsafe { ::std::mem::transmute(OptimizedSave) };
            OptimizedSave as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let CompactionEnabled: u32 = unsafe { ::std::mem::transmute(CompactionEnabled) };
            CompactionEnabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let ExtendedFeatureDisable: u32 =
                unsafe { ::std::mem::transmute(ExtendedFeatureDisable) };
            ExtendedFeatureDisable as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSTATE_CONFIGURATION__bindgen_ty_1"]
        [::std::mem::size_of::<_XSTATE_CONFIGURATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _XSTATE_CONFIGURATION__bindgen_ty_1"]
        [::std::mem::align_of::<_XSTATE_CONFIGURATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: _XSTATE_CONFIGURATION__bindgen_ty_1::ControlFlags"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION__bindgen_ty_1, ControlFlags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _XSTATE_CONFIGURATION"][::std::mem::size_of::<_XSTATE_CONFIGURATION>() - 840usize];
    ["Alignment of _XSTATE_CONFIGURATION"]
        [::std::mem::align_of::<_XSTATE_CONFIGURATION>() - 8usize];
    ["Offset of field: _XSTATE_CONFIGURATION::EnabledFeatures"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, EnabledFeatures) - 0usize];
    ["Offset of field: _XSTATE_CONFIGURATION::EnabledVolatileFeatures"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, EnabledVolatileFeatures) - 8usize];
    ["Offset of field: _XSTATE_CONFIGURATION::Size"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, Size) - 16usize];
    ["Offset of field: _XSTATE_CONFIGURATION::Features"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, Features) - 24usize];
    ["Offset of field: _XSTATE_CONFIGURATION::EnabledSupervisorFeatures"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, EnabledSupervisorFeatures) - 536usize];
    ["Offset of field: _XSTATE_CONFIGURATION::AlignedFeatures"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, AlignedFeatures) - 544usize];
    ["Offset of field: _XSTATE_CONFIGURATION::AllFeatureSize"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, AllFeatureSize) - 552usize];
    ["Offset of field: _XSTATE_CONFIGURATION::AllFeatures"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, AllFeatures) - 556usize];
    ["Offset of field: _XSTATE_CONFIGURATION::EnabledUserVisibleSupervisorFeatures"][::std::mem::offset_of!(
        _XSTATE_CONFIGURATION,
        EnabledUserVisibleSupervisorFeatures
    ) - 816usize];
    ["Offset of field: _XSTATE_CONFIGURATION::ExtendedFeatureDisableFeatures"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, ExtendedFeatureDisableFeatures) - 824usize];
    ["Offset of field: _XSTATE_CONFIGURATION::AllNonLargeFeatureSize"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, AllNonLargeFeatureSize) - 832usize];
    ["Offset of field: _XSTATE_CONFIGURATION::MaxSveVectorLength"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, MaxSveVectorLength) - 836usize];
    ["Offset of field: _XSTATE_CONFIGURATION::Spare1"]
        [::std::mem::offset_of!(_XSTATE_CONFIGURATION, Spare1) - 838usize];
};
pub type XSTATE_CONFIGURATION = _XSTATE_CONFIGURATION;
pub type PXSTATE_CONFIGURATION = *mut _XSTATE_CONFIGURATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_BASIC_INFORMATION {
    pub BaseAddress: PVOID,
    pub AllocationBase: PVOID,
    pub AllocationProtect: DWORD,
    pub PartitionId: WORD,
    pub RegionSize: SIZE_T,
    pub State: DWORD,
    pub Protect: DWORD,
    pub Type: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORY_BASIC_INFORMATION"]
        [::std::mem::size_of::<_MEMORY_BASIC_INFORMATION>() - 48usize];
    ["Alignment of _MEMORY_BASIC_INFORMATION"]
        [::std::mem::align_of::<_MEMORY_BASIC_INFORMATION>() - 8usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::BaseAddress"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, BaseAddress) - 0usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::AllocationBase"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, AllocationBase) - 8usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::AllocationProtect"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, AllocationProtect) - 16usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::PartitionId"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, PartitionId) - 20usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::RegionSize"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, RegionSize) - 24usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::State"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, State) - 32usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::Protect"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, Protect) - 36usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION::Type"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION, Type) - 40usize];
};
pub type MEMORY_BASIC_INFORMATION = _MEMORY_BASIC_INFORMATION;
pub type PMEMORY_BASIC_INFORMATION = *mut _MEMORY_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_BASIC_INFORMATION32 {
    pub BaseAddress: DWORD,
    pub AllocationBase: DWORD,
    pub AllocationProtect: DWORD,
    pub RegionSize: DWORD,
    pub State: DWORD,
    pub Protect: DWORD,
    pub Type: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORY_BASIC_INFORMATION32"]
        [::std::mem::size_of::<_MEMORY_BASIC_INFORMATION32>() - 28usize];
    ["Alignment of _MEMORY_BASIC_INFORMATION32"]
        [::std::mem::align_of::<_MEMORY_BASIC_INFORMATION32>() - 4usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::BaseAddress"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, BaseAddress) - 0usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::AllocationBase"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, AllocationBase) - 4usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::AllocationProtect"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, AllocationProtect) - 8usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::RegionSize"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, RegionSize) - 12usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::State"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, State) - 16usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::Protect"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, Protect) - 20usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION32::Type"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION32, Type) - 24usize];
};
pub type MEMORY_BASIC_INFORMATION32 = _MEMORY_BASIC_INFORMATION32;
pub type PMEMORY_BASIC_INFORMATION32 = *mut _MEMORY_BASIC_INFORMATION32;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_BASIC_INFORMATION64 {
    pub BaseAddress: ULONGLONG,
    pub AllocationBase: ULONGLONG,
    pub AllocationProtect: DWORD,
    pub __alignment1: DWORD,
    pub RegionSize: ULONGLONG,
    pub State: DWORD,
    pub Protect: DWORD,
    pub Type: DWORD,
    pub __alignment2: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORY_BASIC_INFORMATION64"]
        [::std::mem::size_of::<_MEMORY_BASIC_INFORMATION64>() - 48usize];
    ["Alignment of _MEMORY_BASIC_INFORMATION64"]
        [::std::mem::align_of::<_MEMORY_BASIC_INFORMATION64>() - 16usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::BaseAddress"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, BaseAddress) - 0usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::AllocationBase"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, AllocationBase) - 8usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::AllocationProtect"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, AllocationProtect) - 16usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::__alignment1"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, __alignment1) - 20usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::RegionSize"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, RegionSize) - 24usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::State"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, State) - 32usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::Protect"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, Protect) - 36usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::Type"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, Type) - 40usize];
    ["Offset of field: _MEMORY_BASIC_INFORMATION64::__alignment2"]
        [::std::mem::offset_of!(_MEMORY_BASIC_INFORMATION64, __alignment2) - 44usize];
};
pub type MEMORY_BASIC_INFORMATION64 = _MEMORY_BASIC_INFORMATION64;
pub type PMEMORY_BASIC_INFORMATION64 = *mut _MEMORY_BASIC_INFORMATION64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CFG_CALL_TARGET_INFO {
    pub Offset: ULONG_PTR,
    pub Flags: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CFG_CALL_TARGET_INFO"][::std::mem::size_of::<_CFG_CALL_TARGET_INFO>() - 16usize];
    ["Alignment of _CFG_CALL_TARGET_INFO"]
        [::std::mem::align_of::<_CFG_CALL_TARGET_INFO>() - 8usize];
    ["Offset of field: _CFG_CALL_TARGET_INFO::Offset"]
        [::std::mem::offset_of!(_CFG_CALL_TARGET_INFO, Offset) - 0usize];
    ["Offset of field: _CFG_CALL_TARGET_INFO::Flags"]
        [::std::mem::offset_of!(_CFG_CALL_TARGET_INFO, Flags) - 8usize];
};
pub type CFG_CALL_TARGET_INFO = _CFG_CALL_TARGET_INFO;
pub type PCFG_CALL_TARGET_INFO = *mut _CFG_CALL_TARGET_INFO;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterInvalidType: MEM_EXTENDED_PARAMETER_TYPE =
    0;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterAddressRequirements:
    MEM_EXTENDED_PARAMETER_TYPE = 1;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterNumaNode: MEM_EXTENDED_PARAMETER_TYPE = 2;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterPartitionHandle:
    MEM_EXTENDED_PARAMETER_TYPE = 3;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterUserPhysicalHandle:
    MEM_EXTENDED_PARAMETER_TYPE = 4;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterAttributeFlags:
    MEM_EXTENDED_PARAMETER_TYPE = 5;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterImageMachine:
    MEM_EXTENDED_PARAMETER_TYPE = 6;
pub const MEM_EXTENDED_PARAMETER_TYPE_MemExtendedParameterMax: MEM_EXTENDED_PARAMETER_TYPE = 7;
pub type MEM_EXTENDED_PARAMETER_TYPE = ::std::os::raw::c_int;
pub type PMEM_EXTENDED_PARAMETER_TYPE = *mut MEM_EXTENDED_PARAMETER_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MEM_EXTENDED_PARAMETER {
    pub __bindgen_anon_1: MEM_EXTENDED_PARAMETER__bindgen_ty_1,
    pub __bindgen_anon_2: MEM_EXTENDED_PARAMETER__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MEM_EXTENDED_PARAMETER__bindgen_ty_1 {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MEM_EXTENDED_PARAMETER__bindgen_ty_1"]
        [::std::mem::size_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_1>() - 8usize];
    ["Alignment of MEM_EXTENDED_PARAMETER__bindgen_ty_1"]
        [::std::mem::align_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_1>() - 8usize];
};
impl MEM_EXTENDED_PARAMETER__bindgen_ty_1 {
    #[inline]
    pub fn Type(&self) -> DWORD64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: DWORD64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Type_raw(this: *const Self) -> DWORD64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_Type_raw(this: *mut Self, val: DWORD64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> DWORD64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 56u8) as u64) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: DWORD64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 56u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> DWORD64 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                56u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: DWORD64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                56u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(Type: DWORD64, Reserved: DWORD64) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let Type: u64 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(8usize, 56u8, {
            let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MEM_EXTENDED_PARAMETER__bindgen_ty_2 {
    pub ULong64: DWORD64,
    pub Pointer: PVOID,
    pub Size: SIZE_T,
    pub Handle: HANDLE,
    pub ULong: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MEM_EXTENDED_PARAMETER__bindgen_ty_2"]
        [::std::mem::size_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_2>() - 8usize];
    ["Alignment of MEM_EXTENDED_PARAMETER__bindgen_ty_2"]
        [::std::mem::align_of::<MEM_EXTENDED_PARAMETER__bindgen_ty_2>() - 8usize];
    ["Offset of field: MEM_EXTENDED_PARAMETER__bindgen_ty_2::ULong64"]
        [::std::mem::offset_of!(MEM_EXTENDED_PARAMETER__bindgen_ty_2, ULong64) - 0usize];
    ["Offset of field: MEM_EXTENDED_PARAMETER__bindgen_ty_2::Pointer"]
        [::std::mem::offset_of!(MEM_EXTENDED_PARAMETER__bindgen_ty_2, Pointer) - 0usize];
    ["Offset of field: MEM_EXTENDED_PARAMETER__bindgen_ty_2::Size"]
        [::std::mem::offset_of!(MEM_EXTENDED_PARAMETER__bindgen_ty_2, Size) - 0usize];
    ["Offset of field: MEM_EXTENDED_PARAMETER__bindgen_ty_2::Handle"]
        [::std::mem::offset_of!(MEM_EXTENDED_PARAMETER__bindgen_ty_2, Handle) - 0usize];
    ["Offset of field: MEM_EXTENDED_PARAMETER__bindgen_ty_2::ULong"]
        [::std::mem::offset_of!(MEM_EXTENDED_PARAMETER__bindgen_ty_2, ULong) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MEM_EXTENDED_PARAMETER"][::std::mem::size_of::<MEM_EXTENDED_PARAMETER>() - 16usize];
    ["Alignment of MEM_EXTENDED_PARAMETER"]
        [::std::mem::align_of::<MEM_EXTENDED_PARAMETER>() - 8usize];
};
pub type PMEM_EXTENDED_PARAMETER = *mut MEM_EXTENDED_PARAMETER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEM_ADDRESS_REQUIREMENTS {
    pub LowestStartingAddress: PVOID,
    pub HighestEndingAddress: PVOID,
    pub Alignment: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEM_ADDRESS_REQUIREMENTS"]
        [::std::mem::size_of::<_MEM_ADDRESS_REQUIREMENTS>() - 24usize];
    ["Alignment of _MEM_ADDRESS_REQUIREMENTS"]
        [::std::mem::align_of::<_MEM_ADDRESS_REQUIREMENTS>() - 8usize];
    ["Offset of field: _MEM_ADDRESS_REQUIREMENTS::LowestStartingAddress"]
        [::std::mem::offset_of!(_MEM_ADDRESS_REQUIREMENTS, LowestStartingAddress) - 0usize];
    ["Offset of field: _MEM_ADDRESS_REQUIREMENTS::HighestEndingAddress"]
        [::std::mem::offset_of!(_MEM_ADDRESS_REQUIREMENTS, HighestEndingAddress) - 8usize];
    ["Offset of field: _MEM_ADDRESS_REQUIREMENTS::Alignment"]
        [::std::mem::offset_of!(_MEM_ADDRESS_REQUIREMENTS, Alignment) - 16usize];
};
pub type MEM_ADDRESS_REQUIREMENTS = _MEM_ADDRESS_REQUIREMENTS;
pub type PMEM_ADDRESS_REQUIREMENTS = *mut _MEM_ADDRESS_REQUIREMENTS;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeReadBandwidth:
    _MEM_DEDICATED_ATTRIBUTE_TYPE = 0;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeReadLatency:
    _MEM_DEDICATED_ATTRIBUTE_TYPE = 1;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeWriteBandwidth:
    _MEM_DEDICATED_ATTRIBUTE_TYPE = 2;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeWriteLatency:
    _MEM_DEDICATED_ATTRIBUTE_TYPE = 3;
pub const _MEM_DEDICATED_ATTRIBUTE_TYPE_MemDedicatedAttributeMax: _MEM_DEDICATED_ATTRIBUTE_TYPE = 4;
pub type _MEM_DEDICATED_ATTRIBUTE_TYPE = ::std::os::raw::c_int;
pub use self::_MEM_DEDICATED_ATTRIBUTE_TYPE as MEM_DEDICATED_ATTRIBUTE_TYPE;
pub type PMEM_DEDICATED_ATTRIBUTE_TYPE = *mut _MEM_DEDICATED_ATTRIBUTE_TYPE;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterInvalidType:
    MEM_SECTION_EXTENDED_PARAMETER_TYPE = 0;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterUserPhysicalFlags:
    MEM_SECTION_EXTENDED_PARAMETER_TYPE = 1;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterNumaNode:
    MEM_SECTION_EXTENDED_PARAMETER_TYPE = 2;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterSigningLevel:
    MEM_SECTION_EXTENDED_PARAMETER_TYPE = 3;
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE_MemSectionExtendedParameterMax:
    MEM_SECTION_EXTENDED_PARAMETER_TYPE = 4;
pub type MEM_SECTION_EXTENDED_PARAMETER_TYPE = ::std::os::raw::c_int;
pub type PMEM_SECTION_EXTENDED_PARAMETER_TYPE = *mut MEM_SECTION_EXTENDED_PARAMETER_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_CREATE_INFO_SGX {
    pub Secs: [BYTE; 4096usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_CREATE_INFO_SGX"]
        [::std::mem::size_of::<_ENCLAVE_CREATE_INFO_SGX>() - 4096usize];
    ["Alignment of _ENCLAVE_CREATE_INFO_SGX"]
        [::std::mem::align_of::<_ENCLAVE_CREATE_INFO_SGX>() - 1usize];
    ["Offset of field: _ENCLAVE_CREATE_INFO_SGX::Secs"]
        [::std::mem::offset_of!(_ENCLAVE_CREATE_INFO_SGX, Secs) - 0usize];
};
pub type ENCLAVE_CREATE_INFO_SGX = _ENCLAVE_CREATE_INFO_SGX;
pub type PENCLAVE_CREATE_INFO_SGX = *mut _ENCLAVE_CREATE_INFO_SGX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_INIT_INFO_SGX {
    pub SigStruct: [BYTE; 1808usize],
    pub Reserved1: [BYTE; 240usize],
    pub EInitToken: [BYTE; 304usize],
    pub Reserved2: [BYTE; 1744usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_INIT_INFO_SGX"][::std::mem::size_of::<_ENCLAVE_INIT_INFO_SGX>() - 4096usize];
    ["Alignment of _ENCLAVE_INIT_INFO_SGX"]
        [::std::mem::align_of::<_ENCLAVE_INIT_INFO_SGX>() - 1usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_SGX::SigStruct"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_SGX, SigStruct) - 0usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_SGX::Reserved1"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_SGX, Reserved1) - 1808usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_SGX::EInitToken"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_SGX, EInitToken) - 2048usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_SGX::Reserved2"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_SGX, Reserved2) - 2352usize];
};
pub type ENCLAVE_INIT_INFO_SGX = _ENCLAVE_INIT_INFO_SGX;
pub type PENCLAVE_INIT_INFO_SGX = *mut _ENCLAVE_INIT_INFO_SGX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_CREATE_INFO_VBS {
    pub Flags: DWORD,
    pub OwnerID: [BYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_CREATE_INFO_VBS"]
        [::std::mem::size_of::<_ENCLAVE_CREATE_INFO_VBS>() - 36usize];
    ["Alignment of _ENCLAVE_CREATE_INFO_VBS"]
        [::std::mem::align_of::<_ENCLAVE_CREATE_INFO_VBS>() - 4usize];
    ["Offset of field: _ENCLAVE_CREATE_INFO_VBS::Flags"]
        [::std::mem::offset_of!(_ENCLAVE_CREATE_INFO_VBS, Flags) - 0usize];
    ["Offset of field: _ENCLAVE_CREATE_INFO_VBS::OwnerID"]
        [::std::mem::offset_of!(_ENCLAVE_CREATE_INFO_VBS, OwnerID) - 4usize];
};
pub type ENCLAVE_CREATE_INFO_VBS = _ENCLAVE_CREATE_INFO_VBS;
pub type PENCLAVE_CREATE_INFO_VBS = *mut _ENCLAVE_CREATE_INFO_VBS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_CREATE_INFO_VBS_BASIC {
    pub Flags: DWORD,
    pub OwnerID: [BYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_CREATE_INFO_VBS_BASIC"]
        [::std::mem::size_of::<_ENCLAVE_CREATE_INFO_VBS_BASIC>() - 36usize];
    ["Alignment of _ENCLAVE_CREATE_INFO_VBS_BASIC"]
        [::std::mem::align_of::<_ENCLAVE_CREATE_INFO_VBS_BASIC>() - 4usize];
    ["Offset of field: _ENCLAVE_CREATE_INFO_VBS_BASIC::Flags"]
        [::std::mem::offset_of!(_ENCLAVE_CREATE_INFO_VBS_BASIC, Flags) - 0usize];
    ["Offset of field: _ENCLAVE_CREATE_INFO_VBS_BASIC::OwnerID"]
        [::std::mem::offset_of!(_ENCLAVE_CREATE_INFO_VBS_BASIC, OwnerID) - 4usize];
};
pub type ENCLAVE_CREATE_INFO_VBS_BASIC = _ENCLAVE_CREATE_INFO_VBS_BASIC;
pub type PENCLAVE_CREATE_INFO_VBS_BASIC = *mut _ENCLAVE_CREATE_INFO_VBS_BASIC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_LOAD_DATA_VBS_BASIC {
    pub PageType: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_LOAD_DATA_VBS_BASIC"]
        [::std::mem::size_of::<_ENCLAVE_LOAD_DATA_VBS_BASIC>() - 4usize];
    ["Alignment of _ENCLAVE_LOAD_DATA_VBS_BASIC"]
        [::std::mem::align_of::<_ENCLAVE_LOAD_DATA_VBS_BASIC>() - 4usize];
    ["Offset of field: _ENCLAVE_LOAD_DATA_VBS_BASIC::PageType"]
        [::std::mem::offset_of!(_ENCLAVE_LOAD_DATA_VBS_BASIC, PageType) - 0usize];
};
pub type ENCLAVE_LOAD_DATA_VBS_BASIC = _ENCLAVE_LOAD_DATA_VBS_BASIC;
pub type PENCLAVE_LOAD_DATA_VBS_BASIC = *mut _ENCLAVE_LOAD_DATA_VBS_BASIC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ENCLAVE_INIT_INFO_VBS_BASIC {
    pub FamilyId: [BYTE; 16usize],
    pub ImageId: [BYTE; 16usize],
    pub EnclaveSize: ULONGLONG,
    pub EnclaveSvn: DWORD,
    pub Reserved: DWORD,
    pub __bindgen_anon_1: _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1 {
    pub SignatureInfoHandle: HANDLE,
    pub Unused: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1"]
        [::std::mem::size_of::<_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1>() - 8usize];
    ["Alignment of _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1"]
        [::std::mem::align_of::<_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1>() - 8usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1::SignatureInfoHandle"][::std::mem::offset_of!(
        _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1,
        SignatureInfoHandle
    )
        - 0usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1::Unused"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1, Unused) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_INIT_INFO_VBS_BASIC"]
        [::std::mem::size_of::<_ENCLAVE_INIT_INFO_VBS_BASIC>() - 56usize];
    ["Alignment of _ENCLAVE_INIT_INFO_VBS_BASIC"]
        [::std::mem::align_of::<_ENCLAVE_INIT_INFO_VBS_BASIC>() - 8usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC::FamilyId"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS_BASIC, FamilyId) - 0usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC::ImageId"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS_BASIC, ImageId) - 16usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC::EnclaveSize"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS_BASIC, EnclaveSize) - 32usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC::EnclaveSvn"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS_BASIC, EnclaveSvn) - 40usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS_BASIC::Reserved"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS_BASIC, Reserved) - 44usize];
};
pub type ENCLAVE_INIT_INFO_VBS_BASIC = _ENCLAVE_INIT_INFO_VBS_BASIC;
pub type PENCLAVE_INIT_INFO_VBS_BASIC = *mut _ENCLAVE_INIT_INFO_VBS_BASIC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENCLAVE_INIT_INFO_VBS {
    pub Length: DWORD,
    pub ThreadCount: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENCLAVE_INIT_INFO_VBS"][::std::mem::size_of::<_ENCLAVE_INIT_INFO_VBS>() - 8usize];
    ["Alignment of _ENCLAVE_INIT_INFO_VBS"]
        [::std::mem::align_of::<_ENCLAVE_INIT_INFO_VBS>() - 4usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS::Length"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS, Length) - 0usize];
    ["Offset of field: _ENCLAVE_INIT_INFO_VBS::ThreadCount"]
        [::std::mem::offset_of!(_ENCLAVE_INIT_INFO_VBS, ThreadCount) - 4usize];
};
pub type ENCLAVE_INIT_INFO_VBS = _ENCLAVE_INIT_INFO_VBS;
pub type PENCLAVE_INIT_INFO_VBS = *mut _ENCLAVE_INIT_INFO_VBS;
pub type ENCLAVE_TARGET_FUNCTION =
    ::std::option::Option<unsafe extern "C" fn(arg1: PVOID) -> PVOID>;
pub type PENCLAVE_TARGET_FUNCTION = ENCLAVE_TARGET_FUNCTION;
pub type LPENCLAVE_TARGET_FUNCTION = PENCLAVE_TARGET_FUNCTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE {
    pub Type: MEM_DEDICATED_ATTRIBUTE_TYPE,
    pub Reserved: DWORD,
    pub Value: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE"]
        [::std::mem::size_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE>() - 16usize];
    ["Alignment of _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE"]
        [::std::mem::align_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE>() - 8usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE::Type"]
        [::std::mem::offset_of!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE, Type) - 0usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE::Reserved"]
        [::std::mem::offset_of!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE, Reserved) - 4usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE::Value"]
        [::std::mem::offset_of!(_MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE, Value) - 8usize];
};
pub type MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE = _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
pub type PMEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE =
    *mut _MEMORY_PARTITION_DEDICATED_MEMORY_ATTRIBUTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION {
    pub NextEntryOffset: DWORD,
    pub SizeOfInformation: DWORD,
    pub Flags: DWORD,
    pub AttributesOffset: DWORD,
    pub AttributeCount: DWORD,
    pub Reserved: DWORD,
    pub TypeId: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION"]
        [::std::mem::size_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION>() - 32usize];
    ["Alignment of _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION"]
        [::std::mem::align_of::<_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION>() - 8usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::NextEntryOffset"][::std::mem::offset_of!(
        _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION,
        NextEntryOffset
    )
        - 0usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::SizeOfInformation"][::std::mem::offset_of!(
        _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION,
        SizeOfInformation
    )
        - 4usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::Flags"]
        [::std::mem::offset_of!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION, Flags) - 8usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::AttributesOffset"][::std::mem::offset_of!(
        _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION,
        AttributesOffset
    )
        - 12usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::AttributeCount"][::std::mem::offset_of!(
        _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION,
        AttributeCount
    )
        - 16usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::Reserved"][::std::mem::offset_of!(
        _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION,
        Reserved
    ) - 20usize];
    ["Offset of field: _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION::TypeId"]
        [::std::mem::offset_of!(_MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION, TypeId) - 24usize];
};
pub type MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION =
    _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
pub type PMEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION =
    *mut _MEMORY_PARTITION_DEDICATED_MEMORY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_ID_128 {
    pub Identifier: [BYTE; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ID_128"][::std::mem::size_of::<_FILE_ID_128>() - 16usize];
    ["Alignment of _FILE_ID_128"][::std::mem::align_of::<_FILE_ID_128>() - 1usize];
    ["Offset of field: _FILE_ID_128::Identifier"]
        [::std::mem::offset_of!(_FILE_ID_128, Identifier) - 0usize];
};
pub type FILE_ID_128 = _FILE_ID_128;
pub type PFILE_ID_128 = *mut _FILE_ID_128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_NOTIFY_INFORMATION {
    pub NextEntryOffset: DWORD,
    pub Action: DWORD,
    pub FileNameLength: DWORD,
    pub FileName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_NOTIFY_INFORMATION"]
        [::std::mem::size_of::<_FILE_NOTIFY_INFORMATION>() - 16usize];
    ["Alignment of _FILE_NOTIFY_INFORMATION"]
        [::std::mem::align_of::<_FILE_NOTIFY_INFORMATION>() - 4usize];
    ["Offset of field: _FILE_NOTIFY_INFORMATION::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_NOTIFY_INFORMATION, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_NOTIFY_INFORMATION::Action"]
        [::std::mem::offset_of!(_FILE_NOTIFY_INFORMATION, Action) - 4usize];
    ["Offset of field: _FILE_NOTIFY_INFORMATION::FileNameLength"]
        [::std::mem::offset_of!(_FILE_NOTIFY_INFORMATION, FileNameLength) - 8usize];
    ["Offset of field: _FILE_NOTIFY_INFORMATION::FileName"]
        [::std::mem::offset_of!(_FILE_NOTIFY_INFORMATION, FileName) - 12usize];
};
pub type FILE_NOTIFY_INFORMATION = _FILE_NOTIFY_INFORMATION;
pub type PFILE_NOTIFY_INFORMATION = *mut _FILE_NOTIFY_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_NOTIFY_EXTENDED_INFORMATION {
    pub NextEntryOffset: DWORD,
    pub Action: DWORD,
    pub CreationTime: LARGE_INTEGER,
    pub LastModificationTime: LARGE_INTEGER,
    pub LastChangeTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub AllocatedLength: LARGE_INTEGER,
    pub FileSize: LARGE_INTEGER,
    pub FileAttributes: DWORD,
    pub __bindgen_anon_1: _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1,
    pub FileId: LARGE_INTEGER,
    pub ParentFileId: LARGE_INTEGER,
    pub FileNameLength: DWORD,
    pub FileName: [WCHAR; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1 {
    pub ReparsePointTag: DWORD,
    pub EaSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1::ReparsePointTag"][::std::mem::offset_of!(
        _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1,
        ReparsePointTag
    )
        - 0usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1::EaSize"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION__bindgen_ty_1, EaSize) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_NOTIFY_EXTENDED_INFORMATION"]
        [::std::mem::size_of::<_FILE_NOTIFY_EXTENDED_INFORMATION>() - 88usize];
    ["Alignment of _FILE_NOTIFY_EXTENDED_INFORMATION"]
        [::std::mem::align_of::<_FILE_NOTIFY_EXTENDED_INFORMATION>() - 8usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::Action"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, Action) - 4usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::CreationTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, CreationTime) - 8usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::LastModificationTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, LastModificationTime) - 16usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::LastChangeTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, LastChangeTime) - 24usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, LastAccessTime) - 32usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::AllocatedLength"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, AllocatedLength) - 40usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::FileSize"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, FileSize) - 48usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::FileAttributes"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, FileAttributes) - 56usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::FileId"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, FileId) - 64usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::ParentFileId"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, ParentFileId) - 72usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::FileNameLength"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, FileNameLength) - 80usize];
    ["Offset of field: _FILE_NOTIFY_EXTENDED_INFORMATION::FileName"]
        [::std::mem::offset_of!(_FILE_NOTIFY_EXTENDED_INFORMATION, FileName) - 84usize];
};
pub type FILE_NOTIFY_EXTENDED_INFORMATION = _FILE_NOTIFY_EXTENDED_INFORMATION;
pub type PFILE_NOTIFY_EXTENDED_INFORMATION = *mut _FILE_NOTIFY_EXTENDED_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_NOTIFY_FULL_INFORMATION {
    pub NextEntryOffset: DWORD,
    pub Action: DWORD,
    pub CreationTime: LARGE_INTEGER,
    pub LastModificationTime: LARGE_INTEGER,
    pub LastChangeTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub AllocatedLength: LARGE_INTEGER,
    pub FileSize: LARGE_INTEGER,
    pub FileAttributes: DWORD,
    pub __bindgen_anon_1: _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1,
    pub FileId: LARGE_INTEGER,
    pub ParentFileId: LARGE_INTEGER,
    pub FileNameLength: WORD,
    pub FileNameFlags: BYTE,
    pub Reserved: BYTE,
    pub FileName: [WCHAR; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1 {
    pub ReparsePointTag: DWORD,
    pub EaSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1::ReparsePointTag"][::std::mem::offset_of!(
        _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1,
        ReparsePointTag
    ) - 0usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1::EaSize"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION__bindgen_ty_1, EaSize) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_NOTIFY_FULL_INFORMATION"]
        [::std::mem::size_of::<_FILE_NOTIFY_FULL_INFORMATION>() - 88usize];
    ["Alignment of _FILE_NOTIFY_FULL_INFORMATION"]
        [::std::mem::align_of::<_FILE_NOTIFY_FULL_INFORMATION>() - 8usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::Action"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, Action) - 4usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::CreationTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, CreationTime) - 8usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::LastModificationTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, LastModificationTime) - 16usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::LastChangeTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, LastChangeTime) - 24usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, LastAccessTime) - 32usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::AllocatedLength"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, AllocatedLength) - 40usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::FileSize"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, FileSize) - 48usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::FileAttributes"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, FileAttributes) - 56usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::FileId"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, FileId) - 64usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::ParentFileId"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, ParentFileId) - 72usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::FileNameLength"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, FileNameLength) - 80usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::FileNameFlags"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, FileNameFlags) - 82usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::Reserved"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, Reserved) - 83usize];
    ["Offset of field: _FILE_NOTIFY_FULL_INFORMATION::FileName"]
        [::std::mem::offset_of!(_FILE_NOTIFY_FULL_INFORMATION, FileName) - 84usize];
};
pub type FILE_NOTIFY_FULL_INFORMATION = _FILE_NOTIFY_FULL_INFORMATION;
pub type PFILE_NOTIFY_FULL_INFORMATION = *mut _FILE_NOTIFY_FULL_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_STAT_INFORMATION {
    pub FileId: LARGE_INTEGER,
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub FileAttributes: DWORD,
    pub ReparseTag: DWORD,
    pub NumberOfLinks: DWORD,
    pub EffectiveAccess: ACCESS_MASK,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_STAT_INFORMATION"][::std::mem::size_of::<_FILE_STAT_INFORMATION>() - 72usize];
    ["Alignment of _FILE_STAT_INFORMATION"]
        [::std::mem::align_of::<_FILE_STAT_INFORMATION>() - 8usize];
    ["Offset of field: _FILE_STAT_INFORMATION::FileId"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, FileId) - 0usize];
    ["Offset of field: _FILE_STAT_INFORMATION::CreationTime"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, CreationTime) - 8usize];
    ["Offset of field: _FILE_STAT_INFORMATION::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, LastAccessTime) - 16usize];
    ["Offset of field: _FILE_STAT_INFORMATION::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, LastWriteTime) - 24usize];
    ["Offset of field: _FILE_STAT_INFORMATION::ChangeTime"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, ChangeTime) - 32usize];
    ["Offset of field: _FILE_STAT_INFORMATION::AllocationSize"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, AllocationSize) - 40usize];
    ["Offset of field: _FILE_STAT_INFORMATION::EndOfFile"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, EndOfFile) - 48usize];
    ["Offset of field: _FILE_STAT_INFORMATION::FileAttributes"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, FileAttributes) - 56usize];
    ["Offset of field: _FILE_STAT_INFORMATION::ReparseTag"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, ReparseTag) - 60usize];
    ["Offset of field: _FILE_STAT_INFORMATION::NumberOfLinks"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, NumberOfLinks) - 64usize];
    ["Offset of field: _FILE_STAT_INFORMATION::EffectiveAccess"]
        [::std::mem::offset_of!(_FILE_STAT_INFORMATION, EffectiveAccess) - 68usize];
};
pub type FILE_STAT_INFORMATION = _FILE_STAT_INFORMATION;
pub type PFILE_STAT_INFORMATION = *mut _FILE_STAT_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_STAT_LX_INFORMATION {
    pub FileId: LARGE_INTEGER,
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub FileAttributes: DWORD,
    pub ReparseTag: DWORD,
    pub NumberOfLinks: DWORD,
    pub EffectiveAccess: ACCESS_MASK,
    pub LxFlags: DWORD,
    pub LxUid: DWORD,
    pub LxGid: DWORD,
    pub LxMode: DWORD,
    pub LxDeviceIdMajor: DWORD,
    pub LxDeviceIdMinor: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_STAT_LX_INFORMATION"]
        [::std::mem::size_of::<_FILE_STAT_LX_INFORMATION>() - 96usize];
    ["Alignment of _FILE_STAT_LX_INFORMATION"]
        [::std::mem::align_of::<_FILE_STAT_LX_INFORMATION>() - 8usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::FileId"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, FileId) - 0usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::CreationTime"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, CreationTime) - 8usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LastAccessTime) - 16usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LastWriteTime) - 24usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::ChangeTime"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, ChangeTime) - 32usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::AllocationSize"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, AllocationSize) - 40usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::EndOfFile"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, EndOfFile) - 48usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::FileAttributes"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, FileAttributes) - 56usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::ReparseTag"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, ReparseTag) - 60usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::NumberOfLinks"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, NumberOfLinks) - 64usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::EffectiveAccess"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, EffectiveAccess) - 68usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LxFlags"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LxFlags) - 72usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LxUid"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LxUid) - 76usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LxGid"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LxGid) - 80usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LxMode"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LxMode) - 84usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LxDeviceIdMajor"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LxDeviceIdMajor) - 88usize];
    ["Offset of field: _FILE_STAT_LX_INFORMATION::LxDeviceIdMinor"]
        [::std::mem::offset_of!(_FILE_STAT_LX_INFORMATION, LxDeviceIdMinor) - 92usize];
};
pub type FILE_STAT_LX_INFORMATION = _FILE_STAT_LX_INFORMATION;
pub type PFILE_STAT_LX_INFORMATION = *mut _FILE_STAT_LX_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_STAT_BASIC_INFORMATION {
    pub FileId: LARGE_INTEGER,
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub FileAttributes: DWORD,
    pub ReparseTag: DWORD,
    pub NumberOfLinks: DWORD,
    pub DeviceType: DWORD,
    pub DeviceCharacteristics: DWORD,
    pub Reserved: DWORD,
    pub VolumeSerialNumber: LARGE_INTEGER,
    pub FileId128: FILE_ID_128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_STAT_BASIC_INFORMATION"]
        [::std::mem::size_of::<_FILE_STAT_BASIC_INFORMATION>() - 104usize];
    ["Alignment of _FILE_STAT_BASIC_INFORMATION"]
        [::std::mem::align_of::<_FILE_STAT_BASIC_INFORMATION>() - 8usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::FileId"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, FileId) - 0usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::CreationTime"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, CreationTime) - 8usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, LastAccessTime) - 16usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, LastWriteTime) - 24usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::ChangeTime"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, ChangeTime) - 32usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::AllocationSize"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, AllocationSize) - 40usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::EndOfFile"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, EndOfFile) - 48usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::FileAttributes"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, FileAttributes) - 56usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::ReparseTag"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, ReparseTag) - 60usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::NumberOfLinks"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, NumberOfLinks) - 64usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::DeviceType"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, DeviceType) - 68usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::DeviceCharacteristics"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, DeviceCharacteristics) - 72usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::Reserved"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, Reserved) - 76usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::VolumeSerialNumber"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, VolumeSerialNumber) - 80usize];
    ["Offset of field: _FILE_STAT_BASIC_INFORMATION::FileId128"]
        [::std::mem::offset_of!(_FILE_STAT_BASIC_INFORMATION, FileId128) - 88usize];
};
pub type FILE_STAT_BASIC_INFORMATION = _FILE_STAT_BASIC_INFORMATION;
pub type PFILE_STAT_BASIC_INFORMATION = *mut _FILE_STAT_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_CASE_SENSITIVE_INFORMATION {
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_CASE_SENSITIVE_INFORMATION"]
        [::std::mem::size_of::<_FILE_CASE_SENSITIVE_INFORMATION>() - 4usize];
    ["Alignment of _FILE_CASE_SENSITIVE_INFORMATION"]
        [::std::mem::align_of::<_FILE_CASE_SENSITIVE_INFORMATION>() - 4usize];
    ["Offset of field: _FILE_CASE_SENSITIVE_INFORMATION::Flags"]
        [::std::mem::offset_of!(_FILE_CASE_SENSITIVE_INFORMATION, Flags) - 0usize];
};
pub type FILE_CASE_SENSITIVE_INFORMATION = _FILE_CASE_SENSITIVE_INFORMATION;
pub type PFILE_CASE_SENSITIVE_INFORMATION = *mut _FILE_CASE_SENSITIVE_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_SEGMENT_ELEMENT {
    pub Buffer: *mut ::std::os::raw::c_void,
    pub Alignment: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_SEGMENT_ELEMENT"][::std::mem::size_of::<_FILE_SEGMENT_ELEMENT>() - 8usize];
    ["Alignment of _FILE_SEGMENT_ELEMENT"]
        [::std::mem::align_of::<_FILE_SEGMENT_ELEMENT>() - 8usize];
    ["Offset of field: _FILE_SEGMENT_ELEMENT::Buffer"]
        [::std::mem::offset_of!(_FILE_SEGMENT_ELEMENT, Buffer) - 0usize];
    ["Offset of field: _FILE_SEGMENT_ELEMENT::Alignment"]
        [::std::mem::offset_of!(_FILE_SEGMENT_ELEMENT, Alignment) - 0usize];
};
pub type FILE_SEGMENT_ELEMENT = _FILE_SEGMENT_ELEMENT;
pub type PFILE_SEGMENT_ELEMENT = *mut _FILE_SEGMENT_ELEMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REPARSE_GUID_DATA_BUFFER {
    pub ReparseTag: DWORD,
    pub ReparseDataLength: WORD,
    pub Reserved: WORD,
    pub ReparseGuid: GUID,
    pub GenericReparseBuffer: _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1 {
    pub DataBuffer: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1"]
        [::std::mem::size_of::<_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1>() - 1usize];
    ["Alignment of _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1"]
        [::std::mem::align_of::<_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1>() - 1usize];
    ["Offset of field: _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1::DataBuffer"]
        [::std::mem::offset_of!(_REPARSE_GUID_DATA_BUFFER__bindgen_ty_1, DataBuffer) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REPARSE_GUID_DATA_BUFFER"]
        [::std::mem::size_of::<_REPARSE_GUID_DATA_BUFFER>() - 28usize];
    ["Alignment of _REPARSE_GUID_DATA_BUFFER"]
        [::std::mem::align_of::<_REPARSE_GUID_DATA_BUFFER>() - 4usize];
    ["Offset of field: _REPARSE_GUID_DATA_BUFFER::ReparseTag"]
        [::std::mem::offset_of!(_REPARSE_GUID_DATA_BUFFER, ReparseTag) - 0usize];
    ["Offset of field: _REPARSE_GUID_DATA_BUFFER::ReparseDataLength"]
        [::std::mem::offset_of!(_REPARSE_GUID_DATA_BUFFER, ReparseDataLength) - 4usize];
    ["Offset of field: _REPARSE_GUID_DATA_BUFFER::Reserved"]
        [::std::mem::offset_of!(_REPARSE_GUID_DATA_BUFFER, Reserved) - 6usize];
    ["Offset of field: _REPARSE_GUID_DATA_BUFFER::ReparseGuid"]
        [::std::mem::offset_of!(_REPARSE_GUID_DATA_BUFFER, ReparseGuid) - 8usize];
    ["Offset of field: _REPARSE_GUID_DATA_BUFFER::GenericReparseBuffer"]
        [::std::mem::offset_of!(_REPARSE_GUID_DATA_BUFFER, GenericReparseBuffer) - 24usize];
};
pub type REPARSE_GUID_DATA_BUFFER = _REPARSE_GUID_DATA_BUFFER;
pub type PREPARSE_GUID_DATA_BUFFER = *mut _REPARSE_GUID_DATA_BUFFER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_DATA_INPUT {
    pub Size: DWORD,
    pub Flags: DWORD,
    pub MaximumIos: DWORD,
    pub ObjectId: [DWORD; 4usize],
    pub StartingByteOffset: ULONGLONG,
    pub ByteCount: ULONGLONG,
    pub Reserved: [DWORD; 36usize],
    pub ResumeContext: [BYTE; 1040usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCRUB_DATA_INPUT"][::std::mem::size_of::<_SCRUB_DATA_INPUT>() - 1232usize];
    ["Alignment of _SCRUB_DATA_INPUT"][::std::mem::align_of::<_SCRUB_DATA_INPUT>() - 8usize];
    ["Offset of field: _SCRUB_DATA_INPUT::Size"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, Size) - 0usize];
    ["Offset of field: _SCRUB_DATA_INPUT::Flags"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, Flags) - 4usize];
    ["Offset of field: _SCRUB_DATA_INPUT::MaximumIos"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, MaximumIos) - 8usize];
    ["Offset of field: _SCRUB_DATA_INPUT::ObjectId"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, ObjectId) - 12usize];
    ["Offset of field: _SCRUB_DATA_INPUT::StartingByteOffset"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, StartingByteOffset) - 32usize];
    ["Offset of field: _SCRUB_DATA_INPUT::ByteCount"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, ByteCount) - 40usize];
    ["Offset of field: _SCRUB_DATA_INPUT::Reserved"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, Reserved) - 48usize];
    ["Offset of field: _SCRUB_DATA_INPUT::ResumeContext"]
        [::std::mem::offset_of!(_SCRUB_DATA_INPUT, ResumeContext) - 192usize];
};
pub type SCRUB_DATA_INPUT = _SCRUB_DATA_INPUT;
pub type PSCRUB_DATA_INPUT = *mut _SCRUB_DATA_INPUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_PARITY_EXTENT {
    pub Offset: LONGLONG,
    pub Length: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCRUB_PARITY_EXTENT"][::std::mem::size_of::<_SCRUB_PARITY_EXTENT>() - 16usize];
    ["Alignment of _SCRUB_PARITY_EXTENT"][::std::mem::align_of::<_SCRUB_PARITY_EXTENT>() - 8usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT::Offset"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT, Offset) - 0usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT::Length"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT, Length) - 8usize];
};
pub type SCRUB_PARITY_EXTENT = _SCRUB_PARITY_EXTENT;
pub type PSCRUB_PARITY_EXTENT = *mut _SCRUB_PARITY_EXTENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_PARITY_EXTENT_DATA {
    pub Size: WORD,
    pub Flags: WORD,
    pub NumberOfParityExtents: WORD,
    pub MaximumNumberOfParityExtents: WORD,
    pub ParityExtents: [SCRUB_PARITY_EXTENT; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCRUB_PARITY_EXTENT_DATA"]
        [::std::mem::size_of::<_SCRUB_PARITY_EXTENT_DATA>() - 24usize];
    ["Alignment of _SCRUB_PARITY_EXTENT_DATA"]
        [::std::mem::align_of::<_SCRUB_PARITY_EXTENT_DATA>() - 8usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT_DATA::Size"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT_DATA, Size) - 0usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT_DATA::Flags"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT_DATA, Flags) - 2usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT_DATA::NumberOfParityExtents"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT_DATA, NumberOfParityExtents) - 4usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT_DATA::MaximumNumberOfParityExtents"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT_DATA, MaximumNumberOfParityExtents) - 6usize];
    ["Offset of field: _SCRUB_PARITY_EXTENT_DATA::ParityExtents"]
        [::std::mem::offset_of!(_SCRUB_PARITY_EXTENT_DATA, ParityExtents) - 8usize];
};
pub type SCRUB_PARITY_EXTENT_DATA = _SCRUB_PARITY_EXTENT_DATA;
pub type PSCRUB_PARITY_EXTENT_DATA = *mut _SCRUB_PARITY_EXTENT_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SCRUB_DATA_OUTPUT {
    pub Size: DWORD,
    pub Flags: DWORD,
    pub Status: DWORD,
    pub ErrorFileOffset: ULONGLONG,
    pub ErrorLength: ULONGLONG,
    pub NumberOfBytesRepaired: ULONGLONG,
    pub NumberOfBytesFailed: ULONGLONG,
    pub InternalFileReference: ULONGLONG,
    pub ResumeContextLength: WORD,
    pub ParityExtentDataOffset: WORD,
    pub NextStartingByteOffset: ULONGLONG,
    pub ValidDataLength: ULONGLONG,
    pub Reserved: [DWORD; 4usize],
    pub NumberOfMetadataBytesProcessed: ULONGLONG,
    pub NumberOfDataBytesProcessed: ULONGLONG,
    pub TotalNumberOfMetadataBytesInUse: ULONGLONG,
    pub TotalNumberOfDataBytesInUse: ULONGLONG,
    pub DataBytesSkippedDueToNoAllocation: ULONGLONG,
    pub DataBytesSkippedDueToInvalidRun: ULONGLONG,
    pub DataBytesSkippedDueToIntegrityStream: ULONGLONG,
    pub DataBytesSkippedDueToRegionBeingClean: ULONGLONG,
    pub DataBytesSkippedDueToLockConflict: ULONGLONG,
    pub DataBytesSkippedDueToNoScrubDataFlag: ULONGLONG,
    pub DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag: ULONGLONG,
    pub DataBytesScrubbed: ULONGLONG,
    pub ResumeContext: [BYTE; 1040usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SCRUB_DATA_OUTPUT"][::std::mem::size_of::<_SCRUB_DATA_OUTPUT>() - 1232usize];
    ["Alignment of _SCRUB_DATA_OUTPUT"][::std::mem::align_of::<_SCRUB_DATA_OUTPUT>() - 8usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::Size"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, Size) - 0usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::Flags"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, Flags) - 4usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::Status"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, Status) - 8usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::ErrorFileOffset"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, ErrorFileOffset) - 16usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::ErrorLength"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, ErrorLength) - 24usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::NumberOfBytesRepaired"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, NumberOfBytesRepaired) - 32usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::NumberOfBytesFailed"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, NumberOfBytesFailed) - 40usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::InternalFileReference"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, InternalFileReference) - 48usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::ResumeContextLength"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, ResumeContextLength) - 56usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::ParityExtentDataOffset"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, ParityExtentDataOffset) - 58usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::NextStartingByteOffset"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, NextStartingByteOffset) - 64usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::ValidDataLength"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, ValidDataLength) - 72usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::Reserved"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, Reserved) - 80usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::NumberOfMetadataBytesProcessed"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, NumberOfMetadataBytesProcessed) - 96usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::NumberOfDataBytesProcessed"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, NumberOfDataBytesProcessed) - 104usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::TotalNumberOfMetadataBytesInUse"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, TotalNumberOfMetadataBytesInUse) - 112usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::TotalNumberOfDataBytesInUse"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, TotalNumberOfDataBytesInUse) - 120usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToNoAllocation"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, DataBytesSkippedDueToNoAllocation) - 128usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToInvalidRun"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, DataBytesSkippedDueToInvalidRun) - 136usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToIntegrityStream"][::std::mem::offset_of!(
        _SCRUB_DATA_OUTPUT,
        DataBytesSkippedDueToIntegrityStream
    ) - 144usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToRegionBeingClean"][::std::mem::offset_of!(
        _SCRUB_DATA_OUTPUT,
        DataBytesSkippedDueToRegionBeingClean
    ) - 152usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToLockConflict"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, DataBytesSkippedDueToLockConflict) - 160usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToNoScrubDataFlag"][::std::mem::offset_of!(
        _SCRUB_DATA_OUTPUT,
        DataBytesSkippedDueToNoScrubDataFlag
    ) - 168usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag"][::std::mem::offset_of!(
        _SCRUB_DATA_OUTPUT,
        DataBytesSkippedDueToNoScrubNonIntegrityStreamFlag
    )
        - 176usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::DataBytesScrubbed"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, DataBytesScrubbed) - 184usize];
    ["Offset of field: _SCRUB_DATA_OUTPUT::ResumeContext"]
        [::std::mem::offset_of!(_SCRUB_DATA_OUTPUT, ResumeContext) - 192usize];
};
pub type SCRUB_DATA_OUTPUT = _SCRUB_DATA_OUTPUT;
pub type PSCRUB_DATA_OUTPUT = *mut _SCRUB_DATA_OUTPUT;
pub const _SharedVirtualDiskSupportType_SharedVirtualDisksUnsupported:
    _SharedVirtualDiskSupportType = 0;
pub const _SharedVirtualDiskSupportType_SharedVirtualDisksSupported: _SharedVirtualDiskSupportType =
    1;
pub const _SharedVirtualDiskSupportType_SharedVirtualDiskSnapshotsSupported:
    _SharedVirtualDiskSupportType = 3;
pub const _SharedVirtualDiskSupportType_SharedVirtualDiskCDPSnapshotsSupported:
    _SharedVirtualDiskSupportType = 7;
pub type _SharedVirtualDiskSupportType = ::std::os::raw::c_int;
pub use self::_SharedVirtualDiskSupportType as SharedVirtualDiskSupportType;
pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateNone:
    _SharedVirtualDiskHandleState = 0;
pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateFileShared:
    _SharedVirtualDiskHandleState = 1;
pub const _SharedVirtualDiskHandleState_SharedVirtualDiskHandleStateHandleShared:
    _SharedVirtualDiskHandleState = 3;
pub type _SharedVirtualDiskHandleState = ::std::os::raw::c_int;
pub use self::_SharedVirtualDiskHandleState as SharedVirtualDiskHandleState;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SHARED_VIRTUAL_DISK_SUPPORT {
    pub SharedVirtualDiskSupport: SharedVirtualDiskSupportType,
    pub HandleState: SharedVirtualDiskHandleState,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SHARED_VIRTUAL_DISK_SUPPORT"]
        [::std::mem::size_of::<_SHARED_VIRTUAL_DISK_SUPPORT>() - 8usize];
    ["Alignment of _SHARED_VIRTUAL_DISK_SUPPORT"]
        [::std::mem::align_of::<_SHARED_VIRTUAL_DISK_SUPPORT>() - 4usize];
    ["Offset of field: _SHARED_VIRTUAL_DISK_SUPPORT::SharedVirtualDiskSupport"]
        [::std::mem::offset_of!(_SHARED_VIRTUAL_DISK_SUPPORT, SharedVirtualDiskSupport) - 0usize];
    ["Offset of field: _SHARED_VIRTUAL_DISK_SUPPORT::HandleState"]
        [::std::mem::offset_of!(_SHARED_VIRTUAL_DISK_SUPPORT, HandleState) - 4usize];
};
pub type SHARED_VIRTUAL_DISK_SUPPORT = _SHARED_VIRTUAL_DISK_SUPPORT;
pub type PSHARED_VIRTUAL_DISK_SUPPORT = *mut _SHARED_VIRTUAL_DISK_SUPPORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REARRANGE_FILE_DATA {
    pub SourceStartingOffset: ULONGLONG,
    pub TargetOffset: ULONGLONG,
    pub SourceFileHandle: HANDLE,
    pub Length: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REARRANGE_FILE_DATA"][::std::mem::size_of::<_REARRANGE_FILE_DATA>() - 32usize];
    ["Alignment of _REARRANGE_FILE_DATA"][::std::mem::align_of::<_REARRANGE_FILE_DATA>() - 8usize];
    ["Offset of field: _REARRANGE_FILE_DATA::SourceStartingOffset"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA, SourceStartingOffset) - 0usize];
    ["Offset of field: _REARRANGE_FILE_DATA::TargetOffset"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA, TargetOffset) - 8usize];
    ["Offset of field: _REARRANGE_FILE_DATA::SourceFileHandle"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA, SourceFileHandle) - 16usize];
    ["Offset of field: _REARRANGE_FILE_DATA::Length"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA, Length) - 24usize];
    ["Offset of field: _REARRANGE_FILE_DATA::Flags"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA, Flags) - 28usize];
};
pub type REARRANGE_FILE_DATA = _REARRANGE_FILE_DATA;
pub type PREARRANGE_FILE_DATA = *mut _REARRANGE_FILE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REARRANGE_FILE_DATA32 {
    pub SourceStartingOffset: ULONGLONG,
    pub TargetOffset: ULONGLONG,
    pub SourceFileHandle: UINT32,
    pub Length: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REARRANGE_FILE_DATA32"][::std::mem::size_of::<_REARRANGE_FILE_DATA32>() - 32usize];
    ["Alignment of _REARRANGE_FILE_DATA32"]
        [::std::mem::align_of::<_REARRANGE_FILE_DATA32>() - 8usize];
    ["Offset of field: _REARRANGE_FILE_DATA32::SourceStartingOffset"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA32, SourceStartingOffset) - 0usize];
    ["Offset of field: _REARRANGE_FILE_DATA32::TargetOffset"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA32, TargetOffset) - 8usize];
    ["Offset of field: _REARRANGE_FILE_DATA32::SourceFileHandle"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA32, SourceFileHandle) - 16usize];
    ["Offset of field: _REARRANGE_FILE_DATA32::Length"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA32, Length) - 20usize];
    ["Offset of field: _REARRANGE_FILE_DATA32::Flags"]
        [::std::mem::offset_of!(_REARRANGE_FILE_DATA32, Flags) - 24usize];
};
pub type REARRANGE_FILE_DATA32 = _REARRANGE_FILE_DATA32;
pub type PREARRANGE_FILE_DATA32 = *mut _REARRANGE_FILE_DATA32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SHUFFLE_FILE_DATA {
    pub StartingOffset: LONGLONG,
    pub Length: LONGLONG,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SHUFFLE_FILE_DATA"][::std::mem::size_of::<_SHUFFLE_FILE_DATA>() - 24usize];
    ["Alignment of _SHUFFLE_FILE_DATA"][::std::mem::align_of::<_SHUFFLE_FILE_DATA>() - 8usize];
    ["Offset of field: _SHUFFLE_FILE_DATA::StartingOffset"]
        [::std::mem::offset_of!(_SHUFFLE_FILE_DATA, StartingOffset) - 0usize];
    ["Offset of field: _SHUFFLE_FILE_DATA::Length"]
        [::std::mem::offset_of!(_SHUFFLE_FILE_DATA, Length) - 8usize];
    ["Offset of field: _SHUFFLE_FILE_DATA::Flags"]
        [::std::mem::offset_of!(_SHUFFLE_FILE_DATA, Flags) - 16usize];
};
pub type SHUFFLE_FILE_DATA = _SHUFFLE_FILE_DATA;
pub type PSHUFFLE_FILE_DATA = *mut _SHUFFLE_FILE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NETWORK_APP_INSTANCE_EA {
    pub AppInstanceID: GUID,
    pub CsvFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NETWORK_APP_INSTANCE_EA"]
        [::std::mem::size_of::<_NETWORK_APP_INSTANCE_EA>() - 20usize];
    ["Alignment of _NETWORK_APP_INSTANCE_EA"]
        [::std::mem::align_of::<_NETWORK_APP_INSTANCE_EA>() - 4usize];
    ["Offset of field: _NETWORK_APP_INSTANCE_EA::AppInstanceID"]
        [::std::mem::offset_of!(_NETWORK_APP_INSTANCE_EA, AppInstanceID) - 0usize];
    ["Offset of field: _NETWORK_APP_INSTANCE_EA::CsvFlags"]
        [::std::mem::offset_of!(_NETWORK_APP_INSTANCE_EA, CsvFlags) - 16usize];
};
pub type NETWORK_APP_INSTANCE_EA = _NETWORK_APP_INSTANCE_EA;
pub type PNETWORK_APP_INSTANCE_EA = *mut _NETWORK_APP_INSTANCE_EA;
unsafe extern "C" {
    pub static GUID_MAX_POWER_SAVINGS: GUID;
}
unsafe extern "C" {
    pub static GUID_MIN_POWER_SAVINGS: GUID;
}
unsafe extern "C" {
    pub static GUID_TYPICAL_POWER_SAVINGS: GUID;
}
unsafe extern "C" {
    pub static NO_SUBGROUP_GUID: GUID;
}
unsafe extern "C" {
    pub static ALL_POWERSCHEMES_GUID: GUID;
}
unsafe extern "C" {
    pub static GUID_POWERSCHEME_PERSONALITY: GUID;
}
unsafe extern "C" {
    pub static GUID_ACTIVE_POWERSCHEME: GUID;
}
unsafe extern "C" {
    pub static GUID_POWER_MODE_BEST_EFFICIENCY: GUID;
}
unsafe extern "C" {
    pub static GUID_POWER_MODE_NONE: GUID;
}
unsafe extern "C" {
    pub static GUID_POWER_MODE_PERFORMANCE: GUID;
}
unsafe extern "C" {
    pub static GUID_POWER_MODE_BEST_PERFORMANCE: GUID;
}
unsafe extern "C" {
    pub static GUID_IDLE_RESILIENCY_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_IDLE_RESILIENCY_PERIOD: GUID;
}
unsafe extern "C" {
    pub static GUID_DEEP_SLEEP_ENABLED: GUID;
}
unsafe extern "C" {
    pub static GUID_DEEP_SLEEP_PLATFORM_STATE: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_POWERDOWN_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_ANNOYANCE_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_DIM_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_ADAPTIVE_POWERDOWN: GUID;
}
unsafe extern "C" {
    pub static GUID_MONITOR_POWER_ON: GUID;
}
unsafe extern "C" {
    pub static GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: GUID;
}
unsafe extern "C" {
    pub static GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: GUID;
}
unsafe extern "C" {
    pub static GUID_CONSOLE_DISPLAY_STATE: GUID;
}
unsafe extern "C" {
    pub static GUID_ALLOW_DISPLAY_REQUIRED: GUID;
}
unsafe extern "C" {
    pub static GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_ADVANCED_COLOR_QUALITY_BIAS: GUID;
}
unsafe extern "C" {
    pub static GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_NON_ADAPTIVE_INPUT_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_MAX_POWER: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_POWERDOWN_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_IDLE_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_BURST_IGNORE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_ADAPTIVE_POWERDOWN: GUID;
}
unsafe extern "C" {
    pub static GUID_DISK_NVME_NOPPME: GUID;
}
unsafe extern "C" {
    pub static GUID_SLEEP_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_SLEEP_IDLE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_UNATTEND_SLEEP_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_HIBERNATE_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_HIBERNATE_FASTS4_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_CRITICAL_POWER_TRANSITION: GUID;
}
unsafe extern "C" {
    pub static GUID_SYSTEM_AWAYMODE: GUID;
}
unsafe extern "C" {
    pub static GUID_ALLOW_AWAYMODE: GUID;
}
unsafe extern "C" {
    pub static GUID_USER_PRESENCE_PREDICTION: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_BUDGET_GRACE_PERIOD: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_BUDGET_PERCENT: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_BUDGET_REFRESH_COUNT: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_BUDGET_REFRESH_INTERVAL: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_RESERVE_GRACE_PERIOD: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_RESERVE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_STANDBY_RESET_PERCENT: GUID;
}
unsafe extern "C" {
    pub static GUID_HUPR_ADAPTIVE_AWAY_DISPLAY_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_HUPR_ADAPTIVE_INATTENTIVE_DIM_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_HUPR_ADAPTIVE_INATTENTIVE_DISPLAY_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_HUPR_ADAPTIVE_AWAY_DIM_TIMEOUT: GUID;
}
unsafe extern "C" {
    pub static GUID_ALLOW_STANDBY_STATES: GUID;
}
unsafe extern "C" {
    pub static GUID_ALLOW_RTC_WAKE: GUID;
}
unsafe extern "C" {
    pub static GUID_LEGACY_RTC_MITIGATION: GUID;
}
unsafe extern "C" {
    pub static GUID_ALLOW_SYSTEM_REQUIRED: GUID;
}
unsafe extern "C" {
    pub static GUID_POWER_SAVING_STATUS: GUID;
}
unsafe extern "C" {
    pub static GUID_ENERGY_SAVER_STATUS: GUID;
}
unsafe extern "C" {
    pub static GUID_ENERGY_SAVER_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_ENERGY_SAVER_BATTERY_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_ENERGY_SAVER_BRIGHTNESS: GUID;
}
unsafe extern "C" {
    pub static GUID_ENERGY_SAVER_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_SYSTEM_BUTTON_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_POWERBUTTON_ACTION: GUID;
}
unsafe extern "C" {
    pub static GUID_SLEEPBUTTON_ACTION: GUID;
}
unsafe extern "C" {
    pub static GUID_USERINTERFACEBUTTON_ACTION: GUID;
}
unsafe extern "C" {
    pub static GUID_LIDCLOSE_ACTION: GUID;
}
unsafe extern "C" {
    pub static GUID_LIDOPEN_POWERSTATE: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_0: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_0: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_0: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_1: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_1: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_1: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_2: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_2: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_2: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_ACTION_3: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_LEVEL_3: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_DISCHARGE_FLAGS_3: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SETTINGS_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MAXIMUM: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MAXIMUM_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MAXIMUM_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MINIMUM: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MINIMUM_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THROTTLE_MINIMUM_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_FREQUENCY_LIMIT: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_FREQUENCY_LIMIT_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_FREQUENCY_LIMIT_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_ALLOW_THROTTLING: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLESTATE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERFSTATE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_POLICY_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_POLICY_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_TIME_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_TIME_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_TIME_CHECK: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_BOOST_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_BOOST_MODE: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_DUTY_CYCLING: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLE_ALLOW_SCALING: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLE_DISABLE: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLE_STATE_MAXIMUM: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLE_TIME_CHECK: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PARKING_CORE_OVERRIDE: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PARKING_PERF_STATE: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PARKING_PERF_STATE_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SOFT_PARKING_LATENCY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_HISTORY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_HISTORY_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_INCREASE_HISTORY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_DECREASE_HISTORY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_EPP: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_EPP_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_PERF_LATENCY_HINT_EPP_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_MODULE_PARKING_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_COMPLEX_PARKING_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SMT_UNPARKING_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESTRICTION_COUNT: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_DISTRIBUTE_UTILITY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESOURCE_PRIORITY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESOURCE_PRIORITY_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESOURCE_PRIORITY_2: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETEROGENEOUS_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_DECREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_INCREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_DECREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_INCREASE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_EFFICIENCY_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_HYBRID_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_EFFICIENCY_IMP_UTIL_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_CONTAINMENT_HYBRID_IMP_UTIL_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_WPS_MIN_EFFICIENCY_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CLASS0_FLOOR_PERF: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_CLASS1_INITIAL_PERF: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SHORT_THREAD_RUNTIME_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_UPPER_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_SHORT_THREAD_ARCH_CLASS_LOWER_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_UPPER_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_LONG_THREAD_ARCH_CLASS_LOWER_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_SYSTEM_COOLING_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: GUID;
}
unsafe extern "C" {
    pub static GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: GUID;
}
unsafe extern "C" {
    pub static GUID_LOCK_CONSOLE_ON_WAKE: GUID;
}
unsafe extern "C" {
    pub static GUID_DEVICE_IDLE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_CONNECTIVITY_IN_STANDBY: GUID;
}
unsafe extern "C" {
    pub static GUID_DISCONNECTED_STANDBY_MODE: GUID;
}
unsafe extern "C" {
    pub static GUID_ACDC_POWER_SOURCE: GUID;
}
unsafe extern "C" {
    pub static GUID_LIDSWITCH_STATE_CHANGE: GUID;
}
unsafe extern "C" {
    pub static GUID_LIDSWITCH_STATE_RELIABILITY: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_PERCENTAGE_REMAINING: GUID;
}
unsafe extern "C" {
    pub static GUID_BATTERY_COUNT: GUID;
}
unsafe extern "C" {
    pub static GUID_GLOBAL_USER_PRESENCE: GUID;
}
unsafe extern "C" {
    pub static GUID_SESSION_DISPLAY_STATUS: GUID;
}
unsafe extern "C" {
    pub static GUID_SESSION_USER_PRESENCE: GUID;
}
unsafe extern "C" {
    pub static GUID_IDLE_BACKGROUND_TASK: GUID;
}
unsafe extern "C" {
    pub static GUID_BACKGROUND_TASK_NOTIFICATION: GUID;
}
unsafe extern "C" {
    pub static GUID_APPLAUNCH_BUTTON: GUID;
}
unsafe extern "C" {
    pub static GUID_PCIEXPRESS_SETTINGS_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_PCIEXPRESS_ASPM_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: GUID;
}
unsafe extern "C" {
    pub static GUID_INTSTEER_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_INTSTEER_MODE: GUID;
}
unsafe extern "C" {
    pub static GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: GUID;
}
unsafe extern "C" {
    pub static GUID_INTSTEER_TIME_UNPARK_TRIGGER: GUID;
}
unsafe extern "C" {
    pub static GUID_GRAPHICS_SUBGROUP: GUID;
}
unsafe extern "C" {
    pub static GUID_GPU_PREFERENCE_POLICY: GUID;
}
unsafe extern "C" {
    pub static GUID_MIXED_REALITY_MODE: GUID;
}
unsafe extern "C" {
    pub static GUID_SPR_ACTIVE_SESSION_CHANGE: GUID;
}
pub const _SYSTEM_POWER_STATE_PowerSystemUnspecified: _SYSTEM_POWER_STATE = 0;
pub const _SYSTEM_POWER_STATE_PowerSystemWorking: _SYSTEM_POWER_STATE = 1;
pub const _SYSTEM_POWER_STATE_PowerSystemSleeping1: _SYSTEM_POWER_STATE = 2;
pub const _SYSTEM_POWER_STATE_PowerSystemSleeping2: _SYSTEM_POWER_STATE = 3;
pub const _SYSTEM_POWER_STATE_PowerSystemSleeping3: _SYSTEM_POWER_STATE = 4;
pub const _SYSTEM_POWER_STATE_PowerSystemHibernate: _SYSTEM_POWER_STATE = 5;
pub const _SYSTEM_POWER_STATE_PowerSystemShutdown: _SYSTEM_POWER_STATE = 6;
pub const _SYSTEM_POWER_STATE_PowerSystemMaximum: _SYSTEM_POWER_STATE = 7;
pub type _SYSTEM_POWER_STATE = ::std::os::raw::c_int;
pub use self::_SYSTEM_POWER_STATE as SYSTEM_POWER_STATE;
pub type PSYSTEM_POWER_STATE = *mut _SYSTEM_POWER_STATE;
pub const POWER_ACTION_PowerActionNone: POWER_ACTION = 0;
pub const POWER_ACTION_PowerActionReserved: POWER_ACTION = 1;
pub const POWER_ACTION_PowerActionSleep: POWER_ACTION = 2;
pub const POWER_ACTION_PowerActionHibernate: POWER_ACTION = 3;
pub const POWER_ACTION_PowerActionShutdown: POWER_ACTION = 4;
pub const POWER_ACTION_PowerActionShutdownReset: POWER_ACTION = 5;
pub const POWER_ACTION_PowerActionShutdownOff: POWER_ACTION = 6;
pub const POWER_ACTION_PowerActionWarmEject: POWER_ACTION = 7;
pub const POWER_ACTION_PowerActionDisplayOff: POWER_ACTION = 8;
pub type POWER_ACTION = ::std::os::raw::c_int;
pub type PPOWER_ACTION = *mut POWER_ACTION;
pub const _DEVICE_POWER_STATE_PowerDeviceUnspecified: _DEVICE_POWER_STATE = 0;
pub const _DEVICE_POWER_STATE_PowerDeviceD0: _DEVICE_POWER_STATE = 1;
pub const _DEVICE_POWER_STATE_PowerDeviceD1: _DEVICE_POWER_STATE = 2;
pub const _DEVICE_POWER_STATE_PowerDeviceD2: _DEVICE_POWER_STATE = 3;
pub const _DEVICE_POWER_STATE_PowerDeviceD3: _DEVICE_POWER_STATE = 4;
pub const _DEVICE_POWER_STATE_PowerDeviceMaximum: _DEVICE_POWER_STATE = 5;
pub type _DEVICE_POWER_STATE = ::std::os::raw::c_int;
pub use self::_DEVICE_POWER_STATE as DEVICE_POWER_STATE;
pub type PDEVICE_POWER_STATE = *mut _DEVICE_POWER_STATE;
pub const _MONITOR_DISPLAY_STATE_PowerMonitorOff: _MONITOR_DISPLAY_STATE = 0;
pub const _MONITOR_DISPLAY_STATE_PowerMonitorOn: _MONITOR_DISPLAY_STATE = 1;
pub const _MONITOR_DISPLAY_STATE_PowerMonitorDim: _MONITOR_DISPLAY_STATE = 2;
pub type _MONITOR_DISPLAY_STATE = ::std::os::raw::c_int;
pub use self::_MONITOR_DISPLAY_STATE as MONITOR_DISPLAY_STATE;
pub type PMONITOR_DISPLAY_STATE = *mut _MONITOR_DISPLAY_STATE;
pub const _USER_ACTIVITY_PRESENCE_PowerUserPresent: _USER_ACTIVITY_PRESENCE = 0;
pub const _USER_ACTIVITY_PRESENCE_PowerUserNotPresent: _USER_ACTIVITY_PRESENCE = 1;
pub const _USER_ACTIVITY_PRESENCE_PowerUserInactive: _USER_ACTIVITY_PRESENCE = 2;
pub const _USER_ACTIVITY_PRESENCE_PowerUserMaximum: _USER_ACTIVITY_PRESENCE = 3;
pub const _USER_ACTIVITY_PRESENCE_PowerUserInvalid: _USER_ACTIVITY_PRESENCE = 3;
pub type _USER_ACTIVITY_PRESENCE = ::std::os::raw::c_int;
pub use self::_USER_ACTIVITY_PRESENCE as USER_ACTIVITY_PRESENCE;
pub type PUSER_ACTIVITY_PRESENCE = *mut _USER_ACTIVITY_PRESENCE;
pub const _ENERGY_SAVER_STATUS_ENERGY_SAVER_OFF: _ENERGY_SAVER_STATUS = 0;
pub const _ENERGY_SAVER_STATUS_ENERGY_SAVER_STANDARD: _ENERGY_SAVER_STATUS = 1;
pub const _ENERGY_SAVER_STATUS_ENERGY_SAVER_HIGH_SAVINGS: _ENERGY_SAVER_STATUS = 2;
pub type _ENERGY_SAVER_STATUS = ::std::os::raw::c_int;
pub use self::_ENERGY_SAVER_STATUS as ENERGY_SAVER_STATUS;
pub type PENERGY_SAVER_STATUS = *mut _ENERGY_SAVER_STATUS;
pub type EXECUTION_STATE = DWORD;
pub type PEXECUTION_STATE = *mut DWORD;
pub const LATENCY_TIME_LT_DONT_CARE: LATENCY_TIME = 0;
pub const LATENCY_TIME_LT_LOWEST_LATENCY: LATENCY_TIME = 1;
pub type LATENCY_TIME = ::std::os::raw::c_int;
pub const _POWER_REQUEST_TYPE_PowerRequestDisplayRequired: _POWER_REQUEST_TYPE = 0;
pub const _POWER_REQUEST_TYPE_PowerRequestSystemRequired: _POWER_REQUEST_TYPE = 1;
pub const _POWER_REQUEST_TYPE_PowerRequestAwayModeRequired: _POWER_REQUEST_TYPE = 2;
pub const _POWER_REQUEST_TYPE_PowerRequestExecutionRequired: _POWER_REQUEST_TYPE = 3;
pub type _POWER_REQUEST_TYPE = ::std::os::raw::c_int;
pub use self::_POWER_REQUEST_TYPE as POWER_REQUEST_TYPE;
pub type PPOWER_REQUEST_TYPE = *mut _POWER_REQUEST_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CM_Power_Data_s {
    pub PD_Size: DWORD,
    pub PD_MostRecentPowerState: DEVICE_POWER_STATE,
    pub PD_Capabilities: DWORD,
    pub PD_D1Latency: DWORD,
    pub PD_D2Latency: DWORD,
    pub PD_D3Latency: DWORD,
    pub PD_PowerStateMapping: [DEVICE_POWER_STATE; 7usize],
    pub PD_DeepestSystemWake: SYSTEM_POWER_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CM_Power_Data_s"][::std::mem::size_of::<CM_Power_Data_s>() - 56usize];
    ["Alignment of CM_Power_Data_s"][::std::mem::align_of::<CM_Power_Data_s>() - 4usize];
    ["Offset of field: CM_Power_Data_s::PD_Size"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_Size) - 0usize];
    ["Offset of field: CM_Power_Data_s::PD_MostRecentPowerState"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_MostRecentPowerState) - 4usize];
    ["Offset of field: CM_Power_Data_s::PD_Capabilities"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_Capabilities) - 8usize];
    ["Offset of field: CM_Power_Data_s::PD_D1Latency"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_D1Latency) - 12usize];
    ["Offset of field: CM_Power_Data_s::PD_D2Latency"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_D2Latency) - 16usize];
    ["Offset of field: CM_Power_Data_s::PD_D3Latency"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_D3Latency) - 20usize];
    ["Offset of field: CM_Power_Data_s::PD_PowerStateMapping"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_PowerStateMapping) - 24usize];
    ["Offset of field: CM_Power_Data_s::PD_DeepestSystemWake"]
        [::std::mem::offset_of!(CM_Power_Data_s, PD_DeepestSystemWake) - 52usize];
};
pub type CM_POWER_DATA = CM_Power_Data_s;
pub type PCM_POWER_DATA = *mut CM_Power_Data_s;
pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyAc: POWER_INFORMATION_LEVEL = 0;
pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyDc: POWER_INFORMATION_LEVEL = 1;
pub const POWER_INFORMATION_LEVEL_VerifySystemPolicyAc: POWER_INFORMATION_LEVEL = 2;
pub const POWER_INFORMATION_LEVEL_VerifySystemPolicyDc: POWER_INFORMATION_LEVEL = 3;
pub const POWER_INFORMATION_LEVEL_SystemPowerCapabilities: POWER_INFORMATION_LEVEL = 4;
pub const POWER_INFORMATION_LEVEL_SystemBatteryState: POWER_INFORMATION_LEVEL = 5;
pub const POWER_INFORMATION_LEVEL_SystemPowerStateHandler: POWER_INFORMATION_LEVEL = 6;
pub const POWER_INFORMATION_LEVEL_ProcessorStateHandler: POWER_INFORMATION_LEVEL = 7;
pub const POWER_INFORMATION_LEVEL_SystemPowerPolicyCurrent: POWER_INFORMATION_LEVEL = 8;
pub const POWER_INFORMATION_LEVEL_AdministratorPowerPolicy: POWER_INFORMATION_LEVEL = 9;
pub const POWER_INFORMATION_LEVEL_SystemReserveHiberFile: POWER_INFORMATION_LEVEL = 10;
pub const POWER_INFORMATION_LEVEL_ProcessorInformation: POWER_INFORMATION_LEVEL = 11;
pub const POWER_INFORMATION_LEVEL_SystemPowerInformation: POWER_INFORMATION_LEVEL = 12;
pub const POWER_INFORMATION_LEVEL_ProcessorStateHandler2: POWER_INFORMATION_LEVEL = 13;
pub const POWER_INFORMATION_LEVEL_LastWakeTime: POWER_INFORMATION_LEVEL = 14;
pub const POWER_INFORMATION_LEVEL_LastSleepTime: POWER_INFORMATION_LEVEL = 15;
pub const POWER_INFORMATION_LEVEL_SystemExecutionState: POWER_INFORMATION_LEVEL = 16;
pub const POWER_INFORMATION_LEVEL_SystemPowerStateNotifyHandler: POWER_INFORMATION_LEVEL = 17;
pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyAc: POWER_INFORMATION_LEVEL = 18;
pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyDc: POWER_INFORMATION_LEVEL = 19;
pub const POWER_INFORMATION_LEVEL_VerifyProcessorPowerPolicyAc: POWER_INFORMATION_LEVEL = 20;
pub const POWER_INFORMATION_LEVEL_VerifyProcessorPowerPolicyDc: POWER_INFORMATION_LEVEL = 21;
pub const POWER_INFORMATION_LEVEL_ProcessorPowerPolicyCurrent: POWER_INFORMATION_LEVEL = 22;
pub const POWER_INFORMATION_LEVEL_SystemPowerStateLogging: POWER_INFORMATION_LEVEL = 23;
pub const POWER_INFORMATION_LEVEL_SystemPowerLoggingEntry: POWER_INFORMATION_LEVEL = 24;
pub const POWER_INFORMATION_LEVEL_SetPowerSettingValue: POWER_INFORMATION_LEVEL = 25;
pub const POWER_INFORMATION_LEVEL_NotifyUserPowerSetting: POWER_INFORMATION_LEVEL = 26;
pub const POWER_INFORMATION_LEVEL_PowerInformationLevelUnused0: POWER_INFORMATION_LEVEL = 27;
pub const POWER_INFORMATION_LEVEL_SystemMonitorHiberBootPowerOff: POWER_INFORMATION_LEVEL = 28;
pub const POWER_INFORMATION_LEVEL_SystemVideoState: POWER_INFORMATION_LEVEL = 29;
pub const POWER_INFORMATION_LEVEL_TraceApplicationPowerMessage: POWER_INFORMATION_LEVEL = 30;
pub const POWER_INFORMATION_LEVEL_TraceApplicationPowerMessageEnd: POWER_INFORMATION_LEVEL = 31;
pub const POWER_INFORMATION_LEVEL_ProcessorPerfStates: POWER_INFORMATION_LEVEL = 32;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleStates: POWER_INFORMATION_LEVEL = 33;
pub const POWER_INFORMATION_LEVEL_ProcessorCap: POWER_INFORMATION_LEVEL = 34;
pub const POWER_INFORMATION_LEVEL_SystemWakeSource: POWER_INFORMATION_LEVEL = 35;
pub const POWER_INFORMATION_LEVEL_SystemHiberFileInformation: POWER_INFORMATION_LEVEL = 36;
pub const POWER_INFORMATION_LEVEL_TraceServicePowerMessage: POWER_INFORMATION_LEVEL = 37;
pub const POWER_INFORMATION_LEVEL_ProcessorLoad: POWER_INFORMATION_LEVEL = 38;
pub const POWER_INFORMATION_LEVEL_PowerShutdownNotification: POWER_INFORMATION_LEVEL = 39;
pub const POWER_INFORMATION_LEVEL_MonitorCapabilities: POWER_INFORMATION_LEVEL = 40;
pub const POWER_INFORMATION_LEVEL_SessionPowerInit: POWER_INFORMATION_LEVEL = 41;
pub const POWER_INFORMATION_LEVEL_SessionDisplayState: POWER_INFORMATION_LEVEL = 42;
pub const POWER_INFORMATION_LEVEL_PowerRequestCreate: POWER_INFORMATION_LEVEL = 43;
pub const POWER_INFORMATION_LEVEL_PowerRequestAction: POWER_INFORMATION_LEVEL = 44;
pub const POWER_INFORMATION_LEVEL_GetPowerRequestList: POWER_INFORMATION_LEVEL = 45;
pub const POWER_INFORMATION_LEVEL_ProcessorInformationEx: POWER_INFORMATION_LEVEL = 46;
pub const POWER_INFORMATION_LEVEL_NotifyUserModeLegacyPowerEvent: POWER_INFORMATION_LEVEL = 47;
pub const POWER_INFORMATION_LEVEL_GroupPark: POWER_INFORMATION_LEVEL = 48;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleDomains: POWER_INFORMATION_LEVEL = 49;
pub const POWER_INFORMATION_LEVEL_WakeTimerList: POWER_INFORMATION_LEVEL = 50;
pub const POWER_INFORMATION_LEVEL_SystemHiberFileSize: POWER_INFORMATION_LEVEL = 51;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleStatesHv: POWER_INFORMATION_LEVEL = 52;
pub const POWER_INFORMATION_LEVEL_ProcessorPerfStatesHv: POWER_INFORMATION_LEVEL = 53;
pub const POWER_INFORMATION_LEVEL_ProcessorPerfCapHv: POWER_INFORMATION_LEVEL = 54;
pub const POWER_INFORMATION_LEVEL_ProcessorSetIdle: POWER_INFORMATION_LEVEL = 55;
pub const POWER_INFORMATION_LEVEL_LogicalProcessorIdling: POWER_INFORMATION_LEVEL = 56;
pub const POWER_INFORMATION_LEVEL_UserPresence: POWER_INFORMATION_LEVEL = 57;
pub const POWER_INFORMATION_LEVEL_PowerSettingNotificationName: POWER_INFORMATION_LEVEL = 58;
pub const POWER_INFORMATION_LEVEL_GetPowerSettingValue: POWER_INFORMATION_LEVEL = 59;
pub const POWER_INFORMATION_LEVEL_IdleResiliency: POWER_INFORMATION_LEVEL = 60;
pub const POWER_INFORMATION_LEVEL_SessionRITState: POWER_INFORMATION_LEVEL = 61;
pub const POWER_INFORMATION_LEVEL_SessionConnectNotification: POWER_INFORMATION_LEVEL = 62;
pub const POWER_INFORMATION_LEVEL_SessionPowerCleanup: POWER_INFORMATION_LEVEL = 63;
pub const POWER_INFORMATION_LEVEL_SessionLockState: POWER_INFORMATION_LEVEL = 64;
pub const POWER_INFORMATION_LEVEL_SystemHiberbootState: POWER_INFORMATION_LEVEL = 65;
pub const POWER_INFORMATION_LEVEL_PlatformInformation: POWER_INFORMATION_LEVEL = 66;
pub const POWER_INFORMATION_LEVEL_PdcInvocation: POWER_INFORMATION_LEVEL = 67;
pub const POWER_INFORMATION_LEVEL_MonitorInvocation: POWER_INFORMATION_LEVEL = 68;
pub const POWER_INFORMATION_LEVEL_FirmwareTableInformationRegistered: POWER_INFORMATION_LEVEL = 69;
pub const POWER_INFORMATION_LEVEL_SetShutdownSelectedTime: POWER_INFORMATION_LEVEL = 70;
pub const POWER_INFORMATION_LEVEL_SuspendResumeInvocation: POWER_INFORMATION_LEVEL = 71;
pub const POWER_INFORMATION_LEVEL_PlmPowerRequestCreate: POWER_INFORMATION_LEVEL = 72;
pub const POWER_INFORMATION_LEVEL_ScreenOff: POWER_INFORMATION_LEVEL = 73;
pub const POWER_INFORMATION_LEVEL_CsDeviceNotification: POWER_INFORMATION_LEVEL = 74;
pub const POWER_INFORMATION_LEVEL_PlatformRole: POWER_INFORMATION_LEVEL = 75;
pub const POWER_INFORMATION_LEVEL_LastResumePerformance: POWER_INFORMATION_LEVEL = 76;
pub const POWER_INFORMATION_LEVEL_DisplayBurst: POWER_INFORMATION_LEVEL = 77;
pub const POWER_INFORMATION_LEVEL_ExitLatencySamplingPercentage: POWER_INFORMATION_LEVEL = 78;
pub const POWER_INFORMATION_LEVEL_RegisterSpmPowerSettings: POWER_INFORMATION_LEVEL = 79;
pub const POWER_INFORMATION_LEVEL_PlatformIdleStates: POWER_INFORMATION_LEVEL = 80;
pub const POWER_INFORMATION_LEVEL_ProcessorIdleVeto: POWER_INFORMATION_LEVEL = 81;
pub const POWER_INFORMATION_LEVEL_PlatformIdleVeto: POWER_INFORMATION_LEVEL = 82;
pub const POWER_INFORMATION_LEVEL_SystemBatteryStatePrecise: POWER_INFORMATION_LEVEL = 83;
pub const POWER_INFORMATION_LEVEL_ThermalEvent: POWER_INFORMATION_LEVEL = 84;
pub const POWER_INFORMATION_LEVEL_PowerRequestActionInternal: POWER_INFORMATION_LEVEL = 85;
pub const POWER_INFORMATION_LEVEL_BatteryDeviceState: POWER_INFORMATION_LEVEL = 86;
pub const POWER_INFORMATION_LEVEL_PowerInformationInternal: POWER_INFORMATION_LEVEL = 87;
pub const POWER_INFORMATION_LEVEL_ThermalStandby: POWER_INFORMATION_LEVEL = 88;
pub const POWER_INFORMATION_LEVEL_SystemHiberFileType: POWER_INFORMATION_LEVEL = 89;
pub const POWER_INFORMATION_LEVEL_PhysicalPowerButtonPress: POWER_INFORMATION_LEVEL = 90;
pub const POWER_INFORMATION_LEVEL_QueryPotentialDripsConstraint: POWER_INFORMATION_LEVEL = 91;
pub const POWER_INFORMATION_LEVEL_EnergyTrackerCreate: POWER_INFORMATION_LEVEL = 92;
pub const POWER_INFORMATION_LEVEL_EnergyTrackerQuery: POWER_INFORMATION_LEVEL = 93;
pub const POWER_INFORMATION_LEVEL_UpdateBlackBoxRecorder: POWER_INFORMATION_LEVEL = 94;
pub const POWER_INFORMATION_LEVEL_SessionAllowExternalDmaDevices: POWER_INFORMATION_LEVEL = 95;
pub const POWER_INFORMATION_LEVEL_SendSuspendResumeNotification: POWER_INFORMATION_LEVEL = 96;
pub const POWER_INFORMATION_LEVEL_BlackBoxRecorderDirectAccessBuffer: POWER_INFORMATION_LEVEL = 97;
pub const POWER_INFORMATION_LEVEL_SystemPowerSourceState: POWER_INFORMATION_LEVEL = 98;
pub const POWER_INFORMATION_LEVEL_PowerInformationLevelMaximum: POWER_INFORMATION_LEVEL = 99;
pub type POWER_INFORMATION_LEVEL = ::std::os::raw::c_int;
pub const POWER_USER_PRESENCE_TYPE_UserNotPresent: POWER_USER_PRESENCE_TYPE = 0;
pub const POWER_USER_PRESENCE_TYPE_UserPresent: POWER_USER_PRESENCE_TYPE = 1;
pub const POWER_USER_PRESENCE_TYPE_UserUnknown: POWER_USER_PRESENCE_TYPE = 255;
pub type POWER_USER_PRESENCE_TYPE = ::std::os::raw::c_int;
pub type PPOWER_USER_PRESENCE_TYPE = *mut POWER_USER_PRESENCE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_USER_PRESENCE {
    pub UserPresence: POWER_USER_PRESENCE_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_USER_PRESENCE"][::std::mem::size_of::<_POWER_USER_PRESENCE>() - 4usize];
    ["Alignment of _POWER_USER_PRESENCE"][::std::mem::align_of::<_POWER_USER_PRESENCE>() - 4usize];
    ["Offset of field: _POWER_USER_PRESENCE::UserPresence"]
        [::std::mem::offset_of!(_POWER_USER_PRESENCE, UserPresence) - 0usize];
};
pub type POWER_USER_PRESENCE = _POWER_USER_PRESENCE;
pub type PPOWER_USER_PRESENCE = *mut _POWER_USER_PRESENCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_CONNECT {
    pub Connected: BOOLEAN,
    pub Console: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_SESSION_CONNECT"][::std::mem::size_of::<_POWER_SESSION_CONNECT>() - 2usize];
    ["Alignment of _POWER_SESSION_CONNECT"]
        [::std::mem::align_of::<_POWER_SESSION_CONNECT>() - 1usize];
    ["Offset of field: _POWER_SESSION_CONNECT::Connected"]
        [::std::mem::offset_of!(_POWER_SESSION_CONNECT, Connected) - 0usize];
    ["Offset of field: _POWER_SESSION_CONNECT::Console"]
        [::std::mem::offset_of!(_POWER_SESSION_CONNECT, Console) - 1usize];
};
pub type POWER_SESSION_CONNECT = _POWER_SESSION_CONNECT;
pub type PPOWER_SESSION_CONNECT = *mut _POWER_SESSION_CONNECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_TIMEOUTS {
    pub InputTimeout: DWORD,
    pub DisplayTimeout: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_SESSION_TIMEOUTS"][::std::mem::size_of::<_POWER_SESSION_TIMEOUTS>() - 8usize];
    ["Alignment of _POWER_SESSION_TIMEOUTS"]
        [::std::mem::align_of::<_POWER_SESSION_TIMEOUTS>() - 4usize];
    ["Offset of field: _POWER_SESSION_TIMEOUTS::InputTimeout"]
        [::std::mem::offset_of!(_POWER_SESSION_TIMEOUTS, InputTimeout) - 0usize];
    ["Offset of field: _POWER_SESSION_TIMEOUTS::DisplayTimeout"]
        [::std::mem::offset_of!(_POWER_SESSION_TIMEOUTS, DisplayTimeout) - 4usize];
};
pub type POWER_SESSION_TIMEOUTS = _POWER_SESSION_TIMEOUTS;
pub type PPOWER_SESSION_TIMEOUTS = *mut _POWER_SESSION_TIMEOUTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_RIT_STATE {
    pub Active: BOOLEAN,
    pub LastInputTime: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_SESSION_RIT_STATE"]
        [::std::mem::size_of::<_POWER_SESSION_RIT_STATE>() - 16usize];
    ["Alignment of _POWER_SESSION_RIT_STATE"]
        [::std::mem::align_of::<_POWER_SESSION_RIT_STATE>() - 8usize];
    ["Offset of field: _POWER_SESSION_RIT_STATE::Active"]
        [::std::mem::offset_of!(_POWER_SESSION_RIT_STATE, Active) - 0usize];
    ["Offset of field: _POWER_SESSION_RIT_STATE::LastInputTime"]
        [::std::mem::offset_of!(_POWER_SESSION_RIT_STATE, LastInputTime) - 8usize];
};
pub type POWER_SESSION_RIT_STATE = _POWER_SESSION_RIT_STATE;
pub type PPOWER_SESSION_RIT_STATE = *mut _POWER_SESSION_RIT_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_WINLOGON {
    pub SessionId: DWORD,
    pub Console: BOOLEAN,
    pub Locked: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_SESSION_WINLOGON"][::std::mem::size_of::<_POWER_SESSION_WINLOGON>() - 8usize];
    ["Alignment of _POWER_SESSION_WINLOGON"]
        [::std::mem::align_of::<_POWER_SESSION_WINLOGON>() - 4usize];
    ["Offset of field: _POWER_SESSION_WINLOGON::SessionId"]
        [::std::mem::offset_of!(_POWER_SESSION_WINLOGON, SessionId) - 0usize];
    ["Offset of field: _POWER_SESSION_WINLOGON::Console"]
        [::std::mem::offset_of!(_POWER_SESSION_WINLOGON, Console) - 4usize];
    ["Offset of field: _POWER_SESSION_WINLOGON::Locked"]
        [::std::mem::offset_of!(_POWER_SESSION_WINLOGON, Locked) - 5usize];
};
pub type POWER_SESSION_WINLOGON = _POWER_SESSION_WINLOGON;
pub type PPOWER_SESSION_WINLOGON = *mut _POWER_SESSION_WINLOGON;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
    pub IsAllowed: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES"]
        [::std::mem::size_of::<_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES>() - 1usize];
    ["Alignment of _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES"]
        [::std::mem::align_of::<_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES>() - 1usize];
    ["Offset of field: _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES::IsAllowed"]
        [::std::mem::offset_of!(_POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES, IsAllowed) - 0usize];
};
pub type POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
pub type PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES = *mut _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_IDLE_RESILIENCY {
    pub CoalescingTimeout: DWORD,
    pub IdleResiliencyPeriod: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_IDLE_RESILIENCY"][::std::mem::size_of::<_POWER_IDLE_RESILIENCY>() - 8usize];
    ["Alignment of _POWER_IDLE_RESILIENCY"]
        [::std::mem::align_of::<_POWER_IDLE_RESILIENCY>() - 4usize];
    ["Offset of field: _POWER_IDLE_RESILIENCY::CoalescingTimeout"]
        [::std::mem::offset_of!(_POWER_IDLE_RESILIENCY, CoalescingTimeout) - 0usize];
    ["Offset of field: _POWER_IDLE_RESILIENCY::IdleResiliencyPeriod"]
        [::std::mem::offset_of!(_POWER_IDLE_RESILIENCY, IdleResiliencyPeriod) - 4usize];
};
pub type POWER_IDLE_RESILIENCY = _POWER_IDLE_RESILIENCY;
pub type PPOWER_IDLE_RESILIENCY = *mut _POWER_IDLE_RESILIENCY;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUnknown: POWER_MONITOR_REQUEST_REASON =
    0;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPowerButton:
    POWER_MONITOR_REQUEST_REASON = 1;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonRemoteConnection:
    POWER_MONITOR_REQUEST_REASON = 2;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonScMonitorpower:
    POWER_MONITOR_REQUEST_REASON = 3;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInput: POWER_MONITOR_REQUEST_REASON =
    4;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAcDcDisplayBurst:
    POWER_MONITOR_REQUEST_REASON = 5;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserDisplayBurst:
    POWER_MONITOR_REQUEST_REASON = 6;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPoSetSystemState:
    POWER_MONITOR_REQUEST_REASON = 7;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSetThreadExecutionState:
    POWER_MONITOR_REQUEST_REASON = 8;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonFullWake: POWER_MONITOR_REQUEST_REASON =
    9;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSessionUnlock:
    POWER_MONITOR_REQUEST_REASON = 10;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonScreenOffRequest:
    POWER_MONITOR_REQUEST_REASON = 11;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonIdleTimeout:
    POWER_MONITOR_REQUEST_REASON = 12;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPolicyChange:
    POWER_MONITOR_REQUEST_REASON = 13;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSleepButton:
    POWER_MONITOR_REQUEST_REASON = 14;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonLid: POWER_MONITOR_REQUEST_REASON = 15;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryCountChange:
    POWER_MONITOR_REQUEST_REASON = 16;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonGracePeriod:
    POWER_MONITOR_REQUEST_REASON = 17;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPnP: POWER_MONITOR_REQUEST_REASON = 18;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDP: POWER_MONITOR_REQUEST_REASON = 19;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSxTransition:
    POWER_MONITOR_REQUEST_REASON = 20;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSystemIdle:
    POWER_MONITOR_REQUEST_REASON = 21;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonNearProximity:
    POWER_MONITOR_REQUEST_REASON = 22;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonThermalStandby:
    POWER_MONITOR_REQUEST_REASON = 23;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumePdc: POWER_MONITOR_REQUEST_REASON =
    24;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumeS4: POWER_MONITOR_REQUEST_REASON =
    25;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonTerminal: POWER_MONITOR_REQUEST_REASON =
    26;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignal: POWER_MONITOR_REQUEST_REASON =
    27;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAcDcDisplayBurstSuppressed:
    POWER_MONITOR_REQUEST_REASON = 28;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSystemStateEntered:
    POWER_MONITOR_REQUEST_REASON = 29;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonWinrt: POWER_MONITOR_REQUEST_REASON = 30;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputKeyboard:
    POWER_MONITOR_REQUEST_REASON = 31;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputMouse:
    POWER_MONITOR_REQUEST_REASON = 32;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputTouchpad:
    POWER_MONITOR_REQUEST_REASON = 33;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputPen:
    POWER_MONITOR_REQUEST_REASON = 34;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputAccelerometer:
    POWER_MONITOR_REQUEST_REASON = 35;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputHid:
    POWER_MONITOR_REQUEST_REASON = 36;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputPoUserPresent:
    POWER_MONITOR_REQUEST_REASON = 37;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputSessionSwitch:
    POWER_MONITOR_REQUEST_REASON = 38;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputInitialization:
    POWER_MONITOR_REQUEST_REASON = 39;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalWindowsMobilePwrNotif:
    POWER_MONITOR_REQUEST_REASON = 40;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalWindowsMobileShell:
    POWER_MONITOR_REQUEST_REASON = 41;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalHeyCortana:
    POWER_MONITOR_REQUEST_REASON = 42;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalHolographicShell:
    POWER_MONITOR_REQUEST_REASON = 43;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalFingerprint:
    POWER_MONITOR_REQUEST_REASON = 44;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDirectedDrips:
    POWER_MONITOR_REQUEST_REASON = 45;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDim: POWER_MONITOR_REQUEST_REASON = 46;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBuiltinPanel:
    POWER_MONITOR_REQUEST_REASON = 47;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDisplayRequiredUnDim:
    POWER_MONITOR_REQUEST_REASON = 48;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryCountChangeSuppressed:
    POWER_MONITOR_REQUEST_REASON = 49;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonResumeModernStandby:
    POWER_MONITOR_REQUEST_REASON = 50;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonTerminalInit:
    POWER_MONITOR_REQUEST_REASON = 51;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonPdcSignalSensorsHumanPresence:
    POWER_MONITOR_REQUEST_REASON = 52;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonBatteryPreCritical:
    POWER_MONITOR_REQUEST_REASON = 53;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonUserInputTouch:
    POWER_MONITOR_REQUEST_REASON = 54;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonAusterityBatteryDrain:
    POWER_MONITOR_REQUEST_REASON = 55;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonDozeRestrictedStandby:
    POWER_MONITOR_REQUEST_REASON = 56;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonSmartRestrictedStandby:
    POWER_MONITOR_REQUEST_REASON = 57;
pub const POWER_MONITOR_REQUEST_REASON_MonitorRequestReasonMax: POWER_MONITOR_REQUEST_REASON = 58;
pub type POWER_MONITOR_REQUEST_REASON = ::std::os::raw::c_int;
pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeOff: _POWER_MONITOR_REQUEST_TYPE = 0;
pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeOnAndPresent: _POWER_MONITOR_REQUEST_TYPE =
    1;
pub const _POWER_MONITOR_REQUEST_TYPE_MonitorRequestTypeToggleOn: _POWER_MONITOR_REQUEST_TYPE = 2;
pub type _POWER_MONITOR_REQUEST_TYPE = ::std::os::raw::c_int;
pub use self::_POWER_MONITOR_REQUEST_TYPE as POWER_MONITOR_REQUEST_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_MONITOR_INVOCATION {
    pub Console: BOOLEAN,
    pub RequestReason: POWER_MONITOR_REQUEST_REASON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_MONITOR_INVOCATION"]
        [::std::mem::size_of::<_POWER_MONITOR_INVOCATION>() - 8usize];
    ["Alignment of _POWER_MONITOR_INVOCATION"]
        [::std::mem::align_of::<_POWER_MONITOR_INVOCATION>() - 4usize];
    ["Offset of field: _POWER_MONITOR_INVOCATION::Console"]
        [::std::mem::offset_of!(_POWER_MONITOR_INVOCATION, Console) - 0usize];
    ["Offset of field: _POWER_MONITOR_INVOCATION::RequestReason"]
        [::std::mem::offset_of!(_POWER_MONITOR_INVOCATION, RequestReason) - 4usize];
};
pub type POWER_MONITOR_INVOCATION = _POWER_MONITOR_INVOCATION;
pub type PPOWER_MONITOR_INVOCATION = *mut _POWER_MONITOR_INVOCATION;
pub const _POWER_LIMIT_TYPES_PowerLimitContinuous: _POWER_LIMIT_TYPES = 0;
pub const _POWER_LIMIT_TYPES_PowerLimitType1: _POWER_LIMIT_TYPES = 0;
pub const _POWER_LIMIT_TYPES_PowerLimitBurst: _POWER_LIMIT_TYPES = 1;
pub const _POWER_LIMIT_TYPES_PowerLimitType2: _POWER_LIMIT_TYPES = 1;
pub const _POWER_LIMIT_TYPES_PowerLimitRapid: _POWER_LIMIT_TYPES = 2;
pub const _POWER_LIMIT_TYPES_PowerLimitType3: _POWER_LIMIT_TYPES = 2;
pub const _POWER_LIMIT_TYPES_PowerLimitPreemptive: _POWER_LIMIT_TYPES = 3;
pub const _POWER_LIMIT_TYPES_PowerLimitType4: _POWER_LIMIT_TYPES = 3;
pub const _POWER_LIMIT_TYPES_PowerLimitPreemptiveOffset: _POWER_LIMIT_TYPES = 4;
pub const _POWER_LIMIT_TYPES_PowerLimitTypeMax: _POWER_LIMIT_TYPES = 5;
pub type _POWER_LIMIT_TYPES = ::std::os::raw::c_int;
pub use self::_POWER_LIMIT_TYPES as POWER_LIMIT_TYPES;
pub type PPOWER_LIMIT_TYPES = *mut _POWER_LIMIT_TYPES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _POWER_LIMIT_ATTRIBUTES {
    pub Type: POWER_LIMIT_TYPES,
    pub DomainId: DWORD,
    pub MaxValue: DWORD,
    pub MinValue: DWORD,
    pub MinTimeParameter: DWORD,
    pub MaxTimeParameter: DWORD,
    pub DefaultACValue: DWORD,
    pub DefaultDCValue: DWORD,
    pub Flags: _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1 {
    pub __bindgen_anon_1: _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1,
    pub AsUlong: DWORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn SupportTimeParameter(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_SupportTimeParameter(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn SupportTimeParameter_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_SupportTimeParameter_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SupportTimeParameter: DWORD,
        Reserved: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let SupportTimeParameter: u32 = unsafe { ::std::mem::transmute(SupportTimeParameter) };
            SupportTimeParameter as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1"]
        [::std::mem::size_of::<_POWER_LIMIT_ATTRIBUTES__bindgen_ty_1>() - 4usize];
    ["Alignment of _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1"]
        [::std::mem::align_of::<_POWER_LIMIT_ATTRIBUTES__bindgen_ty_1>() - 4usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES__bindgen_ty_1::AsUlong"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES__bindgen_ty_1, AsUlong) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_LIMIT_ATTRIBUTES"][::std::mem::size_of::<_POWER_LIMIT_ATTRIBUTES>() - 36usize];
    ["Alignment of _POWER_LIMIT_ATTRIBUTES"]
        [::std::mem::align_of::<_POWER_LIMIT_ATTRIBUTES>() - 4usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::Type"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, Type) - 0usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::DomainId"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, DomainId) - 4usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::MaxValue"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, MaxValue) - 8usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::MinValue"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, MinValue) - 12usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::MinTimeParameter"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, MinTimeParameter) - 16usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::MaxTimeParameter"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, MaxTimeParameter) - 20usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::DefaultACValue"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, DefaultACValue) - 24usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::DefaultDCValue"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, DefaultDCValue) - 28usize];
    ["Offset of field: _POWER_LIMIT_ATTRIBUTES::Flags"]
        [::std::mem::offset_of!(_POWER_LIMIT_ATTRIBUTES, Flags) - 32usize];
};
pub type POWER_LIMIT_ATTRIBUTES = _POWER_LIMIT_ATTRIBUTES;
pub type PPOWER_LIMIT_ATTRIBUTES = *mut _POWER_LIMIT_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_LIMIT_VALUE {
    pub Type: POWER_LIMIT_TYPES,
    pub DomainId: DWORD,
    pub TargetValue: DWORD,
    pub TimeParameter: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_LIMIT_VALUE"][::std::mem::size_of::<_POWER_LIMIT_VALUE>() - 16usize];
    ["Alignment of _POWER_LIMIT_VALUE"][::std::mem::align_of::<_POWER_LIMIT_VALUE>() - 4usize];
    ["Offset of field: _POWER_LIMIT_VALUE::Type"]
        [::std::mem::offset_of!(_POWER_LIMIT_VALUE, Type) - 0usize];
    ["Offset of field: _POWER_LIMIT_VALUE::DomainId"]
        [::std::mem::offset_of!(_POWER_LIMIT_VALUE, DomainId) - 4usize];
    ["Offset of field: _POWER_LIMIT_VALUE::TargetValue"]
        [::std::mem::offset_of!(_POWER_LIMIT_VALUE, TargetValue) - 8usize];
    ["Offset of field: _POWER_LIMIT_VALUE::TimeParameter"]
        [::std::mem::offset_of!(_POWER_LIMIT_VALUE, TimeParameter) - 12usize];
};
pub type POWER_LIMIT_VALUE = _POWER_LIMIT_VALUE;
pub type PPOWER_LIMIT_VALUE = *mut _POWER_LIMIT_VALUE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RESUME_PERFORMANCE {
    pub PostTimeMs: DWORD,
    pub TotalResumeTimeMs: ULONGLONG,
    pub ResumeCompleteTimestamp: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RESUME_PERFORMANCE"][::std::mem::size_of::<_RESUME_PERFORMANCE>() - 24usize];
    ["Alignment of _RESUME_PERFORMANCE"][::std::mem::align_of::<_RESUME_PERFORMANCE>() - 8usize];
    ["Offset of field: _RESUME_PERFORMANCE::PostTimeMs"]
        [::std::mem::offset_of!(_RESUME_PERFORMANCE, PostTimeMs) - 0usize];
    ["Offset of field: _RESUME_PERFORMANCE::TotalResumeTimeMs"]
        [::std::mem::offset_of!(_RESUME_PERFORMANCE, TotalResumeTimeMs) - 8usize];
    ["Offset of field: _RESUME_PERFORMANCE::ResumeCompleteTimestamp"]
        [::std::mem::offset_of!(_RESUME_PERFORMANCE, ResumeCompleteTimestamp) - 16usize];
};
pub type RESUME_PERFORMANCE = _RESUME_PERFORMANCE;
pub type PRESUME_PERFORMANCE = *mut _RESUME_PERFORMANCE;
pub const SYSTEM_POWER_CONDITION_PoAc: SYSTEM_POWER_CONDITION = 0;
pub const SYSTEM_POWER_CONDITION_PoDc: SYSTEM_POWER_CONDITION = 1;
pub const SYSTEM_POWER_CONDITION_PoHot: SYSTEM_POWER_CONDITION = 2;
pub const SYSTEM_POWER_CONDITION_PoConditionMaximum: SYSTEM_POWER_CONDITION = 3;
pub type SYSTEM_POWER_CONDITION = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SET_POWER_SETTING_VALUE {
    pub Version: DWORD,
    pub Guid: GUID,
    pub PowerCondition: SYSTEM_POWER_CONDITION,
    pub DataLength: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SET_POWER_SETTING_VALUE"][::std::mem::size_of::<SET_POWER_SETTING_VALUE>() - 32usize];
    ["Alignment of SET_POWER_SETTING_VALUE"]
        [::std::mem::align_of::<SET_POWER_SETTING_VALUE>() - 4usize];
    ["Offset of field: SET_POWER_SETTING_VALUE::Version"]
        [::std::mem::offset_of!(SET_POWER_SETTING_VALUE, Version) - 0usize];
    ["Offset of field: SET_POWER_SETTING_VALUE::Guid"]
        [::std::mem::offset_of!(SET_POWER_SETTING_VALUE, Guid) - 4usize];
    ["Offset of field: SET_POWER_SETTING_VALUE::PowerCondition"]
        [::std::mem::offset_of!(SET_POWER_SETTING_VALUE, PowerCondition) - 20usize];
    ["Offset of field: SET_POWER_SETTING_VALUE::DataLength"]
        [::std::mem::offset_of!(SET_POWER_SETTING_VALUE, DataLength) - 24usize];
    ["Offset of field: SET_POWER_SETTING_VALUE::Data"]
        [::std::mem::offset_of!(SET_POWER_SETTING_VALUE, Data) - 28usize];
};
pub type PSET_POWER_SETTING_VALUE = *mut SET_POWER_SETTING_VALUE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NOTIFY_USER_POWER_SETTING {
    pub Guid: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NOTIFY_USER_POWER_SETTING"]
        [::std::mem::size_of::<NOTIFY_USER_POWER_SETTING>() - 16usize];
    ["Alignment of NOTIFY_USER_POWER_SETTING"]
        [::std::mem::align_of::<NOTIFY_USER_POWER_SETTING>() - 4usize];
    ["Offset of field: NOTIFY_USER_POWER_SETTING::Guid"]
        [::std::mem::offset_of!(NOTIFY_USER_POWER_SETTING, Guid) - 0usize];
};
pub type PNOTIFY_USER_POWER_SETTING = *mut NOTIFY_USER_POWER_SETTING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _APPLICATIONLAUNCH_SETTING_VALUE {
    pub ActivationTime: LARGE_INTEGER,
    pub Flags: DWORD,
    pub ButtonInstanceID: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _APPLICATIONLAUNCH_SETTING_VALUE"]
        [::std::mem::size_of::<_APPLICATIONLAUNCH_SETTING_VALUE>() - 16usize];
    ["Alignment of _APPLICATIONLAUNCH_SETTING_VALUE"]
        [::std::mem::align_of::<_APPLICATIONLAUNCH_SETTING_VALUE>() - 8usize];
    ["Offset of field: _APPLICATIONLAUNCH_SETTING_VALUE::ActivationTime"]
        [::std::mem::offset_of!(_APPLICATIONLAUNCH_SETTING_VALUE, ActivationTime) - 0usize];
    ["Offset of field: _APPLICATIONLAUNCH_SETTING_VALUE::Flags"]
        [::std::mem::offset_of!(_APPLICATIONLAUNCH_SETTING_VALUE, Flags) - 8usize];
    ["Offset of field: _APPLICATIONLAUNCH_SETTING_VALUE::ButtonInstanceID"]
        [::std::mem::offset_of!(_APPLICATIONLAUNCH_SETTING_VALUE, ButtonInstanceID) - 12usize];
};
pub type APPLICATIONLAUNCH_SETTING_VALUE = _APPLICATIONLAUNCH_SETTING_VALUE;
pub type PAPPLICATIONLAUNCH_SETTING_VALUE = *mut _APPLICATIONLAUNCH_SETTING_VALUE;
pub const _POWER_PLATFORM_ROLE_PlatformRoleUnspecified: _POWER_PLATFORM_ROLE = 0;
pub const _POWER_PLATFORM_ROLE_PlatformRoleDesktop: _POWER_PLATFORM_ROLE = 1;
pub const _POWER_PLATFORM_ROLE_PlatformRoleMobile: _POWER_PLATFORM_ROLE = 2;
pub const _POWER_PLATFORM_ROLE_PlatformRoleWorkstation: _POWER_PLATFORM_ROLE = 3;
pub const _POWER_PLATFORM_ROLE_PlatformRoleEnterpriseServer: _POWER_PLATFORM_ROLE = 4;
pub const _POWER_PLATFORM_ROLE_PlatformRoleSOHOServer: _POWER_PLATFORM_ROLE = 5;
pub const _POWER_PLATFORM_ROLE_PlatformRoleAppliancePC: _POWER_PLATFORM_ROLE = 6;
pub const _POWER_PLATFORM_ROLE_PlatformRolePerformanceServer: _POWER_PLATFORM_ROLE = 7;
pub const _POWER_PLATFORM_ROLE_PlatformRoleSlate: _POWER_PLATFORM_ROLE = 8;
pub const _POWER_PLATFORM_ROLE_PlatformRoleMaximum: _POWER_PLATFORM_ROLE = 9;
pub type _POWER_PLATFORM_ROLE = ::std::os::raw::c_int;
pub use self::_POWER_PLATFORM_ROLE as POWER_PLATFORM_ROLE;
pub type PPOWER_PLATFORM_ROLE = *mut _POWER_PLATFORM_ROLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POWER_PLATFORM_INFORMATION {
    pub AoAc: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POWER_PLATFORM_INFORMATION"]
        [::std::mem::size_of::<_POWER_PLATFORM_INFORMATION>() - 1usize];
    ["Alignment of _POWER_PLATFORM_INFORMATION"]
        [::std::mem::align_of::<_POWER_PLATFORM_INFORMATION>() - 1usize];
    ["Offset of field: _POWER_PLATFORM_INFORMATION::AoAc"]
        [::std::mem::offset_of!(_POWER_PLATFORM_INFORMATION, AoAc) - 0usize];
};
pub type POWER_PLATFORM_INFORMATION = _POWER_PLATFORM_INFORMATION;
pub type PPOWER_PLATFORM_INFORMATION = *mut _POWER_PLATFORM_INFORMATION;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_GROUP_POLICY: POWER_SETTING_ALTITUDE = 0;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_USER: POWER_SETTING_ALTITUDE = 1;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_RUNTIME_OVERRIDE: POWER_SETTING_ALTITUDE = 2;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_PROVISIONING: POWER_SETTING_ALTITUDE = 3;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_OEM_CUSTOMIZATION: POWER_SETTING_ALTITUDE = 4;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_INTERNAL_OVERRIDE: POWER_SETTING_ALTITUDE = 5;
pub const POWER_SETTING_ALTITUDE_ALTITUDE_OS_DEFAULT: POWER_SETTING_ALTITUDE = 6;
pub type POWER_SETTING_ALTITUDE = ::std::os::raw::c_int;
pub type PPOWER_SETTING_ALTITUDE = *mut POWER_SETTING_ALTITUDE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BATTERY_REPORTING_SCALE {
    pub Granularity: DWORD,
    pub Capacity: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BATTERY_REPORTING_SCALE"][::std::mem::size_of::<BATTERY_REPORTING_SCALE>() - 8usize];
    ["Alignment of BATTERY_REPORTING_SCALE"]
        [::std::mem::align_of::<BATTERY_REPORTING_SCALE>() - 4usize];
    ["Offset of field: BATTERY_REPORTING_SCALE::Granularity"]
        [::std::mem::offset_of!(BATTERY_REPORTING_SCALE, Granularity) - 0usize];
    ["Offset of field: BATTERY_REPORTING_SCALE::Capacity"]
        [::std::mem::offset_of!(BATTERY_REPORTING_SCALE, Capacity) - 4usize];
};
pub type PBATTERY_REPORTING_SCALE = *mut BATTERY_REPORTING_SCALE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_LEGACY_PERFSTATE {
    pub Frequency: DWORD,
    pub Flags: DWORD,
    pub PercentFrequency: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_LEGACY_PERFSTATE"]
        [::std::mem::size_of::<PPM_WMI_LEGACY_PERFSTATE>() - 12usize];
    ["Alignment of PPM_WMI_LEGACY_PERFSTATE"]
        [::std::mem::align_of::<PPM_WMI_LEGACY_PERFSTATE>() - 4usize];
    ["Offset of field: PPM_WMI_LEGACY_PERFSTATE::Frequency"]
        [::std::mem::offset_of!(PPM_WMI_LEGACY_PERFSTATE, Frequency) - 0usize];
    ["Offset of field: PPM_WMI_LEGACY_PERFSTATE::Flags"]
        [::std::mem::offset_of!(PPM_WMI_LEGACY_PERFSTATE, Flags) - 4usize];
    ["Offset of field: PPM_WMI_LEGACY_PERFSTATE::PercentFrequency"]
        [::std::mem::offset_of!(PPM_WMI_LEGACY_PERFSTATE, PercentFrequency) - 8usize];
};
pub type PPPM_WMI_LEGACY_PERFSTATE = *mut PPM_WMI_LEGACY_PERFSTATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_IDLE_STATE {
    pub Latency: DWORD,
    pub Power: DWORD,
    pub TimeCheck: DWORD,
    pub PromotePercent: BYTE,
    pub DemotePercent: BYTE,
    pub StateType: BYTE,
    pub Reserved: BYTE,
    pub StateFlags: DWORD,
    pub Context: DWORD,
    pub IdleHandler: DWORD,
    pub Reserved1: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_IDLE_STATE"][::std::mem::size_of::<PPM_WMI_IDLE_STATE>() - 32usize];
    ["Alignment of PPM_WMI_IDLE_STATE"][::std::mem::align_of::<PPM_WMI_IDLE_STATE>() - 4usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::Latency"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, Latency) - 0usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::Power"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, Power) - 4usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::TimeCheck"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, TimeCheck) - 8usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::PromotePercent"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, PromotePercent) - 12usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::DemotePercent"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, DemotePercent) - 13usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::StateType"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, StateType) - 14usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::Reserved"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, Reserved) - 15usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::StateFlags"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, StateFlags) - 16usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::Context"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, Context) - 20usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::IdleHandler"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, IdleHandler) - 24usize];
    ["Offset of field: PPM_WMI_IDLE_STATE::Reserved1"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATE, Reserved1) - 28usize];
};
pub type PPPM_WMI_IDLE_STATE = *mut PPM_WMI_IDLE_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_IDLE_STATES {
    pub Type: DWORD,
    pub Count: DWORD,
    pub TargetState: DWORD,
    pub OldState: DWORD,
    pub TargetProcessors: DWORD64,
    pub State: [PPM_WMI_IDLE_STATE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_IDLE_STATES"][::std::mem::size_of::<PPM_WMI_IDLE_STATES>() - 56usize];
    ["Alignment of PPM_WMI_IDLE_STATES"][::std::mem::align_of::<PPM_WMI_IDLE_STATES>() - 8usize];
    ["Offset of field: PPM_WMI_IDLE_STATES::Type"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES, Type) - 0usize];
    ["Offset of field: PPM_WMI_IDLE_STATES::Count"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES, Count) - 4usize];
    ["Offset of field: PPM_WMI_IDLE_STATES::TargetState"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES, TargetState) - 8usize];
    ["Offset of field: PPM_WMI_IDLE_STATES::OldState"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES, OldState) - 12usize];
    ["Offset of field: PPM_WMI_IDLE_STATES::TargetProcessors"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES, TargetProcessors) - 16usize];
    ["Offset of field: PPM_WMI_IDLE_STATES::State"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES, State) - 24usize];
};
pub type PPPM_WMI_IDLE_STATES = *mut PPM_WMI_IDLE_STATES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_IDLE_STATES_EX {
    pub Type: DWORD,
    pub Count: DWORD,
    pub TargetState: DWORD,
    pub OldState: DWORD,
    pub TargetProcessors: PVOID,
    pub State: [PPM_WMI_IDLE_STATE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_IDLE_STATES_EX"][::std::mem::size_of::<PPM_WMI_IDLE_STATES_EX>() - 56usize];
    ["Alignment of PPM_WMI_IDLE_STATES_EX"]
        [::std::mem::align_of::<PPM_WMI_IDLE_STATES_EX>() - 8usize];
    ["Offset of field: PPM_WMI_IDLE_STATES_EX::Type"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES_EX, Type) - 0usize];
    ["Offset of field: PPM_WMI_IDLE_STATES_EX::Count"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES_EX, Count) - 4usize];
    ["Offset of field: PPM_WMI_IDLE_STATES_EX::TargetState"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES_EX, TargetState) - 8usize];
    ["Offset of field: PPM_WMI_IDLE_STATES_EX::OldState"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES_EX, OldState) - 12usize];
    ["Offset of field: PPM_WMI_IDLE_STATES_EX::TargetProcessors"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES_EX, TargetProcessors) - 16usize];
    ["Offset of field: PPM_WMI_IDLE_STATES_EX::State"]
        [::std::mem::offset_of!(PPM_WMI_IDLE_STATES_EX, State) - 24usize];
};
pub type PPPM_WMI_IDLE_STATES_EX = *mut PPM_WMI_IDLE_STATES_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_PERF_STATE {
    pub Frequency: DWORD,
    pub Power: DWORD,
    pub PercentFrequency: BYTE,
    pub IncreaseLevel: BYTE,
    pub DecreaseLevel: BYTE,
    pub Type: BYTE,
    pub IncreaseTime: DWORD,
    pub DecreaseTime: DWORD,
    pub Control: DWORD64,
    pub Status: DWORD64,
    pub HitCount: DWORD,
    pub Reserved1: DWORD,
    pub Reserved2: DWORD64,
    pub Reserved3: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_PERF_STATE"][::std::mem::size_of::<PPM_WMI_PERF_STATE>() - 64usize];
    ["Alignment of PPM_WMI_PERF_STATE"][::std::mem::align_of::<PPM_WMI_PERF_STATE>() - 8usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Frequency"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Frequency) - 0usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Power"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Power) - 4usize];
    ["Offset of field: PPM_WMI_PERF_STATE::PercentFrequency"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, PercentFrequency) - 8usize];
    ["Offset of field: PPM_WMI_PERF_STATE::IncreaseLevel"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, IncreaseLevel) - 9usize];
    ["Offset of field: PPM_WMI_PERF_STATE::DecreaseLevel"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, DecreaseLevel) - 10usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Type"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Type) - 11usize];
    ["Offset of field: PPM_WMI_PERF_STATE::IncreaseTime"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, IncreaseTime) - 12usize];
    ["Offset of field: PPM_WMI_PERF_STATE::DecreaseTime"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, DecreaseTime) - 16usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Control"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Control) - 24usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Status"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Status) - 32usize];
    ["Offset of field: PPM_WMI_PERF_STATE::HitCount"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, HitCount) - 40usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Reserved1"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Reserved1) - 44usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Reserved2"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Reserved2) - 48usize];
    ["Offset of field: PPM_WMI_PERF_STATE::Reserved3"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATE, Reserved3) - 56usize];
};
pub type PPPM_WMI_PERF_STATE = *mut PPM_WMI_PERF_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_PERF_STATES {
    pub Count: DWORD,
    pub MaxFrequency: DWORD,
    pub CurrentState: DWORD,
    pub MaxPerfState: DWORD,
    pub MinPerfState: DWORD,
    pub LowestPerfState: DWORD,
    pub ThermalConstraint: DWORD,
    pub BusyAdjThreshold: BYTE,
    pub PolicyType: BYTE,
    pub Type: BYTE,
    pub Reserved: BYTE,
    pub TimerInterval: DWORD,
    pub TargetProcessors: DWORD64,
    pub PStateHandler: DWORD,
    pub PStateContext: DWORD,
    pub TStateHandler: DWORD,
    pub TStateContext: DWORD,
    pub FeedbackHandler: DWORD,
    pub Reserved1: DWORD,
    pub Reserved2: DWORD64,
    pub State: [PPM_WMI_PERF_STATE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_PERF_STATES"][::std::mem::size_of::<PPM_WMI_PERF_STATES>() - 144usize];
    ["Alignment of PPM_WMI_PERF_STATES"][::std::mem::align_of::<PPM_WMI_PERF_STATES>() - 8usize];
    ["Offset of field: PPM_WMI_PERF_STATES::Count"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, Count) - 0usize];
    ["Offset of field: PPM_WMI_PERF_STATES::MaxFrequency"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, MaxFrequency) - 4usize];
    ["Offset of field: PPM_WMI_PERF_STATES::CurrentState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, CurrentState) - 8usize];
    ["Offset of field: PPM_WMI_PERF_STATES::MaxPerfState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, MaxPerfState) - 12usize];
    ["Offset of field: PPM_WMI_PERF_STATES::MinPerfState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, MinPerfState) - 16usize];
    ["Offset of field: PPM_WMI_PERF_STATES::LowestPerfState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, LowestPerfState) - 20usize];
    ["Offset of field: PPM_WMI_PERF_STATES::ThermalConstraint"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, ThermalConstraint) - 24usize];
    ["Offset of field: PPM_WMI_PERF_STATES::BusyAdjThreshold"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, BusyAdjThreshold) - 28usize];
    ["Offset of field: PPM_WMI_PERF_STATES::PolicyType"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, PolicyType) - 29usize];
    ["Offset of field: PPM_WMI_PERF_STATES::Type"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, Type) - 30usize];
    ["Offset of field: PPM_WMI_PERF_STATES::Reserved"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, Reserved) - 31usize];
    ["Offset of field: PPM_WMI_PERF_STATES::TimerInterval"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, TimerInterval) - 32usize];
    ["Offset of field: PPM_WMI_PERF_STATES::TargetProcessors"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, TargetProcessors) - 40usize];
    ["Offset of field: PPM_WMI_PERF_STATES::PStateHandler"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, PStateHandler) - 48usize];
    ["Offset of field: PPM_WMI_PERF_STATES::PStateContext"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, PStateContext) - 52usize];
    ["Offset of field: PPM_WMI_PERF_STATES::TStateHandler"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, TStateHandler) - 56usize];
    ["Offset of field: PPM_WMI_PERF_STATES::TStateContext"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, TStateContext) - 60usize];
    ["Offset of field: PPM_WMI_PERF_STATES::FeedbackHandler"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, FeedbackHandler) - 64usize];
    ["Offset of field: PPM_WMI_PERF_STATES::Reserved1"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, Reserved1) - 68usize];
    ["Offset of field: PPM_WMI_PERF_STATES::Reserved2"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, Reserved2) - 72usize];
    ["Offset of field: PPM_WMI_PERF_STATES::State"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES, State) - 80usize];
};
pub type PPPM_WMI_PERF_STATES = *mut PPM_WMI_PERF_STATES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_WMI_PERF_STATES_EX {
    pub Count: DWORD,
    pub MaxFrequency: DWORD,
    pub CurrentState: DWORD,
    pub MaxPerfState: DWORD,
    pub MinPerfState: DWORD,
    pub LowestPerfState: DWORD,
    pub ThermalConstraint: DWORD,
    pub BusyAdjThreshold: BYTE,
    pub PolicyType: BYTE,
    pub Type: BYTE,
    pub Reserved: BYTE,
    pub TimerInterval: DWORD,
    pub TargetProcessors: PVOID,
    pub PStateHandler: DWORD,
    pub PStateContext: DWORD,
    pub TStateHandler: DWORD,
    pub TStateContext: DWORD,
    pub FeedbackHandler: DWORD,
    pub Reserved1: DWORD,
    pub Reserved2: DWORD64,
    pub State: [PPM_WMI_PERF_STATE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_WMI_PERF_STATES_EX"][::std::mem::size_of::<PPM_WMI_PERF_STATES_EX>() - 144usize];
    ["Alignment of PPM_WMI_PERF_STATES_EX"]
        [::std::mem::align_of::<PPM_WMI_PERF_STATES_EX>() - 8usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::Count"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, Count) - 0usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::MaxFrequency"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, MaxFrequency) - 4usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::CurrentState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, CurrentState) - 8usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::MaxPerfState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, MaxPerfState) - 12usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::MinPerfState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, MinPerfState) - 16usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::LowestPerfState"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, LowestPerfState) - 20usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::ThermalConstraint"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, ThermalConstraint) - 24usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::BusyAdjThreshold"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, BusyAdjThreshold) - 28usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::PolicyType"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, PolicyType) - 29usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::Type"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, Type) - 30usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::Reserved"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, Reserved) - 31usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::TimerInterval"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, TimerInterval) - 32usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::TargetProcessors"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, TargetProcessors) - 40usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::PStateHandler"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, PStateHandler) - 48usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::PStateContext"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, PStateContext) - 52usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::TStateHandler"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, TStateHandler) - 56usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::TStateContext"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, TStateContext) - 60usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::FeedbackHandler"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, FeedbackHandler) - 64usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::Reserved1"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, Reserved1) - 68usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::Reserved2"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, Reserved2) - 72usize];
    ["Offset of field: PPM_WMI_PERF_STATES_EX::State"]
        [::std::mem::offset_of!(PPM_WMI_PERF_STATES_EX, State) - 80usize];
};
pub type PPPM_WMI_PERF_STATES_EX = *mut PPM_WMI_PERF_STATES_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_STATE_ACCOUNTING {
    pub IdleTransitions: DWORD,
    pub FailedTransitions: DWORD,
    pub InvalidBucketIndex: DWORD,
    pub TotalTime: DWORD64,
    pub IdleTimeBuckets: [DWORD; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_IDLE_STATE_ACCOUNTING"]
        [::std::mem::size_of::<PPM_IDLE_STATE_ACCOUNTING>() - 48usize];
    ["Alignment of PPM_IDLE_STATE_ACCOUNTING"]
        [::std::mem::align_of::<PPM_IDLE_STATE_ACCOUNTING>() - 8usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING::IdleTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING, IdleTransitions) - 0usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING::FailedTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING, FailedTransitions) - 4usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING::InvalidBucketIndex"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING, InvalidBucketIndex) - 8usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING::TotalTime"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING, TotalTime) - 16usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING::IdleTimeBuckets"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING, IdleTimeBuckets) - 24usize];
};
pub type PPPM_IDLE_STATE_ACCOUNTING = *mut PPM_IDLE_STATE_ACCOUNTING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_ACCOUNTING {
    pub StateCount: DWORD,
    pub TotalTransitions: DWORD,
    pub ResetCount: DWORD,
    pub StartTime: DWORD64,
    pub State: [PPM_IDLE_STATE_ACCOUNTING; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_IDLE_ACCOUNTING"][::std::mem::size_of::<PPM_IDLE_ACCOUNTING>() - 72usize];
    ["Alignment of PPM_IDLE_ACCOUNTING"][::std::mem::align_of::<PPM_IDLE_ACCOUNTING>() - 8usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING::StateCount"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING, StateCount) - 0usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING::TotalTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING, TotalTransitions) - 4usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING::ResetCount"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING, ResetCount) - 8usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING::StartTime"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING, StartTime) - 16usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING::State"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING, State) - 24usize];
};
pub type PPPM_IDLE_ACCOUNTING = *mut PPM_IDLE_ACCOUNTING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_STATE_BUCKET_EX {
    pub TotalTimeUs: DWORD64,
    pub MinTimeUs: DWORD,
    pub MaxTimeUs: DWORD,
    pub Count: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_IDLE_STATE_BUCKET_EX"]
        [::std::mem::size_of::<PPM_IDLE_STATE_BUCKET_EX>() - 24usize];
    ["Alignment of PPM_IDLE_STATE_BUCKET_EX"]
        [::std::mem::align_of::<PPM_IDLE_STATE_BUCKET_EX>() - 8usize];
    ["Offset of field: PPM_IDLE_STATE_BUCKET_EX::TotalTimeUs"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_BUCKET_EX, TotalTimeUs) - 0usize];
    ["Offset of field: PPM_IDLE_STATE_BUCKET_EX::MinTimeUs"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_BUCKET_EX, MinTimeUs) - 8usize];
    ["Offset of field: PPM_IDLE_STATE_BUCKET_EX::MaxTimeUs"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_BUCKET_EX, MaxTimeUs) - 12usize];
    ["Offset of field: PPM_IDLE_STATE_BUCKET_EX::Count"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_BUCKET_EX, Count) - 16usize];
};
pub type PPPM_IDLE_STATE_BUCKET_EX = *mut PPM_IDLE_STATE_BUCKET_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_STATE_ACCOUNTING_EX {
    pub TotalTime: DWORD64,
    pub IdleTransitions: DWORD,
    pub FailedTransitions: DWORD,
    pub InvalidBucketIndex: DWORD,
    pub MinTimeUs: DWORD,
    pub MaxTimeUs: DWORD,
    pub CancelledTransitions: DWORD,
    pub IdleTimeBuckets: [PPM_IDLE_STATE_BUCKET_EX; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_IDLE_STATE_ACCOUNTING_EX"]
        [::std::mem::size_of::<PPM_IDLE_STATE_ACCOUNTING_EX>() - 416usize];
    ["Alignment of PPM_IDLE_STATE_ACCOUNTING_EX"]
        [::std::mem::align_of::<PPM_IDLE_STATE_ACCOUNTING_EX>() - 8usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::TotalTime"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, TotalTime) - 0usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::IdleTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, IdleTransitions) - 8usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::FailedTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, FailedTransitions) - 12usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::InvalidBucketIndex"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, InvalidBucketIndex) - 16usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::MinTimeUs"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, MinTimeUs) - 20usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::MaxTimeUs"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, MaxTimeUs) - 24usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::CancelledTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, CancelledTransitions) - 28usize];
    ["Offset of field: PPM_IDLE_STATE_ACCOUNTING_EX::IdleTimeBuckets"]
        [::std::mem::offset_of!(PPM_IDLE_STATE_ACCOUNTING_EX, IdleTimeBuckets) - 32usize];
};
pub type PPPM_IDLE_STATE_ACCOUNTING_EX = *mut PPM_IDLE_STATE_ACCOUNTING_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLE_ACCOUNTING_EX {
    pub StateCount: DWORD,
    pub TotalTransitions: DWORD,
    pub ResetCount: DWORD,
    pub AbortCount: DWORD,
    pub StartTime: DWORD64,
    pub State: [PPM_IDLE_STATE_ACCOUNTING_EX; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_IDLE_ACCOUNTING_EX"][::std::mem::size_of::<PPM_IDLE_ACCOUNTING_EX>() - 440usize];
    ["Alignment of PPM_IDLE_ACCOUNTING_EX"]
        [::std::mem::align_of::<PPM_IDLE_ACCOUNTING_EX>() - 8usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING_EX::StateCount"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING_EX, StateCount) - 0usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING_EX::TotalTransitions"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING_EX, TotalTransitions) - 4usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING_EX::ResetCount"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING_EX, ResetCount) - 8usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING_EX::AbortCount"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING_EX, AbortCount) - 12usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING_EX::StartTime"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING_EX, StartTime) - 16usize];
    ["Offset of field: PPM_IDLE_ACCOUNTING_EX::State"]
        [::std::mem::offset_of!(PPM_IDLE_ACCOUNTING_EX, State) - 24usize];
};
pub type PPPM_IDLE_ACCOUNTING_EX = *mut PPM_IDLE_ACCOUNTING_EX;
unsafe extern "C" {
    pub static PPM_PERFSTATE_CHANGE_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_PERFSTATE_DOMAIN_CHANGE_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_IDLESTATE_CHANGE_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_PERFSTATES_DATA_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_IDLESTATES_DATA_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_IDLE_ACCOUNTING_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_IDLE_ACCOUNTING_EX_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_THERMALCONSTRAINT_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_PERFMON_PERFSTATE_GUID: GUID;
}
unsafe extern "C" {
    pub static PPM_THERMAL_POLICY_CHANGE_GUID: GUID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_PERFSTATE_EVENT {
    pub State: DWORD,
    pub Status: DWORD,
    pub Latency: DWORD,
    pub Speed: DWORD,
    pub Processor: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_PERFSTATE_EVENT"][::std::mem::size_of::<PPM_PERFSTATE_EVENT>() - 20usize];
    ["Alignment of PPM_PERFSTATE_EVENT"][::std::mem::align_of::<PPM_PERFSTATE_EVENT>() - 4usize];
    ["Offset of field: PPM_PERFSTATE_EVENT::State"]
        [::std::mem::offset_of!(PPM_PERFSTATE_EVENT, State) - 0usize];
    ["Offset of field: PPM_PERFSTATE_EVENT::Status"]
        [::std::mem::offset_of!(PPM_PERFSTATE_EVENT, Status) - 4usize];
    ["Offset of field: PPM_PERFSTATE_EVENT::Latency"]
        [::std::mem::offset_of!(PPM_PERFSTATE_EVENT, Latency) - 8usize];
    ["Offset of field: PPM_PERFSTATE_EVENT::Speed"]
        [::std::mem::offset_of!(PPM_PERFSTATE_EVENT, Speed) - 12usize];
    ["Offset of field: PPM_PERFSTATE_EVENT::Processor"]
        [::std::mem::offset_of!(PPM_PERFSTATE_EVENT, Processor) - 16usize];
};
pub type PPPM_PERFSTATE_EVENT = *mut PPM_PERFSTATE_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_PERFSTATE_DOMAIN_EVENT {
    pub State: DWORD,
    pub Latency: DWORD,
    pub Speed: DWORD,
    pub Processors: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_PERFSTATE_DOMAIN_EVENT"]
        [::std::mem::size_of::<PPM_PERFSTATE_DOMAIN_EVENT>() - 24usize];
    ["Alignment of PPM_PERFSTATE_DOMAIN_EVENT"]
        [::std::mem::align_of::<PPM_PERFSTATE_DOMAIN_EVENT>() - 8usize];
    ["Offset of field: PPM_PERFSTATE_DOMAIN_EVENT::State"]
        [::std::mem::offset_of!(PPM_PERFSTATE_DOMAIN_EVENT, State) - 0usize];
    ["Offset of field: PPM_PERFSTATE_DOMAIN_EVENT::Latency"]
        [::std::mem::offset_of!(PPM_PERFSTATE_DOMAIN_EVENT, Latency) - 4usize];
    ["Offset of field: PPM_PERFSTATE_DOMAIN_EVENT::Speed"]
        [::std::mem::offset_of!(PPM_PERFSTATE_DOMAIN_EVENT, Speed) - 8usize];
    ["Offset of field: PPM_PERFSTATE_DOMAIN_EVENT::Processors"]
        [::std::mem::offset_of!(PPM_PERFSTATE_DOMAIN_EVENT, Processors) - 16usize];
};
pub type PPPM_PERFSTATE_DOMAIN_EVENT = *mut PPM_PERFSTATE_DOMAIN_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_IDLESTATE_EVENT {
    pub NewState: DWORD,
    pub OldState: DWORD,
    pub Processors: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_IDLESTATE_EVENT"][::std::mem::size_of::<PPM_IDLESTATE_EVENT>() - 16usize];
    ["Alignment of PPM_IDLESTATE_EVENT"][::std::mem::align_of::<PPM_IDLESTATE_EVENT>() - 8usize];
    ["Offset of field: PPM_IDLESTATE_EVENT::NewState"]
        [::std::mem::offset_of!(PPM_IDLESTATE_EVENT, NewState) - 0usize];
    ["Offset of field: PPM_IDLESTATE_EVENT::OldState"]
        [::std::mem::offset_of!(PPM_IDLESTATE_EVENT, OldState) - 4usize];
    ["Offset of field: PPM_IDLESTATE_EVENT::Processors"]
        [::std::mem::offset_of!(PPM_IDLESTATE_EVENT, Processors) - 8usize];
};
pub type PPPM_IDLESTATE_EVENT = *mut PPM_IDLESTATE_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_THERMALCHANGE_EVENT {
    pub ThermalConstraint: DWORD,
    pub Processors: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_THERMALCHANGE_EVENT"][::std::mem::size_of::<PPM_THERMALCHANGE_EVENT>() - 16usize];
    ["Alignment of PPM_THERMALCHANGE_EVENT"]
        [::std::mem::align_of::<PPM_THERMALCHANGE_EVENT>() - 8usize];
    ["Offset of field: PPM_THERMALCHANGE_EVENT::ThermalConstraint"]
        [::std::mem::offset_of!(PPM_THERMALCHANGE_EVENT, ThermalConstraint) - 0usize];
    ["Offset of field: PPM_THERMALCHANGE_EVENT::Processors"]
        [::std::mem::offset_of!(PPM_THERMALCHANGE_EVENT, Processors) - 8usize];
};
pub type PPPM_THERMALCHANGE_EVENT = *mut PPM_THERMALCHANGE_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PPM_THERMAL_POLICY_EVENT {
    pub Mode: BYTE,
    pub Processors: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PPM_THERMAL_POLICY_EVENT"]
        [::std::mem::size_of::<PPM_THERMAL_POLICY_EVENT>() - 16usize];
    ["Alignment of PPM_THERMAL_POLICY_EVENT"]
        [::std::mem::align_of::<PPM_THERMAL_POLICY_EVENT>() - 8usize];
    ["Offset of field: PPM_THERMAL_POLICY_EVENT::Mode"]
        [::std::mem::offset_of!(PPM_THERMAL_POLICY_EVENT, Mode) - 0usize];
    ["Offset of field: PPM_THERMAL_POLICY_EVENT::Processors"]
        [::std::mem::offset_of!(PPM_THERMAL_POLICY_EVENT, Processors) - 8usize];
};
pub type PPPM_THERMAL_POLICY_EVENT = *mut PPM_THERMAL_POLICY_EVENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POWER_ACTION_POLICY {
    pub Action: POWER_ACTION,
    pub Flags: DWORD,
    pub EventCode: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POWER_ACTION_POLICY"][::std::mem::size_of::<POWER_ACTION_POLICY>() - 12usize];
    ["Alignment of POWER_ACTION_POLICY"][::std::mem::align_of::<POWER_ACTION_POLICY>() - 4usize];
    ["Offset of field: POWER_ACTION_POLICY::Action"]
        [::std::mem::offset_of!(POWER_ACTION_POLICY, Action) - 0usize];
    ["Offset of field: POWER_ACTION_POLICY::Flags"]
        [::std::mem::offset_of!(POWER_ACTION_POLICY, Flags) - 4usize];
    ["Offset of field: POWER_ACTION_POLICY::EventCode"]
        [::std::mem::offset_of!(POWER_ACTION_POLICY, EventCode) - 8usize];
};
pub type PPOWER_ACTION_POLICY = *mut POWER_ACTION_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSTEM_POWER_LEVEL {
    pub Enable: BOOLEAN,
    pub Spare: [BYTE; 3usize],
    pub BatteryLevel: DWORD,
    pub PowerPolicy: POWER_ACTION_POLICY,
    pub MinSystemState: SYSTEM_POWER_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SYSTEM_POWER_LEVEL"][::std::mem::size_of::<SYSTEM_POWER_LEVEL>() - 24usize];
    ["Alignment of SYSTEM_POWER_LEVEL"][::std::mem::align_of::<SYSTEM_POWER_LEVEL>() - 4usize];
    ["Offset of field: SYSTEM_POWER_LEVEL::Enable"]
        [::std::mem::offset_of!(SYSTEM_POWER_LEVEL, Enable) - 0usize];
    ["Offset of field: SYSTEM_POWER_LEVEL::Spare"]
        [::std::mem::offset_of!(SYSTEM_POWER_LEVEL, Spare) - 1usize];
    ["Offset of field: SYSTEM_POWER_LEVEL::BatteryLevel"]
        [::std::mem::offset_of!(SYSTEM_POWER_LEVEL, BatteryLevel) - 4usize];
    ["Offset of field: SYSTEM_POWER_LEVEL::PowerPolicy"]
        [::std::mem::offset_of!(SYSTEM_POWER_LEVEL, PowerPolicy) - 8usize];
    ["Offset of field: SYSTEM_POWER_LEVEL::MinSystemState"]
        [::std::mem::offset_of!(SYSTEM_POWER_LEVEL, MinSystemState) - 20usize];
};
pub type PSYSTEM_POWER_LEVEL = *mut SYSTEM_POWER_LEVEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POWER_POLICY {
    pub Revision: DWORD,
    pub PowerButton: POWER_ACTION_POLICY,
    pub SleepButton: POWER_ACTION_POLICY,
    pub LidClose: POWER_ACTION_POLICY,
    pub LidOpenWake: SYSTEM_POWER_STATE,
    pub Reserved: DWORD,
    pub Idle: POWER_ACTION_POLICY,
    pub IdleTimeout: DWORD,
    pub IdleSensitivity: BYTE,
    pub DynamicThrottle: BYTE,
    pub Spare2: [BYTE; 2usize],
    pub MinSleep: SYSTEM_POWER_STATE,
    pub MaxSleep: SYSTEM_POWER_STATE,
    pub ReducedLatencySleep: SYSTEM_POWER_STATE,
    pub WinLogonFlags: DWORD,
    pub Spare3: DWORD,
    pub DozeS4Timeout: DWORD,
    pub BroadcastCapacityResolution: DWORD,
    pub DischargePolicy: [SYSTEM_POWER_LEVEL; 4usize],
    pub VideoTimeout: DWORD,
    pub VideoDimDisplay: BOOLEAN,
    pub VideoReserved: [DWORD; 3usize],
    pub SpindownTimeout: DWORD,
    pub OptimizeForPower: BOOLEAN,
    pub FanThrottleTolerance: BYTE,
    pub ForcedThrottle: BYTE,
    pub MinThrottle: BYTE,
    pub OverThrottled: POWER_ACTION_POLICY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_POWER_POLICY"][::std::mem::size_of::<_SYSTEM_POWER_POLICY>() - 232usize];
    ["Alignment of _SYSTEM_POWER_POLICY"][::std::mem::align_of::<_SYSTEM_POWER_POLICY>() - 4usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::Revision"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, Revision) - 0usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::PowerButton"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, PowerButton) - 4usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::SleepButton"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, SleepButton) - 16usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::LidClose"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, LidClose) - 28usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::LidOpenWake"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, LidOpenWake) - 40usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::Reserved"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, Reserved) - 44usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::Idle"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, Idle) - 48usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::IdleTimeout"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, IdleTimeout) - 60usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::IdleSensitivity"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, IdleSensitivity) - 64usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::DynamicThrottle"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, DynamicThrottle) - 65usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::Spare2"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, Spare2) - 66usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::MinSleep"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, MinSleep) - 68usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::MaxSleep"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, MaxSleep) - 72usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::ReducedLatencySleep"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, ReducedLatencySleep) - 76usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::WinLogonFlags"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, WinLogonFlags) - 80usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::Spare3"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, Spare3) - 84usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::DozeS4Timeout"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, DozeS4Timeout) - 88usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::BroadcastCapacityResolution"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, BroadcastCapacityResolution) - 92usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::DischargePolicy"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, DischargePolicy) - 96usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::VideoTimeout"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, VideoTimeout) - 192usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::VideoDimDisplay"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, VideoDimDisplay) - 196usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::VideoReserved"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, VideoReserved) - 200usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::SpindownTimeout"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, SpindownTimeout) - 212usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::OptimizeForPower"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, OptimizeForPower) - 216usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::FanThrottleTolerance"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, FanThrottleTolerance) - 217usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::ForcedThrottle"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, ForcedThrottle) - 218usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::MinThrottle"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, MinThrottle) - 219usize];
    ["Offset of field: _SYSTEM_POWER_POLICY::OverThrottled"]
        [::std::mem::offset_of!(_SYSTEM_POWER_POLICY, OverThrottled) - 220usize];
};
pub type SYSTEM_POWER_POLICY = _SYSTEM_POWER_POLICY;
pub type PSYSTEM_POWER_POLICY = *mut _SYSTEM_POWER_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROCESSOR_IDLESTATE_INFO {
    pub TimeCheck: DWORD,
    pub DemotePercent: BYTE,
    pub PromotePercent: BYTE,
    pub Spare: [BYTE; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_IDLESTATE_INFO"]
        [::std::mem::size_of::<PROCESSOR_IDLESTATE_INFO>() - 8usize];
    ["Alignment of PROCESSOR_IDLESTATE_INFO"]
        [::std::mem::align_of::<PROCESSOR_IDLESTATE_INFO>() - 4usize];
    ["Offset of field: PROCESSOR_IDLESTATE_INFO::TimeCheck"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_INFO, TimeCheck) - 0usize];
    ["Offset of field: PROCESSOR_IDLESTATE_INFO::DemotePercent"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_INFO, DemotePercent) - 4usize];
    ["Offset of field: PROCESSOR_IDLESTATE_INFO::PromotePercent"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_INFO, PromotePercent) - 5usize];
    ["Offset of field: PROCESSOR_IDLESTATE_INFO::Spare"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_INFO, Spare) - 6usize];
};
pub type PPROCESSOR_IDLESTATE_INFO = *mut PROCESSOR_IDLESTATE_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROCESSOR_IDLESTATE_POLICY {
    pub Revision: WORD,
    pub Flags: PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1,
    pub PolicyCount: DWORD,
    pub Policy: [PROCESSOR_IDLESTATE_INFO; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1 {
    pub AsWORD: WORD,
    pub __bindgen_anon_1: PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Alignment of PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1>() - 2usize];
};
impl PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn AllowScaling(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_AllowScaling(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllowScaling_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_AllowScaling_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Disabled(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_Disabled(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Disabled_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_Disabled_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                14u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                14u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AllowScaling: WORD,
        Disabled: WORD,
        Reserved: WORD,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let AllowScaling: u16 = unsafe { ::std::mem::transmute(AllowScaling) };
            AllowScaling as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Disabled: u16 = unsafe { ::std::mem::transmute(Disabled) };
            Disabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 14u8, {
            let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1>() - 2usize];
    ["Alignment of PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1>() - 2usize];
    ["Offset of field: PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1::AsWORD"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1, AsWORD) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_IDLESTATE_POLICY"]
        [::std::mem::size_of::<PROCESSOR_IDLESTATE_POLICY>() - 32usize];
    ["Alignment of PROCESSOR_IDLESTATE_POLICY"]
        [::std::mem::align_of::<PROCESSOR_IDLESTATE_POLICY>() - 4usize];
    ["Offset of field: PROCESSOR_IDLESTATE_POLICY::Revision"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_POLICY, Revision) - 0usize];
    ["Offset of field: PROCESSOR_IDLESTATE_POLICY::Flags"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_POLICY, Flags) - 2usize];
    ["Offset of field: PROCESSOR_IDLESTATE_POLICY::PolicyCount"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_POLICY, PolicyCount) - 4usize];
    ["Offset of field: PROCESSOR_IDLESTATE_POLICY::Policy"]
        [::std::mem::offset_of!(PROCESSOR_IDLESTATE_POLICY, Policy) - 8usize];
};
pub type PPROCESSOR_IDLESTATE_POLICY = *mut PROCESSOR_IDLESTATE_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_POWER_POLICY_INFO {
    pub TimeCheck: DWORD,
    pub DemoteLimit: DWORD,
    pub PromoteLimit: DWORD,
    pub DemotePercent: BYTE,
    pub PromotePercent: BYTE,
    pub Spare: [BYTE; 2usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESSOR_POWER_POLICY_INFO"]
        [::std::mem::size_of::<_PROCESSOR_POWER_POLICY_INFO>() - 20usize];
    ["Alignment of _PROCESSOR_POWER_POLICY_INFO"]
        [::std::mem::align_of::<_PROCESSOR_POWER_POLICY_INFO>() - 4usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY_INFO::TimeCheck"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY_INFO, TimeCheck) - 0usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY_INFO::DemoteLimit"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY_INFO, DemoteLimit) - 4usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY_INFO::PromoteLimit"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY_INFO, PromoteLimit) - 8usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY_INFO::DemotePercent"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY_INFO, DemotePercent) - 12usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY_INFO::PromotePercent"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY_INFO, PromotePercent) - 13usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY_INFO::Spare"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY_INFO, Spare) - 14usize];
};
impl _PROCESSOR_POWER_POLICY_INFO {
    #[inline]
    pub fn AllowDemotion(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AllowDemotion(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllowDemotion_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AllowDemotion_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AllowPromotion(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AllowPromotion(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AllowPromotion_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AllowPromotion_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AllowDemotion: DWORD,
        AllowPromotion: DWORD,
        Reserved: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let AllowDemotion: u32 = unsafe { ::std::mem::transmute(AllowDemotion) };
            AllowDemotion as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let AllowPromotion: u32 = unsafe { ::std::mem::transmute(AllowPromotion) };
            AllowPromotion as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PROCESSOR_POWER_POLICY_INFO = _PROCESSOR_POWER_POLICY_INFO;
pub type PPROCESSOR_POWER_POLICY_INFO = *mut _PROCESSOR_POWER_POLICY_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESSOR_POWER_POLICY {
    pub Revision: DWORD,
    pub DynamicThrottle: BYTE,
    pub Spare: [BYTE; 3usize],
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub PolicyCount: DWORD,
    pub Policy: [PROCESSOR_POWER_POLICY_INFO; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESSOR_POWER_POLICY"][::std::mem::size_of::<_PROCESSOR_POWER_POLICY>() - 76usize];
    ["Alignment of _PROCESSOR_POWER_POLICY"]
        [::std::mem::align_of::<_PROCESSOR_POWER_POLICY>() - 4usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY::Revision"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY, Revision) - 0usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY::DynamicThrottle"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY, DynamicThrottle) - 4usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY::Spare"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY, Spare) - 5usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY::PolicyCount"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY, PolicyCount) - 12usize];
    ["Offset of field: _PROCESSOR_POWER_POLICY::Policy"]
        [::std::mem::offset_of!(_PROCESSOR_POWER_POLICY, Policy) - 16usize];
};
impl _PROCESSOR_POWER_POLICY {
    #[inline]
    pub fn DisableCStates(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DisableCStates(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DisableCStates_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DisableCStates_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        DisableCStates: DWORD,
        Reserved: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DisableCStates: u32 = unsafe { ::std::mem::transmute(DisableCStates) };
            DisableCStates as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PROCESSOR_POWER_POLICY = _PROCESSOR_POWER_POLICY;
pub type PPROCESSOR_POWER_POLICY = *mut _PROCESSOR_POWER_POLICY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PROCESSOR_PERFSTATE_POLICY {
    pub Revision: DWORD,
    pub MaxThrottle: BYTE,
    pub MinThrottle: BYTE,
    pub BusyAdjThreshold: BYTE,
    pub __bindgen_anon_1: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1,
    pub TimeCheck: DWORD,
    pub IncreaseTime: DWORD,
    pub DecreaseTime: DWORD,
    pub IncreasePercent: DWORD,
    pub DecreasePercent: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1 {
    pub Spare: BYTE,
    pub Flags: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1 {
    pub AsBYTE: BYTE,
    pub __bindgen_anon_1: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(
        ) - 1usize];
    ["Alignment of PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        >() - 1usize];
};
impl PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn NoDomainAccounting(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_NoDomainAccounting(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NoDomainAccounting_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_NoDomainAccounting_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IncreasePolicy(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_IncreasePolicy(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IncreasePolicy_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_IncreasePolicy_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DecreasePolicy(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_DecreasePolicy(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DecreasePolicy_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                2u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_DecreasePolicy_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> BYTE {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> BYTE {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                3u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: BYTE) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        NoDomainAccounting: BYTE,
        IncreasePolicy: BYTE,
        DecreasePolicy: BYTE,
        Reserved: BYTE,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let NoDomainAccounting: u8 = unsafe { ::std::mem::transmute(NoDomainAccounting) };
            NoDomainAccounting as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let IncreasePolicy: u8 = unsafe { ::std::mem::transmute(IncreasePolicy) };
            IncreasePolicy as u64
        });
        __bindgen_bitfield_unit.set(3usize, 2u8, {
            let DecreasePolicy: u8 = unsafe { ::std::mem::transmute(DecreasePolicy) };
            DecreasePolicy as u64
        });
        __bindgen_bitfield_unit.set(5usize, 3u8, {
            let Reserved: u8 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Alignment of PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1::AsBYTE"][::std::mem::offset_of!(
        PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1,
        AsBYTE
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1"]
        [::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1>() - 1usize];
    ["Alignment of PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1"]
        [::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1>() - 1usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1::Spare"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1, Spare) - 0usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1, Flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESSOR_PERFSTATE_POLICY"]
        [::std::mem::size_of::<PROCESSOR_PERFSTATE_POLICY>() - 28usize];
    ["Alignment of PROCESSOR_PERFSTATE_POLICY"]
        [::std::mem::align_of::<PROCESSOR_PERFSTATE_POLICY>() - 4usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::Revision"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, Revision) - 0usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::MaxThrottle"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, MaxThrottle) - 4usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::MinThrottle"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, MinThrottle) - 5usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::BusyAdjThreshold"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, BusyAdjThreshold) - 6usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::TimeCheck"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, TimeCheck) - 8usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::IncreaseTime"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, IncreaseTime) - 12usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::DecreaseTime"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, DecreaseTime) - 16usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::IncreasePercent"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, IncreasePercent) - 20usize];
    ["Offset of field: PROCESSOR_PERFSTATE_POLICY::DecreasePercent"]
        [::std::mem::offset_of!(PROCESSOR_PERFSTATE_POLICY, DecreasePercent) - 24usize];
};
pub type PPROCESSOR_PERFSTATE_POLICY = *mut PROCESSOR_PERFSTATE_POLICY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ADMINISTRATOR_POWER_POLICY {
    pub MinSleep: SYSTEM_POWER_STATE,
    pub MaxSleep: SYSTEM_POWER_STATE,
    pub MinVideoTimeout: DWORD,
    pub MaxVideoTimeout: DWORD,
    pub MinSpindownTimeout: DWORD,
    pub MaxSpindownTimeout: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ADMINISTRATOR_POWER_POLICY"]
        [::std::mem::size_of::<_ADMINISTRATOR_POWER_POLICY>() - 24usize];
    ["Alignment of _ADMINISTRATOR_POWER_POLICY"]
        [::std::mem::align_of::<_ADMINISTRATOR_POWER_POLICY>() - 4usize];
    ["Offset of field: _ADMINISTRATOR_POWER_POLICY::MinSleep"]
        [::std::mem::offset_of!(_ADMINISTRATOR_POWER_POLICY, MinSleep) - 0usize];
    ["Offset of field: _ADMINISTRATOR_POWER_POLICY::MaxSleep"]
        [::std::mem::offset_of!(_ADMINISTRATOR_POWER_POLICY, MaxSleep) - 4usize];
    ["Offset of field: _ADMINISTRATOR_POWER_POLICY::MinVideoTimeout"]
        [::std::mem::offset_of!(_ADMINISTRATOR_POWER_POLICY, MinVideoTimeout) - 8usize];
    ["Offset of field: _ADMINISTRATOR_POWER_POLICY::MaxVideoTimeout"]
        [::std::mem::offset_of!(_ADMINISTRATOR_POWER_POLICY, MaxVideoTimeout) - 12usize];
    ["Offset of field: _ADMINISTRATOR_POWER_POLICY::MinSpindownTimeout"]
        [::std::mem::offset_of!(_ADMINISTRATOR_POWER_POLICY, MinSpindownTimeout) - 16usize];
    ["Offset of field: _ADMINISTRATOR_POWER_POLICY::MaxSpindownTimeout"]
        [::std::mem::offset_of!(_ADMINISTRATOR_POWER_POLICY, MaxSpindownTimeout) - 20usize];
};
pub type ADMINISTRATOR_POWER_POLICY = _ADMINISTRATOR_POWER_POLICY;
pub type PADMINISTRATOR_POWER_POLICY = *mut _ADMINISTRATOR_POWER_POLICY;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket1GB: _HIBERFILE_BUCKET_SIZE = 0;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket2GB: _HIBERFILE_BUCKET_SIZE = 1;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket4GB: _HIBERFILE_BUCKET_SIZE = 2;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket8GB: _HIBERFILE_BUCKET_SIZE = 3;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket16GB: _HIBERFILE_BUCKET_SIZE = 4;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucket32GB: _HIBERFILE_BUCKET_SIZE = 5;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucketUnlimited: _HIBERFILE_BUCKET_SIZE = 6;
pub const _HIBERFILE_BUCKET_SIZE_HiberFileBucketMax: _HIBERFILE_BUCKET_SIZE = 7;
pub type _HIBERFILE_BUCKET_SIZE = ::std::os::raw::c_int;
pub use self::_HIBERFILE_BUCKET_SIZE as HIBERFILE_BUCKET_SIZE;
pub type PHIBERFILE_BUCKET_SIZE = *mut _HIBERFILE_BUCKET_SIZE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HIBERFILE_BUCKET {
    pub MaxPhysicalMemory: DWORD64,
    pub PhysicalMemoryPercent: [DWORD; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _HIBERFILE_BUCKET"][::std::mem::size_of::<_HIBERFILE_BUCKET>() - 24usize];
    ["Alignment of _HIBERFILE_BUCKET"][::std::mem::align_of::<_HIBERFILE_BUCKET>() - 8usize];
    ["Offset of field: _HIBERFILE_BUCKET::MaxPhysicalMemory"]
        [::std::mem::offset_of!(_HIBERFILE_BUCKET, MaxPhysicalMemory) - 0usize];
    ["Offset of field: _HIBERFILE_BUCKET::PhysicalMemoryPercent"]
        [::std::mem::offset_of!(_HIBERFILE_BUCKET, PhysicalMemoryPercent) - 8usize];
};
pub type HIBERFILE_BUCKET = _HIBERFILE_BUCKET;
pub type PHIBERFILE_BUCKET = *mut _HIBERFILE_BUCKET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSTEM_POWER_CAPABILITIES {
    pub PowerButtonPresent: BOOLEAN,
    pub SleepButtonPresent: BOOLEAN,
    pub LidPresent: BOOLEAN,
    pub SystemS1: BOOLEAN,
    pub SystemS2: BOOLEAN,
    pub SystemS3: BOOLEAN,
    pub SystemS4: BOOLEAN,
    pub SystemS5: BOOLEAN,
    pub HiberFilePresent: BOOLEAN,
    pub FullWake: BOOLEAN,
    pub VideoDimPresent: BOOLEAN,
    pub ApmPresent: BOOLEAN,
    pub UpsPresent: BOOLEAN,
    pub ThermalControl: BOOLEAN,
    pub ProcessorThrottle: BOOLEAN,
    pub ProcessorMinThrottle: BYTE,
    pub ProcessorMaxThrottle: BYTE,
    pub FastSystemS4: BOOLEAN,
    pub Hiberboot: BOOLEAN,
    pub WakeAlarmPresent: BOOLEAN,
    pub AoAc: BOOLEAN,
    pub DiskSpinDown: BOOLEAN,
    pub HiberFileType: BYTE,
    pub AoAcConnectivitySupported: BOOLEAN,
    pub spare3: [BYTE; 6usize],
    pub SystemBatteriesPresent: BOOLEAN,
    pub BatteriesAreShortTerm: BOOLEAN,
    pub BatteryScale: [BATTERY_REPORTING_SCALE; 3usize],
    pub AcOnLineWake: SYSTEM_POWER_STATE,
    pub SoftLidWake: SYSTEM_POWER_STATE,
    pub RtcWake: SYSTEM_POWER_STATE,
    pub MinDeviceWakeState: SYSTEM_POWER_STATE,
    pub DefaultLowLatencyWake: SYSTEM_POWER_STATE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SYSTEM_POWER_CAPABILITIES"]
        [::std::mem::size_of::<SYSTEM_POWER_CAPABILITIES>() - 76usize];
    ["Alignment of SYSTEM_POWER_CAPABILITIES"]
        [::std::mem::align_of::<SYSTEM_POWER_CAPABILITIES>() - 4usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::PowerButtonPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, PowerButtonPresent) - 0usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SleepButtonPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SleepButtonPresent) - 1usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::LidPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, LidPresent) - 2usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SystemS1"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SystemS1) - 3usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SystemS2"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SystemS2) - 4usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SystemS3"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SystemS3) - 5usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SystemS4"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SystemS4) - 6usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SystemS5"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SystemS5) - 7usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::HiberFilePresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, HiberFilePresent) - 8usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::FullWake"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, FullWake) - 9usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::VideoDimPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, VideoDimPresent) - 10usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::ApmPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, ApmPresent) - 11usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::UpsPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, UpsPresent) - 12usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::ThermalControl"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, ThermalControl) - 13usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::ProcessorThrottle"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, ProcessorThrottle) - 14usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::ProcessorMinThrottle"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, ProcessorMinThrottle) - 15usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::ProcessorMaxThrottle"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, ProcessorMaxThrottle) - 16usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::FastSystemS4"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, FastSystemS4) - 17usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::Hiberboot"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, Hiberboot) - 18usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::WakeAlarmPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, WakeAlarmPresent) - 19usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::AoAc"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, AoAc) - 20usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::DiskSpinDown"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, DiskSpinDown) - 21usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::HiberFileType"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, HiberFileType) - 22usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::AoAcConnectivitySupported"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, AoAcConnectivitySupported) - 23usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::spare3"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, spare3) - 24usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SystemBatteriesPresent"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SystemBatteriesPresent) - 30usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::BatteriesAreShortTerm"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, BatteriesAreShortTerm) - 31usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::BatteryScale"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, BatteryScale) - 32usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::AcOnLineWake"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, AcOnLineWake) - 56usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::SoftLidWake"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, SoftLidWake) - 60usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::RtcWake"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, RtcWake) - 64usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::MinDeviceWakeState"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, MinDeviceWakeState) - 68usize];
    ["Offset of field: SYSTEM_POWER_CAPABILITIES::DefaultLowLatencyWake"]
        [::std::mem::offset_of!(SYSTEM_POWER_CAPABILITIES, DefaultLowLatencyWake) - 72usize];
};
pub type PSYSTEM_POWER_CAPABILITIES = *mut SYSTEM_POWER_CAPABILITIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SYSTEM_BATTERY_STATE {
    pub AcOnLine: BOOLEAN,
    pub BatteryPresent: BOOLEAN,
    pub Charging: BOOLEAN,
    pub Discharging: BOOLEAN,
    pub Spare1: [BOOLEAN; 3usize],
    pub Tag: BYTE,
    pub MaxCapacity: DWORD,
    pub RemainingCapacity: DWORD,
    pub Rate: DWORD,
    pub EstimatedTime: DWORD,
    pub DefaultAlert1: DWORD,
    pub DefaultAlert2: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SYSTEM_BATTERY_STATE"][::std::mem::size_of::<SYSTEM_BATTERY_STATE>() - 32usize];
    ["Alignment of SYSTEM_BATTERY_STATE"][::std::mem::align_of::<SYSTEM_BATTERY_STATE>() - 4usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::AcOnLine"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, AcOnLine) - 0usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::BatteryPresent"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, BatteryPresent) - 1usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::Charging"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, Charging) - 2usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::Discharging"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, Discharging) - 3usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::Spare1"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, Spare1) - 4usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::Tag"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, Tag) - 7usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::MaxCapacity"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, MaxCapacity) - 8usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::RemainingCapacity"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, RemainingCapacity) - 12usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::Rate"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, Rate) - 16usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::EstimatedTime"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, EstimatedTime) - 20usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::DefaultAlert1"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, DefaultAlert1) - 24usize];
    ["Offset of field: SYSTEM_BATTERY_STATE::DefaultAlert2"]
        [::std::mem::offset_of!(SYSTEM_BATTERY_STATE, DefaultAlert2) - 28usize];
};
pub type PSYSTEM_BATTERY_STATE = *mut SYSTEM_BATTERY_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POWER_SOURCE_STATE {
    pub BatteryState: SYSTEM_BATTERY_STATE,
    pub InstantaneousPeakPower: DWORD,
    pub InstantaneousPeakPeriod: DWORD,
    pub SustainablePeakPower: DWORD,
    pub SustainablePeakPeriod: DWORD,
    pub PeakPower: DWORD,
    pub MaxOutputPower: DWORD,
    pub MaxInputPower: DWORD,
    pub BatteryRateInCurrent: LONG,
    pub BatteryVoltage: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_POWER_SOURCE_STATE"]
        [::std::mem::size_of::<_SYSTEM_POWER_SOURCE_STATE>() - 68usize];
    ["Alignment of _SYSTEM_POWER_SOURCE_STATE"]
        [::std::mem::align_of::<_SYSTEM_POWER_SOURCE_STATE>() - 4usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::BatteryState"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, BatteryState) - 0usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::InstantaneousPeakPower"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, InstantaneousPeakPower) - 32usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::InstantaneousPeakPeriod"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, InstantaneousPeakPeriod) - 36usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::SustainablePeakPower"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, SustainablePeakPower) - 40usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::SustainablePeakPeriod"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, SustainablePeakPeriod) - 44usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::PeakPower"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, PeakPower) - 48usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::MaxOutputPower"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, MaxOutputPower) - 52usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::MaxInputPower"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, MaxInputPower) - 56usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::BatteryRateInCurrent"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, BatteryRateInCurrent) - 60usize];
    ["Offset of field: _SYSTEM_POWER_SOURCE_STATE::BatteryVoltage"]
        [::std::mem::offset_of!(_SYSTEM_POWER_SOURCE_STATE, BatteryVoltage) - 64usize];
};
pub type SYSTEM_POWER_SOURCE_STATE = _SYSTEM_POWER_SOURCE_STATE;
pub type PSYSTEM_POWER_SOURCE_STATE = *mut _SYSTEM_POWER_SOURCE_STATE;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DOS_HEADER {
    pub e_magic: WORD,
    pub e_cblp: WORD,
    pub e_cp: WORD,
    pub e_crlc: WORD,
    pub e_cparhdr: WORD,
    pub e_minalloc: WORD,
    pub e_maxalloc: WORD,
    pub e_ss: WORD,
    pub e_sp: WORD,
    pub e_csum: WORD,
    pub e_ip: WORD,
    pub e_cs: WORD,
    pub e_lfarlc: WORD,
    pub e_ovno: WORD,
    pub e_res: [WORD; 4usize],
    pub e_oemid: WORD,
    pub e_oeminfo: WORD,
    pub e_res2: [WORD; 10usize],
    pub e_lfanew: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DOS_HEADER"][::std::mem::size_of::<_IMAGE_DOS_HEADER>() - 64usize];
    ["Alignment of _IMAGE_DOS_HEADER"][::std::mem::align_of::<_IMAGE_DOS_HEADER>() - 2usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_magic"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_magic) - 0usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_cblp"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_cblp) - 2usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_cp"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_cp) - 4usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_crlc"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_crlc) - 6usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_cparhdr"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_cparhdr) - 8usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_minalloc"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_minalloc) - 10usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_maxalloc"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_maxalloc) - 12usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_ss"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_ss) - 14usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_sp"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_sp) - 16usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_csum"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_csum) - 18usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_ip"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_ip) - 20usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_cs"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_cs) - 22usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_lfarlc"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_lfarlc) - 24usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_ovno"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_ovno) - 26usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_res"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_res) - 28usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_oemid"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_oemid) - 36usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_oeminfo"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_oeminfo) - 38usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_res2"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_res2) - 40usize];
    ["Offset of field: _IMAGE_DOS_HEADER::e_lfanew"]
        [::std::mem::offset_of!(_IMAGE_DOS_HEADER, e_lfanew) - 60usize];
};
pub type IMAGE_DOS_HEADER = _IMAGE_DOS_HEADER;
pub type PIMAGE_DOS_HEADER = *mut _IMAGE_DOS_HEADER;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_OS2_HEADER {
    pub ne_magic: WORD,
    pub ne_ver: CHAR,
    pub ne_rev: CHAR,
    pub ne_enttab: WORD,
    pub ne_cbenttab: WORD,
    pub ne_crc: LONG,
    pub ne_flags: WORD,
    pub ne_autodata: WORD,
    pub ne_heap: WORD,
    pub ne_stack: WORD,
    pub ne_csip: LONG,
    pub ne_sssp: LONG,
    pub ne_cseg: WORD,
    pub ne_cmod: WORD,
    pub ne_cbnrestab: WORD,
    pub ne_segtab: WORD,
    pub ne_rsrctab: WORD,
    pub ne_restab: WORD,
    pub ne_modtab: WORD,
    pub ne_imptab: WORD,
    pub ne_nrestab: LONG,
    pub ne_cmovent: WORD,
    pub ne_align: WORD,
    pub ne_cres: WORD,
    pub ne_exetyp: BYTE,
    pub ne_flagsothers: BYTE,
    pub ne_pretthunks: WORD,
    pub ne_psegrefbytes: WORD,
    pub ne_swaparea: WORD,
    pub ne_expver: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_OS2_HEADER"][::std::mem::size_of::<_IMAGE_OS2_HEADER>() - 64usize];
    ["Alignment of _IMAGE_OS2_HEADER"][::std::mem::align_of::<_IMAGE_OS2_HEADER>() - 2usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_magic"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_magic) - 0usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_ver"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_ver) - 2usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_rev"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_rev) - 3usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_enttab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_enttab) - 4usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_cbenttab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_cbenttab) - 6usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_crc"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_crc) - 8usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_flags"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_flags) - 12usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_autodata"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_autodata) - 14usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_heap"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_heap) - 16usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_stack"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_stack) - 18usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_csip"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_csip) - 20usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_sssp"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_sssp) - 24usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_cseg"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_cseg) - 28usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_cmod"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_cmod) - 30usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_cbnrestab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_cbnrestab) - 32usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_segtab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_segtab) - 34usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_rsrctab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_rsrctab) - 36usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_restab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_restab) - 38usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_modtab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_modtab) - 40usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_imptab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_imptab) - 42usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_nrestab"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_nrestab) - 44usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_cmovent"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_cmovent) - 48usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_align"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_align) - 50usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_cres"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_cres) - 52usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_exetyp"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_exetyp) - 54usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_flagsothers"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_flagsothers) - 55usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_pretthunks"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_pretthunks) - 56usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_psegrefbytes"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_psegrefbytes) - 58usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_swaparea"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_swaparea) - 60usize];
    ["Offset of field: _IMAGE_OS2_HEADER::ne_expver"]
        [::std::mem::offset_of!(_IMAGE_OS2_HEADER, ne_expver) - 62usize];
};
pub type IMAGE_OS2_HEADER = _IMAGE_OS2_HEADER;
pub type PIMAGE_OS2_HEADER = *mut _IMAGE_OS2_HEADER;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_VXD_HEADER {
    pub e32_magic: WORD,
    pub e32_border: BYTE,
    pub e32_worder: BYTE,
    pub e32_level: DWORD,
    pub e32_cpu: WORD,
    pub e32_os: WORD,
    pub e32_ver: DWORD,
    pub e32_mflags: DWORD,
    pub e32_mpages: DWORD,
    pub e32_startobj: DWORD,
    pub e32_eip: DWORD,
    pub e32_stackobj: DWORD,
    pub e32_esp: DWORD,
    pub e32_pagesize: DWORD,
    pub e32_lastpagesize: DWORD,
    pub e32_fixupsize: DWORD,
    pub e32_fixupsum: DWORD,
    pub e32_ldrsize: DWORD,
    pub e32_ldrsum: DWORD,
    pub e32_objtab: DWORD,
    pub e32_objcnt: DWORD,
    pub e32_objmap: DWORD,
    pub e32_itermap: DWORD,
    pub e32_rsrctab: DWORD,
    pub e32_rsrccnt: DWORD,
    pub e32_restab: DWORD,
    pub e32_enttab: DWORD,
    pub e32_dirtab: DWORD,
    pub e32_dircnt: DWORD,
    pub e32_fpagetab: DWORD,
    pub e32_frectab: DWORD,
    pub e32_impmod: DWORD,
    pub e32_impmodcnt: DWORD,
    pub e32_impproc: DWORD,
    pub e32_pagesum: DWORD,
    pub e32_datapage: DWORD,
    pub e32_preload: DWORD,
    pub e32_nrestab: DWORD,
    pub e32_cbnrestab: DWORD,
    pub e32_nressum: DWORD,
    pub e32_autodata: DWORD,
    pub e32_debuginfo: DWORD,
    pub e32_debuglen: DWORD,
    pub e32_instpreload: DWORD,
    pub e32_instdemand: DWORD,
    pub e32_heapsize: DWORD,
    pub e32_res3: [BYTE; 12usize],
    pub e32_winresoff: DWORD,
    pub e32_winreslen: DWORD,
    pub e32_devid: WORD,
    pub e32_ddkver: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_VXD_HEADER"][::std::mem::size_of::<_IMAGE_VXD_HEADER>() - 196usize];
    ["Alignment of _IMAGE_VXD_HEADER"][::std::mem::align_of::<_IMAGE_VXD_HEADER>() - 2usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_magic"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_magic) - 0usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_border"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_border) - 2usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_worder"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_worder) - 3usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_level"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_level) - 4usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_cpu"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_cpu) - 8usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_os"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_os) - 10usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_ver"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_ver) - 12usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_mflags"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_mflags) - 16usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_mpages"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_mpages) - 20usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_startobj"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_startobj) - 24usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_eip"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_eip) - 28usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_stackobj"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_stackobj) - 32usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_esp"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_esp) - 36usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_pagesize"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_pagesize) - 40usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_lastpagesize"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_lastpagesize) - 44usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_fixupsize"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_fixupsize) - 48usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_fixupsum"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_fixupsum) - 52usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_ldrsize"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_ldrsize) - 56usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_ldrsum"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_ldrsum) - 60usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_objtab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_objtab) - 64usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_objcnt"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_objcnt) - 68usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_objmap"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_objmap) - 72usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_itermap"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_itermap) - 76usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_rsrctab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_rsrctab) - 80usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_rsrccnt"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_rsrccnt) - 84usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_restab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_restab) - 88usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_enttab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_enttab) - 92usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_dirtab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_dirtab) - 96usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_dircnt"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_dircnt) - 100usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_fpagetab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_fpagetab) - 104usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_frectab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_frectab) - 108usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_impmod"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_impmod) - 112usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_impmodcnt"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_impmodcnt) - 116usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_impproc"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_impproc) - 120usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_pagesum"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_pagesum) - 124usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_datapage"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_datapage) - 128usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_preload"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_preload) - 132usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_nrestab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_nrestab) - 136usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_cbnrestab"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_cbnrestab) - 140usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_nressum"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_nressum) - 144usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_autodata"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_autodata) - 148usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_debuginfo"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_debuginfo) - 152usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_debuglen"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_debuglen) - 156usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_instpreload"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_instpreload) - 160usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_instdemand"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_instdemand) - 164usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_heapsize"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_heapsize) - 168usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_res3"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_res3) - 172usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_winresoff"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_winresoff) - 184usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_winreslen"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_winreslen) - 188usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_devid"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_devid) - 192usize];
    ["Offset of field: _IMAGE_VXD_HEADER::e32_ddkver"]
        [::std::mem::offset_of!(_IMAGE_VXD_HEADER, e32_ddkver) - 194usize];
};
pub type IMAGE_VXD_HEADER = _IMAGE_VXD_HEADER;
pub type PIMAGE_VXD_HEADER = *mut _IMAGE_VXD_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FILE_HEADER {
    pub Machine: WORD,
    pub NumberOfSections: WORD,
    pub TimeDateStamp: DWORD,
    pub PointerToSymbolTable: DWORD,
    pub NumberOfSymbols: DWORD,
    pub SizeOfOptionalHeader: WORD,
    pub Characteristics: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_FILE_HEADER"][::std::mem::size_of::<_IMAGE_FILE_HEADER>() - 20usize];
    ["Alignment of _IMAGE_FILE_HEADER"][::std::mem::align_of::<_IMAGE_FILE_HEADER>() - 4usize];
    ["Offset of field: _IMAGE_FILE_HEADER::Machine"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, Machine) - 0usize];
    ["Offset of field: _IMAGE_FILE_HEADER::NumberOfSections"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, NumberOfSections) - 2usize];
    ["Offset of field: _IMAGE_FILE_HEADER::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_FILE_HEADER::PointerToSymbolTable"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, PointerToSymbolTable) - 8usize];
    ["Offset of field: _IMAGE_FILE_HEADER::NumberOfSymbols"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, NumberOfSymbols) - 12usize];
    ["Offset of field: _IMAGE_FILE_HEADER::SizeOfOptionalHeader"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, SizeOfOptionalHeader) - 16usize];
    ["Offset of field: _IMAGE_FILE_HEADER::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_FILE_HEADER, Characteristics) - 18usize];
};
pub type IMAGE_FILE_HEADER = _IMAGE_FILE_HEADER;
pub type PIMAGE_FILE_HEADER = *mut _IMAGE_FILE_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DATA_DIRECTORY {
    pub VirtualAddress: DWORD,
    pub Size: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DATA_DIRECTORY"][::std::mem::size_of::<_IMAGE_DATA_DIRECTORY>() - 8usize];
    ["Alignment of _IMAGE_DATA_DIRECTORY"]
        [::std::mem::align_of::<_IMAGE_DATA_DIRECTORY>() - 4usize];
    ["Offset of field: _IMAGE_DATA_DIRECTORY::VirtualAddress"]
        [::std::mem::offset_of!(_IMAGE_DATA_DIRECTORY, VirtualAddress) - 0usize];
    ["Offset of field: _IMAGE_DATA_DIRECTORY::Size"]
        [::std::mem::offset_of!(_IMAGE_DATA_DIRECTORY, Size) - 4usize];
};
pub type IMAGE_DATA_DIRECTORY = _IMAGE_DATA_DIRECTORY;
pub type PIMAGE_DATA_DIRECTORY = *mut _IMAGE_DATA_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_OPTIONAL_HEADER {
    pub Magic: WORD,
    pub MajorLinkerVersion: BYTE,
    pub MinorLinkerVersion: BYTE,
    pub SizeOfCode: DWORD,
    pub SizeOfInitializedData: DWORD,
    pub SizeOfUninitializedData: DWORD,
    pub AddressOfEntryPoint: DWORD,
    pub BaseOfCode: DWORD,
    pub BaseOfData: DWORD,
    pub ImageBase: DWORD,
    pub SectionAlignment: DWORD,
    pub FileAlignment: DWORD,
    pub MajorOperatingSystemVersion: WORD,
    pub MinorOperatingSystemVersion: WORD,
    pub MajorImageVersion: WORD,
    pub MinorImageVersion: WORD,
    pub MajorSubsystemVersion: WORD,
    pub MinorSubsystemVersion: WORD,
    pub Win32VersionValue: DWORD,
    pub SizeOfImage: DWORD,
    pub SizeOfHeaders: DWORD,
    pub CheckSum: DWORD,
    pub Subsystem: WORD,
    pub DllCharacteristics: WORD,
    pub SizeOfStackReserve: DWORD,
    pub SizeOfStackCommit: DWORD,
    pub SizeOfHeapReserve: DWORD,
    pub SizeOfHeapCommit: DWORD,
    pub LoaderFlags: DWORD,
    pub NumberOfRvaAndSizes: DWORD,
    pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_OPTIONAL_HEADER"][::std::mem::size_of::<_IMAGE_OPTIONAL_HEADER>() - 224usize];
    ["Alignment of _IMAGE_OPTIONAL_HEADER"]
        [::std::mem::align_of::<_IMAGE_OPTIONAL_HEADER>() - 4usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::Magic"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, Magic) - 0usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MajorLinkerVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MajorLinkerVersion) - 2usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MinorLinkerVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MinorLinkerVersion) - 3usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfCode"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfCode) - 4usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfInitializedData"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfInitializedData) - 8usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfUninitializedData"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfUninitializedData) - 12usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::AddressOfEntryPoint"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, AddressOfEntryPoint) - 16usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::BaseOfCode"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, BaseOfCode) - 20usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::BaseOfData"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, BaseOfData) - 24usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::ImageBase"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, ImageBase) - 28usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SectionAlignment"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SectionAlignment) - 32usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::FileAlignment"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, FileAlignment) - 36usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MajorOperatingSystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MajorOperatingSystemVersion) - 40usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MinorOperatingSystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MinorOperatingSystemVersion) - 42usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MajorImageVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MajorImageVersion) - 44usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MinorImageVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MinorImageVersion) - 46usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MajorSubsystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MajorSubsystemVersion) - 48usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::MinorSubsystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, MinorSubsystemVersion) - 50usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::Win32VersionValue"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, Win32VersionValue) - 52usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfImage"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfImage) - 56usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfHeaders"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfHeaders) - 60usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::CheckSum"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, CheckSum) - 64usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::Subsystem"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, Subsystem) - 68usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::DllCharacteristics"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, DllCharacteristics) - 70usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfStackReserve"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfStackReserve) - 72usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfStackCommit"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfStackCommit) - 76usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfHeapReserve"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfHeapReserve) - 80usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::SizeOfHeapCommit"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, SizeOfHeapCommit) - 84usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::LoaderFlags"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, LoaderFlags) - 88usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::NumberOfRvaAndSizes"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, NumberOfRvaAndSizes) - 92usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER::DataDirectory"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER, DataDirectory) - 96usize];
};
pub type IMAGE_OPTIONAL_HEADER32 = _IMAGE_OPTIONAL_HEADER;
pub type PIMAGE_OPTIONAL_HEADER32 = *mut _IMAGE_OPTIONAL_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ROM_OPTIONAL_HEADER {
    pub Magic: WORD,
    pub MajorLinkerVersion: BYTE,
    pub MinorLinkerVersion: BYTE,
    pub SizeOfCode: DWORD,
    pub SizeOfInitializedData: DWORD,
    pub SizeOfUninitializedData: DWORD,
    pub AddressOfEntryPoint: DWORD,
    pub BaseOfCode: DWORD,
    pub BaseOfData: DWORD,
    pub BaseOfBss: DWORD,
    pub GprMask: DWORD,
    pub CprMask: [DWORD; 4usize],
    pub GpValue: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ROM_OPTIONAL_HEADER"]
        [::std::mem::size_of::<_IMAGE_ROM_OPTIONAL_HEADER>() - 56usize];
    ["Alignment of _IMAGE_ROM_OPTIONAL_HEADER"]
        [::std::mem::align_of::<_IMAGE_ROM_OPTIONAL_HEADER>() - 4usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::Magic"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, Magic) - 0usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::MajorLinkerVersion"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, MajorLinkerVersion) - 2usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::MinorLinkerVersion"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, MinorLinkerVersion) - 3usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::SizeOfCode"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, SizeOfCode) - 4usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::SizeOfInitializedData"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, SizeOfInitializedData) - 8usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::SizeOfUninitializedData"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, SizeOfUninitializedData) - 12usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::AddressOfEntryPoint"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, AddressOfEntryPoint) - 16usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::BaseOfCode"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, BaseOfCode) - 20usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::BaseOfData"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, BaseOfData) - 24usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::BaseOfBss"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, BaseOfBss) - 28usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::GprMask"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, GprMask) - 32usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::CprMask"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, CprMask) - 36usize];
    ["Offset of field: _IMAGE_ROM_OPTIONAL_HEADER::GpValue"]
        [::std::mem::offset_of!(_IMAGE_ROM_OPTIONAL_HEADER, GpValue) - 52usize];
};
pub type IMAGE_ROM_OPTIONAL_HEADER = _IMAGE_ROM_OPTIONAL_HEADER;
pub type PIMAGE_ROM_OPTIONAL_HEADER = *mut _IMAGE_ROM_OPTIONAL_HEADER;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_OPTIONAL_HEADER64 {
    pub Magic: WORD,
    pub MajorLinkerVersion: BYTE,
    pub MinorLinkerVersion: BYTE,
    pub SizeOfCode: DWORD,
    pub SizeOfInitializedData: DWORD,
    pub SizeOfUninitializedData: DWORD,
    pub AddressOfEntryPoint: DWORD,
    pub BaseOfCode: DWORD,
    pub ImageBase: ULONGLONG,
    pub SectionAlignment: DWORD,
    pub FileAlignment: DWORD,
    pub MajorOperatingSystemVersion: WORD,
    pub MinorOperatingSystemVersion: WORD,
    pub MajorImageVersion: WORD,
    pub MinorImageVersion: WORD,
    pub MajorSubsystemVersion: WORD,
    pub MinorSubsystemVersion: WORD,
    pub Win32VersionValue: DWORD,
    pub SizeOfImage: DWORD,
    pub SizeOfHeaders: DWORD,
    pub CheckSum: DWORD,
    pub Subsystem: WORD,
    pub DllCharacteristics: WORD,
    pub SizeOfStackReserve: ULONGLONG,
    pub SizeOfStackCommit: ULONGLONG,
    pub SizeOfHeapReserve: ULONGLONG,
    pub SizeOfHeapCommit: ULONGLONG,
    pub LoaderFlags: DWORD,
    pub NumberOfRvaAndSizes: DWORD,
    pub DataDirectory: [IMAGE_DATA_DIRECTORY; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_OPTIONAL_HEADER64"]
        [::std::mem::size_of::<_IMAGE_OPTIONAL_HEADER64>() - 240usize];
    ["Alignment of _IMAGE_OPTIONAL_HEADER64"]
        [::std::mem::align_of::<_IMAGE_OPTIONAL_HEADER64>() - 4usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::Magic"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, Magic) - 0usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MajorLinkerVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MajorLinkerVersion) - 2usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MinorLinkerVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MinorLinkerVersion) - 3usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfCode"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfCode) - 4usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfInitializedData"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfInitializedData) - 8usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfUninitializedData"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfUninitializedData) - 12usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::AddressOfEntryPoint"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, AddressOfEntryPoint) - 16usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::BaseOfCode"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, BaseOfCode) - 20usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::ImageBase"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, ImageBase) - 24usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SectionAlignment"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SectionAlignment) - 32usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::FileAlignment"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, FileAlignment) - 36usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MajorOperatingSystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MajorOperatingSystemVersion) - 40usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MinorOperatingSystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MinorOperatingSystemVersion) - 42usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MajorImageVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MajorImageVersion) - 44usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MinorImageVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MinorImageVersion) - 46usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MajorSubsystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MajorSubsystemVersion) - 48usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::MinorSubsystemVersion"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, MinorSubsystemVersion) - 50usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::Win32VersionValue"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, Win32VersionValue) - 52usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfImage"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfImage) - 56usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfHeaders"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfHeaders) - 60usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::CheckSum"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, CheckSum) - 64usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::Subsystem"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, Subsystem) - 68usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::DllCharacteristics"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, DllCharacteristics) - 70usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfStackReserve"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfStackReserve) - 72usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfStackCommit"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfStackCommit) - 80usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfHeapReserve"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfHeapReserve) - 88usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::SizeOfHeapCommit"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, SizeOfHeapCommit) - 96usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::LoaderFlags"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, LoaderFlags) - 104usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::NumberOfRvaAndSizes"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, NumberOfRvaAndSizes) - 108usize];
    ["Offset of field: _IMAGE_OPTIONAL_HEADER64::DataDirectory"]
        [::std::mem::offset_of!(_IMAGE_OPTIONAL_HEADER64, DataDirectory) - 112usize];
};
pub type IMAGE_OPTIONAL_HEADER64 = _IMAGE_OPTIONAL_HEADER64;
pub type PIMAGE_OPTIONAL_HEADER64 = *mut _IMAGE_OPTIONAL_HEADER64;
pub type IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER64;
pub type PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_NT_HEADERS64 {
    pub Signature: DWORD,
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_OPTIONAL_HEADER64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_NT_HEADERS64"][::std::mem::size_of::<_IMAGE_NT_HEADERS64>() - 264usize];
    ["Alignment of _IMAGE_NT_HEADERS64"][::std::mem::align_of::<_IMAGE_NT_HEADERS64>() - 4usize];
    ["Offset of field: _IMAGE_NT_HEADERS64::Signature"]
        [::std::mem::offset_of!(_IMAGE_NT_HEADERS64, Signature) - 0usize];
    ["Offset of field: _IMAGE_NT_HEADERS64::FileHeader"]
        [::std::mem::offset_of!(_IMAGE_NT_HEADERS64, FileHeader) - 4usize];
    ["Offset of field: _IMAGE_NT_HEADERS64::OptionalHeader"]
        [::std::mem::offset_of!(_IMAGE_NT_HEADERS64, OptionalHeader) - 24usize];
};
pub type IMAGE_NT_HEADERS64 = _IMAGE_NT_HEADERS64;
pub type PIMAGE_NT_HEADERS64 = *mut _IMAGE_NT_HEADERS64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_NT_HEADERS {
    pub Signature: DWORD,
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_OPTIONAL_HEADER32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_NT_HEADERS"][::std::mem::size_of::<_IMAGE_NT_HEADERS>() - 248usize];
    ["Alignment of _IMAGE_NT_HEADERS"][::std::mem::align_of::<_IMAGE_NT_HEADERS>() - 4usize];
    ["Offset of field: _IMAGE_NT_HEADERS::Signature"]
        [::std::mem::offset_of!(_IMAGE_NT_HEADERS, Signature) - 0usize];
    ["Offset of field: _IMAGE_NT_HEADERS::FileHeader"]
        [::std::mem::offset_of!(_IMAGE_NT_HEADERS, FileHeader) - 4usize];
    ["Offset of field: _IMAGE_NT_HEADERS::OptionalHeader"]
        [::std::mem::offset_of!(_IMAGE_NT_HEADERS, OptionalHeader) - 24usize];
};
pub type IMAGE_NT_HEADERS32 = _IMAGE_NT_HEADERS;
pub type PIMAGE_NT_HEADERS32 = *mut _IMAGE_NT_HEADERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ROM_HEADERS {
    pub FileHeader: IMAGE_FILE_HEADER,
    pub OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ROM_HEADERS"][::std::mem::size_of::<_IMAGE_ROM_HEADERS>() - 76usize];
    ["Alignment of _IMAGE_ROM_HEADERS"][::std::mem::align_of::<_IMAGE_ROM_HEADERS>() - 4usize];
    ["Offset of field: _IMAGE_ROM_HEADERS::FileHeader"]
        [::std::mem::offset_of!(_IMAGE_ROM_HEADERS, FileHeader) - 0usize];
    ["Offset of field: _IMAGE_ROM_HEADERS::OptionalHeader"]
        [::std::mem::offset_of!(_IMAGE_ROM_HEADERS, OptionalHeader) - 20usize];
};
pub type IMAGE_ROM_HEADERS = _IMAGE_ROM_HEADERS;
pub type PIMAGE_ROM_HEADERS = *mut _IMAGE_ROM_HEADERS;
pub type IMAGE_NT_HEADERS = IMAGE_NT_HEADERS64;
pub type PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANON_OBJECT_HEADER {
    pub Sig1: WORD,
    pub Sig2: WORD,
    pub Version: WORD,
    pub Machine: WORD,
    pub TimeDateStamp: DWORD,
    pub ClassID: CLSID,
    pub SizeOfData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ANON_OBJECT_HEADER"][::std::mem::size_of::<ANON_OBJECT_HEADER>() - 32usize];
    ["Alignment of ANON_OBJECT_HEADER"][::std::mem::align_of::<ANON_OBJECT_HEADER>() - 4usize];
    ["Offset of field: ANON_OBJECT_HEADER::Sig1"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, Sig1) - 0usize];
    ["Offset of field: ANON_OBJECT_HEADER::Sig2"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, Sig2) - 2usize];
    ["Offset of field: ANON_OBJECT_HEADER::Version"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, Version) - 4usize];
    ["Offset of field: ANON_OBJECT_HEADER::Machine"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, Machine) - 6usize];
    ["Offset of field: ANON_OBJECT_HEADER::TimeDateStamp"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, TimeDateStamp) - 8usize];
    ["Offset of field: ANON_OBJECT_HEADER::ClassID"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, ClassID) - 12usize];
    ["Offset of field: ANON_OBJECT_HEADER::SizeOfData"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER, SizeOfData) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANON_OBJECT_HEADER_V2 {
    pub Sig1: WORD,
    pub Sig2: WORD,
    pub Version: WORD,
    pub Machine: WORD,
    pub TimeDateStamp: DWORD,
    pub ClassID: CLSID,
    pub SizeOfData: DWORD,
    pub Flags: DWORD,
    pub MetaDataSize: DWORD,
    pub MetaDataOffset: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ANON_OBJECT_HEADER_V2"][::std::mem::size_of::<ANON_OBJECT_HEADER_V2>() - 44usize];
    ["Alignment of ANON_OBJECT_HEADER_V2"]
        [::std::mem::align_of::<ANON_OBJECT_HEADER_V2>() - 4usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::Sig1"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, Sig1) - 0usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::Sig2"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, Sig2) - 2usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::Version"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, Version) - 4usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::Machine"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, Machine) - 6usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::TimeDateStamp"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, TimeDateStamp) - 8usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::ClassID"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, ClassID) - 12usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::SizeOfData"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, SizeOfData) - 28usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::Flags"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, Flags) - 32usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::MetaDataSize"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, MetaDataSize) - 36usize];
    ["Offset of field: ANON_OBJECT_HEADER_V2::MetaDataOffset"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_V2, MetaDataOffset) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANON_OBJECT_HEADER_BIGOBJ {
    pub Sig1: WORD,
    pub Sig2: WORD,
    pub Version: WORD,
    pub Machine: WORD,
    pub TimeDateStamp: DWORD,
    pub ClassID: CLSID,
    pub SizeOfData: DWORD,
    pub Flags: DWORD,
    pub MetaDataSize: DWORD,
    pub MetaDataOffset: DWORD,
    pub NumberOfSections: DWORD,
    pub PointerToSymbolTable: DWORD,
    pub NumberOfSymbols: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ANON_OBJECT_HEADER_BIGOBJ"]
        [::std::mem::size_of::<ANON_OBJECT_HEADER_BIGOBJ>() - 56usize];
    ["Alignment of ANON_OBJECT_HEADER_BIGOBJ"]
        [::std::mem::align_of::<ANON_OBJECT_HEADER_BIGOBJ>() - 4usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::Sig1"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, Sig1) - 0usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::Sig2"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, Sig2) - 2usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::Version"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, Version) - 4usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::Machine"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, Machine) - 6usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::TimeDateStamp"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, TimeDateStamp) - 8usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::ClassID"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, ClassID) - 12usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::SizeOfData"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, SizeOfData) - 28usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::Flags"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, Flags) - 32usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::MetaDataSize"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, MetaDataSize) - 36usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::MetaDataOffset"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, MetaDataOffset) - 40usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::NumberOfSections"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, NumberOfSections) - 44usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::PointerToSymbolTable"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, PointerToSymbolTable) - 48usize];
    ["Offset of field: ANON_OBJECT_HEADER_BIGOBJ::NumberOfSymbols"]
        [::std::mem::offset_of!(ANON_OBJECT_HEADER_BIGOBJ, NumberOfSymbols) - 52usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_SECTION_HEADER {
    pub Name: [BYTE; 8usize],
    pub Misc: _IMAGE_SECTION_HEADER__bindgen_ty_1,
    pub VirtualAddress: DWORD,
    pub SizeOfRawData: DWORD,
    pub PointerToRawData: DWORD,
    pub PointerToRelocations: DWORD,
    pub PointerToLinenumbers: DWORD,
    pub NumberOfRelocations: WORD,
    pub NumberOfLinenumbers: WORD,
    pub Characteristics: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_SECTION_HEADER__bindgen_ty_1 {
    pub PhysicalAddress: DWORD,
    pub VirtualSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SECTION_HEADER__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_SECTION_HEADER__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_SECTION_HEADER__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_SECTION_HEADER__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_SECTION_HEADER__bindgen_ty_1::PhysicalAddress"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER__bindgen_ty_1, PhysicalAddress) - 0usize];
    ["Offset of field: _IMAGE_SECTION_HEADER__bindgen_ty_1::VirtualSize"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER__bindgen_ty_1, VirtualSize) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SECTION_HEADER"][::std::mem::size_of::<_IMAGE_SECTION_HEADER>() - 40usize];
    ["Alignment of _IMAGE_SECTION_HEADER"]
        [::std::mem::align_of::<_IMAGE_SECTION_HEADER>() - 4usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::Name"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, Name) - 0usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::Misc"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, Misc) - 8usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::VirtualAddress"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, VirtualAddress) - 12usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::SizeOfRawData"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, SizeOfRawData) - 16usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::PointerToRawData"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, PointerToRawData) - 20usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::PointerToRelocations"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, PointerToRelocations) - 24usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::PointerToLinenumbers"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, PointerToLinenumbers) - 28usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::NumberOfRelocations"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, NumberOfRelocations) - 32usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::NumberOfLinenumbers"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, NumberOfLinenumbers) - 34usize];
    ["Offset of field: _IMAGE_SECTION_HEADER::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_SECTION_HEADER, Characteristics) - 36usize];
};
pub type IMAGE_SECTION_HEADER = _IMAGE_SECTION_HEADER;
pub type PIMAGE_SECTION_HEADER = *mut _IMAGE_SECTION_HEADER;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_SYMBOL {
    pub N: _IMAGE_SYMBOL__bindgen_ty_1,
    pub Value: DWORD,
    pub SectionNumber: SHORT,
    pub Type: WORD,
    pub StorageClass: BYTE,
    pub NumberOfAuxSymbols: BYTE,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_SYMBOL__bindgen_ty_1 {
    pub ShortName: [BYTE; 8usize],
    pub Name: _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1,
    pub LongName: [DWORD; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
    pub Short: DWORD,
    pub Long: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1::Short"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1, Short) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1::Long"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1, Long) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SYMBOL__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_SYMBOL__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_SYMBOL__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_SYMBOL__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_SYMBOL__bindgen_ty_1::ShortName"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL__bindgen_ty_1, ShortName) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL__bindgen_ty_1::Name"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL__bindgen_ty_1, Name) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL__bindgen_ty_1::LongName"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL__bindgen_ty_1, LongName) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SYMBOL"][::std::mem::size_of::<_IMAGE_SYMBOL>() - 18usize];
    ["Alignment of _IMAGE_SYMBOL"][::std::mem::align_of::<_IMAGE_SYMBOL>() - 2usize];
    ["Offset of field: _IMAGE_SYMBOL::N"][::std::mem::offset_of!(_IMAGE_SYMBOL, N) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL::Value"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL, Value) - 8usize];
    ["Offset of field: _IMAGE_SYMBOL::SectionNumber"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL, SectionNumber) - 12usize];
    ["Offset of field: _IMAGE_SYMBOL::Type"][::std::mem::offset_of!(_IMAGE_SYMBOL, Type) - 14usize];
    ["Offset of field: _IMAGE_SYMBOL::StorageClass"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL, StorageClass) - 16usize];
    ["Offset of field: _IMAGE_SYMBOL::NumberOfAuxSymbols"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL, NumberOfAuxSymbols) - 17usize];
};
pub type IMAGE_SYMBOL = _IMAGE_SYMBOL;
pub type PIMAGE_SYMBOL = *mut IMAGE_SYMBOL;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_SYMBOL_EX {
    pub N: _IMAGE_SYMBOL_EX__bindgen_ty_1,
    pub Value: DWORD,
    pub SectionNumber: LONG,
    pub Type: WORD,
    pub StorageClass: BYTE,
    pub NumberOfAuxSymbols: BYTE,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_SYMBOL_EX__bindgen_ty_1 {
    pub ShortName: [BYTE; 8usize],
    pub Name: _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1,
    pub LongName: [DWORD; 2usize],
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1 {
    pub Short: DWORD,
    pub Long: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1::Short"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1, Short) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1::Long"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1, Long) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SYMBOL_EX__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_SYMBOL_EX__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_SYMBOL_EX__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_SYMBOL_EX__bindgen_ty_1::ShortName"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX__bindgen_ty_1, ShortName) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL_EX__bindgen_ty_1::Name"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX__bindgen_ty_1, Name) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL_EX__bindgen_ty_1::LongName"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX__bindgen_ty_1, LongName) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SYMBOL_EX"][::std::mem::size_of::<_IMAGE_SYMBOL_EX>() - 20usize];
    ["Alignment of _IMAGE_SYMBOL_EX"][::std::mem::align_of::<_IMAGE_SYMBOL_EX>() - 2usize];
    ["Offset of field: _IMAGE_SYMBOL_EX::N"][::std::mem::offset_of!(_IMAGE_SYMBOL_EX, N) - 0usize];
    ["Offset of field: _IMAGE_SYMBOL_EX::Value"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX, Value) - 8usize];
    ["Offset of field: _IMAGE_SYMBOL_EX::SectionNumber"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX, SectionNumber) - 12usize];
    ["Offset of field: _IMAGE_SYMBOL_EX::Type"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX, Type) - 16usize];
    ["Offset of field: _IMAGE_SYMBOL_EX::StorageClass"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX, StorageClass) - 18usize];
    ["Offset of field: _IMAGE_SYMBOL_EX::NumberOfAuxSymbols"]
        [::std::mem::offset_of!(_IMAGE_SYMBOL_EX, NumberOfAuxSymbols) - 19usize];
};
pub type IMAGE_SYMBOL_EX = _IMAGE_SYMBOL_EX;
pub type PIMAGE_SYMBOL_EX = *mut IMAGE_SYMBOL_EX;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    pub bAuxType: BYTE,
    pub bReserved: BYTE,
    pub SymbolTableIndex: DWORD,
    pub rgbReserved: [BYTE; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_AUX_SYMBOL_TOKEN_DEF"]
        [::std::mem::size_of::<IMAGE_AUX_SYMBOL_TOKEN_DEF>() - 18usize];
    ["Alignment of IMAGE_AUX_SYMBOL_TOKEN_DEF"]
        [::std::mem::align_of::<IMAGE_AUX_SYMBOL_TOKEN_DEF>() - 2usize];
    ["Offset of field: IMAGE_AUX_SYMBOL_TOKEN_DEF::bAuxType"]
        [::std::mem::offset_of!(IMAGE_AUX_SYMBOL_TOKEN_DEF, bAuxType) - 0usize];
    ["Offset of field: IMAGE_AUX_SYMBOL_TOKEN_DEF::bReserved"]
        [::std::mem::offset_of!(IMAGE_AUX_SYMBOL_TOKEN_DEF, bReserved) - 1usize];
    ["Offset of field: IMAGE_AUX_SYMBOL_TOKEN_DEF::SymbolTableIndex"]
        [::std::mem::offset_of!(IMAGE_AUX_SYMBOL_TOKEN_DEF, SymbolTableIndex) - 2usize];
    ["Offset of field: IMAGE_AUX_SYMBOL_TOKEN_DEF::rgbReserved"]
        [::std::mem::offset_of!(IMAGE_AUX_SYMBOL_TOKEN_DEF, rgbReserved) - 6usize];
};
pub type PIMAGE_AUX_SYMBOL_TOKEN_DEF = *mut IMAGE_AUX_SYMBOL_TOKEN_DEF;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL {
    pub Sym: _IMAGE_AUX_SYMBOL__bindgen_ty_1,
    pub File: _IMAGE_AUX_SYMBOL__bindgen_ty_2,
    pub Section: _IMAGE_AUX_SYMBOL__bindgen_ty_3,
    pub TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
    pub CRC: _IMAGE_AUX_SYMBOL__bindgen_ty_4,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1 {
    pub TagIndex: DWORD,
    pub Misc: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1,
    pub FcnAry: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2,
    pub TvIndex: WORD,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1 {
    pub LnSz: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub TotalSize: DWORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub Linenumber: WORD,
    pub Size: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>()
            - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::Linenumber"][::std::mem::offset_of!(
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        Linenumber
    )
        - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1::Size"][::std::mem::offset_of!(
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
        Size
    )
        - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1::LnSz"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1, LnSz) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1::TotalSize"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1, TotalSize) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2 {
    pub Function: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    pub Array: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 {
    pub PointerToLinenumber: DWORD,
    pub PointerToNextFunction: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1>()
            - 2usize];
    [
        "Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::PointerToLinenumber",
    ][::std::mem::offset_of!(
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        PointerToLinenumber
    ) - 0usize];
    [
        "Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1::PointerToNextFunction",
    ][::std::mem::offset_of!(
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1,
        PointerToNextFunction
    ) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 {
    pub Dimension: [WORD; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2"][::std::mem::size_of::<
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
    >() - 8usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2>()
            - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2::Dimension"][::std::mem::offset_of!(
        _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2,
        Dimension
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2::Function"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2, Function) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2::Array"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2, Array) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1>() - 18usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1::TagIndex"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1, TagIndex) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1::Misc"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1, Misc) - 4usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1::FcnAry"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1, FcnAry) - 8usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_1::TvIndex"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_1, TvIndex) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_2 {
    pub Name: [BYTE; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_2"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_2>() - 18usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_2"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_2>() - 1usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_2::Name"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_2, Name) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_3 {
    pub Length: DWORD,
    pub NumberOfRelocations: WORD,
    pub NumberOfLinenumbers: WORD,
    pub CheckSum: DWORD,
    pub Number: SHORT,
    pub Selection: BYTE,
    pub bReserved: BYTE,
    pub HighNumber: SHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_3"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_3>() - 18usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_3"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_3>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::Length"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, Length) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::NumberOfRelocations"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, NumberOfRelocations) - 4usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::NumberOfLinenumbers"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, NumberOfLinenumbers) - 6usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::CheckSum"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, CheckSum) - 8usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::Number"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, Number) - 12usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::Selection"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, Selection) - 14usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::bReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, bReserved) - 15usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_3::HighNumber"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_3, HighNumber) - 16usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL__bindgen_ty_4 {
    pub crc: DWORD,
    pub rgbReserved: [BYTE; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL__bindgen_ty_4"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_4>() - 18usize];
    ["Alignment of _IMAGE_AUX_SYMBOL__bindgen_ty_4"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL__bindgen_ty_4>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_4::crc"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_4, crc) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL__bindgen_ty_4::rgbReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL__bindgen_ty_4, rgbReserved) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL"][::std::mem::size_of::<_IMAGE_AUX_SYMBOL>() - 18usize];
    ["Alignment of _IMAGE_AUX_SYMBOL"][::std::mem::align_of::<_IMAGE_AUX_SYMBOL>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL::Sym"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL, Sym) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL::File"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL, File) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL::Section"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL, Section) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL::TokenDef"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL, TokenDef) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL::CRC"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL, CRC) - 0usize];
};
pub type IMAGE_AUX_SYMBOL = _IMAGE_AUX_SYMBOL;
pub type PIMAGE_AUX_SYMBOL = *mut IMAGE_AUX_SYMBOL;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_AUX_SYMBOL_EX {
    pub Sym: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1,
    pub File: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2,
    pub Section: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3,
    pub __bindgen_anon_1: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4,
    pub CRC: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5,
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1 {
    pub WeakDefaultSymIndex: DWORD,
    pub WeakSearchType: DWORD,
    pub rgbReserved: [BYTE; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1>() - 20usize];
    ["Alignment of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1::WeakDefaultSymIndex"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1, WeakDefaultSymIndex) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1::WeakSearchType"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1, WeakSearchType) - 4usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1::rgbReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_1, rgbReserved) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2 {
    pub Name: [BYTE; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2>() - 20usize];
    ["Alignment of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2>() - 1usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2::Name"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_2, Name) - 0usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3 {
    pub Length: DWORD,
    pub NumberOfRelocations: WORD,
    pub NumberOfLinenumbers: WORD,
    pub CheckSum: DWORD,
    pub Number: SHORT,
    pub Selection: BYTE,
    pub bReserved: BYTE,
    pub HighNumber: SHORT,
    pub rgbReserved: [BYTE; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3>() - 20usize];
    ["Alignment of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::Length"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, Length) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::NumberOfRelocations"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, NumberOfRelocations) - 4usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::NumberOfLinenumbers"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, NumberOfLinenumbers) - 6usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::CheckSum"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, CheckSum) - 8usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::Number"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, Number) - 12usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::Selection"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, Selection) - 14usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::bReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, bReserved) - 15usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::HighNumber"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, HighNumber) - 16usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3::rgbReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_3, rgbReserved) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4 {
    pub TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
    pub rgbReserved: [BYTE; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4>() - 20usize];
    ["Alignment of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4::TokenDef"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4, TokenDef) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4::rgbReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_4, rgbReserved) - 18usize];
};
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5 {
    pub crc: DWORD,
    pub rgbReserved: [BYTE; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5"]
        [::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5>() - 20usize];
    ["Alignment of _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5"]
        [::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5::crc"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5, crc) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5::rgbReserved"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX__bindgen_ty_5, rgbReserved) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_AUX_SYMBOL_EX"][::std::mem::size_of::<_IMAGE_AUX_SYMBOL_EX>() - 20usize];
    ["Alignment of _IMAGE_AUX_SYMBOL_EX"][::std::mem::align_of::<_IMAGE_AUX_SYMBOL_EX>() - 2usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX::Sym"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX, Sym) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX::File"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX, File) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX::Section"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX, Section) - 0usize];
    ["Offset of field: _IMAGE_AUX_SYMBOL_EX::CRC"]
        [::std::mem::offset_of!(_IMAGE_AUX_SYMBOL_EX, CRC) - 0usize];
};
pub type IMAGE_AUX_SYMBOL_EX = _IMAGE_AUX_SYMBOL_EX;
pub type PIMAGE_AUX_SYMBOL_EX = *mut IMAGE_AUX_SYMBOL_EX;
pub const IMAGE_AUX_SYMBOL_TYPE_IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF: IMAGE_AUX_SYMBOL_TYPE = 1;
pub type IMAGE_AUX_SYMBOL_TYPE = ::std::os::raw::c_int;
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub struct _IMAGE_RELOCATION {
    pub __bindgen_anon_1: _IMAGE_RELOCATION__bindgen_ty_1,
    pub SymbolTableIndex: DWORD,
    pub Type: WORD,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_RELOCATION__bindgen_ty_1 {
    pub VirtualAddress: DWORD,
    pub RelocCount: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RELOCATION__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_RELOCATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_RELOCATION__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_RELOCATION__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_RELOCATION__bindgen_ty_1::VirtualAddress"]
        [::std::mem::offset_of!(_IMAGE_RELOCATION__bindgen_ty_1, VirtualAddress) - 0usize];
    ["Offset of field: _IMAGE_RELOCATION__bindgen_ty_1::RelocCount"]
        [::std::mem::offset_of!(_IMAGE_RELOCATION__bindgen_ty_1, RelocCount) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RELOCATION"][::std::mem::size_of::<_IMAGE_RELOCATION>() - 10usize];
    ["Alignment of _IMAGE_RELOCATION"][::std::mem::align_of::<_IMAGE_RELOCATION>() - 2usize];
    ["Offset of field: _IMAGE_RELOCATION::SymbolTableIndex"]
        [::std::mem::offset_of!(_IMAGE_RELOCATION, SymbolTableIndex) - 4usize];
    ["Offset of field: _IMAGE_RELOCATION::Type"]
        [::std::mem::offset_of!(_IMAGE_RELOCATION, Type) - 8usize];
};
pub type IMAGE_RELOCATION = _IMAGE_RELOCATION;
pub type PIMAGE_RELOCATION = *mut IMAGE_RELOCATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_LINENUMBER {
    pub Type: _IMAGE_LINENUMBER__bindgen_ty_1,
    pub Linenumber: WORD,
}
#[repr(C, packed(2))]
#[derive(Copy, Clone)]
pub union _IMAGE_LINENUMBER__bindgen_ty_1 {
    pub SymbolTableIndex: DWORD,
    pub VirtualAddress: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_LINENUMBER__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_LINENUMBER__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_LINENUMBER__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_LINENUMBER__bindgen_ty_1>() - 2usize];
    ["Offset of field: _IMAGE_LINENUMBER__bindgen_ty_1::SymbolTableIndex"]
        [::std::mem::offset_of!(_IMAGE_LINENUMBER__bindgen_ty_1, SymbolTableIndex) - 0usize];
    ["Offset of field: _IMAGE_LINENUMBER__bindgen_ty_1::VirtualAddress"]
        [::std::mem::offset_of!(_IMAGE_LINENUMBER__bindgen_ty_1, VirtualAddress) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_LINENUMBER"][::std::mem::size_of::<_IMAGE_LINENUMBER>() - 6usize];
    ["Alignment of _IMAGE_LINENUMBER"][::std::mem::align_of::<_IMAGE_LINENUMBER>() - 2usize];
    ["Offset of field: _IMAGE_LINENUMBER::Type"]
        [::std::mem::offset_of!(_IMAGE_LINENUMBER, Type) - 0usize];
    ["Offset of field: _IMAGE_LINENUMBER::Linenumber"]
        [::std::mem::offset_of!(_IMAGE_LINENUMBER, Linenumber) - 4usize];
};
pub type IMAGE_LINENUMBER = _IMAGE_LINENUMBER;
pub type PIMAGE_LINENUMBER = *mut IMAGE_LINENUMBER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BASE_RELOCATION {
    pub VirtualAddress: DWORD,
    pub SizeOfBlock: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_BASE_RELOCATION"][::std::mem::size_of::<_IMAGE_BASE_RELOCATION>() - 8usize];
    ["Alignment of _IMAGE_BASE_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_BASE_RELOCATION>() - 4usize];
    ["Offset of field: _IMAGE_BASE_RELOCATION::VirtualAddress"]
        [::std::mem::offset_of!(_IMAGE_BASE_RELOCATION, VirtualAddress) - 0usize];
    ["Offset of field: _IMAGE_BASE_RELOCATION::SizeOfBlock"]
        [::std::mem::offset_of!(_IMAGE_BASE_RELOCATION, SizeOfBlock) - 4usize];
};
pub type IMAGE_BASE_RELOCATION = _IMAGE_BASE_RELOCATION;
pub type PIMAGE_BASE_RELOCATION = *mut IMAGE_BASE_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    pub Name: [BYTE; 16usize],
    pub Date: [BYTE; 12usize],
    pub UserID: [BYTE; 6usize],
    pub GroupID: [BYTE; 6usize],
    pub Mode: [BYTE; 8usize],
    pub Size: [BYTE; 10usize],
    pub EndHeader: [BYTE; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARCHIVE_MEMBER_HEADER"]
        [::std::mem::size_of::<_IMAGE_ARCHIVE_MEMBER_HEADER>() - 60usize];
    ["Alignment of _IMAGE_ARCHIVE_MEMBER_HEADER"]
        [::std::mem::align_of::<_IMAGE_ARCHIVE_MEMBER_HEADER>() - 1usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::Name"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, Name) - 0usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::Date"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, Date) - 16usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::UserID"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, UserID) - 28usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::GroupID"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, GroupID) - 34usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::Mode"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, Mode) - 40usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::Size"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, Size) - 48usize];
    ["Offset of field: _IMAGE_ARCHIVE_MEMBER_HEADER::EndHeader"]
        [::std::mem::offset_of!(_IMAGE_ARCHIVE_MEMBER_HEADER, EndHeader) - 58usize];
};
pub type IMAGE_ARCHIVE_MEMBER_HEADER = _IMAGE_ARCHIVE_MEMBER_HEADER;
pub type PIMAGE_ARCHIVE_MEMBER_HEADER = *mut _IMAGE_ARCHIVE_MEMBER_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_EXPORT_DIRECTORY {
    pub Characteristics: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub Name: DWORD,
    pub Base: DWORD,
    pub NumberOfFunctions: DWORD,
    pub NumberOfNames: DWORD,
    pub AddressOfFunctions: DWORD,
    pub AddressOfNames: DWORD,
    pub AddressOfNameOrdinals: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_EXPORT_DIRECTORY"][::std::mem::size_of::<_IMAGE_EXPORT_DIRECTORY>() - 40usize];
    ["Alignment of _IMAGE_EXPORT_DIRECTORY"]
        [::std::mem::align_of::<_IMAGE_EXPORT_DIRECTORY>() - 4usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, Characteristics) - 0usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::MajorVersion"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, MajorVersion) - 8usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::MinorVersion"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, MinorVersion) - 10usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::Name"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, Name) - 12usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::Base"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, Base) - 16usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::NumberOfFunctions"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, NumberOfFunctions) - 20usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::NumberOfNames"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, NumberOfNames) - 24usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::AddressOfFunctions"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, AddressOfFunctions) - 28usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::AddressOfNames"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, AddressOfNames) - 32usize];
    ["Offset of field: _IMAGE_EXPORT_DIRECTORY::AddressOfNameOrdinals"]
        [::std::mem::offset_of!(_IMAGE_EXPORT_DIRECTORY, AddressOfNameOrdinals) - 36usize];
};
pub type IMAGE_EXPORT_DIRECTORY = _IMAGE_EXPORT_DIRECTORY;
pub type PIMAGE_EXPORT_DIRECTORY = *mut _IMAGE_EXPORT_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_IMPORT_BY_NAME {
    pub Hint: WORD,
    pub Name: [CHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_IMPORT_BY_NAME"][::std::mem::size_of::<_IMAGE_IMPORT_BY_NAME>() - 4usize];
    ["Alignment of _IMAGE_IMPORT_BY_NAME"]
        [::std::mem::align_of::<_IMAGE_IMPORT_BY_NAME>() - 2usize];
    ["Offset of field: _IMAGE_IMPORT_BY_NAME::Hint"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_BY_NAME, Hint) - 0usize];
    ["Offset of field: _IMAGE_IMPORT_BY_NAME::Name"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_BY_NAME, Name) - 2usize];
};
pub type IMAGE_IMPORT_BY_NAME = _IMAGE_IMPORT_BY_NAME;
pub type PIMAGE_IMPORT_BY_NAME = *mut _IMAGE_IMPORT_BY_NAME;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_THUNK_DATA64 {
    pub u1: _IMAGE_THUNK_DATA64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_THUNK_DATA64__bindgen_ty_1 {
    pub ForwarderString: ULONGLONG,
    pub Function: ULONGLONG,
    pub Ordinal: ULONGLONG,
    pub AddressOfData: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_THUNK_DATA64__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_THUNK_DATA64__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_THUNK_DATA64__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_THUNK_DATA64__bindgen_ty_1>() - 8usize];
    ["Offset of field: _IMAGE_THUNK_DATA64__bindgen_ty_1::ForwarderString"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA64__bindgen_ty_1, ForwarderString) - 0usize];
    ["Offset of field: _IMAGE_THUNK_DATA64__bindgen_ty_1::Function"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA64__bindgen_ty_1, Function) - 0usize];
    ["Offset of field: _IMAGE_THUNK_DATA64__bindgen_ty_1::Ordinal"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA64__bindgen_ty_1, Ordinal) - 0usize];
    ["Offset of field: _IMAGE_THUNK_DATA64__bindgen_ty_1::AddressOfData"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA64__bindgen_ty_1, AddressOfData) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_THUNK_DATA64"][::std::mem::size_of::<_IMAGE_THUNK_DATA64>() - 8usize];
    ["Alignment of _IMAGE_THUNK_DATA64"][::std::mem::align_of::<_IMAGE_THUNK_DATA64>() - 8usize];
    ["Offset of field: _IMAGE_THUNK_DATA64::u1"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA64, u1) - 0usize];
};
pub type IMAGE_THUNK_DATA64 = _IMAGE_THUNK_DATA64;
pub type PIMAGE_THUNK_DATA64 = *mut IMAGE_THUNK_DATA64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_THUNK_DATA32 {
    pub u1: _IMAGE_THUNK_DATA32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_THUNK_DATA32__bindgen_ty_1 {
    pub ForwarderString: DWORD,
    pub Function: DWORD,
    pub Ordinal: DWORD,
    pub AddressOfData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_THUNK_DATA32__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_THUNK_DATA32__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_THUNK_DATA32__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_THUNK_DATA32__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_THUNK_DATA32__bindgen_ty_1::ForwarderString"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA32__bindgen_ty_1, ForwarderString) - 0usize];
    ["Offset of field: _IMAGE_THUNK_DATA32__bindgen_ty_1::Function"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA32__bindgen_ty_1, Function) - 0usize];
    ["Offset of field: _IMAGE_THUNK_DATA32__bindgen_ty_1::Ordinal"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA32__bindgen_ty_1, Ordinal) - 0usize];
    ["Offset of field: _IMAGE_THUNK_DATA32__bindgen_ty_1::AddressOfData"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA32__bindgen_ty_1, AddressOfData) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_THUNK_DATA32"][::std::mem::size_of::<_IMAGE_THUNK_DATA32>() - 4usize];
    ["Alignment of _IMAGE_THUNK_DATA32"][::std::mem::align_of::<_IMAGE_THUNK_DATA32>() - 4usize];
    ["Offset of field: _IMAGE_THUNK_DATA32::u1"]
        [::std::mem::offset_of!(_IMAGE_THUNK_DATA32, u1) - 0usize];
};
pub type IMAGE_THUNK_DATA32 = _IMAGE_THUNK_DATA32;
pub type PIMAGE_THUNK_DATA32 = *mut IMAGE_THUNK_DATA32;
pub type PIMAGE_TLS_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(DllHandle: PVOID, Reason: DWORD, Reserved: PVOID)>;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY64 {
    pub StartAddressOfRawData: ULONGLONG,
    pub EndAddressOfRawData: ULONGLONG,
    pub AddressOfIndex: ULONGLONG,
    pub AddressOfCallBacks: ULONGLONG,
    pub SizeOfZeroFill: DWORD,
    pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_TLS_DIRECTORY64__bindgen_ty_1 {
    pub Characteristics: DWORD,
    pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Reserved0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Alignment(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_Alignment(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Alignment_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Alignment_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved1_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved1_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Reserved0: DWORD,
        Alignment: DWORD,
        Reserved1: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
            Reserved0 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let Alignment: u32 = unsafe { ::std::mem::transmute(Alignment) };
            Alignment as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
            Reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_TLS_DIRECTORY64__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_TLS_DIRECTORY64__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_TLS_DIRECTORY64__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY64__bindgen_ty_1::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY64__bindgen_ty_1, Characteristics) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_TLS_DIRECTORY64"][::std::mem::size_of::<_IMAGE_TLS_DIRECTORY64>() - 40usize];
    ["Alignment of _IMAGE_TLS_DIRECTORY64"]
        [::std::mem::align_of::<_IMAGE_TLS_DIRECTORY64>() - 4usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY64::StartAddressOfRawData"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY64, StartAddressOfRawData) - 0usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY64::EndAddressOfRawData"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY64, EndAddressOfRawData) - 8usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY64::AddressOfIndex"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY64, AddressOfIndex) - 16usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY64::AddressOfCallBacks"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY64, AddressOfCallBacks) - 24usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY64::SizeOfZeroFill"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY64, SizeOfZeroFill) - 32usize];
};
pub type IMAGE_TLS_DIRECTORY64 = _IMAGE_TLS_DIRECTORY64;
pub type PIMAGE_TLS_DIRECTORY64 = *mut IMAGE_TLS_DIRECTORY64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY32 {
    pub StartAddressOfRawData: DWORD,
    pub EndAddressOfRawData: DWORD,
    pub AddressOfIndex: DWORD,
    pub AddressOfCallBacks: DWORD,
    pub SizeOfZeroFill: DWORD,
    pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY32__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_TLS_DIRECTORY32__bindgen_ty_1 {
    pub Characteristics: DWORD,
    pub __bindgen_anon_1: _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Reserved0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                20u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                20u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Alignment(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_Alignment(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Alignment_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Alignment_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved1_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved1_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Reserved0: DWORD,
        Alignment: DWORD,
        Reserved1: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let Reserved0: u32 = unsafe { ::std::mem::transmute(Reserved0) };
            Reserved0 as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let Alignment: u32 = unsafe { ::std::mem::transmute(Alignment) };
            Alignment as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
            Reserved1 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_TLS_DIRECTORY32__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_TLS_DIRECTORY32__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_TLS_DIRECTORY32__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY32__bindgen_ty_1::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY32__bindgen_ty_1, Characteristics) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_TLS_DIRECTORY32"][::std::mem::size_of::<_IMAGE_TLS_DIRECTORY32>() - 24usize];
    ["Alignment of _IMAGE_TLS_DIRECTORY32"]
        [::std::mem::align_of::<_IMAGE_TLS_DIRECTORY32>() - 4usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY32::StartAddressOfRawData"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY32, StartAddressOfRawData) - 0usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY32::EndAddressOfRawData"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY32, EndAddressOfRawData) - 4usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY32::AddressOfIndex"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY32, AddressOfIndex) - 8usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY32::AddressOfCallBacks"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY32, AddressOfCallBacks) - 12usize];
    ["Offset of field: _IMAGE_TLS_DIRECTORY32::SizeOfZeroFill"]
        [::std::mem::offset_of!(_IMAGE_TLS_DIRECTORY32, SizeOfZeroFill) - 16usize];
};
pub type IMAGE_TLS_DIRECTORY32 = _IMAGE_TLS_DIRECTORY32;
pub type PIMAGE_TLS_DIRECTORY32 = *mut IMAGE_TLS_DIRECTORY32;
pub type IMAGE_THUNK_DATA = IMAGE_THUNK_DATA64;
pub type PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA64;
pub type IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY64;
pub type PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_IMPORT_DESCRIPTOR {
    pub __bindgen_anon_1: _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1,
    pub TimeDateStamp: DWORD,
    pub ForwarderChain: DWORD,
    pub Name: DWORD,
    pub FirstThunk: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1 {
    pub Characteristics: DWORD,
    pub OriginalFirstThunk: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1, Characteristics) - 0usize];
    ["Offset of field: _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1::OriginalFirstThunk"][::std::mem::offset_of!(
        _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1,
        OriginalFirstThunk
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_IMPORT_DESCRIPTOR"]
        [::std::mem::size_of::<_IMAGE_IMPORT_DESCRIPTOR>() - 20usize];
    ["Alignment of _IMAGE_IMPORT_DESCRIPTOR"]
        [::std::mem::align_of::<_IMAGE_IMPORT_DESCRIPTOR>() - 4usize];
    ["Offset of field: _IMAGE_IMPORT_DESCRIPTOR::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_DESCRIPTOR, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_IMPORT_DESCRIPTOR::ForwarderChain"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_DESCRIPTOR, ForwarderChain) - 8usize];
    ["Offset of field: _IMAGE_IMPORT_DESCRIPTOR::Name"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_DESCRIPTOR, Name) - 12usize];
    ["Offset of field: _IMAGE_IMPORT_DESCRIPTOR::FirstThunk"]
        [::std::mem::offset_of!(_IMAGE_IMPORT_DESCRIPTOR, FirstThunk) - 16usize];
};
pub type IMAGE_IMPORT_DESCRIPTOR = _IMAGE_IMPORT_DESCRIPTOR;
pub type PIMAGE_IMPORT_DESCRIPTOR = *mut IMAGE_IMPORT_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    pub TimeDateStamp: DWORD,
    pub OffsetModuleName: WORD,
    pub NumberOfModuleForwarderRefs: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_BOUND_IMPORT_DESCRIPTOR"]
        [::std::mem::size_of::<_IMAGE_BOUND_IMPORT_DESCRIPTOR>() - 8usize];
    ["Alignment of _IMAGE_BOUND_IMPORT_DESCRIPTOR"]
        [::std::mem::align_of::<_IMAGE_BOUND_IMPORT_DESCRIPTOR>() - 4usize];
    ["Offset of field: _IMAGE_BOUND_IMPORT_DESCRIPTOR::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_BOUND_IMPORT_DESCRIPTOR, TimeDateStamp) - 0usize];
    ["Offset of field: _IMAGE_BOUND_IMPORT_DESCRIPTOR::OffsetModuleName"]
        [::std::mem::offset_of!(_IMAGE_BOUND_IMPORT_DESCRIPTOR, OffsetModuleName) - 4usize];
    ["Offset of field: _IMAGE_BOUND_IMPORT_DESCRIPTOR::NumberOfModuleForwarderRefs"][::std::mem::offset_of!(
        _IMAGE_BOUND_IMPORT_DESCRIPTOR,
        NumberOfModuleForwarderRefs
    ) - 6usize];
};
pub type IMAGE_BOUND_IMPORT_DESCRIPTOR = _IMAGE_BOUND_IMPORT_DESCRIPTOR;
pub type PIMAGE_BOUND_IMPORT_DESCRIPTOR = *mut _IMAGE_BOUND_IMPORT_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BOUND_FORWARDER_REF {
    pub TimeDateStamp: DWORD,
    pub OffsetModuleName: WORD,
    pub Reserved: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_BOUND_FORWARDER_REF"]
        [::std::mem::size_of::<_IMAGE_BOUND_FORWARDER_REF>() - 8usize];
    ["Alignment of _IMAGE_BOUND_FORWARDER_REF"]
        [::std::mem::align_of::<_IMAGE_BOUND_FORWARDER_REF>() - 4usize];
    ["Offset of field: _IMAGE_BOUND_FORWARDER_REF::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_BOUND_FORWARDER_REF, TimeDateStamp) - 0usize];
    ["Offset of field: _IMAGE_BOUND_FORWARDER_REF::OffsetModuleName"]
        [::std::mem::offset_of!(_IMAGE_BOUND_FORWARDER_REF, OffsetModuleName) - 4usize];
    ["Offset of field: _IMAGE_BOUND_FORWARDER_REF::Reserved"]
        [::std::mem::offset_of!(_IMAGE_BOUND_FORWARDER_REF, Reserved) - 6usize];
};
pub type IMAGE_BOUND_FORWARDER_REF = _IMAGE_BOUND_FORWARDER_REF;
pub type PIMAGE_BOUND_FORWARDER_REF = *mut _IMAGE_BOUND_FORWARDER_REF;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    pub Attributes: _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1,
    pub DllNameRVA: DWORD,
    pub ModuleHandleRVA: DWORD,
    pub ImportAddressTableRVA: DWORD,
    pub ImportNameTableRVA: DWORD,
    pub BoundImportAddressTableRVA: DWORD,
    pub UnloadInformationTableRVA: DWORD,
    pub TimeDateStamp: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1 {
    pub AllAttributes: DWORD,
    pub __bindgen_anon_1: _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn RvaBased(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_RvaBased(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RvaBased_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RvaBased_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ReservedAttributes(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_ReservedAttributes(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ReservedAttributes_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ReservedAttributes_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RvaBased: DWORD,
        ReservedAttributes: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let RvaBased: u32 = unsafe { ::std::mem::transmute(RvaBased) };
            RvaBased as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let ReservedAttributes: u32 = unsafe { ::std::mem::transmute(ReservedAttributes) };
            ReservedAttributes as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1::AllAttributes"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1, AllAttributes) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DELAYLOAD_DESCRIPTOR"]
        [::std::mem::size_of::<_IMAGE_DELAYLOAD_DESCRIPTOR>() - 32usize];
    ["Alignment of _IMAGE_DELAYLOAD_DESCRIPTOR"]
        [::std::mem::align_of::<_IMAGE_DELAYLOAD_DESCRIPTOR>() - 4usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::Attributes"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, Attributes) - 0usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::DllNameRVA"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, DllNameRVA) - 4usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::ModuleHandleRVA"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, ModuleHandleRVA) - 8usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::ImportAddressTableRVA"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, ImportAddressTableRVA) - 12usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::ImportNameTableRVA"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, ImportNameTableRVA) - 16usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::BoundImportAddressTableRVA"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, BoundImportAddressTableRVA) - 20usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::UnloadInformationTableRVA"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, UnloadInformationTableRVA) - 24usize];
    ["Offset of field: _IMAGE_DELAYLOAD_DESCRIPTOR::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_DELAYLOAD_DESCRIPTOR, TimeDateStamp) - 28usize];
};
pub type IMAGE_DELAYLOAD_DESCRIPTOR = _IMAGE_DELAYLOAD_DESCRIPTOR;
pub type PIMAGE_DELAYLOAD_DESCRIPTOR = *mut _IMAGE_DELAYLOAD_DESCRIPTOR;
pub type PCIMAGE_DELAYLOAD_DESCRIPTOR = *const IMAGE_DELAYLOAD_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY {
    pub Characteristics: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub NumberOfNamedEntries: WORD,
    pub NumberOfIdEntries: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY>() - 16usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY>() - 4usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY, Characteristics) - 0usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY::MajorVersion"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY, MajorVersion) - 8usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY::MinorVersion"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY, MinorVersion) - 10usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY::NumberOfNamedEntries"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY, NumberOfNamedEntries) - 12usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY::NumberOfIdEntries"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY, NumberOfIdEntries) - 14usize];
};
pub type IMAGE_RESOURCE_DIRECTORY = _IMAGE_RESOURCE_DIRECTORY;
pub type PIMAGE_RESOURCE_DIRECTORY = *mut _IMAGE_RESOURCE_DIRECTORY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    pub __bindgen_anon_1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1,
    pub __bindgen_anon_2: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1 {
    pub __bindgen_anon_1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1,
    pub Name: DWORD,
    pub Id: WORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn NameOffset(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_NameOffset(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NameOffset_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_NameOffset_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn NameIsString(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_NameIsString(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NameIsString_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_NameIsString_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        NameOffset: DWORD,
        NameIsString: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let NameOffset: u32 = unsafe { ::std::mem::transmute(NameOffset) };
            NameOffset as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let NameIsString: u32 = unsafe { ::std::mem::transmute(NameIsString) };
            NameIsString as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1::Name"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1, Name) - 0usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1::Id"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1, Id) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2 {
    pub OffsetToData: DWORD,
    pub __bindgen_anon_1: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1"][::std::mem::size_of::<
        _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1>()
            - 4usize];
};
impl _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn OffsetToDirectory(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_OffsetToDirectory(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn OffsetToDirectory_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_OffsetToDirectory_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DataIsDirectory(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DataIsDirectory(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DataIsDirectory_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DataIsDirectory_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        OffsetToDirectory: DWORD,
        DataIsDirectory: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let OffsetToDirectory: u32 = unsafe { ::std::mem::transmute(OffsetToDirectory) };
            OffsetToDirectory as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let DataIsDirectory: u32 = unsafe { ::std::mem::transmute(DataIsDirectory) };
            DataIsDirectory as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2>() - 4usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2>() - 4usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2::OffsetToData"][::std::mem::offset_of!(
        _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2,
        OffsetToData
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY_ENTRY"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY>() - 8usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY_ENTRY"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_ENTRY>() - 4usize];
};
pub type IMAGE_RESOURCE_DIRECTORY_ENTRY = _IMAGE_RESOURCE_DIRECTORY_ENTRY;
pub type PIMAGE_RESOURCE_DIRECTORY_ENTRY = *mut _IMAGE_RESOURCE_DIRECTORY_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    pub Length: WORD,
    pub NameString: [CHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIRECTORY_STRING"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DIRECTORY_STRING>() - 4usize];
    ["Alignment of _IMAGE_RESOURCE_DIRECTORY_STRING"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIRECTORY_STRING>() - 2usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY_STRING::Length"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY_STRING, Length) - 0usize];
    ["Offset of field: _IMAGE_RESOURCE_DIRECTORY_STRING::NameString"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIRECTORY_STRING, NameString) - 2usize];
};
pub type IMAGE_RESOURCE_DIRECTORY_STRING = _IMAGE_RESOURCE_DIRECTORY_STRING;
pub type PIMAGE_RESOURCE_DIRECTORY_STRING = *mut _IMAGE_RESOURCE_DIRECTORY_STRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DIR_STRING_U {
    pub Length: WORD,
    pub NameString: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DIR_STRING_U"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DIR_STRING_U>() - 4usize];
    ["Alignment of _IMAGE_RESOURCE_DIR_STRING_U"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DIR_STRING_U>() - 2usize];
    ["Offset of field: _IMAGE_RESOURCE_DIR_STRING_U::Length"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIR_STRING_U, Length) - 0usize];
    ["Offset of field: _IMAGE_RESOURCE_DIR_STRING_U::NameString"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DIR_STRING_U, NameString) - 2usize];
};
pub type IMAGE_RESOURCE_DIR_STRING_U = _IMAGE_RESOURCE_DIR_STRING_U;
pub type PIMAGE_RESOURCE_DIR_STRING_U = *mut _IMAGE_RESOURCE_DIR_STRING_U;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_RESOURCE_DATA_ENTRY {
    pub OffsetToData: DWORD,
    pub Size: DWORD,
    pub CodePage: DWORD,
    pub Reserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RESOURCE_DATA_ENTRY"]
        [::std::mem::size_of::<_IMAGE_RESOURCE_DATA_ENTRY>() - 16usize];
    ["Alignment of _IMAGE_RESOURCE_DATA_ENTRY"]
        [::std::mem::align_of::<_IMAGE_RESOURCE_DATA_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_RESOURCE_DATA_ENTRY::OffsetToData"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DATA_ENTRY, OffsetToData) - 0usize];
    ["Offset of field: _IMAGE_RESOURCE_DATA_ENTRY::Size"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DATA_ENTRY, Size) - 4usize];
    ["Offset of field: _IMAGE_RESOURCE_DATA_ENTRY::CodePage"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DATA_ENTRY, CodePage) - 8usize];
    ["Offset of field: _IMAGE_RESOURCE_DATA_ENTRY::Reserved"]
        [::std::mem::offset_of!(_IMAGE_RESOURCE_DATA_ENTRY, Reserved) - 12usize];
};
pub type IMAGE_RESOURCE_DATA_ENTRY = _IMAGE_RESOURCE_DATA_ENTRY;
pub type PIMAGE_RESOURCE_DATA_ENTRY = *mut _IMAGE_RESOURCE_DATA_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
    pub Flags: WORD,
    pub Catalog: WORD,
    pub CatalogOffset: DWORD,
    pub Reserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_LOAD_CONFIG_CODE_INTEGRITY"]
        [::std::mem::size_of::<_IMAGE_LOAD_CONFIG_CODE_INTEGRITY>() - 12usize];
    ["Alignment of _IMAGE_LOAD_CONFIG_CODE_INTEGRITY"]
        [::std::mem::align_of::<_IMAGE_LOAD_CONFIG_CODE_INTEGRITY>() - 4usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_CODE_INTEGRITY::Flags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY, Flags) - 0usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_CODE_INTEGRITY::Catalog"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY, Catalog) - 2usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_CODE_INTEGRITY::CatalogOffset"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY, CatalogOffset) - 4usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_CODE_INTEGRITY::Reserved"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_CODE_INTEGRITY, Reserved) - 8usize];
};
pub type IMAGE_LOAD_CONFIG_CODE_INTEGRITY = _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
pub type PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = *mut _IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
    pub Version: DWORD,
    pub Size: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DYNAMIC_RELOCATION_TABLE"]
        [::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION_TABLE>() - 8usize];
    ["Alignment of _IMAGE_DYNAMIC_RELOCATION_TABLE"]
        [::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION_TABLE>() - 4usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION_TABLE::Version"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION_TABLE, Version) - 0usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION_TABLE::Size"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION_TABLE, Size) - 4usize];
};
pub type IMAGE_DYNAMIC_RELOCATION_TABLE = _IMAGE_DYNAMIC_RELOCATION_TABLE;
pub type PIMAGE_DYNAMIC_RELOCATION_TABLE = *mut _IMAGE_DYNAMIC_RELOCATION_TABLE;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION32 {
    pub Symbol: DWORD,
    pub BaseRelocSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DYNAMIC_RELOCATION32"]
        [::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION32>() - 8usize];
    ["Alignment of _IMAGE_DYNAMIC_RELOCATION32"]
        [::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION32>() - 1usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32::Symbol"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32, Symbol) - 0usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32::BaseRelocSize"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32, BaseRelocSize) - 4usize];
};
pub type IMAGE_DYNAMIC_RELOCATION32 = _IMAGE_DYNAMIC_RELOCATION32;
pub type PIMAGE_DYNAMIC_RELOCATION32 = *mut _IMAGE_DYNAMIC_RELOCATION32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION64 {
    pub Symbol: ULONGLONG,
    pub BaseRelocSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DYNAMIC_RELOCATION64"]
        [::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION64>() - 12usize];
    ["Alignment of _IMAGE_DYNAMIC_RELOCATION64"]
        [::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION64>() - 1usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64::Symbol"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64, Symbol) - 0usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64::BaseRelocSize"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64, BaseRelocSize) - 8usize];
};
pub type IMAGE_DYNAMIC_RELOCATION64 = _IMAGE_DYNAMIC_RELOCATION64;
pub type PIMAGE_DYNAMIC_RELOCATION64 = *mut _IMAGE_DYNAMIC_RELOCATION64;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
    pub HeaderSize: DWORD,
    pub FixupInfoSize: DWORD,
    pub Symbol: DWORD,
    pub SymbolGroup: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DYNAMIC_RELOCATION32_V2"]
        [::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION32_V2>() - 20usize];
    ["Alignment of _IMAGE_DYNAMIC_RELOCATION32_V2"]
        [::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION32_V2>() - 1usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32_V2::HeaderSize"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32_V2, HeaderSize) - 0usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32_V2::FixupInfoSize"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32_V2, FixupInfoSize) - 4usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32_V2::Symbol"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32_V2, Symbol) - 8usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32_V2::SymbolGroup"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32_V2, SymbolGroup) - 12usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION32_V2::Flags"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION32_V2, Flags) - 16usize];
};
pub type IMAGE_DYNAMIC_RELOCATION32_V2 = _IMAGE_DYNAMIC_RELOCATION32_V2;
pub type PIMAGE_DYNAMIC_RELOCATION32_V2 = *mut _IMAGE_DYNAMIC_RELOCATION32_V2;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
    pub HeaderSize: DWORD,
    pub FixupInfoSize: DWORD,
    pub Symbol: ULONGLONG,
    pub SymbolGroup: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DYNAMIC_RELOCATION64_V2"]
        [::std::mem::size_of::<_IMAGE_DYNAMIC_RELOCATION64_V2>() - 24usize];
    ["Alignment of _IMAGE_DYNAMIC_RELOCATION64_V2"]
        [::std::mem::align_of::<_IMAGE_DYNAMIC_RELOCATION64_V2>() - 1usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64_V2::HeaderSize"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64_V2, HeaderSize) - 0usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64_V2::FixupInfoSize"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64_V2, FixupInfoSize) - 4usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64_V2::Symbol"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64_V2, Symbol) - 8usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64_V2::SymbolGroup"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64_V2, SymbolGroup) - 16usize];
    ["Offset of field: _IMAGE_DYNAMIC_RELOCATION64_V2::Flags"]
        [::std::mem::offset_of!(_IMAGE_DYNAMIC_RELOCATION64_V2, Flags) - 20usize];
};
pub type IMAGE_DYNAMIC_RELOCATION64_V2 = _IMAGE_DYNAMIC_RELOCATION64_V2;
pub type PIMAGE_DYNAMIC_RELOCATION64_V2 = *mut _IMAGE_DYNAMIC_RELOCATION64_V2;
pub type IMAGE_DYNAMIC_RELOCATION = IMAGE_DYNAMIC_RELOCATION64;
pub type PIMAGE_DYNAMIC_RELOCATION = PIMAGE_DYNAMIC_RELOCATION64;
pub type IMAGE_DYNAMIC_RELOCATION_V2 = IMAGE_DYNAMIC_RELOCATION64_V2;
pub type PIMAGE_DYNAMIC_RELOCATION_V2 = PIMAGE_DYNAMIC_RELOCATION64_V2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
    pub PrologueByteCount: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER"]
        [::std::mem::size_of::<_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER>() - 1usize];
    ["Alignment of _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER"]
        [::std::mem::align_of::<_IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER>() - 1usize];
    ["Offset of field: _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER::PrologueByteCount"][::std::mem::offset_of!(
        _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER,
        PrologueByteCount
    ) - 0usize];
};
pub type IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
pub type PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = *mut IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
    pub EpilogueCount: DWORD,
    pub EpilogueByteCount: BYTE,
    pub BranchDescriptorElementSize: BYTE,
    pub BranchDescriptorCount: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER"]
        [::std::mem::size_of::<_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER>() - 8usize];
    ["Alignment of _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER"]
        [::std::mem::align_of::<_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER>() - 1usize];
    ["Offset of field: _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER::EpilogueCount"]
        [::std::mem::offset_of!(_IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER, EpilogueCount) - 0usize];
    ["Offset of field: _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER::EpilogueByteCount"][::std::mem::offset_of!(
        _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER,
        EpilogueByteCount
    ) - 4usize];
    ["Offset of field: _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER::BranchDescriptorElementSize"][::std::mem::offset_of!(
        _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER,
        BranchDescriptorElementSize
    )
        - 5usize];
    ["Offset of field: _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER::BranchDescriptorCount"][::std::mem::offset_of!(
        _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER,
        BranchDescriptorCount
    )
        - 6usize];
};
pub type IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
pub type PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = *mut IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION"]
        [::std::mem::size_of::<_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION>() - 4usize];
    ["Alignment of _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION>() - 1usize];
};
impl _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
    #[inline]
    pub fn PageRelativeOffset(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_PageRelativeOffset(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PageRelativeOffset_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                12u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_PageRelativeOffset_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IndirectCall(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IndirectCall(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IndirectCall_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IndirectCall_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IATIndex(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 19u8) as u32) }
    }
    #[inline]
    pub fn set_IATIndex(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IATIndex_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                19u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IATIndex_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                19u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        PageRelativeOffset: DWORD,
        IndirectCall: DWORD,
        IATIndex: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let PageRelativeOffset: u32 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
            PageRelativeOffset as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let IndirectCall: u32 = unsafe { ::std::mem::transmute(IndirectCall) };
            IndirectCall as u64
        });
        __bindgen_bitfield_unit.set(13usize, 19u8, {
            let IATIndex: u32 = unsafe { ::std::mem::transmute(IATIndex) };
            IATIndex as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
    _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub type PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
    *mut IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION"]
        [::std::mem::size_of::<_IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION>() - 4usize];
    ["Alignment of _IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION>() - 1usize];
};
impl _IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION {
    #[inline]
    pub fn PageRelativeOffset(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_PageRelativeOffset(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PageRelativeOffset_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_PageRelativeOffset_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IndirectCall(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IndirectCall(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IndirectCall_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IndirectCall_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RegisterIndex(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_RegisterIndex(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RegisterIndex_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RegisterIndex_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ImportType(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ImportType(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ImportType_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ImportType_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IATIndex(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_IATIndex(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IATIndex_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                17usize,
                15u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IATIndex_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                17usize,
                15u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        PageRelativeOffset: DWORD,
        IndirectCall: DWORD,
        RegisterIndex: DWORD,
        ImportType: DWORD,
        IATIndex: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let PageRelativeOffset: u32 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
            PageRelativeOffset as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IndirectCall: u32 = unsafe { ::std::mem::transmute(IndirectCall) };
            IndirectCall as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let RegisterIndex: u32 = unsafe { ::std::mem::transmute(RegisterIndex) };
            RegisterIndex as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let ImportType: u32 = unsafe { ::std::mem::transmute(ImportType) };
            ImportType as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let IATIndex: u32 = unsafe { ::std::mem::transmute(IATIndex) };
            IATIndex as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION =
    _IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION;
pub type PIMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION =
    *mut IMAGE_IMPORT_CONTROL_TRANSFER_ARM64_RELOCATION;
pub type IMAGE_IMPORT_CONTROL_TRANSFER_RELOCATION =
    IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub type PIMAGE_IMPORT_CONTROL_TRANSFER_RELOCATION =
    *mut IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION"]
        [::std::mem::size_of::<_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION>() - 2usize];
    ["Alignment of _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION>() - 1usize];
};
impl _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
    #[inline]
    pub fn PageRelativeOffset(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
    }
    #[inline]
    pub fn set_PageRelativeOffset(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PageRelativeOffset_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                12u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_PageRelativeOffset_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IndirectCall(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_IndirectCall(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IndirectCall_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_IndirectCall_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RexWPrefix(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_RexWPrefix(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RexWPrefix_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_RexWPrefix_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn CfgCheck(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_CfgCheck(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn CfgCheck_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_CfgCheck_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        PageRelativeOffset: WORD,
        IndirectCall: WORD,
        RexWPrefix: WORD,
        CfgCheck: WORD,
        Reserved: WORD,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let PageRelativeOffset: u16 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
            PageRelativeOffset as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let IndirectCall: u16 = unsafe { ::std::mem::transmute(IndirectCall) };
            IndirectCall as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let RexWPrefix: u16 = unsafe { ::std::mem::transmute(RexWPrefix) };
            RexWPrefix as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let CfgCheck: u16 = unsafe { ::std::mem::transmute(CfgCheck) };
            CfgCheck as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
    _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub type PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION =
    *mut IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION"]
        [::std::mem::size_of::<_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION>() - 2usize];
    ["Alignment of _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION>() - 1usize];
};
impl _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
    #[inline]
    pub fn PageRelativeOffset(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u16) }
    }
    #[inline]
    pub fn set_PageRelativeOffset(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PageRelativeOffset_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                12u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_PageRelativeOffset_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                12u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RegisterNumber(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_RegisterNumber(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RegisterNumber_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                4u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_RegisterNumber_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        PageRelativeOffset: WORD,
        RegisterNumber: WORD,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let PageRelativeOffset: u16 = unsafe { ::std::mem::transmute(PageRelativeOffset) };
            PageRelativeOffset as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let RegisterNumber: u16 = unsafe { ::std::mem::transmute(RegisterNumber) };
            RegisterNumber as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
pub type PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION =
    *mut IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FUNCTION_OVERRIDE_HEADER {
    pub FuncOverrideSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_FUNCTION_OVERRIDE_HEADER"]
        [::std::mem::size_of::<_IMAGE_FUNCTION_OVERRIDE_HEADER>() - 4usize];
    ["Alignment of _IMAGE_FUNCTION_OVERRIDE_HEADER"]
        [::std::mem::align_of::<_IMAGE_FUNCTION_OVERRIDE_HEADER>() - 1usize];
    ["Offset of field: _IMAGE_FUNCTION_OVERRIDE_HEADER::FuncOverrideSize"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_OVERRIDE_HEADER, FuncOverrideSize) - 0usize];
};
pub type IMAGE_FUNCTION_OVERRIDE_HEADER = _IMAGE_FUNCTION_OVERRIDE_HEADER;
pub type PIMAGE_FUNCTION_OVERRIDE_HEADER = *mut IMAGE_FUNCTION_OVERRIDE_HEADER;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION {
    pub OriginalRva: DWORD,
    pub BDDOffset: DWORD,
    pub RvaSize: DWORD,
    pub BaseRelocSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION"]
        [::std::mem::size_of::<_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION>() - 16usize];
    ["Alignment of _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION>() - 1usize];
    ["Offset of field: _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION::OriginalRva"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION, OriginalRva) - 0usize];
    ["Offset of field: _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION::BDDOffset"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION, BDDOffset) - 4usize];
    ["Offset of field: _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION::RvaSize"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION, RvaSize) - 8usize];
    ["Offset of field: _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION::BaseRelocSize"][::std::mem::offset_of!(
        _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION,
        BaseRelocSize
    ) - 12usize];
};
pub type IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION = _IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
pub type PIMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION =
    *mut IMAGE_FUNCTION_OVERRIDE_DYNAMIC_RELOCATION;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BDD_INFO {
    pub Version: DWORD,
    pub BDDSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_BDD_INFO"][::std::mem::size_of::<_IMAGE_BDD_INFO>() - 8usize];
    ["Alignment of _IMAGE_BDD_INFO"][::std::mem::align_of::<_IMAGE_BDD_INFO>() - 1usize];
    ["Offset of field: _IMAGE_BDD_INFO::Version"]
        [::std::mem::offset_of!(_IMAGE_BDD_INFO, Version) - 0usize];
    ["Offset of field: _IMAGE_BDD_INFO::BDDSize"]
        [::std::mem::offset_of!(_IMAGE_BDD_INFO, BDDSize) - 4usize];
};
pub type IMAGE_BDD_INFO = _IMAGE_BDD_INFO;
pub type PIMAGE_BDD_INFO = *mut IMAGE_BDD_INFO;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_BDD_DYNAMIC_RELOCATION {
    pub Left: WORD,
    pub Right: WORD,
    pub Value: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_BDD_DYNAMIC_RELOCATION"]
        [::std::mem::size_of::<_IMAGE_BDD_DYNAMIC_RELOCATION>() - 8usize];
    ["Alignment of _IMAGE_BDD_DYNAMIC_RELOCATION"]
        [::std::mem::align_of::<_IMAGE_BDD_DYNAMIC_RELOCATION>() - 1usize];
    ["Offset of field: _IMAGE_BDD_DYNAMIC_RELOCATION::Left"]
        [::std::mem::offset_of!(_IMAGE_BDD_DYNAMIC_RELOCATION, Left) - 0usize];
    ["Offset of field: _IMAGE_BDD_DYNAMIC_RELOCATION::Right"]
        [::std::mem::offset_of!(_IMAGE_BDD_DYNAMIC_RELOCATION, Right) - 2usize];
    ["Offset of field: _IMAGE_BDD_DYNAMIC_RELOCATION::Value"]
        [::std::mem::offset_of!(_IMAGE_BDD_DYNAMIC_RELOCATION, Value) - 4usize];
};
pub type IMAGE_BDD_DYNAMIC_RELOCATION = _IMAGE_BDD_DYNAMIC_RELOCATION;
pub type PIMAGE_BDD_DYNAMIC_RELOCATION = *mut IMAGE_BDD_DYNAMIC_RELOCATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
    pub Size: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub GlobalFlagsClear: DWORD,
    pub GlobalFlagsSet: DWORD,
    pub CriticalSectionDefaultTimeout: DWORD,
    pub DeCommitFreeBlockThreshold: DWORD,
    pub DeCommitTotalFreeThreshold: DWORD,
    pub LockPrefixTable: DWORD,
    pub MaximumAllocationSize: DWORD,
    pub VirtualMemoryThreshold: DWORD,
    pub ProcessHeapFlags: DWORD,
    pub ProcessAffinityMask: DWORD,
    pub CSDVersion: WORD,
    pub DependentLoadFlags: WORD,
    pub EditList: DWORD,
    pub SecurityCookie: DWORD,
    pub SEHandlerTable: DWORD,
    pub SEHandlerCount: DWORD,
    pub GuardCFCheckFunctionPointer: DWORD,
    pub GuardCFDispatchFunctionPointer: DWORD,
    pub GuardCFFunctionTable: DWORD,
    pub GuardCFFunctionCount: DWORD,
    pub GuardFlags: DWORD,
    pub CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    pub GuardAddressTakenIatEntryTable: DWORD,
    pub GuardAddressTakenIatEntryCount: DWORD,
    pub GuardLongJumpTargetTable: DWORD,
    pub GuardLongJumpTargetCount: DWORD,
    pub DynamicValueRelocTable: DWORD,
    pub CHPEMetadataPointer: DWORD,
    pub GuardRFFailureRoutine: DWORD,
    pub GuardRFFailureRoutineFunctionPointer: DWORD,
    pub DynamicValueRelocTableOffset: DWORD,
    pub DynamicValueRelocTableSection: WORD,
    pub Reserved2: WORD,
    pub GuardRFVerifyStackPointerFunctionPointer: DWORD,
    pub HotPatchTableOffset: DWORD,
    pub Reserved3: DWORD,
    pub EnclaveConfigurationPointer: DWORD,
    pub VolatileMetadataPointer: DWORD,
    pub GuardEHContinuationTable: DWORD,
    pub GuardEHContinuationCount: DWORD,
    pub GuardXFGCheckFunctionPointer: DWORD,
    pub GuardXFGDispatchFunctionPointer: DWORD,
    pub GuardXFGTableDispatchFunctionPointer: DWORD,
    pub CastGuardOsDeterminedFailureMode: DWORD,
    pub GuardMemcpyFunctionPointer: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_LOAD_CONFIG_DIRECTORY32"]
        [::std::mem::size_of::<_IMAGE_LOAD_CONFIG_DIRECTORY32>() - 192usize];
    ["Alignment of _IMAGE_LOAD_CONFIG_DIRECTORY32"]
        [::std::mem::align_of::<_IMAGE_LOAD_CONFIG_DIRECTORY32>() - 4usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::Size"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, Size) - 0usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::MajorVersion"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, MajorVersion) - 8usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::MinorVersion"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, MinorVersion) - 10usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GlobalFlagsClear"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, GlobalFlagsClear) - 12usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GlobalFlagsSet"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, GlobalFlagsSet) - 16usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::CriticalSectionDefaultTimeout"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        CriticalSectionDefaultTimeout
    ) - 20usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::DeCommitFreeBlockThreshold"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        DeCommitFreeBlockThreshold
    ) - 24usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::DeCommitTotalFreeThreshold"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        DeCommitTotalFreeThreshold
    ) - 28usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::LockPrefixTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, LockPrefixTable) - 32usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::MaximumAllocationSize"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, MaximumAllocationSize) - 36usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::VirtualMemoryThreshold"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, VirtualMemoryThreshold) - 40usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::ProcessHeapFlags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, ProcessHeapFlags) - 44usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::ProcessAffinityMask"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, ProcessAffinityMask) - 48usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::CSDVersion"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, CSDVersion) - 52usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::DependentLoadFlags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, DependentLoadFlags) - 54usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::EditList"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, EditList) - 56usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::SecurityCookie"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, SecurityCookie) - 60usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::SEHandlerTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, SEHandlerTable) - 64usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::SEHandlerCount"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, SEHandlerCount) - 68usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardCFCheckFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardCFCheckFunctionPointer
    ) - 72usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardCFDispatchFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardCFDispatchFunctionPointer
    )
        - 76usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardCFFunctionTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, GuardCFFunctionTable) - 80usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardCFFunctionCount"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, GuardCFFunctionCount) - 84usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardFlags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, GuardFlags) - 88usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::CodeIntegrity"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, CodeIntegrity) - 92usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardAddressTakenIatEntryTable"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardAddressTakenIatEntryTable
    )
        - 104usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardAddressTakenIatEntryCount"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardAddressTakenIatEntryCount
    )
        - 108usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardLongJumpTargetTable"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardLongJumpTargetTable
    ) - 112usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardLongJumpTargetCount"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardLongJumpTargetCount
    ) - 116usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::DynamicValueRelocTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, DynamicValueRelocTable) - 120usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::CHPEMetadataPointer"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, CHPEMetadataPointer) - 124usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardRFFailureRoutine"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, GuardRFFailureRoutine) - 128usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardRFFailureRoutineFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardRFFailureRoutineFunctionPointer
    )
        - 132usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::DynamicValueRelocTableOffset"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        DynamicValueRelocTableOffset
    ) - 136usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::DynamicValueRelocTableSection"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        DynamicValueRelocTableSection
    )
        - 140usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::Reserved2"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, Reserved2) - 142usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardRFVerifyStackPointerFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardRFVerifyStackPointerFunctionPointer
    )
        - 144usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::HotPatchTableOffset"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, HotPatchTableOffset) - 148usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::Reserved3"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY32, Reserved3) - 152usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::EnclaveConfigurationPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        EnclaveConfigurationPointer
    ) - 156usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::VolatileMetadataPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        VolatileMetadataPointer
    ) - 160usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardEHContinuationTable"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardEHContinuationTable
    ) - 164usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardEHContinuationCount"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardEHContinuationCount
    ) - 168usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardXFGCheckFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardXFGCheckFunctionPointer
    ) - 172usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardXFGDispatchFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardXFGDispatchFunctionPointer
    )
        - 176usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardXFGTableDispatchFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardXFGTableDispatchFunctionPointer
    )
        - 180usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::CastGuardOsDeterminedFailureMode"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        CastGuardOsDeterminedFailureMode
    )
        - 184usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY32::GuardMemcpyFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY32,
        GuardMemcpyFunctionPointer
    ) - 188usize];
};
pub type IMAGE_LOAD_CONFIG_DIRECTORY32 = _IMAGE_LOAD_CONFIG_DIRECTORY32;
pub type PIMAGE_LOAD_CONFIG_DIRECTORY32 = *mut _IMAGE_LOAD_CONFIG_DIRECTORY32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
    pub Size: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub GlobalFlagsClear: DWORD,
    pub GlobalFlagsSet: DWORD,
    pub CriticalSectionDefaultTimeout: DWORD,
    pub DeCommitFreeBlockThreshold: ULONGLONG,
    pub DeCommitTotalFreeThreshold: ULONGLONG,
    pub LockPrefixTable: ULONGLONG,
    pub MaximumAllocationSize: ULONGLONG,
    pub VirtualMemoryThreshold: ULONGLONG,
    pub ProcessAffinityMask: ULONGLONG,
    pub ProcessHeapFlags: DWORD,
    pub CSDVersion: WORD,
    pub DependentLoadFlags: WORD,
    pub EditList: ULONGLONG,
    pub SecurityCookie: ULONGLONG,
    pub SEHandlerTable: ULONGLONG,
    pub SEHandlerCount: ULONGLONG,
    pub GuardCFCheckFunctionPointer: ULONGLONG,
    pub GuardCFDispatchFunctionPointer: ULONGLONG,
    pub GuardCFFunctionTable: ULONGLONG,
    pub GuardCFFunctionCount: ULONGLONG,
    pub GuardFlags: DWORD,
    pub CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    pub GuardAddressTakenIatEntryTable: ULONGLONG,
    pub GuardAddressTakenIatEntryCount: ULONGLONG,
    pub GuardLongJumpTargetTable: ULONGLONG,
    pub GuardLongJumpTargetCount: ULONGLONG,
    pub DynamicValueRelocTable: ULONGLONG,
    pub CHPEMetadataPointer: ULONGLONG,
    pub GuardRFFailureRoutine: ULONGLONG,
    pub GuardRFFailureRoutineFunctionPointer: ULONGLONG,
    pub DynamicValueRelocTableOffset: DWORD,
    pub DynamicValueRelocTableSection: WORD,
    pub Reserved2: WORD,
    pub GuardRFVerifyStackPointerFunctionPointer: ULONGLONG,
    pub HotPatchTableOffset: DWORD,
    pub Reserved3: DWORD,
    pub EnclaveConfigurationPointer: ULONGLONG,
    pub VolatileMetadataPointer: ULONGLONG,
    pub GuardEHContinuationTable: ULONGLONG,
    pub GuardEHContinuationCount: ULONGLONG,
    pub GuardXFGCheckFunctionPointer: ULONGLONG,
    pub GuardXFGDispatchFunctionPointer: ULONGLONG,
    pub GuardXFGTableDispatchFunctionPointer: ULONGLONG,
    pub CastGuardOsDeterminedFailureMode: ULONGLONG,
    pub GuardMemcpyFunctionPointer: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_LOAD_CONFIG_DIRECTORY64"]
        [::std::mem::size_of::<_IMAGE_LOAD_CONFIG_DIRECTORY64>() - 320usize];
    ["Alignment of _IMAGE_LOAD_CONFIG_DIRECTORY64"]
        [::std::mem::align_of::<_IMAGE_LOAD_CONFIG_DIRECTORY64>() - 4usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::Size"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, Size) - 0usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::MajorVersion"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, MajorVersion) - 8usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::MinorVersion"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, MinorVersion) - 10usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GlobalFlagsClear"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, GlobalFlagsClear) - 12usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GlobalFlagsSet"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, GlobalFlagsSet) - 16usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::CriticalSectionDefaultTimeout"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        CriticalSectionDefaultTimeout
    ) - 20usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::DeCommitFreeBlockThreshold"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        DeCommitFreeBlockThreshold
    ) - 24usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::DeCommitTotalFreeThreshold"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        DeCommitTotalFreeThreshold
    ) - 32usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::LockPrefixTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, LockPrefixTable) - 40usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::MaximumAllocationSize"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, MaximumAllocationSize) - 48usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::VirtualMemoryThreshold"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, VirtualMemoryThreshold) - 56usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::ProcessAffinityMask"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, ProcessAffinityMask) - 64usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::ProcessHeapFlags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, ProcessHeapFlags) - 72usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::CSDVersion"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, CSDVersion) - 76usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::DependentLoadFlags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, DependentLoadFlags) - 78usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::EditList"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, EditList) - 80usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::SecurityCookie"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, SecurityCookie) - 88usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::SEHandlerTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, SEHandlerTable) - 96usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::SEHandlerCount"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, SEHandlerCount) - 104usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardCFCheckFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardCFCheckFunctionPointer
    ) - 112usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardCFDispatchFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardCFDispatchFunctionPointer
    )
        - 120usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardCFFunctionTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, GuardCFFunctionTable) - 128usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardCFFunctionCount"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, GuardCFFunctionCount) - 136usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardFlags"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, GuardFlags) - 144usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::CodeIntegrity"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, CodeIntegrity) - 148usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardAddressTakenIatEntryTable"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardAddressTakenIatEntryTable
    )
        - 160usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardAddressTakenIatEntryCount"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardAddressTakenIatEntryCount
    )
        - 168usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardLongJumpTargetTable"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardLongJumpTargetTable
    ) - 176usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardLongJumpTargetCount"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardLongJumpTargetCount
    ) - 184usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::DynamicValueRelocTable"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, DynamicValueRelocTable) - 192usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::CHPEMetadataPointer"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, CHPEMetadataPointer) - 200usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardRFFailureRoutine"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, GuardRFFailureRoutine) - 208usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardRFFailureRoutineFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardRFFailureRoutineFunctionPointer
    )
        - 216usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::DynamicValueRelocTableOffset"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        DynamicValueRelocTableOffset
    ) - 224usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::DynamicValueRelocTableSection"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        DynamicValueRelocTableSection
    )
        - 228usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::Reserved2"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, Reserved2) - 230usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardRFVerifyStackPointerFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardRFVerifyStackPointerFunctionPointer
    )
        - 232usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::HotPatchTableOffset"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, HotPatchTableOffset) - 240usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::Reserved3"]
        [::std::mem::offset_of!(_IMAGE_LOAD_CONFIG_DIRECTORY64, Reserved3) - 244usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::EnclaveConfigurationPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        EnclaveConfigurationPointer
    ) - 248usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::VolatileMetadataPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        VolatileMetadataPointer
    ) - 256usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardEHContinuationTable"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardEHContinuationTable
    ) - 264usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardEHContinuationCount"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardEHContinuationCount
    ) - 272usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardXFGCheckFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardXFGCheckFunctionPointer
    ) - 280usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardXFGDispatchFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardXFGDispatchFunctionPointer
    )
        - 288usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardXFGTableDispatchFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardXFGTableDispatchFunctionPointer
    )
        - 296usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::CastGuardOsDeterminedFailureMode"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        CastGuardOsDeterminedFailureMode
    )
        - 304usize];
    ["Offset of field: _IMAGE_LOAD_CONFIG_DIRECTORY64::GuardMemcpyFunctionPointer"][::std::mem::offset_of!(
        _IMAGE_LOAD_CONFIG_DIRECTORY64,
        GuardMemcpyFunctionPointer
    ) - 312usize];
};
pub type IMAGE_LOAD_CONFIG_DIRECTORY64 = _IMAGE_LOAD_CONFIG_DIRECTORY64;
pub type PIMAGE_LOAD_CONFIG_DIRECTORY64 = *mut _IMAGE_LOAD_CONFIG_DIRECTORY64;
pub type IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64;
pub type PIMAGE_LOAD_CONFIG_DIRECTORY = PIMAGE_LOAD_CONFIG_DIRECTORY64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_INFO {
    pub Version: DWORD,
    pub Size: DWORD,
    pub SequenceNumber: DWORD,
    pub BaseImageList: DWORD,
    pub BaseImageCount: DWORD,
    pub BufferOffset: DWORD,
    pub ExtraPatchSize: DWORD,
    pub MinSequenceNumber: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_HOT_PATCH_INFO"][::std::mem::size_of::<_IMAGE_HOT_PATCH_INFO>() - 36usize];
    ["Alignment of _IMAGE_HOT_PATCH_INFO"]
        [::std::mem::align_of::<_IMAGE_HOT_PATCH_INFO>() - 4usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::Version"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, Version) - 0usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::Size"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, Size) - 4usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::SequenceNumber"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, SequenceNumber) - 8usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::BaseImageList"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, BaseImageList) - 12usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::BaseImageCount"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, BaseImageCount) - 16usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::BufferOffset"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, BufferOffset) - 20usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::ExtraPatchSize"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, ExtraPatchSize) - 24usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::MinSequenceNumber"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, MinSequenceNumber) - 28usize];
    ["Offset of field: _IMAGE_HOT_PATCH_INFO::Flags"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_INFO, Flags) - 32usize];
};
pub type IMAGE_HOT_PATCH_INFO = _IMAGE_HOT_PATCH_INFO;
pub type PIMAGE_HOT_PATCH_INFO = *mut _IMAGE_HOT_PATCH_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_BASE {
    pub SequenceNumber: DWORD,
    pub Flags: DWORD,
    pub OriginalTimeDateStamp: DWORD,
    pub OriginalCheckSum: DWORD,
    pub CodeIntegrityInfo: DWORD,
    pub CodeIntegritySize: DWORD,
    pub PatchTable: DWORD,
    pub BufferOffset: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_HOT_PATCH_BASE"][::std::mem::size_of::<_IMAGE_HOT_PATCH_BASE>() - 32usize];
    ["Alignment of _IMAGE_HOT_PATCH_BASE"]
        [::std::mem::align_of::<_IMAGE_HOT_PATCH_BASE>() - 4usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::SequenceNumber"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, SequenceNumber) - 0usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::Flags"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, Flags) - 4usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::OriginalTimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, OriginalTimeDateStamp) - 8usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::OriginalCheckSum"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, OriginalCheckSum) - 12usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::CodeIntegrityInfo"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, CodeIntegrityInfo) - 16usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::CodeIntegritySize"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, CodeIntegritySize) - 20usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::PatchTable"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, PatchTable) - 24usize];
    ["Offset of field: _IMAGE_HOT_PATCH_BASE::BufferOffset"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_BASE, BufferOffset) - 28usize];
};
pub type IMAGE_HOT_PATCH_BASE = _IMAGE_HOT_PATCH_BASE;
pub type PIMAGE_HOT_PATCH_BASE = *mut _IMAGE_HOT_PATCH_BASE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_MACHINE {
    pub __bindgen_anon_1: _IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1>() - 4usize];
};
impl _IMAGE_HOT_PATCH_MACHINE__bindgen_ty_1 {
    #[inline]
    pub fn _x86(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set__x86(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn _x86_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set__x86_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Amd64(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Amd64(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Amd64_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Amd64_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Arm64(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Arm64(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Arm64_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Arm64_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Amd64EC(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Amd64EC(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Amd64EC_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Amd64EC_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        _x86: DWORD,
        Amd64: DWORD,
        Arm64: DWORD,
        Amd64EC: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let _x86: u32 = unsafe { ::std::mem::transmute(_x86) };
            _x86 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Amd64: u32 = unsafe { ::std::mem::transmute(Amd64) };
            Amd64 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let Arm64: u32 = unsafe { ::std::mem::transmute(Arm64) };
            Arm64 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let Amd64EC: u32 = unsafe { ::std::mem::transmute(Amd64EC) };
            Amd64EC as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_HOT_PATCH_MACHINE"]
        [::std::mem::size_of::<_IMAGE_HOT_PATCH_MACHINE>() - 4usize];
    ["Alignment of _IMAGE_HOT_PATCH_MACHINE"]
        [::std::mem::align_of::<_IMAGE_HOT_PATCH_MACHINE>() - 4usize];
};
pub type IMAGE_HOT_PATCH_MACHINE = _IMAGE_HOT_PATCH_MACHINE;
pub type PIMAGE_HOT_PATCH_MACHINE = *mut _IMAGE_HOT_PATCH_MACHINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_HOT_PATCH_HASHES {
    pub SHA256: [BYTE; 32usize],
    pub SHA1: [BYTE; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_HOT_PATCH_HASHES"][::std::mem::size_of::<_IMAGE_HOT_PATCH_HASHES>() - 52usize];
    ["Alignment of _IMAGE_HOT_PATCH_HASHES"]
        [::std::mem::align_of::<_IMAGE_HOT_PATCH_HASHES>() - 1usize];
    ["Offset of field: _IMAGE_HOT_PATCH_HASHES::SHA256"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_HASHES, SHA256) - 0usize];
    ["Offset of field: _IMAGE_HOT_PATCH_HASHES::SHA1"]
        [::std::mem::offset_of!(_IMAGE_HOT_PATCH_HASHES, SHA1) - 32usize];
};
pub type IMAGE_HOT_PATCH_HASHES = _IMAGE_HOT_PATCH_HASHES;
pub type PIMAGE_HOT_PATCH_HASHES = *mut _IMAGE_HOT_PATCH_HASHES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    pub FuncStart: DWORD,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_CE_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::size_of::<_IMAGE_CE_RUNTIME_FUNCTION_ENTRY>() - 8usize];
    ["Alignment of _IMAGE_CE_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_CE_RUNTIME_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_CE_RUNTIME_FUNCTION_ENTRY::FuncStart"]
        [::std::mem::offset_of!(_IMAGE_CE_RUNTIME_FUNCTION_ENTRY, FuncStart) - 0usize];
};
impl _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    #[inline]
    pub fn PrologLen(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_PrologLen(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn PrologLen_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_PrologLen_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn FuncLen(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_FuncLen(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FuncLen_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                22u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FuncLen_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                22u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ThirtyTwoBit(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ThirtyTwoBit(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ThirtyTwoBit_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ThirtyTwoBit_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ExceptionFlag(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ExceptionFlag(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ExceptionFlag_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ExceptionFlag_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        PrologLen: DWORD,
        FuncLen: DWORD,
        ThirtyTwoBit: DWORD,
        ExceptionFlag: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let PrologLen: u32 = unsafe { ::std::mem::transmute(PrologLen) };
            PrologLen as u64
        });
        __bindgen_bitfield_unit.set(8usize, 22u8, {
            let FuncLen: u32 = unsafe { ::std::mem::transmute(FuncLen) };
            FuncLen as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let ThirtyTwoBit: u32 = unsafe { ::std::mem::transmute(ThirtyTwoBit) };
            ThirtyTwoBit as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let ExceptionFlag: u32 = unsafe { ::std::mem::transmute(ExceptionFlag) };
            ExceptionFlag as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMAGE_CE_RUNTIME_FUNCTION_ENTRY = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    pub BeginAddress: DWORD,
    pub __bindgen_anon_1: _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
    pub UnwindData: DWORD,
    pub __bindgen_anon_1: _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Flag(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_Flag(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Flag_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Flag_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn FunctionLength(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_FunctionLength(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FunctionLength_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FunctionLength_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Ret(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_Ret(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Ret_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Ret_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn H(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_H(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn H_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_H_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reg(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_Reg(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reg_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reg_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn R(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_R(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn R_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_R_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn L(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_L(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn L_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_L_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn C(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_C(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn C_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_C_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn StackAdjust(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_StackAdjust(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn StackAdjust_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_StackAdjust_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Flag: DWORD,
        FunctionLength: DWORD,
        Ret: DWORD,
        H: DWORD,
        Reg: DWORD,
        R: DWORD,
        L: DWORD,
        C: DWORD,
        StackAdjust: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let Flag: u32 = unsafe { ::std::mem::transmute(Flag) };
            Flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 11u8, {
            let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
            FunctionLength as u64
        });
        __bindgen_bitfield_unit.set(13usize, 2u8, {
            let Ret: u32 = unsafe { ::std::mem::transmute(Ret) };
            Ret as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let H: u32 = unsafe { ::std::mem::transmute(H) };
            H as u64
        });
        __bindgen_bitfield_unit.set(16usize, 3u8, {
            let Reg: u32 = unsafe { ::std::mem::transmute(Reg) };
            Reg as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let R: u32 = unsafe { ::std::mem::transmute(R) };
            R as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let L: u32 = unsafe { ::std::mem::transmute(L) };
            L as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let C: u32 = unsafe { ::std::mem::transmute(C) };
            C as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let StackAdjust: u32 = unsafe { ::std::mem::transmute(StackAdjust) };
            StackAdjust as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1::UnwindData"][::std::mem::offset_of!(
        _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
        UnwindData
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::size_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY>() - 8usize];
    ["Alignment of _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY::BeginAddress"]
        [::std::mem::offset_of!(_IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, BeginAddress) - 0usize];
};
pub type IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub const ARM64_FNPDATA_FLAGS_PdataRefToFullXdata: ARM64_FNPDATA_FLAGS = 0;
pub const ARM64_FNPDATA_FLAGS_PdataPackedUnwindFunction: ARM64_FNPDATA_FLAGS = 1;
pub const ARM64_FNPDATA_FLAGS_PdataPackedUnwindFragment: ARM64_FNPDATA_FLAGS = 2;
pub type ARM64_FNPDATA_FLAGS = ::std::os::raw::c_int;
pub const ARM64_FNPDATA_CR_PdataCrUnchained: ARM64_FNPDATA_CR = 0;
pub const ARM64_FNPDATA_CR_PdataCrUnchainedSavedLr: ARM64_FNPDATA_CR = 1;
pub const ARM64_FNPDATA_CR_PdataCrChainedWithPac: ARM64_FNPDATA_CR = 2;
pub const ARM64_FNPDATA_CR_PdataCrChained: ARM64_FNPDATA_CR = 3;
pub type ARM64_FNPDATA_CR = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
    pub BeginAddress: DWORD,
    pub __bindgen_anon_1: _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
    pub UnwindData: DWORD,
    pub __bindgen_anon_1: _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Flag(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_Flag(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Flag_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Flag_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn FunctionLength(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_FunctionLength(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FunctionLength_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                11u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FunctionLength_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RegF(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_RegF(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RegF_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RegF_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn RegI(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_RegI(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn RegI_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_RegI_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn H(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_H(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn H_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_H_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn CR(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_CR(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn CR_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_CR_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn FrameSize(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 9u8) as u32) }
    }
    #[inline]
    pub fn set_FrameSize(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FrameSize_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                9u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FrameSize_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                9u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Flag: DWORD,
        FunctionLength: DWORD,
        RegF: DWORD,
        RegI: DWORD,
        H: DWORD,
        CR: DWORD,
        FrameSize: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let Flag: u32 = unsafe { ::std::mem::transmute(Flag) };
            Flag as u64
        });
        __bindgen_bitfield_unit.set(2usize, 11u8, {
            let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
            FunctionLength as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let RegF: u32 = unsafe { ::std::mem::transmute(RegF) };
            RegF as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let RegI: u32 = unsafe { ::std::mem::transmute(RegI) };
            RegI as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let H: u32 = unsafe { ::std::mem::transmute(H) };
            H as u64
        });
        __bindgen_bitfield_unit.set(21usize, 2u8, {
            let CR: u32 = unsafe { ::std::mem::transmute(CR) };
            CR as u64
        });
        __bindgen_bitfield_unit.set(23usize, 9u8, {
            let FrameSize: u32 = unsafe { ::std::mem::transmute(FrameSize) };
            FrameSize as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1::UnwindData"][::std::mem::offset_of!(
        _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
        UnwindData
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::size_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY>() - 8usize];
    ["Alignment of _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY::BeginAddress"]
        [::std::mem::offset_of!(_IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, BeginAddress) - 0usize];
};
pub type IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
    pub HeaderData: DWORD,
    pub __bindgen_anon_1: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1"]
        [::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1>() - 4usize];
    ["Alignment of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1"]
        [::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1>() - 4usize];
};
impl IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1 {
    #[inline]
    pub fn FunctionLength(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_FunctionLength(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FunctionLength_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                18u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FunctionLength_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                18u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Version(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_Version(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Version_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Version_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ExceptionDataPresent(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ExceptionDataPresent(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ExceptionDataPresent_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ExceptionDataPresent_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EpilogInHeader(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_EpilogInHeader(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EpilogInHeader_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                21usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EpilogInHeader_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                21usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EpilogCount(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_EpilogCount(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EpilogCount_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EpilogCount_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn CodeWords(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_CodeWords(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn CodeWords_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                27usize,
                5u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_CodeWords_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                27usize,
                5u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        FunctionLength: DWORD,
        Version: DWORD,
        ExceptionDataPresent: DWORD,
        EpilogInHeader: DWORD,
        EpilogCount: DWORD,
        CodeWords: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let FunctionLength: u32 = unsafe { ::std::mem::transmute(FunctionLength) };
            FunctionLength as u64
        });
        __bindgen_bitfield_unit.set(18usize, 2u8, {
            let Version: u32 = unsafe { ::std::mem::transmute(Version) };
            Version as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let ExceptionDataPresent: u32 = unsafe { ::std::mem::transmute(ExceptionDataPresent) };
            ExceptionDataPresent as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let EpilogInHeader: u32 = unsafe { ::std::mem::transmute(EpilogInHeader) };
            EpilogInHeader as u64
        });
        __bindgen_bitfield_unit.set(22usize, 5u8, {
            let EpilogCount: u32 = unsafe { ::std::mem::transmute(EpilogCount) };
            EpilogCount as u64
        });
        __bindgen_bitfield_unit.set(27usize, 5u8, {
            let CodeWords: u32 = unsafe { ::std::mem::transmute(CodeWords) };
            CodeWords as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA"]
        [::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA>() - 4usize];
    ["Alignment of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA"]
        [::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA>() - 4usize];
    ["Offset of field: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA::HeaderData"]
        [::std::mem::offset_of!(IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA, HeaderData) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED {
    pub ExtendedHeaderData: DWORD,
    pub __bindgen_anon_1: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1"][::std::mem::size_of::<
        IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1"]
        [::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1>()
            - 4usize];
};
impl IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED__bindgen_ty_1 {
    #[inline]
    pub fn ExtendedEpilogCount(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_ExtendedEpilogCount(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ExtendedEpilogCount_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ExtendedEpilogCount_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ExtendedCodeWords(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_ExtendedCodeWords(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ExtendedCodeWords_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 3usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_ExtendedCodeWords_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 3usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ExtendedEpilogCount: DWORD,
        ExtendedCodeWords: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ExtendedEpilogCount: u32 = unsafe { ::std::mem::transmute(ExtendedEpilogCount) };
            ExtendedEpilogCount as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let ExtendedCodeWords: u32 = unsafe { ::std::mem::transmute(ExtendedCodeWords) };
            ExtendedCodeWords as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED"]
        [::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED>() - 4usize];
    ["Alignment of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED"]
        [::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED>() - 4usize];
    ["Offset of field: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED::ExtendedHeaderData"][::std::mem::offset_of!(
        IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EXTENDED,
        ExtendedHeaderData
    )
        - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE {
    pub EpilogScopeData: DWORD,
    pub __bindgen_anon_1: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1"]
        [::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1"]
        [::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1>(
        ) - 4usize];
};
impl IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE__bindgen_ty_1 {
    #[inline]
    pub fn EpilogStartOffset(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_EpilogStartOffset(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EpilogStartOffset_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                18u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EpilogStartOffset_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                18u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Res0(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_Res0(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Res0_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Res0_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn EpilogStartIndex(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_EpilogStartIndex(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn EpilogStartIndex_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_EpilogStartIndex_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        EpilogStartOffset: DWORD,
        Res0: DWORD,
        EpilogStartIndex: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 18u8, {
            let EpilogStartOffset: u32 = unsafe { ::std::mem::transmute(EpilogStartOffset) };
            EpilogStartOffset as u64
        });
        __bindgen_bitfield_unit.set(18usize, 4u8, {
            let Res0: u32 = unsafe { ::std::mem::transmute(Res0) };
            Res0 as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let EpilogStartIndex: u32 = unsafe { ::std::mem::transmute(EpilogStartIndex) };
            EpilogStartIndex as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE"]
        [::std::mem::size_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE>() - 4usize];
    ["Alignment of IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE"]
        [::std::mem::align_of::<IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE>() - 4usize];
    ["Offset of field: IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE::EpilogScopeData"][::std::mem::offset_of!(
        IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA_EPILOG_SCOPE,
        EpilogScopeData
    )
        - 0usize];
};
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    pub BeginAddress: ULONGLONG,
    pub EndAddress: ULONGLONG,
    pub ExceptionHandler: ULONGLONG,
    pub HandlerData: ULONGLONG,
    pub PrologEndAddress: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::size_of::<_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>() - 40usize];
    ["Alignment of _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY::BeginAddress"]
        [::std::mem::offset_of!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, BeginAddress) - 0usize];
    ["Offset of field: _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY::EndAddress"]
        [::std::mem::offset_of!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, EndAddress) - 8usize];
    ["Offset of field: _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY::ExceptionHandler"]
        [::std::mem::offset_of!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, ExceptionHandler) - 16usize];
    ["Offset of field: _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY::HandlerData"]
        [::std::mem::offset_of!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, HandlerData) - 24usize];
    ["Offset of field: _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY::PrologEndAddress"]
        [::std::mem::offset_of!(_IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, PrologEndAddress) - 32usize];
};
pub type IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    pub BeginAddress: DWORD,
    pub EndAddress: DWORD,
    pub ExceptionHandler: DWORD,
    pub HandlerData: DWORD,
    pub PrologEndAddress: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::size_of::<_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>() - 20usize];
    ["Alignment of _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY::BeginAddress"]
        [::std::mem::offset_of!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, BeginAddress) - 0usize];
    ["Offset of field: _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY::EndAddress"]
        [::std::mem::offset_of!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, EndAddress) - 4usize];
    ["Offset of field: _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY::ExceptionHandler"]
        [::std::mem::offset_of!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, ExceptionHandler) - 8usize];
    ["Offset of field: _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY::HandlerData"]
        [::std::mem::offset_of!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, HandlerData) - 12usize];
    ["Offset of field: _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY::PrologEndAddress"]
        [::std::mem::offset_of!(_IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, PrologEndAddress) - 16usize];
};
pub type IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    pub BeginAddress: DWORD,
    pub EndAddress: DWORD,
    pub __bindgen_anon_1: _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 {
    pub UnwindInfoAddress: DWORD,
    pub UnwindData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>() - 4usize];
    ["Alignment of _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1::UnwindInfoAddress"][::std::mem::offset_of!(
        _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1,
        UnwindInfoAddress
    ) - 0usize];
    ["Offset of field: _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1::UnwindData"]
        [::std::mem::offset_of!(_IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1, UnwindData) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::size_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY>() - 12usize];
    ["Alignment of _IMAGE_RUNTIME_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_RUNTIME_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_RUNTIME_FUNCTION_ENTRY::BeginAddress"]
        [::std::mem::offset_of!(_IMAGE_RUNTIME_FUNCTION_ENTRY, BeginAddress) - 0usize];
    ["Offset of field: _IMAGE_RUNTIME_FUNCTION_ENTRY::EndAddress"]
        [::std::mem::offset_of!(_IMAGE_RUNTIME_FUNCTION_ENTRY, EndAddress) - 4usize];
};
pub type _PIMAGE_RUNTIME_FUNCTION_ENTRY = *mut _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
pub type IMAGE_AMD64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_AMD64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
pub type IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub type PIMAGE_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ENCLAVE_CONFIG32 {
    pub Size: DWORD,
    pub MinimumRequiredConfigSize: DWORD,
    pub PolicyFlags: DWORD,
    pub NumberOfImports: DWORD,
    pub ImportList: DWORD,
    pub ImportEntrySize: DWORD,
    pub FamilyID: [BYTE; 16usize],
    pub ImageID: [BYTE; 16usize],
    pub ImageVersion: DWORD,
    pub SecurityVersion: DWORD,
    pub EnclaveSize: DWORD,
    pub NumberOfThreads: DWORD,
    pub EnclaveFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ENCLAVE_CONFIG32"][::std::mem::size_of::<_IMAGE_ENCLAVE_CONFIG32>() - 76usize];
    ["Alignment of _IMAGE_ENCLAVE_CONFIG32"]
        [::std::mem::align_of::<_IMAGE_ENCLAVE_CONFIG32>() - 4usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::Size"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, Size) - 0usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::MinimumRequiredConfigSize"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, MinimumRequiredConfigSize) - 4usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::PolicyFlags"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, PolicyFlags) - 8usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::NumberOfImports"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, NumberOfImports) - 12usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::ImportList"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, ImportList) - 16usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::ImportEntrySize"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, ImportEntrySize) - 20usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::FamilyID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, FamilyID) - 24usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::ImageID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, ImageID) - 40usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::ImageVersion"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, ImageVersion) - 56usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::SecurityVersion"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, SecurityVersion) - 60usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::EnclaveSize"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, EnclaveSize) - 64usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::NumberOfThreads"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, NumberOfThreads) - 68usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG32::EnclaveFlags"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG32, EnclaveFlags) - 72usize];
};
pub type IMAGE_ENCLAVE_CONFIG32 = _IMAGE_ENCLAVE_CONFIG32;
pub type PIMAGE_ENCLAVE_CONFIG32 = *mut _IMAGE_ENCLAVE_CONFIG32;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ENCLAVE_CONFIG64 {
    pub Size: DWORD,
    pub MinimumRequiredConfigSize: DWORD,
    pub PolicyFlags: DWORD,
    pub NumberOfImports: DWORD,
    pub ImportList: DWORD,
    pub ImportEntrySize: DWORD,
    pub FamilyID: [BYTE; 16usize],
    pub ImageID: [BYTE; 16usize],
    pub ImageVersion: DWORD,
    pub SecurityVersion: DWORD,
    pub EnclaveSize: ULONGLONG,
    pub NumberOfThreads: DWORD,
    pub EnclaveFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ENCLAVE_CONFIG64"][::std::mem::size_of::<_IMAGE_ENCLAVE_CONFIG64>() - 80usize];
    ["Alignment of _IMAGE_ENCLAVE_CONFIG64"]
        [::std::mem::align_of::<_IMAGE_ENCLAVE_CONFIG64>() - 4usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::Size"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, Size) - 0usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::MinimumRequiredConfigSize"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, MinimumRequiredConfigSize) - 4usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::PolicyFlags"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, PolicyFlags) - 8usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::NumberOfImports"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, NumberOfImports) - 12usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::ImportList"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, ImportList) - 16usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::ImportEntrySize"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, ImportEntrySize) - 20usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::FamilyID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, FamilyID) - 24usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::ImageID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, ImageID) - 40usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::ImageVersion"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, ImageVersion) - 56usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::SecurityVersion"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, SecurityVersion) - 60usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::EnclaveSize"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, EnclaveSize) - 64usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::NumberOfThreads"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, NumberOfThreads) - 72usize];
    ["Offset of field: _IMAGE_ENCLAVE_CONFIG64::EnclaveFlags"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_CONFIG64, EnclaveFlags) - 76usize];
};
pub type IMAGE_ENCLAVE_CONFIG64 = _IMAGE_ENCLAVE_CONFIG64;
pub type PIMAGE_ENCLAVE_CONFIG64 = *mut _IMAGE_ENCLAVE_CONFIG64;
pub type IMAGE_ENCLAVE_CONFIG = IMAGE_ENCLAVE_CONFIG64;
pub type PIMAGE_ENCLAVE_CONFIG = PIMAGE_ENCLAVE_CONFIG64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_ENCLAVE_IMPORT {
    pub MatchType: DWORD,
    pub MinimumSecurityVersion: DWORD,
    pub UniqueOrAuthorID: [BYTE; 32usize],
    pub FamilyID: [BYTE; 16usize],
    pub ImageID: [BYTE; 16usize],
    pub ImportName: DWORD,
    pub Reserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_ENCLAVE_IMPORT"][::std::mem::size_of::<_IMAGE_ENCLAVE_IMPORT>() - 80usize];
    ["Alignment of _IMAGE_ENCLAVE_IMPORT"]
        [::std::mem::align_of::<_IMAGE_ENCLAVE_IMPORT>() - 4usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::MatchType"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, MatchType) - 0usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::MinimumSecurityVersion"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, MinimumSecurityVersion) - 4usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::UniqueOrAuthorID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, UniqueOrAuthorID) - 8usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::FamilyID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, FamilyID) - 40usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::ImageID"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, ImageID) - 56usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::ImportName"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, ImportName) - 72usize];
    ["Offset of field: _IMAGE_ENCLAVE_IMPORT::Reserved"]
        [::std::mem::offset_of!(_IMAGE_ENCLAVE_IMPORT, Reserved) - 76usize];
};
pub type IMAGE_ENCLAVE_IMPORT = _IMAGE_ENCLAVE_IMPORT;
pub type PIMAGE_ENCLAVE_IMPORT = *mut _IMAGE_ENCLAVE_IMPORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DEBUG_DIRECTORY {
    pub Characteristics: DWORD,
    pub TimeDateStamp: DWORD,
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
    pub Type: DWORD,
    pub SizeOfData: DWORD,
    pub AddressOfRawData: DWORD,
    pub PointerToRawData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DEBUG_DIRECTORY"][::std::mem::size_of::<_IMAGE_DEBUG_DIRECTORY>() - 28usize];
    ["Alignment of _IMAGE_DEBUG_DIRECTORY"]
        [::std::mem::align_of::<_IMAGE_DEBUG_DIRECTORY>() - 4usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, Characteristics) - 0usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, TimeDateStamp) - 4usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::MajorVersion"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, MajorVersion) - 8usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::MinorVersion"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, MinorVersion) - 10usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::Type"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, Type) - 12usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::SizeOfData"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, SizeOfData) - 16usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::AddressOfRawData"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, AddressOfRawData) - 20usize];
    ["Offset of field: _IMAGE_DEBUG_DIRECTORY::PointerToRawData"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_DIRECTORY, PointerToRawData) - 24usize];
};
pub type IMAGE_DEBUG_DIRECTORY = _IMAGE_DEBUG_DIRECTORY;
pub type PIMAGE_DEBUG_DIRECTORY = *mut _IMAGE_DEBUG_DIRECTORY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_COFF_SYMBOLS_HEADER {
    pub NumberOfSymbols: DWORD,
    pub LvaToFirstSymbol: DWORD,
    pub NumberOfLinenumbers: DWORD,
    pub LvaToFirstLinenumber: DWORD,
    pub RvaToFirstByteOfCode: DWORD,
    pub RvaToLastByteOfCode: DWORD,
    pub RvaToFirstByteOfData: DWORD,
    pub RvaToLastByteOfData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_COFF_SYMBOLS_HEADER"]
        [::std::mem::size_of::<_IMAGE_COFF_SYMBOLS_HEADER>() - 32usize];
    ["Alignment of _IMAGE_COFF_SYMBOLS_HEADER"]
        [::std::mem::align_of::<_IMAGE_COFF_SYMBOLS_HEADER>() - 4usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::NumberOfSymbols"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, NumberOfSymbols) - 0usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::LvaToFirstSymbol"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, LvaToFirstSymbol) - 4usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::NumberOfLinenumbers"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, NumberOfLinenumbers) - 8usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::LvaToFirstLinenumber"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, LvaToFirstLinenumber) - 12usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::RvaToFirstByteOfCode"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, RvaToFirstByteOfCode) - 16usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::RvaToLastByteOfCode"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, RvaToLastByteOfCode) - 20usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::RvaToFirstByteOfData"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, RvaToFirstByteOfData) - 24usize];
    ["Offset of field: _IMAGE_COFF_SYMBOLS_HEADER::RvaToLastByteOfData"]
        [::std::mem::offset_of!(_IMAGE_COFF_SYMBOLS_HEADER, RvaToLastByteOfData) - 28usize];
};
pub type IMAGE_COFF_SYMBOLS_HEADER = _IMAGE_COFF_SYMBOLS_HEADER;
pub type PIMAGE_COFF_SYMBOLS_HEADER = *mut _IMAGE_COFF_SYMBOLS_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FPO_DATA {
    pub ulOffStart: DWORD,
    pub cbProcSize: DWORD,
    pub cdwLocals: DWORD,
    pub cdwParams: WORD,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FPO_DATA"][::std::mem::size_of::<_FPO_DATA>() - 16usize];
    ["Alignment of _FPO_DATA"][::std::mem::align_of::<_FPO_DATA>() - 4usize];
    ["Offset of field: _FPO_DATA::ulOffStart"]
        [::std::mem::offset_of!(_FPO_DATA, ulOffStart) - 0usize];
    ["Offset of field: _FPO_DATA::cbProcSize"]
        [::std::mem::offset_of!(_FPO_DATA, cbProcSize) - 4usize];
    ["Offset of field: _FPO_DATA::cdwLocals"]
        [::std::mem::offset_of!(_FPO_DATA, cdwLocals) - 8usize];
    ["Offset of field: _FPO_DATA::cdwParams"]
        [::std::mem::offset_of!(_FPO_DATA, cdwParams) - 12usize];
};
impl _FPO_DATA {
    #[inline]
    pub fn cbProlog(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u16) }
    }
    #[inline]
    pub fn set_cbProlog(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cbProlog_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                8u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_cbProlog_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cbRegs(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_cbRegs(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cbRegs_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_cbRegs_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fHasSEH(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_fHasSEH(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fHasSEH_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_fHasSEH_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fUseBP(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_fUseBP(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fUseBP_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_fUseBP_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                13usize,
                1u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                13usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn cbFrame(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_cbFrame(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cbFrame_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_cbFrame_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cbProlog: WORD,
        cbRegs: WORD,
        fHasSEH: WORD,
        fUseBP: WORD,
        reserved: WORD,
        cbFrame: WORD,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let cbProlog: u16 = unsafe { ::std::mem::transmute(cbProlog) };
            cbProlog as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let cbRegs: u16 = unsafe { ::std::mem::transmute(cbRegs) };
            cbRegs as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let fHasSEH: u16 = unsafe { ::std::mem::transmute(fHasSEH) };
            fHasSEH as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let fUseBP: u16 = unsafe { ::std::mem::transmute(fUseBP) };
            fUseBP as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let reserved: u16 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let cbFrame: u16 = unsafe { ::std::mem::transmute(cbFrame) };
            cbFrame as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type FPO_DATA = _FPO_DATA;
pub type PFPO_DATA = *mut _FPO_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_DEBUG_MISC {
    pub DataType: DWORD,
    pub Length: DWORD,
    pub Unicode: BOOLEAN,
    pub Reserved: [BYTE; 3usize],
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_DEBUG_MISC"][::std::mem::size_of::<_IMAGE_DEBUG_MISC>() - 16usize];
    ["Alignment of _IMAGE_DEBUG_MISC"][::std::mem::align_of::<_IMAGE_DEBUG_MISC>() - 4usize];
    ["Offset of field: _IMAGE_DEBUG_MISC::DataType"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_MISC, DataType) - 0usize];
    ["Offset of field: _IMAGE_DEBUG_MISC::Length"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_MISC, Length) - 4usize];
    ["Offset of field: _IMAGE_DEBUG_MISC::Unicode"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_MISC, Unicode) - 8usize];
    ["Offset of field: _IMAGE_DEBUG_MISC::Reserved"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_MISC, Reserved) - 9usize];
    ["Offset of field: _IMAGE_DEBUG_MISC::Data"]
        [::std::mem::offset_of!(_IMAGE_DEBUG_MISC, Data) - 12usize];
};
pub type IMAGE_DEBUG_MISC = _IMAGE_DEBUG_MISC;
pub type PIMAGE_DEBUG_MISC = *mut _IMAGE_DEBUG_MISC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_FUNCTION_ENTRY {
    pub StartingAddress: DWORD,
    pub EndingAddress: DWORD,
    pub EndOfPrologue: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_FUNCTION_ENTRY"][::std::mem::size_of::<_IMAGE_FUNCTION_ENTRY>() - 12usize];
    ["Alignment of _IMAGE_FUNCTION_ENTRY"]
        [::std::mem::align_of::<_IMAGE_FUNCTION_ENTRY>() - 4usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY::StartingAddress"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY, StartingAddress) - 0usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY::EndingAddress"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY, EndingAddress) - 4usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY::EndOfPrologue"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY, EndOfPrologue) - 8usize];
};
pub type IMAGE_FUNCTION_ENTRY = _IMAGE_FUNCTION_ENTRY;
pub type PIMAGE_FUNCTION_ENTRY = *mut _IMAGE_FUNCTION_ENTRY;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub struct _IMAGE_FUNCTION_ENTRY64 {
    pub StartingAddress: ULONGLONG,
    pub EndingAddress: ULONGLONG,
    pub __bindgen_anon_1: _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1,
}
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1 {
    pub EndOfPrologue: ULONGLONG,
    pub UnwindInfoAddress: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1>() - 4usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1::EndOfPrologue"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1, EndOfPrologue) - 0usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1::UnwindInfoAddress"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY64__bindgen_ty_1, UnwindInfoAddress) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_FUNCTION_ENTRY64"][::std::mem::size_of::<_IMAGE_FUNCTION_ENTRY64>() - 24usize];
    ["Alignment of _IMAGE_FUNCTION_ENTRY64"]
        [::std::mem::align_of::<_IMAGE_FUNCTION_ENTRY64>() - 4usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY64::StartingAddress"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY64, StartingAddress) - 0usize];
    ["Offset of field: _IMAGE_FUNCTION_ENTRY64::EndingAddress"]
        [::std::mem::offset_of!(_IMAGE_FUNCTION_ENTRY64, EndingAddress) - 8usize];
};
pub type IMAGE_FUNCTION_ENTRY64 = _IMAGE_FUNCTION_ENTRY64;
pub type PIMAGE_FUNCTION_ENTRY64 = *mut _IMAGE_FUNCTION_ENTRY64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IMAGE_SEPARATE_DEBUG_HEADER {
    pub Signature: WORD,
    pub Flags: WORD,
    pub Machine: WORD,
    pub Characteristics: WORD,
    pub TimeDateStamp: DWORD,
    pub CheckSum: DWORD,
    pub ImageBase: DWORD,
    pub SizeOfImage: DWORD,
    pub NumberOfSections: DWORD,
    pub ExportedNamesSize: DWORD,
    pub DebugDirectorySize: DWORD,
    pub SectionAlignment: DWORD,
    pub Reserved: [DWORD; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_SEPARATE_DEBUG_HEADER"]
        [::std::mem::size_of::<_IMAGE_SEPARATE_DEBUG_HEADER>() - 48usize];
    ["Alignment of _IMAGE_SEPARATE_DEBUG_HEADER"]
        [::std::mem::align_of::<_IMAGE_SEPARATE_DEBUG_HEADER>() - 4usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::Signature"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, Signature) - 0usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::Flags"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, Flags) - 2usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::Machine"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, Machine) - 4usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::Characteristics"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, Characteristics) - 6usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::TimeDateStamp"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, TimeDateStamp) - 8usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::CheckSum"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, CheckSum) - 12usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::ImageBase"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, ImageBase) - 16usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::SizeOfImage"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, SizeOfImage) - 20usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::NumberOfSections"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, NumberOfSections) - 24usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::ExportedNamesSize"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, ExportedNamesSize) - 28usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::DebugDirectorySize"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, DebugDirectorySize) - 32usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::SectionAlignment"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, SectionAlignment) - 36usize];
    ["Offset of field: _IMAGE_SEPARATE_DEBUG_HEADER::Reserved"]
        [::std::mem::offset_of!(_IMAGE_SEPARATE_DEBUG_HEADER, Reserved) - 40usize];
};
pub type IMAGE_SEPARATE_DEBUG_HEADER = _IMAGE_SEPARATE_DEBUG_HEADER;
pub type PIMAGE_SEPARATE_DEBUG_HEADER = *mut _IMAGE_SEPARATE_DEBUG_HEADER;
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct _NON_PAGED_DEBUG_INFO {
    pub Signature: WORD,
    pub Flags: WORD,
    pub Size: DWORD,
    pub Machine: WORD,
    pub Characteristics: WORD,
    pub TimeDateStamp: DWORD,
    pub CheckSum: DWORD,
    pub SizeOfImage: DWORD,
    pub ImageBase: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NON_PAGED_DEBUG_INFO"][::std::mem::size_of::<_NON_PAGED_DEBUG_INFO>() - 32usize];
    ["Alignment of _NON_PAGED_DEBUG_INFO"]
        [::std::mem::align_of::<_NON_PAGED_DEBUG_INFO>() - 4usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::Signature"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, Signature) - 0usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::Flags"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, Flags) - 2usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::Size"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, Size) - 4usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::Machine"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, Machine) - 8usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::Characteristics"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, Characteristics) - 10usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::TimeDateStamp"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, TimeDateStamp) - 12usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::CheckSum"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, CheckSum) - 16usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::SizeOfImage"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, SizeOfImage) - 20usize];
    ["Offset of field: _NON_PAGED_DEBUG_INFO::ImageBase"]
        [::std::mem::offset_of!(_NON_PAGED_DEBUG_INFO, ImageBase) - 24usize];
};
pub type NON_PAGED_DEBUG_INFO = _NON_PAGED_DEBUG_INFO;
pub type PNON_PAGED_DEBUG_INFO = *mut _NON_PAGED_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageArchitectureHeader {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub FirstEntryRVA: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ImageArchitectureHeader"]
        [::std::mem::size_of::<_ImageArchitectureHeader>() - 8usize];
    ["Alignment of _ImageArchitectureHeader"]
        [::std::mem::align_of::<_ImageArchitectureHeader>() - 4usize];
    ["Offset of field: _ImageArchitectureHeader::FirstEntryRVA"]
        [::std::mem::offset_of!(_ImageArchitectureHeader, FirstEntryRVA) - 4usize];
};
impl _ImageArchitectureHeader {
    #[inline]
    pub fn AmaskValue(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_AmaskValue(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AmaskValue_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AmaskValue_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn AmaskShift(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_AmaskShift(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn AmaskShift_raw(this: *const Self) -> ::std::os::raw::c_uint {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_AmaskShift_raw(this: *mut Self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AmaskValue: ::std::os::raw::c_uint,
        AmaskShift: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let AmaskValue: u32 = unsafe { ::std::mem::transmute(AmaskValue) };
            AmaskValue as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let AmaskShift: u32 = unsafe { ::std::mem::transmute(AmaskShift) };
            AmaskShift as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type IMAGE_ARCHITECTURE_HEADER = _ImageArchitectureHeader;
pub type PIMAGE_ARCHITECTURE_HEADER = *mut _ImageArchitectureHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ImageArchitectureEntry {
    pub FixupInstRVA: DWORD,
    pub NewInst: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ImageArchitectureEntry"][::std::mem::size_of::<_ImageArchitectureEntry>() - 8usize];
    ["Alignment of _ImageArchitectureEntry"]
        [::std::mem::align_of::<_ImageArchitectureEntry>() - 4usize];
    ["Offset of field: _ImageArchitectureEntry::FixupInstRVA"]
        [::std::mem::offset_of!(_ImageArchitectureEntry, FixupInstRVA) - 0usize];
    ["Offset of field: _ImageArchitectureEntry::NewInst"]
        [::std::mem::offset_of!(_ImageArchitectureEntry, NewInst) - 4usize];
};
pub type IMAGE_ARCHITECTURE_ENTRY = _ImageArchitectureEntry;
pub type PIMAGE_ARCHITECTURE_ENTRY = *mut _ImageArchitectureEntry;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMPORT_OBJECT_HEADER {
    pub Sig1: WORD,
    pub Sig2: WORD,
    pub Version: WORD,
    pub Machine: WORD,
    pub TimeDateStamp: DWORD,
    pub SizeOfData: DWORD,
    pub __bindgen_anon_1: IMPORT_OBJECT_HEADER__bindgen_ty_1,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMPORT_OBJECT_HEADER__bindgen_ty_1 {
    pub Ordinal: WORD,
    pub Hint: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMPORT_OBJECT_HEADER__bindgen_ty_1"]
        [::std::mem::size_of::<IMPORT_OBJECT_HEADER__bindgen_ty_1>() - 2usize];
    ["Alignment of IMPORT_OBJECT_HEADER__bindgen_ty_1"]
        [::std::mem::align_of::<IMPORT_OBJECT_HEADER__bindgen_ty_1>() - 2usize];
    ["Offset of field: IMPORT_OBJECT_HEADER__bindgen_ty_1::Ordinal"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER__bindgen_ty_1, Ordinal) - 0usize];
    ["Offset of field: IMPORT_OBJECT_HEADER__bindgen_ty_1::Hint"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER__bindgen_ty_1, Hint) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMPORT_OBJECT_HEADER"][::std::mem::size_of::<IMPORT_OBJECT_HEADER>() - 20usize];
    ["Alignment of IMPORT_OBJECT_HEADER"][::std::mem::align_of::<IMPORT_OBJECT_HEADER>() - 4usize];
    ["Offset of field: IMPORT_OBJECT_HEADER::Sig1"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER, Sig1) - 0usize];
    ["Offset of field: IMPORT_OBJECT_HEADER::Sig2"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER, Sig2) - 2usize];
    ["Offset of field: IMPORT_OBJECT_HEADER::Version"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER, Version) - 4usize];
    ["Offset of field: IMPORT_OBJECT_HEADER::Machine"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER, Machine) - 6usize];
    ["Offset of field: IMPORT_OBJECT_HEADER::TimeDateStamp"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER, TimeDateStamp) - 8usize];
    ["Offset of field: IMPORT_OBJECT_HEADER::SizeOfData"]
        [::std::mem::offset_of!(IMPORT_OBJECT_HEADER, SizeOfData) - 12usize];
};
impl IMPORT_OBJECT_HEADER {
    #[inline]
    pub fn Type(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_Type(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Type_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                2u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_Type_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn NameType(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_NameType(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NameType_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                3u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_NameType_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> WORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> WORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 2usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                11u8,
            ) as u16)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: WORD) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 2usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                11u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Type: WORD,
        NameType: WORD,
        Reserved: WORD,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let Type: u16 = unsafe { ::std::mem::transmute(Type) };
            Type as u64
        });
        __bindgen_bitfield_unit.set(2usize, 3u8, {
            let NameType: u16 = unsafe { ::std::mem::transmute(NameType) };
            NameType as u64
        });
        __bindgen_bitfield_unit.set(5usize, 11u8, {
            let Reserved: u16 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_CODE: IMPORT_OBJECT_TYPE = 0;
pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_DATA: IMPORT_OBJECT_TYPE = 1;
pub const IMPORT_OBJECT_TYPE_IMPORT_OBJECT_CONST: IMPORT_OBJECT_TYPE = 2;
pub type IMPORT_OBJECT_TYPE = ::std::os::raw::c_int;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_ORDINAL: IMPORT_OBJECT_NAME_TYPE = 0;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME: IMPORT_OBJECT_NAME_TYPE = 1;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_NO_PREFIX: IMPORT_OBJECT_NAME_TYPE = 2;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_UNDECORATE: IMPORT_OBJECT_NAME_TYPE = 3;
pub const IMPORT_OBJECT_NAME_TYPE_IMPORT_OBJECT_NAME_EXPORTAS: IMPORT_OBJECT_NAME_TYPE = 4;
pub type IMPORT_OBJECT_NAME_TYPE = ::std::os::raw::c_int;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_ILONLY: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_32BITREQUIRED: ReplacesCorHdrNumericDefines =
    2;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_IL_LIBRARY: ReplacesCorHdrNumericDefines = 4;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_STRONGNAMESIGNED:
    ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_NATIVE_ENTRYPOINT:
    ReplacesCorHdrNumericDefines = 16;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_TRACKDEBUGDATA: ReplacesCorHdrNumericDefines =
    65536;
pub const ReplacesCorHdrNumericDefines_COMIMAGE_FLAGS_32BITPREFERRED: ReplacesCorHdrNumericDefines =
    131072;
pub const ReplacesCorHdrNumericDefines_COR_VERSION_MAJOR_V2: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_COR_VERSION_MAJOR: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_COR_VERSION_MINOR: ReplacesCorHdrNumericDefines = 5;
pub const ReplacesCorHdrNumericDefines_COR_DELETED_NAME_LENGTH: ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COR_VTABLEGAP_NAME_LENGTH: ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_NATIVE_TYPE_MAX_CB: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE:
    ReplacesCorHdrNumericDefines = 255;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_METHODRVA: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_EHRVA: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_MIH_BASICBLOCK: ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_32BIT: ReplacesCorHdrNumericDefines = 1;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_64BIT: ReplacesCorHdrNumericDefines = 2;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_FROM_UNMANAGED: ReplacesCorHdrNumericDefines = 4;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN:
    ReplacesCorHdrNumericDefines = 8;
pub const ReplacesCorHdrNumericDefines_COR_VTABLE_CALL_MOST_DERIVED: ReplacesCorHdrNumericDefines =
    16;
pub const ReplacesCorHdrNumericDefines_IMAGE_COR_EATJ_THUNK_SIZE: ReplacesCorHdrNumericDefines = 32;
pub const ReplacesCorHdrNumericDefines_MAX_CLASS_NAME: ReplacesCorHdrNumericDefines = 1024;
pub const ReplacesCorHdrNumericDefines_MAX_PACKAGE_NAME: ReplacesCorHdrNumericDefines = 1024;
pub type ReplacesCorHdrNumericDefines = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IMAGE_COR20_HEADER {
    pub cb: DWORD,
    pub MajorRuntimeVersion: WORD,
    pub MinorRuntimeVersion: WORD,
    pub MetaData: IMAGE_DATA_DIRECTORY,
    pub Flags: DWORD,
    pub __bindgen_anon_1: IMAGE_COR20_HEADER__bindgen_ty_1,
    pub Resources: IMAGE_DATA_DIRECTORY,
    pub StrongNameSignature: IMAGE_DATA_DIRECTORY,
    pub CodeManagerTable: IMAGE_DATA_DIRECTORY,
    pub VTableFixups: IMAGE_DATA_DIRECTORY,
    pub ExportAddressTableJumps: IMAGE_DATA_DIRECTORY,
    pub ManagedNativeHeader: IMAGE_DATA_DIRECTORY,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IMAGE_COR20_HEADER__bindgen_ty_1 {
    pub EntryPointToken: DWORD,
    pub EntryPointRVA: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_COR20_HEADER__bindgen_ty_1"]
        [::std::mem::size_of::<IMAGE_COR20_HEADER__bindgen_ty_1>() - 4usize];
    ["Alignment of IMAGE_COR20_HEADER__bindgen_ty_1"]
        [::std::mem::align_of::<IMAGE_COR20_HEADER__bindgen_ty_1>() - 4usize];
    ["Offset of field: IMAGE_COR20_HEADER__bindgen_ty_1::EntryPointToken"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER__bindgen_ty_1, EntryPointToken) - 0usize];
    ["Offset of field: IMAGE_COR20_HEADER__bindgen_ty_1::EntryPointRVA"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER__bindgen_ty_1, EntryPointRVA) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IMAGE_COR20_HEADER"][::std::mem::size_of::<IMAGE_COR20_HEADER>() - 72usize];
    ["Alignment of IMAGE_COR20_HEADER"][::std::mem::align_of::<IMAGE_COR20_HEADER>() - 4usize];
    ["Offset of field: IMAGE_COR20_HEADER::cb"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, cb) - 0usize];
    ["Offset of field: IMAGE_COR20_HEADER::MajorRuntimeVersion"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, MajorRuntimeVersion) - 4usize];
    ["Offset of field: IMAGE_COR20_HEADER::MinorRuntimeVersion"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, MinorRuntimeVersion) - 6usize];
    ["Offset of field: IMAGE_COR20_HEADER::MetaData"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, MetaData) - 8usize];
    ["Offset of field: IMAGE_COR20_HEADER::Flags"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, Flags) - 16usize];
    ["Offset of field: IMAGE_COR20_HEADER::Resources"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, Resources) - 24usize];
    ["Offset of field: IMAGE_COR20_HEADER::StrongNameSignature"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, StrongNameSignature) - 32usize];
    ["Offset of field: IMAGE_COR20_HEADER::CodeManagerTable"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, CodeManagerTable) - 40usize];
    ["Offset of field: IMAGE_COR20_HEADER::VTableFixups"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, VTableFixups) - 48usize];
    ["Offset of field: IMAGE_COR20_HEADER::ExportAddressTableJumps"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, ExportAddressTableJumps) - 56usize];
    ["Offset of field: IMAGE_COR20_HEADER::ManagedNativeHeader"]
        [::std::mem::offset_of!(IMAGE_COR20_HEADER, ManagedNativeHeader) - 64usize];
};
pub type PIMAGE_COR20_HEADER = *mut IMAGE_COR20_HEADER;
unsafe extern "C" {
    pub fn RtlCaptureStackBackTrace(
        FramesToSkip: DWORD,
        FramesToCapture: DWORD,
        BackTrace: *mut PVOID,
        BackTraceHash: PDWORD,
    ) -> WORD;
}
unsafe extern "C" {
    pub fn RtlCaptureContext(ContextRecord: PCONTEXT);
}
unsafe extern "C" {
    pub fn RtlCaptureContext2(ContextRecord: PCONTEXT);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNWIND_HISTORY_TABLE_ENTRY {
    pub ImageBase: ULONG_PTR,
    pub FunctionEntry: PRUNTIME_FUNCTION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UNWIND_HISTORY_TABLE_ENTRY"]
        [::std::mem::size_of::<_UNWIND_HISTORY_TABLE_ENTRY>() - 16usize];
    ["Alignment of _UNWIND_HISTORY_TABLE_ENTRY"]
        [::std::mem::align_of::<_UNWIND_HISTORY_TABLE_ENTRY>() - 8usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE_ENTRY::ImageBase"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE_ENTRY, ImageBase) - 0usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE_ENTRY::FunctionEntry"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE_ENTRY, FunctionEntry) - 8usize];
};
pub type UNWIND_HISTORY_TABLE_ENTRY = _UNWIND_HISTORY_TABLE_ENTRY;
pub type PUNWIND_HISTORY_TABLE_ENTRY = *mut _UNWIND_HISTORY_TABLE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNWIND_HISTORY_TABLE {
    pub Count: DWORD,
    pub LocalHint: BYTE,
    pub GlobalHint: BYTE,
    pub Search: BYTE,
    pub Once: BYTE,
    pub LowAddress: ULONG_PTR,
    pub HighAddress: ULONG_PTR,
    pub Entry: [UNWIND_HISTORY_TABLE_ENTRY; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UNWIND_HISTORY_TABLE"][::std::mem::size_of::<_UNWIND_HISTORY_TABLE>() - 216usize];
    ["Alignment of _UNWIND_HISTORY_TABLE"]
        [::std::mem::align_of::<_UNWIND_HISTORY_TABLE>() - 8usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::Count"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, Count) - 0usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::LocalHint"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, LocalHint) - 4usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::GlobalHint"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, GlobalHint) - 5usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::Search"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, Search) - 6usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::Once"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, Once) - 7usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::LowAddress"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, LowAddress) - 8usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::HighAddress"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, HighAddress) - 16usize];
    ["Offset of field: _UNWIND_HISTORY_TABLE::Entry"]
        [::std::mem::offset_of!(_UNWIND_HISTORY_TABLE, Entry) - 24usize];
};
pub type UNWIND_HISTORY_TABLE = _UNWIND_HISTORY_TABLE;
pub type PUNWIND_HISTORY_TABLE = *mut _UNWIND_HISTORY_TABLE;
unsafe extern "C" {
    pub fn RtlUnwind(
        TargetFrame: PVOID,
        TargetIp: PVOID,
        ExceptionRecord: PEXCEPTION_RECORD,
        ReturnValue: PVOID,
    );
}
unsafe extern "C" {
    pub fn RtlAddFunctionTable(
        FunctionTable: PRUNTIME_FUNCTION,
        EntryCount: DWORD,
        BaseAddress: DWORD64,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn RtlDeleteFunctionTable(FunctionTable: PRUNTIME_FUNCTION) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn RtlInstallFunctionTableCallback(
        TableIdentifier: DWORD64,
        BaseAddress: DWORD64,
        Length: DWORD,
        Callback: PGET_RUNTIME_FUNCTION_CALLBACK,
        Context: PVOID,
        OutOfProcessCallbackDll: PCWSTR,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn RtlAddGrowableFunctionTable(
        DynamicTable: *mut PVOID,
        FunctionTable: PRUNTIME_FUNCTION,
        EntryCount: DWORD,
        MaximumEntryCount: DWORD,
        RangeBase: ULONG_PTR,
        RangeEnd: ULONG_PTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlGrowFunctionTable(DynamicTable: PVOID, NewEntryCount: DWORD);
}
unsafe extern "C" {
    pub fn RtlDeleteGrowableFunctionTable(DynamicTable: PVOID);
}
unsafe extern "C" {
    pub fn RtlLookupFunctionEntry(
        ControlPc: DWORD64,
        ImageBase: PDWORD64,
        HistoryTable: PUNWIND_HISTORY_TABLE,
    ) -> PRUNTIME_FUNCTION;
}
unsafe extern "C" {
    pub fn RtlRestoreContext(ContextRecord: PCONTEXT, ExceptionRecord: *mut _EXCEPTION_RECORD);
}
unsafe extern "C" {
    pub fn RtlUnwindEx(
        TargetFrame: PVOID,
        TargetIp: PVOID,
        ExceptionRecord: PEXCEPTION_RECORD,
        ReturnValue: PVOID,
        ContextRecord: PCONTEXT,
        HistoryTable: PUNWIND_HISTORY_TABLE,
    );
}
unsafe extern "C" {
    pub fn RtlVirtualUnwind(
        HandlerType: DWORD,
        ImageBase: DWORD64,
        ControlPc: DWORD64,
        FunctionEntry: PRUNTIME_FUNCTION,
        ContextRecord: PCONTEXT,
        HandlerData: *mut PVOID,
        EstablisherFrame: PDWORD64,
        ContextPointers: PKNONVOLATILE_CONTEXT_POINTERS,
    ) -> PEXCEPTION_ROUTINE;
}
unsafe extern "C" {
    pub fn RtlRaiseException(ExceptionRecord: PEXCEPTION_RECORD);
}
unsafe extern "C" {
    pub fn RtlPcToFileHeader(PcValue: PVOID, BaseOfImage: *mut PVOID) -> PVOID;
}
unsafe extern "C" {
    pub fn RtlCompareMemory(
        Source1: *const ::std::os::raw::c_void,
        Source2: *const ::std::os::raw::c_void,
        Length: SIZE_T,
    ) -> SIZE_T;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct _SLIST_ENTRY {
    pub Next: *mut _SLIST_ENTRY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SLIST_ENTRY"][::std::mem::size_of::<_SLIST_ENTRY>() - 16usize];
    ["Alignment of _SLIST_ENTRY"][::std::mem::align_of::<_SLIST_ENTRY>() - 16usize];
    ["Offset of field: _SLIST_ENTRY::Next"][::std::mem::offset_of!(_SLIST_ENTRY, Next) - 0usize];
};
pub type SLIST_ENTRY = _SLIST_ENTRY;
pub type PSLIST_ENTRY = *mut _SLIST_ENTRY;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub union _SLIST_HEADER {
    pub __bindgen_anon_1: _SLIST_HEADER__bindgen_ty_1,
    pub HeaderX64: _SLIST_HEADER__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SLIST_HEADER__bindgen_ty_1 {
    pub Alignment: ULONGLONG,
    pub Region: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SLIST_HEADER__bindgen_ty_1"]
        [::std::mem::size_of::<_SLIST_HEADER__bindgen_ty_1>() - 16usize];
    ["Alignment of _SLIST_HEADER__bindgen_ty_1"]
        [::std::mem::align_of::<_SLIST_HEADER__bindgen_ty_1>() - 8usize];
    ["Offset of field: _SLIST_HEADER__bindgen_ty_1::Alignment"]
        [::std::mem::offset_of!(_SLIST_HEADER__bindgen_ty_1, Alignment) - 0usize];
    ["Offset of field: _SLIST_HEADER__bindgen_ty_1::Region"]
        [::std::mem::offset_of!(_SLIST_HEADER__bindgen_ty_1, Region) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SLIST_HEADER__bindgen_ty_2 {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 16usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SLIST_HEADER__bindgen_ty_2"]
        [::std::mem::size_of::<_SLIST_HEADER__bindgen_ty_2>() - 16usize];
    ["Alignment of _SLIST_HEADER__bindgen_ty_2"]
        [::std::mem::align_of::<_SLIST_HEADER__bindgen_ty_2>() - 8usize];
};
impl _SLIST_HEADER__bindgen_ty_2 {
    #[inline]
    pub fn Depth(&self) -> ULONGLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_Depth(&mut self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Depth_raw(this: *const Self) -> ULONGLONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_Depth_raw(this: *mut Self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Sequence(&self) -> ULONGLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 48u8) as u64) }
    }
    #[inline]
    pub fn set_Sequence(&mut self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 48u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Sequence_raw(this: *const Self) -> ULONGLONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                48u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_Sequence_raw(this: *mut Self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                48u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> ULONGLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(64usize, 4u8) as u64) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(64usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> ULONGLONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                64usize,
                4u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                64usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn NextEntry(&self) -> ULONGLONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(68usize, 60u8) as u64) }
    }
    #[inline]
    pub fn set_NextEntry(&mut self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(68usize, 60u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NextEntry_raw(this: *const Self) -> ULONGLONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 16usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                68usize,
                60u8,
            ) as u64)
        }
    }
    #[inline]
    pub unsafe fn set_NextEntry_raw(this: *mut Self, val: ULONGLONG) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 16usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                68usize,
                60u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Depth: ULONGLONG,
        Sequence: ULONGLONG,
        Reserved: ULONGLONG,
        NextEntry: ULONGLONG,
    ) -> __BindgenBitfieldUnit<[u8; 16usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 16usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let Depth: u64 = unsafe { ::std::mem::transmute(Depth) };
            Depth as u64
        });
        __bindgen_bitfield_unit.set(16usize, 48u8, {
            let Sequence: u64 = unsafe { ::std::mem::transmute(Sequence) };
            Sequence as u64
        });
        __bindgen_bitfield_unit.set(64usize, 4u8, {
            let Reserved: u64 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit.set(68usize, 60u8, {
            let NextEntry: u64 = unsafe { ::std::mem::transmute(NextEntry) };
            NextEntry as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SLIST_HEADER"][::std::mem::size_of::<_SLIST_HEADER>() - 16usize];
    ["Alignment of _SLIST_HEADER"][::std::mem::align_of::<_SLIST_HEADER>() - 16usize];
    ["Offset of field: _SLIST_HEADER::HeaderX64"]
        [::std::mem::offset_of!(_SLIST_HEADER, HeaderX64) - 0usize];
};
pub type SLIST_HEADER = _SLIST_HEADER;
pub type PSLIST_HEADER = *mut _SLIST_HEADER;
unsafe extern "C" {
    pub fn RtlInitializeSListHead(ListHead: PSLIST_HEADER);
}
unsafe extern "C" {
    pub fn RtlFirstEntrySList(ListHead: *const SLIST_HEADER) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn RtlInterlockedPopEntrySList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn RtlInterlockedPushEntrySList(
        ListHead: PSLIST_HEADER,
        ListEntry: PSLIST_ENTRY,
    ) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn RtlInterlockedPushListSListEx(
        ListHead: PSLIST_HEADER,
        List: PSLIST_ENTRY,
        ListEnd: PSLIST_ENTRY,
        Count: DWORD,
    ) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn RtlInterlockedFlushSList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn RtlQueryDepthSList(ListHead: PSLIST_HEADER) -> WORD;
}
unsafe extern "C" {
    pub fn RtlGetReturnAddressHijackTarget() -> ULONG_PTR;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _RTL_RUN_ONCE {
    pub Ptr: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RTL_RUN_ONCE"][::std::mem::size_of::<_RTL_RUN_ONCE>() - 8usize];
    ["Alignment of _RTL_RUN_ONCE"][::std::mem::align_of::<_RTL_RUN_ONCE>() - 8usize];
    ["Offset of field: _RTL_RUN_ONCE::Ptr"][::std::mem::offset_of!(_RTL_RUN_ONCE, Ptr) - 0usize];
};
pub type RTL_RUN_ONCE = _RTL_RUN_ONCE;
pub type PRTL_RUN_ONCE = *mut _RTL_RUN_ONCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_BARRIER {
    pub Reserved1: DWORD,
    pub Reserved2: DWORD,
    pub Reserved3: [ULONG_PTR; 2usize],
    pub Reserved4: DWORD,
    pub Reserved5: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RTL_BARRIER"][::std::mem::size_of::<_RTL_BARRIER>() - 32usize];
    ["Alignment of _RTL_BARRIER"][::std::mem::align_of::<_RTL_BARRIER>() - 8usize];
    ["Offset of field: _RTL_BARRIER::Reserved1"]
        [::std::mem::offset_of!(_RTL_BARRIER, Reserved1) - 0usize];
    ["Offset of field: _RTL_BARRIER::Reserved2"]
        [::std::mem::offset_of!(_RTL_BARRIER, Reserved2) - 4usize];
    ["Offset of field: _RTL_BARRIER::Reserved3"]
        [::std::mem::offset_of!(_RTL_BARRIER, Reserved3) - 8usize];
    ["Offset of field: _RTL_BARRIER::Reserved4"]
        [::std::mem::offset_of!(_RTL_BARRIER, Reserved4) - 24usize];
    ["Offset of field: _RTL_BARRIER::Reserved5"]
        [::std::mem::offset_of!(_RTL_BARRIER, Reserved5) - 28usize];
};
pub type RTL_BARRIER = _RTL_BARRIER;
pub type PRTL_BARRIER = *mut _RTL_BARRIER;
unsafe extern "C" {
    pub fn __fastfail(Code: ::std::os::raw::c_uint) -> !;
}
unsafe extern "C" {
    pub fn RtlCopyDeviceMemory(
        Destination: *mut ::std::os::raw::c_void,
        Source: *const ::std::os::raw::c_void,
        Length: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn RtlCopyVolatileMemory(
        Destination: *mut ::std::os::raw::c_void,
        Source: *const ::std::os::raw::c_void,
        Length: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn RtlMoveVolatileMemory(
        Destination: *mut ::std::os::raw::c_void,
        Source: *const ::std::os::raw::c_void,
        Length: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn RtlSetVolatileMemory(
        Destination: *mut ::std::os::raw::c_void,
        Fill: ::std::os::raw::c_int,
        Length: usize,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MESSAGE_RESOURCE_ENTRY {
    pub Length: WORD,
    pub Flags: WORD,
    pub Text: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MESSAGE_RESOURCE_ENTRY"][::std::mem::size_of::<_MESSAGE_RESOURCE_ENTRY>() - 6usize];
    ["Alignment of _MESSAGE_RESOURCE_ENTRY"]
        [::std::mem::align_of::<_MESSAGE_RESOURCE_ENTRY>() - 2usize];
    ["Offset of field: _MESSAGE_RESOURCE_ENTRY::Length"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_ENTRY, Length) - 0usize];
    ["Offset of field: _MESSAGE_RESOURCE_ENTRY::Flags"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_ENTRY, Flags) - 2usize];
    ["Offset of field: _MESSAGE_RESOURCE_ENTRY::Text"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_ENTRY, Text) - 4usize];
};
pub type MESSAGE_RESOURCE_ENTRY = _MESSAGE_RESOURCE_ENTRY;
pub type PMESSAGE_RESOURCE_ENTRY = *mut _MESSAGE_RESOURCE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MESSAGE_RESOURCE_BLOCK {
    pub LowId: DWORD,
    pub HighId: DWORD,
    pub OffsetToEntries: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MESSAGE_RESOURCE_BLOCK"][::std::mem::size_of::<_MESSAGE_RESOURCE_BLOCK>() - 12usize];
    ["Alignment of _MESSAGE_RESOURCE_BLOCK"]
        [::std::mem::align_of::<_MESSAGE_RESOURCE_BLOCK>() - 4usize];
    ["Offset of field: _MESSAGE_RESOURCE_BLOCK::LowId"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_BLOCK, LowId) - 0usize];
    ["Offset of field: _MESSAGE_RESOURCE_BLOCK::HighId"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_BLOCK, HighId) - 4usize];
    ["Offset of field: _MESSAGE_RESOURCE_BLOCK::OffsetToEntries"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_BLOCK, OffsetToEntries) - 8usize];
};
pub type MESSAGE_RESOURCE_BLOCK = _MESSAGE_RESOURCE_BLOCK;
pub type PMESSAGE_RESOURCE_BLOCK = *mut _MESSAGE_RESOURCE_BLOCK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MESSAGE_RESOURCE_DATA {
    pub NumberOfBlocks: DWORD,
    pub Blocks: [MESSAGE_RESOURCE_BLOCK; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MESSAGE_RESOURCE_DATA"][::std::mem::size_of::<_MESSAGE_RESOURCE_DATA>() - 16usize];
    ["Alignment of _MESSAGE_RESOURCE_DATA"]
        [::std::mem::align_of::<_MESSAGE_RESOURCE_DATA>() - 4usize];
    ["Offset of field: _MESSAGE_RESOURCE_DATA::NumberOfBlocks"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_DATA, NumberOfBlocks) - 0usize];
    ["Offset of field: _MESSAGE_RESOURCE_DATA::Blocks"]
        [::std::mem::offset_of!(_MESSAGE_RESOURCE_DATA, Blocks) - 4usize];
};
pub type MESSAGE_RESOURCE_DATA = _MESSAGE_RESOURCE_DATA;
pub type PMESSAGE_RESOURCE_DATA = *mut _MESSAGE_RESOURCE_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOA {
    pub dwOSVersionInfoSize: DWORD,
    pub dwMajorVersion: DWORD,
    pub dwMinorVersion: DWORD,
    pub dwBuildNumber: DWORD,
    pub dwPlatformId: DWORD,
    pub szCSDVersion: [CHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSVERSIONINFOA"][::std::mem::size_of::<_OSVERSIONINFOA>() - 148usize];
    ["Alignment of _OSVERSIONINFOA"][::std::mem::align_of::<_OSVERSIONINFOA>() - 4usize];
    ["Offset of field: _OSVERSIONINFOA::dwOSVersionInfoSize"]
        [::std::mem::offset_of!(_OSVERSIONINFOA, dwOSVersionInfoSize) - 0usize];
    ["Offset of field: _OSVERSIONINFOA::dwMajorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOA, dwMajorVersion) - 4usize];
    ["Offset of field: _OSVERSIONINFOA::dwMinorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOA, dwMinorVersion) - 8usize];
    ["Offset of field: _OSVERSIONINFOA::dwBuildNumber"]
        [::std::mem::offset_of!(_OSVERSIONINFOA, dwBuildNumber) - 12usize];
    ["Offset of field: _OSVERSIONINFOA::dwPlatformId"]
        [::std::mem::offset_of!(_OSVERSIONINFOA, dwPlatformId) - 16usize];
    ["Offset of field: _OSVERSIONINFOA::szCSDVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOA, szCSDVersion) - 20usize];
};
pub type OSVERSIONINFOA = _OSVERSIONINFOA;
pub type POSVERSIONINFOA = *mut _OSVERSIONINFOA;
pub type LPOSVERSIONINFOA = *mut _OSVERSIONINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOW {
    pub dwOSVersionInfoSize: DWORD,
    pub dwMajorVersion: DWORD,
    pub dwMinorVersion: DWORD,
    pub dwBuildNumber: DWORD,
    pub dwPlatformId: DWORD,
    pub szCSDVersion: [WCHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSVERSIONINFOW"][::std::mem::size_of::<_OSVERSIONINFOW>() - 276usize];
    ["Alignment of _OSVERSIONINFOW"][::std::mem::align_of::<_OSVERSIONINFOW>() - 4usize];
    ["Offset of field: _OSVERSIONINFOW::dwOSVersionInfoSize"]
        [::std::mem::offset_of!(_OSVERSIONINFOW, dwOSVersionInfoSize) - 0usize];
    ["Offset of field: _OSVERSIONINFOW::dwMajorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOW, dwMajorVersion) - 4usize];
    ["Offset of field: _OSVERSIONINFOW::dwMinorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOW, dwMinorVersion) - 8usize];
    ["Offset of field: _OSVERSIONINFOW::dwBuildNumber"]
        [::std::mem::offset_of!(_OSVERSIONINFOW, dwBuildNumber) - 12usize];
    ["Offset of field: _OSVERSIONINFOW::dwPlatformId"]
        [::std::mem::offset_of!(_OSVERSIONINFOW, dwPlatformId) - 16usize];
    ["Offset of field: _OSVERSIONINFOW::szCSDVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOW, szCSDVersion) - 20usize];
};
pub type OSVERSIONINFOW = _OSVERSIONINFOW;
pub type POSVERSIONINFOW = *mut _OSVERSIONINFOW;
pub type LPOSVERSIONINFOW = *mut _OSVERSIONINFOW;
pub type RTL_OSVERSIONINFOW = _OSVERSIONINFOW;
pub type PRTL_OSVERSIONINFOW = *mut _OSVERSIONINFOW;
pub type OSVERSIONINFO = OSVERSIONINFOA;
pub type POSVERSIONINFO = POSVERSIONINFOA;
pub type LPOSVERSIONINFO = LPOSVERSIONINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOEXA {
    pub dwOSVersionInfoSize: DWORD,
    pub dwMajorVersion: DWORD,
    pub dwMinorVersion: DWORD,
    pub dwBuildNumber: DWORD,
    pub dwPlatformId: DWORD,
    pub szCSDVersion: [CHAR; 128usize],
    pub wServicePackMajor: WORD,
    pub wServicePackMinor: WORD,
    pub wSuiteMask: WORD,
    pub wProductType: BYTE,
    pub wReserved: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSVERSIONINFOEXA"][::std::mem::size_of::<_OSVERSIONINFOEXA>() - 156usize];
    ["Alignment of _OSVERSIONINFOEXA"][::std::mem::align_of::<_OSVERSIONINFOEXA>() - 4usize];
    ["Offset of field: _OSVERSIONINFOEXA::dwOSVersionInfoSize"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, dwOSVersionInfoSize) - 0usize];
    ["Offset of field: _OSVERSIONINFOEXA::dwMajorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, dwMajorVersion) - 4usize];
    ["Offset of field: _OSVERSIONINFOEXA::dwMinorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, dwMinorVersion) - 8usize];
    ["Offset of field: _OSVERSIONINFOEXA::dwBuildNumber"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, dwBuildNumber) - 12usize];
    ["Offset of field: _OSVERSIONINFOEXA::dwPlatformId"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, dwPlatformId) - 16usize];
    ["Offset of field: _OSVERSIONINFOEXA::szCSDVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, szCSDVersion) - 20usize];
    ["Offset of field: _OSVERSIONINFOEXA::wServicePackMajor"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, wServicePackMajor) - 148usize];
    ["Offset of field: _OSVERSIONINFOEXA::wServicePackMinor"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, wServicePackMinor) - 150usize];
    ["Offset of field: _OSVERSIONINFOEXA::wSuiteMask"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, wSuiteMask) - 152usize];
    ["Offset of field: _OSVERSIONINFOEXA::wProductType"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, wProductType) - 154usize];
    ["Offset of field: _OSVERSIONINFOEXA::wReserved"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXA, wReserved) - 155usize];
};
pub type OSVERSIONINFOEXA = _OSVERSIONINFOEXA;
pub type POSVERSIONINFOEXA = *mut _OSVERSIONINFOEXA;
pub type LPOSVERSIONINFOEXA = *mut _OSVERSIONINFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OSVERSIONINFOEXW {
    pub dwOSVersionInfoSize: DWORD,
    pub dwMajorVersion: DWORD,
    pub dwMinorVersion: DWORD,
    pub dwBuildNumber: DWORD,
    pub dwPlatformId: DWORD,
    pub szCSDVersion: [WCHAR; 128usize],
    pub wServicePackMajor: WORD,
    pub wServicePackMinor: WORD,
    pub wSuiteMask: WORD,
    pub wProductType: BYTE,
    pub wReserved: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OSVERSIONINFOEXW"][::std::mem::size_of::<_OSVERSIONINFOEXW>() - 284usize];
    ["Alignment of _OSVERSIONINFOEXW"][::std::mem::align_of::<_OSVERSIONINFOEXW>() - 4usize];
    ["Offset of field: _OSVERSIONINFOEXW::dwOSVersionInfoSize"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, dwOSVersionInfoSize) - 0usize];
    ["Offset of field: _OSVERSIONINFOEXW::dwMajorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, dwMajorVersion) - 4usize];
    ["Offset of field: _OSVERSIONINFOEXW::dwMinorVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, dwMinorVersion) - 8usize];
    ["Offset of field: _OSVERSIONINFOEXW::dwBuildNumber"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, dwBuildNumber) - 12usize];
    ["Offset of field: _OSVERSIONINFOEXW::dwPlatformId"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, dwPlatformId) - 16usize];
    ["Offset of field: _OSVERSIONINFOEXW::szCSDVersion"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, szCSDVersion) - 20usize];
    ["Offset of field: _OSVERSIONINFOEXW::wServicePackMajor"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, wServicePackMajor) - 276usize];
    ["Offset of field: _OSVERSIONINFOEXW::wServicePackMinor"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, wServicePackMinor) - 278usize];
    ["Offset of field: _OSVERSIONINFOEXW::wSuiteMask"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, wSuiteMask) - 280usize];
    ["Offset of field: _OSVERSIONINFOEXW::wProductType"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, wProductType) - 282usize];
    ["Offset of field: _OSVERSIONINFOEXW::wReserved"]
        [::std::mem::offset_of!(_OSVERSIONINFOEXW, wReserved) - 283usize];
};
pub type OSVERSIONINFOEXW = _OSVERSIONINFOEXW;
pub type POSVERSIONINFOEXW = *mut _OSVERSIONINFOEXW;
pub type LPOSVERSIONINFOEXW = *mut _OSVERSIONINFOEXW;
pub type RTL_OSVERSIONINFOEXW = _OSVERSIONINFOEXW;
pub type PRTL_OSVERSIONINFOEXW = *mut _OSVERSIONINFOEXW;
pub type OSVERSIONINFOEX = OSVERSIONINFOEXA;
pub type POSVERSIONINFOEX = POSVERSIONINFOEXA;
pub type LPOSVERSIONINFOEX = LPOSVERSIONINFOEXA;
unsafe extern "C" {
    pub fn VerSetConditionMask(
        ConditionMask: ULONGLONG,
        TypeMask: DWORD,
        Condition: BYTE,
    ) -> ULONGLONG;
}
unsafe extern "C" {
    pub fn RtlGetProductInfo(
        OSMajorVersion: DWORD,
        OSMinorVersion: DWORD,
        SpMajorVersion: DWORD,
        SpMinorVersion: DWORD,
        ReturnedProductType: PDWORD,
    ) -> BOOLEAN;
}
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadInvalidInfoClass: _RTL_UMS_THREAD_INFO_CLASS = 0;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadUserContext: _RTL_UMS_THREAD_INFO_CLASS = 1;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadPriority: _RTL_UMS_THREAD_INFO_CLASS = 2;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadAffinity: _RTL_UMS_THREAD_INFO_CLASS = 3;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadTeb: _RTL_UMS_THREAD_INFO_CLASS = 4;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadIsSuspended: _RTL_UMS_THREAD_INFO_CLASS = 5;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadIsTerminated: _RTL_UMS_THREAD_INFO_CLASS = 6;
pub const _RTL_UMS_THREAD_INFO_CLASS_UmsThreadMaxInfoClass: _RTL_UMS_THREAD_INFO_CLASS = 7;
pub type _RTL_UMS_THREAD_INFO_CLASS = ::std::os::raw::c_int;
pub use self::_RTL_UMS_THREAD_INFO_CLASS as RTL_UMS_THREAD_INFO_CLASS;
pub type PRTL_UMS_THREAD_INFO_CLASS = *mut _RTL_UMS_THREAD_INFO_CLASS;
pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerStartup: _RTL_UMS_SCHEDULER_REASON = 0;
pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerThreadBlocked: _RTL_UMS_SCHEDULER_REASON = 1;
pub const _RTL_UMS_SCHEDULER_REASON_UmsSchedulerThreadYield: _RTL_UMS_SCHEDULER_REASON = 2;
pub type _RTL_UMS_SCHEDULER_REASON = ::std::os::raw::c_int;
pub use self::_RTL_UMS_SCHEDULER_REASON as RTL_UMS_SCHEDULER_REASON;
pub type PRTL_UMS_SCHEDULER_REASON = *mut _RTL_UMS_SCHEDULER_REASON;
pub type PRTL_UMS_SCHEDULER_ENTRY_POINT = ::std::option::Option<
    unsafe extern "C" fn(arg1: RTL_UMS_SCHEDULER_REASON, arg2: ULONG_PTR, arg3: PVOID),
>;
unsafe extern "C" {
    pub fn RtlCrc32(Buffer: *const ::std::os::raw::c_void, Size: usize, InitialCrc: DWORD)
    -> DWORD;
}
unsafe extern "C" {
    pub fn RtlCrc64(
        Buffer: *const ::std::os::raw::c_void,
        Size: usize,
        InitialCrc: ULONGLONG,
    ) -> ULONGLONG;
}
pub const _OS_DEPLOYEMENT_STATE_VALUES_OS_DEPLOYMENT_STANDARD: _OS_DEPLOYEMENT_STATE_VALUES = 1;
pub const _OS_DEPLOYEMENT_STATE_VALUES_OS_DEPLOYMENT_COMPACT: _OS_DEPLOYEMENT_STATE_VALUES = 2;
pub type _OS_DEPLOYEMENT_STATE_VALUES = ::std::os::raw::c_int;
pub use self::_OS_DEPLOYEMENT_STATE_VALUES as OS_DEPLOYEMENT_STATE_VALUES;
unsafe extern "C" {
    pub fn RtlOsDeploymentState(Flags: DWORD) -> OS_DEPLOYEMENT_STATE_VALUES;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NV_MEMORY_RANGE {
    pub BaseAddress: *mut ::std::os::raw::c_void,
    pub Length: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NV_MEMORY_RANGE"][::std::mem::size_of::<_NV_MEMORY_RANGE>() - 16usize];
    ["Alignment of _NV_MEMORY_RANGE"][::std::mem::align_of::<_NV_MEMORY_RANGE>() - 8usize];
    ["Offset of field: _NV_MEMORY_RANGE::BaseAddress"]
        [::std::mem::offset_of!(_NV_MEMORY_RANGE, BaseAddress) - 0usize];
    ["Offset of field: _NV_MEMORY_RANGE::Length"]
        [::std::mem::offset_of!(_NV_MEMORY_RANGE, Length) - 8usize];
};
pub type NV_MEMORY_RANGE = _NV_MEMORY_RANGE;
pub type PNV_MEMORY_RANGE = *mut _NV_MEMORY_RANGE;
unsafe extern "C" {
    pub fn RtlGetNonVolatileToken(NvBuffer: PVOID, Size: SIZE_T, NvToken: *mut PVOID) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlFreeNonVolatileToken(NvToken: PVOID) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlFlushNonVolatileMemory(
        NvToken: PVOID,
        NvBuffer: PVOID,
        Size: SIZE_T,
        Flags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlDrainNonVolatileFlush(NvToken: PVOID) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlWriteNonVolatileMemory(
        NvToken: PVOID,
        NvDestination: *mut ::std::os::raw::c_void,
        Source: *const ::std::os::raw::c_void,
        Size: SIZE_T,
        Flags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlFillNonVolatileMemory(
        NvToken: PVOID,
        NvDestination: *mut ::std::os::raw::c_void,
        Size: SIZE_T,
        Value: BYTE,
        Flags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlFlushNonVolatileMemoryRanges(
        NvToken: PVOID,
        NvRanges: PNV_MEMORY_RANGE,
        NumRanges: SIZE_T,
        Flags: DWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CORRELATION_VECTOR {
    pub Version: CHAR,
    pub Vector: [CHAR; 129usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CORRELATION_VECTOR"][::std::mem::size_of::<CORRELATION_VECTOR>() - 130usize];
    ["Alignment of CORRELATION_VECTOR"][::std::mem::align_of::<CORRELATION_VECTOR>() - 1usize];
    ["Offset of field: CORRELATION_VECTOR::Version"]
        [::std::mem::offset_of!(CORRELATION_VECTOR, Version) - 0usize];
    ["Offset of field: CORRELATION_VECTOR::Vector"]
        [::std::mem::offset_of!(CORRELATION_VECTOR, Vector) - 1usize];
};
pub type PCORRELATION_VECTOR = *mut CORRELATION_VECTOR;
unsafe extern "C" {
    pub fn RtlInitializeCorrelationVector(
        CorrelationVector: PCORRELATION_VECTOR,
        Version: ::std::os::raw::c_int,
        Guid: *const GUID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlIncrementCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlExtendCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlValidateCorrelationVector(Vector: PCORRELATION_VECTOR) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
    pub Size: DWORD,
    pub TriggerId: PCWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG"]
        [::std::mem::size_of::<_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>() - 16usize];
    ["Alignment of _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG"]
        [::std::mem::align_of::<_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG>() - 8usize];
    ["Offset of field: _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG::Size"]
        [::std::mem::offset_of!(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, Size) - 0usize];
    ["Offset of field: _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG::TriggerId"]
        [::std::mem::offset_of!(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, TriggerId) - 8usize];
};
pub type CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
pub type PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = *mut _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
unsafe extern "C" {
    pub fn RtlRaiseCustomSystemEventTrigger(
        TriggerConfig: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
    ) -> DWORD;
}
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeNone: _IMAGE_POLICY_ENTRY_TYPE = 0;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeBool: _IMAGE_POLICY_ENTRY_TYPE = 1;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt8: _IMAGE_POLICY_ENTRY_TYPE = 2;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt8: _IMAGE_POLICY_ENTRY_TYPE = 3;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt16: _IMAGE_POLICY_ENTRY_TYPE = 4;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt16: _IMAGE_POLICY_ENTRY_TYPE = 5;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt32: _IMAGE_POLICY_ENTRY_TYPE = 6;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt32: _IMAGE_POLICY_ENTRY_TYPE = 7;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeInt64: _IMAGE_POLICY_ENTRY_TYPE = 8;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUInt64: _IMAGE_POLICY_ENTRY_TYPE = 9;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeAnsiString: _IMAGE_POLICY_ENTRY_TYPE = 10;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeUnicodeString: _IMAGE_POLICY_ENTRY_TYPE = 11;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeOverride: _IMAGE_POLICY_ENTRY_TYPE = 12;
pub const _IMAGE_POLICY_ENTRY_TYPE_ImagePolicyEntryTypeMaximum: _IMAGE_POLICY_ENTRY_TYPE = 13;
pub type _IMAGE_POLICY_ENTRY_TYPE = ::std::os::raw::c_int;
pub use self::_IMAGE_POLICY_ENTRY_TYPE as IMAGE_POLICY_ENTRY_TYPE;
pub const _IMAGE_POLICY_ID_ImagePolicyIdNone: _IMAGE_POLICY_ID = 0;
pub const _IMAGE_POLICY_ID_ImagePolicyIdEtw: _IMAGE_POLICY_ID = 1;
pub const _IMAGE_POLICY_ID_ImagePolicyIdDebug: _IMAGE_POLICY_ID = 2;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDump: _IMAGE_POLICY_ID = 3;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDumpKey: _IMAGE_POLICY_ID = 4;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCrashDumpKeyGuid: _IMAGE_POLICY_ID = 5;
pub const _IMAGE_POLICY_ID_ImagePolicyIdParentSd: _IMAGE_POLICY_ID = 6;
pub const _IMAGE_POLICY_ID_ImagePolicyIdParentSdRev: _IMAGE_POLICY_ID = 7;
pub const _IMAGE_POLICY_ID_ImagePolicyIdSvn: _IMAGE_POLICY_ID = 8;
pub const _IMAGE_POLICY_ID_ImagePolicyIdDeviceId: _IMAGE_POLICY_ID = 9;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCapability: _IMAGE_POLICY_ID = 10;
pub const _IMAGE_POLICY_ID_ImagePolicyIdScenarioId: _IMAGE_POLICY_ID = 11;
pub const _IMAGE_POLICY_ID_ImagePolicyIdCapabilityOverridable: _IMAGE_POLICY_ID = 12;
pub const _IMAGE_POLICY_ID_ImagePolicyIdTrustletIdOverridable: _IMAGE_POLICY_ID = 13;
pub const _IMAGE_POLICY_ID_ImagePolicyIdMaximum: _IMAGE_POLICY_ID = 14;
pub type _IMAGE_POLICY_ID = ::std::os::raw::c_int;
pub use self::_IMAGE_POLICY_ID as IMAGE_POLICY_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _IMAGE_POLICY_ENTRY {
    pub Type: IMAGE_POLICY_ENTRY_TYPE,
    pub PolicyId: IMAGE_POLICY_ID,
    pub u: _IMAGE_POLICY_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _IMAGE_POLICY_ENTRY__bindgen_ty_1 {
    pub None: *const ::std::os::raw::c_void,
    pub BoolValue: BOOLEAN,
    pub Int8Value: INT8,
    pub UInt8Value: UINT8,
    pub Int16Value: INT16,
    pub UInt16Value: UINT16,
    pub Int32Value: INT32,
    pub UInt32Value: UINT32,
    pub Int64Value: INT64,
    pub UInt64Value: UINT64,
    pub AnsiStringValue: PCSTR,
    pub UnicodeStringValue: PCWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_POLICY_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_IMAGE_POLICY_ENTRY__bindgen_ty_1>() - 8usize];
    ["Alignment of _IMAGE_POLICY_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_IMAGE_POLICY_ENTRY__bindgen_ty_1>() - 8usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::None"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, None) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::BoolValue"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, BoolValue) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::Int8Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, Int8Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::UInt8Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, UInt8Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::Int16Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, Int16Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::UInt16Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, UInt16Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::Int32Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, Int32Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::UInt32Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, UInt32Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::Int64Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, Int64Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::UInt64Value"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, UInt64Value) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::AnsiStringValue"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, AnsiStringValue) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY__bindgen_ty_1::UnicodeStringValue"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY__bindgen_ty_1, UnicodeStringValue) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_POLICY_ENTRY"][::std::mem::size_of::<_IMAGE_POLICY_ENTRY>() - 16usize];
    ["Alignment of _IMAGE_POLICY_ENTRY"][::std::mem::align_of::<_IMAGE_POLICY_ENTRY>() - 8usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY::Type"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY, Type) - 0usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY::PolicyId"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY, PolicyId) - 4usize];
    ["Offset of field: _IMAGE_POLICY_ENTRY::u"]
        [::std::mem::offset_of!(_IMAGE_POLICY_ENTRY, u) - 8usize];
};
pub type IMAGE_POLICY_ENTRY = _IMAGE_POLICY_ENTRY;
pub type PCIMAGE_POLICY_ENTRY = *const IMAGE_POLICY_ENTRY;
#[repr(C)]
pub struct _IMAGE_POLICY_METADATA {
    pub Version: BYTE,
    pub Reserved0: [BYTE; 7usize],
    pub ApplicationId: ULONGLONG,
    pub Policies: __IncompleteArrayField<IMAGE_POLICY_ENTRY>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IMAGE_POLICY_METADATA"][::std::mem::size_of::<_IMAGE_POLICY_METADATA>() - 16usize];
    ["Alignment of _IMAGE_POLICY_METADATA"]
        [::std::mem::align_of::<_IMAGE_POLICY_METADATA>() - 8usize];
    ["Offset of field: _IMAGE_POLICY_METADATA::Version"]
        [::std::mem::offset_of!(_IMAGE_POLICY_METADATA, Version) - 0usize];
    ["Offset of field: _IMAGE_POLICY_METADATA::Reserved0"]
        [::std::mem::offset_of!(_IMAGE_POLICY_METADATA, Reserved0) - 1usize];
    ["Offset of field: _IMAGE_POLICY_METADATA::ApplicationId"]
        [::std::mem::offset_of!(_IMAGE_POLICY_METADATA, ApplicationId) - 8usize];
    ["Offset of field: _IMAGE_POLICY_METADATA::Policies"]
        [::std::mem::offset_of!(_IMAGE_POLICY_METADATA, Policies) - 16usize];
};
pub type IMAGE_POLICY_METADATA = _IMAGE_POLICY_METADATA;
pub type PCIMAGE_POLICY_METADATA = *const IMAGE_POLICY_METADATA;
unsafe extern "C" {
    pub fn RtlIsZeroMemory(Buffer: PVOID, Length: SIZE_T) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn RtlNormalizeSecurityDescriptor(
        SecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        SecurityDescriptorLength: DWORD,
        NewSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        NewSecurityDescriptorLength: PDWORD,
        CheckOnly: BOOLEAN,
    ) -> BOOLEAN;
}
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdUnknown: _RTL_SYSTEM_GLOBAL_DATA_ID = 0;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdRngSeedVersion: _RTL_SYSTEM_GLOBAL_DATA_ID = 1;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdInterruptTime: _RTL_SYSTEM_GLOBAL_DATA_ID = 2;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdTimeZoneBias: _RTL_SYSTEM_GLOBAL_DATA_ID = 3;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdImageNumberLow: _RTL_SYSTEM_GLOBAL_DATA_ID = 4;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdImageNumberHigh: _RTL_SYSTEM_GLOBAL_DATA_ID = 5;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdTimeZoneId: _RTL_SYSTEM_GLOBAL_DATA_ID = 6;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdNtMajorVersion: _RTL_SYSTEM_GLOBAL_DATA_ID = 7;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdNtMinorVersion: _RTL_SYSTEM_GLOBAL_DATA_ID = 8;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdSystemExpirationDate: _RTL_SYSTEM_GLOBAL_DATA_ID =
    9;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdKdDebuggerEnabled: _RTL_SYSTEM_GLOBAL_DATA_ID = 10;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdCyclesPerYield: _RTL_SYSTEM_GLOBAL_DATA_ID = 11;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdSafeBootMode: _RTL_SYSTEM_GLOBAL_DATA_ID = 12;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdLastSystemRITEventTickCount:
    _RTL_SYSTEM_GLOBAL_DATA_ID = 13;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdConsoleSharedDataFlags:
    _RTL_SYSTEM_GLOBAL_DATA_ID = 14;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdNtSystemRootDrive: _RTL_SYSTEM_GLOBAL_DATA_ID = 15;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcBypassEnabled: _RTL_SYSTEM_GLOBAL_DATA_ID = 16;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcData: _RTL_SYSTEM_GLOBAL_DATA_ID = 17;
pub const _RTL_SYSTEM_GLOBAL_DATA_ID_GlobalDataIdQpcBias: _RTL_SYSTEM_GLOBAL_DATA_ID = 18;
pub type _RTL_SYSTEM_GLOBAL_DATA_ID = ::std::os::raw::c_int;
pub use self::_RTL_SYSTEM_GLOBAL_DATA_ID as RTL_SYSTEM_GLOBAL_DATA_ID;
pub type PRTL_SYSTEM_GLOBAL_DATA_ID = *mut _RTL_SYSTEM_GLOBAL_DATA_ID;
unsafe extern "C" {
    pub fn RtlGetSystemGlobalData(
        DataId: RTL_SYSTEM_GLOBAL_DATA_ID,
        Buffer: PVOID,
        Size: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlSetSystemGlobalData(
        DataId: RTL_SYSTEM_GLOBAL_DATA_ID,
        Buffer: PVOID,
        Size: DWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CRITICAL_SECTION_DEBUG {
    pub Type: WORD,
    pub CreatorBackTraceIndex: WORD,
    pub CriticalSection: *mut _RTL_CRITICAL_SECTION,
    pub ProcessLocksList: LIST_ENTRY,
    pub EntryCount: DWORD,
    pub ContentionCount: DWORD,
    pub Flags: DWORD,
    pub CreatorBackTraceIndexHigh: WORD,
    pub Identifier: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RTL_CRITICAL_SECTION_DEBUG"]
        [::std::mem::size_of::<_RTL_CRITICAL_SECTION_DEBUG>() - 48usize];
    ["Alignment of _RTL_CRITICAL_SECTION_DEBUG"]
        [::std::mem::align_of::<_RTL_CRITICAL_SECTION_DEBUG>() - 8usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::Type"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, Type) - 0usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::CreatorBackTraceIndex"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, CreatorBackTraceIndex) - 2usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::CriticalSection"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, CriticalSection) - 8usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::ProcessLocksList"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, ProcessLocksList) - 16usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::EntryCount"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, EntryCount) - 32usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::ContentionCount"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, ContentionCount) - 36usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::Flags"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, Flags) - 40usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::CreatorBackTraceIndexHigh"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, CreatorBackTraceIndexHigh) - 44usize];
    ["Offset of field: _RTL_CRITICAL_SECTION_DEBUG::Identifier"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION_DEBUG, Identifier) - 46usize];
};
pub type RTL_CRITICAL_SECTION_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
pub type PRTL_CRITICAL_SECTION_DEBUG = *mut _RTL_CRITICAL_SECTION_DEBUG;
pub type RTL_RESOURCE_DEBUG = _RTL_CRITICAL_SECTION_DEBUG;
pub type PRTL_RESOURCE_DEBUG = *mut _RTL_CRITICAL_SECTION_DEBUG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CRITICAL_SECTION {
    pub DebugInfo: PRTL_CRITICAL_SECTION_DEBUG,
    pub LockCount: LONG,
    pub RecursionCount: LONG,
    pub OwningThread: HANDLE,
    pub LockSemaphore: HANDLE,
    pub SpinCount: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RTL_CRITICAL_SECTION"][::std::mem::size_of::<_RTL_CRITICAL_SECTION>() - 40usize];
    ["Alignment of _RTL_CRITICAL_SECTION"]
        [::std::mem::align_of::<_RTL_CRITICAL_SECTION>() - 8usize];
    ["Offset of field: _RTL_CRITICAL_SECTION::DebugInfo"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION, DebugInfo) - 0usize];
    ["Offset of field: _RTL_CRITICAL_SECTION::LockCount"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION, LockCount) - 8usize];
    ["Offset of field: _RTL_CRITICAL_SECTION::RecursionCount"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION, RecursionCount) - 12usize];
    ["Offset of field: _RTL_CRITICAL_SECTION::OwningThread"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION, OwningThread) - 16usize];
    ["Offset of field: _RTL_CRITICAL_SECTION::LockSemaphore"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION, LockSemaphore) - 24usize];
    ["Offset of field: _RTL_CRITICAL_SECTION::SpinCount"]
        [::std::mem::offset_of!(_RTL_CRITICAL_SECTION, SpinCount) - 32usize];
};
pub type RTL_CRITICAL_SECTION = _RTL_CRITICAL_SECTION;
pub type PRTL_CRITICAL_SECTION = *mut _RTL_CRITICAL_SECTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_SRWLOCK {
    pub Ptr: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RTL_SRWLOCK"][::std::mem::size_of::<_RTL_SRWLOCK>() - 8usize];
    ["Alignment of _RTL_SRWLOCK"][::std::mem::align_of::<_RTL_SRWLOCK>() - 8usize];
    ["Offset of field: _RTL_SRWLOCK::Ptr"][::std::mem::offset_of!(_RTL_SRWLOCK, Ptr) - 0usize];
};
pub type RTL_SRWLOCK = _RTL_SRWLOCK;
pub type PRTL_SRWLOCK = *mut _RTL_SRWLOCK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RTL_CONDITION_VARIABLE {
    pub Ptr: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RTL_CONDITION_VARIABLE"][::std::mem::size_of::<_RTL_CONDITION_VARIABLE>() - 8usize];
    ["Alignment of _RTL_CONDITION_VARIABLE"]
        [::std::mem::align_of::<_RTL_CONDITION_VARIABLE>() - 8usize];
    ["Offset of field: _RTL_CONDITION_VARIABLE::Ptr"]
        [::std::mem::offset_of!(_RTL_CONDITION_VARIABLE, Ptr) - 0usize];
};
pub type RTL_CONDITION_VARIABLE = _RTL_CONDITION_VARIABLE;
pub type PRTL_CONDITION_VARIABLE = *mut _RTL_CONDITION_VARIABLE;
pub type PAPCFUNC = ::std::option::Option<unsafe extern "C" fn(Parameter: ULONG_PTR)>;
pub type PVECTORED_EXCEPTION_HANDLER =
    ::std::option::Option<unsafe extern "C" fn(ExceptionInfo: *mut _EXCEPTION_POINTERS) -> LONG>;
pub const _HEAP_INFORMATION_CLASS_HeapCompatibilityInformation: _HEAP_INFORMATION_CLASS = 0;
pub const _HEAP_INFORMATION_CLASS_HeapEnableTerminationOnCorruption: _HEAP_INFORMATION_CLASS = 1;
pub const _HEAP_INFORMATION_CLASS_HeapOptimizeResources: _HEAP_INFORMATION_CLASS = 3;
pub const _HEAP_INFORMATION_CLASS_HeapTag: _HEAP_INFORMATION_CLASS = 7;
pub type _HEAP_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_HEAP_INFORMATION_CLASS as HEAP_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
    pub Version: DWORD,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _HEAP_OPTIMIZE_RESOURCES_INFORMATION"]
        [::std::mem::size_of::<_HEAP_OPTIMIZE_RESOURCES_INFORMATION>() - 8usize];
    ["Alignment of _HEAP_OPTIMIZE_RESOURCES_INFORMATION"]
        [::std::mem::align_of::<_HEAP_OPTIMIZE_RESOURCES_INFORMATION>() - 4usize];
    ["Offset of field: _HEAP_OPTIMIZE_RESOURCES_INFORMATION::Version"]
        [::std::mem::offset_of!(_HEAP_OPTIMIZE_RESOURCES_INFORMATION, Version) - 0usize];
    ["Offset of field: _HEAP_OPTIMIZE_RESOURCES_INFORMATION::Flags"]
        [::std::mem::offset_of!(_HEAP_OPTIMIZE_RESOURCES_INFORMATION, Flags) - 4usize];
};
pub type HEAP_OPTIMIZE_RESOURCES_INFORMATION = _HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub type PHEAP_OPTIMIZE_RESOURCES_INFORMATION = *mut _HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub type WAITORTIMERCALLBACKFUNC =
    ::std::option::Option<unsafe extern "C" fn(arg1: PVOID, arg2: BOOLEAN)>;
pub type WORKERCALLBACKFUNC = ::std::option::Option<unsafe extern "C" fn(arg1: PVOID)>;
pub type APC_CALLBACK_FUNCTION =
    ::std::option::Option<unsafe extern "C" fn(arg1: DWORD, arg2: PVOID, arg3: PVOID)>;
pub type WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC;
pub type PFLS_CALLBACK_FUNCTION = ::std::option::Option<unsafe extern "C" fn(lpFlsData: PVOID)>;
pub type PSECURE_MEMORY_CACHE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(Addr: PVOID, Range: SIZE_T) -> BOOLEAN>;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextBasicInformation:
    _ACTIVATION_CONTEXT_INFO_CLASS = 1;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextDetailedInformation:
    _ACTIVATION_CONTEXT_INFO_CLASS = 2;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_AssemblyDetailedInformationInActivationContext:
    _ACTIVATION_CONTEXT_INFO_CLASS = 3;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_FileInformationInAssemblyOfAssemblyInActivationContext:
    _ACTIVATION_CONTEXT_INFO_CLASS = 4;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_RunlevelInformationInActivationContext:
    _ACTIVATION_CONTEXT_INFO_CLASS = 5;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_CompatibilityInformationInActivationContext:
    _ACTIVATION_CONTEXT_INFO_CLASS = 6;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_ActivationContextManifestResourceName:
    _ACTIVATION_CONTEXT_INFO_CLASS = 7;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_MaxActivationContextInfoClass:
    _ACTIVATION_CONTEXT_INFO_CLASS = 8;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_AssemblyDetailedInformationInActivationContxt:
    _ACTIVATION_CONTEXT_INFO_CLASS = 3;
pub const _ACTIVATION_CONTEXT_INFO_CLASS_FileInformationInAssemblyOfAssemblyInActivationContxt:
    _ACTIVATION_CONTEXT_INFO_CLASS = 4;
pub type _ACTIVATION_CONTEXT_INFO_CLASS = ::std::os::raw::c_int;
pub use self::_ACTIVATION_CONTEXT_INFO_CLASS as ACTIVATION_CONTEXT_INFO_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    pub ulAssemblyIndex: DWORD,
    pub ulFileIndexInAssembly: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACTIVATION_CONTEXT_QUERY_INDEX"]
        [::std::mem::size_of::<_ACTIVATION_CONTEXT_QUERY_INDEX>() - 8usize];
    ["Alignment of _ACTIVATION_CONTEXT_QUERY_INDEX"]
        [::std::mem::align_of::<_ACTIVATION_CONTEXT_QUERY_INDEX>() - 4usize];
    ["Offset of field: _ACTIVATION_CONTEXT_QUERY_INDEX::ulAssemblyIndex"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_QUERY_INDEX, ulAssemblyIndex) - 0usize];
    ["Offset of field: _ACTIVATION_CONTEXT_QUERY_INDEX::ulFileIndexInAssembly"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_QUERY_INDEX, ulFileIndexInAssembly) - 4usize];
};
pub type ACTIVATION_CONTEXT_QUERY_INDEX = _ACTIVATION_CONTEXT_QUERY_INDEX;
pub type PACTIVATION_CONTEXT_QUERY_INDEX = *mut _ACTIVATION_CONTEXT_QUERY_INDEX;
pub type PCACTIVATION_CONTEXT_QUERY_INDEX = *const _ACTIVATION_CONTEXT_QUERY_INDEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    pub ulFlags: DWORD,
    pub ulFilenameLength: DWORD,
    pub ulPathLength: DWORD,
    pub lpFileName: PCWSTR,
    pub lpFilePath: PCWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ASSEMBLY_FILE_DETAILED_INFORMATION"]
        [::std::mem::size_of::<_ASSEMBLY_FILE_DETAILED_INFORMATION>() - 32usize];
    ["Alignment of _ASSEMBLY_FILE_DETAILED_INFORMATION"]
        [::std::mem::align_of::<_ASSEMBLY_FILE_DETAILED_INFORMATION>() - 8usize];
    ["Offset of field: _ASSEMBLY_FILE_DETAILED_INFORMATION::ulFlags"]
        [::std::mem::offset_of!(_ASSEMBLY_FILE_DETAILED_INFORMATION, ulFlags) - 0usize];
    ["Offset of field: _ASSEMBLY_FILE_DETAILED_INFORMATION::ulFilenameLength"]
        [::std::mem::offset_of!(_ASSEMBLY_FILE_DETAILED_INFORMATION, ulFilenameLength) - 4usize];
    ["Offset of field: _ASSEMBLY_FILE_DETAILED_INFORMATION::ulPathLength"]
        [::std::mem::offset_of!(_ASSEMBLY_FILE_DETAILED_INFORMATION, ulPathLength) - 8usize];
    ["Offset of field: _ASSEMBLY_FILE_DETAILED_INFORMATION::lpFileName"]
        [::std::mem::offset_of!(_ASSEMBLY_FILE_DETAILED_INFORMATION, lpFileName) - 16usize];
    ["Offset of field: _ASSEMBLY_FILE_DETAILED_INFORMATION::lpFilePath"]
        [::std::mem::offset_of!(_ASSEMBLY_FILE_DETAILED_INFORMATION, lpFilePath) - 24usize];
};
pub type ASSEMBLY_FILE_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION;
pub type PASSEMBLY_FILE_DETAILED_INFORMATION = *mut _ASSEMBLY_FILE_DETAILED_INFORMATION;
pub type PCASSEMBLY_FILE_DETAILED_INFORMATION = *const ASSEMBLY_FILE_DETAILED_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    pub ulFlags: DWORD,
    pub ulEncodedAssemblyIdentityLength: DWORD,
    pub ulManifestPathType: DWORD,
    pub ulManifestPathLength: DWORD,
    pub liManifestLastWriteTime: LARGE_INTEGER,
    pub ulPolicyPathType: DWORD,
    pub ulPolicyPathLength: DWORD,
    pub liPolicyLastWriteTime: LARGE_INTEGER,
    pub ulMetadataSatelliteRosterIndex: DWORD,
    pub ulManifestVersionMajor: DWORD,
    pub ulManifestVersionMinor: DWORD,
    pub ulPolicyVersionMajor: DWORD,
    pub ulPolicyVersionMinor: DWORD,
    pub ulAssemblyDirectoryNameLength: DWORD,
    pub lpAssemblyEncodedAssemblyIdentity: PCWSTR,
    pub lpAssemblyManifestPath: PCWSTR,
    pub lpAssemblyPolicyPath: PCWSTR,
    pub lpAssemblyDirectoryName: PCWSTR,
    pub ulFileCount: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION"]
        [::std::mem::size_of::<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>() - 104usize];
    ["Alignment of _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION"]
        [::std::mem::align_of::<_ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION>() - 8usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulFlags"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulFlags
    ) - 0usize];
    [
        "Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulEncodedAssemblyIdentityLength",
    ][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulEncodedAssemblyIdentityLength
    ) - 4usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulManifestPathType"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulManifestPathType
    )
        - 8usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulManifestPathLength"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulManifestPathLength
    )
        - 12usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::liManifestLastWriteTime"]
        [::std::mem::offset_of!(
            _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
            liManifestLastWriteTime
        ) - 16usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulPolicyPathType"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulPolicyPathType
    )
        - 24usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulPolicyPathLength"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulPolicyPathLength
    )
        - 28usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::liPolicyLastWriteTime"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        liPolicyLastWriteTime
    )
        - 32usize];
    [
        "Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulMetadataSatelliteRosterIndex",
    ][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulMetadataSatelliteRosterIndex
    ) - 40usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulManifestVersionMajor"]
        [::std::mem::offset_of!(
            _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
            ulManifestVersionMajor
        ) - 44usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulManifestVersionMinor"]
        [::std::mem::offset_of!(
            _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
            ulManifestVersionMinor
        ) - 48usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulPolicyVersionMajor"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulPolicyVersionMajor
    )
        - 52usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulPolicyVersionMinor"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulPolicyVersionMinor
    )
        - 56usize];
    [
        "Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulAssemblyDirectoryNameLength",
    ][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulAssemblyDirectoryNameLength
    ) - 60usize];
    [
        "Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::lpAssemblyEncodedAssemblyIdentity",
    ][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        lpAssemblyEncodedAssemblyIdentity
    ) - 64usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::lpAssemblyManifestPath"]
        [::std::mem::offset_of!(
            _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
            lpAssemblyManifestPath
        ) - 72usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::lpAssemblyPolicyPath"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        lpAssemblyPolicyPath
    )
        - 80usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::lpAssemblyDirectoryName"]
        [::std::mem::offset_of!(
            _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
            lpAssemblyDirectoryName
        ) - 88usize];
    ["Offset of field: _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION::ulFileCount"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION,
        ulFileCount
    )
        - 96usize];
};
pub type ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
    _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub type PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
    *mut _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub type PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION =
    *const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_UNSPECIFIED: ACTCTX_REQUESTED_RUN_LEVEL = 0;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_AS_INVOKER: ACTCTX_REQUESTED_RUN_LEVEL = 1;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE:
    ACTCTX_REQUESTED_RUN_LEVEL = 2;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_REQUIRE_ADMIN: ACTCTX_REQUESTED_RUN_LEVEL = 3;
pub const ACTCTX_REQUESTED_RUN_LEVEL_ACTCTX_RUN_LEVEL_NUMBERS: ACTCTX_REQUESTED_RUN_LEVEL = 4;
pub type ACTCTX_REQUESTED_RUN_LEVEL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    pub ulFlags: DWORD,
    pub RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
    pub UiAccess: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION"]
        [::std::mem::size_of::<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>() - 12usize];
    ["Alignment of _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION"]
        [::std::mem::align_of::<_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION>() - 4usize];
    ["Offset of field: _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION::ulFlags"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, ulFlags) - 0usize];
    ["Offset of field: _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION::RunLevel"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, RunLevel) - 4usize];
    ["Offset of field: _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION::UiAccess"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, UiAccess) - 8usize];
};
pub type ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub type PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = *mut _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub type PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION =
    *const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN:
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 0;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS:
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 1;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION:
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 2;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED:
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE = 3;
pub type ACTCTX_COMPATIBILITY_ELEMENT_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMPATIBILITY_CONTEXT_ELEMENT {
    pub Id: GUID,
    pub Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE,
    pub MaxVersionTested: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COMPATIBILITY_CONTEXT_ELEMENT"]
        [::std::mem::size_of::<_COMPATIBILITY_CONTEXT_ELEMENT>() - 32usize];
    ["Alignment of _COMPATIBILITY_CONTEXT_ELEMENT"]
        [::std::mem::align_of::<_COMPATIBILITY_CONTEXT_ELEMENT>() - 8usize];
    ["Offset of field: _COMPATIBILITY_CONTEXT_ELEMENT::Id"]
        [::std::mem::offset_of!(_COMPATIBILITY_CONTEXT_ELEMENT, Id) - 0usize];
    ["Offset of field: _COMPATIBILITY_CONTEXT_ELEMENT::Type"]
        [::std::mem::offset_of!(_COMPATIBILITY_CONTEXT_ELEMENT, Type) - 16usize];
    ["Offset of field: _COMPATIBILITY_CONTEXT_ELEMENT::MaxVersionTested"]
        [::std::mem::offset_of!(_COMPATIBILITY_CONTEXT_ELEMENT, MaxVersionTested) - 24usize];
};
pub type COMPATIBILITY_CONTEXT_ELEMENT = _COMPATIBILITY_CONTEXT_ELEMENT;
pub type PCOMPATIBILITY_CONTEXT_ELEMENT = *mut _COMPATIBILITY_CONTEXT_ELEMENT;
pub type PCCOMPATIBILITY_CONTEXT_ELEMENT = *const _COMPATIBILITY_CONTEXT_ELEMENT;
#[repr(C)]
#[derive(Debug)]
pub struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    pub ElementCount: DWORD,
    pub Elements: __IncompleteArrayField<COMPATIBILITY_CONTEXT_ELEMENT>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION"]
        [::std::mem::size_of::<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>() - 8usize];
    ["Alignment of _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION"]
        [::std::mem::align_of::<_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION>() - 8usize];
    ["Offset of field: _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION::ElementCount"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION,
        ElementCount
    ) - 0usize];
    ["Offset of field: _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION::Elements"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, Elements) - 8usize];
};
pub type ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
    _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub type PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
    *mut _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub type PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION =
    *const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SUPPORTED_OS_INFO {
    pub MajorVersion: WORD,
    pub MinorVersion: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SUPPORTED_OS_INFO"][::std::mem::size_of::<_SUPPORTED_OS_INFO>() - 4usize];
    ["Alignment of _SUPPORTED_OS_INFO"][::std::mem::align_of::<_SUPPORTED_OS_INFO>() - 2usize];
    ["Offset of field: _SUPPORTED_OS_INFO::MajorVersion"]
        [::std::mem::offset_of!(_SUPPORTED_OS_INFO, MajorVersion) - 0usize];
    ["Offset of field: _SUPPORTED_OS_INFO::MinorVersion"]
        [::std::mem::offset_of!(_SUPPORTED_OS_INFO, MinorVersion) - 2usize];
};
pub type SUPPORTED_OS_INFO = _SUPPORTED_OS_INFO;
pub type PSUPPORTED_OS_INFO = *mut _SUPPORTED_OS_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MAXVERSIONTESTED_INFO {
    pub MaxVersionTested: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MAXVERSIONTESTED_INFO"][::std::mem::size_of::<_MAXVERSIONTESTED_INFO>() - 8usize];
    ["Alignment of _MAXVERSIONTESTED_INFO"]
        [::std::mem::align_of::<_MAXVERSIONTESTED_INFO>() - 8usize];
    ["Offset of field: _MAXVERSIONTESTED_INFO::MaxVersionTested"]
        [::std::mem::offset_of!(_MAXVERSIONTESTED_INFO, MaxVersionTested) - 0usize];
};
pub type MAXVERSIONTESTED_INFO = _MAXVERSIONTESTED_INFO;
pub type PMAXVERSIONTESTED_INFO = *mut _MAXVERSIONTESTED_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    pub dwFlags: DWORD,
    pub ulFormatVersion: DWORD,
    pub ulAssemblyCount: DWORD,
    pub ulRootManifestPathType: DWORD,
    pub ulRootManifestPathChars: DWORD,
    pub ulRootConfigurationPathType: DWORD,
    pub ulRootConfigurationPathChars: DWORD,
    pub ulAppDirPathType: DWORD,
    pub ulAppDirPathChars: DWORD,
    pub lpRootManifestPath: PCWSTR,
    pub lpRootConfigurationPath: PCWSTR,
    pub lpAppDirPath: PCWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACTIVATION_CONTEXT_DETAILED_INFORMATION"]
        [::std::mem::size_of::<_ACTIVATION_CONTEXT_DETAILED_INFORMATION>() - 64usize];
    ["Alignment of _ACTIVATION_CONTEXT_DETAILED_INFORMATION"]
        [::std::mem::align_of::<_ACTIVATION_CONTEXT_DETAILED_INFORMATION>() - 8usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::dwFlags"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION, dwFlags) - 0usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulFormatVersion"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulFormatVersion
    ) - 4usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulAssemblyCount"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulAssemblyCount
    ) - 8usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulRootManifestPathType"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulRootManifestPathType
    )
        - 12usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulRootManifestPathChars"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulRootManifestPathChars
    )
        - 16usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulRootConfigurationPathType"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulRootConfigurationPathType
    )
        - 20usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulRootConfigurationPathChars"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulRootConfigurationPathChars
    )
        - 24usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulAppDirPathType"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulAppDirPathType
    ) - 28usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::ulAppDirPathChars"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        ulAppDirPathChars
    ) - 32usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::lpRootManifestPath"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        lpRootManifestPath
    ) - 40usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::lpRootConfigurationPath"][::std::mem::offset_of!(
        _ACTIVATION_CONTEXT_DETAILED_INFORMATION,
        lpRootConfigurationPath
    )
        - 48usize];
    ["Offset of field: _ACTIVATION_CONTEXT_DETAILED_INFORMATION::lpAppDirPath"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_DETAILED_INFORMATION, lpAppDirPath) - 56usize];
};
pub type ACTIVATION_CONTEXT_DETAILED_INFORMATION = _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub type PACTIVATION_CONTEXT_DETAILED_INFORMATION = *mut _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub type PCACTIVATION_CONTEXT_DETAILED_INFORMATION =
    *const _ACTIVATION_CONTEXT_DETAILED_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HARDWARE_COUNTER_DATA {
    pub Type: HARDWARE_COUNTER_TYPE,
    pub Reserved: DWORD,
    pub Value: DWORD64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _HARDWARE_COUNTER_DATA"][::std::mem::size_of::<_HARDWARE_COUNTER_DATA>() - 16usize];
    ["Alignment of _HARDWARE_COUNTER_DATA"]
        [::std::mem::align_of::<_HARDWARE_COUNTER_DATA>() - 8usize];
    ["Offset of field: _HARDWARE_COUNTER_DATA::Type"]
        [::std::mem::offset_of!(_HARDWARE_COUNTER_DATA, Type) - 0usize];
    ["Offset of field: _HARDWARE_COUNTER_DATA::Reserved"]
        [::std::mem::offset_of!(_HARDWARE_COUNTER_DATA, Reserved) - 4usize];
    ["Offset of field: _HARDWARE_COUNTER_DATA::Value"]
        [::std::mem::offset_of!(_HARDWARE_COUNTER_DATA, Value) - 8usize];
};
pub type HARDWARE_COUNTER_DATA = _HARDWARE_COUNTER_DATA;
pub type PHARDWARE_COUNTER_DATA = *mut _HARDWARE_COUNTER_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PERFORMANCE_DATA {
    pub Size: WORD,
    pub Version: BYTE,
    pub HwCountersCount: BYTE,
    pub ContextSwitchCount: DWORD,
    pub WaitReasonBitMap: DWORD64,
    pub CycleTime: DWORD64,
    pub RetryCount: DWORD,
    pub Reserved: DWORD,
    pub HwCounters: [HARDWARE_COUNTER_DATA; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PERFORMANCE_DATA"][::std::mem::size_of::<_PERFORMANCE_DATA>() - 288usize];
    ["Alignment of _PERFORMANCE_DATA"][::std::mem::align_of::<_PERFORMANCE_DATA>() - 8usize];
    ["Offset of field: _PERFORMANCE_DATA::Size"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, Size) - 0usize];
    ["Offset of field: _PERFORMANCE_DATA::Version"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, Version) - 2usize];
    ["Offset of field: _PERFORMANCE_DATA::HwCountersCount"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, HwCountersCount) - 3usize];
    ["Offset of field: _PERFORMANCE_DATA::ContextSwitchCount"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, ContextSwitchCount) - 4usize];
    ["Offset of field: _PERFORMANCE_DATA::WaitReasonBitMap"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, WaitReasonBitMap) - 8usize];
    ["Offset of field: _PERFORMANCE_DATA::CycleTime"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, CycleTime) - 16usize];
    ["Offset of field: _PERFORMANCE_DATA::RetryCount"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, RetryCount) - 24usize];
    ["Offset of field: _PERFORMANCE_DATA::Reserved"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, Reserved) - 28usize];
    ["Offset of field: _PERFORMANCE_DATA::HwCounters"]
        [::std::mem::offset_of!(_PERFORMANCE_DATA, HwCounters) - 32usize];
};
pub type PERFORMANCE_DATA = _PERFORMANCE_DATA;
pub type PPERFORMANCE_DATA = *mut _PERFORMANCE_DATA;
unsafe extern "C" {
    pub fn RtlGetDeviceFamilyInfoEnum(
        pullUAPInfo: *mut ULONGLONG,
        pulDeviceFamily: *mut DWORD,
        pulDeviceForm: *mut DWORD,
    );
}
unsafe extern "C" {
    pub fn RtlConvertDeviceFamilyInfoToString(
        pulDeviceFamilyBufferSize: PDWORD,
        pulDeviceFormBufferSize: PDWORD,
        DeviceFamily: PWSTR,
        DeviceForm: PWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RtlSwitchedVVI(
        VersionInfo: PRTL_OSVERSIONINFOEXW,
        TypeMask: DWORD,
        ConditionMask: ULONGLONG,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EVENTLOGRECORD {
    pub Length: DWORD,
    pub Reserved: DWORD,
    pub RecordNumber: DWORD,
    pub TimeGenerated: DWORD,
    pub TimeWritten: DWORD,
    pub EventID: DWORD,
    pub EventType: WORD,
    pub NumStrings: WORD,
    pub EventCategory: WORD,
    pub ReservedFlags: WORD,
    pub ClosingRecordNumber: DWORD,
    pub StringOffset: DWORD,
    pub UserSidLength: DWORD,
    pub UserSidOffset: DWORD,
    pub DataLength: DWORD,
    pub DataOffset: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EVENTLOGRECORD"][::std::mem::size_of::<_EVENTLOGRECORD>() - 56usize];
    ["Alignment of _EVENTLOGRECORD"][::std::mem::align_of::<_EVENTLOGRECORD>() - 4usize];
    ["Offset of field: _EVENTLOGRECORD::Length"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, Length) - 0usize];
    ["Offset of field: _EVENTLOGRECORD::Reserved"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, Reserved) - 4usize];
    ["Offset of field: _EVENTLOGRECORD::RecordNumber"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, RecordNumber) - 8usize];
    ["Offset of field: _EVENTLOGRECORD::TimeGenerated"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, TimeGenerated) - 12usize];
    ["Offset of field: _EVENTLOGRECORD::TimeWritten"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, TimeWritten) - 16usize];
    ["Offset of field: _EVENTLOGRECORD::EventID"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, EventID) - 20usize];
    ["Offset of field: _EVENTLOGRECORD::EventType"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, EventType) - 24usize];
    ["Offset of field: _EVENTLOGRECORD::NumStrings"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, NumStrings) - 26usize];
    ["Offset of field: _EVENTLOGRECORD::EventCategory"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, EventCategory) - 28usize];
    ["Offset of field: _EVENTLOGRECORD::ReservedFlags"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, ReservedFlags) - 30usize];
    ["Offset of field: _EVENTLOGRECORD::ClosingRecordNumber"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, ClosingRecordNumber) - 32usize];
    ["Offset of field: _EVENTLOGRECORD::StringOffset"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, StringOffset) - 36usize];
    ["Offset of field: _EVENTLOGRECORD::UserSidLength"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, UserSidLength) - 40usize];
    ["Offset of field: _EVENTLOGRECORD::UserSidOffset"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, UserSidOffset) - 44usize];
    ["Offset of field: _EVENTLOGRECORD::DataLength"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, DataLength) - 48usize];
    ["Offset of field: _EVENTLOGRECORD::DataOffset"]
        [::std::mem::offset_of!(_EVENTLOGRECORD, DataOffset) - 52usize];
};
pub type EVENTLOGRECORD = _EVENTLOGRECORD;
pub type PEVENTLOGRECORD = *mut _EVENTLOGRECORD;
pub type EVENTSFORLOGFILE = _EVENTSFORLOGFILE;
pub type PEVENTSFORLOGFILE = *mut _EVENTSFORLOGFILE;
pub type PACKEDEVENTINFO = _PACKEDEVENTINFO;
pub type PPACKEDEVENTINFO = *mut _PACKEDEVENTINFO;
#[repr(C)]
#[derive(Debug)]
pub struct _EVENTSFORLOGFILE {
    pub ulSize: DWORD,
    pub szLogicalLogFile: [WCHAR; 256usize],
    pub ulNumRecords: DWORD,
    pub pEventLogRecords: __IncompleteArrayField<EVENTLOGRECORD>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EVENTSFORLOGFILE"][::std::mem::size_of::<_EVENTSFORLOGFILE>() - 520usize];
    ["Alignment of _EVENTSFORLOGFILE"][::std::mem::align_of::<_EVENTSFORLOGFILE>() - 4usize];
    ["Offset of field: _EVENTSFORLOGFILE::ulSize"]
        [::std::mem::offset_of!(_EVENTSFORLOGFILE, ulSize) - 0usize];
    ["Offset of field: _EVENTSFORLOGFILE::szLogicalLogFile"]
        [::std::mem::offset_of!(_EVENTSFORLOGFILE, szLogicalLogFile) - 4usize];
    ["Offset of field: _EVENTSFORLOGFILE::ulNumRecords"]
        [::std::mem::offset_of!(_EVENTSFORLOGFILE, ulNumRecords) - 516usize];
    ["Offset of field: _EVENTSFORLOGFILE::pEventLogRecords"]
        [::std::mem::offset_of!(_EVENTSFORLOGFILE, pEventLogRecords) - 520usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct _PACKEDEVENTINFO {
    pub ulSize: DWORD,
    pub ulNumEventsForLogFile: DWORD,
    pub ulOffsets: __IncompleteArrayField<DWORD>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PACKEDEVENTINFO"][::std::mem::size_of::<_PACKEDEVENTINFO>() - 8usize];
    ["Alignment of _PACKEDEVENTINFO"][::std::mem::align_of::<_PACKEDEVENTINFO>() - 4usize];
    ["Offset of field: _PACKEDEVENTINFO::ulSize"]
        [::std::mem::offset_of!(_PACKEDEVENTINFO, ulSize) - 0usize];
    ["Offset of field: _PACKEDEVENTINFO::ulNumEventsForLogFile"]
        [::std::mem::offset_of!(_PACKEDEVENTINFO, ulNumEventsForLogFile) - 4usize];
    ["Offset of field: _PACKEDEVENTINFO::ulOffsets"]
        [::std::mem::offset_of!(_PACKEDEVENTINFO, ulOffsets) - 8usize];
};
pub const _CM_SERVICE_NODE_TYPE_DriverType: _CM_SERVICE_NODE_TYPE = 1;
pub const _CM_SERVICE_NODE_TYPE_FileSystemType: _CM_SERVICE_NODE_TYPE = 2;
pub const _CM_SERVICE_NODE_TYPE_Win32ServiceOwnProcess: _CM_SERVICE_NODE_TYPE = 16;
pub const _CM_SERVICE_NODE_TYPE_Win32ServiceShareProcess: _CM_SERVICE_NODE_TYPE = 32;
pub const _CM_SERVICE_NODE_TYPE_AdapterType: _CM_SERVICE_NODE_TYPE = 4;
pub const _CM_SERVICE_NODE_TYPE_RecognizerType: _CM_SERVICE_NODE_TYPE = 8;
pub type _CM_SERVICE_NODE_TYPE = ::std::os::raw::c_int;
pub use self::_CM_SERVICE_NODE_TYPE as SERVICE_NODE_TYPE;
pub const _CM_SERVICE_LOAD_TYPE_BootLoad: _CM_SERVICE_LOAD_TYPE = 0;
pub const _CM_SERVICE_LOAD_TYPE_SystemLoad: _CM_SERVICE_LOAD_TYPE = 1;
pub const _CM_SERVICE_LOAD_TYPE_AutoLoad: _CM_SERVICE_LOAD_TYPE = 2;
pub const _CM_SERVICE_LOAD_TYPE_DemandLoad: _CM_SERVICE_LOAD_TYPE = 3;
pub const _CM_SERVICE_LOAD_TYPE_DisableLoad: _CM_SERVICE_LOAD_TYPE = 4;
pub type _CM_SERVICE_LOAD_TYPE = ::std::os::raw::c_int;
pub use self::_CM_SERVICE_LOAD_TYPE as SERVICE_LOAD_TYPE;
pub const _CM_ERROR_CONTROL_TYPE_IgnoreError: _CM_ERROR_CONTROL_TYPE = 0;
pub const _CM_ERROR_CONTROL_TYPE_NormalError: _CM_ERROR_CONTROL_TYPE = 1;
pub const _CM_ERROR_CONTROL_TYPE_SevereError: _CM_ERROR_CONTROL_TYPE = 2;
pub const _CM_ERROR_CONTROL_TYPE_CriticalError: _CM_ERROR_CONTROL_TYPE = 3;
pub type _CM_ERROR_CONTROL_TYPE = ::std::os::raw::c_int;
pub use self::_CM_ERROR_CONTROL_TYPE as SERVICE_ERROR_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_ERASE {
    pub Type: DWORD,
    pub Immediate: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_ERASE"][::std::mem::size_of::<_TAPE_ERASE>() - 8usize];
    ["Alignment of _TAPE_ERASE"][::std::mem::align_of::<_TAPE_ERASE>() - 4usize];
    ["Offset of field: _TAPE_ERASE::Type"][::std::mem::offset_of!(_TAPE_ERASE, Type) - 0usize];
    ["Offset of field: _TAPE_ERASE::Immediate"]
        [::std::mem::offset_of!(_TAPE_ERASE, Immediate) - 4usize];
};
pub type TAPE_ERASE = _TAPE_ERASE;
pub type PTAPE_ERASE = *mut _TAPE_ERASE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_PREPARE {
    pub Operation: DWORD,
    pub Immediate: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_PREPARE"][::std::mem::size_of::<_TAPE_PREPARE>() - 8usize];
    ["Alignment of _TAPE_PREPARE"][::std::mem::align_of::<_TAPE_PREPARE>() - 4usize];
    ["Offset of field: _TAPE_PREPARE::Operation"]
        [::std::mem::offset_of!(_TAPE_PREPARE, Operation) - 0usize];
    ["Offset of field: _TAPE_PREPARE::Immediate"]
        [::std::mem::offset_of!(_TAPE_PREPARE, Immediate) - 4usize];
};
pub type TAPE_PREPARE = _TAPE_PREPARE;
pub type PTAPE_PREPARE = *mut _TAPE_PREPARE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_WRITE_MARKS {
    pub Type: DWORD,
    pub Count: DWORD,
    pub Immediate: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_WRITE_MARKS"][::std::mem::size_of::<_TAPE_WRITE_MARKS>() - 12usize];
    ["Alignment of _TAPE_WRITE_MARKS"][::std::mem::align_of::<_TAPE_WRITE_MARKS>() - 4usize];
    ["Offset of field: _TAPE_WRITE_MARKS::Type"]
        [::std::mem::offset_of!(_TAPE_WRITE_MARKS, Type) - 0usize];
    ["Offset of field: _TAPE_WRITE_MARKS::Count"]
        [::std::mem::offset_of!(_TAPE_WRITE_MARKS, Count) - 4usize];
    ["Offset of field: _TAPE_WRITE_MARKS::Immediate"]
        [::std::mem::offset_of!(_TAPE_WRITE_MARKS, Immediate) - 8usize];
};
pub type TAPE_WRITE_MARKS = _TAPE_WRITE_MARKS;
pub type PTAPE_WRITE_MARKS = *mut _TAPE_WRITE_MARKS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TAPE_GET_POSITION {
    pub Type: DWORD,
    pub Partition: DWORD,
    pub Offset: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_GET_POSITION"][::std::mem::size_of::<_TAPE_GET_POSITION>() - 16usize];
    ["Alignment of _TAPE_GET_POSITION"][::std::mem::align_of::<_TAPE_GET_POSITION>() - 8usize];
    ["Offset of field: _TAPE_GET_POSITION::Type"]
        [::std::mem::offset_of!(_TAPE_GET_POSITION, Type) - 0usize];
    ["Offset of field: _TAPE_GET_POSITION::Partition"]
        [::std::mem::offset_of!(_TAPE_GET_POSITION, Partition) - 4usize];
    ["Offset of field: _TAPE_GET_POSITION::Offset"]
        [::std::mem::offset_of!(_TAPE_GET_POSITION, Offset) - 8usize];
};
pub type TAPE_GET_POSITION = _TAPE_GET_POSITION;
pub type PTAPE_GET_POSITION = *mut _TAPE_GET_POSITION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TAPE_SET_POSITION {
    pub Method: DWORD,
    pub Partition: DWORD,
    pub Offset: LARGE_INTEGER,
    pub Immediate: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_SET_POSITION"][::std::mem::size_of::<_TAPE_SET_POSITION>() - 24usize];
    ["Alignment of _TAPE_SET_POSITION"][::std::mem::align_of::<_TAPE_SET_POSITION>() - 8usize];
    ["Offset of field: _TAPE_SET_POSITION::Method"]
        [::std::mem::offset_of!(_TAPE_SET_POSITION, Method) - 0usize];
    ["Offset of field: _TAPE_SET_POSITION::Partition"]
        [::std::mem::offset_of!(_TAPE_SET_POSITION, Partition) - 4usize];
    ["Offset of field: _TAPE_SET_POSITION::Offset"]
        [::std::mem::offset_of!(_TAPE_SET_POSITION, Offset) - 8usize];
    ["Offset of field: _TAPE_SET_POSITION::Immediate"]
        [::std::mem::offset_of!(_TAPE_SET_POSITION, Immediate) - 16usize];
};
pub type TAPE_SET_POSITION = _TAPE_SET_POSITION;
pub type PTAPE_SET_POSITION = *mut _TAPE_SET_POSITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_GET_DRIVE_PARAMETERS {
    pub ECC: BOOLEAN,
    pub Compression: BOOLEAN,
    pub DataPadding: BOOLEAN,
    pub ReportSetmarks: BOOLEAN,
    pub DefaultBlockSize: DWORD,
    pub MaximumBlockSize: DWORD,
    pub MinimumBlockSize: DWORD,
    pub MaximumPartitionCount: DWORD,
    pub FeaturesLow: DWORD,
    pub FeaturesHigh: DWORD,
    pub EOTWarningZoneSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_GET_DRIVE_PARAMETERS"]
        [::std::mem::size_of::<_TAPE_GET_DRIVE_PARAMETERS>() - 32usize];
    ["Alignment of _TAPE_GET_DRIVE_PARAMETERS"]
        [::std::mem::align_of::<_TAPE_GET_DRIVE_PARAMETERS>() - 4usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::ECC"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, ECC) - 0usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::Compression"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, Compression) - 1usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::DataPadding"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, DataPadding) - 2usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::ReportSetmarks"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, ReportSetmarks) - 3usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::DefaultBlockSize"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, DefaultBlockSize) - 4usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::MaximumBlockSize"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, MaximumBlockSize) - 8usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::MinimumBlockSize"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, MinimumBlockSize) - 12usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::MaximumPartitionCount"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, MaximumPartitionCount) - 16usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::FeaturesLow"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, FeaturesLow) - 20usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::FeaturesHigh"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, FeaturesHigh) - 24usize];
    ["Offset of field: _TAPE_GET_DRIVE_PARAMETERS::EOTWarningZoneSize"]
        [::std::mem::offset_of!(_TAPE_GET_DRIVE_PARAMETERS, EOTWarningZoneSize) - 28usize];
};
pub type TAPE_GET_DRIVE_PARAMETERS = _TAPE_GET_DRIVE_PARAMETERS;
pub type PTAPE_GET_DRIVE_PARAMETERS = *mut _TAPE_GET_DRIVE_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_SET_DRIVE_PARAMETERS {
    pub ECC: BOOLEAN,
    pub Compression: BOOLEAN,
    pub DataPadding: BOOLEAN,
    pub ReportSetmarks: BOOLEAN,
    pub EOTWarningZoneSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_SET_DRIVE_PARAMETERS"]
        [::std::mem::size_of::<_TAPE_SET_DRIVE_PARAMETERS>() - 8usize];
    ["Alignment of _TAPE_SET_DRIVE_PARAMETERS"]
        [::std::mem::align_of::<_TAPE_SET_DRIVE_PARAMETERS>() - 4usize];
    ["Offset of field: _TAPE_SET_DRIVE_PARAMETERS::ECC"]
        [::std::mem::offset_of!(_TAPE_SET_DRIVE_PARAMETERS, ECC) - 0usize];
    ["Offset of field: _TAPE_SET_DRIVE_PARAMETERS::Compression"]
        [::std::mem::offset_of!(_TAPE_SET_DRIVE_PARAMETERS, Compression) - 1usize];
    ["Offset of field: _TAPE_SET_DRIVE_PARAMETERS::DataPadding"]
        [::std::mem::offset_of!(_TAPE_SET_DRIVE_PARAMETERS, DataPadding) - 2usize];
    ["Offset of field: _TAPE_SET_DRIVE_PARAMETERS::ReportSetmarks"]
        [::std::mem::offset_of!(_TAPE_SET_DRIVE_PARAMETERS, ReportSetmarks) - 3usize];
    ["Offset of field: _TAPE_SET_DRIVE_PARAMETERS::EOTWarningZoneSize"]
        [::std::mem::offset_of!(_TAPE_SET_DRIVE_PARAMETERS, EOTWarningZoneSize) - 4usize];
};
pub type TAPE_SET_DRIVE_PARAMETERS = _TAPE_SET_DRIVE_PARAMETERS;
pub type PTAPE_SET_DRIVE_PARAMETERS = *mut _TAPE_SET_DRIVE_PARAMETERS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TAPE_GET_MEDIA_PARAMETERS {
    pub Capacity: LARGE_INTEGER,
    pub Remaining: LARGE_INTEGER,
    pub BlockSize: DWORD,
    pub PartitionCount: DWORD,
    pub WriteProtected: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_GET_MEDIA_PARAMETERS"]
        [::std::mem::size_of::<_TAPE_GET_MEDIA_PARAMETERS>() - 32usize];
    ["Alignment of _TAPE_GET_MEDIA_PARAMETERS"]
        [::std::mem::align_of::<_TAPE_GET_MEDIA_PARAMETERS>() - 8usize];
    ["Offset of field: _TAPE_GET_MEDIA_PARAMETERS::Capacity"]
        [::std::mem::offset_of!(_TAPE_GET_MEDIA_PARAMETERS, Capacity) - 0usize];
    ["Offset of field: _TAPE_GET_MEDIA_PARAMETERS::Remaining"]
        [::std::mem::offset_of!(_TAPE_GET_MEDIA_PARAMETERS, Remaining) - 8usize];
    ["Offset of field: _TAPE_GET_MEDIA_PARAMETERS::BlockSize"]
        [::std::mem::offset_of!(_TAPE_GET_MEDIA_PARAMETERS, BlockSize) - 16usize];
    ["Offset of field: _TAPE_GET_MEDIA_PARAMETERS::PartitionCount"]
        [::std::mem::offset_of!(_TAPE_GET_MEDIA_PARAMETERS, PartitionCount) - 20usize];
    ["Offset of field: _TAPE_GET_MEDIA_PARAMETERS::WriteProtected"]
        [::std::mem::offset_of!(_TAPE_GET_MEDIA_PARAMETERS, WriteProtected) - 24usize];
};
pub type TAPE_GET_MEDIA_PARAMETERS = _TAPE_GET_MEDIA_PARAMETERS;
pub type PTAPE_GET_MEDIA_PARAMETERS = *mut _TAPE_GET_MEDIA_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_SET_MEDIA_PARAMETERS {
    pub BlockSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_SET_MEDIA_PARAMETERS"]
        [::std::mem::size_of::<_TAPE_SET_MEDIA_PARAMETERS>() - 4usize];
    ["Alignment of _TAPE_SET_MEDIA_PARAMETERS"]
        [::std::mem::align_of::<_TAPE_SET_MEDIA_PARAMETERS>() - 4usize];
    ["Offset of field: _TAPE_SET_MEDIA_PARAMETERS::BlockSize"]
        [::std::mem::offset_of!(_TAPE_SET_MEDIA_PARAMETERS, BlockSize) - 0usize];
};
pub type TAPE_SET_MEDIA_PARAMETERS = _TAPE_SET_MEDIA_PARAMETERS;
pub type PTAPE_SET_MEDIA_PARAMETERS = *mut _TAPE_SET_MEDIA_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_CREATE_PARTITION {
    pub Method: DWORD,
    pub Count: DWORD,
    pub Size: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_CREATE_PARTITION"][::std::mem::size_of::<_TAPE_CREATE_PARTITION>() - 12usize];
    ["Alignment of _TAPE_CREATE_PARTITION"]
        [::std::mem::align_of::<_TAPE_CREATE_PARTITION>() - 4usize];
    ["Offset of field: _TAPE_CREATE_PARTITION::Method"]
        [::std::mem::offset_of!(_TAPE_CREATE_PARTITION, Method) - 0usize];
    ["Offset of field: _TAPE_CREATE_PARTITION::Count"]
        [::std::mem::offset_of!(_TAPE_CREATE_PARTITION, Count) - 4usize];
    ["Offset of field: _TAPE_CREATE_PARTITION::Size"]
        [::std::mem::offset_of!(_TAPE_CREATE_PARTITION, Size) - 8usize];
};
pub type TAPE_CREATE_PARTITION = _TAPE_CREATE_PARTITION;
pub type PTAPE_CREATE_PARTITION = *mut _TAPE_CREATE_PARTITION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TAPE_WMI_OPERATIONS {
    pub Method: DWORD,
    pub DataBufferSize: DWORD,
    pub DataBuffer: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TAPE_WMI_OPERATIONS"][::std::mem::size_of::<_TAPE_WMI_OPERATIONS>() - 16usize];
    ["Alignment of _TAPE_WMI_OPERATIONS"][::std::mem::align_of::<_TAPE_WMI_OPERATIONS>() - 8usize];
    ["Offset of field: _TAPE_WMI_OPERATIONS::Method"]
        [::std::mem::offset_of!(_TAPE_WMI_OPERATIONS, Method) - 0usize];
    ["Offset of field: _TAPE_WMI_OPERATIONS::DataBufferSize"]
        [::std::mem::offset_of!(_TAPE_WMI_OPERATIONS, DataBufferSize) - 4usize];
    ["Offset of field: _TAPE_WMI_OPERATIONS::DataBuffer"]
        [::std::mem::offset_of!(_TAPE_WMI_OPERATIONS, DataBuffer) - 8usize];
};
pub type TAPE_WMI_OPERATIONS = _TAPE_WMI_OPERATIONS;
pub type PTAPE_WMI_OPERATIONS = *mut _TAPE_WMI_OPERATIONS;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveProblemNone: _TAPE_DRIVE_PROBLEM_TYPE = 0;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWriteWarning: _TAPE_DRIVE_PROBLEM_TYPE = 1;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWriteError: _TAPE_DRIVE_PROBLEM_TYPE = 2;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadWarning: _TAPE_DRIVE_PROBLEM_TYPE = 3;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveWriteWarning: _TAPE_DRIVE_PROBLEM_TYPE = 4;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveReadError: _TAPE_DRIVE_PROBLEM_TYPE = 5;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveWriteError: _TAPE_DRIVE_PROBLEM_TYPE = 6;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveHardwareError: _TAPE_DRIVE_PROBLEM_TYPE = 7;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveUnsupportedMedia: _TAPE_DRIVE_PROBLEM_TYPE = 8;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveScsiConnectionError: _TAPE_DRIVE_PROBLEM_TYPE = 9;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveTimetoClean: _TAPE_DRIVE_PROBLEM_TYPE = 10;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveCleanDriveNow: _TAPE_DRIVE_PROBLEM_TYPE = 11;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveMediaLifeExpired: _TAPE_DRIVE_PROBLEM_TYPE = 12;
pub const _TAPE_DRIVE_PROBLEM_TYPE_TapeDriveSnappedTape: _TAPE_DRIVE_PROBLEM_TYPE = 13;
pub type _TAPE_DRIVE_PROBLEM_TYPE = ::std::os::raw::c_int;
pub use self::_TAPE_DRIVE_PROBLEM_TYPE as TAPE_DRIVE_PROBLEM_TYPE;
pub type UOW = GUID;
pub type PUOW = *mut GUID;
pub type CRM_PROTOCOL_ID = GUID;
pub type PCRM_PROTOCOL_ID = *mut GUID;
pub type NOTIFICATION_MASK = ULONG;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION {
    pub TransactionKey: PVOID,
    pub TransactionNotification: ULONG,
    pub TmVirtualClock: LARGE_INTEGER,
    pub ArgumentLength: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_NOTIFICATION"]
        [::std::mem::size_of::<_TRANSACTION_NOTIFICATION>() - 32usize];
    ["Alignment of _TRANSACTION_NOTIFICATION"]
        [::std::mem::align_of::<_TRANSACTION_NOTIFICATION>() - 8usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION::TransactionKey"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION, TransactionKey) - 0usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION::TransactionNotification"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION, TransactionNotification) - 8usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION::TmVirtualClock"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION, TmVirtualClock) - 16usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION::ArgumentLength"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION, ArgumentLength) - 24usize];
};
pub type TRANSACTION_NOTIFICATION = _TRANSACTION_NOTIFICATION;
pub type PTRANSACTION_NOTIFICATION = *mut _TRANSACTION_NOTIFICATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    pub EnlistmentId: GUID,
    pub UOW: UOW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT"]
        [::std::mem::size_of::<_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT>() - 32usize];
    ["Alignment of _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT"]
        [::std::mem::align_of::<_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT>() - 4usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT::EnlistmentId"][::std::mem::offset_of!(
        _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT,
        EnlistmentId
    ) - 0usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT::UOW"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, UOW) - 16usize];
};
pub type TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT =
    *mut _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    pub TmIdentity: GUID,
    pub Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT"]
        [::std::mem::size_of::<_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT>() - 20usize];
    ["Alignment of _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT"]
        [::std::mem::align_of::<_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT>() - 4usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT::TmIdentity"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, TmIdentity) - 0usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT::Flags"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, Flags) - 16usize];
};
pub type TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT =
    *mut _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub type SAVEPOINT_ID = ULONG;
pub type PSAVEPOINT_ID = *mut ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    pub SavepointId: SAVEPOINT_ID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT"]
        [::std::mem::size_of::<_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT>() - 4usize];
    ["Alignment of _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT"]
        [::std::mem::align_of::<_TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT>() - 4usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT::SavepointId"][::std::mem::offset_of!(
        _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT,
        SavepointId
    ) - 0usize];
};
pub type TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT =
    *mut _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    pub PropagationCookie: ULONG,
    pub UOW: GUID,
    pub TmIdentity: GUID,
    pub BufferLength: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT"]
        [::std::mem::size_of::<_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT>() - 40usize];
    ["Alignment of _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT"]
        [::std::mem::align_of::<_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT>() - 4usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT::PropagationCookie"][::std::mem::offset_of!(
        _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,
        PropagationCookie
    )
        - 0usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT::UOW"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, UOW) - 4usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT::TmIdentity"][::std::mem::offset_of!(
        _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,
        TmIdentity
    ) - 20usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT::BufferLength"][::std::mem::offset_of!(
        _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT,
        BufferLength
    ) - 36usize];
};
pub type TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT =
    *mut _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    pub MarshalCookie: ULONG,
    pub UOW: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT"]
        [::std::mem::size_of::<_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT>() - 20usize];
    ["Alignment of _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT"]
        [::std::mem::align_of::<_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT>() - 4usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT::MarshalCookie"][::std::mem::offset_of!(
        _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT,
        MarshalCookie
    ) - 0usize];
    ["Offset of field: _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT::UOW"]
        [::std::mem::offset_of!(_TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, UOW) - 4usize];
};
pub type TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT =
    *mut _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub type TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub type PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT =
    *mut TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KCRM_MARSHAL_HEADER {
    pub VersionMajor: ULONG,
    pub VersionMinor: ULONG,
    pub NumProtocols: ULONG,
    pub Unused: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KCRM_MARSHAL_HEADER"][::std::mem::size_of::<_KCRM_MARSHAL_HEADER>() - 16usize];
    ["Alignment of _KCRM_MARSHAL_HEADER"][::std::mem::align_of::<_KCRM_MARSHAL_HEADER>() - 4usize];
    ["Offset of field: _KCRM_MARSHAL_HEADER::VersionMajor"]
        [::std::mem::offset_of!(_KCRM_MARSHAL_HEADER, VersionMajor) - 0usize];
    ["Offset of field: _KCRM_MARSHAL_HEADER::VersionMinor"]
        [::std::mem::offset_of!(_KCRM_MARSHAL_HEADER, VersionMinor) - 4usize];
    ["Offset of field: _KCRM_MARSHAL_HEADER::NumProtocols"]
        [::std::mem::offset_of!(_KCRM_MARSHAL_HEADER, NumProtocols) - 8usize];
    ["Offset of field: _KCRM_MARSHAL_HEADER::Unused"]
        [::std::mem::offset_of!(_KCRM_MARSHAL_HEADER, Unused) - 12usize];
};
pub type KCRM_MARSHAL_HEADER = _KCRM_MARSHAL_HEADER;
pub type PKCRM_MARSHAL_HEADER = *mut _KCRM_MARSHAL_HEADER;
pub type PRKCRM_MARSHAL_HEADER = *mut _KCRM_MARSHAL_HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KCRM_TRANSACTION_BLOB {
    pub UOW: UOW,
    pub TmIdentity: GUID,
    pub IsolationLevel: ULONG,
    pub IsolationFlags: ULONG,
    pub Timeout: ULONG,
    pub Description: [WCHAR; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KCRM_TRANSACTION_BLOB"][::std::mem::size_of::<_KCRM_TRANSACTION_BLOB>() - 172usize];
    ["Alignment of _KCRM_TRANSACTION_BLOB"]
        [::std::mem::align_of::<_KCRM_TRANSACTION_BLOB>() - 4usize];
    ["Offset of field: _KCRM_TRANSACTION_BLOB::UOW"]
        [::std::mem::offset_of!(_KCRM_TRANSACTION_BLOB, UOW) - 0usize];
    ["Offset of field: _KCRM_TRANSACTION_BLOB::TmIdentity"]
        [::std::mem::offset_of!(_KCRM_TRANSACTION_BLOB, TmIdentity) - 16usize];
    ["Offset of field: _KCRM_TRANSACTION_BLOB::IsolationLevel"]
        [::std::mem::offset_of!(_KCRM_TRANSACTION_BLOB, IsolationLevel) - 32usize];
    ["Offset of field: _KCRM_TRANSACTION_BLOB::IsolationFlags"]
        [::std::mem::offset_of!(_KCRM_TRANSACTION_BLOB, IsolationFlags) - 36usize];
    ["Offset of field: _KCRM_TRANSACTION_BLOB::Timeout"]
        [::std::mem::offset_of!(_KCRM_TRANSACTION_BLOB, Timeout) - 40usize];
    ["Offset of field: _KCRM_TRANSACTION_BLOB::Description"]
        [::std::mem::offset_of!(_KCRM_TRANSACTION_BLOB, Description) - 44usize];
};
pub type KCRM_TRANSACTION_BLOB = _KCRM_TRANSACTION_BLOB;
pub type PKCRM_TRANSACTION_BLOB = *mut _KCRM_TRANSACTION_BLOB;
pub type PRKCRM_TRANSACTION_BLOB = *mut _KCRM_TRANSACTION_BLOB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KCRM_PROTOCOL_BLOB {
    pub ProtocolId: CRM_PROTOCOL_ID,
    pub StaticInfoLength: ULONG,
    pub TransactionIdInfoLength: ULONG,
    pub Unused1: ULONG,
    pub Unused2: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KCRM_PROTOCOL_BLOB"][::std::mem::size_of::<_KCRM_PROTOCOL_BLOB>() - 32usize];
    ["Alignment of _KCRM_PROTOCOL_BLOB"][::std::mem::align_of::<_KCRM_PROTOCOL_BLOB>() - 4usize];
    ["Offset of field: _KCRM_PROTOCOL_BLOB::ProtocolId"]
        [::std::mem::offset_of!(_KCRM_PROTOCOL_BLOB, ProtocolId) - 0usize];
    ["Offset of field: _KCRM_PROTOCOL_BLOB::StaticInfoLength"]
        [::std::mem::offset_of!(_KCRM_PROTOCOL_BLOB, StaticInfoLength) - 16usize];
    ["Offset of field: _KCRM_PROTOCOL_BLOB::TransactionIdInfoLength"]
        [::std::mem::offset_of!(_KCRM_PROTOCOL_BLOB, TransactionIdInfoLength) - 20usize];
    ["Offset of field: _KCRM_PROTOCOL_BLOB::Unused1"]
        [::std::mem::offset_of!(_KCRM_PROTOCOL_BLOB, Unused1) - 24usize];
    ["Offset of field: _KCRM_PROTOCOL_BLOB::Unused2"]
        [::std::mem::offset_of!(_KCRM_PROTOCOL_BLOB, Unused2) - 28usize];
};
pub type KCRM_PROTOCOL_BLOB = _KCRM_PROTOCOL_BLOB;
pub type PKCRM_PROTOCOL_BLOB = *mut _KCRM_PROTOCOL_BLOB;
pub type PRKCRM_PROTOCOL_BLOB = *mut _KCRM_PROTOCOL_BLOB;
pub const _TRANSACTION_OUTCOME_TransactionOutcomeUndetermined: _TRANSACTION_OUTCOME = 1;
pub const _TRANSACTION_OUTCOME_TransactionOutcomeCommitted: _TRANSACTION_OUTCOME = 2;
pub const _TRANSACTION_OUTCOME_TransactionOutcomeAborted: _TRANSACTION_OUTCOME = 3;
pub type _TRANSACTION_OUTCOME = ::std::os::raw::c_int;
pub use self::_TRANSACTION_OUTCOME as TRANSACTION_OUTCOME;
pub const _TRANSACTION_STATE_TransactionStateNormal: _TRANSACTION_STATE = 1;
pub const _TRANSACTION_STATE_TransactionStateIndoubt: _TRANSACTION_STATE = 2;
pub const _TRANSACTION_STATE_TransactionStateCommittedNotify: _TRANSACTION_STATE = 3;
pub type _TRANSACTION_STATE = ::std::os::raw::c_int;
pub use self::_TRANSACTION_STATE as TRANSACTION_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_BASIC_INFORMATION {
    pub TransactionId: GUID,
    pub State: DWORD,
    pub Outcome: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_BASIC_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTION_BASIC_INFORMATION>() - 24usize];
    ["Alignment of _TRANSACTION_BASIC_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTION_BASIC_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTION_BASIC_INFORMATION::TransactionId"]
        [::std::mem::offset_of!(_TRANSACTION_BASIC_INFORMATION, TransactionId) - 0usize];
    ["Offset of field: _TRANSACTION_BASIC_INFORMATION::State"]
        [::std::mem::offset_of!(_TRANSACTION_BASIC_INFORMATION, State) - 16usize];
    ["Offset of field: _TRANSACTION_BASIC_INFORMATION::Outcome"]
        [::std::mem::offset_of!(_TRANSACTION_BASIC_INFORMATION, Outcome) - 20usize];
};
pub type TRANSACTION_BASIC_INFORMATION = _TRANSACTION_BASIC_INFORMATION;
pub type PTRANSACTION_BASIC_INFORMATION = *mut _TRANSACTION_BASIC_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    pub TmIdentity: GUID,
    pub VirtualClock: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTIONMANAGER_BASIC_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTIONMANAGER_BASIC_INFORMATION>() - 24usize];
    ["Alignment of _TRANSACTIONMANAGER_BASIC_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTIONMANAGER_BASIC_INFORMATION>() - 8usize];
    ["Offset of field: _TRANSACTIONMANAGER_BASIC_INFORMATION::TmIdentity"]
        [::std::mem::offset_of!(_TRANSACTIONMANAGER_BASIC_INFORMATION, TmIdentity) - 0usize];
    ["Offset of field: _TRANSACTIONMANAGER_BASIC_INFORMATION::VirtualClock"]
        [::std::mem::offset_of!(_TRANSACTIONMANAGER_BASIC_INFORMATION, VirtualClock) - 16usize];
};
pub type TRANSACTIONMANAGER_BASIC_INFORMATION = _TRANSACTIONMANAGER_BASIC_INFORMATION;
pub type PTRANSACTIONMANAGER_BASIC_INFORMATION = *mut _TRANSACTIONMANAGER_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    pub LogIdentity: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTIONMANAGER_LOG_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTIONMANAGER_LOG_INFORMATION>() - 16usize];
    ["Alignment of _TRANSACTIONMANAGER_LOG_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTIONMANAGER_LOG_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTIONMANAGER_LOG_INFORMATION::LogIdentity"]
        [::std::mem::offset_of!(_TRANSACTIONMANAGER_LOG_INFORMATION, LogIdentity) - 0usize];
};
pub type TRANSACTIONMANAGER_LOG_INFORMATION = _TRANSACTIONMANAGER_LOG_INFORMATION;
pub type PTRANSACTIONMANAGER_LOG_INFORMATION = *mut _TRANSACTIONMANAGER_LOG_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    pub LogPathLength: DWORD,
    pub LogPath: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTIONMANAGER_LOGPATH_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTIONMANAGER_LOGPATH_INFORMATION>() - 8usize];
    ["Alignment of _TRANSACTIONMANAGER_LOGPATH_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTIONMANAGER_LOGPATH_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTIONMANAGER_LOGPATH_INFORMATION::LogPathLength"]
        [::std::mem::offset_of!(_TRANSACTIONMANAGER_LOGPATH_INFORMATION, LogPathLength) - 0usize];
    ["Offset of field: _TRANSACTIONMANAGER_LOGPATH_INFORMATION::LogPath"]
        [::std::mem::offset_of!(_TRANSACTIONMANAGER_LOGPATH_INFORMATION, LogPath) - 4usize];
};
pub type TRANSACTIONMANAGER_LOGPATH_INFORMATION = _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
pub type PTRANSACTIONMANAGER_LOGPATH_INFORMATION = *mut _TRANSACTIONMANAGER_LOGPATH_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    pub LastRecoveredLsn: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTIONMANAGER_RECOVERY_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTIONMANAGER_RECOVERY_INFORMATION>() - 8usize];
    ["Alignment of _TRANSACTIONMANAGER_RECOVERY_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTIONMANAGER_RECOVERY_INFORMATION>() - 8usize];
    ["Offset of field: _TRANSACTIONMANAGER_RECOVERY_INFORMATION::LastRecoveredLsn"][::std::mem::offset_of!(
        _TRANSACTIONMANAGER_RECOVERY_INFORMATION,
        LastRecoveredLsn
    ) - 0usize];
};
pub type TRANSACTIONMANAGER_RECOVERY_INFORMATION = _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
pub type PTRANSACTIONMANAGER_RECOVERY_INFORMATION = *mut _TRANSACTIONMANAGER_RECOVERY_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    pub OldestTransactionGuid: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTIONMANAGER_OLDEST_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTIONMANAGER_OLDEST_INFORMATION>() - 16usize];
    ["Alignment of _TRANSACTIONMANAGER_OLDEST_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTIONMANAGER_OLDEST_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTIONMANAGER_OLDEST_INFORMATION::OldestTransactionGuid"][::std::mem::offset_of!(
        _TRANSACTIONMANAGER_OLDEST_INFORMATION,
        OldestTransactionGuid
    ) - 0usize];
};
pub type TRANSACTIONMANAGER_OLDEST_INFORMATION = _TRANSACTIONMANAGER_OLDEST_INFORMATION;
pub type PTRANSACTIONMANAGER_OLDEST_INFORMATION = *mut _TRANSACTIONMANAGER_OLDEST_INFORMATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TRANSACTION_PROPERTIES_INFORMATION {
    pub IsolationLevel: DWORD,
    pub IsolationFlags: DWORD,
    pub Timeout: LARGE_INTEGER,
    pub Outcome: DWORD,
    pub DescriptionLength: DWORD,
    pub Description: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_PROPERTIES_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTION_PROPERTIES_INFORMATION>() - 32usize];
    ["Alignment of _TRANSACTION_PROPERTIES_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTION_PROPERTIES_INFORMATION>() - 8usize];
    ["Offset of field: _TRANSACTION_PROPERTIES_INFORMATION::IsolationLevel"]
        [::std::mem::offset_of!(_TRANSACTION_PROPERTIES_INFORMATION, IsolationLevel) - 0usize];
    ["Offset of field: _TRANSACTION_PROPERTIES_INFORMATION::IsolationFlags"]
        [::std::mem::offset_of!(_TRANSACTION_PROPERTIES_INFORMATION, IsolationFlags) - 4usize];
    ["Offset of field: _TRANSACTION_PROPERTIES_INFORMATION::Timeout"]
        [::std::mem::offset_of!(_TRANSACTION_PROPERTIES_INFORMATION, Timeout) - 8usize];
    ["Offset of field: _TRANSACTION_PROPERTIES_INFORMATION::Outcome"]
        [::std::mem::offset_of!(_TRANSACTION_PROPERTIES_INFORMATION, Outcome) - 16usize];
    ["Offset of field: _TRANSACTION_PROPERTIES_INFORMATION::DescriptionLength"]
        [::std::mem::offset_of!(_TRANSACTION_PROPERTIES_INFORMATION, DescriptionLength) - 20usize];
    ["Offset of field: _TRANSACTION_PROPERTIES_INFORMATION::Description"]
        [::std::mem::offset_of!(_TRANSACTION_PROPERTIES_INFORMATION, Description) - 24usize];
};
pub type TRANSACTION_PROPERTIES_INFORMATION = _TRANSACTION_PROPERTIES_INFORMATION;
pub type PTRANSACTION_PROPERTIES_INFORMATION = *mut _TRANSACTION_PROPERTIES_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_BIND_INFORMATION {
    pub TmHandle: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_BIND_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTION_BIND_INFORMATION>() - 8usize];
    ["Alignment of _TRANSACTION_BIND_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTION_BIND_INFORMATION>() - 8usize];
    ["Offset of field: _TRANSACTION_BIND_INFORMATION::TmHandle"]
        [::std::mem::offset_of!(_TRANSACTION_BIND_INFORMATION, TmHandle) - 0usize];
};
pub type TRANSACTION_BIND_INFORMATION = _TRANSACTION_BIND_INFORMATION;
pub type PTRANSACTION_BIND_INFORMATION = *mut _TRANSACTION_BIND_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_ENLISTMENT_PAIR {
    pub EnlistmentId: GUID,
    pub ResourceManagerId: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_ENLISTMENT_PAIR"]
        [::std::mem::size_of::<_TRANSACTION_ENLISTMENT_PAIR>() - 32usize];
    ["Alignment of _TRANSACTION_ENLISTMENT_PAIR"]
        [::std::mem::align_of::<_TRANSACTION_ENLISTMENT_PAIR>() - 4usize];
    ["Offset of field: _TRANSACTION_ENLISTMENT_PAIR::EnlistmentId"]
        [::std::mem::offset_of!(_TRANSACTION_ENLISTMENT_PAIR, EnlistmentId) - 0usize];
    ["Offset of field: _TRANSACTION_ENLISTMENT_PAIR::ResourceManagerId"]
        [::std::mem::offset_of!(_TRANSACTION_ENLISTMENT_PAIR, ResourceManagerId) - 16usize];
};
pub type TRANSACTION_ENLISTMENT_PAIR = _TRANSACTION_ENLISTMENT_PAIR;
pub type PTRANSACTION_ENLISTMENT_PAIR = *mut _TRANSACTION_ENLISTMENT_PAIR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    pub NumberOfEnlistments: DWORD,
    pub EnlistmentPair: [TRANSACTION_ENLISTMENT_PAIR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_ENLISTMENTS_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTION_ENLISTMENTS_INFORMATION>() - 36usize];
    ["Alignment of _TRANSACTION_ENLISTMENTS_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTION_ENLISTMENTS_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTION_ENLISTMENTS_INFORMATION::NumberOfEnlistments"][::std::mem::offset_of!(
        _TRANSACTION_ENLISTMENTS_INFORMATION,
        NumberOfEnlistments
    ) - 0usize];
    ["Offset of field: _TRANSACTION_ENLISTMENTS_INFORMATION::EnlistmentPair"]
        [::std::mem::offset_of!(_TRANSACTION_ENLISTMENTS_INFORMATION, EnlistmentPair) - 4usize];
};
pub type TRANSACTION_ENLISTMENTS_INFORMATION = _TRANSACTION_ENLISTMENTS_INFORMATION;
pub type PTRANSACTION_ENLISTMENTS_INFORMATION = *mut _TRANSACTION_ENLISTMENTS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    pub SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>() - 32usize];
    ["Alignment of _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION::SuperiorEnlistmentPair"][::std::mem::offset_of!(
        _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION,
        SuperiorEnlistmentPair
    )
        - 0usize];
};
pub type TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
pub type PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION =
    *mut _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RESOURCEMANAGER_BASIC_INFORMATION {
    pub ResourceManagerId: GUID,
    pub DescriptionLength: DWORD,
    pub Description: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RESOURCEMANAGER_BASIC_INFORMATION"]
        [::std::mem::size_of::<_RESOURCEMANAGER_BASIC_INFORMATION>() - 24usize];
    ["Alignment of _RESOURCEMANAGER_BASIC_INFORMATION"]
        [::std::mem::align_of::<_RESOURCEMANAGER_BASIC_INFORMATION>() - 4usize];
    ["Offset of field: _RESOURCEMANAGER_BASIC_INFORMATION::ResourceManagerId"]
        [::std::mem::offset_of!(_RESOURCEMANAGER_BASIC_INFORMATION, ResourceManagerId) - 0usize];
    ["Offset of field: _RESOURCEMANAGER_BASIC_INFORMATION::DescriptionLength"]
        [::std::mem::offset_of!(_RESOURCEMANAGER_BASIC_INFORMATION, DescriptionLength) - 16usize];
    ["Offset of field: _RESOURCEMANAGER_BASIC_INFORMATION::Description"]
        [::std::mem::offset_of!(_RESOURCEMANAGER_BASIC_INFORMATION, Description) - 20usize];
};
pub type RESOURCEMANAGER_BASIC_INFORMATION = _RESOURCEMANAGER_BASIC_INFORMATION;
pub type PRESOURCEMANAGER_BASIC_INFORMATION = *mut _RESOURCEMANAGER_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    pub IoCompletionPortHandle: HANDLE,
    pub CompletionKey: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RESOURCEMANAGER_COMPLETION_INFORMATION"]
        [::std::mem::size_of::<_RESOURCEMANAGER_COMPLETION_INFORMATION>() - 16usize];
    ["Alignment of _RESOURCEMANAGER_COMPLETION_INFORMATION"]
        [::std::mem::align_of::<_RESOURCEMANAGER_COMPLETION_INFORMATION>() - 8usize];
    ["Offset of field: _RESOURCEMANAGER_COMPLETION_INFORMATION::IoCompletionPortHandle"][::std::mem::offset_of!(
        _RESOURCEMANAGER_COMPLETION_INFORMATION,
        IoCompletionPortHandle
    )
        - 0usize];
    ["Offset of field: _RESOURCEMANAGER_COMPLETION_INFORMATION::CompletionKey"]
        [::std::mem::offset_of!(_RESOURCEMANAGER_COMPLETION_INFORMATION, CompletionKey) - 8usize];
};
pub type RESOURCEMANAGER_COMPLETION_INFORMATION = _RESOURCEMANAGER_COMPLETION_INFORMATION;
pub type PRESOURCEMANAGER_COMPLETION_INFORMATION = *mut _RESOURCEMANAGER_COMPLETION_INFORMATION;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionBasicInformation:
    _TRANSACTION_INFORMATION_CLASS = 0;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionPropertiesInformation:
    _TRANSACTION_INFORMATION_CLASS = 1;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionEnlistmentInformation:
    _TRANSACTION_INFORMATION_CLASS = 2;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionSuperiorEnlistmentInformation:
    _TRANSACTION_INFORMATION_CLASS = 3;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionBindInformation:
    _TRANSACTION_INFORMATION_CLASS = 4;
pub const _TRANSACTION_INFORMATION_CLASS_TransactionDTCPrivateInformation:
    _TRANSACTION_INFORMATION_CLASS = 5;
pub type _TRANSACTION_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_TRANSACTION_INFORMATION_CLASS as TRANSACTION_INFORMATION_CLASS;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerBasicInformation:
    _TRANSACTIONMANAGER_INFORMATION_CLASS = 0;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerLogInformation:
    _TRANSACTIONMANAGER_INFORMATION_CLASS = 1;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerLogPathInformation:
    _TRANSACTIONMANAGER_INFORMATION_CLASS = 2;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerRecoveryInformation:
    _TRANSACTIONMANAGER_INFORMATION_CLASS = 4;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerOnlineProbeInformation:
    _TRANSACTIONMANAGER_INFORMATION_CLASS = 3;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS_TransactionManagerOldestTransactionInformation:
    _TRANSACTIONMANAGER_INFORMATION_CLASS = 5;
pub type _TRANSACTIONMANAGER_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_TRANSACTIONMANAGER_INFORMATION_CLASS as TRANSACTIONMANAGER_INFORMATION_CLASS;
pub const _RESOURCEMANAGER_INFORMATION_CLASS_ResourceManagerBasicInformation:
    _RESOURCEMANAGER_INFORMATION_CLASS = 0;
pub const _RESOURCEMANAGER_INFORMATION_CLASS_ResourceManagerCompletionInformation:
    _RESOURCEMANAGER_INFORMATION_CLASS = 1;
pub type _RESOURCEMANAGER_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_RESOURCEMANAGER_INFORMATION_CLASS as RESOURCEMANAGER_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENLISTMENT_BASIC_INFORMATION {
    pub EnlistmentId: GUID,
    pub TransactionId: GUID,
    pub ResourceManagerId: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENLISTMENT_BASIC_INFORMATION"]
        [::std::mem::size_of::<_ENLISTMENT_BASIC_INFORMATION>() - 48usize];
    ["Alignment of _ENLISTMENT_BASIC_INFORMATION"]
        [::std::mem::align_of::<_ENLISTMENT_BASIC_INFORMATION>() - 4usize];
    ["Offset of field: _ENLISTMENT_BASIC_INFORMATION::EnlistmentId"]
        [::std::mem::offset_of!(_ENLISTMENT_BASIC_INFORMATION, EnlistmentId) - 0usize];
    ["Offset of field: _ENLISTMENT_BASIC_INFORMATION::TransactionId"]
        [::std::mem::offset_of!(_ENLISTMENT_BASIC_INFORMATION, TransactionId) - 16usize];
    ["Offset of field: _ENLISTMENT_BASIC_INFORMATION::ResourceManagerId"]
        [::std::mem::offset_of!(_ENLISTMENT_BASIC_INFORMATION, ResourceManagerId) - 32usize];
};
pub type ENLISTMENT_BASIC_INFORMATION = _ENLISTMENT_BASIC_INFORMATION;
pub type PENLISTMENT_BASIC_INFORMATION = *mut _ENLISTMENT_BASIC_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENLISTMENT_CRM_INFORMATION {
    pub CrmTransactionManagerId: GUID,
    pub CrmResourceManagerId: GUID,
    pub CrmEnlistmentId: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENLISTMENT_CRM_INFORMATION"]
        [::std::mem::size_of::<_ENLISTMENT_CRM_INFORMATION>() - 48usize];
    ["Alignment of _ENLISTMENT_CRM_INFORMATION"]
        [::std::mem::align_of::<_ENLISTMENT_CRM_INFORMATION>() - 4usize];
    ["Offset of field: _ENLISTMENT_CRM_INFORMATION::CrmTransactionManagerId"]
        [::std::mem::offset_of!(_ENLISTMENT_CRM_INFORMATION, CrmTransactionManagerId) - 0usize];
    ["Offset of field: _ENLISTMENT_CRM_INFORMATION::CrmResourceManagerId"]
        [::std::mem::offset_of!(_ENLISTMENT_CRM_INFORMATION, CrmResourceManagerId) - 16usize];
    ["Offset of field: _ENLISTMENT_CRM_INFORMATION::CrmEnlistmentId"]
        [::std::mem::offset_of!(_ENLISTMENT_CRM_INFORMATION, CrmEnlistmentId) - 32usize];
};
pub type ENLISTMENT_CRM_INFORMATION = _ENLISTMENT_CRM_INFORMATION;
pub type PENLISTMENT_CRM_INFORMATION = *mut _ENLISTMENT_CRM_INFORMATION;
pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentBasicInformation: _ENLISTMENT_INFORMATION_CLASS =
    0;
pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentRecoveryInformation:
    _ENLISTMENT_INFORMATION_CLASS = 1;
pub const _ENLISTMENT_INFORMATION_CLASS_EnlistmentCrmInformation: _ENLISTMENT_INFORMATION_CLASS = 2;
pub type _ENLISTMENT_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_ENLISTMENT_INFORMATION_CLASS as ENLISTMENT_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_LIST_ENTRY {
    pub UOW: UOW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_LIST_ENTRY"][::std::mem::size_of::<_TRANSACTION_LIST_ENTRY>() - 16usize];
    ["Alignment of _TRANSACTION_LIST_ENTRY"]
        [::std::mem::align_of::<_TRANSACTION_LIST_ENTRY>() - 4usize];
    ["Offset of field: _TRANSACTION_LIST_ENTRY::UOW"]
        [::std::mem::offset_of!(_TRANSACTION_LIST_ENTRY, UOW) - 0usize];
};
pub type TRANSACTION_LIST_ENTRY = _TRANSACTION_LIST_ENTRY;
pub type PTRANSACTION_LIST_ENTRY = *mut _TRANSACTION_LIST_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRANSACTION_LIST_INFORMATION {
    pub NumberOfTransactions: DWORD,
    pub TransactionInformation: [TRANSACTION_LIST_ENTRY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRANSACTION_LIST_INFORMATION"]
        [::std::mem::size_of::<_TRANSACTION_LIST_INFORMATION>() - 20usize];
    ["Alignment of _TRANSACTION_LIST_INFORMATION"]
        [::std::mem::align_of::<_TRANSACTION_LIST_INFORMATION>() - 4usize];
    ["Offset of field: _TRANSACTION_LIST_INFORMATION::NumberOfTransactions"]
        [::std::mem::offset_of!(_TRANSACTION_LIST_INFORMATION, NumberOfTransactions) - 0usize];
    ["Offset of field: _TRANSACTION_LIST_INFORMATION::TransactionInformation"]
        [::std::mem::offset_of!(_TRANSACTION_LIST_INFORMATION, TransactionInformation) - 4usize];
};
pub type TRANSACTION_LIST_INFORMATION = _TRANSACTION_LIST_INFORMATION;
pub type PTRANSACTION_LIST_INFORMATION = *mut _TRANSACTION_LIST_INFORMATION;
pub const _KTMOBJECT_TYPE_KTMOBJECT_TRANSACTION: _KTMOBJECT_TYPE = 0;
pub const _KTMOBJECT_TYPE_KTMOBJECT_TRANSACTION_MANAGER: _KTMOBJECT_TYPE = 1;
pub const _KTMOBJECT_TYPE_KTMOBJECT_RESOURCE_MANAGER: _KTMOBJECT_TYPE = 2;
pub const _KTMOBJECT_TYPE_KTMOBJECT_ENLISTMENT: _KTMOBJECT_TYPE = 3;
pub const _KTMOBJECT_TYPE_KTMOBJECT_INVALID: _KTMOBJECT_TYPE = 4;
pub type _KTMOBJECT_TYPE = ::std::os::raw::c_int;
pub use self::_KTMOBJECT_TYPE as KTMOBJECT_TYPE;
pub type PKTMOBJECT_TYPE = *mut _KTMOBJECT_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KTMOBJECT_CURSOR {
    pub LastQuery: GUID,
    pub ObjectIdCount: DWORD,
    pub ObjectIds: [GUID; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KTMOBJECT_CURSOR"][::std::mem::size_of::<_KTMOBJECT_CURSOR>() - 36usize];
    ["Alignment of _KTMOBJECT_CURSOR"][::std::mem::align_of::<_KTMOBJECT_CURSOR>() - 4usize];
    ["Offset of field: _KTMOBJECT_CURSOR::LastQuery"]
        [::std::mem::offset_of!(_KTMOBJECT_CURSOR, LastQuery) - 0usize];
    ["Offset of field: _KTMOBJECT_CURSOR::ObjectIdCount"]
        [::std::mem::offset_of!(_KTMOBJECT_CURSOR, ObjectIdCount) - 16usize];
    ["Offset of field: _KTMOBJECT_CURSOR::ObjectIds"]
        [::std::mem::offset_of!(_KTMOBJECT_CURSOR, ObjectIds) - 20usize];
};
pub type KTMOBJECT_CURSOR = _KTMOBJECT_CURSOR;
pub type PKTMOBJECT_CURSOR = *mut _KTMOBJECT_CURSOR;
pub type TP_VERSION = DWORD;
pub type PTP_VERSION = *mut DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_CALLBACK_INSTANCE {
    _unused: [u8; 0],
}
pub type TP_CALLBACK_INSTANCE = _TP_CALLBACK_INSTANCE;
pub type PTP_CALLBACK_INSTANCE = *mut _TP_CALLBACK_INSTANCE;
pub type PTP_SIMPLE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PTP_CALLBACK_INSTANCE, arg2: PVOID)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_POOL {
    _unused: [u8; 0],
}
pub type TP_POOL = _TP_POOL;
pub type PTP_POOL = *mut _TP_POOL;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_HIGH: _TP_CALLBACK_PRIORITY = 0;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_NORMAL: _TP_CALLBACK_PRIORITY = 1;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_LOW: _TP_CALLBACK_PRIORITY = 2;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_INVALID: _TP_CALLBACK_PRIORITY = 3;
pub const _TP_CALLBACK_PRIORITY_TP_CALLBACK_PRIORITY_COUNT: _TP_CALLBACK_PRIORITY = 3;
pub type _TP_CALLBACK_PRIORITY = ::std::os::raw::c_int;
pub use self::_TP_CALLBACK_PRIORITY as TP_CALLBACK_PRIORITY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_POOL_STACK_INFORMATION {
    pub StackReserve: SIZE_T,
    pub StackCommit: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TP_POOL_STACK_INFORMATION"]
        [::std::mem::size_of::<_TP_POOL_STACK_INFORMATION>() - 16usize];
    ["Alignment of _TP_POOL_STACK_INFORMATION"]
        [::std::mem::align_of::<_TP_POOL_STACK_INFORMATION>() - 8usize];
    ["Offset of field: _TP_POOL_STACK_INFORMATION::StackReserve"]
        [::std::mem::offset_of!(_TP_POOL_STACK_INFORMATION, StackReserve) - 0usize];
    ["Offset of field: _TP_POOL_STACK_INFORMATION::StackCommit"]
        [::std::mem::offset_of!(_TP_POOL_STACK_INFORMATION, StackCommit) - 8usize];
};
pub type TP_POOL_STACK_INFORMATION = _TP_POOL_STACK_INFORMATION;
pub type PTP_POOL_STACK_INFORMATION = *mut _TP_POOL_STACK_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_CLEANUP_GROUP {
    _unused: [u8; 0],
}
pub type TP_CLEANUP_GROUP = _TP_CLEANUP_GROUP;
pub type PTP_CLEANUP_GROUP = *mut _TP_CLEANUP_GROUP;
pub type PTP_CLEANUP_GROUP_CANCEL_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: PVOID, arg2: PVOID)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TP_CALLBACK_ENVIRON_V3 {
    pub Version: TP_VERSION,
    pub Pool: PTP_POOL,
    pub CleanupGroup: PTP_CLEANUP_GROUP,
    pub CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
    pub RaceDll: PVOID,
    pub ActivationContext: *mut _ACTIVATION_CONTEXT,
    pub FinalizationCallback: PTP_SIMPLE_CALLBACK,
    pub u: _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1,
    pub CallbackPriority: TP_CALLBACK_PRIORITY,
    pub Size: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1 {
    pub Flags: DWORD,
    pub s: _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn LongFunction(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_LongFunction(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn LongFunction_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_LongFunction_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Persistent(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Persistent(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Persistent_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Persistent_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Private(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Private(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Private_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Private_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        LongFunction: DWORD,
        Persistent: DWORD,
        Private: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let LongFunction: u32 = unsafe { ::std::mem::transmute(LongFunction) };
            LongFunction as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Persistent: u32 = unsafe { ::std::mem::transmute(Persistent) };
            Persistent as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Private: u32 = unsafe { ::std::mem::transmute(Private) };
            Private as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1"]
        [::std::mem::size_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1>() - 4usize];
    ["Alignment of _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1"]
        [::std::mem::align_of::<_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1>() - 4usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1, Flags) - 0usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1::s"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3__bindgen_ty_1, s) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TP_CALLBACK_ENVIRON_V3"][::std::mem::size_of::<_TP_CALLBACK_ENVIRON_V3>() - 72usize];
    ["Alignment of _TP_CALLBACK_ENVIRON_V3"]
        [::std::mem::align_of::<_TP_CALLBACK_ENVIRON_V3>() - 8usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::Version"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, Version) - 0usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::Pool"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, Pool) - 8usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::CleanupGroup"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, CleanupGroup) - 16usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::CleanupGroupCancelCallback"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, CleanupGroupCancelCallback) - 24usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::RaceDll"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, RaceDll) - 32usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::ActivationContext"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, ActivationContext) - 40usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::FinalizationCallback"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, FinalizationCallback) - 48usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::u"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, u) - 56usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::CallbackPriority"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, CallbackPriority) - 60usize];
    ["Offset of field: _TP_CALLBACK_ENVIRON_V3::Size"]
        [::std::mem::offset_of!(_TP_CALLBACK_ENVIRON_V3, Size) - 64usize];
};
pub type TP_CALLBACK_ENVIRON_V3 = _TP_CALLBACK_ENVIRON_V3;
pub type TP_CALLBACK_ENVIRON = TP_CALLBACK_ENVIRON_V3;
pub type PTP_CALLBACK_ENVIRON = *mut TP_CALLBACK_ENVIRON_V3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_WORK {
    _unused: [u8; 0],
}
pub type TP_WORK = _TP_WORK;
pub type PTP_WORK = *mut _TP_WORK;
pub type PTP_WORK_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(arg1: PTP_CALLBACK_INSTANCE, arg2: PVOID, arg3: PTP_WORK),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_TIMER {
    _unused: [u8; 0],
}
pub type TP_TIMER = _TP_TIMER;
pub type PTP_TIMER = *mut _TP_TIMER;
pub type PTP_TIMER_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(arg1: PTP_CALLBACK_INSTANCE, arg2: PVOID, arg3: PTP_TIMER),
>;
pub type TP_WAIT_RESULT = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_WAIT {
    _unused: [u8; 0],
}
pub type TP_WAIT = _TP_WAIT;
pub type PTP_WAIT = *mut _TP_WAIT;
pub type PTP_WAIT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PTP_CALLBACK_INSTANCE,
        arg2: PVOID,
        arg3: PTP_WAIT,
        arg4: TP_WAIT_RESULT,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TP_IO {
    _unused: [u8; 0],
}
pub type TP_IO = _TP_IO;
pub type PTP_IO = *mut _TP_IO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TEB {
    _unused: [u8; 0],
}
pub type WPARAM = UINT_PTR;
pub type LPARAM = LONG_PTR;
pub type LRESULT = LONG_PTR;
pub type SPHANDLE = *mut HANDLE;
pub type LPHANDLE = *mut HANDLE;
pub type HGLOBAL = HANDLE;
pub type HLOCAL = HANDLE;
pub type GLOBALHANDLE = HANDLE;
pub type LOCALHANDLE = HANDLE;
pub type FARPROC = ::std::option::Option<unsafe extern "C" fn() -> INT_PTR>;
pub type NEARPROC = ::std::option::Option<unsafe extern "C" fn() -> INT_PTR>;
pub type PROC = ::std::option::Option<unsafe extern "C" fn() -> INT_PTR>;
pub type ATOM = WORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HKEY__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HKEY__"][::std::mem::size_of::<HKEY__>() - 4usize];
    ["Alignment of HKEY__"][::std::mem::align_of::<HKEY__>() - 4usize];
    ["Offset of field: HKEY__::unused"][::std::mem::offset_of!(HKEY__, unused) - 0usize];
};
pub type HKEY = *mut HKEY__;
pub type PHKEY = *mut HKEY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMETAFILE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HMETAFILE__"][::std::mem::size_of::<HMETAFILE__>() - 4usize];
    ["Alignment of HMETAFILE__"][::std::mem::align_of::<HMETAFILE__>() - 4usize];
    ["Offset of field: HMETAFILE__::unused"][::std::mem::offset_of!(HMETAFILE__, unused) - 0usize];
};
pub type HMETAFILE = *mut HMETAFILE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HINSTANCE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HINSTANCE__"][::std::mem::size_of::<HINSTANCE__>() - 4usize];
    ["Alignment of HINSTANCE__"][::std::mem::align_of::<HINSTANCE__>() - 4usize];
    ["Offset of field: HINSTANCE__::unused"][::std::mem::offset_of!(HINSTANCE__, unused) - 0usize];
};
pub type HINSTANCE = *mut HINSTANCE__;
pub type HMODULE = HINSTANCE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRGN__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HRGN__"][::std::mem::size_of::<HRGN__>() - 4usize];
    ["Alignment of HRGN__"][::std::mem::align_of::<HRGN__>() - 4usize];
    ["Offset of field: HRGN__::unused"][::std::mem::offset_of!(HRGN__, unused) - 0usize];
};
pub type HRGN = *mut HRGN__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRSRC__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HRSRC__"][::std::mem::size_of::<HRSRC__>() - 4usize];
    ["Alignment of HRSRC__"][::std::mem::align_of::<HRSRC__>() - 4usize];
    ["Offset of field: HRSRC__::unused"][::std::mem::offset_of!(HRSRC__, unused) - 0usize];
};
pub type HRSRC = *mut HRSRC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSPRITE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HSPRITE__"][::std::mem::size_of::<HSPRITE__>() - 4usize];
    ["Alignment of HSPRITE__"][::std::mem::align_of::<HSPRITE__>() - 4usize];
    ["Offset of field: HSPRITE__::unused"][::std::mem::offset_of!(HSPRITE__, unused) - 0usize];
};
pub type HSPRITE = *mut HSPRITE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HLSURF__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HLSURF__"][::std::mem::size_of::<HLSURF__>() - 4usize];
    ["Alignment of HLSURF__"][::std::mem::align_of::<HLSURF__>() - 4usize];
    ["Offset of field: HLSURF__::unused"][::std::mem::offset_of!(HLSURF__, unused) - 0usize];
};
pub type HLSURF = *mut HLSURF__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSTR__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HSTR__"][::std::mem::size_of::<HSTR__>() - 4usize];
    ["Alignment of HSTR__"][::std::mem::align_of::<HSTR__>() - 4usize];
    ["Offset of field: HSTR__::unused"][::std::mem::offset_of!(HSTR__, unused) - 0usize];
};
pub type HSTR = *mut HSTR__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTASK__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HTASK__"][::std::mem::size_of::<HTASK__>() - 4usize];
    ["Alignment of HTASK__"][::std::mem::align_of::<HTASK__>() - 4usize];
    ["Offset of field: HTASK__::unused"][::std::mem::offset_of!(HTASK__, unused) - 0usize];
};
pub type HTASK = *mut HTASK__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWINSTA__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HWINSTA__"][::std::mem::size_of::<HWINSTA__>() - 4usize];
    ["Alignment of HWINSTA__"][::std::mem::align_of::<HWINSTA__>() - 4usize];
    ["Offset of field: HWINSTA__::unused"][::std::mem::offset_of!(HWINSTA__, unused) - 0usize];
};
pub type HWINSTA = *mut HWINSTA__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HKL__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HKL__"][::std::mem::size_of::<HKL__>() - 4usize];
    ["Alignment of HKL__"][::std::mem::align_of::<HKL__>() - 4usize];
    ["Offset of field: HKL__::unused"][::std::mem::offset_of!(HKL__, unused) - 0usize];
};
pub type HKL = *mut HKL__;
pub type HFILE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILETIME {
    pub dwLowDateTime: DWORD,
    pub dwHighDateTime: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILETIME"][::std::mem::size_of::<_FILETIME>() - 8usize];
    ["Alignment of _FILETIME"][::std::mem::align_of::<_FILETIME>() - 4usize];
    ["Offset of field: _FILETIME::dwLowDateTime"]
        [::std::mem::offset_of!(_FILETIME, dwLowDateTime) - 0usize];
    ["Offset of field: _FILETIME::dwHighDateTime"]
        [::std::mem::offset_of!(_FILETIME, dwHighDateTime) - 4usize];
};
pub type FILETIME = _FILETIME;
pub type PFILETIME = *mut _FILETIME;
pub type LPFILETIME = *mut _FILETIME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWND__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HWND__"][::std::mem::size_of::<HWND__>() - 4usize];
    ["Alignment of HWND__"][::std::mem::align_of::<HWND__>() - 4usize];
    ["Offset of field: HWND__::unused"][::std::mem::offset_of!(HWND__, unused) - 0usize];
};
pub type HWND = *mut HWND__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HHOOK__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HHOOK__"][::std::mem::size_of::<HHOOK__>() - 4usize];
    ["Alignment of HHOOK__"][::std::mem::align_of::<HHOOK__>() - 4usize];
    ["Offset of field: HHOOK__::unused"][::std::mem::offset_of!(HHOOK__, unused) - 0usize];
};
pub type HHOOK = *mut HHOOK__;
pub type HGDIOBJ = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HACCEL__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HACCEL__"][::std::mem::size_of::<HACCEL__>() - 4usize];
    ["Alignment of HACCEL__"][::std::mem::align_of::<HACCEL__>() - 4usize];
    ["Offset of field: HACCEL__::unused"][::std::mem::offset_of!(HACCEL__, unused) - 0usize];
};
pub type HACCEL = *mut HACCEL__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HBITMAP__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HBITMAP__"][::std::mem::size_of::<HBITMAP__>() - 4usize];
    ["Alignment of HBITMAP__"][::std::mem::align_of::<HBITMAP__>() - 4usize];
    ["Offset of field: HBITMAP__::unused"][::std::mem::offset_of!(HBITMAP__, unused) - 0usize];
};
pub type HBITMAP = *mut HBITMAP__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HBRUSH__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HBRUSH__"][::std::mem::size_of::<HBRUSH__>() - 4usize];
    ["Alignment of HBRUSH__"][::std::mem::align_of::<HBRUSH__>() - 4usize];
    ["Offset of field: HBRUSH__::unused"][::std::mem::offset_of!(HBRUSH__, unused) - 0usize];
};
pub type HBRUSH = *mut HBRUSH__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HCOLORSPACE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HCOLORSPACE__"][::std::mem::size_of::<HCOLORSPACE__>() - 4usize];
    ["Alignment of HCOLORSPACE__"][::std::mem::align_of::<HCOLORSPACE__>() - 4usize];
    ["Offset of field: HCOLORSPACE__::unused"]
        [::std::mem::offset_of!(HCOLORSPACE__, unused) - 0usize];
};
pub type HCOLORSPACE = *mut HCOLORSPACE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDC__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HDC__"][::std::mem::size_of::<HDC__>() - 4usize];
    ["Alignment of HDC__"][::std::mem::align_of::<HDC__>() - 4usize];
    ["Offset of field: HDC__::unused"][::std::mem::offset_of!(HDC__, unused) - 0usize];
};
pub type HDC = *mut HDC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HGLRC__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HGLRC__"][::std::mem::size_of::<HGLRC__>() - 4usize];
    ["Alignment of HGLRC__"][::std::mem::align_of::<HGLRC__>() - 4usize];
    ["Offset of field: HGLRC__::unused"][::std::mem::offset_of!(HGLRC__, unused) - 0usize];
};
pub type HGLRC = *mut HGLRC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HDESK__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HDESK__"][::std::mem::size_of::<HDESK__>() - 4usize];
    ["Alignment of HDESK__"][::std::mem::align_of::<HDESK__>() - 4usize];
    ["Offset of field: HDESK__::unused"][::std::mem::offset_of!(HDESK__, unused) - 0usize];
};
pub type HDESK = *mut HDESK__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HENHMETAFILE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HENHMETAFILE__"][::std::mem::size_of::<HENHMETAFILE__>() - 4usize];
    ["Alignment of HENHMETAFILE__"][::std::mem::align_of::<HENHMETAFILE__>() - 4usize];
    ["Offset of field: HENHMETAFILE__::unused"]
        [::std::mem::offset_of!(HENHMETAFILE__, unused) - 0usize];
};
pub type HENHMETAFILE = *mut HENHMETAFILE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HFONT__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HFONT__"][::std::mem::size_of::<HFONT__>() - 4usize];
    ["Alignment of HFONT__"][::std::mem::align_of::<HFONT__>() - 4usize];
    ["Offset of field: HFONT__::unused"][::std::mem::offset_of!(HFONT__, unused) - 0usize];
};
pub type HFONT = *mut HFONT__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HICON__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HICON__"][::std::mem::size_of::<HICON__>() - 4usize];
    ["Alignment of HICON__"][::std::mem::align_of::<HICON__>() - 4usize];
    ["Offset of field: HICON__::unused"][::std::mem::offset_of!(HICON__, unused) - 0usize];
};
pub type HICON = *mut HICON__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMENU__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HMENU__"][::std::mem::size_of::<HMENU__>() - 4usize];
    ["Alignment of HMENU__"][::std::mem::align_of::<HMENU__>() - 4usize];
    ["Offset of field: HMENU__::unused"][::std::mem::offset_of!(HMENU__, unused) - 0usize];
};
pub type HMENU = *mut HMENU__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPALETTE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HPALETTE__"][::std::mem::size_of::<HPALETTE__>() - 4usize];
    ["Alignment of HPALETTE__"][::std::mem::align_of::<HPALETTE__>() - 4usize];
    ["Offset of field: HPALETTE__::unused"][::std::mem::offset_of!(HPALETTE__, unused) - 0usize];
};
pub type HPALETTE = *mut HPALETTE__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HPEN__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HPEN__"][::std::mem::size_of::<HPEN__>() - 4usize];
    ["Alignment of HPEN__"][::std::mem::align_of::<HPEN__>() - 4usize];
    ["Offset of field: HPEN__::unused"][::std::mem::offset_of!(HPEN__, unused) - 0usize];
};
pub type HPEN = *mut HPEN__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HWINEVENTHOOK__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HWINEVENTHOOK__"][::std::mem::size_of::<HWINEVENTHOOK__>() - 4usize];
    ["Alignment of HWINEVENTHOOK__"][::std::mem::align_of::<HWINEVENTHOOK__>() - 4usize];
    ["Offset of field: HWINEVENTHOOK__::unused"]
        [::std::mem::offset_of!(HWINEVENTHOOK__, unused) - 0usize];
};
pub type HWINEVENTHOOK = *mut HWINEVENTHOOK__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMONITOR__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HMONITOR__"][::std::mem::size_of::<HMONITOR__>() - 4usize];
    ["Alignment of HMONITOR__"][::std::mem::align_of::<HMONITOR__>() - 4usize];
    ["Offset of field: HMONITOR__::unused"][::std::mem::offset_of!(HMONITOR__, unused) - 0usize];
};
pub type HMONITOR = *mut HMONITOR__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HUMPD__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HUMPD__"][::std::mem::size_of::<HUMPD__>() - 4usize];
    ["Alignment of HUMPD__"][::std::mem::align_of::<HUMPD__>() - 4usize];
    ["Offset of field: HUMPD__::unused"][::std::mem::offset_of!(HUMPD__, unused) - 0usize];
};
pub type HUMPD = *mut HUMPD__;
pub type HCURSOR = HICON;
pub type COLORREF = DWORD;
pub type LPCOLORREF = *mut DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECT {
    pub left: LONG,
    pub top: LONG,
    pub right: LONG,
    pub bottom: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRECT"][::std::mem::size_of::<tagRECT>() - 16usize];
    ["Alignment of tagRECT"][::std::mem::align_of::<tagRECT>() - 4usize];
    ["Offset of field: tagRECT::left"][::std::mem::offset_of!(tagRECT, left) - 0usize];
    ["Offset of field: tagRECT::top"][::std::mem::offset_of!(tagRECT, top) - 4usize];
    ["Offset of field: tagRECT::right"][::std::mem::offset_of!(tagRECT, right) - 8usize];
    ["Offset of field: tagRECT::bottom"][::std::mem::offset_of!(tagRECT, bottom) - 12usize];
};
pub type RECT = tagRECT;
pub type PRECT = *mut tagRECT;
pub type NPRECT = *mut tagRECT;
pub type LPRECT = *mut tagRECT;
pub type LPCRECT = *const RECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RECTL {
    pub left: LONG,
    pub top: LONG,
    pub right: LONG,
    pub bottom: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RECTL"][::std::mem::size_of::<_RECTL>() - 16usize];
    ["Alignment of _RECTL"][::std::mem::align_of::<_RECTL>() - 4usize];
    ["Offset of field: _RECTL::left"][::std::mem::offset_of!(_RECTL, left) - 0usize];
    ["Offset of field: _RECTL::top"][::std::mem::offset_of!(_RECTL, top) - 4usize];
    ["Offset of field: _RECTL::right"][::std::mem::offset_of!(_RECTL, right) - 8usize];
    ["Offset of field: _RECTL::bottom"][::std::mem::offset_of!(_RECTL, bottom) - 12usize];
};
pub type RECTL = _RECTL;
pub type PRECTL = *mut _RECTL;
pub type LPRECTL = *mut _RECTL;
pub type LPCRECTL = *const RECTL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINT {
    pub x: LONG,
    pub y: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINT"][::std::mem::size_of::<tagPOINT>() - 8usize];
    ["Alignment of tagPOINT"][::std::mem::align_of::<tagPOINT>() - 4usize];
    ["Offset of field: tagPOINT::x"][::std::mem::offset_of!(tagPOINT, x) - 0usize];
    ["Offset of field: tagPOINT::y"][::std::mem::offset_of!(tagPOINT, y) - 4usize];
};
pub type POINT = tagPOINT;
pub type PPOINT = *mut tagPOINT;
pub type NPPOINT = *mut tagPOINT;
pub type LPPOINT = *mut tagPOINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTL {
    pub x: LONG,
    pub y: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINTL"][::std::mem::size_of::<_POINTL>() - 8usize];
    ["Alignment of _POINTL"][::std::mem::align_of::<_POINTL>() - 4usize];
    ["Offset of field: _POINTL::x"][::std::mem::offset_of!(_POINTL, x) - 0usize];
    ["Offset of field: _POINTL::y"][::std::mem::offset_of!(_POINTL, y) - 4usize];
};
pub type POINTL = _POINTL;
pub type PPOINTL = *mut _POINTL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSIZE {
    pub cx: LONG,
    pub cy: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSIZE"][::std::mem::size_of::<tagSIZE>() - 8usize];
    ["Alignment of tagSIZE"][::std::mem::align_of::<tagSIZE>() - 4usize];
    ["Offset of field: tagSIZE::cx"][::std::mem::offset_of!(tagSIZE, cx) - 0usize];
    ["Offset of field: tagSIZE::cy"][::std::mem::offset_of!(tagSIZE, cy) - 4usize];
};
pub type SIZE = tagSIZE;
pub type PSIZE = *mut tagSIZE;
pub type LPSIZE = *mut tagSIZE;
pub type SIZEL = SIZE;
pub type PSIZEL = *mut SIZE;
pub type LPSIZEL = *mut SIZE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTS {
    pub x: SHORT,
    pub y: SHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTS"][::std::mem::size_of::<tagPOINTS>() - 4usize];
    ["Alignment of tagPOINTS"][::std::mem::align_of::<tagPOINTS>() - 2usize];
    ["Offset of field: tagPOINTS::x"][::std::mem::offset_of!(tagPOINTS, x) - 0usize];
    ["Offset of field: tagPOINTS::y"][::std::mem::offset_of!(tagPOINTS, y) - 2usize];
};
pub type POINTS = tagPOINTS;
pub type PPOINTS = *mut tagPOINTS;
pub type LPPOINTS = *mut tagPOINTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct APP_LOCAL_DEVICE_ID {
    pub value: [BYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of APP_LOCAL_DEVICE_ID"][::std::mem::size_of::<APP_LOCAL_DEVICE_ID>() - 32usize];
    ["Alignment of APP_LOCAL_DEVICE_ID"][::std::mem::align_of::<APP_LOCAL_DEVICE_ID>() - 1usize];
    ["Offset of field: APP_LOCAL_DEVICE_ID::value"]
        [::std::mem::offset_of!(APP_LOCAL_DEVICE_ID, value) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DPI_AWARENESS_CONTEXT__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DPI_AWARENESS_CONTEXT__"][::std::mem::size_of::<DPI_AWARENESS_CONTEXT__>() - 4usize];
    ["Alignment of DPI_AWARENESS_CONTEXT__"]
        [::std::mem::align_of::<DPI_AWARENESS_CONTEXT__>() - 4usize];
    ["Offset of field: DPI_AWARENESS_CONTEXT__::unused"]
        [::std::mem::offset_of!(DPI_AWARENESS_CONTEXT__, unused) - 0usize];
};
pub type DPI_AWARENESS_CONTEXT = *mut DPI_AWARENESS_CONTEXT__;
pub const DPI_AWARENESS_DPI_AWARENESS_INVALID: DPI_AWARENESS = -1;
pub const DPI_AWARENESS_DPI_AWARENESS_UNAWARE: DPI_AWARENESS = 0;
pub const DPI_AWARENESS_DPI_AWARENESS_SYSTEM_AWARE: DPI_AWARENESS = 1;
pub const DPI_AWARENESS_DPI_AWARENESS_PER_MONITOR_AWARE: DPI_AWARENESS = 2;
pub type DPI_AWARENESS = ::std::os::raw::c_int;
pub const DPI_HOSTING_BEHAVIOR_DPI_HOSTING_BEHAVIOR_INVALID: DPI_HOSTING_BEHAVIOR = -1;
pub const DPI_HOSTING_BEHAVIOR_DPI_HOSTING_BEHAVIOR_DEFAULT: DPI_HOSTING_BEHAVIOR = 0;
pub const DPI_HOSTING_BEHAVIOR_DPI_HOSTING_BEHAVIOR_MIXED: DPI_HOSTING_BEHAVIOR = 1;
pub type DPI_HOSTING_BEHAVIOR = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SECURITY_ATTRIBUTES {
    pub nLength: DWORD,
    pub lpSecurityDescriptor: LPVOID,
    pub bInheritHandle: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SECURITY_ATTRIBUTES"][::std::mem::size_of::<_SECURITY_ATTRIBUTES>() - 24usize];
    ["Alignment of _SECURITY_ATTRIBUTES"][::std::mem::align_of::<_SECURITY_ATTRIBUTES>() - 8usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::nLength"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, nLength) - 0usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::lpSecurityDescriptor"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, lpSecurityDescriptor) - 8usize];
    ["Offset of field: _SECURITY_ATTRIBUTES::bInheritHandle"]
        [::std::mem::offset_of!(_SECURITY_ATTRIBUTES, bInheritHandle) - 16usize];
};
pub type SECURITY_ATTRIBUTES = _SECURITY_ATTRIBUTES;
pub type PSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
pub type LPSECURITY_ATTRIBUTES = *mut _SECURITY_ATTRIBUTES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _OVERLAPPED {
    pub Internal: ULONG_PTR,
    pub InternalHigh: ULONG_PTR,
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1,
    pub hEvent: HANDLE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _OVERLAPPED__bindgen_ty_1 {
    pub __bindgen_anon_1: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1,
    pub Pointer: PVOID,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 {
    pub Offset: DWORD,
    pub OffsetHigh: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::Offset"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, Offset) - 0usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1__bindgen_ty_1::OffsetHigh"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1__bindgen_ty_1, OffsetHigh) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::size_of::<_OVERLAPPED__bindgen_ty_1>() - 8usize];
    ["Alignment of _OVERLAPPED__bindgen_ty_1"]
        [::std::mem::align_of::<_OVERLAPPED__bindgen_ty_1>() - 8usize];
    ["Offset of field: _OVERLAPPED__bindgen_ty_1::Pointer"]
        [::std::mem::offset_of!(_OVERLAPPED__bindgen_ty_1, Pointer) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED"][::std::mem::size_of::<_OVERLAPPED>() - 32usize];
    ["Alignment of _OVERLAPPED"][::std::mem::align_of::<_OVERLAPPED>() - 8usize];
    ["Offset of field: _OVERLAPPED::Internal"]
        [::std::mem::offset_of!(_OVERLAPPED, Internal) - 0usize];
    ["Offset of field: _OVERLAPPED::InternalHigh"]
        [::std::mem::offset_of!(_OVERLAPPED, InternalHigh) - 8usize];
    ["Offset of field: _OVERLAPPED::hEvent"][::std::mem::offset_of!(_OVERLAPPED, hEvent) - 24usize];
};
pub type OVERLAPPED = _OVERLAPPED;
pub type LPOVERLAPPED = *mut _OVERLAPPED;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OVERLAPPED_ENTRY {
    pub lpCompletionKey: ULONG_PTR,
    pub lpOverlapped: LPOVERLAPPED,
    pub Internal: ULONG_PTR,
    pub dwNumberOfBytesTransferred: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OVERLAPPED_ENTRY"][::std::mem::size_of::<_OVERLAPPED_ENTRY>() - 32usize];
    ["Alignment of _OVERLAPPED_ENTRY"][::std::mem::align_of::<_OVERLAPPED_ENTRY>() - 8usize];
    ["Offset of field: _OVERLAPPED_ENTRY::lpCompletionKey"]
        [::std::mem::offset_of!(_OVERLAPPED_ENTRY, lpCompletionKey) - 0usize];
    ["Offset of field: _OVERLAPPED_ENTRY::lpOverlapped"]
        [::std::mem::offset_of!(_OVERLAPPED_ENTRY, lpOverlapped) - 8usize];
    ["Offset of field: _OVERLAPPED_ENTRY::Internal"]
        [::std::mem::offset_of!(_OVERLAPPED_ENTRY, Internal) - 16usize];
    ["Offset of field: _OVERLAPPED_ENTRY::dwNumberOfBytesTransferred"]
        [::std::mem::offset_of!(_OVERLAPPED_ENTRY, dwNumberOfBytesTransferred) - 24usize];
};
pub type OVERLAPPED_ENTRY = _OVERLAPPED_ENTRY;
pub type LPOVERLAPPED_ENTRY = *mut _OVERLAPPED_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEMTIME {
    pub wYear: WORD,
    pub wMonth: WORD,
    pub wDayOfWeek: WORD,
    pub wDay: WORD,
    pub wHour: WORD,
    pub wMinute: WORD,
    pub wSecond: WORD,
    pub wMilliseconds: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEMTIME"][::std::mem::size_of::<_SYSTEMTIME>() - 16usize];
    ["Alignment of _SYSTEMTIME"][::std::mem::align_of::<_SYSTEMTIME>() - 2usize];
    ["Offset of field: _SYSTEMTIME::wYear"][::std::mem::offset_of!(_SYSTEMTIME, wYear) - 0usize];
    ["Offset of field: _SYSTEMTIME::wMonth"][::std::mem::offset_of!(_SYSTEMTIME, wMonth) - 2usize];
    ["Offset of field: _SYSTEMTIME::wDayOfWeek"]
        [::std::mem::offset_of!(_SYSTEMTIME, wDayOfWeek) - 4usize];
    ["Offset of field: _SYSTEMTIME::wDay"][::std::mem::offset_of!(_SYSTEMTIME, wDay) - 6usize];
    ["Offset of field: _SYSTEMTIME::wHour"][::std::mem::offset_of!(_SYSTEMTIME, wHour) - 8usize];
    ["Offset of field: _SYSTEMTIME::wMinute"]
        [::std::mem::offset_of!(_SYSTEMTIME, wMinute) - 10usize];
    ["Offset of field: _SYSTEMTIME::wSecond"]
        [::std::mem::offset_of!(_SYSTEMTIME, wSecond) - 12usize];
    ["Offset of field: _SYSTEMTIME::wMilliseconds"]
        [::std::mem::offset_of!(_SYSTEMTIME, wMilliseconds) - 14usize];
};
pub type SYSTEMTIME = _SYSTEMTIME;
pub type PSYSTEMTIME = *mut _SYSTEMTIME;
pub type LPSYSTEMTIME = *mut _SYSTEMTIME;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_FIND_DATAA {
    pub dwFileAttributes: DWORD,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub nFileSizeHigh: DWORD,
    pub nFileSizeLow: DWORD,
    pub dwReserved0: DWORD,
    pub dwReserved1: DWORD,
    pub cFileName: [CHAR; 260usize],
    pub cAlternateFileName: [CHAR; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_FIND_DATAA"][::std::mem::size_of::<_WIN32_FIND_DATAA>() - 320usize];
    ["Alignment of _WIN32_FIND_DATAA"][::std::mem::align_of::<_WIN32_FIND_DATAA>() - 4usize];
    ["Offset of field: _WIN32_FIND_DATAA::dwFileAttributes"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, dwFileAttributes) - 0usize];
    ["Offset of field: _WIN32_FIND_DATAA::ftCreationTime"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, ftCreationTime) - 4usize];
    ["Offset of field: _WIN32_FIND_DATAA::ftLastAccessTime"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, ftLastAccessTime) - 12usize];
    ["Offset of field: _WIN32_FIND_DATAA::ftLastWriteTime"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, ftLastWriteTime) - 20usize];
    ["Offset of field: _WIN32_FIND_DATAA::nFileSizeHigh"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, nFileSizeHigh) - 28usize];
    ["Offset of field: _WIN32_FIND_DATAA::nFileSizeLow"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, nFileSizeLow) - 32usize];
    ["Offset of field: _WIN32_FIND_DATAA::dwReserved0"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, dwReserved0) - 36usize];
    ["Offset of field: _WIN32_FIND_DATAA::dwReserved1"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, dwReserved1) - 40usize];
    ["Offset of field: _WIN32_FIND_DATAA::cFileName"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, cFileName) - 44usize];
    ["Offset of field: _WIN32_FIND_DATAA::cAlternateFileName"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAA, cAlternateFileName) - 304usize];
};
pub type WIN32_FIND_DATAA = _WIN32_FIND_DATAA;
pub type PWIN32_FIND_DATAA = *mut _WIN32_FIND_DATAA;
pub type LPWIN32_FIND_DATAA = *mut _WIN32_FIND_DATAA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_FIND_DATAW {
    pub dwFileAttributes: DWORD,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub nFileSizeHigh: DWORD,
    pub nFileSizeLow: DWORD,
    pub dwReserved0: DWORD,
    pub dwReserved1: DWORD,
    pub cFileName: [WCHAR; 260usize],
    pub cAlternateFileName: [WCHAR; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_FIND_DATAW"][::std::mem::size_of::<_WIN32_FIND_DATAW>() - 592usize];
    ["Alignment of _WIN32_FIND_DATAW"][::std::mem::align_of::<_WIN32_FIND_DATAW>() - 4usize];
    ["Offset of field: _WIN32_FIND_DATAW::dwFileAttributes"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, dwFileAttributes) - 0usize];
    ["Offset of field: _WIN32_FIND_DATAW::ftCreationTime"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, ftCreationTime) - 4usize];
    ["Offset of field: _WIN32_FIND_DATAW::ftLastAccessTime"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, ftLastAccessTime) - 12usize];
    ["Offset of field: _WIN32_FIND_DATAW::ftLastWriteTime"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, ftLastWriteTime) - 20usize];
    ["Offset of field: _WIN32_FIND_DATAW::nFileSizeHigh"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, nFileSizeHigh) - 28usize];
    ["Offset of field: _WIN32_FIND_DATAW::nFileSizeLow"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, nFileSizeLow) - 32usize];
    ["Offset of field: _WIN32_FIND_DATAW::dwReserved0"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, dwReserved0) - 36usize];
    ["Offset of field: _WIN32_FIND_DATAW::dwReserved1"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, dwReserved1) - 40usize];
    ["Offset of field: _WIN32_FIND_DATAW::cFileName"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, cFileName) - 44usize];
    ["Offset of field: _WIN32_FIND_DATAW::cAlternateFileName"]
        [::std::mem::offset_of!(_WIN32_FIND_DATAW, cAlternateFileName) - 564usize];
};
pub type WIN32_FIND_DATAW = _WIN32_FIND_DATAW;
pub type PWIN32_FIND_DATAW = *mut _WIN32_FIND_DATAW;
pub type LPWIN32_FIND_DATAW = *mut _WIN32_FIND_DATAW;
pub type WIN32_FIND_DATA = WIN32_FIND_DATAA;
pub type PWIN32_FIND_DATA = PWIN32_FIND_DATAA;
pub type LPWIN32_FIND_DATA = LPWIN32_FIND_DATAA;
pub const _FINDEX_INFO_LEVELS_FindExInfoStandard: _FINDEX_INFO_LEVELS = 0;
pub const _FINDEX_INFO_LEVELS_FindExInfoBasic: _FINDEX_INFO_LEVELS = 1;
pub const _FINDEX_INFO_LEVELS_FindExInfoMaxInfoLevel: _FINDEX_INFO_LEVELS = 2;
pub type _FINDEX_INFO_LEVELS = ::std::os::raw::c_int;
pub use self::_FINDEX_INFO_LEVELS as FINDEX_INFO_LEVELS;
pub const _FINDEX_SEARCH_OPS_FindExSearchNameMatch: _FINDEX_SEARCH_OPS = 0;
pub const _FINDEX_SEARCH_OPS_FindExSearchLimitToDirectories: _FINDEX_SEARCH_OPS = 1;
pub const _FINDEX_SEARCH_OPS_FindExSearchLimitToDevices: _FINDEX_SEARCH_OPS = 2;
pub const _FINDEX_SEARCH_OPS_FindExSearchMaxSearchOp: _FINDEX_SEARCH_OPS = 3;
pub type _FINDEX_SEARCH_OPS = ::std::os::raw::c_int;
pub use self::_FINDEX_SEARCH_OPS as FINDEX_SEARCH_OPS;
pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_ReadDirectoryNotifyInformation:
    _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 1;
pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_ReadDirectoryNotifyExtendedInformation:
    _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 2;
pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_ReadDirectoryNotifyFullInformation:
    _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 3;
pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS_ReadDirectoryNotifyMaximumInformation:
    _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = 4;
pub type _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_READ_DIRECTORY_NOTIFY_INFORMATION_CLASS as READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
pub type PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = *mut _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
pub const _GET_FILEEX_INFO_LEVELS_GetFileExInfoStandard: _GET_FILEEX_INFO_LEVELS = 0;
pub const _GET_FILEEX_INFO_LEVELS_GetFileExMaxInfoLevel: _GET_FILEEX_INFO_LEVELS = 1;
pub type _GET_FILEEX_INFO_LEVELS = ::std::os::raw::c_int;
pub use self::_GET_FILEEX_INFO_LEVELS as GET_FILEEX_INFO_LEVELS;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileBasicInfo: _FILE_INFO_BY_HANDLE_CLASS = 0;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileStandardInfo: _FILE_INFO_BY_HANDLE_CLASS = 1;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileNameInfo: _FILE_INFO_BY_HANDLE_CLASS = 2;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileRenameInfo: _FILE_INFO_BY_HANDLE_CLASS = 3;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileDispositionInfo: _FILE_INFO_BY_HANDLE_CLASS = 4;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileAllocationInfo: _FILE_INFO_BY_HANDLE_CLASS = 5;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileEndOfFileInfo: _FILE_INFO_BY_HANDLE_CLASS = 6;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileStreamInfo: _FILE_INFO_BY_HANDLE_CLASS = 7;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileCompressionInfo: _FILE_INFO_BY_HANDLE_CLASS = 8;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileAttributeTagInfo: _FILE_INFO_BY_HANDLE_CLASS = 9;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdBothDirectoryInfo: _FILE_INFO_BY_HANDLE_CLASS = 10;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdBothDirectoryRestartInfo: _FILE_INFO_BY_HANDLE_CLASS =
    11;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileIoPriorityHintInfo: _FILE_INFO_BY_HANDLE_CLASS = 12;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileRemoteProtocolInfo: _FILE_INFO_BY_HANDLE_CLASS = 13;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileFullDirectoryInfo: _FILE_INFO_BY_HANDLE_CLASS = 14;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileFullDirectoryRestartInfo: _FILE_INFO_BY_HANDLE_CLASS = 15;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileStorageInfo: _FILE_INFO_BY_HANDLE_CLASS = 16;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileAlignmentInfo: _FILE_INFO_BY_HANDLE_CLASS = 17;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdInfo: _FILE_INFO_BY_HANDLE_CLASS = 18;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdExtdDirectoryInfo: _FILE_INFO_BY_HANDLE_CLASS = 19;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileIdExtdDirectoryRestartInfo: _FILE_INFO_BY_HANDLE_CLASS =
    20;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileDispositionInfoEx: _FILE_INFO_BY_HANDLE_CLASS = 21;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileRenameInfoEx: _FILE_INFO_BY_HANDLE_CLASS = 22;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileCaseSensitiveInfo: _FILE_INFO_BY_HANDLE_CLASS = 23;
pub const _FILE_INFO_BY_HANDLE_CLASS_FileNormalizedNameInfo: _FILE_INFO_BY_HANDLE_CLASS = 24;
pub const _FILE_INFO_BY_HANDLE_CLASS_MaximumFileInfoByHandleClass: _FILE_INFO_BY_HANDLE_CLASS = 25;
pub type _FILE_INFO_BY_HANDLE_CLASS = ::std::os::raw::c_int;
pub use self::_FILE_INFO_BY_HANDLE_CLASS as FILE_INFO_BY_HANDLE_CLASS;
pub type PFILE_INFO_BY_HANDLE_CLASS = *mut _FILE_INFO_BY_HANDLE_CLASS;
pub const _FILE_INFO_BY_NAME_CLASS_FileStatByNameInfo: _FILE_INFO_BY_NAME_CLASS = 0;
pub const _FILE_INFO_BY_NAME_CLASS_FileStatLxByNameInfo: _FILE_INFO_BY_NAME_CLASS = 1;
pub const _FILE_INFO_BY_NAME_CLASS_FileCaseSensitiveByNameInfo: _FILE_INFO_BY_NAME_CLASS = 2;
pub const _FILE_INFO_BY_NAME_CLASS_FileStatBasicByNameInfo: _FILE_INFO_BY_NAME_CLASS = 3;
pub const _FILE_INFO_BY_NAME_CLASS_MaximumFileInfoByNameClass: _FILE_INFO_BY_NAME_CLASS = 4;
pub type _FILE_INFO_BY_NAME_CLASS = ::std::os::raw::c_int;
pub use self::_FILE_INFO_BY_NAME_CLASS as FILE_INFO_BY_NAME_CLASS;
pub type PFILE_INFO_BY_NAME_CLASS = *mut _FILE_INFO_BY_NAME_CLASS;
pub type CRITICAL_SECTION = RTL_CRITICAL_SECTION;
pub type PCRITICAL_SECTION = PRTL_CRITICAL_SECTION;
pub type LPCRITICAL_SECTION = PRTL_CRITICAL_SECTION;
pub type CRITICAL_SECTION_DEBUG = RTL_CRITICAL_SECTION_DEBUG;
pub type PCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG;
pub type LPCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG;
pub type LPOVERLAPPED_COMPLETION_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        dwErrorCode: DWORD,
        dwNumberOfBytesTransfered: DWORD,
        lpOverlapped: LPOVERLAPPED,
    ),
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PROCESS_HEAP_ENTRY {
    pub lpData: PVOID,
    pub cbData: DWORD,
    pub cbOverhead: BYTE,
    pub iRegionIndex: BYTE,
    pub wFlags: WORD,
    pub __bindgen_anon_1: _PROCESS_HEAP_ENTRY__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_HEAP_ENTRY__bindgen_ty_1 {
    pub Block: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1,
    pub Region: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1 {
    pub hMem: HANDLE,
    pub dwReserved: [DWORD; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1::hMem"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1, hMem) - 0usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1::dwReserved"][::std::mem::offset_of!(
        _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1,
        dwReserved
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2 {
    pub dwCommittedSize: DWORD,
    pub dwUnCommittedSize: DWORD,
    pub lpFirstBlock: LPVOID,
    pub lpLastBlock: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2>() - 24usize];
    ["Alignment of _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2::dwCommittedSize"][::std::mem::offset_of!(
        _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2,
        dwCommittedSize
    )
        - 0usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2::dwUnCommittedSize"][::std::mem::offset_of!(
        _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2,
        dwUnCommittedSize
    )
        - 4usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2::lpFirstBlock"][::std::mem::offset_of!(
        _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2,
        lpFirstBlock
    ) - 8usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2::lpLastBlock"][::std::mem::offset_of!(
        _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2,
        lpLastBlock
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_HEAP_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_HEAP_ENTRY__bindgen_ty_1>() - 24usize];
    ["Alignment of _PROCESS_HEAP_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_HEAP_ENTRY__bindgen_ty_1>() - 8usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1::Block"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY__bindgen_ty_1, Block) - 0usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY__bindgen_ty_1::Region"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY__bindgen_ty_1, Region) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_HEAP_ENTRY"][::std::mem::size_of::<_PROCESS_HEAP_ENTRY>() - 40usize];
    ["Alignment of _PROCESS_HEAP_ENTRY"][::std::mem::align_of::<_PROCESS_HEAP_ENTRY>() - 8usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY::lpData"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY, lpData) - 0usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY::cbData"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY, cbData) - 8usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY::cbOverhead"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY, cbOverhead) - 12usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY::iRegionIndex"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY, iRegionIndex) - 13usize];
    ["Offset of field: _PROCESS_HEAP_ENTRY::wFlags"]
        [::std::mem::offset_of!(_PROCESS_HEAP_ENTRY, wFlags) - 14usize];
};
pub type PROCESS_HEAP_ENTRY = _PROCESS_HEAP_ENTRY;
pub type LPPROCESS_HEAP_ENTRY = *mut _PROCESS_HEAP_ENTRY;
pub type PPROCESS_HEAP_ENTRY = *mut _PROCESS_HEAP_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _REASON_CONTEXT {
    pub Version: ULONG,
    pub Flags: DWORD,
    pub Reason: _REASON_CONTEXT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _REASON_CONTEXT__bindgen_ty_1 {
    pub Detailed: _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1,
    pub SimpleReasonString: LPWSTR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1 {
    pub LocalizedReasonModule: HMODULE,
    pub LocalizedReasonId: ULONG,
    pub ReasonStringCount: ULONG,
    pub ReasonStrings: *mut LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1::LocalizedReasonModule"][::std::mem::offset_of!(
        _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        LocalizedReasonModule
    )
        - 0usize];
    ["Offset of field: _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1::LocalizedReasonId"][::std::mem::offset_of!(
        _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        LocalizedReasonId
    ) - 8usize];
    ["Offset of field: _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1::ReasonStringCount"][::std::mem::offset_of!(
        _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        ReasonStringCount
    )
        - 12usize];
    ["Offset of field: _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1::ReasonStrings"][::std::mem::offset_of!(
        _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1,
        ReasonStrings
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REASON_CONTEXT__bindgen_ty_1"]
        [::std::mem::size_of::<_REASON_CONTEXT__bindgen_ty_1>() - 24usize];
    ["Alignment of _REASON_CONTEXT__bindgen_ty_1"]
        [::std::mem::align_of::<_REASON_CONTEXT__bindgen_ty_1>() - 8usize];
    ["Offset of field: _REASON_CONTEXT__bindgen_ty_1::Detailed"]
        [::std::mem::offset_of!(_REASON_CONTEXT__bindgen_ty_1, Detailed) - 0usize];
    ["Offset of field: _REASON_CONTEXT__bindgen_ty_1::SimpleReasonString"]
        [::std::mem::offset_of!(_REASON_CONTEXT__bindgen_ty_1, SimpleReasonString) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REASON_CONTEXT"][::std::mem::size_of::<_REASON_CONTEXT>() - 32usize];
    ["Alignment of _REASON_CONTEXT"][::std::mem::align_of::<_REASON_CONTEXT>() - 8usize];
    ["Offset of field: _REASON_CONTEXT::Version"]
        [::std::mem::offset_of!(_REASON_CONTEXT, Version) - 0usize];
    ["Offset of field: _REASON_CONTEXT::Flags"]
        [::std::mem::offset_of!(_REASON_CONTEXT, Flags) - 4usize];
    ["Offset of field: _REASON_CONTEXT::Reason"]
        [::std::mem::offset_of!(_REASON_CONTEXT, Reason) - 8usize];
};
pub type REASON_CONTEXT = _REASON_CONTEXT;
pub type PREASON_CONTEXT = *mut _REASON_CONTEXT;
pub type PTHREAD_START_ROUTINE =
    ::std::option::Option<unsafe extern "C" fn(lpThreadParameter: LPVOID) -> DWORD>;
pub type LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;
pub type PENCLAVE_ROUTINE =
    ::std::option::Option<unsafe extern "C" fn(lpThreadParameter: LPVOID) -> LPVOID>;
pub type LPENCLAVE_ROUTINE = PENCLAVE_ROUTINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXCEPTION_DEBUG_INFO {
    pub ExceptionRecord: EXCEPTION_RECORD,
    pub dwFirstChance: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXCEPTION_DEBUG_INFO"][::std::mem::size_of::<_EXCEPTION_DEBUG_INFO>() - 160usize];
    ["Alignment of _EXCEPTION_DEBUG_INFO"]
        [::std::mem::align_of::<_EXCEPTION_DEBUG_INFO>() - 8usize];
    ["Offset of field: _EXCEPTION_DEBUG_INFO::ExceptionRecord"]
        [::std::mem::offset_of!(_EXCEPTION_DEBUG_INFO, ExceptionRecord) - 0usize];
    ["Offset of field: _EXCEPTION_DEBUG_INFO::dwFirstChance"]
        [::std::mem::offset_of!(_EXCEPTION_DEBUG_INFO, dwFirstChance) - 152usize];
};
pub type EXCEPTION_DEBUG_INFO = _EXCEPTION_DEBUG_INFO;
pub type LPEXCEPTION_DEBUG_INFO = *mut _EXCEPTION_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CREATE_THREAD_DEBUG_INFO {
    pub hThread: HANDLE,
    pub lpThreadLocalBase: LPVOID,
    pub lpStartAddress: LPTHREAD_START_ROUTINE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CREATE_THREAD_DEBUG_INFO"]
        [::std::mem::size_of::<_CREATE_THREAD_DEBUG_INFO>() - 24usize];
    ["Alignment of _CREATE_THREAD_DEBUG_INFO"]
        [::std::mem::align_of::<_CREATE_THREAD_DEBUG_INFO>() - 8usize];
    ["Offset of field: _CREATE_THREAD_DEBUG_INFO::hThread"]
        [::std::mem::offset_of!(_CREATE_THREAD_DEBUG_INFO, hThread) - 0usize];
    ["Offset of field: _CREATE_THREAD_DEBUG_INFO::lpThreadLocalBase"]
        [::std::mem::offset_of!(_CREATE_THREAD_DEBUG_INFO, lpThreadLocalBase) - 8usize];
    ["Offset of field: _CREATE_THREAD_DEBUG_INFO::lpStartAddress"]
        [::std::mem::offset_of!(_CREATE_THREAD_DEBUG_INFO, lpStartAddress) - 16usize];
};
pub type CREATE_THREAD_DEBUG_INFO = _CREATE_THREAD_DEBUG_INFO;
pub type LPCREATE_THREAD_DEBUG_INFO = *mut _CREATE_THREAD_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CREATE_PROCESS_DEBUG_INFO {
    pub hFile: HANDLE,
    pub hProcess: HANDLE,
    pub hThread: HANDLE,
    pub lpBaseOfImage: LPVOID,
    pub dwDebugInfoFileOffset: DWORD,
    pub nDebugInfoSize: DWORD,
    pub lpThreadLocalBase: LPVOID,
    pub lpStartAddress: LPTHREAD_START_ROUTINE,
    pub lpImageName: LPVOID,
    pub fUnicode: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CREATE_PROCESS_DEBUG_INFO"]
        [::std::mem::size_of::<_CREATE_PROCESS_DEBUG_INFO>() - 72usize];
    ["Alignment of _CREATE_PROCESS_DEBUG_INFO"]
        [::std::mem::align_of::<_CREATE_PROCESS_DEBUG_INFO>() - 8usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::hFile"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, hFile) - 0usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::hProcess"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, hProcess) - 8usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::hThread"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, hThread) - 16usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::lpBaseOfImage"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, lpBaseOfImage) - 24usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::dwDebugInfoFileOffset"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, dwDebugInfoFileOffset) - 32usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::nDebugInfoSize"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, nDebugInfoSize) - 36usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::lpThreadLocalBase"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, lpThreadLocalBase) - 40usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::lpStartAddress"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, lpStartAddress) - 48usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::lpImageName"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, lpImageName) - 56usize];
    ["Offset of field: _CREATE_PROCESS_DEBUG_INFO::fUnicode"]
        [::std::mem::offset_of!(_CREATE_PROCESS_DEBUG_INFO, fUnicode) - 64usize];
};
pub type CREATE_PROCESS_DEBUG_INFO = _CREATE_PROCESS_DEBUG_INFO;
pub type LPCREATE_PROCESS_DEBUG_INFO = *mut _CREATE_PROCESS_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXIT_THREAD_DEBUG_INFO {
    pub dwExitCode: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXIT_THREAD_DEBUG_INFO"][::std::mem::size_of::<_EXIT_THREAD_DEBUG_INFO>() - 4usize];
    ["Alignment of _EXIT_THREAD_DEBUG_INFO"]
        [::std::mem::align_of::<_EXIT_THREAD_DEBUG_INFO>() - 4usize];
    ["Offset of field: _EXIT_THREAD_DEBUG_INFO::dwExitCode"]
        [::std::mem::offset_of!(_EXIT_THREAD_DEBUG_INFO, dwExitCode) - 0usize];
};
pub type EXIT_THREAD_DEBUG_INFO = _EXIT_THREAD_DEBUG_INFO;
pub type LPEXIT_THREAD_DEBUG_INFO = *mut _EXIT_THREAD_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EXIT_PROCESS_DEBUG_INFO {
    pub dwExitCode: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EXIT_PROCESS_DEBUG_INFO"]
        [::std::mem::size_of::<_EXIT_PROCESS_DEBUG_INFO>() - 4usize];
    ["Alignment of _EXIT_PROCESS_DEBUG_INFO"]
        [::std::mem::align_of::<_EXIT_PROCESS_DEBUG_INFO>() - 4usize];
    ["Offset of field: _EXIT_PROCESS_DEBUG_INFO::dwExitCode"]
        [::std::mem::offset_of!(_EXIT_PROCESS_DEBUG_INFO, dwExitCode) - 0usize];
};
pub type EXIT_PROCESS_DEBUG_INFO = _EXIT_PROCESS_DEBUG_INFO;
pub type LPEXIT_PROCESS_DEBUG_INFO = *mut _EXIT_PROCESS_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LOAD_DLL_DEBUG_INFO {
    pub hFile: HANDLE,
    pub lpBaseOfDll: LPVOID,
    pub dwDebugInfoFileOffset: DWORD,
    pub nDebugInfoSize: DWORD,
    pub lpImageName: LPVOID,
    pub fUnicode: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LOAD_DLL_DEBUG_INFO"][::std::mem::size_of::<_LOAD_DLL_DEBUG_INFO>() - 40usize];
    ["Alignment of _LOAD_DLL_DEBUG_INFO"][::std::mem::align_of::<_LOAD_DLL_DEBUG_INFO>() - 8usize];
    ["Offset of field: _LOAD_DLL_DEBUG_INFO::hFile"]
        [::std::mem::offset_of!(_LOAD_DLL_DEBUG_INFO, hFile) - 0usize];
    ["Offset of field: _LOAD_DLL_DEBUG_INFO::lpBaseOfDll"]
        [::std::mem::offset_of!(_LOAD_DLL_DEBUG_INFO, lpBaseOfDll) - 8usize];
    ["Offset of field: _LOAD_DLL_DEBUG_INFO::dwDebugInfoFileOffset"]
        [::std::mem::offset_of!(_LOAD_DLL_DEBUG_INFO, dwDebugInfoFileOffset) - 16usize];
    ["Offset of field: _LOAD_DLL_DEBUG_INFO::nDebugInfoSize"]
        [::std::mem::offset_of!(_LOAD_DLL_DEBUG_INFO, nDebugInfoSize) - 20usize];
    ["Offset of field: _LOAD_DLL_DEBUG_INFO::lpImageName"]
        [::std::mem::offset_of!(_LOAD_DLL_DEBUG_INFO, lpImageName) - 24usize];
    ["Offset of field: _LOAD_DLL_DEBUG_INFO::fUnicode"]
        [::std::mem::offset_of!(_LOAD_DLL_DEBUG_INFO, fUnicode) - 32usize];
};
pub type LOAD_DLL_DEBUG_INFO = _LOAD_DLL_DEBUG_INFO;
pub type LPLOAD_DLL_DEBUG_INFO = *mut _LOAD_DLL_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNLOAD_DLL_DEBUG_INFO {
    pub lpBaseOfDll: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UNLOAD_DLL_DEBUG_INFO"][::std::mem::size_of::<_UNLOAD_DLL_DEBUG_INFO>() - 8usize];
    ["Alignment of _UNLOAD_DLL_DEBUG_INFO"]
        [::std::mem::align_of::<_UNLOAD_DLL_DEBUG_INFO>() - 8usize];
    ["Offset of field: _UNLOAD_DLL_DEBUG_INFO::lpBaseOfDll"]
        [::std::mem::offset_of!(_UNLOAD_DLL_DEBUG_INFO, lpBaseOfDll) - 0usize];
};
pub type UNLOAD_DLL_DEBUG_INFO = _UNLOAD_DLL_DEBUG_INFO;
pub type LPUNLOAD_DLL_DEBUG_INFO = *mut _UNLOAD_DLL_DEBUG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUTPUT_DEBUG_STRING_INFO {
    pub lpDebugStringData: LPSTR,
    pub fUnicode: WORD,
    pub nDebugStringLength: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OUTPUT_DEBUG_STRING_INFO"]
        [::std::mem::size_of::<_OUTPUT_DEBUG_STRING_INFO>() - 16usize];
    ["Alignment of _OUTPUT_DEBUG_STRING_INFO"]
        [::std::mem::align_of::<_OUTPUT_DEBUG_STRING_INFO>() - 8usize];
    ["Offset of field: _OUTPUT_DEBUG_STRING_INFO::lpDebugStringData"]
        [::std::mem::offset_of!(_OUTPUT_DEBUG_STRING_INFO, lpDebugStringData) - 0usize];
    ["Offset of field: _OUTPUT_DEBUG_STRING_INFO::fUnicode"]
        [::std::mem::offset_of!(_OUTPUT_DEBUG_STRING_INFO, fUnicode) - 8usize];
    ["Offset of field: _OUTPUT_DEBUG_STRING_INFO::nDebugStringLength"]
        [::std::mem::offset_of!(_OUTPUT_DEBUG_STRING_INFO, nDebugStringLength) - 10usize];
};
pub type OUTPUT_DEBUG_STRING_INFO = _OUTPUT_DEBUG_STRING_INFO;
pub type LPOUTPUT_DEBUG_STRING_INFO = *mut _OUTPUT_DEBUG_STRING_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RIP_INFO {
    pub dwError: DWORD,
    pub dwType: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RIP_INFO"][::std::mem::size_of::<_RIP_INFO>() - 8usize];
    ["Alignment of _RIP_INFO"][::std::mem::align_of::<_RIP_INFO>() - 4usize];
    ["Offset of field: _RIP_INFO::dwError"][::std::mem::offset_of!(_RIP_INFO, dwError) - 0usize];
    ["Offset of field: _RIP_INFO::dwType"][::std::mem::offset_of!(_RIP_INFO, dwType) - 4usize];
};
pub type RIP_INFO = _RIP_INFO;
pub type LPRIP_INFO = *mut _RIP_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DEBUG_EVENT {
    pub dwDebugEventCode: DWORD,
    pub dwProcessId: DWORD,
    pub dwThreadId: DWORD,
    pub u: _DEBUG_EVENT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DEBUG_EVENT__bindgen_ty_1 {
    pub Exception: EXCEPTION_DEBUG_INFO,
    pub CreateThread: CREATE_THREAD_DEBUG_INFO,
    pub CreateProcessInfo: CREATE_PROCESS_DEBUG_INFO,
    pub ExitThread: EXIT_THREAD_DEBUG_INFO,
    pub ExitProcess: EXIT_PROCESS_DEBUG_INFO,
    pub LoadDll: LOAD_DLL_DEBUG_INFO,
    pub UnloadDll: UNLOAD_DLL_DEBUG_INFO,
    pub DebugString: OUTPUT_DEBUG_STRING_INFO,
    pub RipInfo: RIP_INFO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DEBUG_EVENT__bindgen_ty_1"]
        [::std::mem::size_of::<_DEBUG_EVENT__bindgen_ty_1>() - 160usize];
    ["Alignment of _DEBUG_EVENT__bindgen_ty_1"]
        [::std::mem::align_of::<_DEBUG_EVENT__bindgen_ty_1>() - 8usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::Exception"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, Exception) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::CreateThread"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, CreateThread) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::CreateProcessInfo"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, CreateProcessInfo) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::ExitThread"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, ExitThread) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::ExitProcess"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, ExitProcess) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::LoadDll"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, LoadDll) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::UnloadDll"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, UnloadDll) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::DebugString"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, DebugString) - 0usize];
    ["Offset of field: _DEBUG_EVENT__bindgen_ty_1::RipInfo"]
        [::std::mem::offset_of!(_DEBUG_EVENT__bindgen_ty_1, RipInfo) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DEBUG_EVENT"][::std::mem::size_of::<_DEBUG_EVENT>() - 176usize];
    ["Alignment of _DEBUG_EVENT"][::std::mem::align_of::<_DEBUG_EVENT>() - 8usize];
    ["Offset of field: _DEBUG_EVENT::dwDebugEventCode"]
        [::std::mem::offset_of!(_DEBUG_EVENT, dwDebugEventCode) - 0usize];
    ["Offset of field: _DEBUG_EVENT::dwProcessId"]
        [::std::mem::offset_of!(_DEBUG_EVENT, dwProcessId) - 4usize];
    ["Offset of field: _DEBUG_EVENT::dwThreadId"]
        [::std::mem::offset_of!(_DEBUG_EVENT, dwThreadId) - 8usize];
    ["Offset of field: _DEBUG_EVENT::u"][::std::mem::offset_of!(_DEBUG_EVENT, u) - 16usize];
};
pub type DEBUG_EVENT = _DEBUG_EVENT;
pub type LPDEBUG_EVENT = *mut _DEBUG_EVENT;
pub type LPCONTEXT = PCONTEXT;
unsafe extern "C" {
    pub fn IsApiSetImplemented(Contract: PCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetEnvironmentStringsW(NewEnvironment: LPWCH) -> BOOL;
}
unsafe extern "C" {
    pub fn GetStdHandle(nStdHandle: DWORD) -> HANDLE;
}
unsafe extern "C" {
    pub fn SetStdHandle(nStdHandle: DWORD, hHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetStdHandleEx(nStdHandle: DWORD, hHandle: HANDLE, phPrevValue: PHANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommandLineA() -> LPSTR;
}
unsafe extern "C" {
    pub fn GetCommandLineW() -> LPWSTR;
}
unsafe extern "C" {
    pub fn GetEnvironmentStrings() -> LPCH;
}
unsafe extern "C" {
    pub fn GetEnvironmentStringsW() -> LPWCH;
}
unsafe extern "C" {
    pub fn FreeEnvironmentStringsA(penv: LPCH) -> BOOL;
}
unsafe extern "C" {
    pub fn FreeEnvironmentStringsW(penv: LPWCH) -> BOOL;
}
unsafe extern "C" {
    pub fn GetEnvironmentVariableA(lpName: LPCSTR, lpBuffer: LPSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetEnvironmentVariableW(lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn SetEnvironmentVariableA(lpName: LPCSTR, lpValue: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetEnvironmentVariableW(lpName: LPCWSTR, lpValue: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn ExpandEnvironmentStringsA(lpSrc: LPCSTR, lpDst: LPSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ExpandEnvironmentStringsW(lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn SetCurrentDirectoryA(lpPathName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCurrentDirectoryW(lpPathName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn SearchPathW(
        lpPath: LPCWSTR,
        lpFileName: LPCWSTR,
        lpExtension: LPCWSTR,
        nBufferLength: DWORD,
        lpBuffer: LPWSTR,
        lpFilePart: *mut LPWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SearchPathA(
        lpPath: LPCSTR,
        lpFileName: LPCSTR,
        lpExtension: LPCSTR,
        nBufferLength: DWORD,
        lpBuffer: LPSTR,
        lpFilePart: *mut LPSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn NeedCurrentDirectoryForExePathA(ExeName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn NeedCurrentDirectoryForExePathW(ExeName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn CompareFileTime(lpFileTime1: *const FILETIME, lpFileTime2: *const FILETIME) -> LONG;
}
unsafe extern "C" {
    pub fn CreateDirectoryA(
        lpPathName: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDirectoryW(
        lpPathName: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateFileA(
        lpFileName: LPCSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateFileW(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn DefineDosDeviceW(dwFlags: DWORD, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteFileA(lpFileName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteFileW(lpFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn FileTimeToLocalFileTime(
        lpFileTime: *const FILETIME,
        lpLocalFileTime: LPFILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindClose(hFindFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn FindCloseChangeNotification(hChangeHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstChangeNotificationA(
        lpPathName: LPCSTR,
        bWatchSubtree: BOOL,
        dwNotifyFilter: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstChangeNotificationW(
        lpPathName: LPCWSTR,
        bWatchSubtree: BOOL,
        dwNotifyFilter: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstFileA(lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstFileW(lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstFileExA(
        lpFileName: LPCSTR,
        fInfoLevelId: FINDEX_INFO_LEVELS,
        lpFindFileData: LPVOID,
        fSearchOp: FINDEX_SEARCH_OPS,
        lpSearchFilter: LPVOID,
        dwAdditionalFlags: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstFileExW(
        lpFileName: LPCWSTR,
        fInfoLevelId: FINDEX_INFO_LEVELS,
        lpFindFileData: LPVOID,
        fSearchOp: FINDEX_SEARCH_OPS,
        lpSearchFilter: LPVOID,
        dwAdditionalFlags: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstVolumeW(lpszVolumeName: LPWSTR, cchBufferLength: DWORD) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindNextChangeNotification(hChangeHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn FindNextFileA(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA) -> BOOL;
}
unsafe extern "C" {
    pub fn FindNextFileW(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW) -> BOOL;
}
unsafe extern "C" {
    pub fn FindNextVolumeW(
        hFindVolume: HANDLE,
        lpszVolumeName: LPWSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindVolumeClose(hFindVolume: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn FlushFileBuffers(hFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDiskFreeSpaceA(
        lpRootPathName: LPCSTR,
        lpSectorsPerCluster: LPDWORD,
        lpBytesPerSector: LPDWORD,
        lpNumberOfFreeClusters: LPDWORD,
        lpTotalNumberOfClusters: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDiskFreeSpaceW(
        lpRootPathName: LPCWSTR,
        lpSectorsPerCluster: LPDWORD,
        lpBytesPerSector: LPDWORD,
        lpNumberOfFreeClusters: LPDWORD,
        lpTotalNumberOfClusters: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDiskFreeSpaceExA(
        lpDirectoryName: LPCSTR,
        lpFreeBytesAvailableToCaller: PULARGE_INTEGER,
        lpTotalNumberOfBytes: PULARGE_INTEGER,
        lpTotalNumberOfFreeBytes: PULARGE_INTEGER,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDiskFreeSpaceExW(
        lpDirectoryName: LPCWSTR,
        lpFreeBytesAvailableToCaller: PULARGE_INTEGER,
        lpTotalNumberOfBytes: PULARGE_INTEGER,
        lpTotalNumberOfFreeBytes: PULARGE_INTEGER,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISK_SPACE_INFORMATION {
    pub ActualTotalAllocationUnits: ULONGLONG,
    pub ActualAvailableAllocationUnits: ULONGLONG,
    pub ActualPoolUnavailableAllocationUnits: ULONGLONG,
    pub CallerTotalAllocationUnits: ULONGLONG,
    pub CallerAvailableAllocationUnits: ULONGLONG,
    pub CallerPoolUnavailableAllocationUnits: ULONGLONG,
    pub UsedAllocationUnits: ULONGLONG,
    pub TotalReservedAllocationUnits: ULONGLONG,
    pub VolumeStorageReserveAllocationUnits: ULONGLONG,
    pub AvailableCommittedAllocationUnits: ULONGLONG,
    pub PoolAvailableAllocationUnits: ULONGLONG,
    pub SectorsPerAllocationUnit: DWORD,
    pub BytesPerSector: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISK_SPACE_INFORMATION"][::std::mem::size_of::<DISK_SPACE_INFORMATION>() - 96usize];
    ["Alignment of DISK_SPACE_INFORMATION"]
        [::std::mem::align_of::<DISK_SPACE_INFORMATION>() - 8usize];
    ["Offset of field: DISK_SPACE_INFORMATION::ActualTotalAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, ActualTotalAllocationUnits) - 0usize];
    ["Offset of field: DISK_SPACE_INFORMATION::ActualAvailableAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, ActualAvailableAllocationUnits) - 8usize];
    ["Offset of field: DISK_SPACE_INFORMATION::ActualPoolUnavailableAllocationUnits"][::std::mem::offset_of!(
        DISK_SPACE_INFORMATION,
        ActualPoolUnavailableAllocationUnits
    ) - 16usize];
    ["Offset of field: DISK_SPACE_INFORMATION::CallerTotalAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, CallerTotalAllocationUnits) - 24usize];
    ["Offset of field: DISK_SPACE_INFORMATION::CallerAvailableAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, CallerAvailableAllocationUnits) - 32usize];
    ["Offset of field: DISK_SPACE_INFORMATION::CallerPoolUnavailableAllocationUnits"][::std::mem::offset_of!(
        DISK_SPACE_INFORMATION,
        CallerPoolUnavailableAllocationUnits
    ) - 40usize];
    ["Offset of field: DISK_SPACE_INFORMATION::UsedAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, UsedAllocationUnits) - 48usize];
    ["Offset of field: DISK_SPACE_INFORMATION::TotalReservedAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, TotalReservedAllocationUnits) - 56usize];
    ["Offset of field: DISK_SPACE_INFORMATION::VolumeStorageReserveAllocationUnits"][::std::mem::offset_of!(
        DISK_SPACE_INFORMATION,
        VolumeStorageReserveAllocationUnits
    ) - 64usize];
    ["Offset of field: DISK_SPACE_INFORMATION::AvailableCommittedAllocationUnits"][::std::mem::offset_of!(
        DISK_SPACE_INFORMATION,
        AvailableCommittedAllocationUnits
    ) - 72usize];
    ["Offset of field: DISK_SPACE_INFORMATION::PoolAvailableAllocationUnits"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, PoolAvailableAllocationUnits) - 80usize];
    ["Offset of field: DISK_SPACE_INFORMATION::SectorsPerAllocationUnit"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, SectorsPerAllocationUnit) - 88usize];
    ["Offset of field: DISK_SPACE_INFORMATION::BytesPerSector"]
        [::std::mem::offset_of!(DISK_SPACE_INFORMATION, BytesPerSector) - 92usize];
};
unsafe extern "C" {
    pub fn GetDiskSpaceInformationA(
        rootPath: LPCSTR,
        diskSpaceInfo: *mut DISK_SPACE_INFORMATION,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn GetDiskSpaceInformationW(
        rootPath: LPCWSTR,
        diskSpaceInfo: *mut DISK_SPACE_INFORMATION,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn GetDriveTypeA(lpRootPathName: LPCSTR) -> UINT;
}
unsafe extern "C" {
    pub fn GetDriveTypeW(lpRootPathName: LPCWSTR) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_FILE_ATTRIBUTE_DATA {
    pub dwFileAttributes: DWORD,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub nFileSizeHigh: DWORD,
    pub nFileSizeLow: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_FILE_ATTRIBUTE_DATA"]
        [::std::mem::size_of::<_WIN32_FILE_ATTRIBUTE_DATA>() - 36usize];
    ["Alignment of _WIN32_FILE_ATTRIBUTE_DATA"]
        [::std::mem::align_of::<_WIN32_FILE_ATTRIBUTE_DATA>() - 4usize];
    ["Offset of field: _WIN32_FILE_ATTRIBUTE_DATA::dwFileAttributes"]
        [::std::mem::offset_of!(_WIN32_FILE_ATTRIBUTE_DATA, dwFileAttributes) - 0usize];
    ["Offset of field: _WIN32_FILE_ATTRIBUTE_DATA::ftCreationTime"]
        [::std::mem::offset_of!(_WIN32_FILE_ATTRIBUTE_DATA, ftCreationTime) - 4usize];
    ["Offset of field: _WIN32_FILE_ATTRIBUTE_DATA::ftLastAccessTime"]
        [::std::mem::offset_of!(_WIN32_FILE_ATTRIBUTE_DATA, ftLastAccessTime) - 12usize];
    ["Offset of field: _WIN32_FILE_ATTRIBUTE_DATA::ftLastWriteTime"]
        [::std::mem::offset_of!(_WIN32_FILE_ATTRIBUTE_DATA, ftLastWriteTime) - 20usize];
    ["Offset of field: _WIN32_FILE_ATTRIBUTE_DATA::nFileSizeHigh"]
        [::std::mem::offset_of!(_WIN32_FILE_ATTRIBUTE_DATA, nFileSizeHigh) - 28usize];
    ["Offset of field: _WIN32_FILE_ATTRIBUTE_DATA::nFileSizeLow"]
        [::std::mem::offset_of!(_WIN32_FILE_ATTRIBUTE_DATA, nFileSizeLow) - 32usize];
};
pub type WIN32_FILE_ATTRIBUTE_DATA = _WIN32_FILE_ATTRIBUTE_DATA;
pub type LPWIN32_FILE_ATTRIBUTE_DATA = *mut _WIN32_FILE_ATTRIBUTE_DATA;
unsafe extern "C" {
    pub fn GetFileAttributesA(lpFileName: LPCSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileAttributesW(lpFileName: LPCWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileAttributesExA(
        lpFileName: LPCSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileAttributesExW(
        lpFileName: LPCWSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BY_HANDLE_FILE_INFORMATION {
    pub dwFileAttributes: DWORD,
    pub ftCreationTime: FILETIME,
    pub ftLastAccessTime: FILETIME,
    pub ftLastWriteTime: FILETIME,
    pub dwVolumeSerialNumber: DWORD,
    pub nFileSizeHigh: DWORD,
    pub nFileSizeLow: DWORD,
    pub nNumberOfLinks: DWORD,
    pub nFileIndexHigh: DWORD,
    pub nFileIndexLow: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BY_HANDLE_FILE_INFORMATION"]
        [::std::mem::size_of::<_BY_HANDLE_FILE_INFORMATION>() - 52usize];
    ["Alignment of _BY_HANDLE_FILE_INFORMATION"]
        [::std::mem::align_of::<_BY_HANDLE_FILE_INFORMATION>() - 4usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::dwFileAttributes"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, dwFileAttributes) - 0usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::ftCreationTime"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, ftCreationTime) - 4usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::ftLastAccessTime"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, ftLastAccessTime) - 12usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::ftLastWriteTime"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, ftLastWriteTime) - 20usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::dwVolumeSerialNumber"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, dwVolumeSerialNumber) - 28usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::nFileSizeHigh"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, nFileSizeHigh) - 32usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::nFileSizeLow"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, nFileSizeLow) - 36usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::nNumberOfLinks"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, nNumberOfLinks) - 40usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::nFileIndexHigh"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, nFileIndexHigh) - 44usize];
    ["Offset of field: _BY_HANDLE_FILE_INFORMATION::nFileIndexLow"]
        [::std::mem::offset_of!(_BY_HANDLE_FILE_INFORMATION, nFileIndexLow) - 48usize];
};
pub type BY_HANDLE_FILE_INFORMATION = _BY_HANDLE_FILE_INFORMATION;
pub type PBY_HANDLE_FILE_INFORMATION = *mut _BY_HANDLE_FILE_INFORMATION;
pub type LPBY_HANDLE_FILE_INFORMATION = *mut _BY_HANDLE_FILE_INFORMATION;
unsafe extern "C" {
    pub fn GetFileInformationByHandle(
        hFile: HANDLE,
        lpFileInformation: LPBY_HANDLE_FILE_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileSize(hFile: HANDLE, lpFileSizeHigh: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileSizeEx(hFile: HANDLE, lpFileSize: PLARGE_INTEGER) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileType(hFile: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFinalPathNameByHandleA(
        hFile: HANDLE,
        lpszFilePath: LPSTR,
        cchFilePath: DWORD,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFinalPathNameByHandleW(
        hFile: HANDLE,
        lpszFilePath: LPWSTR,
        cchFilePath: DWORD,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileTime(
        hFile: HANDLE,
        lpCreationTime: LPFILETIME,
        lpLastAccessTime: LPFILETIME,
        lpLastWriteTime: LPFILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFullPathNameW(
        lpFileName: LPCWSTR,
        nBufferLength: DWORD,
        lpBuffer: LPWSTR,
        lpFilePart: *mut LPWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFullPathNameA(
        lpFileName: LPCSTR,
        nBufferLength: DWORD,
        lpBuffer: LPSTR,
        lpFilePart: *mut LPSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetLogicalDrives() -> DWORD;
}
unsafe extern "C" {
    pub fn GetLogicalDriveStringsW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetLongPathNameA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetLongPathNameW(
        lpszShortPath: LPCWSTR,
        lpszLongPath: LPWSTR,
        cchBuffer: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn AreShortNamesEnabled(Handle: HANDLE, Enabled: *mut BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetShortPathNameW(
        lpszLongPath: LPCWSTR,
        lpszShortPath: LPWSTR,
        cchBuffer: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTempFileNameW(
        lpPathName: LPCWSTR,
        lpPrefixString: LPCWSTR,
        uUnique: UINT,
        lpTempFileName: LPWSTR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetVolumeInformationByHandleW(
        hFile: HANDLE,
        lpVolumeNameBuffer: LPWSTR,
        nVolumeNameSize: DWORD,
        lpVolumeSerialNumber: LPDWORD,
        lpMaximumComponentLength: LPDWORD,
        lpFileSystemFlags: LPDWORD,
        lpFileSystemNameBuffer: LPWSTR,
        nFileSystemNameSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumeInformationW(
        lpRootPathName: LPCWSTR,
        lpVolumeNameBuffer: LPWSTR,
        nVolumeNameSize: DWORD,
        lpVolumeSerialNumber: LPDWORD,
        lpMaximumComponentLength: LPDWORD,
        lpFileSystemFlags: LPDWORD,
        lpFileSystemNameBuffer: LPWSTR,
        nFileSystemNameSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumePathNameW(
        lpszFileName: LPCWSTR,
        lpszVolumePathName: LPWSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LocalFileTimeToFileTime(
        lpLocalFileTime: *const FILETIME,
        lpFileTime: LPFILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LockFile(
        hFile: HANDLE,
        dwFileOffsetLow: DWORD,
        dwFileOffsetHigh: DWORD,
        nNumberOfBytesToLockLow: DWORD,
        nNumberOfBytesToLockHigh: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LockFileEx(
        hFile: HANDLE,
        dwFlags: DWORD,
        dwReserved: DWORD,
        nNumberOfBytesToLockLow: DWORD,
        nNumberOfBytesToLockHigh: DWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryDosDeviceW(lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ReadFile(
        hFile: HANDLE,
        lpBuffer: LPVOID,
        nNumberOfBytesToRead: DWORD,
        lpNumberOfBytesRead: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadFileEx(
        hFile: HANDLE,
        lpBuffer: LPVOID,
        nNumberOfBytesToRead: DWORD,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadFileScatter(
        hFile: HANDLE,
        aSegmentArray: *mut FILE_SEGMENT_ELEMENT,
        nNumberOfBytesToRead: DWORD,
        lpReserved: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveDirectoryA(lpPathName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveDirectoryW(lpPathName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetEndOfFile(hFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileAttributesA(lpFileName: LPCSTR, dwFileAttributes: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileInformationByHandle(
        hFile: HANDLE,
        FileInformationClass: FILE_INFO_BY_HANDLE_CLASS,
        lpFileInformation: LPVOID,
        dwBufferSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFilePointer(
        hFile: HANDLE,
        lDistanceToMove: LONG,
        lpDistanceToMoveHigh: PLONG,
        dwMoveMethod: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SetFilePointerEx(
        hFile: HANDLE,
        liDistanceToMove: LARGE_INTEGER,
        lpNewFilePointer: PLARGE_INTEGER,
        dwMoveMethod: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileTime(
        hFile: HANDLE,
        lpCreationTime: *const FILETIME,
        lpLastAccessTime: *const FILETIME,
        lpLastWriteTime: *const FILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileValidData(hFile: HANDLE, ValidDataLength: LONGLONG) -> BOOL;
}
unsafe extern "C" {
    pub fn UnlockFile(
        hFile: HANDLE,
        dwFileOffsetLow: DWORD,
        dwFileOffsetHigh: DWORD,
        nNumberOfBytesToUnlockLow: DWORD,
        nNumberOfBytesToUnlockHigh: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnlockFileEx(
        hFile: HANDLE,
        dwReserved: DWORD,
        nNumberOfBytesToUnlockLow: DWORD,
        nNumberOfBytesToUnlockHigh: DWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteFile(
        hFile: HANDLE,
        lpBuffer: LPCVOID,
        nNumberOfBytesToWrite: DWORD,
        lpNumberOfBytesWritten: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteFileEx(
        hFile: HANDLE,
        lpBuffer: LPCVOID,
        nNumberOfBytesToWrite: DWORD,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteFileGather(
        hFile: HANDLE,
        aSegmentArray: *mut FILE_SEGMENT_ELEMENT,
        nNumberOfBytesToWrite: DWORD,
        lpReserved: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTempPathW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetVolumeNameForVolumeMountPointW(
        lpszVolumeMountPoint: LPCWSTR,
        lpszVolumeName: LPWSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumePathNamesForVolumeNameW(
        lpszVolumeName: LPCWSTR,
        lpszVolumePathNames: LPWCH,
        cchBufferLength: DWORD,
        lpcchReturnLength: PDWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CREATEFILE2_EXTENDED_PARAMETERS {
    pub dwSize: DWORD,
    pub dwFileAttributes: DWORD,
    pub dwFileFlags: DWORD,
    pub dwSecurityQosFlags: DWORD,
    pub lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    pub hTemplateFile: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CREATEFILE2_EXTENDED_PARAMETERS"]
        [::std::mem::size_of::<_CREATEFILE2_EXTENDED_PARAMETERS>() - 32usize];
    ["Alignment of _CREATEFILE2_EXTENDED_PARAMETERS"]
        [::std::mem::align_of::<_CREATEFILE2_EXTENDED_PARAMETERS>() - 8usize];
    ["Offset of field: _CREATEFILE2_EXTENDED_PARAMETERS::dwSize"]
        [::std::mem::offset_of!(_CREATEFILE2_EXTENDED_PARAMETERS, dwSize) - 0usize];
    ["Offset of field: _CREATEFILE2_EXTENDED_PARAMETERS::dwFileAttributes"]
        [::std::mem::offset_of!(_CREATEFILE2_EXTENDED_PARAMETERS, dwFileAttributes) - 4usize];
    ["Offset of field: _CREATEFILE2_EXTENDED_PARAMETERS::dwFileFlags"]
        [::std::mem::offset_of!(_CREATEFILE2_EXTENDED_PARAMETERS, dwFileFlags) - 8usize];
    ["Offset of field: _CREATEFILE2_EXTENDED_PARAMETERS::dwSecurityQosFlags"]
        [::std::mem::offset_of!(_CREATEFILE2_EXTENDED_PARAMETERS, dwSecurityQosFlags) - 12usize];
    ["Offset of field: _CREATEFILE2_EXTENDED_PARAMETERS::lpSecurityAttributes"]
        [::std::mem::offset_of!(_CREATEFILE2_EXTENDED_PARAMETERS, lpSecurityAttributes) - 16usize];
    ["Offset of field: _CREATEFILE2_EXTENDED_PARAMETERS::hTemplateFile"]
        [::std::mem::offset_of!(_CREATEFILE2_EXTENDED_PARAMETERS, hTemplateFile) - 24usize];
};
pub type CREATEFILE2_EXTENDED_PARAMETERS = _CREATEFILE2_EXTENDED_PARAMETERS;
pub type PCREATEFILE2_EXTENDED_PARAMETERS = *mut _CREATEFILE2_EXTENDED_PARAMETERS;
pub type LPCREATEFILE2_EXTENDED_PARAMETERS = *mut _CREATEFILE2_EXTENDED_PARAMETERS;
unsafe extern "C" {
    pub fn CreateFile2(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        dwCreationDisposition: DWORD,
        pCreateExParams: LPCREATEFILE2_EXTENDED_PARAMETERS,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn SetFileIoOverlappedRange(
        FileHandle: HANDLE,
        OverlappedRangeStart: PUCHAR,
        Length: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCompressedFileSizeA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetCompressedFileSizeW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD) -> DWORD;
}
pub const _STREAM_INFO_LEVELS_FindStreamInfoStandard: _STREAM_INFO_LEVELS = 0;
pub const _STREAM_INFO_LEVELS_FindStreamInfoMaxInfoLevel: _STREAM_INFO_LEVELS = 1;
pub type _STREAM_INFO_LEVELS = ::std::os::raw::c_int;
pub use self::_STREAM_INFO_LEVELS as STREAM_INFO_LEVELS;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WIN32_FIND_STREAM_DATA {
    pub StreamSize: LARGE_INTEGER,
    pub cStreamName: [WCHAR; 296usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_FIND_STREAM_DATA"]
        [::std::mem::size_of::<_WIN32_FIND_STREAM_DATA>() - 600usize];
    ["Alignment of _WIN32_FIND_STREAM_DATA"]
        [::std::mem::align_of::<_WIN32_FIND_STREAM_DATA>() - 8usize];
    ["Offset of field: _WIN32_FIND_STREAM_DATA::StreamSize"]
        [::std::mem::offset_of!(_WIN32_FIND_STREAM_DATA, StreamSize) - 0usize];
    ["Offset of field: _WIN32_FIND_STREAM_DATA::cStreamName"]
        [::std::mem::offset_of!(_WIN32_FIND_STREAM_DATA, cStreamName) - 8usize];
};
pub type WIN32_FIND_STREAM_DATA = _WIN32_FIND_STREAM_DATA;
pub type PWIN32_FIND_STREAM_DATA = *mut _WIN32_FIND_STREAM_DATA;
unsafe extern "C" {
    pub fn FindFirstStreamW(
        lpFileName: LPCWSTR,
        InfoLevel: STREAM_INFO_LEVELS,
        lpFindStreamData: LPVOID,
        dwFlags: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindNextStreamW(hFindStream: HANDLE, lpFindStreamData: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn AreFileApisANSI() -> BOOL;
}
unsafe extern "C" {
    pub fn GetTempPathA(nBufferLength: DWORD, lpBuffer: LPSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn FindFirstFileNameW(
        lpFileName: LPCWSTR,
        dwFlags: DWORD,
        StringLength: LPDWORD,
        LinkName: PWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindNextFileNameW(hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumeInformationA(
        lpRootPathName: LPCSTR,
        lpVolumeNameBuffer: LPSTR,
        nVolumeNameSize: DWORD,
        lpVolumeSerialNumber: LPDWORD,
        lpMaximumComponentLength: LPDWORD,
        lpFileSystemFlags: LPDWORD,
        lpFileSystemNameBuffer: LPSTR,
        nFileSystemNameSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTempFileNameA(
        lpPathName: LPCSTR,
        lpPrefixString: LPCSTR,
        uUnique: UINT,
        lpTempFileName: LPSTR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn SetFileApisToOEM();
}
unsafe extern "C" {
    pub fn SetFileApisToANSI();
}
unsafe extern "C" {
    pub fn GetTempPath2W(BufferLength: DWORD, Buffer: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTempPath2A(BufferLength: DWORD, Buffer: LPSTR) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CREATEFILE3_EXTENDED_PARAMETERS {
    pub dwSize: DWORD,
    pub dwFileAttributes: DWORD,
    pub dwFileFlags: DWORD,
    pub dwSecurityQosFlags: DWORD,
    pub lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    pub hTemplateFile: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CREATEFILE3_EXTENDED_PARAMETERS"]
        [::std::mem::size_of::<_CREATEFILE3_EXTENDED_PARAMETERS>() - 32usize];
    ["Alignment of _CREATEFILE3_EXTENDED_PARAMETERS"]
        [::std::mem::align_of::<_CREATEFILE3_EXTENDED_PARAMETERS>() - 8usize];
    ["Offset of field: _CREATEFILE3_EXTENDED_PARAMETERS::dwSize"]
        [::std::mem::offset_of!(_CREATEFILE3_EXTENDED_PARAMETERS, dwSize) - 0usize];
    ["Offset of field: _CREATEFILE3_EXTENDED_PARAMETERS::dwFileAttributes"]
        [::std::mem::offset_of!(_CREATEFILE3_EXTENDED_PARAMETERS, dwFileAttributes) - 4usize];
    ["Offset of field: _CREATEFILE3_EXTENDED_PARAMETERS::dwFileFlags"]
        [::std::mem::offset_of!(_CREATEFILE3_EXTENDED_PARAMETERS, dwFileFlags) - 8usize];
    ["Offset of field: _CREATEFILE3_EXTENDED_PARAMETERS::dwSecurityQosFlags"]
        [::std::mem::offset_of!(_CREATEFILE3_EXTENDED_PARAMETERS, dwSecurityQosFlags) - 12usize];
    ["Offset of field: _CREATEFILE3_EXTENDED_PARAMETERS::lpSecurityAttributes"]
        [::std::mem::offset_of!(_CREATEFILE3_EXTENDED_PARAMETERS, lpSecurityAttributes) - 16usize];
    ["Offset of field: _CREATEFILE3_EXTENDED_PARAMETERS::hTemplateFile"]
        [::std::mem::offset_of!(_CREATEFILE3_EXTENDED_PARAMETERS, hTemplateFile) - 24usize];
};
pub type CREATEFILE3_EXTENDED_PARAMETERS = _CREATEFILE3_EXTENDED_PARAMETERS;
pub type PCREATEFILE3_EXTENDED_PARAMETERS = *mut _CREATEFILE3_EXTENDED_PARAMETERS;
pub type LPCREATEFILE3_EXTENDED_PARAMETERS = *mut _CREATEFILE3_EXTENDED_PARAMETERS;
pub const DIRECTORY_FLAGS_DIRECTORY_FLAGS_NONE: DIRECTORY_FLAGS = 0;
pub const DIRECTORY_FLAGS_DIRECTORY_FLAGS_DISALLOW_PATH_REDIRECTS: DIRECTORY_FLAGS = 1;
pub type DIRECTORY_FLAGS = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn CreateFile3(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        dwCreationDisposition: DWORD,
        pCreateExParams: LPCREATEFILE3_EXTENDED_PARAMETERS,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateDirectory2A(
        lpPathName: LPCSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        DirectoryFlags: DIRECTORY_FLAGS,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateDirectory2W(
        lpPathName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        DirectoryFlags: DIRECTORY_FLAGS,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn RemoveDirectory2A(lpPathName: LPCSTR, DirectoryFlags: DIRECTORY_FLAGS) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveDirectory2W(lpPathName: LPCWSTR, DirectoryFlags: DIRECTORY_FLAGS) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteFile2A(lpFileName: LPCSTR, Flags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteFile2W(lpFileName: LPCWSTR, Flags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyFileFromAppW(
        lpExistingFileName: LPCWSTR,
        lpNewFileName: LPCWSTR,
        bFailIfExists: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDirectoryFromAppW(
        lpPathName: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateFileFromAppW(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateFile2FromAppW(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        dwCreationDisposition: DWORD,
        pCreateExParams: LPCREATEFILE2_EXTENDED_PARAMETERS,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn DeleteFileFromAppW(lpFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstFileExFromAppW(
        lpFileName: LPCWSTR,
        fInfoLevelId: FINDEX_INFO_LEVELS,
        lpFindFileData: LPVOID,
        fSearchOp: FINDEX_SEARCH_OPS,
        lpSearchFilter: LPVOID,
        dwAdditionalFlags: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetFileAttributesExFromAppW(
        lpFileName: LPCWSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileFromAppW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveDirectoryFromAppW(lpPathName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn ReplaceFileFromAppW(
        lpReplacedFileName: LPCWSTR,
        lpReplacementFileName: LPCWSTR,
        lpBackupFileName: LPCWSTR,
        dwReplaceFlags: DWORD,
        lpExclude: LPVOID,
        lpReserved: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileAttributesFromAppW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn IsDebuggerPresent() -> BOOL;
}
unsafe extern "C" {
    pub fn DebugBreak();
}
unsafe extern "C" {
    pub fn OutputDebugStringA(lpOutputString: LPCSTR);
}
unsafe extern "C" {
    pub fn OutputDebugStringW(lpOutputString: LPCWSTR);
}
unsafe extern "C" {
    pub fn ContinueDebugEvent(
        dwProcessId: DWORD,
        dwThreadId: DWORD,
        dwContinueStatus: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitForDebugEvent(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DebugActiveProcess(dwProcessId: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DebugActiveProcessStop(dwProcessId: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckRemoteDebuggerPresent(hProcess: HANDLE, pbDebuggerPresent: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitForDebugEventEx(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EncodePointer(Ptr: PVOID) -> PVOID;
}
unsafe extern "C" {
    pub fn DecodePointer(Ptr: PVOID) -> PVOID;
}
unsafe extern "C" {
    pub fn EncodeSystemPointer(Ptr: PVOID) -> PVOID;
}
unsafe extern "C" {
    pub fn DecodeSystemPointer(Ptr: PVOID) -> PVOID;
}
unsafe extern "C" {
    pub fn EncodeRemotePointer(
        ProcessHandle: HANDLE,
        Ptr: PVOID,
        EncodedPtr: *mut PVOID,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn DecodeRemotePointer(
        ProcessHandle: HANDLE,
        Ptr: PVOID,
        DecodedPtr: *mut PVOID,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn Beep(dwFreq: DWORD, dwDuration: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseHandle(hObject: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn DuplicateHandle(
        hSourceProcessHandle: HANDLE,
        hSourceHandle: HANDLE,
        hTargetProcessHandle: HANDLE,
        lpTargetHandle: LPHANDLE,
        dwDesiredAccess: DWORD,
        bInheritHandle: BOOL,
        dwOptions: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CompareObjectHandles(hFirstObjectHandle: HANDLE, hSecondObjectHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetHandleInformation(hObject: HANDLE, lpdwFlags: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetHandleInformation(hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD) -> BOOL;
}
pub type PTOP_LEVEL_EXCEPTION_FILTER =
    ::std::option::Option<unsafe extern "C" fn(ExceptionInfo: *mut _EXCEPTION_POINTERS) -> LONG>;
pub type LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER;
unsafe extern "C" {
    pub fn RaiseException(
        dwExceptionCode: DWORD,
        dwExceptionFlags: DWORD,
        nNumberOfArguments: DWORD,
        lpArguments: *const ULONG_PTR,
    );
}
unsafe extern "C" {
    pub fn UnhandledExceptionFilter(ExceptionInfo: *mut _EXCEPTION_POINTERS) -> LONG;
}
unsafe extern "C" {
    pub fn SetUnhandledExceptionFilter(
        lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER,
    ) -> LPTOP_LEVEL_EXCEPTION_FILTER;
}
unsafe extern "C" {
    pub fn GetLastError() -> DWORD;
}
unsafe extern "C" {
    pub fn SetLastError(dwErrCode: DWORD);
}
unsafe extern "C" {
    pub fn GetErrorMode() -> UINT;
}
unsafe extern "C" {
    pub fn SetErrorMode(uMode: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn AddVectoredExceptionHandler(First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER)
    -> PVOID;
}
unsafe extern "C" {
    pub fn RemoveVectoredExceptionHandler(Handle: PVOID) -> ULONG;
}
unsafe extern "C" {
    pub fn AddVectoredContinueHandler(First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER) -> PVOID;
}
unsafe extern "C" {
    pub fn RemoveVectoredContinueHandler(Handle: PVOID) -> ULONG;
}
unsafe extern "C" {
    pub fn RaiseFailFastException(
        pExceptionRecord: PEXCEPTION_RECORD,
        pContextRecord: PCONTEXT,
        dwFlags: DWORD,
    );
}
unsafe extern "C" {
    pub fn FatalAppExitA(uAction: UINT, lpMessageText: LPCSTR);
}
unsafe extern "C" {
    pub fn FatalAppExitW(uAction: UINT, lpMessageText: LPCWSTR);
}
unsafe extern "C" {
    pub fn GetThreadErrorMode() -> DWORD;
}
unsafe extern "C" {
    pub fn SetThreadErrorMode(dwNewMode: DWORD, lpOldMode: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn TerminateProcessOnMemoryExhaustion(FailedAllocationSize: SIZE_T);
}
unsafe extern "C" {
    pub fn FlsAlloc(lpCallback: PFLS_CALLBACK_FUNCTION) -> DWORD;
}
unsafe extern "C" {
    pub fn FlsGetValue(dwFlsIndex: DWORD) -> PVOID;
}
unsafe extern "C" {
    pub fn FlsSetValue(dwFlsIndex: DWORD, lpFlsData: PVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn FlsFree(dwFlsIndex: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn IsThreadAFiber() -> BOOL;
}
unsafe extern "C" {
    pub fn FlsGetValue2(dwTlsIndex: DWORD) -> PVOID;
}
unsafe extern "C" {
    pub fn CreatePipe(
        hReadPipe: PHANDLE,
        hWritePipe: PHANDLE,
        lpPipeAttributes: LPSECURITY_ATTRIBUTES,
        nSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ConnectNamedPipe(hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED) -> BOOL;
}
unsafe extern "C" {
    pub fn DisconnectNamedPipe(hNamedPipe: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetNamedPipeHandleState(
        hNamedPipe: HANDLE,
        lpMode: LPDWORD,
        lpMaxCollectionCount: LPDWORD,
        lpCollectDataTimeout: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PeekNamedPipe(
        hNamedPipe: HANDLE,
        lpBuffer: LPVOID,
        nBufferSize: DWORD,
        lpBytesRead: LPDWORD,
        lpTotalBytesAvail: LPDWORD,
        lpBytesLeftThisMessage: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TransactNamedPipe(
        hNamedPipe: HANDLE,
        lpInBuffer: LPVOID,
        nInBufferSize: DWORD,
        lpOutBuffer: LPVOID,
        nOutBufferSize: DWORD,
        lpBytesRead: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateNamedPipeW(
        lpName: LPCWSTR,
        dwOpenMode: DWORD,
        dwPipeMode: DWORD,
        nMaxInstances: DWORD,
        nOutBufferSize: DWORD,
        nInBufferSize: DWORD,
        nDefaultTimeOut: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WaitNamedPipeW(lpNamedPipeName: LPCWSTR, nTimeOut: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeClientComputerNameW(
        Pipe: HANDLE,
        ClientComputerName: LPWSTR,
        ClientComputerNameLength: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImpersonateNamedPipeClient(hNamedPipe: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeInfo(
        hNamedPipe: HANDLE,
        lpFlags: LPDWORD,
        lpOutBufferSize: LPDWORD,
        lpInBufferSize: LPDWORD,
        lpMaxInstances: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeHandleStateW(
        hNamedPipe: HANDLE,
        lpState: LPDWORD,
        lpCurInstances: LPDWORD,
        lpMaxCollectionCount: LPDWORD,
        lpCollectDataTimeout: LPDWORD,
        lpUserName: LPWSTR,
        nMaxUserNameSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CallNamedPipeW(
        lpNamedPipeName: LPCWSTR,
        lpInBuffer: LPVOID,
        nInBufferSize: DWORD,
        lpOutBuffer: LPVOID,
        nOutBufferSize: DWORD,
        lpBytesRead: LPDWORD,
        nTimeOut: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryPerformanceCounter(lpPerformanceCount: *mut LARGE_INTEGER) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryPerformanceFrequency(lpFrequency: *mut LARGE_INTEGER) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HEAP_SUMMARY {
    pub cb: DWORD,
    pub cbAllocated: SIZE_T,
    pub cbCommitted: SIZE_T,
    pub cbReserved: SIZE_T,
    pub cbMaxReserve: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _HEAP_SUMMARY"][::std::mem::size_of::<_HEAP_SUMMARY>() - 40usize];
    ["Alignment of _HEAP_SUMMARY"][::std::mem::align_of::<_HEAP_SUMMARY>() - 8usize];
    ["Offset of field: _HEAP_SUMMARY::cb"][::std::mem::offset_of!(_HEAP_SUMMARY, cb) - 0usize];
    ["Offset of field: _HEAP_SUMMARY::cbAllocated"]
        [::std::mem::offset_of!(_HEAP_SUMMARY, cbAllocated) - 8usize];
    ["Offset of field: _HEAP_SUMMARY::cbCommitted"]
        [::std::mem::offset_of!(_HEAP_SUMMARY, cbCommitted) - 16usize];
    ["Offset of field: _HEAP_SUMMARY::cbReserved"]
        [::std::mem::offset_of!(_HEAP_SUMMARY, cbReserved) - 24usize];
    ["Offset of field: _HEAP_SUMMARY::cbMaxReserve"]
        [::std::mem::offset_of!(_HEAP_SUMMARY, cbMaxReserve) - 32usize];
};
pub type HEAP_SUMMARY = _HEAP_SUMMARY;
pub type PHEAP_SUMMARY = *mut _HEAP_SUMMARY;
pub type LPHEAP_SUMMARY = PHEAP_SUMMARY;
unsafe extern "C" {
    pub fn HeapCreate(flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T) -> HANDLE;
}
unsafe extern "C" {
    pub fn HeapDestroy(hHeap: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;
}
unsafe extern "C" {
    pub fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) -> LPVOID;
}
unsafe extern "C" {
    pub fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapSize(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID) -> SIZE_T;
}
unsafe extern "C" {
    pub fn GetProcessHeap() -> HANDLE;
}
unsafe extern "C" {
    pub fn HeapCompact(hHeap: HANDLE, dwFlags: DWORD) -> SIZE_T;
}
unsafe extern "C" {
    pub fn HeapSetInformation(
        HeapHandle: HANDLE,
        HeapInformationClass: HEAP_INFORMATION_CLASS,
        HeapInformation: PVOID,
        HeapInformationLength: SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapValidate(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapSummary(hHeap: HANDLE, dwFlags: DWORD, lpSummary: LPHEAP_SUMMARY) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessHeaps(NumberOfHeaps: DWORD, ProcessHeaps: PHANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn HeapLock(hHeap: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapUnlock(hHeap: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapWalk(hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY) -> BOOL;
}
unsafe extern "C" {
    pub fn HeapQueryInformation(
        HeapHandle: HANDLE,
        HeapInformationClass: HEAP_INFORMATION_CLASS,
        HeapInformation: PVOID,
        HeapInformationLength: SIZE_T,
        ReturnLength: PSIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateIoCompletionPort(
        FileHandle: HANDLE,
        ExistingCompletionPort: HANDLE,
        CompletionKey: ULONG_PTR,
        NumberOfConcurrentThreads: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetQueuedCompletionStatus(
        CompletionPort: HANDLE,
        lpNumberOfBytesTransferred: LPDWORD,
        lpCompletionKey: PULONG_PTR,
        lpOverlapped: *mut LPOVERLAPPED,
        dwMilliseconds: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetQueuedCompletionStatusEx(
        CompletionPort: HANDLE,
        lpCompletionPortEntries: LPOVERLAPPED_ENTRY,
        ulCount: ULONG,
        ulNumEntriesRemoved: PULONG,
        dwMilliseconds: DWORD,
        fAlertable: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PostQueuedCompletionStatus(
        CompletionPort: HANDLE,
        dwNumberOfBytesTransferred: DWORD,
        dwCompletionKey: ULONG_PTR,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DeviceIoControl(
        hDevice: HANDLE,
        dwIoControlCode: DWORD,
        lpInBuffer: LPVOID,
        nInBufferSize: DWORD,
        lpOutBuffer: LPVOID,
        nOutBufferSize: DWORD,
        lpBytesReturned: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetOverlappedResult(
        hFile: HANDLE,
        lpOverlapped: LPOVERLAPPED,
        lpNumberOfBytesTransferred: LPDWORD,
        bWait: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CancelIoEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED) -> BOOL;
}
unsafe extern "C" {
    pub fn CancelIo(hFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetOverlappedResultEx(
        hFile: HANDLE,
        lpOverlapped: LPOVERLAPPED,
        lpNumberOfBytesTransferred: LPDWORD,
        dwMilliseconds: DWORD,
        bAlertable: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CancelSynchronousIo(hThread: HANDLE) -> BOOL;
}
pub type SRWLOCK = RTL_SRWLOCK;
pub type PSRWLOCK = *mut RTL_SRWLOCK;
unsafe extern "C" {
    pub fn InitializeSRWLock(SRWLock: PSRWLOCK);
}
unsafe extern "C" {
    pub fn ReleaseSRWLockExclusive(SRWLock: PSRWLOCK);
}
unsafe extern "C" {
    pub fn ReleaseSRWLockShared(SRWLock: PSRWLOCK);
}
unsafe extern "C" {
    pub fn AcquireSRWLockExclusive(SRWLock: PSRWLOCK);
}
unsafe extern "C" {
    pub fn AcquireSRWLockShared(SRWLock: PSRWLOCK);
}
unsafe extern "C" {
    pub fn TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn TryAcquireSRWLockShared(SRWLock: PSRWLOCK) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn InitializeCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);
}
unsafe extern "C" {
    pub fn EnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);
}
unsafe extern "C" {
    pub fn LeaveCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);
}
unsafe extern "C" {
    pub fn InitializeCriticalSectionAndSpinCount(
        lpCriticalSection: LPCRITICAL_SECTION,
        dwSpinCount: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeCriticalSectionEx(
        lpCriticalSection: LPCRITICAL_SECTION,
        dwSpinCount: DWORD,
        Flags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCriticalSectionSpinCount(
        lpCriticalSection: LPCRITICAL_SECTION,
        dwSpinCount: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn TryEnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);
}
pub type INIT_ONCE = RTL_RUN_ONCE;
pub type PINIT_ONCE = PRTL_RUN_ONCE;
pub type LPINIT_ONCE = PRTL_RUN_ONCE;
pub type PINIT_ONCE_FN = ::std::option::Option<
    unsafe extern "C" fn(InitOnce: PINIT_ONCE, Parameter: PVOID, Context: *mut PVOID) -> BOOL,
>;
unsafe extern "C" {
    pub fn InitOnceInitialize(InitOnce: PINIT_ONCE);
}
unsafe extern "C" {
    pub fn InitOnceExecuteOnce(
        InitOnce: PINIT_ONCE,
        InitFn: PINIT_ONCE_FN,
        Parameter: PVOID,
        Context: *mut LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitOnceBeginInitialize(
        lpInitOnce: LPINIT_ONCE,
        dwFlags: DWORD,
        fPending: PBOOL,
        lpContext: *mut LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitOnceComplete(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID) -> BOOL;
}
pub type CONDITION_VARIABLE = RTL_CONDITION_VARIABLE;
pub type PCONDITION_VARIABLE = *mut RTL_CONDITION_VARIABLE;
unsafe extern "C" {
    pub fn InitializeConditionVariable(ConditionVariable: PCONDITION_VARIABLE);
}
unsafe extern "C" {
    pub fn WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE);
}
unsafe extern "C" {
    pub fn WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE);
}
unsafe extern "C" {
    pub fn SleepConditionVariableCS(
        ConditionVariable: PCONDITION_VARIABLE,
        CriticalSection: PCRITICAL_SECTION,
        dwMilliseconds: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SleepConditionVariableSRW(
        ConditionVariable: PCONDITION_VARIABLE,
        SRWLock: PSRWLOCK,
        dwMilliseconds: DWORD,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetEvent(hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ResetEvent(hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ReleaseSemaphore(
        hSemaphore: HANDLE,
        lReleaseCount: LONG,
        lpPreviousCount: LPLONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReleaseMutex(hMutex: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn SleepEx(dwMilliseconds: DWORD, bAlertable: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL)
    -> DWORD;
}
unsafe extern "C" {
    pub fn WaitForMultipleObjectsEx(
        nCount: DWORD,
        lpHandles: *const HANDLE,
        bWaitAll: BOOL,
        dwMilliseconds: DWORD,
        bAlertable: BOOL,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn CreateMutexA(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        bInitialOwner: BOOL,
        lpName: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateMutexW(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        bInitialOwner: BOOL,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenMutexW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateEventA(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        lpName: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateEventW(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        bInitialState: BOOL,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenEventA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenEventW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenSemaphoreW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) -> HANDLE;
}
pub type PTIMERAPCROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        lpArgToCompletionRoutine: LPVOID,
        dwTimerLowValue: DWORD,
        dwTimerHighValue: DWORD,
    ),
>;
unsafe extern "C" {
    pub fn OpenWaitableTimerW(
        dwDesiredAccess: DWORD,
        bInheritHandle: BOOL,
        lpTimerName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn SetWaitableTimerEx(
        hTimer: HANDLE,
        lpDueTime: *const LARGE_INTEGER,
        lPeriod: LONG,
        pfnCompletionRoutine: PTIMERAPCROUTINE,
        lpArgToCompletionRoutine: LPVOID,
        WakeContext: PREASON_CONTEXT,
        TolerableDelay: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWaitableTimer(
        hTimer: HANDLE,
        lpDueTime: *const LARGE_INTEGER,
        lPeriod: LONG,
        pfnCompletionRoutine: PTIMERAPCROUTINE,
        lpArgToCompletionRoutine: LPVOID,
        fResume: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CancelWaitableTimer(hTimer: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateMutexExA(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateMutexExW(
        lpMutexAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateEventExA(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateEventExW(
        lpEventAttributes: LPSECURITY_ATTRIBUTES,
        lpName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateSemaphoreExW(
        lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
        lInitialCount: LONG,
        lMaximumCount: LONG,
        lpName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateWaitableTimerExW(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        lpTimerName: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
pub type SYNCHRONIZATION_BARRIER = RTL_BARRIER;
pub type PSYNCHRONIZATION_BARRIER = PRTL_BARRIER;
pub type LPSYNCHRONIZATION_BARRIER = PRTL_BARRIER;
unsafe extern "C" {
    pub fn EnterSynchronizationBarrier(
        lpBarrier: LPSYNCHRONIZATION_BARRIER,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeSynchronizationBarrier(
        lpBarrier: LPSYNCHRONIZATION_BARRIER,
        lTotalThreads: LONG,
        lSpinCount: LONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER) -> BOOL;
}
unsafe extern "C" {
    pub fn Sleep(dwMilliseconds: DWORD);
}
unsafe extern "C" {
    pub fn WaitOnAddress(
        Address: *mut ::std::os::raw::c_void,
        CompareAddress: PVOID,
        AddressSize: SIZE_T,
        dwMilliseconds: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WakeByAddressSingle(Address: PVOID);
}
unsafe extern "C" {
    pub fn WakeByAddressAll(Address: PVOID);
}
unsafe extern "C" {
    pub fn SignalObjectAndWait(
        hObjectToSignal: HANDLE,
        hObjectToWaitOn: HANDLE,
        dwMilliseconds: DWORD,
        bAlertable: BOOL,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WaitForMultipleObjects(
        nCount: DWORD,
        lpHandles: *const HANDLE,
        bWaitAll: BOOL,
        dwMilliseconds: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn CreateSemaphoreW(
        lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
        lInitialCount: LONG,
        lMaximumCount: LONG,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateWaitableTimerW(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        lpTimerName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn InitializeSListHead(ListHead: PSLIST_HEADER);
}
unsafe extern "C" {
    pub fn InterlockedPopEntrySList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn InterlockedPushEntrySList(
        ListHead: PSLIST_HEADER,
        ListEntry: PSLIST_ENTRY,
    ) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn InterlockedPushListSListEx(
        ListHead: PSLIST_HEADER,
        List: PSLIST_ENTRY,
        ListEnd: PSLIST_ENTRY,
        Count: ULONG,
    ) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn InterlockedFlushSList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
unsafe extern "C" {
    pub fn QueryDepthSList(ListHead: PSLIST_HEADER) -> USHORT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_INFORMATION {
    pub hProcess: HANDLE,
    pub hThread: HANDLE,
    pub dwProcessId: DWORD,
    pub dwThreadId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_INFORMATION"][::std::mem::size_of::<_PROCESS_INFORMATION>() - 24usize];
    ["Alignment of _PROCESS_INFORMATION"][::std::mem::align_of::<_PROCESS_INFORMATION>() - 8usize];
    ["Offset of field: _PROCESS_INFORMATION::hProcess"]
        [::std::mem::offset_of!(_PROCESS_INFORMATION, hProcess) - 0usize];
    ["Offset of field: _PROCESS_INFORMATION::hThread"]
        [::std::mem::offset_of!(_PROCESS_INFORMATION, hThread) - 8usize];
    ["Offset of field: _PROCESS_INFORMATION::dwProcessId"]
        [::std::mem::offset_of!(_PROCESS_INFORMATION, dwProcessId) - 16usize];
    ["Offset of field: _PROCESS_INFORMATION::dwThreadId"]
        [::std::mem::offset_of!(_PROCESS_INFORMATION, dwThreadId) - 20usize];
};
pub type PROCESS_INFORMATION = _PROCESS_INFORMATION;
pub type PPROCESS_INFORMATION = *mut _PROCESS_INFORMATION;
pub type LPPROCESS_INFORMATION = *mut _PROCESS_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOA {
    pub cb: DWORD,
    pub lpReserved: LPSTR,
    pub lpDesktop: LPSTR,
    pub lpTitle: LPSTR,
    pub dwX: DWORD,
    pub dwY: DWORD,
    pub dwXSize: DWORD,
    pub dwYSize: DWORD,
    pub dwXCountChars: DWORD,
    pub dwYCountChars: DWORD,
    pub dwFillAttribute: DWORD,
    pub dwFlags: DWORD,
    pub wShowWindow: WORD,
    pub cbReserved2: WORD,
    pub lpReserved2: LPBYTE,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _STARTUPINFOA"][::std::mem::size_of::<_STARTUPINFOA>() - 104usize];
    ["Alignment of _STARTUPINFOA"][::std::mem::align_of::<_STARTUPINFOA>() - 8usize];
    ["Offset of field: _STARTUPINFOA::cb"][::std::mem::offset_of!(_STARTUPINFOA, cb) - 0usize];
    ["Offset of field: _STARTUPINFOA::lpReserved"]
        [::std::mem::offset_of!(_STARTUPINFOA, lpReserved) - 8usize];
    ["Offset of field: _STARTUPINFOA::lpDesktop"]
        [::std::mem::offset_of!(_STARTUPINFOA, lpDesktop) - 16usize];
    ["Offset of field: _STARTUPINFOA::lpTitle"]
        [::std::mem::offset_of!(_STARTUPINFOA, lpTitle) - 24usize];
    ["Offset of field: _STARTUPINFOA::dwX"][::std::mem::offset_of!(_STARTUPINFOA, dwX) - 32usize];
    ["Offset of field: _STARTUPINFOA::dwY"][::std::mem::offset_of!(_STARTUPINFOA, dwY) - 36usize];
    ["Offset of field: _STARTUPINFOA::dwXSize"]
        [::std::mem::offset_of!(_STARTUPINFOA, dwXSize) - 40usize];
    ["Offset of field: _STARTUPINFOA::dwYSize"]
        [::std::mem::offset_of!(_STARTUPINFOA, dwYSize) - 44usize];
    ["Offset of field: _STARTUPINFOA::dwXCountChars"]
        [::std::mem::offset_of!(_STARTUPINFOA, dwXCountChars) - 48usize];
    ["Offset of field: _STARTUPINFOA::dwYCountChars"]
        [::std::mem::offset_of!(_STARTUPINFOA, dwYCountChars) - 52usize];
    ["Offset of field: _STARTUPINFOA::dwFillAttribute"]
        [::std::mem::offset_of!(_STARTUPINFOA, dwFillAttribute) - 56usize];
    ["Offset of field: _STARTUPINFOA::dwFlags"]
        [::std::mem::offset_of!(_STARTUPINFOA, dwFlags) - 60usize];
    ["Offset of field: _STARTUPINFOA::wShowWindow"]
        [::std::mem::offset_of!(_STARTUPINFOA, wShowWindow) - 64usize];
    ["Offset of field: _STARTUPINFOA::cbReserved2"]
        [::std::mem::offset_of!(_STARTUPINFOA, cbReserved2) - 66usize];
    ["Offset of field: _STARTUPINFOA::lpReserved2"]
        [::std::mem::offset_of!(_STARTUPINFOA, lpReserved2) - 72usize];
    ["Offset of field: _STARTUPINFOA::hStdInput"]
        [::std::mem::offset_of!(_STARTUPINFOA, hStdInput) - 80usize];
    ["Offset of field: _STARTUPINFOA::hStdOutput"]
        [::std::mem::offset_of!(_STARTUPINFOA, hStdOutput) - 88usize];
    ["Offset of field: _STARTUPINFOA::hStdError"]
        [::std::mem::offset_of!(_STARTUPINFOA, hStdError) - 96usize];
};
pub type STARTUPINFOA = _STARTUPINFOA;
pub type LPSTARTUPINFOA = *mut _STARTUPINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOW {
    pub cb: DWORD,
    pub lpReserved: LPWSTR,
    pub lpDesktop: LPWSTR,
    pub lpTitle: LPWSTR,
    pub dwX: DWORD,
    pub dwY: DWORD,
    pub dwXSize: DWORD,
    pub dwYSize: DWORD,
    pub dwXCountChars: DWORD,
    pub dwYCountChars: DWORD,
    pub dwFillAttribute: DWORD,
    pub dwFlags: DWORD,
    pub wShowWindow: WORD,
    pub cbReserved2: WORD,
    pub lpReserved2: LPBYTE,
    pub hStdInput: HANDLE,
    pub hStdOutput: HANDLE,
    pub hStdError: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _STARTUPINFOW"][::std::mem::size_of::<_STARTUPINFOW>() - 104usize];
    ["Alignment of _STARTUPINFOW"][::std::mem::align_of::<_STARTUPINFOW>() - 8usize];
    ["Offset of field: _STARTUPINFOW::cb"][::std::mem::offset_of!(_STARTUPINFOW, cb) - 0usize];
    ["Offset of field: _STARTUPINFOW::lpReserved"]
        [::std::mem::offset_of!(_STARTUPINFOW, lpReserved) - 8usize];
    ["Offset of field: _STARTUPINFOW::lpDesktop"]
        [::std::mem::offset_of!(_STARTUPINFOW, lpDesktop) - 16usize];
    ["Offset of field: _STARTUPINFOW::lpTitle"]
        [::std::mem::offset_of!(_STARTUPINFOW, lpTitle) - 24usize];
    ["Offset of field: _STARTUPINFOW::dwX"][::std::mem::offset_of!(_STARTUPINFOW, dwX) - 32usize];
    ["Offset of field: _STARTUPINFOW::dwY"][::std::mem::offset_of!(_STARTUPINFOW, dwY) - 36usize];
    ["Offset of field: _STARTUPINFOW::dwXSize"]
        [::std::mem::offset_of!(_STARTUPINFOW, dwXSize) - 40usize];
    ["Offset of field: _STARTUPINFOW::dwYSize"]
        [::std::mem::offset_of!(_STARTUPINFOW, dwYSize) - 44usize];
    ["Offset of field: _STARTUPINFOW::dwXCountChars"]
        [::std::mem::offset_of!(_STARTUPINFOW, dwXCountChars) - 48usize];
    ["Offset of field: _STARTUPINFOW::dwYCountChars"]
        [::std::mem::offset_of!(_STARTUPINFOW, dwYCountChars) - 52usize];
    ["Offset of field: _STARTUPINFOW::dwFillAttribute"]
        [::std::mem::offset_of!(_STARTUPINFOW, dwFillAttribute) - 56usize];
    ["Offset of field: _STARTUPINFOW::dwFlags"]
        [::std::mem::offset_of!(_STARTUPINFOW, dwFlags) - 60usize];
    ["Offset of field: _STARTUPINFOW::wShowWindow"]
        [::std::mem::offset_of!(_STARTUPINFOW, wShowWindow) - 64usize];
    ["Offset of field: _STARTUPINFOW::cbReserved2"]
        [::std::mem::offset_of!(_STARTUPINFOW, cbReserved2) - 66usize];
    ["Offset of field: _STARTUPINFOW::lpReserved2"]
        [::std::mem::offset_of!(_STARTUPINFOW, lpReserved2) - 72usize];
    ["Offset of field: _STARTUPINFOW::hStdInput"]
        [::std::mem::offset_of!(_STARTUPINFOW, hStdInput) - 80usize];
    ["Offset of field: _STARTUPINFOW::hStdOutput"]
        [::std::mem::offset_of!(_STARTUPINFOW, hStdOutput) - 88usize];
    ["Offset of field: _STARTUPINFOW::hStdError"]
        [::std::mem::offset_of!(_STARTUPINFOW, hStdError) - 96usize];
};
pub type STARTUPINFOW = _STARTUPINFOW;
pub type LPSTARTUPINFOW = *mut _STARTUPINFOW;
pub type STARTUPINFO = STARTUPINFOA;
pub type LPSTARTUPINFO = LPSTARTUPINFOA;
unsafe extern "C" {
    pub fn QueueUserAPC(pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: ULONG_PTR) -> DWORD;
}
pub const _QUEUE_USER_APC_FLAGS_QUEUE_USER_APC_FLAGS_NONE: _QUEUE_USER_APC_FLAGS = 0;
pub const _QUEUE_USER_APC_FLAGS_QUEUE_USER_APC_FLAGS_SPECIAL_USER_APC: _QUEUE_USER_APC_FLAGS = 1;
pub const _QUEUE_USER_APC_FLAGS_QUEUE_USER_APC_CALLBACK_DATA_CONTEXT: _QUEUE_USER_APC_FLAGS = 65536;
pub type _QUEUE_USER_APC_FLAGS = ::std::os::raw::c_int;
pub use self::_QUEUE_USER_APC_FLAGS as QUEUE_USER_APC_FLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _APC_CALLBACK_DATA {
    pub Parameter: ULONG_PTR,
    pub ContextRecord: PCONTEXT,
    pub Reserved0: ULONG_PTR,
    pub Reserved1: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _APC_CALLBACK_DATA"][::std::mem::size_of::<_APC_CALLBACK_DATA>() - 32usize];
    ["Alignment of _APC_CALLBACK_DATA"][::std::mem::align_of::<_APC_CALLBACK_DATA>() - 8usize];
    ["Offset of field: _APC_CALLBACK_DATA::Parameter"]
        [::std::mem::offset_of!(_APC_CALLBACK_DATA, Parameter) - 0usize];
    ["Offset of field: _APC_CALLBACK_DATA::ContextRecord"]
        [::std::mem::offset_of!(_APC_CALLBACK_DATA, ContextRecord) - 8usize];
    ["Offset of field: _APC_CALLBACK_DATA::Reserved0"]
        [::std::mem::offset_of!(_APC_CALLBACK_DATA, Reserved0) - 16usize];
    ["Offset of field: _APC_CALLBACK_DATA::Reserved1"]
        [::std::mem::offset_of!(_APC_CALLBACK_DATA, Reserved1) - 24usize];
};
pub type APC_CALLBACK_DATA = _APC_CALLBACK_DATA;
pub type PAPC_CALLBACK_DATA = *mut _APC_CALLBACK_DATA;
unsafe extern "C" {
    pub fn QueueUserAPC2(
        ApcRoutine: PAPCFUNC,
        Thread: HANDLE,
        Data: ULONG_PTR,
        Flags: QUEUE_USER_APC_FLAGS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessTimes(
        hProcess: HANDLE,
        lpCreationTime: LPFILETIME,
        lpExitTime: LPFILETIME,
        lpKernelTime: LPFILETIME,
        lpUserTime: LPFILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentProcess() -> HANDLE;
}
unsafe extern "C" {
    pub fn GetCurrentProcessId() -> DWORD;
}
unsafe extern "C" {
    pub fn ExitProcess(uExitCode: UINT) -> !;
}
unsafe extern "C" {
    pub fn TerminateProcess(hProcess: HANDLE, uExitCode: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SwitchToThread() -> BOOL;
}
unsafe extern "C" {
    pub fn CreateThread(
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        dwStackSize: SIZE_T,
        lpStartAddress: LPTHREAD_START_ROUTINE,
        lpParameter: LPVOID,
        dwCreationFlags: DWORD,
        lpThreadId: LPDWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateRemoteThread(
        hProcess: HANDLE,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        dwStackSize: SIZE_T,
        lpStartAddress: LPTHREAD_START_ROUTINE,
        lpParameter: LPVOID,
        dwCreationFlags: DWORD,
        lpThreadId: LPDWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetCurrentThread() -> HANDLE;
}
unsafe extern "C" {
    pub fn GetCurrentThreadId() -> DWORD;
}
unsafe extern "C" {
    pub fn OpenThread(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwThreadId: DWORD) -> HANDLE;
}
unsafe extern "C" {
    pub fn SetThreadPriority(hThread: HANDLE, nPriority: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadPriorityBoost(hThread: HANDLE, bDisablePriorityBoost: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadPriorityBoost(hThread: HANDLE, pDisablePriorityBoost: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadPriority(hThread: HANDLE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExitThread(dwExitCode: DWORD) -> !;
}
unsafe extern "C" {
    pub fn TerminateThread(hThread: HANDLE, dwExitCode: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetExitCodeThread(hThread: HANDLE, lpExitCode: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SuspendThread(hThread: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn ResumeThread(hThread: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn TlsAlloc() -> DWORD;
}
unsafe extern "C" {
    pub fn TlsGetValue(dwTlsIndex: DWORD) -> LPVOID;
}
unsafe extern "C" {
    pub fn TlsSetValue(dwTlsIndex: DWORD, lpTlsValue: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn TlsFree(dwTlsIndex: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateProcessA(
        lpApplicationName: LPCSTR,
        lpCommandLine: LPSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCSTR,
        lpStartupInfo: LPSTARTUPINFOA,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateProcessW(
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessShutdownParameters(dwLevel: DWORD, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessVersion(ProcessId: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetStartupInfoW(lpStartupInfo: LPSTARTUPINFOW);
}
unsafe extern "C" {
    pub fn CreateProcessAsUserW(
        hToken: HANDLE,
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadToken(Thread: PHANDLE, Token: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenProcessToken(
        ProcessHandle: HANDLE,
        DesiredAccess: DWORD,
        TokenHandle: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenThreadToken(
        ThreadHandle: HANDLE,
        DesiredAccess: DWORD,
        OpenAsSelf: BOOL,
        TokenHandle: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPriorityClass(hProcess: HANDLE, dwPriorityClass: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPriorityClass(hProcess: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn SetThreadStackGuarantee(StackSizeInBytes: PULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn ProcessIdToSessionId(dwProcessId: DWORD, pSessionId: *mut DWORD) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROC_THREAD_ATTRIBUTE_LIST {
    _unused: [u8; 0],
}
pub type PPROC_THREAD_ATTRIBUTE_LIST = *mut _PROC_THREAD_ATTRIBUTE_LIST;
pub type LPPROC_THREAD_ATTRIBUTE_LIST = *mut _PROC_THREAD_ATTRIBUTE_LIST;
unsafe extern "C" {
    pub fn GetProcessId(Process: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn GetThreadId(Thread: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn FlushProcessWriteBuffers();
}
unsafe extern "C" {
    pub fn GetProcessIdOfThread(Thread: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn InitializeProcThreadAttributeList(
        lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
        dwAttributeCount: DWORD,
        dwFlags: DWORD,
        lpSize: PSIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST);
}
unsafe extern "C" {
    pub fn UpdateProcThreadAttribute(
        lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
        dwFlags: DWORD,
        Attribute: DWORD_PTR,
        lpValue: PVOID,
        cbSize: SIZE_T,
        lpPreviousValue: PVOID,
        lpReturnSize: PSIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDynamicEHContinuationTargets(
        Process: HANDLE,
        NumberOfTargets: USHORT,
        Targets: PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDynamicEnforcedCetCompatibleRanges(
        Process: HANDLE,
        NumberOfRanges: USHORT,
        Ranges: PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessAffinityUpdateMode(hProcess: HANDLE, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryProcessAffinityUpdateMode(hProcess: HANDLE, lpdwFlags: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateRemoteThreadEx(
        hProcess: HANDLE,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        dwStackSize: SIZE_T,
        lpStartAddress: LPTHREAD_START_ROUTINE,
        lpParameter: LPVOID,
        dwCreationFlags: DWORD,
        lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
        lpThreadId: LPDWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetCurrentThreadStackLimits(LowLimit: PULONG_PTR, HighLimit: PULONG_PTR);
}
unsafe extern "C" {
    pub fn GetThreadContext(hThread: HANDLE, lpContext: LPCONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessMitigationPolicy(
        hProcess: HANDLE,
        MitigationPolicy: PROCESS_MITIGATION_POLICY,
        lpBuffer: PVOID,
        dwLength: SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadContext(hThread: HANDLE, lpContext: *const CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessMitigationPolicy(
        MitigationPolicy: PROCESS_MITIGATION_POLICY,
        lpBuffer: PVOID,
        dwLength: SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FlushInstructionCache(hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: SIZE_T) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadTimes(
        hThread: HANDLE,
        lpCreationTime: LPFILETIME,
        lpExitTime: LPFILETIME,
        lpKernelTime: LPFILETIME,
        lpUserTime: LPFILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenProcess(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD) -> HANDLE;
}
unsafe extern "C" {
    pub fn IsProcessorFeaturePresent(ProcessorFeature: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessHandleCount(hProcess: HANDLE, pdwHandleCount: PDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentProcessorNumber() -> DWORD;
}
unsafe extern "C" {
    pub fn SetThreadIdealProcessorEx(
        hThread: HANDLE,
        lpIdealProcessor: PPROCESSOR_NUMBER,
        lpPreviousIdealProcessor: PPROCESSOR_NUMBER,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadIdealProcessorEx(hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentProcessorNumberEx(ProcNumber: PPROCESSOR_NUMBER);
}
unsafe extern "C" {
    pub fn GetProcessPriorityBoost(hProcess: HANDLE, pDisablePriorityBoost: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessPriorityBoost(hProcess: HANDLE, bDisablePriorityBoost: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadIOPendingFlag(hThread: HANDLE, lpIOIsPending: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemTimes(
        lpIdleTime: PFILETIME,
        lpKernelTime: PFILETIME,
        lpUserTime: PFILETIME,
    ) -> BOOL;
}
pub const _THREAD_INFORMATION_CLASS_ThreadMemoryPriority: _THREAD_INFORMATION_CLASS = 0;
pub const _THREAD_INFORMATION_CLASS_ThreadAbsoluteCpuPriority: _THREAD_INFORMATION_CLASS = 1;
pub const _THREAD_INFORMATION_CLASS_ThreadDynamicCodePolicy: _THREAD_INFORMATION_CLASS = 2;
pub const _THREAD_INFORMATION_CLASS_ThreadPowerThrottling: _THREAD_INFORMATION_CLASS = 3;
pub const _THREAD_INFORMATION_CLASS_ThreadInformationClassMax: _THREAD_INFORMATION_CLASS = 4;
pub type _THREAD_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_THREAD_INFORMATION_CLASS as THREAD_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORY_PRIORITY_INFORMATION {
    pub MemoryPriority: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORY_PRIORITY_INFORMATION"]
        [::std::mem::size_of::<_MEMORY_PRIORITY_INFORMATION>() - 4usize];
    ["Alignment of _MEMORY_PRIORITY_INFORMATION"]
        [::std::mem::align_of::<_MEMORY_PRIORITY_INFORMATION>() - 4usize];
    ["Offset of field: _MEMORY_PRIORITY_INFORMATION::MemoryPriority"]
        [::std::mem::offset_of!(_MEMORY_PRIORITY_INFORMATION, MemoryPriority) - 0usize];
};
pub type MEMORY_PRIORITY_INFORMATION = _MEMORY_PRIORITY_INFORMATION;
pub type PMEMORY_PRIORITY_INFORMATION = *mut _MEMORY_PRIORITY_INFORMATION;
unsafe extern "C" {
    pub fn GetThreadInformation(
        hThread: HANDLE,
        ThreadInformationClass: THREAD_INFORMATION_CLASS,
        ThreadInformation: LPVOID,
        ThreadInformationSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadInformation(
        hThread: HANDLE,
        ThreadInformationClass: THREAD_INFORMATION_CLASS,
        ThreadInformation: LPVOID,
        ThreadInformationSize: DWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _THREAD_POWER_THROTTLING_STATE {
    pub Version: ULONG,
    pub ControlMask: ULONG,
    pub StateMask: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _THREAD_POWER_THROTTLING_STATE"]
        [::std::mem::size_of::<_THREAD_POWER_THROTTLING_STATE>() - 12usize];
    ["Alignment of _THREAD_POWER_THROTTLING_STATE"]
        [::std::mem::align_of::<_THREAD_POWER_THROTTLING_STATE>() - 4usize];
    ["Offset of field: _THREAD_POWER_THROTTLING_STATE::Version"]
        [::std::mem::offset_of!(_THREAD_POWER_THROTTLING_STATE, Version) - 0usize];
    ["Offset of field: _THREAD_POWER_THROTTLING_STATE::ControlMask"]
        [::std::mem::offset_of!(_THREAD_POWER_THROTTLING_STATE, ControlMask) - 4usize];
    ["Offset of field: _THREAD_POWER_THROTTLING_STATE::StateMask"]
        [::std::mem::offset_of!(_THREAD_POWER_THROTTLING_STATE, StateMask) - 8usize];
};
pub type THREAD_POWER_THROTTLING_STATE = _THREAD_POWER_THROTTLING_STATE;
unsafe extern "C" {
    pub fn IsProcessCritical(hProcess: HANDLE, Critical: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProtectedPolicy(
        PolicyGuid: LPCGUID,
        PolicyValue: ULONG_PTR,
        OldPolicyValue: PULONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryProtectedPolicy(PolicyGuid: LPCGUID, PolicyValue: PULONG_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadIdealProcessor(hThread: HANDLE, dwIdealProcessor: DWORD) -> DWORD;
}
pub const _PROCESS_INFORMATION_CLASS_ProcessMemoryPriority: _PROCESS_INFORMATION_CLASS = 0;
pub const _PROCESS_INFORMATION_CLASS_ProcessMemoryExhaustionInfo: _PROCESS_INFORMATION_CLASS = 1;
pub const _PROCESS_INFORMATION_CLASS_ProcessAppMemoryInfo: _PROCESS_INFORMATION_CLASS = 2;
pub const _PROCESS_INFORMATION_CLASS_ProcessInPrivateInfo: _PROCESS_INFORMATION_CLASS = 3;
pub const _PROCESS_INFORMATION_CLASS_ProcessPowerThrottling: _PROCESS_INFORMATION_CLASS = 4;
pub const _PROCESS_INFORMATION_CLASS_ProcessReservedValue1: _PROCESS_INFORMATION_CLASS = 5;
pub const _PROCESS_INFORMATION_CLASS_ProcessTelemetryCoverageInfo: _PROCESS_INFORMATION_CLASS = 6;
pub const _PROCESS_INFORMATION_CLASS_ProcessProtectionLevelInfo: _PROCESS_INFORMATION_CLASS = 7;
pub const _PROCESS_INFORMATION_CLASS_ProcessLeapSecondInfo: _PROCESS_INFORMATION_CLASS = 8;
pub const _PROCESS_INFORMATION_CLASS_ProcessMachineTypeInfo: _PROCESS_INFORMATION_CLASS = 9;
pub const _PROCESS_INFORMATION_CLASS_ProcessOverrideSubsequentPrefetchParameter:
    _PROCESS_INFORMATION_CLASS = 10;
pub const _PROCESS_INFORMATION_CLASS_ProcessMaxOverridePrefetchParameter:
    _PROCESS_INFORMATION_CLASS = 11;
pub const _PROCESS_INFORMATION_CLASS_ProcessInformationClassMax: _PROCESS_INFORMATION_CLASS = 12;
pub type _PROCESS_INFORMATION_CLASS = ::std::os::raw::c_int;
pub use self::_PROCESS_INFORMATION_CLASS as PROCESS_INFORMATION_CLASS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _APP_MEMORY_INFORMATION {
    pub AvailableCommit: ULONG64,
    pub PrivateCommitUsage: ULONG64,
    pub PeakPrivateCommitUsage: ULONG64,
    pub TotalCommitUsage: ULONG64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _APP_MEMORY_INFORMATION"][::std::mem::size_of::<_APP_MEMORY_INFORMATION>() - 32usize];
    ["Alignment of _APP_MEMORY_INFORMATION"]
        [::std::mem::align_of::<_APP_MEMORY_INFORMATION>() - 8usize];
    ["Offset of field: _APP_MEMORY_INFORMATION::AvailableCommit"]
        [::std::mem::offset_of!(_APP_MEMORY_INFORMATION, AvailableCommit) - 0usize];
    ["Offset of field: _APP_MEMORY_INFORMATION::PrivateCommitUsage"]
        [::std::mem::offset_of!(_APP_MEMORY_INFORMATION, PrivateCommitUsage) - 8usize];
    ["Offset of field: _APP_MEMORY_INFORMATION::PeakPrivateCommitUsage"]
        [::std::mem::offset_of!(_APP_MEMORY_INFORMATION, PeakPrivateCommitUsage) - 16usize];
    ["Offset of field: _APP_MEMORY_INFORMATION::TotalCommitUsage"]
        [::std::mem::offset_of!(_APP_MEMORY_INFORMATION, TotalCommitUsage) - 24usize];
};
pub type APP_MEMORY_INFORMATION = _APP_MEMORY_INFORMATION;
pub type PAPP_MEMORY_INFORMATION = *mut _APP_MEMORY_INFORMATION;
pub const _MACHINE_ATTRIBUTES_UserEnabled: _MACHINE_ATTRIBUTES = 1;
pub const _MACHINE_ATTRIBUTES_KernelEnabled: _MACHINE_ATTRIBUTES = 2;
pub const _MACHINE_ATTRIBUTES_Wow64Container: _MACHINE_ATTRIBUTES = 4;
pub type _MACHINE_ATTRIBUTES = ::std::os::raw::c_int;
pub use self::_MACHINE_ATTRIBUTES as MACHINE_ATTRIBUTES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MACHINE_INFORMATION {
    pub ProcessMachine: USHORT,
    pub Res0: USHORT,
    pub MachineAttributes: MACHINE_ATTRIBUTES,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MACHINE_INFORMATION"]
        [::std::mem::size_of::<_PROCESS_MACHINE_INFORMATION>() - 8usize];
    ["Alignment of _PROCESS_MACHINE_INFORMATION"]
        [::std::mem::align_of::<_PROCESS_MACHINE_INFORMATION>() - 4usize];
    ["Offset of field: _PROCESS_MACHINE_INFORMATION::ProcessMachine"]
        [::std::mem::offset_of!(_PROCESS_MACHINE_INFORMATION, ProcessMachine) - 0usize];
    ["Offset of field: _PROCESS_MACHINE_INFORMATION::Res0"]
        [::std::mem::offset_of!(_PROCESS_MACHINE_INFORMATION, Res0) - 2usize];
    ["Offset of field: _PROCESS_MACHINE_INFORMATION::MachineAttributes"]
        [::std::mem::offset_of!(_PROCESS_MACHINE_INFORMATION, MachineAttributes) - 4usize];
};
pub type PROCESS_MACHINE_INFORMATION = _PROCESS_MACHINE_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OVERRIDE_PREFETCH_PARAMETER {
    pub Value: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OVERRIDE_PREFETCH_PARAMETER"]
        [::std::mem::size_of::<OVERRIDE_PREFETCH_PARAMETER>() - 4usize];
    ["Alignment of OVERRIDE_PREFETCH_PARAMETER"]
        [::std::mem::align_of::<OVERRIDE_PREFETCH_PARAMETER>() - 4usize];
    ["Offset of field: OVERRIDE_PREFETCH_PARAMETER::Value"]
        [::std::mem::offset_of!(OVERRIDE_PREFETCH_PARAMETER, Value) - 0usize];
};
pub const _PROCESS_MEMORY_EXHAUSTION_TYPE_PMETypeFailFastOnCommitFailure:
    _PROCESS_MEMORY_EXHAUSTION_TYPE = 0;
pub const _PROCESS_MEMORY_EXHAUSTION_TYPE_PMETypeMax: _PROCESS_MEMORY_EXHAUSTION_TYPE = 1;
pub type _PROCESS_MEMORY_EXHAUSTION_TYPE = ::std::os::raw::c_int;
pub use self::_PROCESS_MEMORY_EXHAUSTION_TYPE as PROCESS_MEMORY_EXHAUSTION_TYPE;
pub type PPROCESS_MEMORY_EXHAUSTION_TYPE = *mut _PROCESS_MEMORY_EXHAUSTION_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_MEMORY_EXHAUSTION_INFO {
    pub Version: USHORT,
    pub Reserved: USHORT,
    pub Type: PROCESS_MEMORY_EXHAUSTION_TYPE,
    pub Value: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_MEMORY_EXHAUSTION_INFO"]
        [::std::mem::size_of::<_PROCESS_MEMORY_EXHAUSTION_INFO>() - 16usize];
    ["Alignment of _PROCESS_MEMORY_EXHAUSTION_INFO"]
        [::std::mem::align_of::<_PROCESS_MEMORY_EXHAUSTION_INFO>() - 8usize];
    ["Offset of field: _PROCESS_MEMORY_EXHAUSTION_INFO::Version"]
        [::std::mem::offset_of!(_PROCESS_MEMORY_EXHAUSTION_INFO, Version) - 0usize];
    ["Offset of field: _PROCESS_MEMORY_EXHAUSTION_INFO::Reserved"]
        [::std::mem::offset_of!(_PROCESS_MEMORY_EXHAUSTION_INFO, Reserved) - 2usize];
    ["Offset of field: _PROCESS_MEMORY_EXHAUSTION_INFO::Type"]
        [::std::mem::offset_of!(_PROCESS_MEMORY_EXHAUSTION_INFO, Type) - 4usize];
    ["Offset of field: _PROCESS_MEMORY_EXHAUSTION_INFO::Value"]
        [::std::mem::offset_of!(_PROCESS_MEMORY_EXHAUSTION_INFO, Value) - 8usize];
};
pub type PROCESS_MEMORY_EXHAUSTION_INFO = _PROCESS_MEMORY_EXHAUSTION_INFO;
pub type PPROCESS_MEMORY_EXHAUSTION_INFO = *mut _PROCESS_MEMORY_EXHAUSTION_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_POWER_THROTTLING_STATE {
    pub Version: ULONG,
    pub ControlMask: ULONG,
    pub StateMask: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_POWER_THROTTLING_STATE"]
        [::std::mem::size_of::<_PROCESS_POWER_THROTTLING_STATE>() - 12usize];
    ["Alignment of _PROCESS_POWER_THROTTLING_STATE"]
        [::std::mem::align_of::<_PROCESS_POWER_THROTTLING_STATE>() - 4usize];
    ["Offset of field: _PROCESS_POWER_THROTTLING_STATE::Version"]
        [::std::mem::offset_of!(_PROCESS_POWER_THROTTLING_STATE, Version) - 0usize];
    ["Offset of field: _PROCESS_POWER_THROTTLING_STATE::ControlMask"]
        [::std::mem::offset_of!(_PROCESS_POWER_THROTTLING_STATE, ControlMask) - 4usize];
    ["Offset of field: _PROCESS_POWER_THROTTLING_STATE::StateMask"]
        [::std::mem::offset_of!(_PROCESS_POWER_THROTTLING_STATE, StateMask) - 8usize];
};
pub type PROCESS_POWER_THROTTLING_STATE = _PROCESS_POWER_THROTTLING_STATE;
pub type PPROCESS_POWER_THROTTLING_STATE = *mut _PROCESS_POWER_THROTTLING_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PROCESS_PROTECTION_LEVEL_INFORMATION {
    pub ProtectionLevel: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PROCESS_PROTECTION_LEVEL_INFORMATION"]
        [::std::mem::size_of::<PROCESS_PROTECTION_LEVEL_INFORMATION>() - 4usize];
    ["Alignment of PROCESS_PROTECTION_LEVEL_INFORMATION"]
        [::std::mem::align_of::<PROCESS_PROTECTION_LEVEL_INFORMATION>() - 4usize];
    ["Offset of field: PROCESS_PROTECTION_LEVEL_INFORMATION::ProtectionLevel"]
        [::std::mem::offset_of!(PROCESS_PROTECTION_LEVEL_INFORMATION, ProtectionLevel) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_LEAP_SECOND_INFO {
    pub Flags: ULONG,
    pub Reserved: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_LEAP_SECOND_INFO"]
        [::std::mem::size_of::<_PROCESS_LEAP_SECOND_INFO>() - 8usize];
    ["Alignment of _PROCESS_LEAP_SECOND_INFO"]
        [::std::mem::align_of::<_PROCESS_LEAP_SECOND_INFO>() - 4usize];
    ["Offset of field: _PROCESS_LEAP_SECOND_INFO::Flags"]
        [::std::mem::offset_of!(_PROCESS_LEAP_SECOND_INFO, Flags) - 0usize];
    ["Offset of field: _PROCESS_LEAP_SECOND_INFO::Reserved"]
        [::std::mem::offset_of!(_PROCESS_LEAP_SECOND_INFO, Reserved) - 4usize];
};
pub type PROCESS_LEAP_SECOND_INFO = _PROCESS_LEAP_SECOND_INFO;
pub type PPROCESS_LEAP_SECOND_INFO = *mut _PROCESS_LEAP_SECOND_INFO;
unsafe extern "C" {
    pub fn SetProcessInformation(
        hProcess: HANDLE,
        ProcessInformationClass: PROCESS_INFORMATION_CLASS,
        ProcessInformation: LPVOID,
        ProcessInformationSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessInformation(
        hProcess: HANDLE,
        ProcessInformationClass: PROCESS_INFORMATION_CLASS,
        ProcessInformation: LPVOID,
        ProcessInformationSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemCpuSetInformation(
        Information: PSYSTEM_CPU_SET_INFORMATION,
        BufferLength: ULONG,
        ReturnedLength: PULONG,
        Process: HANDLE,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessDefaultCpuSets(
        Process: HANDLE,
        CpuSetIds: PULONG,
        CpuSetIdCount: ULONG,
        RequiredIdCount: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDefaultCpuSets(
        Process: HANDLE,
        CpuSetIds: *const ULONG,
        CpuSetIdCount: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadSelectedCpuSets(
        Thread: HANDLE,
        CpuSetIds: PULONG,
        CpuSetIdCount: ULONG,
        RequiredIdCount: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadSelectedCpuSets(
        Thread: HANDLE,
        CpuSetIds: *const ULONG,
        CpuSetIdCount: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateProcessAsUserA(
        hToken: HANDLE,
        lpApplicationName: LPCSTR,
        lpCommandLine: LPSTR,
        lpProcessAttributes: LPSECURITY_ATTRIBUTES,
        lpThreadAttributes: LPSECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCSTR,
        lpStartupInfo: LPSTARTUPINFOA,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessShutdownParameters(lpdwLevel: LPDWORD, lpdwFlags: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessDefaultCpuSetMasks(
        Process: HANDLE,
        CpuSetMasks: PGROUP_AFFINITY,
        CpuSetMaskCount: USHORT,
        RequiredMaskCount: PUSHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDefaultCpuSetMasks(
        Process: HANDLE,
        CpuSetMasks: PGROUP_AFFINITY,
        CpuSetMaskCount: USHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadSelectedCpuSetMasks(
        Thread: HANDLE,
        CpuSetMasks: PGROUP_AFFINITY,
        CpuSetMaskCount: USHORT,
        RequiredMaskCount: PUSHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadSelectedCpuSetMasks(
        Thread: HANDLE,
        CpuSetMasks: PGROUP_AFFINITY,
        CpuSetMaskCount: USHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMachineTypeAttributes(
        Machine: USHORT,
        MachineTypeAttributes: *mut MACHINE_ATTRIBUTES,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn SetThreadDescription(hThread: HANDLE, lpThreadDescription: PCWSTR) -> HRESULT;
}
unsafe extern "C" {
    pub fn GetThreadDescription(hThread: HANDLE, ppszThreadDescription: *mut PWSTR) -> HRESULT;
}
unsafe extern "C" {
    pub fn TlsGetValue2(dwTlsIndex: DWORD) -> LPVOID;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SYSTEM_INFO {
    pub __bindgen_anon_1: _SYSTEM_INFO__bindgen_ty_1,
    pub dwPageSize: DWORD,
    pub lpMinimumApplicationAddress: LPVOID,
    pub lpMaximumApplicationAddress: LPVOID,
    pub dwActiveProcessorMask: DWORD_PTR,
    pub dwNumberOfProcessors: DWORD,
    pub dwProcessorType: DWORD,
    pub dwAllocationGranularity: DWORD,
    pub wProcessorLevel: WORD,
    pub wProcessorRevision: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SYSTEM_INFO__bindgen_ty_1 {
    pub dwOemId: DWORD,
    pub __bindgen_anon_1: _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub wProcessorArchitecture: WORD,
    pub wReserved: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1::wProcessorArchitecture"][::std::mem::offset_of!(
        _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1,
        wProcessorArchitecture
    )
        - 0usize];
    ["Offset of field: _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1::wReserved"]
        [::std::mem::offset_of!(_SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1, wReserved) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<_SYSTEM_INFO__bindgen_ty_1>() - 4usize];
    ["Alignment of _SYSTEM_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<_SYSTEM_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: _SYSTEM_INFO__bindgen_ty_1::dwOemId"]
        [::std::mem::offset_of!(_SYSTEM_INFO__bindgen_ty_1, dwOemId) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_INFO"][::std::mem::size_of::<_SYSTEM_INFO>() - 48usize];
    ["Alignment of _SYSTEM_INFO"][::std::mem::align_of::<_SYSTEM_INFO>() - 8usize];
    ["Offset of field: _SYSTEM_INFO::dwPageSize"]
        [::std::mem::offset_of!(_SYSTEM_INFO, dwPageSize) - 4usize];
    ["Offset of field: _SYSTEM_INFO::lpMinimumApplicationAddress"]
        [::std::mem::offset_of!(_SYSTEM_INFO, lpMinimumApplicationAddress) - 8usize];
    ["Offset of field: _SYSTEM_INFO::lpMaximumApplicationAddress"]
        [::std::mem::offset_of!(_SYSTEM_INFO, lpMaximumApplicationAddress) - 16usize];
    ["Offset of field: _SYSTEM_INFO::dwActiveProcessorMask"]
        [::std::mem::offset_of!(_SYSTEM_INFO, dwActiveProcessorMask) - 24usize];
    ["Offset of field: _SYSTEM_INFO::dwNumberOfProcessors"]
        [::std::mem::offset_of!(_SYSTEM_INFO, dwNumberOfProcessors) - 32usize];
    ["Offset of field: _SYSTEM_INFO::dwProcessorType"]
        [::std::mem::offset_of!(_SYSTEM_INFO, dwProcessorType) - 36usize];
    ["Offset of field: _SYSTEM_INFO::dwAllocationGranularity"]
        [::std::mem::offset_of!(_SYSTEM_INFO, dwAllocationGranularity) - 40usize];
    ["Offset of field: _SYSTEM_INFO::wProcessorLevel"]
        [::std::mem::offset_of!(_SYSTEM_INFO, wProcessorLevel) - 44usize];
    ["Offset of field: _SYSTEM_INFO::wProcessorRevision"]
        [::std::mem::offset_of!(_SYSTEM_INFO, wProcessorRevision) - 46usize];
};
pub type SYSTEM_INFO = _SYSTEM_INFO;
pub type LPSYSTEM_INFO = *mut _SYSTEM_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORYSTATUSEX {
    pub dwLength: DWORD,
    pub dwMemoryLoad: DWORD,
    pub ullTotalPhys: DWORDLONG,
    pub ullAvailPhys: DWORDLONG,
    pub ullTotalPageFile: DWORDLONG,
    pub ullAvailPageFile: DWORDLONG,
    pub ullTotalVirtual: DWORDLONG,
    pub ullAvailVirtual: DWORDLONG,
    pub ullAvailExtendedVirtual: DWORDLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORYSTATUSEX"][::std::mem::size_of::<_MEMORYSTATUSEX>() - 64usize];
    ["Alignment of _MEMORYSTATUSEX"][::std::mem::align_of::<_MEMORYSTATUSEX>() - 8usize];
    ["Offset of field: _MEMORYSTATUSEX::dwLength"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, dwLength) - 0usize];
    ["Offset of field: _MEMORYSTATUSEX::dwMemoryLoad"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, dwMemoryLoad) - 4usize];
    ["Offset of field: _MEMORYSTATUSEX::ullTotalPhys"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullTotalPhys) - 8usize];
    ["Offset of field: _MEMORYSTATUSEX::ullAvailPhys"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullAvailPhys) - 16usize];
    ["Offset of field: _MEMORYSTATUSEX::ullTotalPageFile"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullTotalPageFile) - 24usize];
    ["Offset of field: _MEMORYSTATUSEX::ullAvailPageFile"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullAvailPageFile) - 32usize];
    ["Offset of field: _MEMORYSTATUSEX::ullTotalVirtual"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullTotalVirtual) - 40usize];
    ["Offset of field: _MEMORYSTATUSEX::ullAvailVirtual"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullAvailVirtual) - 48usize];
    ["Offset of field: _MEMORYSTATUSEX::ullAvailExtendedVirtual"]
        [::std::mem::offset_of!(_MEMORYSTATUSEX, ullAvailExtendedVirtual) - 56usize];
};
pub type MEMORYSTATUSEX = _MEMORYSTATUSEX;
pub type LPMEMORYSTATUSEX = *mut _MEMORYSTATUSEX;
unsafe extern "C" {
    pub fn GlobalMemoryStatusEx(lpBuffer: LPMEMORYSTATUSEX) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO);
}
unsafe extern "C" {
    pub fn GetSystemTime(lpSystemTime: LPSYSTEMTIME);
}
unsafe extern "C" {
    pub fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);
}
unsafe extern "C" {
    pub fn GetLocalTime(lpSystemTime: LPSYSTEMTIME);
}
unsafe extern "C" {
    pub fn IsUserCetAvailableInEnvironment(UserCetEnvironment: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemLeapSecondInformation(Enabled: PBOOL, Flags: PDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVersion() -> DWORD;
}
unsafe extern "C" {
    pub fn SetLocalTime(lpSystemTime: *const SYSTEMTIME) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTickCount() -> DWORD;
}
unsafe extern "C" {
    pub fn GetTickCount64() -> ULONGLONG;
}
unsafe extern "C" {
    pub fn GetSystemTimeAdjustment(
        lpTimeAdjustment: PDWORD,
        lpTimeIncrement: PDWORD,
        lpTimeAdjustmentDisabled: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemTimeAdjustmentPrecise(
        lpTimeAdjustment: PDWORD64,
        lpTimeIncrement: PDWORD64,
        lpTimeAdjustmentDisabled: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemDirectoryA(lpBuffer: LPSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetWindowsDirectoryA(lpBuffer: LPSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetWindowsDirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemWindowsDirectoryA(lpBuffer: LPSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemWindowsDirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;
}
pub const _COMPUTER_NAME_FORMAT_ComputerNameNetBIOS: _COMPUTER_NAME_FORMAT = 0;
pub const _COMPUTER_NAME_FORMAT_ComputerNameDnsHostname: _COMPUTER_NAME_FORMAT = 1;
pub const _COMPUTER_NAME_FORMAT_ComputerNameDnsDomain: _COMPUTER_NAME_FORMAT = 2;
pub const _COMPUTER_NAME_FORMAT_ComputerNameDnsFullyQualified: _COMPUTER_NAME_FORMAT = 3;
pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalNetBIOS: _COMPUTER_NAME_FORMAT = 4;
pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalDnsHostname: _COMPUTER_NAME_FORMAT = 5;
pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalDnsDomain: _COMPUTER_NAME_FORMAT = 6;
pub const _COMPUTER_NAME_FORMAT_ComputerNamePhysicalDnsFullyQualified: _COMPUTER_NAME_FORMAT = 7;
pub const _COMPUTER_NAME_FORMAT_ComputerNameMax: _COMPUTER_NAME_FORMAT = 8;
pub type _COMPUTER_NAME_FORMAT = ::std::os::raw::c_int;
pub use self::_COMPUTER_NAME_FORMAT as COMPUTER_NAME_FORMAT;
unsafe extern "C" {
    pub fn GetComputerNameExA(
        NameType: COMPUTER_NAME_FORMAT,
        lpBuffer: LPSTR,
        nSize: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetComputerNameExW(
        NameType: COMPUTER_NAME_FORMAT,
        lpBuffer: LPWSTR,
        nSize: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSystemTime(lpSystemTime: *const SYSTEMTIME) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVersionExA(lpVersionInformation: LPOSVERSIONINFOA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVersionExW(lpVersionInformation: LPOSVERSIONINFOW) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLogicalProcessorInformation(
        Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,
        ReturnedLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLogicalProcessorInformationEx(
        RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP,
        Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,
        ReturnedLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNativeSystemInfo(lpSystemInfo: LPSYSTEM_INFO);
}
unsafe extern "C" {
    pub fn GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: LPFILETIME);
}
unsafe extern "C" {
    pub fn GetProductInfo(
        dwOSMajorVersion: DWORD,
        dwOSMinorVersion: DWORD,
        dwSpMajorVersion: DWORD,
        dwSpMinorVersion: DWORD,
        pdwReturnedProductType: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetOsSafeBootMode(Flags: PDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemFirmwareTables(
        FirmwareTableProviderSignature: DWORD,
        pFirmwareTableEnumBuffer: PVOID,
        BufferSize: DWORD,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemFirmwareTable(
        FirmwareTableProviderSignature: DWORD,
        FirmwareTableID: DWORD,
        pFirmwareTableBuffer: PVOID,
        BufferSize: DWORD,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn DnsHostnameToComputerNameExW(
        Hostname: LPCWSTR,
        ComputerName: LPWSTR,
        nSize: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPhysicallyInstalledSystemMemory(TotalMemoryInKilobytes: PULONGLONG) -> BOOL;
}
unsafe extern "C" {
    pub fn SetComputerNameEx2W(
        NameType: COMPUTER_NAME_FORMAT,
        Flags: DWORD,
        lpBuffer: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSystemTimeAdjustment(dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSystemTimeAdjustmentPrecise(
        dwTimeAdjustment: DWORD64,
        bTimeAdjustmentDisabled: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InstallELAMCertificateInfo(ELAMFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessorSystemCycleTime(
        Group: USHORT,
        Buffer: PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,
        ReturnedLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetOsManufacturingMode(pbEnabled: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetIntegratedDisplaySize(sizeInInches: *mut f64) -> HRESULT;
}
unsafe extern "C" {
    pub fn SetComputerNameA(lpComputerName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetComputerNameW(lpComputerName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCSTR) -> BOOL;
}
pub const DEVELOPER_DRIVE_ENABLEMENT_STATE_DeveloperDriveEnablementStateError:
    DEVELOPER_DRIVE_ENABLEMENT_STATE = 0;
pub const DEVELOPER_DRIVE_ENABLEMENT_STATE_DeveloperDriveEnabled: DEVELOPER_DRIVE_ENABLEMENT_STATE =
    1;
pub const DEVELOPER_DRIVE_ENABLEMENT_STATE_DeveloperDriveDisabledBySystemPolicy:
    DEVELOPER_DRIVE_ENABLEMENT_STATE = 2;
pub const DEVELOPER_DRIVE_ENABLEMENT_STATE_DeveloperDriveDisabledByGroupPolicy:
    DEVELOPER_DRIVE_ENABLEMENT_STATE = 3;
pub type DEVELOPER_DRIVE_ENABLEMENT_STATE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn GetDeveloperDriveEnablementState() -> DEVELOPER_DRIVE_ENABLEMENT_STATE;
}
unsafe extern "C" {
    pub fn VirtualAlloc(
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        flAllocationType: DWORD,
        flProtect: DWORD,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn VirtualProtect(
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        flNewProtect: DWORD,
        lpflOldProtect: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualFree(lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualQuery(
        lpAddress: LPCVOID,
        lpBuffer: PMEMORY_BASIC_INFORMATION,
        dwLength: SIZE_T,
    ) -> SIZE_T;
}
unsafe extern "C" {
    pub fn VirtualAllocEx(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        flAllocationType: DWORD,
        flProtect: DWORD,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn VirtualProtectEx(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        flNewProtect: DWORD,
        lpflOldProtect: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualQueryEx(
        hProcess: HANDLE,
        lpAddress: LPCVOID,
        lpBuffer: PMEMORY_BASIC_INFORMATION,
        dwLength: SIZE_T,
    ) -> SIZE_T;
}
unsafe extern "C" {
    pub fn ReadProcessMemory(
        hProcess: HANDLE,
        lpBaseAddress: LPCVOID,
        lpBuffer: LPVOID,
        nSize: SIZE_T,
        lpNumberOfBytesRead: *mut SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteProcessMemory(
        hProcess: HANDLE,
        lpBaseAddress: LPVOID,
        lpBuffer: LPCVOID,
        nSize: SIZE_T,
        lpNumberOfBytesWritten: *mut SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateFileMappingW(
        hFile: HANDLE,
        lpFileMappingAttributes: LPSECURITY_ATTRIBUTES,
        flProtect: DWORD,
        dwMaximumSizeHigh: DWORD,
        dwMaximumSizeLow: DWORD,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenFileMappingW(
        dwDesiredAccess: DWORD,
        bInheritHandle: BOOL,
        lpName: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn MapViewOfFile(
        hFileMappingObject: HANDLE,
        dwDesiredAccess: DWORD,
        dwFileOffsetHigh: DWORD,
        dwFileOffsetLow: DWORD,
        dwNumberOfBytesToMap: SIZE_T,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn MapViewOfFileEx(
        hFileMappingObject: HANDLE,
        dwDesiredAccess: DWORD,
        dwFileOffsetHigh: DWORD,
        dwFileOffsetLow: DWORD,
        dwNumberOfBytesToMap: SIZE_T,
        lpBaseAddress: LPVOID,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn VirtualFreeEx(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        dwFreeType: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FlushViewOfFile(lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: SIZE_T) -> BOOL;
}
unsafe extern "C" {
    pub fn UnmapViewOfFile(lpBaseAddress: LPCVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLargePageMinimum() -> SIZE_T;
}
unsafe extern "C" {
    pub fn GetProcessWorkingSetSize(
        hProcess: HANDLE,
        lpMinimumWorkingSetSize: PSIZE_T,
        lpMaximumWorkingSetSize: PSIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessWorkingSetSizeEx(
        hProcess: HANDLE,
        lpMinimumWorkingSetSize: PSIZE_T,
        lpMaximumWorkingSetSize: PSIZE_T,
        Flags: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessWorkingSetSize(
        hProcess: HANDLE,
        dwMinimumWorkingSetSize: SIZE_T,
        dwMaximumWorkingSetSize: SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessWorkingSetSizeEx(
        hProcess: HANDLE,
        dwMinimumWorkingSetSize: SIZE_T,
        dwMaximumWorkingSetSize: SIZE_T,
        Flags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWriteWatch(
        dwFlags: DWORD,
        lpBaseAddress: PVOID,
        dwRegionSize: SIZE_T,
        lpAddresses: *mut PVOID,
        lpdwCount: *mut ULONG_PTR,
        lpdwGranularity: LPDWORD,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn ResetWriteWatch(lpBaseAddress: LPVOID, dwRegionSize: SIZE_T) -> UINT;
}
pub const _MEMORY_RESOURCE_NOTIFICATION_TYPE_LowMemoryResourceNotification:
    _MEMORY_RESOURCE_NOTIFICATION_TYPE = 0;
pub const _MEMORY_RESOURCE_NOTIFICATION_TYPE_HighMemoryResourceNotification:
    _MEMORY_RESOURCE_NOTIFICATION_TYPE = 1;
pub type _MEMORY_RESOURCE_NOTIFICATION_TYPE = ::std::os::raw::c_int;
pub use self::_MEMORY_RESOURCE_NOTIFICATION_TYPE as MEMORY_RESOURCE_NOTIFICATION_TYPE;
unsafe extern "C" {
    pub fn CreateMemoryResourceNotification(
        NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn QueryMemoryResourceNotification(
        ResourceNotificationHandle: HANDLE,
        ResourceState: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemFileCacheSize(
        lpMinimumFileCacheSize: PSIZE_T,
        lpMaximumFileCacheSize: PSIZE_T,
        lpFlags: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSystemFileCacheSize(
        MinimumFileCacheSize: SIZE_T,
        MaximumFileCacheSize: SIZE_T,
        Flags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateFileMappingNumaW(
        hFile: HANDLE,
        lpFileMappingAttributes: LPSECURITY_ATTRIBUTES,
        flProtect: DWORD,
        dwMaximumSizeHigh: DWORD,
        dwMaximumSizeLow: DWORD,
        lpName: LPCWSTR,
        nndPreferred: DWORD,
    ) -> HANDLE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_MEMORY_RANGE_ENTRY {
    pub VirtualAddress: PVOID,
    pub NumberOfBytes: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_MEMORY_RANGE_ENTRY"]
        [::std::mem::size_of::<_WIN32_MEMORY_RANGE_ENTRY>() - 16usize];
    ["Alignment of _WIN32_MEMORY_RANGE_ENTRY"]
        [::std::mem::align_of::<_WIN32_MEMORY_RANGE_ENTRY>() - 8usize];
    ["Offset of field: _WIN32_MEMORY_RANGE_ENTRY::VirtualAddress"]
        [::std::mem::offset_of!(_WIN32_MEMORY_RANGE_ENTRY, VirtualAddress) - 0usize];
    ["Offset of field: _WIN32_MEMORY_RANGE_ENTRY::NumberOfBytes"]
        [::std::mem::offset_of!(_WIN32_MEMORY_RANGE_ENTRY, NumberOfBytes) - 8usize];
};
pub type WIN32_MEMORY_RANGE_ENTRY = _WIN32_MEMORY_RANGE_ENTRY;
pub type PWIN32_MEMORY_RANGE_ENTRY = *mut _WIN32_MEMORY_RANGE_ENTRY;
unsafe extern "C" {
    pub fn PrefetchVirtualMemory(
        hProcess: HANDLE,
        NumberOfEntries: ULONG_PTR,
        VirtualAddresses: PWIN32_MEMORY_RANGE_ENTRY,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateFileMappingFromApp(
        hFile: HANDLE,
        SecurityAttributes: PSECURITY_ATTRIBUTES,
        PageProtection: ULONG,
        MaximumSize: ULONG64,
        Name: PCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn MapViewOfFileFromApp(
        hFileMappingObject: HANDLE,
        DesiredAccess: ULONG,
        FileOffset: ULONG64,
        NumberOfBytesToMap: SIZE_T,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn UnmapViewOfFileEx(BaseAddress: PVOID, UnmapFlags: ULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn AllocateUserPhysicalPages(
        hProcess: HANDLE,
        NumberOfPages: PULONG_PTR,
        PageArray: PULONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FreeUserPhysicalPages(
        hProcess: HANDLE,
        NumberOfPages: PULONG_PTR,
        PageArray: PULONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MapUserPhysicalPages(
        VirtualAddress: PVOID,
        NumberOfPages: ULONG_PTR,
        PageArray: PULONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AllocateUserPhysicalPagesNuma(
        hProcess: HANDLE,
        NumberOfPages: PULONG_PTR,
        PageArray: PULONG_PTR,
        nndPreferred: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualAllocExNuma(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        flAllocationType: DWORD,
        flProtect: DWORD,
        nndPreferred: DWORD,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn GetMemoryErrorHandlingCapabilities(Capabilities: PULONG) -> BOOL;
}
pub type PBAD_MEMORY_CALLBACK_ROUTINE = ::std::option::Option<unsafe extern "C" fn()>;
unsafe extern "C" {
    pub fn RegisterBadMemoryNotification(Callback: PBAD_MEMORY_CALLBACK_ROUTINE) -> PVOID;
}
unsafe extern "C" {
    pub fn UnregisterBadMemoryNotification(RegistrationHandle: PVOID) -> BOOL;
}
pub const OFFER_PRIORITY_VmOfferPriorityVeryLow: OFFER_PRIORITY = 1;
pub const OFFER_PRIORITY_VmOfferPriorityLow: OFFER_PRIORITY = 2;
pub const OFFER_PRIORITY_VmOfferPriorityBelowNormal: OFFER_PRIORITY = 3;
pub const OFFER_PRIORITY_VmOfferPriorityNormal: OFFER_PRIORITY = 4;
pub type OFFER_PRIORITY = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn OfferVirtualMemory(
        VirtualAddress: PVOID,
        Size: SIZE_T,
        Priority: OFFER_PRIORITY,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ReclaimVirtualMemory(
        VirtualAddress: *const ::std::os::raw::c_void,
        Size: SIZE_T,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn DiscardVirtualMemory(VirtualAddress: PVOID, Size: SIZE_T) -> DWORD;
}
unsafe extern "C" {
    pub fn SetProcessValidCallTargets(
        hProcess: HANDLE,
        VirtualAddress: PVOID,
        RegionSize: SIZE_T,
        NumberOfOffsets: ULONG,
        OffsetInformation: PCFG_CALL_TARGET_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessValidCallTargetsForMappedView(
        Process: HANDLE,
        VirtualAddress: PVOID,
        RegionSize: SIZE_T,
        NumberOfOffsets: ULONG,
        OffsetInformation: PCFG_CALL_TARGET_INFO,
        Section: HANDLE,
        ExpectedFileOffset: ULONG64,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualAllocFromApp(
        BaseAddress: PVOID,
        Size: SIZE_T,
        AllocationType: ULONG,
        Protection: ULONG,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn VirtualProtectFromApp(
        Address: PVOID,
        Size: SIZE_T,
        NewProtection: ULONG,
        OldProtection: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenFileMappingFromApp(
        DesiredAccess: ULONG,
        InheritHandle: BOOL,
        Name: PCWSTR,
    ) -> HANDLE;
}
pub const WIN32_MEMORY_INFORMATION_CLASS_MemoryRegionInfo: WIN32_MEMORY_INFORMATION_CLASS = 0;
pub type WIN32_MEMORY_INFORMATION_CLASS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WIN32_MEMORY_REGION_INFORMATION {
    pub AllocationBase: PVOID,
    pub AllocationProtect: ULONG,
    pub __bindgen_anon_1: WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1,
    pub RegionSize: SIZE_T,
    pub CommitSize: SIZE_T,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1 {
    pub Flags: ULONG,
    pub __bindgen_anon_1: WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Private(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Private(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Private_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Private_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MappedDataFile(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MappedDataFile(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MappedDataFile_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MappedDataFile_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MappedImage(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MappedImage(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MappedImage_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MappedImage_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MappedPageFile(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MappedPageFile(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MappedPageFile_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MappedPageFile_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn MappedPhysical(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_MappedPhysical(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MappedPhysical_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_MappedPhysical_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn DirectMapped(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_DirectMapped(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn DirectMapped_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_DirectMapped_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                26u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                26u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Private: ULONG,
        MappedDataFile: ULONG,
        MappedImage: ULONG,
        MappedPageFile: ULONG,
        MappedPhysical: ULONG,
        DirectMapped: ULONG,
        Reserved: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Private: u32 = unsafe { ::std::mem::transmute(Private) };
            Private as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let MappedDataFile: u32 = unsafe { ::std::mem::transmute(MappedDataFile) };
            MappedDataFile as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let MappedImage: u32 = unsafe { ::std::mem::transmute(MappedImage) };
            MappedImage as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let MappedPageFile: u32 = unsafe { ::std::mem::transmute(MappedPageFile) };
            MappedPageFile as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let MappedPhysical: u32 = unsafe { ::std::mem::transmute(MappedPhysical) };
            MappedPhysical as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let DirectMapped: u32 = unsafe { ::std::mem::transmute(DirectMapped) };
            DirectMapped as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let Reserved: u32 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Alignment of WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1, Flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WIN32_MEMORY_REGION_INFORMATION"]
        [::std::mem::size_of::<WIN32_MEMORY_REGION_INFORMATION>() - 32usize];
    ["Alignment of WIN32_MEMORY_REGION_INFORMATION"]
        [::std::mem::align_of::<WIN32_MEMORY_REGION_INFORMATION>() - 8usize];
    ["Offset of field: WIN32_MEMORY_REGION_INFORMATION::AllocationBase"]
        [::std::mem::offset_of!(WIN32_MEMORY_REGION_INFORMATION, AllocationBase) - 0usize];
    ["Offset of field: WIN32_MEMORY_REGION_INFORMATION::AllocationProtect"]
        [::std::mem::offset_of!(WIN32_MEMORY_REGION_INFORMATION, AllocationProtect) - 8usize];
    ["Offset of field: WIN32_MEMORY_REGION_INFORMATION::RegionSize"]
        [::std::mem::offset_of!(WIN32_MEMORY_REGION_INFORMATION, RegionSize) - 16usize];
    ["Offset of field: WIN32_MEMORY_REGION_INFORMATION::CommitSize"]
        [::std::mem::offset_of!(WIN32_MEMORY_REGION_INFORMATION, CommitSize) - 24usize];
};
unsafe extern "C" {
    pub fn QueryVirtualMemoryInformation(
        Process: HANDLE,
        VirtualAddress: *const ::std::os::raw::c_void,
        MemoryInformationClass: WIN32_MEMORY_INFORMATION_CLASS,
        MemoryInformation: PVOID,
        MemoryInformationSize: SIZE_T,
        ReturnSize: PSIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MapViewOfFileNuma2(
        FileMappingHandle: HANDLE,
        ProcessHandle: HANDLE,
        Offset: ULONG64,
        BaseAddress: PVOID,
        ViewSize: SIZE_T,
        AllocationType: ULONG,
        PageProtection: ULONG,
        PreferredNode: ULONG,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn UnmapViewOfFile2(Process: HANDLE, BaseAddress: PVOID, UnmapFlags: ULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualUnlockEx(Process: HANDLE, Address: LPVOID, Size: SIZE_T) -> BOOL;
}
unsafe extern "C" {
    pub fn VirtualAlloc2(
        Process: HANDLE,
        BaseAddress: PVOID,
        Size: SIZE_T,
        AllocationType: ULONG,
        PageProtection: ULONG,
        ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
        ParameterCount: ULONG,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn MapViewOfFile3(
        FileMapping: HANDLE,
        Process: HANDLE,
        BaseAddress: PVOID,
        Offset: ULONG64,
        ViewSize: SIZE_T,
        AllocationType: ULONG,
        PageProtection: ULONG,
        ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
        ParameterCount: ULONG,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn VirtualAlloc2FromApp(
        Process: HANDLE,
        BaseAddress: PVOID,
        Size: SIZE_T,
        AllocationType: ULONG,
        PageProtection: ULONG,
        ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
        ParameterCount: ULONG,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn MapViewOfFile3FromApp(
        FileMapping: HANDLE,
        Process: HANDLE,
        BaseAddress: PVOID,
        Offset: ULONG64,
        ViewSize: SIZE_T,
        AllocationType: ULONG,
        PageProtection: ULONG,
        ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
        ParameterCount: ULONG,
    ) -> PVOID;
}
unsafe extern "C" {
    pub fn CreateFileMapping2(
        File: HANDLE,
        SecurityAttributes: *mut SECURITY_ATTRIBUTES,
        DesiredAccess: ULONG,
        PageProtection: ULONG,
        AllocationAttributes: ULONG,
        MaximumSize: ULONG64,
        Name: PCWSTR,
        ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
        ParameterCount: ULONG,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn AllocateUserPhysicalPages2(
        ObjectHandle: HANDLE,
        NumberOfPages: PULONG_PTR,
        PageArray: PULONG_PTR,
        ExtendedParameters: PMEM_EXTENDED_PARAMETER,
        ExtendedParameterCount: ULONG,
    ) -> BOOL;
}
pub const WIN32_MEMORY_PARTITION_INFORMATION_CLASS_MemoryPartitionInfo:
    WIN32_MEMORY_PARTITION_INFORMATION_CLASS = 0;
pub const WIN32_MEMORY_PARTITION_INFORMATION_CLASS_MemoryPartitionDedicatedMemoryInfo:
    WIN32_MEMORY_PARTITION_INFORMATION_CLASS = 1;
pub type WIN32_MEMORY_PARTITION_INFORMATION_CLASS = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WIN32_MEMORY_PARTITION_INFORMATION {
    pub Flags: ULONG,
    pub NumaNode: ULONG,
    pub Channel: ULONG,
    pub NumberOfNumaNodes: ULONG,
    pub ResidentAvailablePages: ULONG64,
    pub CommittedPages: ULONG64,
    pub CommitLimit: ULONG64,
    pub PeakCommitment: ULONG64,
    pub TotalNumberOfPages: ULONG64,
    pub AvailablePages: ULONG64,
    pub ZeroPages: ULONG64,
    pub FreePages: ULONG64,
    pub StandbyPages: ULONG64,
    pub Reserved: [ULONG64; 16usize],
    pub MaximumCommitLimit: ULONG64,
    pub Reserved2: ULONG64,
    pub PartitionId: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WIN32_MEMORY_PARTITION_INFORMATION"]
        [::std::mem::size_of::<WIN32_MEMORY_PARTITION_INFORMATION>() - 240usize];
    ["Alignment of WIN32_MEMORY_PARTITION_INFORMATION"]
        [::std::mem::align_of::<WIN32_MEMORY_PARTITION_INFORMATION>() - 8usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::Flags"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, Flags) - 0usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::NumaNode"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, NumaNode) - 4usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::Channel"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, Channel) - 8usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::NumberOfNumaNodes"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, NumberOfNumaNodes) - 12usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::ResidentAvailablePages"][::std::mem::offset_of!(
        WIN32_MEMORY_PARTITION_INFORMATION,
        ResidentAvailablePages
    ) - 16usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::CommittedPages"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, CommittedPages) - 24usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::CommitLimit"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, CommitLimit) - 32usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::PeakCommitment"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, PeakCommitment) - 40usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::TotalNumberOfPages"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, TotalNumberOfPages) - 48usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::AvailablePages"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, AvailablePages) - 56usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::ZeroPages"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, ZeroPages) - 64usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::FreePages"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, FreePages) - 72usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::StandbyPages"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, StandbyPages) - 80usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::Reserved"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, Reserved) - 88usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::MaximumCommitLimit"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, MaximumCommitLimit) - 216usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::Reserved2"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, Reserved2) - 224usize];
    ["Offset of field: WIN32_MEMORY_PARTITION_INFORMATION::PartitionId"]
        [::std::mem::offset_of!(WIN32_MEMORY_PARTITION_INFORMATION, PartitionId) - 232usize];
};
unsafe extern "C" {
    pub fn OpenDedicatedMemoryPartition(
        Partition: HANDLE,
        DedicatedMemoryTypeId: ULONG64,
        DesiredAccess: ACCESS_MASK,
        InheritHandle: BOOL,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn QueryPartitionInformation(
        Partition: HANDLE,
        PartitionInformationClass: WIN32_MEMORY_PARTITION_INFORMATION_CLASS,
        PartitionInformation: PVOID,
        PartitionInformationLength: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMemoryNumaClosestInitiatorNode(
        TargetNodeNumber: ULONG,
        InitiatorNodeNumber: *mut ULONG,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY {
    pub InitiatorNodeNumber: ULONG,
    pub TargetNodeNumber: ULONG,
    pub DataType: UCHAR,
    pub Flags: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1,
    pub MinTransferSizeInBytes: ULONGLONG,
    pub EntryValue: ULONGLONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1"]
        [::std::mem::size_of::<_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1>() - 1usize];
    ["Alignment of _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1"]
        [::std::mem::align_of::<_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1>() - 1usize];
};
impl _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY__bindgen_ty_1 {
    #[inline]
    pub fn MinTransferSizeToAchieveValues(&self) -> UCHAR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_MinTransferSizeToAchieveValues(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn MinTransferSizeToAchieveValues_raw(this: *const Self) -> UCHAR {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_MinTransferSizeToAchieveValues_raw(this: *mut Self, val: UCHAR) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn NonSequentialTransfers(&self) -> UCHAR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_NonSequentialTransfers(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn NonSequentialTransfers_raw(this: *const Self) -> UCHAR {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_NonSequentialTransfers_raw(this: *mut Self, val: UCHAR) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved(&self) -> UCHAR {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 6u8) as u8) }
    }
    #[inline]
    pub fn set_Reserved(&mut self, val: UCHAR) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved_raw(this: *const Self) -> UCHAR {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                6u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved_raw(this: *mut Self, val: UCHAR) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MinTransferSizeToAchieveValues: UCHAR,
        NonSequentialTransfers: UCHAR,
        Reserved: UCHAR,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let MinTransferSizeToAchieveValues: u8 =
                unsafe { ::std::mem::transmute(MinTransferSizeToAchieveValues) };
            MinTransferSizeToAchieveValues as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let NonSequentialTransfers: u8 =
                unsafe { ::std::mem::transmute(NonSequentialTransfers) };
            NonSequentialTransfers as u64
        });
        __bindgen_bitfield_unit.set(2usize, 6u8, {
            let Reserved: u8 = unsafe { ::std::mem::transmute(Reserved) };
            Reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY"]
        [::std::mem::size_of::<_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY>() - 32usize];
    ["Alignment of _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY"]
        [::std::mem::align_of::<_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY>() - 8usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY::InitiatorNodeNumber"][::std::mem::offset_of!(
        _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY,
        InitiatorNodeNumber
    ) - 0usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY::TargetNodeNumber"]
        [::std::mem::offset_of!(_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY, TargetNodeNumber) - 4usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY::DataType"]
        [::std::mem::offset_of!(_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY, DataType) - 8usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY::Flags"]
        [::std::mem::offset_of!(_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY, Flags) - 9usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY::MinTransferSizeInBytes"][::std::mem::offset_of!(
        _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY,
        MinTransferSizeInBytes
    ) - 16usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY::EntryValue"]
        [::std::mem::offset_of!(_WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY, EntryValue) - 24usize];
};
pub type WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY = _WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT {
    pub EntryCount: ULONG,
    pub PerformanceEntries: [WIN32_MEMORY_NUMA_PERFORMANCE_ENTRY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT"]
        [::std::mem::size_of::<_WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT>() - 40usize];
    ["Alignment of _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT"]
        [::std::mem::align_of::<_WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT>() - 8usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT::EntryCount"][::std::mem::offset_of!(
        _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT,
        EntryCount
    ) - 0usize];
    ["Offset of field: _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT::PerformanceEntries"][::std::mem::offset_of!(
        _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT,
        PerformanceEntries
    )
        - 8usize];
};
pub type WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT =
    _WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT;
unsafe extern "C" {
    pub fn GetMemoryNumaPerformanceInformation(
        NodeNumber: ULONG,
        DataType: UCHAR,
        PerfInfo: *mut *mut WIN32_MEMORY_NUMA_PERFORMANCE_INFORMATION_OUTPUT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsEnclaveTypeSupported(flEnclaveType: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateEnclave(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        dwSize: SIZE_T,
        dwInitialCommitment: SIZE_T,
        flEnclaveType: DWORD,
        lpEnclaveInformation: LPCVOID,
        dwInfoLength: DWORD,
        lpEnclaveError: LPDWORD,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn LoadEnclaveData(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        lpBuffer: LPCVOID,
        nSize: SIZE_T,
        flProtect: DWORD,
        lpPageInformation: LPCVOID,
        dwInfoLength: DWORD,
        lpNumberOfBytesWritten: PSIZE_T,
        lpEnclaveError: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeEnclave(
        hProcess: HANDLE,
        lpAddress: LPVOID,
        lpEnclaveInformation: LPCVOID,
        dwInfoLength: DWORD,
        lpEnclaveError: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LoadEnclaveImageA(lpEnclaveAddress: LPVOID, lpImageName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn LoadEnclaveImageW(lpEnclaveAddress: LPVOID, lpImageName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn CallEnclave(
        lpRoutine: LPENCLAVE_ROUTINE,
        lpParameter: LPVOID,
        fWaitForThread: BOOL,
        lpReturnValue: *mut LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TerminateEnclave(lpAddress: LPVOID, fWait: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteEnclave(lpAddress: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn QueueUserWorkItem(
        Function: LPTHREAD_START_ROUTINE,
        Context: PVOID,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterWaitEx(WaitHandle: HANDLE, CompletionEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateTimerQueue() -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateTimerQueueTimer(
        phNewTimer: PHANDLE,
        TimerQueue: HANDLE,
        Callback: WAITORTIMERCALLBACK,
        Parameter: PVOID,
        DueTime: DWORD,
        Period: DWORD,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ChangeTimerQueueTimer(
        TimerQueue: HANDLE,
        Timer: HANDLE,
        DueTime: ULONG,
        Period: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteTimerQueueTimer(
        TimerQueue: HANDLE,
        Timer: HANDLE,
        CompletionEvent: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteTimerQueue(TimerQueue: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteTimerQueueEx(TimerQueue: HANDLE, CompletionEvent: HANDLE) -> BOOL;
}
pub type PTP_WIN32_IO_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        Instance: PTP_CALLBACK_INSTANCE,
        Context: PVOID,
        Overlapped: PVOID,
        IoResult: ULONG,
        NumberOfBytesTransferred: ULONG_PTR,
        Io: PTP_IO,
    ),
>;
unsafe extern "C" {
    pub fn CreateThreadpool(reserved: PVOID) -> PTP_POOL;
}
unsafe extern "C" {
    pub fn SetThreadpoolThreadMaximum(ptpp: PTP_POOL, cthrdMost: DWORD);
}
unsafe extern "C" {
    pub fn SetThreadpoolThreadMinimum(ptpp: PTP_POOL, cthrdMic: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION)
    -> BOOL;
}
unsafe extern "C" {
    pub fn QueryThreadpoolStackInformation(
        ptpp: PTP_POOL,
        ptpsi: PTP_POOL_STACK_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseThreadpool(ptpp: PTP_POOL);
}
unsafe extern "C" {
    pub fn CreateThreadpoolCleanupGroup() -> PTP_CLEANUP_GROUP;
}
unsafe extern "C" {
    pub fn CloseThreadpoolCleanupGroupMembers(
        ptpcg: PTP_CLEANUP_GROUP,
        fCancelPendingCallbacks: BOOL,
        pvCleanupContext: PVOID,
    );
}
unsafe extern "C" {
    pub fn CloseThreadpoolCleanupGroup(ptpcg: PTP_CLEANUP_GROUP);
}
unsafe extern "C" {
    pub fn SetEventWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, evt: HANDLE);
}
unsafe extern "C" {
    pub fn ReleaseSemaphoreWhenCallbackReturns(
        pci: PTP_CALLBACK_INSTANCE,
        sem: HANDLE,
        crel: DWORD,
    );
}
unsafe extern "C" {
    pub fn ReleaseMutexWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mut_: HANDLE);
}
unsafe extern "C" {
    pub fn LeaveCriticalSectionWhenCallbackReturns(
        pci: PTP_CALLBACK_INSTANCE,
        pcs: PCRITICAL_SECTION,
    );
}
unsafe extern "C" {
    pub fn FreeLibraryWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mod_: HMODULE);
}
unsafe extern "C" {
    pub fn CallbackMayRunLong(pci: PTP_CALLBACK_INSTANCE) -> BOOL;
}
unsafe extern "C" {
    pub fn DisassociateCurrentThreadFromCallback(pci: PTP_CALLBACK_INSTANCE);
}
unsafe extern "C" {
    pub fn TrySubmitThreadpoolCallback(
        pfns: PTP_SIMPLE_CALLBACK,
        pv: PVOID,
        pcbe: PTP_CALLBACK_ENVIRON,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateThreadpoolWork(
        pfnwk: PTP_WORK_CALLBACK,
        pv: PVOID,
        pcbe: PTP_CALLBACK_ENVIRON,
    ) -> PTP_WORK;
}
unsafe extern "C" {
    pub fn SubmitThreadpoolWork(pwk: PTP_WORK);
}
unsafe extern "C" {
    pub fn WaitForThreadpoolWorkCallbacks(pwk: PTP_WORK, fCancelPendingCallbacks: BOOL);
}
unsafe extern "C" {
    pub fn CloseThreadpoolWork(pwk: PTP_WORK);
}
unsafe extern "C" {
    pub fn CreateThreadpoolTimer(
        pfnti: PTP_TIMER_CALLBACK,
        pv: PVOID,
        pcbe: PTP_CALLBACK_ENVIRON,
    ) -> PTP_TIMER;
}
unsafe extern "C" {
    pub fn SetThreadpoolTimer(
        pti: PTP_TIMER,
        pftDueTime: PFILETIME,
        msPeriod: DWORD,
        msWindowLength: DWORD,
    );
}
unsafe extern "C" {
    pub fn IsThreadpoolTimerSet(pti: PTP_TIMER) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitForThreadpoolTimerCallbacks(pti: PTP_TIMER, fCancelPendingCallbacks: BOOL);
}
unsafe extern "C" {
    pub fn CloseThreadpoolTimer(pti: PTP_TIMER);
}
unsafe extern "C" {
    pub fn CreateThreadpoolWait(
        pfnwa: PTP_WAIT_CALLBACK,
        pv: PVOID,
        pcbe: PTP_CALLBACK_ENVIRON,
    ) -> PTP_WAIT;
}
unsafe extern "C" {
    pub fn SetThreadpoolWait(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME);
}
unsafe extern "C" {
    pub fn WaitForThreadpoolWaitCallbacks(pwa: PTP_WAIT, fCancelPendingCallbacks: BOOL);
}
unsafe extern "C" {
    pub fn CloseThreadpoolWait(pwa: PTP_WAIT);
}
unsafe extern "C" {
    pub fn CreateThreadpoolIo(
        fl: HANDLE,
        pfnio: PTP_WIN32_IO_CALLBACK,
        pv: PVOID,
        pcbe: PTP_CALLBACK_ENVIRON,
    ) -> PTP_IO;
}
unsafe extern "C" {
    pub fn StartThreadpoolIo(pio: PTP_IO);
}
unsafe extern "C" {
    pub fn CancelThreadpoolIo(pio: PTP_IO);
}
unsafe extern "C" {
    pub fn WaitForThreadpoolIoCallbacks(pio: PTP_IO, fCancelPendingCallbacks: BOOL);
}
unsafe extern "C" {
    pub fn CloseThreadpoolIo(pio: PTP_IO);
}
unsafe extern "C" {
    pub fn SetThreadpoolTimerEx(
        pti: PTP_TIMER,
        pftDueTime: PFILETIME,
        msPeriod: DWORD,
        msWindowLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadpoolWaitEx(
        pwa: PTP_WAIT,
        h: HANDLE,
        pftTimeout: PFILETIME,
        Reserved: PVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsProcessInJob(ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
    pub MaxIops: LONG64,
    pub MaxBandwidth: LONG64,
    pub ReservationIops: LONG64,
    pub VolumeName: PCWSTR,
    pub BaseIoSize: ULONG,
    pub ControlFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JOBOBJECT_IO_RATE_CONTROL_INFORMATION"]
        [::std::mem::size_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>() - 40usize];
    ["Alignment of JOBOBJECT_IO_RATE_CONTROL_INFORMATION"]
        [::std::mem::align_of::<JOBOBJECT_IO_RATE_CONTROL_INFORMATION>() - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION::MaxIops"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION, MaxIops) - 0usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION::MaxBandwidth"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION, MaxBandwidth) - 8usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION::ReservationIops"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION, ReservationIops) - 16usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION::VolumeName"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION, VolumeName) - 24usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION::BaseIoSize"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION, BaseIoSize) - 32usize];
    ["Offset of field: JOBOBJECT_IO_RATE_CONTROL_INFORMATION::ControlFlags"]
        [::std::mem::offset_of!(JOBOBJECT_IO_RATE_CONTROL_INFORMATION, ControlFlags) - 36usize];
};
unsafe extern "C" {
    pub fn CreateJobObjectW(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn FreeMemoryJobObject(Buffer: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn OpenJobObjectW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn TerminateJobObject(hJob: HANDLE, uExitCode: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetInformationJobObject(
        hJob: HANDLE,
        JobObjectInformationClass: JOBOBJECTINFOCLASS,
        lpJobObjectInformation: LPVOID,
        cbJobObjectInformationLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetIoRateControlInformationJobObject(
        hJob: HANDLE,
        IoRateControlInfo: *mut JOBOBJECT_IO_RATE_CONTROL_INFORMATION,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn QueryInformationJobObject(
        hJob: HANDLE,
        JobObjectInformationClass: JOBOBJECTINFOCLASS,
        lpJobObjectInformation: LPVOID,
        cbJobObjectInformationLength: DWORD,
        lpReturnLength: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryIoRateControlInformationJobObject(
        hJob: HANDLE,
        VolumeName: PCWSTR,
        InfoBlocks: *mut *mut JOBOBJECT_IO_RATE_CONTROL_INFORMATION,
        InfoBlockCount: *mut ULONG,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: BOOLEAN) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn Wow64DisableWow64FsRedirection(OldValue: *mut PVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn Wow64RevertWow64FsRedirection(OlValue: PVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn IsWow64Process(hProcess: HANDLE, Wow64Process: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemWow64DirectoryA(lpBuffer: LPSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemWow64DirectoryW(lpBuffer: LPWSTR, uSize: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn Wow64SetThreadDefaultGuestMachine(Machine: USHORT) -> USHORT;
}
unsafe extern "C" {
    pub fn IsWow64Process2(
        hProcess: HANDLE,
        pProcessMachine: *mut USHORT,
        pNativeMachine: *mut USHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemWow64Directory2A(
        lpBuffer: LPSTR,
        uSize: UINT,
        ImageFileMachineType: WORD,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemWow64Directory2W(
        lpBuffer: LPWSTR,
        uSize: UINT,
        ImageFileMachineType: WORD,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn IsWow64GuestMachineSupported(
        WowGuestMachine: USHORT,
        MachineIsSupported: *mut BOOL,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn Wow64GetThreadContext(hThread: HANDLE, lpContext: PWOW64_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn Wow64SetThreadContext(hThread: HANDLE, lpContext: *const WOW64_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn Wow64SuspendThread(hThread: HANDLE) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMUILANG {
    pub NumOfEnumUILang: ULONG,
    pub SizeOfEnumUIBuffer: ULONG,
    pub pEnumUIBuffer: *mut LANGID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMUILANG"][::std::mem::size_of::<tagENUMUILANG>() - 16usize];
    ["Alignment of tagENUMUILANG"][::std::mem::align_of::<tagENUMUILANG>() - 8usize];
    ["Offset of field: tagENUMUILANG::NumOfEnumUILang"]
        [::std::mem::offset_of!(tagENUMUILANG, NumOfEnumUILang) - 0usize];
    ["Offset of field: tagENUMUILANG::SizeOfEnumUIBuffer"]
        [::std::mem::offset_of!(tagENUMUILANG, SizeOfEnumUIBuffer) - 4usize];
    ["Offset of field: tagENUMUILANG::pEnumUIBuffer"]
        [::std::mem::offset_of!(tagENUMUILANG, pEnumUIBuffer) - 8usize];
};
pub type ENUMUILANG = tagENUMUILANG;
pub type PENUMUILANG = *mut tagENUMUILANG;
pub type ENUMRESLANGPROCA = ::std::option::Option<
    unsafe extern "C" fn(
        hModule: HMODULE,
        lpType: LPCSTR,
        lpName: LPCSTR,
        wLanguage: WORD,
        lParam: LONG_PTR,
    ) -> BOOL,
>;
pub type ENUMRESLANGPROCW = ::std::option::Option<
    unsafe extern "C" fn(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpName: LPCWSTR,
        wLanguage: WORD,
        lParam: LONG_PTR,
    ) -> BOOL,
>;
pub type ENUMRESNAMEPROCA = ::std::option::Option<
    unsafe extern "C" fn(hModule: HMODULE, lpType: LPCSTR, lpName: LPSTR, lParam: LONG_PTR) -> BOOL,
>;
pub type ENUMRESNAMEPROCW = ::std::option::Option<
    unsafe extern "C" fn(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpName: LPWSTR,
        lParam: LONG_PTR,
    ) -> BOOL,
>;
pub type ENUMRESTYPEPROCA = ::std::option::Option<
    unsafe extern "C" fn(hModule: HMODULE, lpType: LPSTR, lParam: LONG_PTR) -> BOOL,
>;
pub type ENUMRESTYPEPROCW = ::std::option::Option<
    unsafe extern "C" fn(hModule: HMODULE, lpType: LPWSTR, lParam: LONG_PTR) -> BOOL,
>;
unsafe extern "C" {
    pub fn DisableThreadLibraryCalls(hLibModule: HMODULE) -> BOOL;
}
unsafe extern "C" {
    pub fn FindResourceExW(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpName: LPCWSTR,
        wLanguage: WORD,
    ) -> HRSRC;
}
unsafe extern "C" {
    pub fn FindStringOrdinal(
        dwFindStringOrdinalFlags: DWORD,
        lpStringSource: LPCWSTR,
        cchSource: ::std::os::raw::c_int,
        lpStringValue: LPCWSTR,
        cchValue: ::std::os::raw::c_int,
        bIgnoreCase: BOOL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FreeLibrary(hLibModule: HMODULE) -> BOOL;
}
unsafe extern "C" {
    pub fn FreeLibraryAndExitThread(hLibModule: HMODULE, dwExitCode: DWORD) -> !;
}
unsafe extern "C" {
    pub fn FreeResource(hResData: HGLOBAL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetModuleFileNameA(hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetModuleFileNameW(hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetModuleHandleA(lpModuleName: LPCSTR) -> HMODULE;
}
unsafe extern "C" {
    pub fn GetModuleHandleW(lpModuleName: LPCWSTR) -> HMODULE;
}
pub type PGET_MODULE_HANDLE_EXA = ::std::option::Option<
    unsafe extern "C" fn(dwFlags: DWORD, lpModuleName: LPCSTR, phModule: *mut HMODULE) -> BOOL,
>;
pub type PGET_MODULE_HANDLE_EXW = ::std::option::Option<
    unsafe extern "C" fn(dwFlags: DWORD, lpModuleName: LPCWSTR, phModule: *mut HMODULE) -> BOOL,
>;
unsafe extern "C" {
    pub fn GetModuleHandleExA(dwFlags: DWORD, lpModuleName: LPCSTR, phModule: *mut HMODULE)
    -> BOOL;
}
unsafe extern "C" {
    pub fn GetModuleHandleExW(
        dwFlags: DWORD,
        lpModuleName: LPCWSTR,
        phModule: *mut HMODULE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcAddress(hModule: HMODULE, lpProcName: LPCSTR) -> FARPROC;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REDIRECTION_FUNCTION_DESCRIPTOR {
    pub DllName: PCSTR,
    pub FunctionName: PCSTR,
    pub RedirectionTarget: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REDIRECTION_FUNCTION_DESCRIPTOR"]
        [::std::mem::size_of::<_REDIRECTION_FUNCTION_DESCRIPTOR>() - 24usize];
    ["Alignment of _REDIRECTION_FUNCTION_DESCRIPTOR"]
        [::std::mem::align_of::<_REDIRECTION_FUNCTION_DESCRIPTOR>() - 8usize];
    ["Offset of field: _REDIRECTION_FUNCTION_DESCRIPTOR::DllName"]
        [::std::mem::offset_of!(_REDIRECTION_FUNCTION_DESCRIPTOR, DllName) - 0usize];
    ["Offset of field: _REDIRECTION_FUNCTION_DESCRIPTOR::FunctionName"]
        [::std::mem::offset_of!(_REDIRECTION_FUNCTION_DESCRIPTOR, FunctionName) - 8usize];
    ["Offset of field: _REDIRECTION_FUNCTION_DESCRIPTOR::RedirectionTarget"]
        [::std::mem::offset_of!(_REDIRECTION_FUNCTION_DESCRIPTOR, RedirectionTarget) - 16usize];
};
pub type REDIRECTION_FUNCTION_DESCRIPTOR = _REDIRECTION_FUNCTION_DESCRIPTOR;
pub type PREDIRECTION_FUNCTION_DESCRIPTOR = *mut _REDIRECTION_FUNCTION_DESCRIPTOR;
pub type PCREDIRECTION_FUNCTION_DESCRIPTOR = *const REDIRECTION_FUNCTION_DESCRIPTOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REDIRECTION_DESCRIPTOR {
    pub Version: ULONG,
    pub FunctionCount: ULONG,
    pub Redirections: PCREDIRECTION_FUNCTION_DESCRIPTOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REDIRECTION_DESCRIPTOR"][::std::mem::size_of::<_REDIRECTION_DESCRIPTOR>() - 16usize];
    ["Alignment of _REDIRECTION_DESCRIPTOR"]
        [::std::mem::align_of::<_REDIRECTION_DESCRIPTOR>() - 8usize];
    ["Offset of field: _REDIRECTION_DESCRIPTOR::Version"]
        [::std::mem::offset_of!(_REDIRECTION_DESCRIPTOR, Version) - 0usize];
    ["Offset of field: _REDIRECTION_DESCRIPTOR::FunctionCount"]
        [::std::mem::offset_of!(_REDIRECTION_DESCRIPTOR, FunctionCount) - 4usize];
    ["Offset of field: _REDIRECTION_DESCRIPTOR::Redirections"]
        [::std::mem::offset_of!(_REDIRECTION_DESCRIPTOR, Redirections) - 8usize];
};
pub type REDIRECTION_DESCRIPTOR = _REDIRECTION_DESCRIPTOR;
pub type PREDIRECTION_DESCRIPTOR = *mut _REDIRECTION_DESCRIPTOR;
pub type PCREDIRECTION_DESCRIPTOR = *const REDIRECTION_DESCRIPTOR;
unsafe extern "C" {
    pub fn LoadLibraryExA(lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: DWORD) -> HMODULE;
}
unsafe extern "C" {
    pub fn LoadLibraryExW(lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD) -> HMODULE;
}
unsafe extern "C" {
    pub fn LoadResource(hModule: HMODULE, hResInfo: HRSRC) -> HGLOBAL;
}
unsafe extern "C" {
    pub fn LoadStringA(
        hInstance: HINSTANCE,
        uID: UINT,
        lpBuffer: LPSTR,
        cchBufferMax: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LoadStringW(
        hInstance: HINSTANCE,
        uID: UINT,
        lpBuffer: LPWSTR,
        cchBufferMax: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LockResource(hResData: HGLOBAL) -> LPVOID;
}
unsafe extern "C" {
    pub fn SizeofResource(hModule: HMODULE, hResInfo: HRSRC) -> DWORD;
}
pub type DLL_DIRECTORY_COOKIE = PVOID;
pub type PDLL_DIRECTORY_COOKIE = *mut PVOID;
unsafe extern "C" {
    pub fn AddDllDirectory(NewDirectory: PCWSTR) -> DLL_DIRECTORY_COOKIE;
}
unsafe extern "C" {
    pub fn RemoveDllDirectory(Cookie: DLL_DIRECTORY_COOKIE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDefaultDllDirectories(DirectoryFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceLanguagesExA(
        hModule: HMODULE,
        lpType: LPCSTR,
        lpName: LPCSTR,
        lpEnumFunc: ENUMRESLANGPROCA,
        lParam: LONG_PTR,
        dwFlags: DWORD,
        LangId: LANGID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceLanguagesExW(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpName: LPCWSTR,
        lpEnumFunc: ENUMRESLANGPROCW,
        lParam: LONG_PTR,
        dwFlags: DWORD,
        LangId: LANGID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceNamesExA(
        hModule: HMODULE,
        lpType: LPCSTR,
        lpEnumFunc: ENUMRESNAMEPROCA,
        lParam: LONG_PTR,
        dwFlags: DWORD,
        LangId: LANGID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceNamesExW(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpEnumFunc: ENUMRESNAMEPROCW,
        lParam: LONG_PTR,
        dwFlags: DWORD,
        LangId: LANGID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceTypesExA(
        hModule: HMODULE,
        lpEnumFunc: ENUMRESTYPEPROCA,
        lParam: LONG_PTR,
        dwFlags: DWORD,
        LangId: LANGID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceTypesExW(
        hModule: HMODULE,
        lpEnumFunc: ENUMRESTYPEPROCW,
        lParam: LONG_PTR,
        dwFlags: DWORD,
        LangId: LANGID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindResourceW(hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR) -> HRSRC;
}
unsafe extern "C" {
    pub fn LoadLibraryA(lpLibFileName: LPCSTR) -> HMODULE;
}
unsafe extern "C" {
    pub fn LoadLibraryW(lpLibFileName: LPCWSTR) -> HMODULE;
}
unsafe extern "C" {
    pub fn EnumResourceNamesW(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpEnumFunc: ENUMRESNAMEPROCW,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceNamesA(
        hModule: HMODULE,
        lpType: LPCSTR,
        lpEnumFunc: ENUMRESNAMEPROCA,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheck(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        PrivilegeSet: PPRIVILEGE_SET,
        PrivilegeSetLength: LPDWORD,
        GrantedAccess: LPDWORD,
        AccessStatus: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckAndAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPWSTR,
        ObjectName: LPWSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        DesiredAccess: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccess: LPDWORD,
        AccessStatus: LPBOOL,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByType(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        PrivilegeSet: PPRIVILEGE_SET,
        PrivilegeSetLength: LPDWORD,
        GrantedAccess: LPDWORD,
        AccessStatus: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeResultList(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        PrivilegeSet: PPRIVILEGE_SET,
        PrivilegeSetLength: LPDWORD,
        GrantedAccessList: LPDWORD,
        AccessStatusList: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeAndAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPCWSTR,
        ObjectName: LPCWSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: DWORD,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccess: LPDWORD,
        AccessStatus: LPBOOL,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeResultListAndAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPCWSTR,
        ObjectName: LPCWSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: DWORD,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccessList: LPDWORD,
        AccessStatusList: LPDWORD,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        ClientToken: HANDLE,
        ObjectTypeName: LPCWSTR,
        ObjectName: LPCWSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: DWORD,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccessList: LPDWORD,
        AccessStatusList: LPDWORD,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAccessAllowedAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AccessMask: DWORD,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAccessAllowedAceEx(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAccessAllowedObjectAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        ObjectTypeGuid: *mut GUID,
        InheritedObjectTypeGuid: *mut GUID,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAccessDeniedAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AccessMask: DWORD,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAccessDeniedAceEx(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAccessDeniedObjectAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        ObjectTypeGuid: *mut GUID,
        InheritedObjectTypeGuid: *mut GUID,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        dwStartingAceIndex: DWORD,
        pAceList: LPVOID,
        nAceListLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAuditAccessAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        dwAccessMask: DWORD,
        pSid: PSID,
        bAuditSuccess: BOOL,
        bAuditFailure: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAuditAccessAceEx(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        dwAccessMask: DWORD,
        pSid: PSID,
        bAuditSuccess: BOOL,
        bAuditFailure: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddAuditAccessObjectAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        ObjectTypeGuid: *mut GUID,
        InheritedObjectTypeGuid: *mut GUID,
        pSid: PSID,
        bAuditSuccess: BOOL,
        bAuditFailure: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddMandatoryAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        MandatoryPolicy: DWORD,
        pLabelSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddResourceAttributeAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        pSid: PSID,
        pAttributeInfo: PCLAIM_SECURITY_ATTRIBUTES_INFORMATION,
        pReturnLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddScopedPolicyIDAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AccessMask: DWORD,
        pSid: PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AdjustTokenGroups(
        TokenHandle: HANDLE,
        ResetToDefault: BOOL,
        NewState: PTOKEN_GROUPS,
        BufferLength: DWORD,
        PreviousState: PTOKEN_GROUPS,
        ReturnLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AdjustTokenPrivileges(
        TokenHandle: HANDLE,
        DisableAllPrivileges: BOOL,
        NewState: PTOKEN_PRIVILEGES,
        BufferLength: DWORD,
        PreviousState: PTOKEN_PRIVILEGES,
        ReturnLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AllocateAndInitializeSid(
        pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY,
        nSubAuthorityCount: BYTE,
        nSubAuthority0: DWORD,
        nSubAuthority1: DWORD,
        nSubAuthority2: DWORD,
        nSubAuthority3: DWORD,
        nSubAuthority4: DWORD,
        nSubAuthority5: DWORD,
        nSubAuthority6: DWORD,
        nSubAuthority7: DWORD,
        pSid: *mut PSID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AllocateLocallyUniqueId(Luid: PLUID) -> BOOL;
}
unsafe extern "C" {
    pub fn AreAllAccessesGranted(GrantedAccess: DWORD, DesiredAccess: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn AreAnyAccessesGranted(GrantedAccess: DWORD, DesiredAccess: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckTokenMembership(TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckTokenCapability(
        TokenHandle: HANDLE,
        CapabilitySidToCheck: PSID,
        HasCapability: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetAppContainerAce(
        Acl: PACL,
        StartingAceIndex: DWORD,
        AppContainerAce: *mut PVOID,
        AppContainerAceIndex: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckTokenMembershipEx(
        TokenHandle: HANDLE,
        SidToCheck: PSID,
        Flags: DWORD,
        IsMember: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ConvertToAutoInheritPrivateObjectSecurity(
        ParentDescriptor: PSECURITY_DESCRIPTOR,
        CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR,
        NewSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        ObjectType: *mut GUID,
        IsDirectoryObject: BOOLEAN,
        GenericMapping: PGENERIC_MAPPING,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CopySid(nDestinationSidLength: DWORD, pDestinationSid: PSID, pSourceSid: PSID) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePrivateObjectSecurity(
        ParentDescriptor: PSECURITY_DESCRIPTOR,
        CreatorDescriptor: PSECURITY_DESCRIPTOR,
        NewDescriptor: *mut PSECURITY_DESCRIPTOR,
        IsDirectoryObject: BOOL,
        Token: HANDLE,
        GenericMapping: PGENERIC_MAPPING,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePrivateObjectSecurityEx(
        ParentDescriptor: PSECURITY_DESCRIPTOR,
        CreatorDescriptor: PSECURITY_DESCRIPTOR,
        NewDescriptor: *mut PSECURITY_DESCRIPTOR,
        ObjectType: *mut GUID,
        IsContainerObject: BOOL,
        AutoInheritFlags: ULONG,
        Token: HANDLE,
        GenericMapping: PGENERIC_MAPPING,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePrivateObjectSecurityWithMultipleInheritance(
        ParentDescriptor: PSECURITY_DESCRIPTOR,
        CreatorDescriptor: PSECURITY_DESCRIPTOR,
        NewDescriptor: *mut PSECURITY_DESCRIPTOR,
        ObjectTypes: *mut *mut GUID,
        GuidCount: ULONG,
        IsContainerObject: BOOL,
        AutoInheritFlags: ULONG,
        Token: HANDLE,
        GenericMapping: PGENERIC_MAPPING,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateRestrictedToken(
        ExistingTokenHandle: HANDLE,
        Flags: DWORD,
        DisableSidCount: DWORD,
        SidsToDisable: PSID_AND_ATTRIBUTES,
        DeletePrivilegeCount: DWORD,
        PrivilegesToDelete: PLUID_AND_ATTRIBUTES,
        RestrictedSidCount: DWORD,
        SidsToRestrict: PSID_AND_ATTRIBUTES,
        NewTokenHandle: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateWellKnownSid(
        WellKnownSidType: WELL_KNOWN_SID_TYPE,
        DomainSid: PSID,
        pSid: PSID,
        cbSid: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EqualDomainSid(pSid1: PSID, pSid2: PSID, pfEqual: *mut BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteAce(pAcl: PACL, dwAceIndex: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DestroyPrivateObjectSecurity(ObjectDescriptor: *mut PSECURITY_DESCRIPTOR) -> BOOL;
}
unsafe extern "C" {
    pub fn DuplicateToken(
        ExistingTokenHandle: HANDLE,
        ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
        DuplicateTokenHandle: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DuplicateTokenEx(
        hExistingToken: HANDLE,
        dwDesiredAccess: DWORD,
        lpTokenAttributes: LPSECURITY_ATTRIBUTES,
        ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
        TokenType: TOKEN_TYPE,
        phNewToken: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EqualPrefixSid(pSid1: PSID, pSid2: PSID) -> BOOL;
}
unsafe extern "C" {
    pub fn EqualSid(pSid1: PSID, pSid2: PSID) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstFreeAce(pAcl: PACL, pAce: *mut LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn FreeSid(pSid: PSID) -> PVOID;
}
unsafe extern "C" {
    pub fn GetAce(pAcl: PACL, dwAceIndex: DWORD, pAce: *mut LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn GetAclInformation(
        pAcl: PACL,
        pAclInformation: LPVOID,
        nAclInformationLength: DWORD,
        dwAclInformationClass: ACL_INFORMATION_CLASS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileSecurityW(
        lpFileName: LPCWSTR,
        RequestedInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetKernelObjectSecurity(
        Handle: HANDLE,
        RequestedInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLengthSid(pSid: PSID) -> DWORD;
}
unsafe extern "C" {
    pub fn GetPrivateObjectSecurity(
        ObjectDescriptor: PSECURITY_DESCRIPTOR,
        SecurityInformation: SECURITY_INFORMATION,
        ResultantDescriptor: PSECURITY_DESCRIPTOR,
        DescriptorLength: DWORD,
        ReturnLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorControl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pControl: PSECURITY_DESCRIPTOR_CONTROL,
        lpdwRevision: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorDacl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpbDaclPresent: LPBOOL,
        pDacl: *mut PACL,
        lpbDaclDefaulted: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorGroup(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pGroup: *mut PSID,
        lpbGroupDefaulted: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorLength(pSecurityDescriptor: PSECURITY_DESCRIPTOR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorOwner(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pOwner: *mut PSID,
        lpbOwnerDefaulted: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorRMControl(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        RMControl: PUCHAR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetSecurityDescriptorSacl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpbSaclPresent: LPBOOL,
        pSacl: *mut PACL,
        lpbSaclDefaulted: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSidIdentifierAuthority(pSid: PSID) -> PSID_IDENTIFIER_AUTHORITY;
}
unsafe extern "C" {
    pub fn GetSidLengthRequired(nSubAuthorityCount: UCHAR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetSidSubAuthority(pSid: PSID, nSubAuthority: DWORD) -> PDWORD;
}
unsafe extern "C" {
    pub fn GetSidSubAuthorityCount(pSid: PSID) -> PUCHAR;
}
unsafe extern "C" {
    pub fn GetTokenInformation(
        TokenHandle: HANDLE,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: LPVOID,
        TokenInformationLength: DWORD,
        ReturnLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowsAccountDomainSid(
        pSid: PSID,
        pDomainSid: PSID,
        cbDomainSid: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImpersonateAnonymousToken(ThreadHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ImpersonateLoggedOnUser(hToken: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ImpersonateSelf(ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeAcl(pAcl: PACL, nAclLength: DWORD, dwAclRevision: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeSecurityDescriptor(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        dwRevision: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeSid(
        Sid: PSID,
        pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY,
        nSubAuthorityCount: BYTE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsTokenRestricted(TokenHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidAcl(pAcl: PACL) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidSid(pSid: PSID) -> BOOL;
}
unsafe extern "C" {
    pub fn IsWellKnownSid(pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn MakeAbsoluteSD(
        pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpdwAbsoluteSecurityDescriptorSize: LPDWORD,
        pDacl: PACL,
        lpdwDaclSize: LPDWORD,
        pSacl: PACL,
        lpdwSaclSize: LPDWORD,
        pOwner: PSID,
        lpdwOwnerSize: LPDWORD,
        pPrimaryGroup: PSID,
        lpdwPrimaryGroupSize: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MakeSelfRelativeSD(
        pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpdwBufferLength: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MapGenericMask(AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING);
}
unsafe extern "C" {
    pub fn ObjectCloseAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        GenerateOnClose: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectDeleteAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        GenerateOnClose: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectOpenAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPWSTR,
        ObjectName: LPWSTR,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        GrantedAccess: DWORD,
        Privileges: PPRIVILEGE_SET,
        ObjectCreation: BOOL,
        AccessGranted: BOOL,
        GenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectPrivilegeAuditAlarmW(
        SubsystemName: LPCWSTR,
        HandleId: LPVOID,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        Privileges: PPRIVILEGE_SET,
        AccessGranted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PrivilegeCheck(
        ClientToken: HANDLE,
        RequiredPrivileges: PPRIVILEGE_SET,
        pfResult: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PrivilegedServiceAuditAlarmW(
        SubsystemName: LPCWSTR,
        ServiceName: LPCWSTR,
        ClientToken: HANDLE,
        Privileges: PPRIVILEGE_SET,
        AccessGranted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QuerySecurityAccessMask(
        SecurityInformation: SECURITY_INFORMATION,
        DesiredAccess: LPDWORD,
    );
}
unsafe extern "C" {
    pub fn RevertToSelf() -> BOOL;
}
unsafe extern "C" {
    pub fn SetAclInformation(
        pAcl: PACL,
        pAclInformation: LPVOID,
        nAclInformationLength: DWORD,
        dwAclInformationClass: ACL_INFORMATION_CLASS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileSecurityW(
        lpFileName: LPCWSTR,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetKernelObjectSecurity(
        Handle: HANDLE,
        SecurityInformation: SECURITY_INFORMATION,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPrivateObjectSecurity(
        SecurityInformation: SECURITY_INFORMATION,
        ModificationDescriptor: PSECURITY_DESCRIPTOR,
        ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        GenericMapping: PGENERIC_MAPPING,
        Token: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPrivateObjectSecurityEx(
        SecurityInformation: SECURITY_INFORMATION,
        ModificationDescriptor: PSECURITY_DESCRIPTOR,
        ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        AutoInheritFlags: ULONG,
        GenericMapping: PGENERIC_MAPPING,
        Token: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSecurityAccessMask(SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD);
}
unsafe extern "C" {
    pub fn SetSecurityDescriptorControl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        ControlBitsOfInterest: SECURITY_DESCRIPTOR_CONTROL,
        ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSecurityDescriptorDacl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        bDaclPresent: BOOL,
        pDacl: PACL,
        bDaclDefaulted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSecurityDescriptorGroup(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pGroup: PSID,
        bGroupDefaulted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSecurityDescriptorOwner(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        pOwner: PSID,
        bOwnerDefaulted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSecurityDescriptorRMControl(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        RMControl: PUCHAR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SetSecurityDescriptorSacl(
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        bSaclPresent: BOOL,
        pSacl: PACL,
        bSaclDefaulted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetTokenInformation(
        TokenHandle: HANDLE,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: LPVOID,
        TokenInformationLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCachedSigningLevel(
        SourceFiles: PHANDLE,
        SourceFileCount: ULONG,
        Flags: ULONG,
        TargetFile: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCachedSigningLevel(
        File: HANDLE,
        Flags: PULONG,
        SigningLevel: PULONG,
        Thumbprint: PUCHAR,
        ThumbprintSize: PULONG,
        ThumbprintAlgorithm: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CveEventWrite(CveId: PCWSTR, AdditionalDetails: PCWSTR) -> LONG;
}
unsafe extern "C" {
    pub fn DeriveCapabilitySidsFromName(
        CapName: LPCWSTR,
        CapabilityGroupSids: *mut *mut PSID,
        CapabilityGroupSidCount: *mut DWORD,
        CapabilitySids: *mut *mut PSID,
        CapabilitySidCount: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePrivateNamespaceW(
        lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES,
        lpBoundaryDescriptor: LPVOID,
        lpAliasPrefix: LPCWSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenPrivateNamespaceW(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn ClosePrivateNamespace(Handle: HANDLE, Flags: ULONG) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn CreateBoundaryDescriptorW(Name: LPCWSTR, Flags: ULONG) -> HANDLE;
}
unsafe extern "C" {
    pub fn AddSIDToBoundaryDescriptor(BoundaryDescriptor: *mut HANDLE, RequiredSid: PSID) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteBoundaryDescriptor(BoundaryDescriptor: HANDLE);
}
unsafe extern "C" {
    pub fn GetNumaHighestNodeNumber(HighestNodeNumber: PULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaNodeProcessorMaskEx(Node: USHORT, ProcessorMask: PGROUP_AFFINITY) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaNodeProcessorMask2(
        NodeNumber: USHORT,
        ProcessorMasks: PGROUP_AFFINITY,
        ProcessorMaskCount: USHORT,
        RequiredMaskCount: PUSHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaProximityNodeEx(ProximityId: ULONG, NodeNumber: PUSHORT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessGroupAffinity(
        hProcess: HANDLE,
        GroupCount: PUSHORT,
        GroupArray: PUSHORT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadGroupAffinity(hThread: HANDLE, GroupAffinity: PGROUP_AFFINITY) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadGroupAffinity(
        hThread: HANDLE,
        GroupAffinity: *const GROUP_AFFINITY,
        PreviousGroupAffinity: PGROUP_AFFINITY,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetAppContainerNamedObjectPath(
        Token: HANDLE,
        AppContainerSid: PSID,
        ObjectPathLength: ULONG,
        ObjectPath: LPWSTR,
        ReturnLength: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryThreadCycleTime(ThreadHandle: HANDLE, CycleTime: PULONG64) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryProcessCycleTime(ProcessHandle: HANDLE, CycleTime: PULONG64) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryIdleProcessorCycleTime(
        BufferLength: PULONG,
        ProcessorIdleCycleTime: PULONG64,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryIdleProcessorCycleTimeEx(
        Group: USHORT,
        BufferLength: PULONG,
        ProcessorIdleCycleTime: PULONG64,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryInterruptTimePrecise(lpInterruptTimePrecise: PULONGLONG);
}
unsafe extern "C" {
    pub fn QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: PULONGLONG);
}
unsafe extern "C" {
    pub fn QueryInterruptTime(lpInterruptTime: PULONGLONG);
}
unsafe extern "C" {
    pub fn QueryUnbiasedInterruptTime(UnbiasedTime: PULONGLONG) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryAuxiliaryCounterFrequency(lpAuxiliaryCounterFrequency: PULONGLONG) -> HRESULT;
}
unsafe extern "C" {
    pub fn ConvertAuxiliaryCounterToPerformanceCounter(
        ullAuxiliaryCounterValue: ULONGLONG,
        lpPerformanceCounterValue: PULONGLONG,
        lpConversionError: PULONGLONG,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn ConvertPerformanceCounterToAuxiliaryCounter(
        ullPerformanceCounterValue: ULONGLONG,
        lpAuxiliaryCounterValue: PULONGLONG,
        lpConversionError: PULONGLONG,
    ) -> HRESULT;
}
pub const FILE_WRITE_FLAGS_FILE_WRITE_FLAGS_NONE: FILE_WRITE_FLAGS = 0;
pub const FILE_WRITE_FLAGS_FILE_WRITE_FLAGS_WRITE_THROUGH: FILE_WRITE_FLAGS = 1;
pub type FILE_WRITE_FLAGS = ::std::os::raw::c_int;
pub const FILE_FLUSH_MODE_FILE_FLUSH_DEFAULT: FILE_FLUSH_MODE = 0;
pub const FILE_FLUSH_MODE_FILE_FLUSH_DATA: FILE_FLUSH_MODE = 1;
pub const FILE_FLUSH_MODE_FILE_FLUSH_MIN_METADATA: FILE_FLUSH_MODE = 2;
pub const FILE_FLUSH_MODE_FILE_FLUSH_NO_SYNC: FILE_FLUSH_MODE = 3;
pub type FILE_FLUSH_MODE = ::std::os::raw::c_int;
pub type PFIBER_START_ROUTINE =
    ::std::option::Option<unsafe extern "C" fn(lpFiberParameter: LPVOID)>;
pub type LPFIBER_START_ROUTINE = PFIBER_START_ROUTINE;
pub type PFIBER_CALLOUT_ROUTINE =
    ::std::option::Option<unsafe extern "C" fn(lpParameter: LPVOID) -> LPVOID>;
pub type LPLDT_ENTRY = LPVOID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMMPROP {
    pub wPacketLength: WORD,
    pub wPacketVersion: WORD,
    pub dwServiceMask: DWORD,
    pub dwReserved1: DWORD,
    pub dwMaxTxQueue: DWORD,
    pub dwMaxRxQueue: DWORD,
    pub dwMaxBaud: DWORD,
    pub dwProvSubType: DWORD,
    pub dwProvCapabilities: DWORD,
    pub dwSettableParams: DWORD,
    pub dwSettableBaud: DWORD,
    pub wSettableData: WORD,
    pub wSettableStopParity: WORD,
    pub dwCurrentTxQueue: DWORD,
    pub dwCurrentRxQueue: DWORD,
    pub dwProvSpec1: DWORD,
    pub dwProvSpec2: DWORD,
    pub wcProvChar: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COMMPROP"][::std::mem::size_of::<_COMMPROP>() - 64usize];
    ["Alignment of _COMMPROP"][::std::mem::align_of::<_COMMPROP>() - 4usize];
    ["Offset of field: _COMMPROP::wPacketLength"]
        [::std::mem::offset_of!(_COMMPROP, wPacketLength) - 0usize];
    ["Offset of field: _COMMPROP::wPacketVersion"]
        [::std::mem::offset_of!(_COMMPROP, wPacketVersion) - 2usize];
    ["Offset of field: _COMMPROP::dwServiceMask"]
        [::std::mem::offset_of!(_COMMPROP, dwServiceMask) - 4usize];
    ["Offset of field: _COMMPROP::dwReserved1"]
        [::std::mem::offset_of!(_COMMPROP, dwReserved1) - 8usize];
    ["Offset of field: _COMMPROP::dwMaxTxQueue"]
        [::std::mem::offset_of!(_COMMPROP, dwMaxTxQueue) - 12usize];
    ["Offset of field: _COMMPROP::dwMaxRxQueue"]
        [::std::mem::offset_of!(_COMMPROP, dwMaxRxQueue) - 16usize];
    ["Offset of field: _COMMPROP::dwMaxBaud"]
        [::std::mem::offset_of!(_COMMPROP, dwMaxBaud) - 20usize];
    ["Offset of field: _COMMPROP::dwProvSubType"]
        [::std::mem::offset_of!(_COMMPROP, dwProvSubType) - 24usize];
    ["Offset of field: _COMMPROP::dwProvCapabilities"]
        [::std::mem::offset_of!(_COMMPROP, dwProvCapabilities) - 28usize];
    ["Offset of field: _COMMPROP::dwSettableParams"]
        [::std::mem::offset_of!(_COMMPROP, dwSettableParams) - 32usize];
    ["Offset of field: _COMMPROP::dwSettableBaud"]
        [::std::mem::offset_of!(_COMMPROP, dwSettableBaud) - 36usize];
    ["Offset of field: _COMMPROP::wSettableData"]
        [::std::mem::offset_of!(_COMMPROP, wSettableData) - 40usize];
    ["Offset of field: _COMMPROP::wSettableStopParity"]
        [::std::mem::offset_of!(_COMMPROP, wSettableStopParity) - 42usize];
    ["Offset of field: _COMMPROP::dwCurrentTxQueue"]
        [::std::mem::offset_of!(_COMMPROP, dwCurrentTxQueue) - 44usize];
    ["Offset of field: _COMMPROP::dwCurrentRxQueue"]
        [::std::mem::offset_of!(_COMMPROP, dwCurrentRxQueue) - 48usize];
    ["Offset of field: _COMMPROP::dwProvSpec1"]
        [::std::mem::offset_of!(_COMMPROP, dwProvSpec1) - 52usize];
    ["Offset of field: _COMMPROP::dwProvSpec2"]
        [::std::mem::offset_of!(_COMMPROP, dwProvSpec2) - 56usize];
    ["Offset of field: _COMMPROP::wcProvChar"]
        [::std::mem::offset_of!(_COMMPROP, wcProvChar) - 60usize];
};
pub type COMMPROP = _COMMPROP;
pub type LPCOMMPROP = *mut _COMMPROP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMSTAT {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub cbInQue: DWORD,
    pub cbOutQue: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COMSTAT"][::std::mem::size_of::<_COMSTAT>() - 12usize];
    ["Alignment of _COMSTAT"][::std::mem::align_of::<_COMSTAT>() - 4usize];
    ["Offset of field: _COMSTAT::cbInQue"][::std::mem::offset_of!(_COMSTAT, cbInQue) - 4usize];
    ["Offset of field: _COMSTAT::cbOutQue"][::std::mem::offset_of!(_COMSTAT, cbOutQue) - 8usize];
};
impl _COMSTAT {
    #[inline]
    pub fn fCtsHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fCtsHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fCtsHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fCtsHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDsrHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fDsrHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDsrHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDsrHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fRlsdHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fRlsdHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fRlsdHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fRlsdHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fXoffHold(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fXoffHold(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fXoffHold_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fXoffHold_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fXoffSent(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fXoffSent(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fXoffSent_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fXoffSent_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fEof(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fEof(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fEof_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fEof_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fTxim(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fTxim(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fTxim_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fTxim_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fReserved(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_fReserved(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fReserved_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                25u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fReserved_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                25u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fCtsHold: DWORD,
        fDsrHold: DWORD,
        fRlsdHold: DWORD,
        fXoffHold: DWORD,
        fXoffSent: DWORD,
        fEof: DWORD,
        fTxim: DWORD,
        fReserved: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fCtsHold: u32 = unsafe { ::std::mem::transmute(fCtsHold) };
            fCtsHold as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fDsrHold: u32 = unsafe { ::std::mem::transmute(fDsrHold) };
            fDsrHold as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let fRlsdHold: u32 = unsafe { ::std::mem::transmute(fRlsdHold) };
            fRlsdHold as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fXoffHold: u32 = unsafe { ::std::mem::transmute(fXoffHold) };
            fXoffHold as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let fXoffSent: u32 = unsafe { ::std::mem::transmute(fXoffSent) };
            fXoffSent as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let fEof: u32 = unsafe { ::std::mem::transmute(fEof) };
            fEof as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fTxim: u32 = unsafe { ::std::mem::transmute(fTxim) };
            fTxim as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let fReserved: u32 = unsafe { ::std::mem::transmute(fReserved) };
            fReserved as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type COMSTAT = _COMSTAT;
pub type LPCOMSTAT = *mut _COMSTAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DCB {
    pub DCBlength: DWORD,
    pub BaudRate: DWORD,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub wReserved: WORD,
    pub XonLim: WORD,
    pub XoffLim: WORD,
    pub ByteSize: BYTE,
    pub Parity: BYTE,
    pub StopBits: BYTE,
    pub XonChar: ::std::os::raw::c_char,
    pub XoffChar: ::std::os::raw::c_char,
    pub ErrorChar: ::std::os::raw::c_char,
    pub EofChar: ::std::os::raw::c_char,
    pub EvtChar: ::std::os::raw::c_char,
    pub wReserved1: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DCB"][::std::mem::size_of::<_DCB>() - 28usize];
    ["Alignment of _DCB"][::std::mem::align_of::<_DCB>() - 4usize];
    ["Offset of field: _DCB::DCBlength"][::std::mem::offset_of!(_DCB, DCBlength) - 0usize];
    ["Offset of field: _DCB::BaudRate"][::std::mem::offset_of!(_DCB, BaudRate) - 4usize];
    ["Offset of field: _DCB::wReserved"][::std::mem::offset_of!(_DCB, wReserved) - 12usize];
    ["Offset of field: _DCB::XonLim"][::std::mem::offset_of!(_DCB, XonLim) - 14usize];
    ["Offset of field: _DCB::XoffLim"][::std::mem::offset_of!(_DCB, XoffLim) - 16usize];
    ["Offset of field: _DCB::ByteSize"][::std::mem::offset_of!(_DCB, ByteSize) - 18usize];
    ["Offset of field: _DCB::Parity"][::std::mem::offset_of!(_DCB, Parity) - 19usize];
    ["Offset of field: _DCB::StopBits"][::std::mem::offset_of!(_DCB, StopBits) - 20usize];
    ["Offset of field: _DCB::XonChar"][::std::mem::offset_of!(_DCB, XonChar) - 21usize];
    ["Offset of field: _DCB::XoffChar"][::std::mem::offset_of!(_DCB, XoffChar) - 22usize];
    ["Offset of field: _DCB::ErrorChar"][::std::mem::offset_of!(_DCB, ErrorChar) - 23usize];
    ["Offset of field: _DCB::EofChar"][::std::mem::offset_of!(_DCB, EofChar) - 24usize];
    ["Offset of field: _DCB::EvtChar"][::std::mem::offset_of!(_DCB, EvtChar) - 25usize];
    ["Offset of field: _DCB::wReserved1"][::std::mem::offset_of!(_DCB, wReserved1) - 26usize];
};
impl _DCB {
    #[inline]
    pub fn fBinary(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fBinary(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fBinary_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fBinary_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fParity(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fParity(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fParity_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fParity_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fOutxCtsFlow(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fOutxCtsFlow(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fOutxCtsFlow_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fOutxCtsFlow_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fOutxDsrFlow(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fOutxDsrFlow(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fOutxDsrFlow_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fOutxDsrFlow_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDtrControl(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_fDtrControl(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDtrControl_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDtrControl_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDsrSensitivity(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fDsrSensitivity(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDsrSensitivity_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDsrSensitivity_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fTXContinueOnXoff(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fTXContinueOnXoff(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fTXContinueOnXoff_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fTXContinueOnXoff_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fOutX(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fOutX(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fOutX_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fOutX_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fInX(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fInX(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fInX_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                9usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fInX_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                9usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fErrorChar(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fErrorChar(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fErrorChar_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                10usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fErrorChar_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                10usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fNull(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fNull(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fNull_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                11usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fNull_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                11usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fRtsControl(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_fRtsControl(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fRtsControl_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                12usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fRtsControl_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                12usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fAbortOnError(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fAbortOnError(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fAbortOnError_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                14usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fAbortOnError_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                14usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fDummy2(&self) -> DWORD {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_fDummy2(&mut self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fDummy2_raw(this: *const Self) -> DWORD {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                15usize,
                17u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fDummy2_raw(this: *mut Self, val: DWORD) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                15usize,
                17u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fBinary: DWORD,
        fParity: DWORD,
        fOutxCtsFlow: DWORD,
        fOutxDsrFlow: DWORD,
        fDtrControl: DWORD,
        fDsrSensitivity: DWORD,
        fTXContinueOnXoff: DWORD,
        fOutX: DWORD,
        fInX: DWORD,
        fErrorChar: DWORD,
        fNull: DWORD,
        fRtsControl: DWORD,
        fAbortOnError: DWORD,
        fDummy2: DWORD,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fBinary: u32 = unsafe { ::std::mem::transmute(fBinary) };
            fBinary as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fParity: u32 = unsafe { ::std::mem::transmute(fParity) };
            fParity as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let fOutxCtsFlow: u32 = unsafe { ::std::mem::transmute(fOutxCtsFlow) };
            fOutxCtsFlow as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let fOutxDsrFlow: u32 = unsafe { ::std::mem::transmute(fOutxDsrFlow) };
            fOutxDsrFlow as u64
        });
        __bindgen_bitfield_unit.set(4usize, 2u8, {
            let fDtrControl: u32 = unsafe { ::std::mem::transmute(fDtrControl) };
            fDtrControl as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let fDsrSensitivity: u32 = unsafe { ::std::mem::transmute(fDsrSensitivity) };
            fDsrSensitivity as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let fTXContinueOnXoff: u32 = unsafe { ::std::mem::transmute(fTXContinueOnXoff) };
            fTXContinueOnXoff as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let fOutX: u32 = unsafe { ::std::mem::transmute(fOutX) };
            fOutX as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let fInX: u32 = unsafe { ::std::mem::transmute(fInX) };
            fInX as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let fErrorChar: u32 = unsafe { ::std::mem::transmute(fErrorChar) };
            fErrorChar as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let fNull: u32 = unsafe { ::std::mem::transmute(fNull) };
            fNull as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let fRtsControl: u32 = unsafe { ::std::mem::transmute(fRtsControl) };
            fRtsControl as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let fAbortOnError: u32 = unsafe { ::std::mem::transmute(fAbortOnError) };
            fAbortOnError as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let fDummy2: u32 = unsafe { ::std::mem::transmute(fDummy2) };
            fDummy2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type DCB = _DCB;
pub type LPDCB = *mut _DCB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMMTIMEOUTS {
    pub ReadIntervalTimeout: DWORD,
    pub ReadTotalTimeoutMultiplier: DWORD,
    pub ReadTotalTimeoutConstant: DWORD,
    pub WriteTotalTimeoutMultiplier: DWORD,
    pub WriteTotalTimeoutConstant: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COMMTIMEOUTS"][::std::mem::size_of::<_COMMTIMEOUTS>() - 20usize];
    ["Alignment of _COMMTIMEOUTS"][::std::mem::align_of::<_COMMTIMEOUTS>() - 4usize];
    ["Offset of field: _COMMTIMEOUTS::ReadIntervalTimeout"]
        [::std::mem::offset_of!(_COMMTIMEOUTS, ReadIntervalTimeout) - 0usize];
    ["Offset of field: _COMMTIMEOUTS::ReadTotalTimeoutMultiplier"]
        [::std::mem::offset_of!(_COMMTIMEOUTS, ReadTotalTimeoutMultiplier) - 4usize];
    ["Offset of field: _COMMTIMEOUTS::ReadTotalTimeoutConstant"]
        [::std::mem::offset_of!(_COMMTIMEOUTS, ReadTotalTimeoutConstant) - 8usize];
    ["Offset of field: _COMMTIMEOUTS::WriteTotalTimeoutMultiplier"]
        [::std::mem::offset_of!(_COMMTIMEOUTS, WriteTotalTimeoutMultiplier) - 12usize];
    ["Offset of field: _COMMTIMEOUTS::WriteTotalTimeoutConstant"]
        [::std::mem::offset_of!(_COMMTIMEOUTS, WriteTotalTimeoutConstant) - 16usize];
};
pub type COMMTIMEOUTS = _COMMTIMEOUTS;
pub type LPCOMMTIMEOUTS = *mut _COMMTIMEOUTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COMMCONFIG {
    pub dwSize: DWORD,
    pub wVersion: WORD,
    pub wReserved: WORD,
    pub dcb: DCB,
    pub dwProviderSubType: DWORD,
    pub dwProviderOffset: DWORD,
    pub dwProviderSize: DWORD,
    pub wcProviderData: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COMMCONFIG"][::std::mem::size_of::<_COMMCONFIG>() - 52usize];
    ["Alignment of _COMMCONFIG"][::std::mem::align_of::<_COMMCONFIG>() - 4usize];
    ["Offset of field: _COMMCONFIG::dwSize"][::std::mem::offset_of!(_COMMCONFIG, dwSize) - 0usize];
    ["Offset of field: _COMMCONFIG::wVersion"]
        [::std::mem::offset_of!(_COMMCONFIG, wVersion) - 4usize];
    ["Offset of field: _COMMCONFIG::wReserved"]
        [::std::mem::offset_of!(_COMMCONFIG, wReserved) - 6usize];
    ["Offset of field: _COMMCONFIG::dcb"][::std::mem::offset_of!(_COMMCONFIG, dcb) - 8usize];
    ["Offset of field: _COMMCONFIG::dwProviderSubType"]
        [::std::mem::offset_of!(_COMMCONFIG, dwProviderSubType) - 36usize];
    ["Offset of field: _COMMCONFIG::dwProviderOffset"]
        [::std::mem::offset_of!(_COMMCONFIG, dwProviderOffset) - 40usize];
    ["Offset of field: _COMMCONFIG::dwProviderSize"]
        [::std::mem::offset_of!(_COMMCONFIG, dwProviderSize) - 44usize];
    ["Offset of field: _COMMCONFIG::wcProviderData"]
        [::std::mem::offset_of!(_COMMCONFIG, wcProviderData) - 48usize];
};
pub type COMMCONFIG = _COMMCONFIG;
pub type LPCOMMCONFIG = *mut _COMMCONFIG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MEMORYSTATUS {
    pub dwLength: DWORD,
    pub dwMemoryLoad: DWORD,
    pub dwTotalPhys: SIZE_T,
    pub dwAvailPhys: SIZE_T,
    pub dwTotalPageFile: SIZE_T,
    pub dwAvailPageFile: SIZE_T,
    pub dwTotalVirtual: SIZE_T,
    pub dwAvailVirtual: SIZE_T,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MEMORYSTATUS"][::std::mem::size_of::<_MEMORYSTATUS>() - 56usize];
    ["Alignment of _MEMORYSTATUS"][::std::mem::align_of::<_MEMORYSTATUS>() - 8usize];
    ["Offset of field: _MEMORYSTATUS::dwLength"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwLength) - 0usize];
    ["Offset of field: _MEMORYSTATUS::dwMemoryLoad"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwMemoryLoad) - 4usize];
    ["Offset of field: _MEMORYSTATUS::dwTotalPhys"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwTotalPhys) - 8usize];
    ["Offset of field: _MEMORYSTATUS::dwAvailPhys"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwAvailPhys) - 16usize];
    ["Offset of field: _MEMORYSTATUS::dwTotalPageFile"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwTotalPageFile) - 24usize];
    ["Offset of field: _MEMORYSTATUS::dwAvailPageFile"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwAvailPageFile) - 32usize];
    ["Offset of field: _MEMORYSTATUS::dwTotalVirtual"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwTotalVirtual) - 40usize];
    ["Offset of field: _MEMORYSTATUS::dwAvailVirtual"]
        [::std::mem::offset_of!(_MEMORYSTATUS, dwAvailVirtual) - 48usize];
};
pub type MEMORYSTATUS = _MEMORYSTATUS;
pub type LPMEMORYSTATUS = *mut _MEMORYSTATUS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JIT_DEBUG_INFO {
    pub dwSize: DWORD,
    pub dwProcessorArchitecture: DWORD,
    pub dwThreadID: DWORD,
    pub dwReserved0: DWORD,
    pub lpExceptionAddress: ULONG64,
    pub lpExceptionRecord: ULONG64,
    pub lpContextRecord: ULONG64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JIT_DEBUG_INFO"][::std::mem::size_of::<_JIT_DEBUG_INFO>() - 40usize];
    ["Alignment of _JIT_DEBUG_INFO"][::std::mem::align_of::<_JIT_DEBUG_INFO>() - 8usize];
    ["Offset of field: _JIT_DEBUG_INFO::dwSize"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, dwSize) - 0usize];
    ["Offset of field: _JIT_DEBUG_INFO::dwProcessorArchitecture"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, dwProcessorArchitecture) - 4usize];
    ["Offset of field: _JIT_DEBUG_INFO::dwThreadID"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, dwThreadID) - 8usize];
    ["Offset of field: _JIT_DEBUG_INFO::dwReserved0"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, dwReserved0) - 12usize];
    ["Offset of field: _JIT_DEBUG_INFO::lpExceptionAddress"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, lpExceptionAddress) - 16usize];
    ["Offset of field: _JIT_DEBUG_INFO::lpExceptionRecord"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, lpExceptionRecord) - 24usize];
    ["Offset of field: _JIT_DEBUG_INFO::lpContextRecord"]
        [::std::mem::offset_of!(_JIT_DEBUG_INFO, lpContextRecord) - 32usize];
};
pub type JIT_DEBUG_INFO = _JIT_DEBUG_INFO;
pub type LPJIT_DEBUG_INFO = *mut _JIT_DEBUG_INFO;
pub type JIT_DEBUG_INFO32 = JIT_DEBUG_INFO;
pub type LPJIT_DEBUG_INFO32 = *mut JIT_DEBUG_INFO;
pub type JIT_DEBUG_INFO64 = JIT_DEBUG_INFO;
pub type LPJIT_DEBUG_INFO64 = *mut JIT_DEBUG_INFO;
pub type LPEXCEPTION_RECORD = PEXCEPTION_RECORD;
pub type LPEXCEPTION_POINTERS = PEXCEPTION_POINTERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OFSTRUCT {
    pub cBytes: BYTE,
    pub fFixedDisk: BYTE,
    pub nErrCode: WORD,
    pub Reserved1: WORD,
    pub Reserved2: WORD,
    pub szPathName: [CHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OFSTRUCT"][::std::mem::size_of::<_OFSTRUCT>() - 136usize];
    ["Alignment of _OFSTRUCT"][::std::mem::align_of::<_OFSTRUCT>() - 2usize];
    ["Offset of field: _OFSTRUCT::cBytes"][::std::mem::offset_of!(_OFSTRUCT, cBytes) - 0usize];
    ["Offset of field: _OFSTRUCT::fFixedDisk"]
        [::std::mem::offset_of!(_OFSTRUCT, fFixedDisk) - 1usize];
    ["Offset of field: _OFSTRUCT::nErrCode"][::std::mem::offset_of!(_OFSTRUCT, nErrCode) - 2usize];
    ["Offset of field: _OFSTRUCT::Reserved1"]
        [::std::mem::offset_of!(_OFSTRUCT, Reserved1) - 4usize];
    ["Offset of field: _OFSTRUCT::Reserved2"]
        [::std::mem::offset_of!(_OFSTRUCT, Reserved2) - 6usize];
    ["Offset of field: _OFSTRUCT::szPathName"]
        [::std::mem::offset_of!(_OFSTRUCT, szPathName) - 8usize];
};
pub type OFSTRUCT = _OFSTRUCT;
pub type LPOFSTRUCT = *mut _OFSTRUCT;
pub type POFSTRUCT = *mut _OFSTRUCT;
unsafe extern "C" {
    pub fn WinMain(
        hInstance: HINSTANCE,
        hPrevInstance: HINSTANCE,
        lpCmdLine: LPSTR,
        nShowCmd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wWinMain(
        hInstance: HINSTANCE,
        hPrevInstance: HINSTANCE,
        lpCmdLine: LPWSTR,
        nShowCmd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GlobalAlloc(uFlags: UINT, dwBytes: SIZE_T) -> HGLOBAL;
}
unsafe extern "C" {
    pub fn GlobalReAlloc(hMem: HGLOBAL, dwBytes: SIZE_T, uFlags: UINT) -> HGLOBAL;
}
unsafe extern "C" {
    pub fn GlobalSize(hMem: HGLOBAL) -> SIZE_T;
}
unsafe extern "C" {
    pub fn GlobalUnlock(hMem: HGLOBAL) -> BOOL;
}
unsafe extern "C" {
    pub fn GlobalLock(hMem: HGLOBAL) -> LPVOID;
}
unsafe extern "C" {
    pub fn GlobalFlags(hMem: HGLOBAL) -> UINT;
}
unsafe extern "C" {
    pub fn GlobalHandle(pMem: LPCVOID) -> HGLOBAL;
}
unsafe extern "C" {
    pub fn GlobalFree(hMem: HGLOBAL) -> HGLOBAL;
}
unsafe extern "C" {
    pub fn GlobalCompact(dwMinFree: DWORD) -> SIZE_T;
}
unsafe extern "C" {
    pub fn GlobalFix(hMem: HGLOBAL);
}
unsafe extern "C" {
    pub fn GlobalUnfix(hMem: HGLOBAL);
}
unsafe extern "C" {
    pub fn GlobalWire(hMem: HGLOBAL) -> LPVOID;
}
unsafe extern "C" {
    pub fn GlobalUnWire(hMem: HGLOBAL) -> BOOL;
}
unsafe extern "C" {
    pub fn GlobalMemoryStatus(lpBuffer: LPMEMORYSTATUS);
}
unsafe extern "C" {
    pub fn LocalAlloc(uFlags: UINT, uBytes: SIZE_T) -> HLOCAL;
}
unsafe extern "C" {
    pub fn LocalReAlloc(hMem: HLOCAL, uBytes: SIZE_T, uFlags: UINT) -> HLOCAL;
}
unsafe extern "C" {
    pub fn LocalLock(hMem: HLOCAL) -> LPVOID;
}
unsafe extern "C" {
    pub fn LocalHandle(pMem: LPCVOID) -> HLOCAL;
}
unsafe extern "C" {
    pub fn LocalUnlock(hMem: HLOCAL) -> BOOL;
}
unsafe extern "C" {
    pub fn LocalSize(hMem: HLOCAL) -> SIZE_T;
}
unsafe extern "C" {
    pub fn LocalFlags(hMem: HLOCAL) -> UINT;
}
unsafe extern "C" {
    pub fn LocalFree(hMem: HLOCAL) -> HLOCAL;
}
unsafe extern "C" {
    pub fn LocalShrink(hMem: HLOCAL, cbNewSize: UINT) -> SIZE_T;
}
unsafe extern "C" {
    pub fn LocalCompact(uMinFree: UINT) -> SIZE_T;
}
unsafe extern "C" {
    pub fn GetBinaryTypeA(lpApplicationName: LPCSTR, lpBinaryType: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetBinaryTypeW(lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetShortPathNameA(lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: DWORD)
    -> DWORD;
}
unsafe extern "C" {
    pub fn GetLongPathNameTransactedA(
        lpszShortPath: LPCSTR,
        lpszLongPath: LPSTR,
        cchBuffer: DWORD,
        hTransaction: HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetLongPathNameTransactedW(
        lpszShortPath: LPCWSTR,
        lpszLongPath: LPWSTR,
        cchBuffer: DWORD,
        hTransaction: HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetProcessAffinityMask(
        hProcess: HANDLE,
        lpProcessAffinityMask: PDWORD_PTR,
        lpSystemAffinityMask: PDWORD_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessAffinityMask(hProcess: HANDLE, dwProcessAffinityMask: DWORD_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessIoCounters(hProcess: HANDLE, lpIoCounters: PIO_COUNTERS) -> BOOL;
}
unsafe extern "C" {
    pub fn FatalExit(ExitCode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn SetEnvironmentStringsA(NewEnvironment: LPCH) -> BOOL;
}
unsafe extern "C" {
    pub fn SwitchToFiber(lpFiber: LPVOID);
}
unsafe extern "C" {
    pub fn DeleteFiber(lpFiber: LPVOID);
}
unsafe extern "C" {
    pub fn ConvertFiberToThread() -> BOOL;
}
unsafe extern "C" {
    pub fn CreateFiberEx(
        dwStackCommitSize: SIZE_T,
        dwStackReserveSize: SIZE_T,
        dwFlags: DWORD,
        lpStartAddress: LPFIBER_START_ROUTINE,
        lpParameter: LPVOID,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn ConvertThreadToFiberEx(lpParameter: LPVOID, dwFlags: DWORD) -> LPVOID;
}
unsafe extern "C" {
    pub fn CreateFiber(
        dwStackSize: SIZE_T,
        lpStartAddress: LPFIBER_START_ROUTINE,
        lpParameter: LPVOID,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn ConvertThreadToFiber(lpParameter: LPVOID) -> LPVOID;
}
pub type PUMS_CONTEXT = *mut ::std::os::raw::c_void;
pub type PUMS_COMPLETION_LIST = *mut ::std::os::raw::c_void;
pub use self::_RTL_UMS_THREAD_INFO_CLASS as UMS_THREAD_INFO_CLASS;
pub type PUMS_THREAD_INFO_CLASS = *mut _RTL_UMS_THREAD_INFO_CLASS;
pub use self::_RTL_UMS_SCHEDULER_REASON as UMS_SCHEDULER_REASON;
pub type PUMS_SCHEDULER_ENTRY_POINT = PRTL_UMS_SCHEDULER_ENTRY_POINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UMS_SCHEDULER_STARTUP_INFO {
    pub UmsVersion: ULONG,
    pub CompletionList: PUMS_COMPLETION_LIST,
    pub SchedulerProc: PUMS_SCHEDULER_ENTRY_POINT,
    pub SchedulerParam: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UMS_SCHEDULER_STARTUP_INFO"]
        [::std::mem::size_of::<_UMS_SCHEDULER_STARTUP_INFO>() - 32usize];
    ["Alignment of _UMS_SCHEDULER_STARTUP_INFO"]
        [::std::mem::align_of::<_UMS_SCHEDULER_STARTUP_INFO>() - 8usize];
    ["Offset of field: _UMS_SCHEDULER_STARTUP_INFO::UmsVersion"]
        [::std::mem::offset_of!(_UMS_SCHEDULER_STARTUP_INFO, UmsVersion) - 0usize];
    ["Offset of field: _UMS_SCHEDULER_STARTUP_INFO::CompletionList"]
        [::std::mem::offset_of!(_UMS_SCHEDULER_STARTUP_INFO, CompletionList) - 8usize];
    ["Offset of field: _UMS_SCHEDULER_STARTUP_INFO::SchedulerProc"]
        [::std::mem::offset_of!(_UMS_SCHEDULER_STARTUP_INFO, SchedulerProc) - 16usize];
    ["Offset of field: _UMS_SCHEDULER_STARTUP_INFO::SchedulerParam"]
        [::std::mem::offset_of!(_UMS_SCHEDULER_STARTUP_INFO, SchedulerParam) - 24usize];
};
pub type UMS_SCHEDULER_STARTUP_INFO = _UMS_SCHEDULER_STARTUP_INFO;
pub type PUMS_SCHEDULER_STARTUP_INFO = *mut _UMS_SCHEDULER_STARTUP_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _UMS_SYSTEM_THREAD_INFORMATION {
    pub UmsVersion: ULONG,
    pub __bindgen_anon_1: _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1 {
    pub __bindgen_anon_1: _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    pub ThreadUmsFlags: ULONG,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn IsUmsSchedulerThread(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsUmsSchedulerThread(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsUmsSchedulerThread_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsUmsSchedulerThread_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn IsUmsWorkerThread(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_IsUmsWorkerThread(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn IsUmsWorkerThread_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_IsUmsWorkerThread_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        IsUmsSchedulerThread: ULONG,
        IsUmsWorkerThread: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let IsUmsSchedulerThread: u32 = unsafe { ::std::mem::transmute(IsUmsSchedulerThread) };
            IsUmsSchedulerThread as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IsUmsWorkerThread: u32 = unsafe { ::std::mem::transmute(IsUmsWorkerThread) };
            IsUmsWorkerThread as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1"]
        [::std::mem::size_of::<_UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1"]
        [::std::mem::align_of::<_UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1>() - 4usize];
    ["Offset of field: _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1::ThreadUmsFlags"][::std::mem::offset_of!(
        _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1,
        ThreadUmsFlags
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UMS_SYSTEM_THREAD_INFORMATION"]
        [::std::mem::size_of::<_UMS_SYSTEM_THREAD_INFORMATION>() - 8usize];
    ["Alignment of _UMS_SYSTEM_THREAD_INFORMATION"]
        [::std::mem::align_of::<_UMS_SYSTEM_THREAD_INFORMATION>() - 4usize];
    ["Offset of field: _UMS_SYSTEM_THREAD_INFORMATION::UmsVersion"]
        [::std::mem::offset_of!(_UMS_SYSTEM_THREAD_INFORMATION, UmsVersion) - 0usize];
};
pub type UMS_SYSTEM_THREAD_INFORMATION = _UMS_SYSTEM_THREAD_INFORMATION;
pub type PUMS_SYSTEM_THREAD_INFORMATION = *mut _UMS_SYSTEM_THREAD_INFORMATION;
unsafe extern "C" {
    pub fn CreateUmsCompletionList(UmsCompletionList: *mut PUMS_COMPLETION_LIST) -> BOOL;
}
unsafe extern "C" {
    pub fn DequeueUmsCompletionListItems(
        UmsCompletionList: PUMS_COMPLETION_LIST,
        WaitTimeOut: DWORD,
        UmsThreadList: *mut PUMS_CONTEXT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUmsCompletionListEvent(
        UmsCompletionList: PUMS_COMPLETION_LIST,
        UmsCompletionEvent: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ExecuteUmsThread(UmsThread: PUMS_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn UmsThreadYield(SchedulerParam: PVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteUmsCompletionList(UmsCompletionList: PUMS_COMPLETION_LIST) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentUmsThread() -> PUMS_CONTEXT;
}
unsafe extern "C" {
    pub fn GetNextUmsListItem(UmsContext: PUMS_CONTEXT) -> PUMS_CONTEXT;
}
unsafe extern "C" {
    pub fn QueryUmsThreadInformation(
        UmsThread: PUMS_CONTEXT,
        UmsThreadInfoClass: UMS_THREAD_INFO_CLASS,
        UmsThreadInformation: PVOID,
        UmsThreadInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetUmsThreadInformation(
        UmsThread: PUMS_CONTEXT,
        UmsThreadInfoClass: UMS_THREAD_INFO_CLASS,
        UmsThreadInformation: PVOID,
        UmsThreadInformationLength: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteUmsThreadContext(UmsThread: PUMS_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateUmsThreadContext(lpUmsThread: *mut PUMS_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn EnterUmsSchedulingMode(SchedulerStartupInfo: PUMS_SCHEDULER_STARTUP_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUmsSystemThreadInformation(
        ThreadHandle: HANDLE,
        SystemThreadInfo: PUMS_SYSTEM_THREAD_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadAffinityMask(hThread: HANDLE, dwThreadAffinityMask: DWORD_PTR) -> DWORD_PTR;
}
unsafe extern "C" {
    pub fn SetProcessDEPPolicy(dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessDEPPolicy(hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn RequestWakeupLatency(latency: LATENCY_TIME) -> BOOL;
}
unsafe extern "C" {
    pub fn IsSystemResumeAutomatic() -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadSelectorEntry(
        hThread: HANDLE,
        dwSelector: DWORD,
        lpSelectorEntry: LPLDT_ENTRY,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadExecutionState(esFlags: EXECUTION_STATE) -> EXECUTION_STATE;
}
pub type POWER_REQUEST_CONTEXT = REASON_CONTEXT;
pub type PPOWER_REQUEST_CONTEXT = *mut REASON_CONTEXT;
pub type LPPOWER_REQUEST_CONTEXT = *mut REASON_CONTEXT;
unsafe extern "C" {
    pub fn PowerCreateRequest(Context: PREASON_CONTEXT) -> HANDLE;
}
unsafe extern "C" {
    pub fn PowerSetRequest(PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn PowerClearRequest(PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileCompletionNotificationModes(FileHandle: HANDLE, Flags: UCHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn Wow64GetThreadSelectorEntry(
        hThread: HANDLE,
        dwSelector: DWORD,
        lpSelectorEntry: PWOW64_LDT_ENTRY,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DebugSetProcessKillOnExit(KillOnExit: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn DebugBreakProcess(Process: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn PulseEvent(hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GlobalDeleteAtom(nAtom: ATOM) -> ATOM;
}
unsafe extern "C" {
    pub fn InitAtomTable(nSize: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteAtom(nAtom: ATOM) -> ATOM;
}
unsafe extern "C" {
    pub fn SetHandleCount(uNumber: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn RequestDeviceWakeup(hDevice: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn CancelDeviceWakeupRequest(hDevice: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDevicePowerState(hDevice: HANDLE, pfOn: *mut BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn SetMessageWaitingIndicator(hMsgIndicator: HANDLE, ulMsgCount: ULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileShortNameA(hFile: HANDLE, lpShortName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileShortNameW(hFile: HANDLE, lpShortName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn LoadModule(lpModuleName: LPCSTR, lpParameterBlock: LPVOID) -> DWORD;
}
unsafe extern "C" {
    pub fn WinExec(lpCmdLine: LPCSTR, uCmdShow: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn ClearCommBreak(hFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ClearCommError(hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetupComm(hFile: HANDLE, dwInQueue: DWORD, dwOutQueue: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EscapeCommFunction(hFile: HANDLE, dwFunc: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommMask(hFile: HANDLE, lpEvtMask: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommProperties(hFile: HANDLE, lpCommProp: LPCOMMPROP) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommModemStatus(hFile: HANDLE, lpModemStat: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommState(hFile: HANDLE, lpDCB: LPDCB) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS) -> BOOL;
}
unsafe extern "C" {
    pub fn PurgeComm(hFile: HANDLE, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCommBreak(hFile: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCommMask(hFile: HANDLE, dwEvtMask: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCommState(hFile: HANDLE, lpDCB: LPDCB) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS) -> BOOL;
}
unsafe extern "C" {
    pub fn TransmitCommChar(hFile: HANDLE, cChar: ::std::os::raw::c_char) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitCommEvent(hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenCommPort(
        uPortNumber: ULONG,
        dwDesiredAccess: DWORD,
        dwFlagsAndAttributes: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetCommPorts(
        lpPortNumbers: PULONG,
        uPortNumbersCount: ULONG,
        puPortNumbersFound: PULONG,
    ) -> ULONG;
}
unsafe extern "C" {
    pub fn SetTapePosition(
        hDevice: HANDLE,
        dwPositionMethod: DWORD,
        dwPartition: DWORD,
        dwOffsetLow: DWORD,
        dwOffsetHigh: DWORD,
        bImmediate: BOOL,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTapePosition(
        hDevice: HANDLE,
        dwPositionType: DWORD,
        lpdwPartition: LPDWORD,
        lpdwOffsetLow: LPDWORD,
        lpdwOffsetHigh: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn PrepareTape(hDevice: HANDLE, dwOperation: DWORD, bImmediate: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn EraseTape(hDevice: HANDLE, dwEraseType: DWORD, bImmediate: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn CreateTapePartition(
        hDevice: HANDLE,
        dwPartitionMethod: DWORD,
        dwCount: DWORD,
        dwSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WriteTapemark(
        hDevice: HANDLE,
        dwTapemarkType: DWORD,
        dwTapemarkCount: DWORD,
        bImmediate: BOOL,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTapeStatus(hDevice: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTapeParameters(
        hDevice: HANDLE,
        dwOperation: DWORD,
        lpdwSize: LPDWORD,
        lpTapeInformation: LPVOID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SetTapeParameters(
        hDevice: HANDLE,
        dwOperation: DWORD,
        lpTapeInformation: LPVOID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn MulDiv(
        nNumber: ::std::os::raw::c_int,
        nNumerator: ::std::os::raw::c_int,
        nDenominator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyAlwaysOff: _DEP_SYSTEM_POLICY_TYPE = 0;
pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyAlwaysOn: _DEP_SYSTEM_POLICY_TYPE = 1;
pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyOptIn: _DEP_SYSTEM_POLICY_TYPE = 2;
pub const _DEP_SYSTEM_POLICY_TYPE_DEPPolicyOptOut: _DEP_SYSTEM_POLICY_TYPE = 3;
pub const _DEP_SYSTEM_POLICY_TYPE_DEPTotalPolicyCount: _DEP_SYSTEM_POLICY_TYPE = 4;
pub type _DEP_SYSTEM_POLICY_TYPE = ::std::os::raw::c_int;
pub use self::_DEP_SYSTEM_POLICY_TYPE as DEP_SYSTEM_POLICY_TYPE;
unsafe extern "C" {
    pub fn GetSystemDEPPolicy() -> DEP_SYSTEM_POLICY_TYPE;
}
unsafe extern "C" {
    pub fn GetSystemRegistryQuota(pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn FileTimeToDosDateTime(
        lpFileTime: *const FILETIME,
        lpFatDate: LPWORD,
        lpFatTime: LPWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DosDateTimeToFileTime(wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME) -> BOOL;
}
unsafe extern "C" {
    pub fn FormatMessageA(
        dwFlags: DWORD,
        lpSource: LPCVOID,
        dwMessageId: DWORD,
        dwLanguageId: DWORD,
        lpBuffer: LPSTR,
        nSize: DWORD,
        Arguments: *mut va_list,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn FormatMessageW(
        dwFlags: DWORD,
        lpSource: LPCVOID,
        dwMessageId: DWORD,
        dwLanguageId: DWORD,
        lpBuffer: LPWSTR,
        nSize: DWORD,
        Arguments: *mut va_list,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn CreateMailslotA(
        lpName: LPCSTR,
        nMaxMessageSize: DWORD,
        lReadTimeout: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateMailslotW(
        lpName: LPCWSTR,
        nMaxMessageSize: DWORD,
        lReadTimeout: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetMailslotInfo(
        hMailslot: HANDLE,
        lpMaxMessageSize: LPDWORD,
        lpNextSize: LPDWORD,
        lpMessageCount: LPDWORD,
        lpReadTimeout: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetMailslotInfo(hMailslot: HANDLE, lReadTimeout: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EncryptFileA(lpFileName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn EncryptFileW(lpFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn DecryptFileA(lpFileName: LPCSTR, dwReserved: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DecryptFileW(lpFileName: LPCWSTR, dwReserved: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn FileEncryptionStatusA(lpFileName: LPCSTR, lpStatus: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn FileEncryptionStatusW(lpFileName: LPCWSTR, lpStatus: LPDWORD) -> BOOL;
}
pub type PFE_EXPORT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(pbData: PBYTE, pvCallbackContext: PVOID, ulLength: ULONG) -> DWORD,
>;
pub type PFE_IMPORT_FUNC = ::std::option::Option<
    unsafe extern "C" fn(pbData: PBYTE, pvCallbackContext: PVOID, ulLength: PULONG) -> DWORD,
>;
unsafe extern "C" {
    pub fn OpenEncryptedFileRawA(
        lpFileName: LPCSTR,
        ulFlags: ULONG,
        pvContext: *mut PVOID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn OpenEncryptedFileRawW(
        lpFileName: LPCWSTR,
        ulFlags: ULONG,
        pvContext: *mut PVOID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ReadEncryptedFileRaw(
        pfExportCallback: PFE_EXPORT_FUNC,
        pvCallbackContext: PVOID,
        pvContext: PVOID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WriteEncryptedFileRaw(
        pfImportCallback: PFE_IMPORT_FUNC,
        pvCallbackContext: PVOID,
        pvContext: PVOID,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn CloseEncryptedFileRaw(pvContext: PVOID);
}
unsafe extern "C" {
    pub fn lstrcmpA(lpString1: LPCSTR, lpString2: LPCSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstrcmpW(lpString1: LPCWSTR, lpString2: LPCWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstrcmpiA(lpString1: LPCSTR, lpString2: LPCSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstrcmpiW(lpString1: LPCWSTR, lpString2: LPCWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstrcpynA(
        lpString1: LPSTR,
        lpString2: LPCSTR,
        iMaxLength: ::std::os::raw::c_int,
    ) -> LPSTR;
}
unsafe extern "C" {
    pub fn lstrcpynW(
        lpString1: LPWSTR,
        lpString2: LPCWSTR,
        iMaxLength: ::std::os::raw::c_int,
    ) -> LPWSTR;
}
unsafe extern "C" {
    pub fn lstrcpyA(lpString1: LPSTR, lpString2: LPCSTR) -> LPSTR;
}
unsafe extern "C" {
    pub fn lstrcpyW(lpString1: LPWSTR, lpString2: LPCWSTR) -> LPWSTR;
}
unsafe extern "C" {
    pub fn lstrcatA(lpString1: LPSTR, lpString2: LPCSTR) -> LPSTR;
}
unsafe extern "C" {
    pub fn lstrcatW(lpString1: LPWSTR, lpString2: LPCWSTR) -> LPWSTR;
}
unsafe extern "C" {
    pub fn lstrlenA(lpString: LPCSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lstrlenW(lpString: LPCWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OpenFile(lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: UINT) -> HFILE;
}
unsafe extern "C" {
    pub fn _lopen(lpPathName: LPCSTR, iReadWrite: ::std::os::raw::c_int) -> HFILE;
}
unsafe extern "C" {
    pub fn _lcreat(lpPathName: LPCSTR, iAttribute: ::std::os::raw::c_int) -> HFILE;
}
unsafe extern "C" {
    pub fn _lread(hFile: HFILE, lpBuffer: LPVOID, uBytes: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn _lwrite(hFile: HFILE, lpBuffer: LPCCH, uBytes: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn _hread(
        hFile: HFILE,
        lpBuffer: LPVOID,
        lBytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _hwrite(
        hFile: HFILE,
        lpBuffer: LPCCH,
        lBytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _lclose(hFile: HFILE) -> HFILE;
}
unsafe extern "C" {
    pub fn _llseek(hFile: HFILE, lOffset: LONG, iOrigin: ::std::os::raw::c_int) -> LONG;
}
unsafe extern "C" {
    pub fn IsTextUnicode(
        lpv: *const ::std::os::raw::c_void,
        iSize: ::std::os::raw::c_int,
        lpiResult: LPINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BackupRead(
        hFile: HANDLE,
        lpBuffer: LPBYTE,
        nNumberOfBytesToRead: DWORD,
        lpNumberOfBytesRead: LPDWORD,
        bAbort: BOOL,
        bProcessSecurity: BOOL,
        lpContext: *mut LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BackupSeek(
        hFile: HANDLE,
        dwLowBytesToSeek: DWORD,
        dwHighBytesToSeek: DWORD,
        lpdwLowByteSeeked: LPDWORD,
        lpdwHighByteSeeked: LPDWORD,
        lpContext: *mut LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BackupWrite(
        hFile: HANDLE,
        lpBuffer: LPBYTE,
        nNumberOfBytesToWrite: DWORD,
        lpNumberOfBytesWritten: LPDWORD,
        bAbort: BOOL,
        bProcessSecurity: BOOL,
        lpContext: *mut LPVOID,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WIN32_STREAM_ID {
    pub dwStreamId: DWORD,
    pub dwStreamAttributes: DWORD,
    pub Size: LARGE_INTEGER,
    pub dwStreamNameSize: DWORD,
    pub cStreamName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WIN32_STREAM_ID"][::std::mem::size_of::<_WIN32_STREAM_ID>() - 24usize];
    ["Alignment of _WIN32_STREAM_ID"][::std::mem::align_of::<_WIN32_STREAM_ID>() - 8usize];
    ["Offset of field: _WIN32_STREAM_ID::dwStreamId"]
        [::std::mem::offset_of!(_WIN32_STREAM_ID, dwStreamId) - 0usize];
    ["Offset of field: _WIN32_STREAM_ID::dwStreamAttributes"]
        [::std::mem::offset_of!(_WIN32_STREAM_ID, dwStreamAttributes) - 4usize];
    ["Offset of field: _WIN32_STREAM_ID::Size"]
        [::std::mem::offset_of!(_WIN32_STREAM_ID, Size) - 8usize];
    ["Offset of field: _WIN32_STREAM_ID::dwStreamNameSize"]
        [::std::mem::offset_of!(_WIN32_STREAM_ID, dwStreamNameSize) - 16usize];
    ["Offset of field: _WIN32_STREAM_ID::cStreamName"]
        [::std::mem::offset_of!(_WIN32_STREAM_ID, cStreamName) - 20usize];
};
pub type WIN32_STREAM_ID = _WIN32_STREAM_ID;
pub type LPWIN32_STREAM_ID = *mut _WIN32_STREAM_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOEXA {
    pub StartupInfo: STARTUPINFOA,
    pub lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _STARTUPINFOEXA"][::std::mem::size_of::<_STARTUPINFOEXA>() - 112usize];
    ["Alignment of _STARTUPINFOEXA"][::std::mem::align_of::<_STARTUPINFOEXA>() - 8usize];
    ["Offset of field: _STARTUPINFOEXA::StartupInfo"]
        [::std::mem::offset_of!(_STARTUPINFOEXA, StartupInfo) - 0usize];
    ["Offset of field: _STARTUPINFOEXA::lpAttributeList"]
        [::std::mem::offset_of!(_STARTUPINFOEXA, lpAttributeList) - 104usize];
};
pub type STARTUPINFOEXA = _STARTUPINFOEXA;
pub type LPSTARTUPINFOEXA = *mut _STARTUPINFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _STARTUPINFOEXW {
    pub StartupInfo: STARTUPINFOW,
    pub lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _STARTUPINFOEXW"][::std::mem::size_of::<_STARTUPINFOEXW>() - 112usize];
    ["Alignment of _STARTUPINFOEXW"][::std::mem::align_of::<_STARTUPINFOEXW>() - 8usize];
    ["Offset of field: _STARTUPINFOEXW::StartupInfo"]
        [::std::mem::offset_of!(_STARTUPINFOEXW, StartupInfo) - 0usize];
    ["Offset of field: _STARTUPINFOEXW::lpAttributeList"]
        [::std::mem::offset_of!(_STARTUPINFOEXW, lpAttributeList) - 104usize];
};
pub type STARTUPINFOEXW = _STARTUPINFOEXW;
pub type LPSTARTUPINFOEXW = *mut _STARTUPINFOEXW;
pub type STARTUPINFOEX = STARTUPINFOEXA;
pub type LPSTARTUPINFOEX = LPSTARTUPINFOEXA;
unsafe extern "C" {
    pub fn OpenMutexA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateSemaphoreA(
        lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
        lInitialCount: LONG,
        lMaximumCount: LONG,
        lpName: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenSemaphoreA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateWaitableTimerA(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        bManualReset: BOOL,
        lpTimerName: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenWaitableTimerA(
        dwDesiredAccess: DWORD,
        bInheritHandle: BOOL,
        lpTimerName: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateSemaphoreExA(
        lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES,
        lInitialCount: LONG,
        lMaximumCount: LONG,
        lpName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateWaitableTimerExA(
        lpTimerAttributes: LPSECURITY_ATTRIBUTES,
        lpTimerName: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateFileMappingA(
        hFile: HANDLE,
        lpFileMappingAttributes: LPSECURITY_ATTRIBUTES,
        flProtect: DWORD,
        dwMaximumSizeHigh: DWORD,
        dwMaximumSizeLow: DWORD,
        lpName: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateFileMappingNumaA(
        hFile: HANDLE,
        lpFileMappingAttributes: LPSECURITY_ATTRIBUTES,
        flProtect: DWORD,
        dwMaximumSizeHigh: DWORD,
        dwMaximumSizeLow: DWORD,
        lpName: LPCSTR,
        nndPreferred: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenFileMappingA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR)
    -> HANDLE;
}
unsafe extern "C" {
    pub fn GetLogicalDriveStringsA(nBufferLength: DWORD, lpBuffer: LPSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn LoadPackagedLibrary(lpwLibFileName: LPCWSTR, Reserved: DWORD) -> HMODULE;
}
unsafe extern "C" {
    pub fn QueryFullProcessImageNameA(
        hProcess: HANDLE,
        dwFlags: DWORD,
        lpExeName: LPSTR,
        lpdwSize: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryFullProcessImageNameW(
        hProcess: HANDLE,
        dwFlags: DWORD,
        lpExeName: LPWSTR,
        lpdwSize: PDWORD,
    ) -> BOOL;
}
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeParentProcess: _PROC_THREAD_ATTRIBUTE_NUM =
    0;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeHandleList: _PROC_THREAD_ATTRIBUTE_NUM = 2;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeGroupAffinity: _PROC_THREAD_ATTRIBUTE_NUM =
    3;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributePreferredNode: _PROC_THREAD_ATTRIBUTE_NUM =
    4;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeIdealProcessor: _PROC_THREAD_ATTRIBUTE_NUM =
    5;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeUmsThread: _PROC_THREAD_ATTRIBUTE_NUM = 6;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeMitigationPolicy:
    _PROC_THREAD_ATTRIBUTE_NUM = 7;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeSecurityCapabilities:
    _PROC_THREAD_ATTRIBUTE_NUM = 9;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeProtectionLevel:
    _PROC_THREAD_ATTRIBUTE_NUM = 11;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeJobList: _PROC_THREAD_ATTRIBUTE_NUM = 13;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeChildProcessPolicy:
    _PROC_THREAD_ATTRIBUTE_NUM = 14;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeAllApplicationPackagesPolicy:
    _PROC_THREAD_ATTRIBUTE_NUM = 15;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeWin32kFilter: _PROC_THREAD_ATTRIBUTE_NUM =
    16;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeSafeOpenPromptOriginClaim:
    _PROC_THREAD_ATTRIBUTE_NUM = 17;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeDesktopAppPolicy:
    _PROC_THREAD_ATTRIBUTE_NUM = 18;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributePseudoConsole: _PROC_THREAD_ATTRIBUTE_NUM =
    22;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeMitigationAuditPolicy:
    _PROC_THREAD_ATTRIBUTE_NUM = 24;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeMachineType: _PROC_THREAD_ATTRIBUTE_NUM =
    25;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeComponentFilter:
    _PROC_THREAD_ATTRIBUTE_NUM = 26;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeEnableOptionalXStateFeatures:
    _PROC_THREAD_ATTRIBUTE_NUM = 27;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeTrustedApp: _PROC_THREAD_ATTRIBUTE_NUM = 29;
pub const _PROC_THREAD_ATTRIBUTE_NUM_ProcThreadAttributeSveVectorLength:
    _PROC_THREAD_ATTRIBUTE_NUM = 30;
pub type _PROC_THREAD_ATTRIBUTE_NUM = ::std::os::raw::c_int;
pub use self::_PROC_THREAD_ATTRIBUTE_NUM as PROC_THREAD_ATTRIBUTE_NUM;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _PROCESS_CREATION_SVE_VECTOR_LENGTH {
    pub Data: ULONG,
    pub __bindgen_anon_1: _PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1"]
        [::std::mem::size_of::<_PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1>() - 4usize];
    ["Alignment of _PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1"]
        [::std::mem::align_of::<_PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1>() - 4usize];
};
impl _PROCESS_CREATION_SVE_VECTOR_LENGTH__bindgen_ty_1 {
    #[inline]
    pub fn VectorLength(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_VectorLength(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn VectorLength_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_VectorLength_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn FlagsReserved(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_FlagsReserved(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn FlagsReserved_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                8u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_FlagsReserved_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                8u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        VectorLength: ULONG,
        FlagsReserved: ULONG,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let VectorLength: u32 = unsafe { ::std::mem::transmute(VectorLength) };
            VectorLength as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let FlagsReserved: u32 = unsafe { ::std::mem::transmute(FlagsReserved) };
            FlagsReserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROCESS_CREATION_SVE_VECTOR_LENGTH"]
        [::std::mem::size_of::<_PROCESS_CREATION_SVE_VECTOR_LENGTH>() - 4usize];
    ["Alignment of _PROCESS_CREATION_SVE_VECTOR_LENGTH"]
        [::std::mem::align_of::<_PROCESS_CREATION_SVE_VECTOR_LENGTH>() - 4usize];
    ["Offset of field: _PROCESS_CREATION_SVE_VECTOR_LENGTH::Data"]
        [::std::mem::offset_of!(_PROCESS_CREATION_SVE_VECTOR_LENGTH, Data) - 0usize];
};
pub type PROCESS_CREATION_SVE_VECTOR_LENGTH = _PROCESS_CREATION_SVE_VECTOR_LENGTH;
pub type PPROCESS_CREATION_SVE_VECTOR_LENGTH = *mut _PROCESS_CREATION_SVE_VECTOR_LENGTH;
unsafe extern "C" {
    pub fn GetStartupInfoA(lpStartupInfo: LPSTARTUPINFOA);
}
unsafe extern "C" {
    pub fn GetFirmwareEnvironmentVariableA(
        lpName: LPCSTR,
        lpGuid: LPCSTR,
        pBuffer: PVOID,
        nSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFirmwareEnvironmentVariableW(
        lpName: LPCWSTR,
        lpGuid: LPCWSTR,
        pBuffer: PVOID,
        nSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFirmwareEnvironmentVariableExA(
        lpName: LPCSTR,
        lpGuid: LPCSTR,
        pBuffer: PVOID,
        nSize: DWORD,
        pdwAttribubutes: PDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFirmwareEnvironmentVariableExW(
        lpName: LPCWSTR,
        lpGuid: LPCWSTR,
        pBuffer: PVOID,
        nSize: DWORD,
        pdwAttribubutes: PDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SetFirmwareEnvironmentVariableA(
        lpName: LPCSTR,
        lpGuid: LPCSTR,
        pValue: PVOID,
        nSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFirmwareEnvironmentVariableW(
        lpName: LPCWSTR,
        lpGuid: LPCWSTR,
        pValue: PVOID,
        nSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFirmwareEnvironmentVariableExA(
        lpName: LPCSTR,
        lpGuid: LPCSTR,
        pValue: PVOID,
        nSize: DWORD,
        dwAttributes: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFirmwareEnvironmentVariableExW(
        lpName: LPCWSTR,
        lpGuid: LPCWSTR,
        pValue: PVOID,
        nSize: DWORD,
        dwAttributes: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFirmwareType(FirmwareType: PFIRMWARE_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn IsNativeVhdBoot(NativeVhdBoot: PBOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn FindResourceA(hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR) -> HRSRC;
}
unsafe extern "C" {
    pub fn FindResourceExA(
        hModule: HMODULE,
        lpType: LPCSTR,
        lpName: LPCSTR,
        wLanguage: WORD,
    ) -> HRSRC;
}
unsafe extern "C" {
    pub fn EnumResourceTypesA(
        hModule: HMODULE,
        lpEnumFunc: ENUMRESTYPEPROCA,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceTypesW(
        hModule: HMODULE,
        lpEnumFunc: ENUMRESTYPEPROCW,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceLanguagesA(
        hModule: HMODULE,
        lpType: LPCSTR,
        lpName: LPCSTR,
        lpEnumFunc: ENUMRESLANGPROCA,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumResourceLanguagesW(
        hModule: HMODULE,
        lpType: LPCWSTR,
        lpName: LPCWSTR,
        lpEnumFunc: ENUMRESLANGPROCW,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BeginUpdateResourceA(pFileName: LPCSTR, bDeleteExistingResources: BOOL) -> HANDLE;
}
unsafe extern "C" {
    pub fn BeginUpdateResourceW(pFileName: LPCWSTR, bDeleteExistingResources: BOOL) -> HANDLE;
}
unsafe extern "C" {
    pub fn UpdateResourceA(
        hUpdate: HANDLE,
        lpType: LPCSTR,
        lpName: LPCSTR,
        wLanguage: WORD,
        lpData: LPVOID,
        cb: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UpdateResourceW(
        hUpdate: HANDLE,
        lpType: LPCWSTR,
        lpName: LPCWSTR,
        wLanguage: WORD,
        lpData: LPVOID,
        cb: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EndUpdateResourceA(hUpdate: HANDLE, fDiscard: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn EndUpdateResourceW(hUpdate: HANDLE, fDiscard: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GlobalAddAtomA(lpString: LPCSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn GlobalAddAtomW(lpString: LPCWSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn GlobalAddAtomExA(lpString: LPCSTR, Flags: DWORD) -> ATOM;
}
unsafe extern "C" {
    pub fn GlobalAddAtomExW(lpString: LPCWSTR, Flags: DWORD) -> ATOM;
}
unsafe extern "C" {
    pub fn GlobalFindAtomA(lpString: LPCSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn GlobalFindAtomW(lpString: LPCWSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn GlobalGetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR, nSize: ::std::os::raw::c_int) -> UINT;
}
unsafe extern "C" {
    pub fn GlobalGetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR, nSize: ::std::os::raw::c_int) -> UINT;
}
unsafe extern "C" {
    pub fn AddAtomA(lpString: LPCSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn AddAtomW(lpString: LPCWSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn FindAtomA(lpString: LPCSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn FindAtomW(lpString: LPCWSTR) -> ATOM;
}
unsafe extern "C" {
    pub fn GetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR, nSize: ::std::os::raw::c_int) -> UINT;
}
unsafe extern "C" {
    pub fn GetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR, nSize: ::std::os::raw::c_int) -> UINT;
}
unsafe extern "C" {
    pub fn GetProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT) -> UINT;
}
unsafe extern "C" {
    pub fn GetProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT) -> UINT;
}
unsafe extern "C" {
    pub fn GetProfileStringA(
        lpAppName: LPCSTR,
        lpKeyName: LPCSTR,
        lpDefault: LPCSTR,
        lpReturnedString: LPSTR,
        nSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetProfileStringW(
        lpAppName: LPCWSTR,
        lpKeyName: LPCWSTR,
        lpDefault: LPCWSTR,
        lpReturnedString: LPWSTR,
        nSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WriteProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn WriteProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPrivateProfileIntA(
        lpAppName: LPCSTR,
        lpKeyName: LPCSTR,
        nDefault: INT,
        lpFileName: LPCSTR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetPrivateProfileIntW(
        lpAppName: LPCWSTR,
        lpKeyName: LPCWSTR,
        nDefault: INT,
        lpFileName: LPCWSTR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetPrivateProfileStringA(
        lpAppName: LPCSTR,
        lpKeyName: LPCSTR,
        lpDefault: LPCSTR,
        lpReturnedString: LPSTR,
        nSize: DWORD,
        lpFileName: LPCSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetPrivateProfileStringW(
        lpAppName: LPCWSTR,
        lpKeyName: LPCWSTR,
        lpDefault: LPCWSTR,
        lpReturnedString: LPWSTR,
        nSize: DWORD,
        lpFileName: LPCWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WritePrivateProfileStringA(
        lpAppName: LPCSTR,
        lpKeyName: LPCSTR,
        lpString: LPCSTR,
        lpFileName: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WritePrivateProfileStringW(
        lpAppName: LPCWSTR,
        lpKeyName: LPCWSTR,
        lpString: LPCWSTR,
        lpFileName: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPrivateProfileSectionA(
        lpAppName: LPCSTR,
        lpReturnedString: LPSTR,
        nSize: DWORD,
        lpFileName: LPCSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetPrivateProfileSectionW(
        lpAppName: LPCWSTR,
        lpReturnedString: LPWSTR,
        nSize: DWORD,
        lpFileName: LPCWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WritePrivateProfileSectionA(
        lpAppName: LPCSTR,
        lpString: LPCSTR,
        lpFileName: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WritePrivateProfileSectionW(
        lpAppName: LPCWSTR,
        lpString: LPCWSTR,
        lpFileName: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPrivateProfileSectionNamesA(
        lpszReturnBuffer: LPSTR,
        nSize: DWORD,
        lpFileName: LPCSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetPrivateProfileSectionNamesW(
        lpszReturnBuffer: LPWSTR,
        nSize: DWORD,
        lpFileName: LPCWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetPrivateProfileStructA(
        lpszSection: LPCSTR,
        lpszKey: LPCSTR,
        lpStruct: LPVOID,
        uSizeStruct: UINT,
        szFile: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPrivateProfileStructW(
        lpszSection: LPCWSTR,
        lpszKey: LPCWSTR,
        lpStruct: LPVOID,
        uSizeStruct: UINT,
        szFile: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WritePrivateProfileStructA(
        lpszSection: LPCSTR,
        lpszKey: LPCSTR,
        lpStruct: LPVOID,
        uSizeStruct: UINT,
        szFile: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WritePrivateProfileStructW(
        lpszSection: LPCWSTR,
        lpszKey: LPCWSTR,
        lpStruct: LPVOID,
        uSizeStruct: UINT,
        szFile: LPCWSTR,
    ) -> BOOL;
}
pub type PGET_SYSTEM_WOW64_DIRECTORY_A =
    ::std::option::Option<unsafe extern "C" fn(lpBuffer: LPSTR, uSize: UINT) -> UINT>;
pub type PGET_SYSTEM_WOW64_DIRECTORY_W =
    ::std::option::Option<unsafe extern "C" fn(lpBuffer: LPWSTR, uSize: UINT) -> UINT>;
unsafe extern "C" {
    pub fn SetDllDirectoryA(lpPathName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDllDirectoryW(lpPathName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDllDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetDllDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn SetSearchPathMode(Flags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDirectoryExA(
        lpTemplateDirectory: LPCSTR,
        lpNewDirectory: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDirectoryExW(
        lpTemplateDirectory: LPCWSTR,
        lpNewDirectory: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDirectoryTransactedA(
        lpTemplateDirectory: LPCSTR,
        lpNewDirectory: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDirectoryTransactedW(
        lpTemplateDirectory: LPCWSTR,
        lpNewDirectory: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveDirectoryTransactedA(lpPathName: LPCSTR, hTransaction: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveDirectoryTransactedW(lpPathName: LPCWSTR, hTransaction: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFullPathNameTransactedA(
        lpFileName: LPCSTR,
        nBufferLength: DWORD,
        lpBuffer: LPSTR,
        lpFilePart: *mut LPSTR,
        hTransaction: HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFullPathNameTransactedW(
        lpFileName: LPCWSTR,
        nBufferLength: DWORD,
        lpBuffer: LPWSTR,
        lpFilePart: *mut LPWSTR,
        hTransaction: HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn DefineDosDeviceA(dwFlags: DWORD, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryDosDeviceA(lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn CreateFileTransactedA(
        lpFileName: LPCSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
        hTransaction: HANDLE,
        pusMiniVersion: PUSHORT,
        lpExtendedParameter: PVOID,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateFileTransactedW(
        lpFileName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwCreationDisposition: DWORD,
        dwFlagsAndAttributes: DWORD,
        hTemplateFile: HANDLE,
        hTransaction: HANDLE,
        pusMiniVersion: PUSHORT,
        lpExtendedParameter: PVOID,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn ReOpenFile(
        hOriginalFile: HANDLE,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        dwFlagsAndAttributes: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn SetFileAttributesTransactedA(
        lpFileName: LPCSTR,
        dwFileAttributes: DWORD,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileAttributesTransactedW(
        lpFileName: LPCWSTR,
        dwFileAttributes: DWORD,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileAttributesTransactedA(
        lpFileName: LPCSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileAttributesTransactedW(
        lpFileName: LPCWSTR,
        fInfoLevelId: GET_FILEEX_INFO_LEVELS,
        lpFileInformation: LPVOID,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCompressedFileSizeTransactedA(
        lpFileName: LPCSTR,
        lpFileSizeHigh: LPDWORD,
        hTransaction: HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetCompressedFileSizeTransactedW(
        lpFileName: LPCWSTR,
        lpFileSizeHigh: LPDWORD,
        hTransaction: HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn DeleteFileTransactedA(lpFileName: LPCSTR, hTransaction: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteFileTransactedW(lpFileName: LPCWSTR, hTransaction: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckNameLegalDOS8Dot3A(
        lpName: LPCSTR,
        lpOemName: LPSTR,
        OemNameSize: DWORD,
        pbNameContainsSpaces: PBOOL,
        pbNameLegal: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckNameLegalDOS8Dot3W(
        lpName: LPCWSTR,
        lpOemName: LPSTR,
        OemNameSize: DWORD,
        pbNameContainsSpaces: PBOOL,
        pbNameLegal: PBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstFileTransactedA(
        lpFileName: LPCSTR,
        fInfoLevelId: FINDEX_INFO_LEVELS,
        lpFindFileData: LPVOID,
        fSearchOp: FINDEX_SEARCH_OPS,
        lpSearchFilter: LPVOID,
        dwAdditionalFlags: DWORD,
        hTransaction: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstFileTransactedW(
        lpFileName: LPCWSTR,
        fInfoLevelId: FINDEX_INFO_LEVELS,
        lpFindFileData: LPVOID,
        fSearchOp: FINDEX_SEARCH_OPS,
        lpSearchFilter: LPVOID,
        dwAdditionalFlags: DWORD,
        hTransaction: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CopyFileA(
        lpExistingFileName: LPCSTR,
        lpNewFileName: LPCSTR,
        bFailIfExists: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyFileW(
        lpExistingFileName: LPCWSTR,
        lpNewFileName: LPCWSTR,
        bFailIfExists: BOOL,
    ) -> BOOL;
}
pub type LPPROGRESS_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        TotalFileSize: LARGE_INTEGER,
        TotalBytesTransferred: LARGE_INTEGER,
        StreamSize: LARGE_INTEGER,
        StreamBytesTransferred: LARGE_INTEGER,
        dwStreamNumber: DWORD,
        dwCallbackReason: DWORD,
        hSourceFile: HANDLE,
        hDestinationFile: HANDLE,
        lpData: LPVOID,
    ) -> DWORD,
>;
unsafe extern "C" {
    pub fn CopyFileExA(
        lpExistingFileName: LPCSTR,
        lpNewFileName: LPCSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        pbCancel: LPBOOL,
        dwCopyFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyFileExW(
        lpExistingFileName: LPCWSTR,
        lpNewFileName: LPCWSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        pbCancel: LPBOOL,
        dwCopyFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyFileTransactedA(
        lpExistingFileName: LPCSTR,
        lpNewFileName: LPCSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        pbCancel: LPBOOL,
        dwCopyFlags: DWORD,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyFileTransactedW(
        lpExistingFileName: LPCWSTR,
        lpNewFileName: LPCWSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        pbCancel: LPBOOL,
        dwCopyFlags: DWORD,
        hTransaction: HANDLE,
    ) -> BOOL;
}
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_NONE: _COPYFILE2_MESSAGE_TYPE = 0;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_CHUNK_STARTED: _COPYFILE2_MESSAGE_TYPE = 1;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_CHUNK_FINISHED: _COPYFILE2_MESSAGE_TYPE = 2;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_STREAM_STARTED: _COPYFILE2_MESSAGE_TYPE = 3;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_STREAM_FINISHED: _COPYFILE2_MESSAGE_TYPE = 4;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_POLL_CONTINUE: _COPYFILE2_MESSAGE_TYPE = 5;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_ERROR: _COPYFILE2_MESSAGE_TYPE = 6;
pub const _COPYFILE2_MESSAGE_TYPE_COPYFILE2_CALLBACK_MAX: _COPYFILE2_MESSAGE_TYPE = 7;
pub type _COPYFILE2_MESSAGE_TYPE = ::std::os::raw::c_int;
pub use self::_COPYFILE2_MESSAGE_TYPE as COPYFILE2_MESSAGE_TYPE;
pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_CONTINUE: _COPYFILE2_MESSAGE_ACTION = 0;
pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_CANCEL: _COPYFILE2_MESSAGE_ACTION = 1;
pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_STOP: _COPYFILE2_MESSAGE_ACTION = 2;
pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_QUIET: _COPYFILE2_MESSAGE_ACTION = 3;
pub const _COPYFILE2_MESSAGE_ACTION_COPYFILE2_PROGRESS_PAUSE: _COPYFILE2_MESSAGE_ACTION = 4;
pub type _COPYFILE2_MESSAGE_ACTION = ::std::os::raw::c_int;
pub use self::_COPYFILE2_MESSAGE_ACTION as COPYFILE2_MESSAGE_ACTION;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_NONE: _COPYFILE2_COPY_PHASE = 0;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_PREPARE_SOURCE: _COPYFILE2_COPY_PHASE = 1;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_PREPARE_DEST: _COPYFILE2_COPY_PHASE = 2;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_READ_SOURCE: _COPYFILE2_COPY_PHASE = 3;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_WRITE_DESTINATION: _COPYFILE2_COPY_PHASE = 4;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_SERVER_COPY: _COPYFILE2_COPY_PHASE = 5;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_NAMEGRAFT_COPY: _COPYFILE2_COPY_PHASE = 6;
pub const _COPYFILE2_COPY_PHASE_COPYFILE2_PHASE_MAX: _COPYFILE2_COPY_PHASE = 7;
pub type _COPYFILE2_COPY_PHASE = ::std::os::raw::c_int;
pub use self::_COPYFILE2_COPY_PHASE as COPYFILE2_COPY_PHASE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COPYFILE2_MESSAGE {
    pub Type: COPYFILE2_MESSAGE_TYPE,
    pub dwPadding: DWORD,
    pub Info: COPYFILE2_MESSAGE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union COPYFILE2_MESSAGE__bindgen_ty_1 {
    pub ChunkStarted: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
    pub ChunkFinished: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
    pub StreamStarted: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
    pub StreamFinished: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
    pub PollContinue: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5,
    pub Error: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1 {
    pub dwStreamNumber: DWORD,
    pub dwReserved: DWORD,
    pub hSourceFile: HANDLE,
    pub hDestinationFile: HANDLE,
    pub uliChunkNumber: ULARGE_INTEGER,
    pub uliChunkSize: ULARGE_INTEGER,
    pub uliStreamSize: ULARGE_INTEGER,
    pub uliTotalFileSize: ULARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1>() - 56usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::dwStreamNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        dwStreamNumber
    ) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::dwReserved"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        dwReserved
    ) - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::hSourceFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        hSourceFile
    ) - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::hDestinationFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        hDestinationFile
    )
        - 16usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::uliChunkNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        uliChunkNumber
    ) - 24usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::uliChunkSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        uliChunkSize
    ) - 32usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::uliStreamSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        uliStreamSize
    ) - 40usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1::uliTotalFileSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1,
        uliTotalFileSize
    )
        - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2 {
    pub dwStreamNumber: DWORD,
    pub dwFlags: DWORD,
    pub hSourceFile: HANDLE,
    pub hDestinationFile: HANDLE,
    pub uliChunkNumber: ULARGE_INTEGER,
    pub uliChunkSize: ULARGE_INTEGER,
    pub uliStreamSize: ULARGE_INTEGER,
    pub uliStreamBytesTransferred: ULARGE_INTEGER,
    pub uliTotalFileSize: ULARGE_INTEGER,
    pub uliTotalBytesTransferred: ULARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2>() - 72usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::dwStreamNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        dwStreamNumber
    ) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::dwFlags"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2, dwFlags) - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::hSourceFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        hSourceFile
    ) - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::hDestinationFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        hDestinationFile
    )
        - 16usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::uliChunkNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        uliChunkNumber
    ) - 24usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::uliChunkSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        uliChunkSize
    ) - 32usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::uliStreamSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        uliStreamSize
    ) - 40usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::uliStreamBytesTransferred"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        uliStreamBytesTransferred
    )
        - 48usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::uliTotalFileSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        uliTotalFileSize
    )
        - 56usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2::uliTotalBytesTransferred"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2,
        uliTotalBytesTransferred
    )
        - 64usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3 {
    pub dwStreamNumber: DWORD,
    pub dwReserved: DWORD,
    pub hSourceFile: HANDLE,
    pub hDestinationFile: HANDLE,
    pub uliStreamSize: ULARGE_INTEGER,
    pub uliTotalFileSize: ULARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3>() - 40usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3::dwStreamNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        dwStreamNumber
    ) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3::dwReserved"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        dwReserved
    ) - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3::hSourceFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        hSourceFile
    ) - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3::hDestinationFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        hDestinationFile
    )
        - 16usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3::uliStreamSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        uliStreamSize
    ) - 24usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3::uliTotalFileSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3,
        uliTotalFileSize
    )
        - 32usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4 {
    pub dwStreamNumber: DWORD,
    pub dwReserved: DWORD,
    pub hSourceFile: HANDLE,
    pub hDestinationFile: HANDLE,
    pub uliStreamSize: ULARGE_INTEGER,
    pub uliStreamBytesTransferred: ULARGE_INTEGER,
    pub uliTotalFileSize: ULARGE_INTEGER,
    pub uliTotalBytesTransferred: ULARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4>() - 56usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::dwStreamNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        dwStreamNumber
    ) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::dwReserved"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        dwReserved
    ) - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::hSourceFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        hSourceFile
    ) - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::hDestinationFile"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        hDestinationFile
    )
        - 16usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::uliStreamSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        uliStreamSize
    ) - 24usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::uliStreamBytesTransferred"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        uliStreamBytesTransferred
    )
        - 32usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::uliTotalFileSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        uliTotalFileSize
    )
        - 40usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4::uliTotalBytesTransferred"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4,
        uliTotalBytesTransferred
    )
        - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5 {
    pub dwReserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5>() - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5::dwReserved"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5,
        dwReserved
    ) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6 {
    pub CopyPhase: COPYFILE2_COPY_PHASE,
    pub dwStreamNumber: DWORD,
    pub hrFailure: HRESULT,
    pub dwReserved: DWORD,
    pub uliChunkNumber: ULARGE_INTEGER,
    pub uliStreamSize: ULARGE_INTEGER,
    pub uliStreamBytesTransferred: ULARGE_INTEGER,
    pub uliTotalFileSize: ULARGE_INTEGER,
    pub uliTotalBytesTransferred: ULARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6>() - 56usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::CopyPhase"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6, CopyPhase) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::dwStreamNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        dwStreamNumber
    ) - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::hrFailure"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6, hrFailure) - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::dwReserved"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        dwReserved
    ) - 12usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::uliChunkNumber"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        uliChunkNumber
    ) - 16usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::uliStreamSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        uliStreamSize
    ) - 24usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::uliStreamBytesTransferred"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        uliStreamBytesTransferred
    )
        - 32usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::uliTotalFileSize"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        uliTotalFileSize
    )
        - 40usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6::uliTotalBytesTransferred"][::std::mem::offset_of!(
        COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6,
        uliTotalBytesTransferred
    )
        - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE__bindgen_ty_1"]
        [::std::mem::size_of::<COPYFILE2_MESSAGE__bindgen_ty_1>() - 72usize];
    ["Alignment of COPYFILE2_MESSAGE__bindgen_ty_1"]
        [::std::mem::align_of::<COPYFILE2_MESSAGE__bindgen_ty_1>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1::ChunkStarted"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1, ChunkStarted) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1::ChunkFinished"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1, ChunkFinished) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1::StreamStarted"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1, StreamStarted) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1::StreamFinished"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1, StreamFinished) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1::PollContinue"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1, PollContinue) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE__bindgen_ty_1::Error"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE__bindgen_ty_1, Error) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_MESSAGE"][::std::mem::size_of::<COPYFILE2_MESSAGE>() - 80usize];
    ["Alignment of COPYFILE2_MESSAGE"][::std::mem::align_of::<COPYFILE2_MESSAGE>() - 8usize];
    ["Offset of field: COPYFILE2_MESSAGE::Type"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE, Type) - 0usize];
    ["Offset of field: COPYFILE2_MESSAGE::dwPadding"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE, dwPadding) - 4usize];
    ["Offset of field: COPYFILE2_MESSAGE::Info"]
        [::std::mem::offset_of!(COPYFILE2_MESSAGE, Info) - 8usize];
};
pub type PCOPYFILE2_PROGRESS_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        pMessage: *const COPYFILE2_MESSAGE,
        pvCallbackContext: PVOID,
    ) -> COPYFILE2_MESSAGE_ACTION,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COPYFILE2_EXTENDED_PARAMETERS {
    pub dwSize: DWORD,
    pub dwCopyFlags: DWORD,
    pub pfCancel: *mut BOOL,
    pub pProgressRoutine: PCOPYFILE2_PROGRESS_ROUTINE,
    pub pvCallbackContext: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_EXTENDED_PARAMETERS"]
        [::std::mem::size_of::<COPYFILE2_EXTENDED_PARAMETERS>() - 32usize];
    ["Alignment of COPYFILE2_EXTENDED_PARAMETERS"]
        [::std::mem::align_of::<COPYFILE2_EXTENDED_PARAMETERS>() - 8usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS::dwSize"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS, dwSize) - 0usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS::dwCopyFlags"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS, dwCopyFlags) - 4usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS::pfCancel"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS, pfCancel) - 8usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS::pProgressRoutine"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS, pProgressRoutine) - 16usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS::pvCallbackContext"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS, pvCallbackContext) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COPYFILE2_CREATE_OPLOCK_KEYS {
    pub ParentOplockKey: GUID,
    pub TargetOplockKey: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COPYFILE2_CREATE_OPLOCK_KEYS"]
        [::std::mem::size_of::<_COPYFILE2_CREATE_OPLOCK_KEYS>() - 32usize];
    ["Alignment of _COPYFILE2_CREATE_OPLOCK_KEYS"]
        [::std::mem::align_of::<_COPYFILE2_CREATE_OPLOCK_KEYS>() - 4usize];
    ["Offset of field: _COPYFILE2_CREATE_OPLOCK_KEYS::ParentOplockKey"]
        [::std::mem::offset_of!(_COPYFILE2_CREATE_OPLOCK_KEYS, ParentOplockKey) - 0usize];
    ["Offset of field: _COPYFILE2_CREATE_OPLOCK_KEYS::TargetOplockKey"]
        [::std::mem::offset_of!(_COPYFILE2_CREATE_OPLOCK_KEYS, TargetOplockKey) - 16usize];
};
pub type COPYFILE2_CREATE_OPLOCK_KEYS = _COPYFILE2_CREATE_OPLOCK_KEYS;
pub type PCOPYFILE2_CREATE_OPLOCK_KEYS = *mut _COPYFILE2_CREATE_OPLOCK_KEYS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COPYFILE2_EXTENDED_PARAMETERS_V2 {
    pub dwSize: DWORD,
    pub dwCopyFlags: DWORD,
    pub pfCancel: *mut BOOL,
    pub pProgressRoutine: PCOPYFILE2_PROGRESS_ROUTINE,
    pub pvCallbackContext: PVOID,
    pub dwCopyFlagsV2: DWORD,
    pub ioDesiredSize: ULONG,
    pub ioDesiredRate: ULONG,
    pub pProgressRoutineOld: LPPROGRESS_ROUTINE,
    pub SourceOplockKeys: PCOPYFILE2_CREATE_OPLOCK_KEYS,
    pub reserved: [PVOID; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COPYFILE2_EXTENDED_PARAMETERS_V2"]
        [::std::mem::size_of::<COPYFILE2_EXTENDED_PARAMETERS_V2>() - 112usize];
    ["Alignment of COPYFILE2_EXTENDED_PARAMETERS_V2"]
        [::std::mem::align_of::<COPYFILE2_EXTENDED_PARAMETERS_V2>() - 8usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::dwSize"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, dwSize) - 0usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::dwCopyFlags"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, dwCopyFlags) - 4usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::pfCancel"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, pfCancel) - 8usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::pProgressRoutine"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, pProgressRoutine) - 16usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::pvCallbackContext"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, pvCallbackContext) - 24usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::dwCopyFlagsV2"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, dwCopyFlagsV2) - 32usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::ioDesiredSize"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, ioDesiredSize) - 36usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::ioDesiredRate"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, ioDesiredRate) - 40usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::pProgressRoutineOld"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, pProgressRoutineOld) - 48usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::SourceOplockKeys"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, SourceOplockKeys) - 56usize];
    ["Offset of field: COPYFILE2_EXTENDED_PARAMETERS_V2::reserved"]
        [::std::mem::offset_of!(COPYFILE2_EXTENDED_PARAMETERS_V2, reserved) - 64usize];
};
unsafe extern "C" {
    pub fn CopyFile2(
        pwszExistingFileName: PCWSTR,
        pwszNewFileName: PCWSTR,
        pExtendedParameters: *mut COPYFILE2_EXTENDED_PARAMETERS,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn MoveFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD)
    -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileWithProgressA(
        lpExistingFileName: LPCSTR,
        lpNewFileName: LPCSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileWithProgressW(
        lpExistingFileName: LPCWSTR,
        lpNewFileName: LPCWSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileTransactedA(
        lpExistingFileName: LPCSTR,
        lpNewFileName: LPCSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        dwFlags: DWORD,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveFileTransactedW(
        lpExistingFileName: LPCWSTR,
        lpNewFileName: LPCWSTR,
        lpProgressRoutine: LPPROGRESS_ROUTINE,
        lpData: LPVOID,
        dwFlags: DWORD,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReplaceFileA(
        lpReplacedFileName: LPCSTR,
        lpReplacementFileName: LPCSTR,
        lpBackupFileName: LPCSTR,
        dwReplaceFlags: DWORD,
        lpExclude: LPVOID,
        lpReserved: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReplaceFileW(
        lpReplacedFileName: LPCWSTR,
        lpReplacementFileName: LPCWSTR,
        lpBackupFileName: LPCWSTR,
        dwReplaceFlags: DWORD,
        lpExclude: LPVOID,
        lpReserved: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateHardLinkA(
        lpFileName: LPCSTR,
        lpExistingFileName: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateHardLinkW(
        lpFileName: LPCWSTR,
        lpExistingFileName: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateHardLinkTransactedA(
        lpFileName: LPCSTR,
        lpExistingFileName: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateHardLinkTransactedW(
        lpFileName: LPCWSTR,
        lpExistingFileName: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        hTransaction: HANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstStreamTransactedW(
        lpFileName: LPCWSTR,
        InfoLevel: STREAM_INFO_LEVELS,
        lpFindStreamData: LPVOID,
        dwFlags: DWORD,
        hTransaction: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstFileNameTransactedW(
        lpFileName: LPCWSTR,
        dwFlags: DWORD,
        StringLength: LPDWORD,
        LinkName: PWSTR,
        hTransaction: HANDLE,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateNamedPipeA(
        lpName: LPCSTR,
        dwOpenMode: DWORD,
        dwPipeMode: DWORD,
        nMaxInstances: DWORD,
        nOutBufferSize: DWORD,
        nInBufferSize: DWORD,
        nDefaultTimeOut: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetNamedPipeHandleStateA(
        hNamedPipe: HANDLE,
        lpState: LPDWORD,
        lpCurInstances: LPDWORD,
        lpMaxCollectionCount: LPDWORD,
        lpCollectDataTimeout: LPDWORD,
        lpUserName: LPSTR,
        nMaxUserNameSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CallNamedPipeA(
        lpNamedPipeName: LPCSTR,
        lpInBuffer: LPVOID,
        nInBufferSize: DWORD,
        lpOutBuffer: LPVOID,
        nOutBufferSize: DWORD,
        lpBytesRead: LPDWORD,
        nTimeOut: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitNamedPipeA(lpNamedPipeName: LPCSTR, nTimeOut: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeClientComputerNameA(
        Pipe: HANDLE,
        ClientComputerName: LPSTR,
        ClientComputerNameLength: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeClientProcessId(Pipe: HANDLE, ClientProcessId: PULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeClientSessionId(Pipe: HANDLE, ClientSessionId: PULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeServerProcessId(Pipe: HANDLE, ServerProcessId: PULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNamedPipeServerSessionId(Pipe: HANDLE, ServerSessionId: PULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn SetVolumeLabelA(lpRootPathName: LPCSTR, lpVolumeName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetVolumeLabelW(lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileBandwidthReservation(
        hFile: HANDLE,
        nPeriodMilliseconds: DWORD,
        nBytesPerPeriod: DWORD,
        bDiscardable: BOOL,
        lpTransferSize: LPDWORD,
        lpNumOutstandingRequests: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileBandwidthReservation(
        hFile: HANDLE,
        lpPeriodMilliseconds: LPDWORD,
        lpBytesPerPeriod: LPDWORD,
        pDiscardable: LPBOOL,
        lpTransferSize: LPDWORD,
        lpNumOutstandingRequests: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ClearEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn ClearEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn BackupEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn BackupEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseEventLog(hEventLog: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn DeregisterEventSource(hEventLog: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn NotifyChangeEventLog(hEventLog: HANDLE, hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumberOfEventLogRecords(hEventLog: HANDLE, NumberOfRecords: PDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetOldestEventLogRecord(hEventLog: HANDLE, OldestRecord: PDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenEventLogA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenEventLogW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn RegisterEventSourceA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn RegisterEventSourceW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenBackupEventLogA(lpUNCServerName: LPCSTR, lpFileName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenBackupEventLogW(lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn ReadEventLogA(
        hEventLog: HANDLE,
        dwReadFlags: DWORD,
        dwRecordOffset: DWORD,
        lpBuffer: LPVOID,
        nNumberOfBytesToRead: DWORD,
        pnBytesRead: *mut DWORD,
        pnMinNumberOfBytesNeeded: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadEventLogW(
        hEventLog: HANDLE,
        dwReadFlags: DWORD,
        dwRecordOffset: DWORD,
        lpBuffer: LPVOID,
        nNumberOfBytesToRead: DWORD,
        pnBytesRead: *mut DWORD,
        pnMinNumberOfBytesNeeded: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReportEventA(
        hEventLog: HANDLE,
        wType: WORD,
        wCategory: WORD,
        dwEventID: DWORD,
        lpUserSid: PSID,
        wNumStrings: WORD,
        dwDataSize: DWORD,
        lpStrings: *mut LPCSTR,
        lpRawData: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReportEventW(
        hEventLog: HANDLE,
        wType: WORD,
        wCategory: WORD,
        dwEventID: DWORD,
        lpUserSid: PSID,
        wNumStrings: WORD,
        dwDataSize: DWORD,
        lpStrings: *mut LPCWSTR,
        lpRawData: LPVOID,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EVENTLOG_FULL_INFORMATION {
    pub dwFull: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _EVENTLOG_FULL_INFORMATION"]
        [::std::mem::size_of::<_EVENTLOG_FULL_INFORMATION>() - 4usize];
    ["Alignment of _EVENTLOG_FULL_INFORMATION"]
        [::std::mem::align_of::<_EVENTLOG_FULL_INFORMATION>() - 4usize];
    ["Offset of field: _EVENTLOG_FULL_INFORMATION::dwFull"]
        [::std::mem::offset_of!(_EVENTLOG_FULL_INFORMATION, dwFull) - 0usize];
};
pub type EVENTLOG_FULL_INFORMATION = _EVENTLOG_FULL_INFORMATION;
pub type LPEVENTLOG_FULL_INFORMATION = *mut _EVENTLOG_FULL_INFORMATION;
unsafe extern "C" {
    pub fn GetEventLogInformation(
        hEventLog: HANDLE,
        dwInfoLevel: DWORD,
        lpBuffer: LPVOID,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
pub type OPERATION_ID = ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPERATION_START_PARAMETERS {
    pub Version: ULONG,
    pub OperationId: OPERATION_ID,
    pub Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OPERATION_START_PARAMETERS"]
        [::std::mem::size_of::<_OPERATION_START_PARAMETERS>() - 12usize];
    ["Alignment of _OPERATION_START_PARAMETERS"]
        [::std::mem::align_of::<_OPERATION_START_PARAMETERS>() - 4usize];
    ["Offset of field: _OPERATION_START_PARAMETERS::Version"]
        [::std::mem::offset_of!(_OPERATION_START_PARAMETERS, Version) - 0usize];
    ["Offset of field: _OPERATION_START_PARAMETERS::OperationId"]
        [::std::mem::offset_of!(_OPERATION_START_PARAMETERS, OperationId) - 4usize];
    ["Offset of field: _OPERATION_START_PARAMETERS::Flags"]
        [::std::mem::offset_of!(_OPERATION_START_PARAMETERS, Flags) - 8usize];
};
pub type OPERATION_START_PARAMETERS = _OPERATION_START_PARAMETERS;
pub type POPERATION_START_PARAMETERS = *mut _OPERATION_START_PARAMETERS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OPERATION_END_PARAMETERS {
    pub Version: ULONG,
    pub OperationId: OPERATION_ID,
    pub Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OPERATION_END_PARAMETERS"]
        [::std::mem::size_of::<_OPERATION_END_PARAMETERS>() - 12usize];
    ["Alignment of _OPERATION_END_PARAMETERS"]
        [::std::mem::align_of::<_OPERATION_END_PARAMETERS>() - 4usize];
    ["Offset of field: _OPERATION_END_PARAMETERS::Version"]
        [::std::mem::offset_of!(_OPERATION_END_PARAMETERS, Version) - 0usize];
    ["Offset of field: _OPERATION_END_PARAMETERS::OperationId"]
        [::std::mem::offset_of!(_OPERATION_END_PARAMETERS, OperationId) - 4usize];
    ["Offset of field: _OPERATION_END_PARAMETERS::Flags"]
        [::std::mem::offset_of!(_OPERATION_END_PARAMETERS, Flags) - 8usize];
};
pub type OPERATION_END_PARAMETERS = _OPERATION_END_PARAMETERS;
pub type POPERATION_END_PARAMETERS = *mut _OPERATION_END_PARAMETERS;
unsafe extern "C" {
    pub fn OperationStart(OperationStartParams: *mut OPERATION_START_PARAMETERS) -> BOOL;
}
unsafe extern "C" {
    pub fn OperationEnd(OperationEndParams: *mut OPERATION_END_PARAMETERS) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckAndAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPSTR,
        ObjectName: LPSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        DesiredAccess: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccess: LPDWORD,
        AccessStatus: LPBOOL,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeAndAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPCSTR,
        ObjectName: LPCSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: DWORD,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccess: LPDWORD,
        AccessStatus: LPBOOL,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeResultListAndAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPCSTR,
        ObjectName: LPCSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: DWORD,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccess: LPDWORD,
        AccessStatusList: LPDWORD,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        ClientToken: HANDLE,
        ObjectTypeName: LPCSTR,
        ObjectName: LPCSTR,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: DWORD,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: DWORD,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: DWORD,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOL,
        GrantedAccess: LPDWORD,
        AccessStatusList: LPDWORD,
        pfGenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectOpenAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        ObjectTypeName: LPSTR,
        ObjectName: LPSTR,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        GrantedAccess: DWORD,
        Privileges: PPRIVILEGE_SET,
        ObjectCreation: BOOL,
        AccessGranted: BOOL,
        GenerateOnClose: LPBOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectPrivilegeAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        ClientToken: HANDLE,
        DesiredAccess: DWORD,
        Privileges: PPRIVILEGE_SET,
        AccessGranted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectCloseAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        GenerateOnClose: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ObjectDeleteAuditAlarmA(
        SubsystemName: LPCSTR,
        HandleId: LPVOID,
        GenerateOnClose: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PrivilegedServiceAuditAlarmA(
        SubsystemName: LPCSTR,
        ServiceName: LPCSTR,
        ClientToken: HANDLE,
        Privileges: PPRIVILEGE_SET,
        AccessGranted: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddConditionalAce(
        pAcl: PACL,
        dwAceRevision: DWORD,
        AceFlags: DWORD,
        AceType: UCHAR,
        AccessMask: DWORD,
        pSid: PSID,
        ConditionStr: PWCHAR,
        ReturnLength: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFileSecurityA(
        lpFileName: LPCSTR,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileSecurityA(
        lpFileName: LPCSTR,
        RequestedInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadDirectoryChangesW(
        hDirectory: HANDLE,
        lpBuffer: LPVOID,
        nBufferLength: DWORD,
        bWatchSubtree: BOOL,
        dwNotifyFilter: DWORD,
        lpBytesReturned: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadDirectoryChangesExW(
        hDirectory: HANDLE,
        lpBuffer: LPVOID,
        nBufferLength: DWORD,
        bWatchSubtree: BOOL,
        dwNotifyFilter: DWORD,
        lpBytesReturned: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,
        ReadDirectoryNotifyInformationClass: READ_DIRECTORY_NOTIFY_INFORMATION_CLASS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MapViewOfFileExNuma(
        hFileMappingObject: HANDLE,
        dwDesiredAccess: DWORD,
        dwFileOffsetHigh: DWORD,
        dwFileOffsetLow: DWORD,
        dwNumberOfBytesToMap: SIZE_T,
        lpBaseAddress: LPVOID,
        nndPreferred: DWORD,
    ) -> LPVOID;
}
unsafe extern "C" {
    pub fn IsBadReadPtr(lp: *const ::std::os::raw::c_void, ucb: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsBadWritePtr(lp: LPVOID, ucb: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsBadHugeReadPtr(lp: *const ::std::os::raw::c_void, ucb: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsBadHugeWritePtr(lp: LPVOID, ucb: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsBadCodePtr(lpfn: FARPROC) -> BOOL;
}
unsafe extern "C" {
    pub fn IsBadStringPtrA(lpsz: LPCSTR, ucchMax: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsBadStringPtrW(lpsz: LPCWSTR, ucchMax: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountSidA(
        lpSystemName: LPCSTR,
        Sid: PSID,
        Name: LPSTR,
        cchName: LPDWORD,
        ReferencedDomainName: LPSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountSidW(
        lpSystemName: LPCWSTR,
        Sid: PSID,
        Name: LPWSTR,
        cchName: LPDWORD,
        ReferencedDomainName: LPWSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountNameA(
        lpSystemName: LPCSTR,
        lpAccountName: LPCSTR,
        Sid: PSID,
        cbSid: LPDWORD,
        ReferencedDomainName: LPSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountNameW(
        lpSystemName: LPCWSTR,
        lpAccountName: LPCWSTR,
        Sid: PSID,
        cbSid: LPDWORD,
        ReferencedDomainName: LPWSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountNameLocalA(
        lpAccountName: LPCSTR,
        Sid: PSID,
        cbSid: LPDWORD,
        ReferencedDomainName: LPSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountNameLocalW(
        lpAccountName: LPCWSTR,
        Sid: PSID,
        cbSid: LPDWORD,
        ReferencedDomainName: LPWSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountSidLocalA(
        Sid: PSID,
        Name: LPSTR,
        cchName: LPDWORD,
        ReferencedDomainName: LPSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupAccountSidLocalW(
        Sid: PSID,
        Name: LPWSTR,
        cchName: LPDWORD,
        ReferencedDomainName: LPWSTR,
        cchReferencedDomainName: LPDWORD,
        peUse: PSID_NAME_USE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupPrivilegeValueA(lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupPrivilegeValueW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupPrivilegeNameA(
        lpSystemName: LPCSTR,
        lpLuid: PLUID,
        lpName: LPSTR,
        cchName: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupPrivilegeNameW(
        lpSystemName: LPCWSTR,
        lpLuid: PLUID,
        lpName: LPWSTR,
        cchName: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupPrivilegeDisplayNameA(
        lpSystemName: LPCSTR,
        lpName: LPCSTR,
        lpDisplayName: LPSTR,
        cchDisplayName: LPDWORD,
        lpLanguageId: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupPrivilegeDisplayNameW(
        lpSystemName: LPCWSTR,
        lpName: LPCWSTR,
        lpDisplayName: LPWSTR,
        cchDisplayName: LPDWORD,
        lpLanguageId: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BuildCommDCBA(lpDef: LPCSTR, lpDCB: LPDCB) -> BOOL;
}
unsafe extern "C" {
    pub fn BuildCommDCBW(lpDef: LPCWSTR, lpDCB: LPDCB) -> BOOL;
}
unsafe extern "C" {
    pub fn BuildCommDCBAndTimeoutsA(
        lpDef: LPCSTR,
        lpDCB: LPDCB,
        lpCommTimeouts: LPCOMMTIMEOUTS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BuildCommDCBAndTimeoutsW(
        lpDef: LPCWSTR,
        lpDCB: LPDCB,
        lpCommTimeouts: LPCOMMTIMEOUTS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CommConfigDialogA(lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG) -> BOOL;
}
unsafe extern "C" {
    pub fn CommConfigDialogW(lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetComputerNameA(lpBuffer: LPSTR, nSize: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetComputerNameW(lpBuffer: LPWSTR, nSize: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn DnsHostnameToComputerNameA(
        Hostname: LPCSTR,
        ComputerName: LPSTR,
        nSize: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DnsHostnameToComputerNameW(
        Hostname: LPCWSTR,
        ComputerName: LPWSTR,
        nSize: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserNameA(lpBuffer: LPSTR, pcbBuffer: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserNameW(lpBuffer: LPWSTR, pcbBuffer: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn LogonUserA(
        lpszUsername: LPCSTR,
        lpszDomain: LPCSTR,
        lpszPassword: LPCSTR,
        dwLogonType: DWORD,
        dwLogonProvider: DWORD,
        phToken: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LogonUserW(
        lpszUsername: LPCWSTR,
        lpszDomain: LPCWSTR,
        lpszPassword: LPCWSTR,
        dwLogonType: DWORD,
        dwLogonProvider: DWORD,
        phToken: PHANDLE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LogonUserExA(
        lpszUsername: LPCSTR,
        lpszDomain: LPCSTR,
        lpszPassword: LPCSTR,
        dwLogonType: DWORD,
        dwLogonProvider: DWORD,
        phToken: PHANDLE,
        ppLogonSid: *mut PSID,
        ppProfileBuffer: *mut PVOID,
        pdwProfileLength: LPDWORD,
        pQuotaLimits: PQUOTA_LIMITS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LogonUserExW(
        lpszUsername: LPCWSTR,
        lpszDomain: LPCWSTR,
        lpszPassword: LPCWSTR,
        dwLogonType: DWORD,
        dwLogonProvider: DWORD,
        phToken: PHANDLE,
        ppLogonSid: *mut PSID,
        ppProfileBuffer: *mut PVOID,
        pdwProfileLength: LPDWORD,
        pQuotaLimits: PQUOTA_LIMITS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateProcessWithLogonW(
        lpUsername: LPCWSTR,
        lpDomain: LPCWSTR,
        lpPassword: LPCWSTR,
        dwLogonFlags: DWORD,
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateProcessWithTokenW(
        hToken: HANDLE,
        dwLogonFlags: DWORD,
        lpApplicationName: LPCWSTR,
        lpCommandLine: LPWSTR,
        dwCreationFlags: DWORD,
        lpEnvironment: LPVOID,
        lpCurrentDirectory: LPCWSTR,
        lpStartupInfo: LPSTARTUPINFOW,
        lpProcessInformation: LPPROCESS_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsTokenUntrusted(TokenHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterWaitForSingleObject(
        phNewWaitObject: PHANDLE,
        hObject: HANDLE,
        Callback: WAITORTIMERCALLBACK,
        Context: PVOID,
        dwMilliseconds: ULONG,
        dwFlags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterWait(WaitHandle: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn BindIoCompletionCallback(
        FileHandle: HANDLE,
        Function: LPOVERLAPPED_COMPLETION_ROUTINE,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetTimerQueueTimer(
        TimerQueue: HANDLE,
        Callback: WAITORTIMERCALLBACK,
        Parameter: PVOID,
        DueTime: DWORD,
        Period: DWORD,
        PreferIo: BOOL,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CancelTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePrivateNamespaceA(
        lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES,
        lpBoundaryDescriptor: LPVOID,
        lpAliasPrefix: LPCSTR,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenPrivateNamespaceA(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateBoundaryDescriptorA(Name: LPCSTR, Flags: ULONG) -> HANDLE;
}
unsafe extern "C" {
    pub fn AddIntegrityLabelToBoundaryDescriptor(
        BoundaryDescriptor: *mut HANDLE,
        IntegrityLabel: PSID,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHW_PROFILE_INFOA {
    pub dwDockInfo: DWORD,
    pub szHwProfileGuid: [CHAR; 39usize],
    pub szHwProfileName: [CHAR; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHW_PROFILE_INFOA"][::std::mem::size_of::<tagHW_PROFILE_INFOA>() - 124usize];
    ["Alignment of tagHW_PROFILE_INFOA"][::std::mem::align_of::<tagHW_PROFILE_INFOA>() - 4usize];
    ["Offset of field: tagHW_PROFILE_INFOA::dwDockInfo"]
        [::std::mem::offset_of!(tagHW_PROFILE_INFOA, dwDockInfo) - 0usize];
    ["Offset of field: tagHW_PROFILE_INFOA::szHwProfileGuid"]
        [::std::mem::offset_of!(tagHW_PROFILE_INFOA, szHwProfileGuid) - 4usize];
    ["Offset of field: tagHW_PROFILE_INFOA::szHwProfileName"]
        [::std::mem::offset_of!(tagHW_PROFILE_INFOA, szHwProfileName) - 43usize];
};
pub type HW_PROFILE_INFOA = tagHW_PROFILE_INFOA;
pub type LPHW_PROFILE_INFOA = *mut tagHW_PROFILE_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHW_PROFILE_INFOW {
    pub dwDockInfo: DWORD,
    pub szHwProfileGuid: [WCHAR; 39usize],
    pub szHwProfileName: [WCHAR; 80usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHW_PROFILE_INFOW"][::std::mem::size_of::<tagHW_PROFILE_INFOW>() - 244usize];
    ["Alignment of tagHW_PROFILE_INFOW"][::std::mem::align_of::<tagHW_PROFILE_INFOW>() - 4usize];
    ["Offset of field: tagHW_PROFILE_INFOW::dwDockInfo"]
        [::std::mem::offset_of!(tagHW_PROFILE_INFOW, dwDockInfo) - 0usize];
    ["Offset of field: tagHW_PROFILE_INFOW::szHwProfileGuid"]
        [::std::mem::offset_of!(tagHW_PROFILE_INFOW, szHwProfileGuid) - 4usize];
    ["Offset of field: tagHW_PROFILE_INFOW::szHwProfileName"]
        [::std::mem::offset_of!(tagHW_PROFILE_INFOW, szHwProfileName) - 82usize];
};
pub type HW_PROFILE_INFOW = tagHW_PROFILE_INFOW;
pub type LPHW_PROFILE_INFOW = *mut tagHW_PROFILE_INFOW;
pub type HW_PROFILE_INFO = HW_PROFILE_INFOA;
pub type LPHW_PROFILE_INFO = LPHW_PROFILE_INFOA;
unsafe extern "C" {
    pub fn GetCurrentHwProfileA(lpHwProfileInfo: LPHW_PROFILE_INFOA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentHwProfileW(lpHwProfileInfo: LPHW_PROFILE_INFOW) -> BOOL;
}
unsafe extern "C" {
    pub fn VerifyVersionInfoA(
        lpVersionInformation: LPOSVERSIONINFOEXA,
        dwTypeMask: DWORD,
        dwlConditionMask: DWORDLONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VerifyVersionInfoW(
        lpVersionInformation: LPOSVERSIONINFOEXW,
        dwTypeMask: DWORD,
        dwlConditionMask: DWORDLONG,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIME_ZONE_INFORMATION {
    pub Bias: LONG,
    pub StandardName: [WCHAR; 32usize],
    pub StandardDate: SYSTEMTIME,
    pub StandardBias: LONG,
    pub DaylightName: [WCHAR; 32usize],
    pub DaylightDate: SYSTEMTIME,
    pub DaylightBias: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TIME_ZONE_INFORMATION"][::std::mem::size_of::<_TIME_ZONE_INFORMATION>() - 172usize];
    ["Alignment of _TIME_ZONE_INFORMATION"]
        [::std::mem::align_of::<_TIME_ZONE_INFORMATION>() - 4usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::Bias"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, Bias) - 0usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::StandardName"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, StandardName) - 4usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::StandardDate"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, StandardDate) - 68usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::StandardBias"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, StandardBias) - 84usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::DaylightName"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, DaylightName) - 88usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::DaylightDate"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, DaylightDate) - 152usize];
    ["Offset of field: _TIME_ZONE_INFORMATION::DaylightBias"]
        [::std::mem::offset_of!(_TIME_ZONE_INFORMATION, DaylightBias) - 168usize];
};
pub type TIME_ZONE_INFORMATION = _TIME_ZONE_INFORMATION;
pub type PTIME_ZONE_INFORMATION = *mut _TIME_ZONE_INFORMATION;
pub type LPTIME_ZONE_INFORMATION = *mut _TIME_ZONE_INFORMATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TIME_DYNAMIC_ZONE_INFORMATION {
    pub Bias: LONG,
    pub StandardName: [WCHAR; 32usize],
    pub StandardDate: SYSTEMTIME,
    pub StandardBias: LONG,
    pub DaylightName: [WCHAR; 32usize],
    pub DaylightDate: SYSTEMTIME,
    pub DaylightBias: LONG,
    pub TimeZoneKeyName: [WCHAR; 128usize],
    pub DynamicDaylightTimeDisabled: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TIME_DYNAMIC_ZONE_INFORMATION"]
        [::std::mem::size_of::<_TIME_DYNAMIC_ZONE_INFORMATION>() - 432usize];
    ["Alignment of _TIME_DYNAMIC_ZONE_INFORMATION"]
        [::std::mem::align_of::<_TIME_DYNAMIC_ZONE_INFORMATION>() - 4usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::Bias"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, Bias) - 0usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::StandardName"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, StandardName) - 4usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::StandardDate"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, StandardDate) - 68usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::StandardBias"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, StandardBias) - 84usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::DaylightName"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, DaylightName) - 88usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::DaylightDate"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, DaylightDate) - 152usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::DaylightBias"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, DaylightBias) - 168usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::TimeZoneKeyName"]
        [::std::mem::offset_of!(_TIME_DYNAMIC_ZONE_INFORMATION, TimeZoneKeyName) - 172usize];
    ["Offset of field: _TIME_DYNAMIC_ZONE_INFORMATION::DynamicDaylightTimeDisabled"][::std::mem::offset_of!(
        _TIME_DYNAMIC_ZONE_INFORMATION,
        DynamicDaylightTimeDisabled
    ) - 428usize];
};
pub type DYNAMIC_TIME_ZONE_INFORMATION = _TIME_DYNAMIC_ZONE_INFORMATION;
pub type PDYNAMIC_TIME_ZONE_INFORMATION = *mut _TIME_DYNAMIC_ZONE_INFORMATION;
unsafe extern "C" {
    pub fn SystemTimeToTzSpecificLocalTime(
        lpTimeZoneInformation: *const TIME_ZONE_INFORMATION,
        lpUniversalTime: *const SYSTEMTIME,
        lpLocalTime: LPSYSTEMTIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TzSpecificLocalTimeToSystemTime(
        lpTimeZoneInformation: *const TIME_ZONE_INFORMATION,
        lpLocalTime: *const SYSTEMTIME,
        lpUniversalTime: LPSYSTEMTIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FileTimeToSystemTime(lpFileTime: *const FILETIME, lpSystemTime: LPSYSTEMTIME) -> BOOL;
}
unsafe extern "C" {
    pub fn SystemTimeToFileTime(lpSystemTime: *const SYSTEMTIME, lpFileTime: LPFILETIME) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTimeZoneInformation(lpTimeZoneInformation: LPTIME_ZONE_INFORMATION) -> DWORD;
}
unsafe extern "C" {
    pub fn SetTimeZoneInformation(lpTimeZoneInformation: *const TIME_ZONE_INFORMATION) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDynamicTimeZoneInformation(
        lpTimeZoneInformation: *const DYNAMIC_TIME_ZONE_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDynamicTimeZoneInformation(
        pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTimeZoneInformationForYear(
        wYear: USHORT,
        pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION,
        ptzi: LPTIME_ZONE_INFORMATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDynamicTimeZoneInformation(
        dwIndex: DWORD,
        lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetDynamicTimeZoneInformationEffectiveYears(
        lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION,
        FirstYear: LPDWORD,
        LastYear: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SystemTimeToTzSpecificLocalTimeEx(
        lpTimeZoneInformation: *const DYNAMIC_TIME_ZONE_INFORMATION,
        lpUniversalTime: *const SYSTEMTIME,
        lpLocalTime: LPSYSTEMTIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TzSpecificLocalTimeToSystemTimeEx(
        lpTimeZoneInformation: *const DYNAMIC_TIME_ZONE_INFORMATION,
        lpLocalTime: *const SYSTEMTIME,
        lpUniversalTime: LPSYSTEMTIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LocalFileTimeToLocalSystemTime(
        timeZoneInformation: *const TIME_ZONE_INFORMATION,
        localFileTime: *const FILETIME,
        localSystemTime: *mut SYSTEMTIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LocalSystemTimeToLocalFileTime(
        timeZoneInformation: *const TIME_ZONE_INFORMATION,
        localSystemTime: *const SYSTEMTIME,
        localFileTime: *mut FILETIME,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSystemPowerState(fSuspend: BOOL, fForce: BOOL) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SYSTEM_POWER_STATUS {
    pub ACLineStatus: BYTE,
    pub BatteryFlag: BYTE,
    pub BatteryLifePercent: BYTE,
    pub SystemStatusFlag: BYTE,
    pub BatteryLifeTime: DWORD,
    pub BatteryFullLifeTime: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SYSTEM_POWER_STATUS"][::std::mem::size_of::<_SYSTEM_POWER_STATUS>() - 12usize];
    ["Alignment of _SYSTEM_POWER_STATUS"][::std::mem::align_of::<_SYSTEM_POWER_STATUS>() - 4usize];
    ["Offset of field: _SYSTEM_POWER_STATUS::ACLineStatus"]
        [::std::mem::offset_of!(_SYSTEM_POWER_STATUS, ACLineStatus) - 0usize];
    ["Offset of field: _SYSTEM_POWER_STATUS::BatteryFlag"]
        [::std::mem::offset_of!(_SYSTEM_POWER_STATUS, BatteryFlag) - 1usize];
    ["Offset of field: _SYSTEM_POWER_STATUS::BatteryLifePercent"]
        [::std::mem::offset_of!(_SYSTEM_POWER_STATUS, BatteryLifePercent) - 2usize];
    ["Offset of field: _SYSTEM_POWER_STATUS::SystemStatusFlag"]
        [::std::mem::offset_of!(_SYSTEM_POWER_STATUS, SystemStatusFlag) - 3usize];
    ["Offset of field: _SYSTEM_POWER_STATUS::BatteryLifeTime"]
        [::std::mem::offset_of!(_SYSTEM_POWER_STATUS, BatteryLifeTime) - 4usize];
    ["Offset of field: _SYSTEM_POWER_STATUS::BatteryFullLifeTime"]
        [::std::mem::offset_of!(_SYSTEM_POWER_STATUS, BatteryFullLifeTime) - 8usize];
};
pub type SYSTEM_POWER_STATUS = _SYSTEM_POWER_STATUS;
pub type LPSYSTEM_POWER_STATUS = *mut _SYSTEM_POWER_STATUS;
unsafe extern "C" {
    pub fn GetSystemPowerStatus(lpSystemPowerStatus: LPSYSTEM_POWER_STATUS) -> BOOL;
}
unsafe extern "C" {
    pub fn MapUserPhysicalPagesScatter(
        VirtualAddresses: *mut PVOID,
        NumberOfPages: ULONG_PTR,
        PageArray: PULONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateJobObjectA(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn OpenJobObjectA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateJobSet(NumJob: ULONG, UserJobSet: PJOB_SET_ARRAY, Flags: ULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstVolumeA(lpszVolumeName: LPSTR, cchBufferLength: DWORD) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindNextVolumeA(
        hFindVolume: HANDLE,
        lpszVolumeName: LPSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindFirstVolumeMountPointA(
        lpszRootPathName: LPCSTR,
        lpszVolumeMountPoint: LPSTR,
        cchBufferLength: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindFirstVolumeMountPointW(
        lpszRootPathName: LPCWSTR,
        lpszVolumeMountPoint: LPWSTR,
        cchBufferLength: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn FindNextVolumeMountPointA(
        hFindVolumeMountPoint: HANDLE,
        lpszVolumeMountPoint: LPSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindNextVolumeMountPointW(
        hFindVolumeMountPoint: HANDLE,
        lpszVolumeMountPoint: LPWSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindVolumeMountPointClose(hFindVolumeMountPoint: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteVolumeMountPointA(lpszVolumeMountPoint: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumeNameForVolumeMountPointA(
        lpszVolumeMountPoint: LPCSTR,
        lpszVolumeName: LPSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumePathNameA(
        lpszFileName: LPCSTR,
        lpszVolumePathName: LPSTR,
        cchBufferLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetVolumePathNamesForVolumeNameA(
        lpszVolumeName: LPCSTR,
        lpszVolumePathNames: LPCH,
        cchBufferLength: DWORD,
        lpcchReturnLength: PDWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACTCTXA {
    pub cbSize: ULONG,
    pub dwFlags: DWORD,
    pub lpSource: LPCSTR,
    pub wProcessorArchitecture: USHORT,
    pub wLangId: LANGID,
    pub lpAssemblyDirectory: LPCSTR,
    pub lpResourceName: LPCSTR,
    pub lpApplicationName: LPCSTR,
    pub hModule: HMODULE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACTCTXA"][::std::mem::size_of::<tagACTCTXA>() - 56usize];
    ["Alignment of tagACTCTXA"][::std::mem::align_of::<tagACTCTXA>() - 8usize];
    ["Offset of field: tagACTCTXA::cbSize"][::std::mem::offset_of!(tagACTCTXA, cbSize) - 0usize];
    ["Offset of field: tagACTCTXA::dwFlags"][::std::mem::offset_of!(tagACTCTXA, dwFlags) - 4usize];
    ["Offset of field: tagACTCTXA::lpSource"]
        [::std::mem::offset_of!(tagACTCTXA, lpSource) - 8usize];
    ["Offset of field: tagACTCTXA::wProcessorArchitecture"]
        [::std::mem::offset_of!(tagACTCTXA, wProcessorArchitecture) - 16usize];
    ["Offset of field: tagACTCTXA::wLangId"][::std::mem::offset_of!(tagACTCTXA, wLangId) - 18usize];
    ["Offset of field: tagACTCTXA::lpAssemblyDirectory"]
        [::std::mem::offset_of!(tagACTCTXA, lpAssemblyDirectory) - 24usize];
    ["Offset of field: tagACTCTXA::lpResourceName"]
        [::std::mem::offset_of!(tagACTCTXA, lpResourceName) - 32usize];
    ["Offset of field: tagACTCTXA::lpApplicationName"]
        [::std::mem::offset_of!(tagACTCTXA, lpApplicationName) - 40usize];
    ["Offset of field: tagACTCTXA::hModule"][::std::mem::offset_of!(tagACTCTXA, hModule) - 48usize];
};
pub type ACTCTXA = tagACTCTXA;
pub type PACTCTXA = *mut tagACTCTXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACTCTXW {
    pub cbSize: ULONG,
    pub dwFlags: DWORD,
    pub lpSource: LPCWSTR,
    pub wProcessorArchitecture: USHORT,
    pub wLangId: LANGID,
    pub lpAssemblyDirectory: LPCWSTR,
    pub lpResourceName: LPCWSTR,
    pub lpApplicationName: LPCWSTR,
    pub hModule: HMODULE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACTCTXW"][::std::mem::size_of::<tagACTCTXW>() - 56usize];
    ["Alignment of tagACTCTXW"][::std::mem::align_of::<tagACTCTXW>() - 8usize];
    ["Offset of field: tagACTCTXW::cbSize"][::std::mem::offset_of!(tagACTCTXW, cbSize) - 0usize];
    ["Offset of field: tagACTCTXW::dwFlags"][::std::mem::offset_of!(tagACTCTXW, dwFlags) - 4usize];
    ["Offset of field: tagACTCTXW::lpSource"]
        [::std::mem::offset_of!(tagACTCTXW, lpSource) - 8usize];
    ["Offset of field: tagACTCTXW::wProcessorArchitecture"]
        [::std::mem::offset_of!(tagACTCTXW, wProcessorArchitecture) - 16usize];
    ["Offset of field: tagACTCTXW::wLangId"][::std::mem::offset_of!(tagACTCTXW, wLangId) - 18usize];
    ["Offset of field: tagACTCTXW::lpAssemblyDirectory"]
        [::std::mem::offset_of!(tagACTCTXW, lpAssemblyDirectory) - 24usize];
    ["Offset of field: tagACTCTXW::lpResourceName"]
        [::std::mem::offset_of!(tagACTCTXW, lpResourceName) - 32usize];
    ["Offset of field: tagACTCTXW::lpApplicationName"]
        [::std::mem::offset_of!(tagACTCTXW, lpApplicationName) - 40usize];
    ["Offset of field: tagACTCTXW::hModule"][::std::mem::offset_of!(tagACTCTXW, hModule) - 48usize];
};
pub type ACTCTXW = tagACTCTXW;
pub type PACTCTXW = *mut tagACTCTXW;
pub type ACTCTX = ACTCTXA;
pub type PACTCTX = PACTCTXA;
pub type PCACTCTXA = *const ACTCTXA;
pub type PCACTCTXW = *const ACTCTXW;
pub type PCACTCTX = PCACTCTXA;
unsafe extern "C" {
    pub fn CreateActCtxA(pActCtx: PCACTCTXA) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateActCtxW(pActCtx: PCACTCTXW) -> HANDLE;
}
unsafe extern "C" {
    pub fn AddRefActCtx(hActCtx: HANDLE);
}
unsafe extern "C" {
    pub fn ReleaseActCtx(hActCtx: HANDLE);
}
unsafe extern "C" {
    pub fn ZombifyActCtx(hActCtx: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ActivateActCtx(hActCtx: HANDLE, lpCookie: *mut ULONG_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn DeactivateActCtx(dwFlags: DWORD, ulCookie: ULONG_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentActCtx(lphActCtx: *mut HANDLE) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    pub cbSize: ULONG,
    pub ulDataFormatVersion: ULONG,
    pub lpData: PVOID,
    pub ulLength: ULONG,
    pub lpSectionGlobalData: PVOID,
    pub ulSectionGlobalDataLength: ULONG,
    pub lpSectionBase: PVOID,
    pub ulSectionTotalLength: ULONG,
    pub hActCtx: HANDLE,
    pub ulAssemblyRosterIndex: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACTCTX_SECTION_KEYED_DATA_2600"]
        [::std::mem::size_of::<tagACTCTX_SECTION_KEYED_DATA_2600>() - 72usize];
    ["Alignment of tagACTCTX_SECTION_KEYED_DATA_2600"]
        [::std::mem::align_of::<tagACTCTX_SECTION_KEYED_DATA_2600>() - 8usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::cbSize"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, cbSize) - 0usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::ulDataFormatVersion"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, ulDataFormatVersion) - 4usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::lpData"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, lpData) - 8usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::ulLength"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, ulLength) - 16usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::lpSectionGlobalData"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, lpSectionGlobalData) - 24usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::ulSectionGlobalDataLength"][::std::mem::offset_of!(
        tagACTCTX_SECTION_KEYED_DATA_2600,
        ulSectionGlobalDataLength
    ) - 32usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::lpSectionBase"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, lpSectionBase) - 40usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::ulSectionTotalLength"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, ulSectionTotalLength) - 48usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::hActCtx"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA_2600, hActCtx) - 56usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_2600::ulAssemblyRosterIndex"][::std::mem::offset_of!(
        tagACTCTX_SECTION_KEYED_DATA_2600,
        ulAssemblyRosterIndex
    ) - 64usize];
};
pub type ACTCTX_SECTION_KEYED_DATA_2600 = tagACTCTX_SECTION_KEYED_DATA_2600;
pub type PACTCTX_SECTION_KEYED_DATA_2600 = *mut tagACTCTX_SECTION_KEYED_DATA_2600;
pub type PCACTCTX_SECTION_KEYED_DATA_2600 = *const ACTCTX_SECTION_KEYED_DATA_2600;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    pub lpInformation: PVOID,
    pub lpSectionBase: PVOID,
    pub ulSectionLength: ULONG,
    pub lpSectionGlobalDataBase: PVOID,
    pub ulSectionGlobalDataLength: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA"]
        [::std::mem::size_of::<tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>() - 40usize];
    ["Alignment of tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA"]
        [::std::mem::align_of::<tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA>() - 8usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA::lpInformation"][::std::mem::offset_of!(
        tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
        lpInformation
    ) - 0usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA::lpSectionBase"][::std::mem::offset_of!(
        tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
        lpSectionBase
    ) - 8usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA::ulSectionLength"][::std::mem::offset_of!(
        tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
        ulSectionLength
    )
        - 16usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA::lpSectionGlobalDataBase"][::std::mem::offset_of!(
        tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
        lpSectionGlobalDataBase
    )
        - 24usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA::ulSectionGlobalDataLength"]
        [::std::mem::offset_of!(
            tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
            ulSectionGlobalDataLength
        ) - 32usize];
};
pub type ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA =
    tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
pub type PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA =
    *mut tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
pub type PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA =
    *const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACTCTX_SECTION_KEYED_DATA {
    pub cbSize: ULONG,
    pub ulDataFormatVersion: ULONG,
    pub lpData: PVOID,
    pub ulLength: ULONG,
    pub lpSectionGlobalData: PVOID,
    pub ulSectionGlobalDataLength: ULONG,
    pub lpSectionBase: PVOID,
    pub ulSectionTotalLength: ULONG,
    pub hActCtx: HANDLE,
    pub ulAssemblyRosterIndex: ULONG,
    pub ulFlags: ULONG,
    pub AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACTCTX_SECTION_KEYED_DATA"]
        [::std::mem::size_of::<tagACTCTX_SECTION_KEYED_DATA>() - 112usize];
    ["Alignment of tagACTCTX_SECTION_KEYED_DATA"]
        [::std::mem::align_of::<tagACTCTX_SECTION_KEYED_DATA>() - 8usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::cbSize"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, cbSize) - 0usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::ulDataFormatVersion"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, ulDataFormatVersion) - 4usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::lpData"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, lpData) - 8usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::ulLength"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, ulLength) - 16usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::lpSectionGlobalData"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, lpSectionGlobalData) - 24usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::ulSectionGlobalDataLength"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, ulSectionGlobalDataLength) - 32usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::lpSectionBase"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, lpSectionBase) - 40usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::ulSectionTotalLength"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, ulSectionTotalLength) - 48usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::hActCtx"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, hActCtx) - 56usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::ulAssemblyRosterIndex"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, ulAssemblyRosterIndex) - 64usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::ulFlags"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, ulFlags) - 68usize];
    ["Offset of field: tagACTCTX_SECTION_KEYED_DATA::AssemblyMetadata"]
        [::std::mem::offset_of!(tagACTCTX_SECTION_KEYED_DATA, AssemblyMetadata) - 72usize];
};
pub type ACTCTX_SECTION_KEYED_DATA = tagACTCTX_SECTION_KEYED_DATA;
pub type PACTCTX_SECTION_KEYED_DATA = *mut tagACTCTX_SECTION_KEYED_DATA;
pub type PCACTCTX_SECTION_KEYED_DATA = *const ACTCTX_SECTION_KEYED_DATA;
unsafe extern "C" {
    pub fn FindActCtxSectionStringA(
        dwFlags: DWORD,
        lpExtensionGuid: *const GUID,
        ulSectionId: ULONG,
        lpStringToFind: LPCSTR,
        ReturnedData: PACTCTX_SECTION_KEYED_DATA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindActCtxSectionStringW(
        dwFlags: DWORD,
        lpExtensionGuid: *const GUID,
        ulSectionId: ULONG,
        lpStringToFind: LPCWSTR,
        ReturnedData: PACTCTX_SECTION_KEYED_DATA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FindActCtxSectionGuid(
        dwFlags: DWORD,
        lpExtensionGuid: *const GUID,
        ulSectionId: ULONG,
        lpGuidToFind: *const GUID,
        ReturnedData: PACTCTX_SECTION_KEYED_DATA,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    pub hActCtx: HANDLE,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ACTIVATION_CONTEXT_BASIC_INFORMATION"]
        [::std::mem::size_of::<_ACTIVATION_CONTEXT_BASIC_INFORMATION>() - 16usize];
    ["Alignment of _ACTIVATION_CONTEXT_BASIC_INFORMATION"]
        [::std::mem::align_of::<_ACTIVATION_CONTEXT_BASIC_INFORMATION>() - 8usize];
    ["Offset of field: _ACTIVATION_CONTEXT_BASIC_INFORMATION::hActCtx"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_BASIC_INFORMATION, hActCtx) - 0usize];
    ["Offset of field: _ACTIVATION_CONTEXT_BASIC_INFORMATION::dwFlags"]
        [::std::mem::offset_of!(_ACTIVATION_CONTEXT_BASIC_INFORMATION, dwFlags) - 8usize];
};
pub type ACTIVATION_CONTEXT_BASIC_INFORMATION = _ACTIVATION_CONTEXT_BASIC_INFORMATION;
pub type PACTIVATION_CONTEXT_BASIC_INFORMATION = *mut _ACTIVATION_CONTEXT_BASIC_INFORMATION;
pub type PCACTIVATION_CONTEXT_BASIC_INFORMATION = *const _ACTIVATION_CONTEXT_BASIC_INFORMATION;
unsafe extern "C" {
    pub fn QueryActCtxW(
        dwFlags: DWORD,
        hActCtx: HANDLE,
        pvSubInstance: PVOID,
        ulInfoClass: ULONG,
        pvBuffer: PVOID,
        cbBuffer: SIZE_T,
        pcbWrittenOrRequired: *mut SIZE_T,
    ) -> BOOL;
}
pub type PQUERYACTCTXW_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        dwFlags: DWORD,
        hActCtx: HANDLE,
        pvSubInstance: PVOID,
        ulInfoClass: ULONG,
        pvBuffer: PVOID,
        cbBuffer: SIZE_T,
        pcbWrittenOrRequired: *mut SIZE_T,
    ) -> BOOL,
>;
unsafe extern "C" {
    pub fn WTSGetActiveConsoleSessionId() -> DWORD;
}
unsafe extern "C" {
    pub fn WTSGetServiceSessionId() -> DWORD;
}
unsafe extern "C" {
    pub fn WTSIsServerContainer() -> BOOLEAN;
}
unsafe extern "C" {
    pub fn GetActiveProcessorGroupCount() -> WORD;
}
unsafe extern "C" {
    pub fn GetMaximumProcessorGroupCount() -> WORD;
}
unsafe extern "C" {
    pub fn GetActiveProcessorCount(GroupNumber: WORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetMaximumProcessorCount(GroupNumber: WORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetNumaProcessorNode(Processor: UCHAR, NodeNumber: PUCHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaNodeNumberFromHandle(hFile: HANDLE, NodeNumber: PUSHORT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaProcessorNodeEx(Processor: PPROCESSOR_NUMBER, NodeNumber: PUSHORT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaNodeProcessorMask(Node: UCHAR, ProcessorMask: PULONGLONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaAvailableMemoryNode(Node: UCHAR, AvailableBytes: PULONGLONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaAvailableMemoryNodeEx(Node: USHORT, AvailableBytes: PULONGLONG) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumaProximityNode(ProximityId: ULONG, NodeNumber: PUCHAR) -> BOOL;
}
pub type APPLICATION_RECOVERY_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(pvParameter: PVOID) -> DWORD>;
unsafe extern "C" {
    pub fn RegisterApplicationRecoveryCallback(
        pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK,
        pvParameter: PVOID,
        dwPingInterval: DWORD,
        dwFlags: DWORD,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn UnregisterApplicationRecoveryCallback() -> HRESULT;
}
unsafe extern "C" {
    pub fn RegisterApplicationRestart(pwzCommandline: PCWSTR, dwFlags: DWORD) -> HRESULT;
}
unsafe extern "C" {
    pub fn UnregisterApplicationRestart() -> HRESULT;
}
unsafe extern "C" {
    pub fn GetApplicationRecoveryCallback(
        hProcess: HANDLE,
        pRecoveryCallback: *mut APPLICATION_RECOVERY_CALLBACK,
        ppvParameter: *mut PVOID,
        pdwPingInterval: PDWORD,
        pdwFlags: PDWORD,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn GetApplicationRestartSettings(
        hProcess: HANDLE,
        pwzCommandline: PWSTR,
        pcchSize: PDWORD,
        pdwFlags: PDWORD,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn ApplicationRecoveryInProgress(pbCancelled: PBOOL) -> HRESULT;
}
unsafe extern "C" {
    pub fn ApplicationRecoveryFinished(bSuccess: BOOL);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_BASIC_INFO {
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub FileAttributes: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_BASIC_INFO"][::std::mem::size_of::<_FILE_BASIC_INFO>() - 40usize];
    ["Alignment of _FILE_BASIC_INFO"][::std::mem::align_of::<_FILE_BASIC_INFO>() - 8usize];
    ["Offset of field: _FILE_BASIC_INFO::CreationTime"]
        [::std::mem::offset_of!(_FILE_BASIC_INFO, CreationTime) - 0usize];
    ["Offset of field: _FILE_BASIC_INFO::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_BASIC_INFO, LastAccessTime) - 8usize];
    ["Offset of field: _FILE_BASIC_INFO::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_BASIC_INFO, LastWriteTime) - 16usize];
    ["Offset of field: _FILE_BASIC_INFO::ChangeTime"]
        [::std::mem::offset_of!(_FILE_BASIC_INFO, ChangeTime) - 24usize];
    ["Offset of field: _FILE_BASIC_INFO::FileAttributes"]
        [::std::mem::offset_of!(_FILE_BASIC_INFO, FileAttributes) - 32usize];
};
pub type FILE_BASIC_INFO = _FILE_BASIC_INFO;
pub type PFILE_BASIC_INFO = *mut _FILE_BASIC_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_STANDARD_INFO {
    pub AllocationSize: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub NumberOfLinks: DWORD,
    pub DeletePending: BOOLEAN,
    pub Directory: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_STANDARD_INFO"][::std::mem::size_of::<_FILE_STANDARD_INFO>() - 24usize];
    ["Alignment of _FILE_STANDARD_INFO"][::std::mem::align_of::<_FILE_STANDARD_INFO>() - 8usize];
    ["Offset of field: _FILE_STANDARD_INFO::AllocationSize"]
        [::std::mem::offset_of!(_FILE_STANDARD_INFO, AllocationSize) - 0usize];
    ["Offset of field: _FILE_STANDARD_INFO::EndOfFile"]
        [::std::mem::offset_of!(_FILE_STANDARD_INFO, EndOfFile) - 8usize];
    ["Offset of field: _FILE_STANDARD_INFO::NumberOfLinks"]
        [::std::mem::offset_of!(_FILE_STANDARD_INFO, NumberOfLinks) - 16usize];
    ["Offset of field: _FILE_STANDARD_INFO::DeletePending"]
        [::std::mem::offset_of!(_FILE_STANDARD_INFO, DeletePending) - 20usize];
    ["Offset of field: _FILE_STANDARD_INFO::Directory"]
        [::std::mem::offset_of!(_FILE_STANDARD_INFO, Directory) - 21usize];
};
pub type FILE_STANDARD_INFO = _FILE_STANDARD_INFO;
pub type PFILE_STANDARD_INFO = *mut _FILE_STANDARD_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_NAME_INFO {
    pub FileNameLength: DWORD,
    pub FileName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_NAME_INFO"][::std::mem::size_of::<_FILE_NAME_INFO>() - 8usize];
    ["Alignment of _FILE_NAME_INFO"][::std::mem::align_of::<_FILE_NAME_INFO>() - 4usize];
    ["Offset of field: _FILE_NAME_INFO::FileNameLength"]
        [::std::mem::offset_of!(_FILE_NAME_INFO, FileNameLength) - 0usize];
    ["Offset of field: _FILE_NAME_INFO::FileName"]
        [::std::mem::offset_of!(_FILE_NAME_INFO, FileName) - 4usize];
};
pub type FILE_NAME_INFO = _FILE_NAME_INFO;
pub type PFILE_NAME_INFO = *mut _FILE_NAME_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_CASE_SENSITIVE_INFO {
    pub Flags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_CASE_SENSITIVE_INFO"]
        [::std::mem::size_of::<_FILE_CASE_SENSITIVE_INFO>() - 4usize];
    ["Alignment of _FILE_CASE_SENSITIVE_INFO"]
        [::std::mem::align_of::<_FILE_CASE_SENSITIVE_INFO>() - 4usize];
    ["Offset of field: _FILE_CASE_SENSITIVE_INFO::Flags"]
        [::std::mem::offset_of!(_FILE_CASE_SENSITIVE_INFO, Flags) - 0usize];
};
pub type FILE_CASE_SENSITIVE_INFO = _FILE_CASE_SENSITIVE_INFO;
pub type PFILE_CASE_SENSITIVE_INFO = *mut _FILE_CASE_SENSITIVE_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_RENAME_INFO {
    pub __bindgen_anon_1: _FILE_RENAME_INFO__bindgen_ty_1,
    pub RootDirectory: HANDLE,
    pub FileNameLength: DWORD,
    pub FileName: [WCHAR; 1usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_RENAME_INFO__bindgen_ty_1 {
    pub ReplaceIfExists: BOOLEAN,
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_RENAME_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<_FILE_RENAME_INFO__bindgen_ty_1>() - 4usize];
    ["Alignment of _FILE_RENAME_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<_FILE_RENAME_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: _FILE_RENAME_INFO__bindgen_ty_1::ReplaceIfExists"]
        [::std::mem::offset_of!(_FILE_RENAME_INFO__bindgen_ty_1, ReplaceIfExists) - 0usize];
    ["Offset of field: _FILE_RENAME_INFO__bindgen_ty_1::Flags"]
        [::std::mem::offset_of!(_FILE_RENAME_INFO__bindgen_ty_1, Flags) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_RENAME_INFO"][::std::mem::size_of::<_FILE_RENAME_INFO>() - 24usize];
    ["Alignment of _FILE_RENAME_INFO"][::std::mem::align_of::<_FILE_RENAME_INFO>() - 8usize];
    ["Offset of field: _FILE_RENAME_INFO::RootDirectory"]
        [::std::mem::offset_of!(_FILE_RENAME_INFO, RootDirectory) - 8usize];
    ["Offset of field: _FILE_RENAME_INFO::FileNameLength"]
        [::std::mem::offset_of!(_FILE_RENAME_INFO, FileNameLength) - 16usize];
    ["Offset of field: _FILE_RENAME_INFO::FileName"]
        [::std::mem::offset_of!(_FILE_RENAME_INFO, FileName) - 20usize];
};
pub type FILE_RENAME_INFO = _FILE_RENAME_INFO;
pub type PFILE_RENAME_INFO = *mut _FILE_RENAME_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_ALLOCATION_INFO {
    pub AllocationSize: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ALLOCATION_INFO"][::std::mem::size_of::<_FILE_ALLOCATION_INFO>() - 8usize];
    ["Alignment of _FILE_ALLOCATION_INFO"]
        [::std::mem::align_of::<_FILE_ALLOCATION_INFO>() - 8usize];
    ["Offset of field: _FILE_ALLOCATION_INFO::AllocationSize"]
        [::std::mem::offset_of!(_FILE_ALLOCATION_INFO, AllocationSize) - 0usize];
};
pub type FILE_ALLOCATION_INFO = _FILE_ALLOCATION_INFO;
pub type PFILE_ALLOCATION_INFO = *mut _FILE_ALLOCATION_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_END_OF_FILE_INFO {
    pub EndOfFile: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_END_OF_FILE_INFO"][::std::mem::size_of::<_FILE_END_OF_FILE_INFO>() - 8usize];
    ["Alignment of _FILE_END_OF_FILE_INFO"]
        [::std::mem::align_of::<_FILE_END_OF_FILE_INFO>() - 8usize];
    ["Offset of field: _FILE_END_OF_FILE_INFO::EndOfFile"]
        [::std::mem::offset_of!(_FILE_END_OF_FILE_INFO, EndOfFile) - 0usize];
};
pub type FILE_END_OF_FILE_INFO = _FILE_END_OF_FILE_INFO;
pub type PFILE_END_OF_FILE_INFO = *mut _FILE_END_OF_FILE_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_STREAM_INFO {
    pub NextEntryOffset: DWORD,
    pub StreamNameLength: DWORD,
    pub StreamSize: LARGE_INTEGER,
    pub StreamAllocationSize: LARGE_INTEGER,
    pub StreamName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_STREAM_INFO"][::std::mem::size_of::<_FILE_STREAM_INFO>() - 32usize];
    ["Alignment of _FILE_STREAM_INFO"][::std::mem::align_of::<_FILE_STREAM_INFO>() - 8usize];
    ["Offset of field: _FILE_STREAM_INFO::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_STREAM_INFO, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_STREAM_INFO::StreamNameLength"]
        [::std::mem::offset_of!(_FILE_STREAM_INFO, StreamNameLength) - 4usize];
    ["Offset of field: _FILE_STREAM_INFO::StreamSize"]
        [::std::mem::offset_of!(_FILE_STREAM_INFO, StreamSize) - 8usize];
    ["Offset of field: _FILE_STREAM_INFO::StreamAllocationSize"]
        [::std::mem::offset_of!(_FILE_STREAM_INFO, StreamAllocationSize) - 16usize];
    ["Offset of field: _FILE_STREAM_INFO::StreamName"]
        [::std::mem::offset_of!(_FILE_STREAM_INFO, StreamName) - 24usize];
};
pub type FILE_STREAM_INFO = _FILE_STREAM_INFO;
pub type PFILE_STREAM_INFO = *mut _FILE_STREAM_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_COMPRESSION_INFO {
    pub CompressedFileSize: LARGE_INTEGER,
    pub CompressionFormat: WORD,
    pub CompressionUnitShift: UCHAR,
    pub ChunkShift: UCHAR,
    pub ClusterShift: UCHAR,
    pub Reserved: [UCHAR; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_COMPRESSION_INFO"][::std::mem::size_of::<_FILE_COMPRESSION_INFO>() - 16usize];
    ["Alignment of _FILE_COMPRESSION_INFO"]
        [::std::mem::align_of::<_FILE_COMPRESSION_INFO>() - 8usize];
    ["Offset of field: _FILE_COMPRESSION_INFO::CompressedFileSize"]
        [::std::mem::offset_of!(_FILE_COMPRESSION_INFO, CompressedFileSize) - 0usize];
    ["Offset of field: _FILE_COMPRESSION_INFO::CompressionFormat"]
        [::std::mem::offset_of!(_FILE_COMPRESSION_INFO, CompressionFormat) - 8usize];
    ["Offset of field: _FILE_COMPRESSION_INFO::CompressionUnitShift"]
        [::std::mem::offset_of!(_FILE_COMPRESSION_INFO, CompressionUnitShift) - 10usize];
    ["Offset of field: _FILE_COMPRESSION_INFO::ChunkShift"]
        [::std::mem::offset_of!(_FILE_COMPRESSION_INFO, ChunkShift) - 11usize];
    ["Offset of field: _FILE_COMPRESSION_INFO::ClusterShift"]
        [::std::mem::offset_of!(_FILE_COMPRESSION_INFO, ClusterShift) - 12usize];
    ["Offset of field: _FILE_COMPRESSION_INFO::Reserved"]
        [::std::mem::offset_of!(_FILE_COMPRESSION_INFO, Reserved) - 13usize];
};
pub type FILE_COMPRESSION_INFO = _FILE_COMPRESSION_INFO;
pub type PFILE_COMPRESSION_INFO = *mut _FILE_COMPRESSION_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_ATTRIBUTE_TAG_INFO {
    pub FileAttributes: DWORD,
    pub ReparseTag: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ATTRIBUTE_TAG_INFO"]
        [::std::mem::size_of::<_FILE_ATTRIBUTE_TAG_INFO>() - 8usize];
    ["Alignment of _FILE_ATTRIBUTE_TAG_INFO"]
        [::std::mem::align_of::<_FILE_ATTRIBUTE_TAG_INFO>() - 4usize];
    ["Offset of field: _FILE_ATTRIBUTE_TAG_INFO::FileAttributes"]
        [::std::mem::offset_of!(_FILE_ATTRIBUTE_TAG_INFO, FileAttributes) - 0usize];
    ["Offset of field: _FILE_ATTRIBUTE_TAG_INFO::ReparseTag"]
        [::std::mem::offset_of!(_FILE_ATTRIBUTE_TAG_INFO, ReparseTag) - 4usize];
};
pub type FILE_ATTRIBUTE_TAG_INFO = _FILE_ATTRIBUTE_TAG_INFO;
pub type PFILE_ATTRIBUTE_TAG_INFO = *mut _FILE_ATTRIBUTE_TAG_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_DISPOSITION_INFO {
    pub DeleteFileA: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_DISPOSITION_INFO"][::std::mem::size_of::<_FILE_DISPOSITION_INFO>() - 1usize];
    ["Alignment of _FILE_DISPOSITION_INFO"]
        [::std::mem::align_of::<_FILE_DISPOSITION_INFO>() - 1usize];
    ["Offset of field: _FILE_DISPOSITION_INFO::DeleteFileA"]
        [::std::mem::offset_of!(_FILE_DISPOSITION_INFO, DeleteFileA) - 0usize];
};
pub type FILE_DISPOSITION_INFO = _FILE_DISPOSITION_INFO;
pub type PFILE_DISPOSITION_INFO = *mut _FILE_DISPOSITION_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_DISPOSITION_INFO_EX {
    pub Flags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_DISPOSITION_INFO_EX"]
        [::std::mem::size_of::<_FILE_DISPOSITION_INFO_EX>() - 4usize];
    ["Alignment of _FILE_DISPOSITION_INFO_EX"]
        [::std::mem::align_of::<_FILE_DISPOSITION_INFO_EX>() - 4usize];
    ["Offset of field: _FILE_DISPOSITION_INFO_EX::Flags"]
        [::std::mem::offset_of!(_FILE_DISPOSITION_INFO_EX, Flags) - 0usize];
};
pub type FILE_DISPOSITION_INFO_EX = _FILE_DISPOSITION_INFO_EX;
pub type PFILE_DISPOSITION_INFO_EX = *mut _FILE_DISPOSITION_INFO_EX;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_ID_BOTH_DIR_INFO {
    pub NextEntryOffset: DWORD,
    pub FileIndex: DWORD,
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub FileAttributes: DWORD,
    pub FileNameLength: DWORD,
    pub EaSize: DWORD,
    pub ShortNameLength: CCHAR,
    pub ShortName: [WCHAR; 12usize],
    pub FileId: LARGE_INTEGER,
    pub FileName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ID_BOTH_DIR_INFO"][::std::mem::size_of::<_FILE_ID_BOTH_DIR_INFO>() - 112usize];
    ["Alignment of _FILE_ID_BOTH_DIR_INFO"]
        [::std::mem::align_of::<_FILE_ID_BOTH_DIR_INFO>() - 8usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::FileIndex"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, FileIndex) - 4usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::CreationTime"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, CreationTime) - 8usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, LastAccessTime) - 16usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, LastWriteTime) - 24usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::ChangeTime"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, ChangeTime) - 32usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::EndOfFile"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, EndOfFile) - 40usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::AllocationSize"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, AllocationSize) - 48usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::FileAttributes"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, FileAttributes) - 56usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::FileNameLength"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, FileNameLength) - 60usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::EaSize"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, EaSize) - 64usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::ShortNameLength"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, ShortNameLength) - 68usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::ShortName"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, ShortName) - 70usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::FileId"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, FileId) - 96usize];
    ["Offset of field: _FILE_ID_BOTH_DIR_INFO::FileName"]
        [::std::mem::offset_of!(_FILE_ID_BOTH_DIR_INFO, FileName) - 104usize];
};
pub type FILE_ID_BOTH_DIR_INFO = _FILE_ID_BOTH_DIR_INFO;
pub type PFILE_ID_BOTH_DIR_INFO = *mut _FILE_ID_BOTH_DIR_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_FULL_DIR_INFO {
    pub NextEntryOffset: ULONG,
    pub FileIndex: ULONG,
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub FileAttributes: ULONG,
    pub FileNameLength: ULONG,
    pub EaSize: ULONG,
    pub FileName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_FULL_DIR_INFO"][::std::mem::size_of::<_FILE_FULL_DIR_INFO>() - 72usize];
    ["Alignment of _FILE_FULL_DIR_INFO"][::std::mem::align_of::<_FILE_FULL_DIR_INFO>() - 8usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::FileIndex"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, FileIndex) - 4usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::CreationTime"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, CreationTime) - 8usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, LastAccessTime) - 16usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, LastWriteTime) - 24usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::ChangeTime"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, ChangeTime) - 32usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::EndOfFile"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, EndOfFile) - 40usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::AllocationSize"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, AllocationSize) - 48usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::FileAttributes"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, FileAttributes) - 56usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::FileNameLength"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, FileNameLength) - 60usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::EaSize"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, EaSize) - 64usize];
    ["Offset of field: _FILE_FULL_DIR_INFO::FileName"]
        [::std::mem::offset_of!(_FILE_FULL_DIR_INFO, FileName) - 68usize];
};
pub type FILE_FULL_DIR_INFO = _FILE_FULL_DIR_INFO;
pub type PFILE_FULL_DIR_INFO = *mut _FILE_FULL_DIR_INFO;
pub const _PRIORITY_HINT_IoPriorityHintVeryLow: _PRIORITY_HINT = 0;
pub const _PRIORITY_HINT_IoPriorityHintLow: _PRIORITY_HINT = 1;
pub const _PRIORITY_HINT_IoPriorityHintNormal: _PRIORITY_HINT = 2;
pub const _PRIORITY_HINT_MaximumIoPriorityHintType: _PRIORITY_HINT = 3;
pub type _PRIORITY_HINT = ::std::os::raw::c_int;
pub use self::_PRIORITY_HINT as PRIORITY_HINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_IO_PRIORITY_HINT_INFO {
    pub PriorityHint: PRIORITY_HINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_IO_PRIORITY_HINT_INFO"]
        [::std::mem::size_of::<_FILE_IO_PRIORITY_HINT_INFO>() - 4usize];
    ["Alignment of _FILE_IO_PRIORITY_HINT_INFO"]
        [::std::mem::align_of::<_FILE_IO_PRIORITY_HINT_INFO>() - 4usize];
    ["Offset of field: _FILE_IO_PRIORITY_HINT_INFO::PriorityHint"]
        [::std::mem::offset_of!(_FILE_IO_PRIORITY_HINT_INFO, PriorityHint) - 0usize];
};
pub type FILE_IO_PRIORITY_HINT_INFO = _FILE_IO_PRIORITY_HINT_INFO;
pub type PFILE_IO_PRIORITY_HINT_INFO = *mut _FILE_IO_PRIORITY_HINT_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_ALIGNMENT_INFO {
    pub AlignmentRequirement: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ALIGNMENT_INFO"][::std::mem::size_of::<_FILE_ALIGNMENT_INFO>() - 4usize];
    ["Alignment of _FILE_ALIGNMENT_INFO"][::std::mem::align_of::<_FILE_ALIGNMENT_INFO>() - 4usize];
    ["Offset of field: _FILE_ALIGNMENT_INFO::AlignmentRequirement"]
        [::std::mem::offset_of!(_FILE_ALIGNMENT_INFO, AlignmentRequirement) - 0usize];
};
pub type FILE_ALIGNMENT_INFO = _FILE_ALIGNMENT_INFO;
pub type PFILE_ALIGNMENT_INFO = *mut _FILE_ALIGNMENT_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_STORAGE_INFO {
    pub LogicalBytesPerSector: ULONG,
    pub PhysicalBytesPerSectorForAtomicity: ULONG,
    pub PhysicalBytesPerSectorForPerformance: ULONG,
    pub FileSystemEffectivePhysicalBytesPerSectorForAtomicity: ULONG,
    pub Flags: ULONG,
    pub ByteOffsetForSectorAlignment: ULONG,
    pub ByteOffsetForPartitionAlignment: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_STORAGE_INFO"][::std::mem::size_of::<_FILE_STORAGE_INFO>() - 28usize];
    ["Alignment of _FILE_STORAGE_INFO"][::std::mem::align_of::<_FILE_STORAGE_INFO>() - 4usize];
    ["Offset of field: _FILE_STORAGE_INFO::LogicalBytesPerSector"]
        [::std::mem::offset_of!(_FILE_STORAGE_INFO, LogicalBytesPerSector) - 0usize];
    ["Offset of field: _FILE_STORAGE_INFO::PhysicalBytesPerSectorForAtomicity"]
        [::std::mem::offset_of!(_FILE_STORAGE_INFO, PhysicalBytesPerSectorForAtomicity) - 4usize];
    ["Offset of field: _FILE_STORAGE_INFO::PhysicalBytesPerSectorForPerformance"]
        [::std::mem::offset_of!(_FILE_STORAGE_INFO, PhysicalBytesPerSectorForPerformance) - 8usize];
    ["Offset of field: _FILE_STORAGE_INFO::FileSystemEffectivePhysicalBytesPerSectorForAtomicity"]
        [::std::mem::offset_of!(
            _FILE_STORAGE_INFO,
            FileSystemEffectivePhysicalBytesPerSectorForAtomicity
        ) - 12usize];
    ["Offset of field: _FILE_STORAGE_INFO::Flags"]
        [::std::mem::offset_of!(_FILE_STORAGE_INFO, Flags) - 16usize];
    ["Offset of field: _FILE_STORAGE_INFO::ByteOffsetForSectorAlignment"]
        [::std::mem::offset_of!(_FILE_STORAGE_INFO, ByteOffsetForSectorAlignment) - 20usize];
    ["Offset of field: _FILE_STORAGE_INFO::ByteOffsetForPartitionAlignment"]
        [::std::mem::offset_of!(_FILE_STORAGE_INFO, ByteOffsetForPartitionAlignment) - 24usize];
};
pub type FILE_STORAGE_INFO = _FILE_STORAGE_INFO;
pub type PFILE_STORAGE_INFO = *mut _FILE_STORAGE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_ID_INFO {
    pub VolumeSerialNumber: ULONGLONG,
    pub FileId: FILE_ID_128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ID_INFO"][::std::mem::size_of::<_FILE_ID_INFO>() - 24usize];
    ["Alignment of _FILE_ID_INFO"][::std::mem::align_of::<_FILE_ID_INFO>() - 8usize];
    ["Offset of field: _FILE_ID_INFO::VolumeSerialNumber"]
        [::std::mem::offset_of!(_FILE_ID_INFO, VolumeSerialNumber) - 0usize];
    ["Offset of field: _FILE_ID_INFO::FileId"]
        [::std::mem::offset_of!(_FILE_ID_INFO, FileId) - 8usize];
};
pub type FILE_ID_INFO = _FILE_ID_INFO;
pub type PFILE_ID_INFO = *mut _FILE_ID_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_ID_EXTD_DIR_INFO {
    pub NextEntryOffset: ULONG,
    pub FileIndex: ULONG,
    pub CreationTime: LARGE_INTEGER,
    pub LastAccessTime: LARGE_INTEGER,
    pub LastWriteTime: LARGE_INTEGER,
    pub ChangeTime: LARGE_INTEGER,
    pub EndOfFile: LARGE_INTEGER,
    pub AllocationSize: LARGE_INTEGER,
    pub FileAttributes: ULONG,
    pub FileNameLength: ULONG,
    pub EaSize: ULONG,
    pub ReparsePointTag: ULONG,
    pub FileId: FILE_ID_128,
    pub FileName: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_ID_EXTD_DIR_INFO"][::std::mem::size_of::<_FILE_ID_EXTD_DIR_INFO>() - 96usize];
    ["Alignment of _FILE_ID_EXTD_DIR_INFO"]
        [::std::mem::align_of::<_FILE_ID_EXTD_DIR_INFO>() - 8usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::NextEntryOffset"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, NextEntryOffset) - 0usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::FileIndex"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, FileIndex) - 4usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::CreationTime"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, CreationTime) - 8usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::LastAccessTime"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, LastAccessTime) - 16usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::LastWriteTime"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, LastWriteTime) - 24usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::ChangeTime"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, ChangeTime) - 32usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::EndOfFile"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, EndOfFile) - 40usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::AllocationSize"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, AllocationSize) - 48usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::FileAttributes"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, FileAttributes) - 56usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::FileNameLength"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, FileNameLength) - 60usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::EaSize"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, EaSize) - 64usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::ReparsePointTag"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, ReparsePointTag) - 68usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::FileId"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, FileId) - 72usize];
    ["Offset of field: _FILE_ID_EXTD_DIR_INFO::FileName"]
        [::std::mem::offset_of!(_FILE_ID_EXTD_DIR_INFO, FileName) - 88usize];
};
pub type FILE_ID_EXTD_DIR_INFO = _FILE_ID_EXTD_DIR_INFO;
pub type PFILE_ID_EXTD_DIR_INFO = *mut _FILE_ID_EXTD_DIR_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _FILE_REMOTE_PROTOCOL_INFO {
    pub StructureVersion: USHORT,
    pub StructureSize: USHORT,
    pub Protocol: ULONG,
    pub ProtocolMajorVersion: USHORT,
    pub ProtocolMinorVersion: USHORT,
    pub ProtocolRevision: USHORT,
    pub Reserved: USHORT,
    pub Flags: ULONG,
    pub GenericReserved: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1,
    pub ProtocolSpecific: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1 {
    pub Reserved: [ULONG; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1>() - 32usize];
    ["Alignment of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1::Reserved"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1, Reserved) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2 {
    pub Smb2: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1,
    pub Reserved: [ULONG; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1 {
    pub Server: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    pub Share: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub Capabilities: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    [
        "Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1::Capabilities",
    ][::std::mem::offset_of!(
        _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
        Capabilities
    ) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 {
    pub Capabilities: ULONG,
    pub ShareFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2>(
        ) - 8usize];
    ["Alignment of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<
            _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
        >() - 4usize];
    [
        "Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2::Capabilities",
    ][::std::mem::offset_of!(
        _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
        Capabilities
    ) - 0usize];
    [
        "Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2::ShareFlags",
    ][::std::mem::offset_of!(
        _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2,
        ShareFlags
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1>() - 12usize];
    ["Alignment of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1::Server"][::std::mem::offset_of!(
        _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1,
        Server
    ) - 0usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1::Share"][::std::mem::offset_of!(
        _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1,
        Share
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2"]
        [::std::mem::size_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2>() - 64usize];
    ["Alignment of _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2"]
        [::std::mem::align_of::<_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2>() - 4usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2::Smb2"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2, Smb2) - 0usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2::Reserved"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2, Reserved) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILE_REMOTE_PROTOCOL_INFO"]
        [::std::mem::size_of::<_FILE_REMOTE_PROTOCOL_INFO>() - 116usize];
    ["Alignment of _FILE_REMOTE_PROTOCOL_INFO"]
        [::std::mem::align_of::<_FILE_REMOTE_PROTOCOL_INFO>() - 4usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::StructureVersion"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, StructureVersion) - 0usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::StructureSize"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, StructureSize) - 2usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::Protocol"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, Protocol) - 4usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::ProtocolMajorVersion"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, ProtocolMajorVersion) - 8usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::ProtocolMinorVersion"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, ProtocolMinorVersion) - 10usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::ProtocolRevision"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, ProtocolRevision) - 12usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::Reserved"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, Reserved) - 14usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::Flags"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, Flags) - 16usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::GenericReserved"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, GenericReserved) - 20usize];
    ["Offset of field: _FILE_REMOTE_PROTOCOL_INFO::ProtocolSpecific"]
        [::std::mem::offset_of!(_FILE_REMOTE_PROTOCOL_INFO, ProtocolSpecific) - 52usize];
};
pub type FILE_REMOTE_PROTOCOL_INFO = _FILE_REMOTE_PROTOCOL_INFO;
pub type PFILE_REMOTE_PROTOCOL_INFO = *mut _FILE_REMOTE_PROTOCOL_INFO;
unsafe extern "C" {
    pub fn GetFileInformationByHandleEx(
        hFile: HANDLE,
        FileInformationClass: FILE_INFO_BY_HANDLE_CLASS,
        lpFileInformation: LPVOID,
        dwBufferSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileInformationByName(
        FileName: PCWSTR,
        FileInformationClass: FILE_INFO_BY_NAME_CLASS,
        FileInfoBuffer: PVOID,
        FileInfoBufferSize: ULONG,
    ) -> BOOL;
}
pub const _FILE_ID_TYPE_FileIdType: _FILE_ID_TYPE = 0;
pub const _FILE_ID_TYPE_ObjectIdType: _FILE_ID_TYPE = 1;
pub const _FILE_ID_TYPE_ExtendedFileIdType: _FILE_ID_TYPE = 2;
pub const _FILE_ID_TYPE_MaximumFileIdType: _FILE_ID_TYPE = 3;
pub type _FILE_ID_TYPE = ::std::os::raw::c_int;
pub use self::_FILE_ID_TYPE as FILE_ID_TYPE;
pub type PFILE_ID_TYPE = *mut _FILE_ID_TYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FILE_ID_DESCRIPTOR {
    pub dwSize: DWORD,
    pub Type: FILE_ID_TYPE,
    pub __bindgen_anon_1: FILE_ID_DESCRIPTOR__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union FILE_ID_DESCRIPTOR__bindgen_ty_1 {
    pub FileId: LARGE_INTEGER,
    pub ObjectId: GUID,
    pub ExtendedFileId: FILE_ID_128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FILE_ID_DESCRIPTOR__bindgen_ty_1"]
        [::std::mem::size_of::<FILE_ID_DESCRIPTOR__bindgen_ty_1>() - 16usize];
    ["Alignment of FILE_ID_DESCRIPTOR__bindgen_ty_1"]
        [::std::mem::align_of::<FILE_ID_DESCRIPTOR__bindgen_ty_1>() - 8usize];
    ["Offset of field: FILE_ID_DESCRIPTOR__bindgen_ty_1::FileId"]
        [::std::mem::offset_of!(FILE_ID_DESCRIPTOR__bindgen_ty_1, FileId) - 0usize];
    ["Offset of field: FILE_ID_DESCRIPTOR__bindgen_ty_1::ObjectId"]
        [::std::mem::offset_of!(FILE_ID_DESCRIPTOR__bindgen_ty_1, ObjectId) - 0usize];
    ["Offset of field: FILE_ID_DESCRIPTOR__bindgen_ty_1::ExtendedFileId"]
        [::std::mem::offset_of!(FILE_ID_DESCRIPTOR__bindgen_ty_1, ExtendedFileId) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FILE_ID_DESCRIPTOR"][::std::mem::size_of::<FILE_ID_DESCRIPTOR>() - 24usize];
    ["Alignment of FILE_ID_DESCRIPTOR"][::std::mem::align_of::<FILE_ID_DESCRIPTOR>() - 8usize];
    ["Offset of field: FILE_ID_DESCRIPTOR::dwSize"]
        [::std::mem::offset_of!(FILE_ID_DESCRIPTOR, dwSize) - 0usize];
    ["Offset of field: FILE_ID_DESCRIPTOR::Type"]
        [::std::mem::offset_of!(FILE_ID_DESCRIPTOR, Type) - 4usize];
};
pub type LPFILE_ID_DESCRIPTOR = *mut FILE_ID_DESCRIPTOR;
unsafe extern "C" {
    pub fn OpenFileById(
        hVolumeHint: HANDLE,
        lpFileId: LPFILE_ID_DESCRIPTOR,
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        dwFlagsAndAttributes: DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CreateSymbolicLinkA(
        lpSymlinkFileName: LPCSTR,
        lpTargetFileName: LPCSTR,
        dwFlags: DWORD,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn CreateSymbolicLinkW(
        lpSymlinkFileName: LPCWSTR,
        lpTargetFileName: LPCWSTR,
        dwFlags: DWORD,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn QueryActCtxSettingsW(
        dwFlags: DWORD,
        hActCtx: HANDLE,
        settingsNameSpace: PCWSTR,
        settingName: PCWSTR,
        pvBuffer: PWSTR,
        dwBuffer: SIZE_T,
        pdwWrittenOrRequired: *mut SIZE_T,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateSymbolicLinkTransactedA(
        lpSymlinkFileName: LPCSTR,
        lpTargetFileName: LPCSTR,
        dwFlags: DWORD,
        hTransaction: HANDLE,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn CreateSymbolicLinkTransactedW(
        lpSymlinkFileName: LPCWSTR,
        lpTargetFileName: LPCWSTR,
        dwFlags: DWORD,
        hTransaction: HANDLE,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn ReplacePartitionUnit(
        TargetPartition: PWSTR,
        SparePartition: PWSTR,
        Flags: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AddSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyContext(Destination: PCONTEXT, ContextFlags: DWORD, Source: PCONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeContext(
        Buffer: PVOID,
        ContextFlags: DWORD,
        Context: *mut PCONTEXT,
        ContextLength: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitializeContext2(
        Buffer: PVOID,
        ContextFlags: DWORD,
        Context: *mut PCONTEXT,
        ContextLength: PDWORD,
        XStateCompactionMask: ULONG64,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetEnabledXStateFeatures() -> DWORD64;
}
unsafe extern "C" {
    pub fn GetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: PDWORD64) -> BOOL;
}
unsafe extern "C" {
    pub fn LocateXStateFeature(Context: PCONTEXT, FeatureId: DWORD, Length: PDWORD) -> PVOID;
}
unsafe extern "C" {
    pub fn SetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: DWORD64) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadEnabledXStateFeatures() -> DWORD64;
}
unsafe extern "C" {
    pub fn EnableProcessOptionalXStateFeatures(Features: DWORD64) -> BOOL;
}
unsafe extern "C" {
    pub fn EnableThreadProfiling(
        ThreadHandle: HANDLE,
        Flags: DWORD,
        HardwareCounters: DWORD64,
        PerformanceDataHandle: *mut HANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn DisableThreadProfiling(PerformanceDataHandle: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn QueryThreadProfiling(ThreadHandle: HANDLE, Enabled: PBOOLEAN) -> DWORD;
}
unsafe extern "C" {
    pub fn ReadThreadProfilingData(
        PerformanceDataHandle: HANDLE,
        Flags: DWORD,
        PerformanceData: PPERFORMANCE_DATA,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn RaiseCustomSystemEventTrigger(
        CustomSystemEventTriggerConfig: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DRAWPATRECT {
    pub ptPosition: POINT,
    pub ptSize: POINT,
    pub wStyle: WORD,
    pub wPattern: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DRAWPATRECT"][::std::mem::size_of::<_DRAWPATRECT>() - 20usize];
    ["Alignment of _DRAWPATRECT"][::std::mem::align_of::<_DRAWPATRECT>() - 4usize];
    ["Offset of field: _DRAWPATRECT::ptPosition"]
        [::std::mem::offset_of!(_DRAWPATRECT, ptPosition) - 0usize];
    ["Offset of field: _DRAWPATRECT::ptSize"]
        [::std::mem::offset_of!(_DRAWPATRECT, ptSize) - 8usize];
    ["Offset of field: _DRAWPATRECT::wStyle"]
        [::std::mem::offset_of!(_DRAWPATRECT, wStyle) - 16usize];
    ["Offset of field: _DRAWPATRECT::wPattern"]
        [::std::mem::offset_of!(_DRAWPATRECT, wPattern) - 18usize];
};
pub type DRAWPATRECT = _DRAWPATRECT;
pub type PDRAWPATRECT = *mut _DRAWPATRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PSINJECTDATA {
    pub DataBytes: DWORD,
    pub InjectionPoint: WORD,
    pub PageNumber: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PSINJECTDATA"][::std::mem::size_of::<_PSINJECTDATA>() - 8usize];
    ["Alignment of _PSINJECTDATA"][::std::mem::align_of::<_PSINJECTDATA>() - 4usize];
    ["Offset of field: _PSINJECTDATA::DataBytes"]
        [::std::mem::offset_of!(_PSINJECTDATA, DataBytes) - 0usize];
    ["Offset of field: _PSINJECTDATA::InjectionPoint"]
        [::std::mem::offset_of!(_PSINJECTDATA, InjectionPoint) - 4usize];
    ["Offset of field: _PSINJECTDATA::PageNumber"]
        [::std::mem::offset_of!(_PSINJECTDATA, PageNumber) - 6usize];
};
pub type PSINJECTDATA = _PSINJECTDATA;
pub type PPSINJECTDATA = *mut _PSINJECTDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PSFEATURE_OUTPUT {
    pub bPageIndependent: BOOL,
    pub bSetPageDevice: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PSFEATURE_OUTPUT"][::std::mem::size_of::<_PSFEATURE_OUTPUT>() - 8usize];
    ["Alignment of _PSFEATURE_OUTPUT"][::std::mem::align_of::<_PSFEATURE_OUTPUT>() - 4usize];
    ["Offset of field: _PSFEATURE_OUTPUT::bPageIndependent"]
        [::std::mem::offset_of!(_PSFEATURE_OUTPUT, bPageIndependent) - 0usize];
    ["Offset of field: _PSFEATURE_OUTPUT::bSetPageDevice"]
        [::std::mem::offset_of!(_PSFEATURE_OUTPUT, bSetPageDevice) - 4usize];
};
pub type PSFEATURE_OUTPUT = _PSFEATURE_OUTPUT;
pub type PPSFEATURE_OUTPUT = *mut _PSFEATURE_OUTPUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PSFEATURE_CUSTPAPER {
    pub lOrientation: LONG,
    pub lWidth: LONG,
    pub lHeight: LONG,
    pub lWidthOffset: LONG,
    pub lHeightOffset: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PSFEATURE_CUSTPAPER"][::std::mem::size_of::<_PSFEATURE_CUSTPAPER>() - 20usize];
    ["Alignment of _PSFEATURE_CUSTPAPER"][::std::mem::align_of::<_PSFEATURE_CUSTPAPER>() - 4usize];
    ["Offset of field: _PSFEATURE_CUSTPAPER::lOrientation"]
        [::std::mem::offset_of!(_PSFEATURE_CUSTPAPER, lOrientation) - 0usize];
    ["Offset of field: _PSFEATURE_CUSTPAPER::lWidth"]
        [::std::mem::offset_of!(_PSFEATURE_CUSTPAPER, lWidth) - 4usize];
    ["Offset of field: _PSFEATURE_CUSTPAPER::lHeight"]
        [::std::mem::offset_of!(_PSFEATURE_CUSTPAPER, lHeight) - 8usize];
    ["Offset of field: _PSFEATURE_CUSTPAPER::lWidthOffset"]
        [::std::mem::offset_of!(_PSFEATURE_CUSTPAPER, lWidthOffset) - 12usize];
    ["Offset of field: _PSFEATURE_CUSTPAPER::lHeightOffset"]
        [::std::mem::offset_of!(_PSFEATURE_CUSTPAPER, lHeightOffset) - 16usize];
};
pub type PSFEATURE_CUSTPAPER = _PSFEATURE_CUSTPAPER;
pub type PPSFEATURE_CUSTPAPER = *mut _PSFEATURE_CUSTPAPER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagXFORM {
    pub eM11: FLOAT,
    pub eM12: FLOAT,
    pub eM21: FLOAT,
    pub eM22: FLOAT,
    pub eDx: FLOAT,
    pub eDy: FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagXFORM"][::std::mem::size_of::<tagXFORM>() - 24usize];
    ["Alignment of tagXFORM"][::std::mem::align_of::<tagXFORM>() - 4usize];
    ["Offset of field: tagXFORM::eM11"][::std::mem::offset_of!(tagXFORM, eM11) - 0usize];
    ["Offset of field: tagXFORM::eM12"][::std::mem::offset_of!(tagXFORM, eM12) - 4usize];
    ["Offset of field: tagXFORM::eM21"][::std::mem::offset_of!(tagXFORM, eM21) - 8usize];
    ["Offset of field: tagXFORM::eM22"][::std::mem::offset_of!(tagXFORM, eM22) - 12usize];
    ["Offset of field: tagXFORM::eDx"][::std::mem::offset_of!(tagXFORM, eDx) - 16usize];
    ["Offset of field: tagXFORM::eDy"][::std::mem::offset_of!(tagXFORM, eDy) - 20usize];
};
pub type XFORM = tagXFORM;
pub type PXFORM = *mut tagXFORM;
pub type LPXFORM = *mut tagXFORM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagBITMAP {
    pub bmType: LONG,
    pub bmWidth: LONG,
    pub bmHeight: LONG,
    pub bmWidthBytes: LONG,
    pub bmPlanes: WORD,
    pub bmBitsPixel: WORD,
    pub bmBits: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagBITMAP"][::std::mem::size_of::<tagBITMAP>() - 32usize];
    ["Alignment of tagBITMAP"][::std::mem::align_of::<tagBITMAP>() - 8usize];
    ["Offset of field: tagBITMAP::bmType"][::std::mem::offset_of!(tagBITMAP, bmType) - 0usize];
    ["Offset of field: tagBITMAP::bmWidth"][::std::mem::offset_of!(tagBITMAP, bmWidth) - 4usize];
    ["Offset of field: tagBITMAP::bmHeight"][::std::mem::offset_of!(tagBITMAP, bmHeight) - 8usize];
    ["Offset of field: tagBITMAP::bmWidthBytes"]
        [::std::mem::offset_of!(tagBITMAP, bmWidthBytes) - 12usize];
    ["Offset of field: tagBITMAP::bmPlanes"][::std::mem::offset_of!(tagBITMAP, bmPlanes) - 16usize];
    ["Offset of field: tagBITMAP::bmBitsPixel"]
        [::std::mem::offset_of!(tagBITMAP, bmBitsPixel) - 18usize];
    ["Offset of field: tagBITMAP::bmBits"][::std::mem::offset_of!(tagBITMAP, bmBits) - 24usize];
};
pub type BITMAP = tagBITMAP;
pub type PBITMAP = *mut tagBITMAP;
pub type NPBITMAP = *mut tagBITMAP;
pub type LPBITMAP = *mut tagBITMAP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRGBTRIPLE {
    pub rgbtBlue: BYTE,
    pub rgbtGreen: BYTE,
    pub rgbtRed: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRGBTRIPLE"][::std::mem::size_of::<tagRGBTRIPLE>() - 3usize];
    ["Alignment of tagRGBTRIPLE"][::std::mem::align_of::<tagRGBTRIPLE>() - 1usize];
    ["Offset of field: tagRGBTRIPLE::rgbtBlue"]
        [::std::mem::offset_of!(tagRGBTRIPLE, rgbtBlue) - 0usize];
    ["Offset of field: tagRGBTRIPLE::rgbtGreen"]
        [::std::mem::offset_of!(tagRGBTRIPLE, rgbtGreen) - 1usize];
    ["Offset of field: tagRGBTRIPLE::rgbtRed"]
        [::std::mem::offset_of!(tagRGBTRIPLE, rgbtRed) - 2usize];
};
pub type RGBTRIPLE = tagRGBTRIPLE;
pub type PRGBTRIPLE = *mut tagRGBTRIPLE;
pub type NPRGBTRIPLE = *mut tagRGBTRIPLE;
pub type LPRGBTRIPLE = *mut tagRGBTRIPLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRGBQUAD {
    pub rgbBlue: BYTE,
    pub rgbGreen: BYTE,
    pub rgbRed: BYTE,
    pub rgbReserved: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRGBQUAD"][::std::mem::size_of::<tagRGBQUAD>() - 4usize];
    ["Alignment of tagRGBQUAD"][::std::mem::align_of::<tagRGBQUAD>() - 1usize];
    ["Offset of field: tagRGBQUAD::rgbBlue"][::std::mem::offset_of!(tagRGBQUAD, rgbBlue) - 0usize];
    ["Offset of field: tagRGBQUAD::rgbGreen"]
        [::std::mem::offset_of!(tagRGBQUAD, rgbGreen) - 1usize];
    ["Offset of field: tagRGBQUAD::rgbRed"][::std::mem::offset_of!(tagRGBQUAD, rgbRed) - 2usize];
    ["Offset of field: tagRGBQUAD::rgbReserved"]
        [::std::mem::offset_of!(tagRGBQUAD, rgbReserved) - 3usize];
};
pub type RGBQUAD = tagRGBQUAD;
pub type LPRGBQUAD = *mut RGBQUAD;
pub type LCSCSTYPE = LONG;
pub type LCSGAMUTMATCH = LONG;
pub type FXPT16DOT16 = ::std::os::raw::c_long;
pub type LPFXPT16DOT16 = *mut ::std::os::raw::c_long;
pub type FXPT2DOT30 = ::std::os::raw::c_long;
pub type LPFXPT2DOT30 = *mut ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCIEXYZ {
    pub ciexyzX: FXPT2DOT30,
    pub ciexyzY: FXPT2DOT30,
    pub ciexyzZ: FXPT2DOT30,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCIEXYZ"][::std::mem::size_of::<tagCIEXYZ>() - 12usize];
    ["Alignment of tagCIEXYZ"][::std::mem::align_of::<tagCIEXYZ>() - 4usize];
    ["Offset of field: tagCIEXYZ::ciexyzX"][::std::mem::offset_of!(tagCIEXYZ, ciexyzX) - 0usize];
    ["Offset of field: tagCIEXYZ::ciexyzY"][::std::mem::offset_of!(tagCIEXYZ, ciexyzY) - 4usize];
    ["Offset of field: tagCIEXYZ::ciexyzZ"][::std::mem::offset_of!(tagCIEXYZ, ciexyzZ) - 8usize];
};
pub type CIEXYZ = tagCIEXYZ;
pub type LPCIEXYZ = *mut CIEXYZ;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagICEXYZTRIPLE {
    pub ciexyzRed: CIEXYZ,
    pub ciexyzGreen: CIEXYZ,
    pub ciexyzBlue: CIEXYZ,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagICEXYZTRIPLE"][::std::mem::size_of::<tagICEXYZTRIPLE>() - 36usize];
    ["Alignment of tagICEXYZTRIPLE"][::std::mem::align_of::<tagICEXYZTRIPLE>() - 4usize];
    ["Offset of field: tagICEXYZTRIPLE::ciexyzRed"]
        [::std::mem::offset_of!(tagICEXYZTRIPLE, ciexyzRed) - 0usize];
    ["Offset of field: tagICEXYZTRIPLE::ciexyzGreen"]
        [::std::mem::offset_of!(tagICEXYZTRIPLE, ciexyzGreen) - 12usize];
    ["Offset of field: tagICEXYZTRIPLE::ciexyzBlue"]
        [::std::mem::offset_of!(tagICEXYZTRIPLE, ciexyzBlue) - 24usize];
};
pub type CIEXYZTRIPLE = tagICEXYZTRIPLE;
pub type LPCIEXYZTRIPLE = *mut CIEXYZTRIPLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGCOLORSPACEA {
    pub lcsSignature: DWORD,
    pub lcsVersion: DWORD,
    pub lcsSize: DWORD,
    pub lcsCSType: LCSCSTYPE,
    pub lcsIntent: LCSGAMUTMATCH,
    pub lcsEndpoints: CIEXYZTRIPLE,
    pub lcsGammaRed: DWORD,
    pub lcsGammaGreen: DWORD,
    pub lcsGammaBlue: DWORD,
    pub lcsFilename: [CHAR; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGCOLORSPACEA"][::std::mem::size_of::<tagLOGCOLORSPACEA>() - 328usize];
    ["Alignment of tagLOGCOLORSPACEA"][::std::mem::align_of::<tagLOGCOLORSPACEA>() - 4usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsSignature"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsSignature) - 0usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsVersion"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsVersion) - 4usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsSize"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsSize) - 8usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsCSType"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsCSType) - 12usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsIntent"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsIntent) - 16usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsEndpoints"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsEndpoints) - 20usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsGammaRed"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsGammaRed) - 56usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsGammaGreen"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsGammaGreen) - 60usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsGammaBlue"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsGammaBlue) - 64usize];
    ["Offset of field: tagLOGCOLORSPACEA::lcsFilename"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEA, lcsFilename) - 68usize];
};
pub type LOGCOLORSPACEA = tagLOGCOLORSPACEA;
pub type LPLOGCOLORSPACEA = *mut tagLOGCOLORSPACEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGCOLORSPACEW {
    pub lcsSignature: DWORD,
    pub lcsVersion: DWORD,
    pub lcsSize: DWORD,
    pub lcsCSType: LCSCSTYPE,
    pub lcsIntent: LCSGAMUTMATCH,
    pub lcsEndpoints: CIEXYZTRIPLE,
    pub lcsGammaRed: DWORD,
    pub lcsGammaGreen: DWORD,
    pub lcsGammaBlue: DWORD,
    pub lcsFilename: [WCHAR; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGCOLORSPACEW"][::std::mem::size_of::<tagLOGCOLORSPACEW>() - 588usize];
    ["Alignment of tagLOGCOLORSPACEW"][::std::mem::align_of::<tagLOGCOLORSPACEW>() - 4usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsSignature"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsSignature) - 0usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsVersion"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsVersion) - 4usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsSize"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsSize) - 8usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsCSType"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsCSType) - 12usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsIntent"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsIntent) - 16usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsEndpoints"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsEndpoints) - 20usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsGammaRed"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsGammaRed) - 56usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsGammaGreen"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsGammaGreen) - 60usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsGammaBlue"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsGammaBlue) - 64usize];
    ["Offset of field: tagLOGCOLORSPACEW::lcsFilename"]
        [::std::mem::offset_of!(tagLOGCOLORSPACEW, lcsFilename) - 68usize];
};
pub type LOGCOLORSPACEW = tagLOGCOLORSPACEW;
pub type LPLOGCOLORSPACEW = *mut tagLOGCOLORSPACEW;
pub type LOGCOLORSPACE = LOGCOLORSPACEA;
pub type LPLOGCOLORSPACE = LPLOGCOLORSPACEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagBITMAPCOREHEADER {
    pub bcSize: DWORD,
    pub bcWidth: WORD,
    pub bcHeight: WORD,
    pub bcPlanes: WORD,
    pub bcBitCount: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagBITMAPCOREHEADER"][::std::mem::size_of::<tagBITMAPCOREHEADER>() - 12usize];
    ["Alignment of tagBITMAPCOREHEADER"][::std::mem::align_of::<tagBITMAPCOREHEADER>() - 4usize];
    ["Offset of field: tagBITMAPCOREHEADER::bcSize"]
        [::std::mem::offset_of!(tagBITMAPCOREHEADER, bcSize) - 0usize];
    ["Offset of field: tagBITMAPCOREHEADER::bcWidth"]
        [::std::mem::offset_of!(tagBITMAPCOREHEADER, bcWidth) - 4usize];
    ["Offset of field: tagBITMAPCOREHEADER::bcHeight"]
        [::std::mem::offset_of!(tagBITMAPCOREHEADER, bcHeight) - 6usize];
    ["Offset of field: tagBITMAPCOREHEADER::bcPlanes"]
        [::std::mem::offset_of!(tagBITMAPCOREHEADER, bcPlanes) - 8usize];
    ["Offset of field: tagBITMAPCOREHEADER::bcBitCount"]
        [::std::mem::offset_of!(tagBITMAPCOREHEADER, bcBitCount) - 10usize];
};
pub type BITMAPCOREHEADER = tagBITMAPCOREHEADER;
pub type LPBITMAPCOREHEADER = *mut tagBITMAPCOREHEADER;
pub type PBITMAPCOREHEADER = *mut tagBITMAPCOREHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagBITMAPINFOHEADER {
    pub biSize: DWORD,
    pub biWidth: LONG,
    pub biHeight: LONG,
    pub biPlanes: WORD,
    pub biBitCount: WORD,
    pub biCompression: DWORD,
    pub biSizeImage: DWORD,
    pub biXPelsPerMeter: LONG,
    pub biYPelsPerMeter: LONG,
    pub biClrUsed: DWORD,
    pub biClrImportant: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagBITMAPINFOHEADER"][::std::mem::size_of::<tagBITMAPINFOHEADER>() - 40usize];
    ["Alignment of tagBITMAPINFOHEADER"][::std::mem::align_of::<tagBITMAPINFOHEADER>() - 4usize];
    ["Offset of field: tagBITMAPINFOHEADER::biSize"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biSize) - 0usize];
    ["Offset of field: tagBITMAPINFOHEADER::biWidth"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biWidth) - 4usize];
    ["Offset of field: tagBITMAPINFOHEADER::biHeight"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biHeight) - 8usize];
    ["Offset of field: tagBITMAPINFOHEADER::biPlanes"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biPlanes) - 12usize];
    ["Offset of field: tagBITMAPINFOHEADER::biBitCount"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biBitCount) - 14usize];
    ["Offset of field: tagBITMAPINFOHEADER::biCompression"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biCompression) - 16usize];
    ["Offset of field: tagBITMAPINFOHEADER::biSizeImage"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biSizeImage) - 20usize];
    ["Offset of field: tagBITMAPINFOHEADER::biXPelsPerMeter"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biXPelsPerMeter) - 24usize];
    ["Offset of field: tagBITMAPINFOHEADER::biYPelsPerMeter"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biYPelsPerMeter) - 28usize];
    ["Offset of field: tagBITMAPINFOHEADER::biClrUsed"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biClrUsed) - 32usize];
    ["Offset of field: tagBITMAPINFOHEADER::biClrImportant"]
        [::std::mem::offset_of!(tagBITMAPINFOHEADER, biClrImportant) - 36usize];
};
pub type BITMAPINFOHEADER = tagBITMAPINFOHEADER;
pub type LPBITMAPINFOHEADER = *mut tagBITMAPINFOHEADER;
pub type PBITMAPINFOHEADER = *mut tagBITMAPINFOHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BITMAPV4HEADER {
    pub bV4Size: DWORD,
    pub bV4Width: LONG,
    pub bV4Height: LONG,
    pub bV4Planes: WORD,
    pub bV4BitCount: WORD,
    pub bV4V4Compression: DWORD,
    pub bV4SizeImage: DWORD,
    pub bV4XPelsPerMeter: LONG,
    pub bV4YPelsPerMeter: LONG,
    pub bV4ClrUsed: DWORD,
    pub bV4ClrImportant: DWORD,
    pub bV4RedMask: DWORD,
    pub bV4GreenMask: DWORD,
    pub bV4BlueMask: DWORD,
    pub bV4AlphaMask: DWORD,
    pub bV4CSType: DWORD,
    pub bV4Endpoints: CIEXYZTRIPLE,
    pub bV4GammaRed: DWORD,
    pub bV4GammaGreen: DWORD,
    pub bV4GammaBlue: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BITMAPV4HEADER"][::std::mem::size_of::<BITMAPV4HEADER>() - 108usize];
    ["Alignment of BITMAPV4HEADER"][::std::mem::align_of::<BITMAPV4HEADER>() - 4usize];
    ["Offset of field: BITMAPV4HEADER::bV4Size"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4Size) - 0usize];
    ["Offset of field: BITMAPV4HEADER::bV4Width"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4Width) - 4usize];
    ["Offset of field: BITMAPV4HEADER::bV4Height"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4Height) - 8usize];
    ["Offset of field: BITMAPV4HEADER::bV4Planes"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4Planes) - 12usize];
    ["Offset of field: BITMAPV4HEADER::bV4BitCount"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4BitCount) - 14usize];
    ["Offset of field: BITMAPV4HEADER::bV4V4Compression"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4V4Compression) - 16usize];
    ["Offset of field: BITMAPV4HEADER::bV4SizeImage"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4SizeImage) - 20usize];
    ["Offset of field: BITMAPV4HEADER::bV4XPelsPerMeter"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4XPelsPerMeter) - 24usize];
    ["Offset of field: BITMAPV4HEADER::bV4YPelsPerMeter"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4YPelsPerMeter) - 28usize];
    ["Offset of field: BITMAPV4HEADER::bV4ClrUsed"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4ClrUsed) - 32usize];
    ["Offset of field: BITMAPV4HEADER::bV4ClrImportant"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4ClrImportant) - 36usize];
    ["Offset of field: BITMAPV4HEADER::bV4RedMask"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4RedMask) - 40usize];
    ["Offset of field: BITMAPV4HEADER::bV4GreenMask"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4GreenMask) - 44usize];
    ["Offset of field: BITMAPV4HEADER::bV4BlueMask"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4BlueMask) - 48usize];
    ["Offset of field: BITMAPV4HEADER::bV4AlphaMask"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4AlphaMask) - 52usize];
    ["Offset of field: BITMAPV4HEADER::bV4CSType"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4CSType) - 56usize];
    ["Offset of field: BITMAPV4HEADER::bV4Endpoints"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4Endpoints) - 60usize];
    ["Offset of field: BITMAPV4HEADER::bV4GammaRed"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4GammaRed) - 96usize];
    ["Offset of field: BITMAPV4HEADER::bV4GammaGreen"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4GammaGreen) - 100usize];
    ["Offset of field: BITMAPV4HEADER::bV4GammaBlue"]
        [::std::mem::offset_of!(BITMAPV4HEADER, bV4GammaBlue) - 104usize];
};
pub type LPBITMAPV4HEADER = *mut BITMAPV4HEADER;
pub type PBITMAPV4HEADER = *mut BITMAPV4HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BITMAPV5HEADER {
    pub bV5Size: DWORD,
    pub bV5Width: LONG,
    pub bV5Height: LONG,
    pub bV5Planes: WORD,
    pub bV5BitCount: WORD,
    pub bV5Compression: DWORD,
    pub bV5SizeImage: DWORD,
    pub bV5XPelsPerMeter: LONG,
    pub bV5YPelsPerMeter: LONG,
    pub bV5ClrUsed: DWORD,
    pub bV5ClrImportant: DWORD,
    pub bV5RedMask: DWORD,
    pub bV5GreenMask: DWORD,
    pub bV5BlueMask: DWORD,
    pub bV5AlphaMask: DWORD,
    pub bV5CSType: DWORD,
    pub bV5Endpoints: CIEXYZTRIPLE,
    pub bV5GammaRed: DWORD,
    pub bV5GammaGreen: DWORD,
    pub bV5GammaBlue: DWORD,
    pub bV5Intent: DWORD,
    pub bV5ProfileData: DWORD,
    pub bV5ProfileSize: DWORD,
    pub bV5Reserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BITMAPV5HEADER"][::std::mem::size_of::<BITMAPV5HEADER>() - 124usize];
    ["Alignment of BITMAPV5HEADER"][::std::mem::align_of::<BITMAPV5HEADER>() - 4usize];
    ["Offset of field: BITMAPV5HEADER::bV5Size"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Size) - 0usize];
    ["Offset of field: BITMAPV5HEADER::bV5Width"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Width) - 4usize];
    ["Offset of field: BITMAPV5HEADER::bV5Height"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Height) - 8usize];
    ["Offset of field: BITMAPV5HEADER::bV5Planes"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Planes) - 12usize];
    ["Offset of field: BITMAPV5HEADER::bV5BitCount"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5BitCount) - 14usize];
    ["Offset of field: BITMAPV5HEADER::bV5Compression"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Compression) - 16usize];
    ["Offset of field: BITMAPV5HEADER::bV5SizeImage"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5SizeImage) - 20usize];
    ["Offset of field: BITMAPV5HEADER::bV5XPelsPerMeter"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5XPelsPerMeter) - 24usize];
    ["Offset of field: BITMAPV5HEADER::bV5YPelsPerMeter"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5YPelsPerMeter) - 28usize];
    ["Offset of field: BITMAPV5HEADER::bV5ClrUsed"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5ClrUsed) - 32usize];
    ["Offset of field: BITMAPV5HEADER::bV5ClrImportant"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5ClrImportant) - 36usize];
    ["Offset of field: BITMAPV5HEADER::bV5RedMask"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5RedMask) - 40usize];
    ["Offset of field: BITMAPV5HEADER::bV5GreenMask"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5GreenMask) - 44usize];
    ["Offset of field: BITMAPV5HEADER::bV5BlueMask"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5BlueMask) - 48usize];
    ["Offset of field: BITMAPV5HEADER::bV5AlphaMask"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5AlphaMask) - 52usize];
    ["Offset of field: BITMAPV5HEADER::bV5CSType"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5CSType) - 56usize];
    ["Offset of field: BITMAPV5HEADER::bV5Endpoints"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Endpoints) - 60usize];
    ["Offset of field: BITMAPV5HEADER::bV5GammaRed"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5GammaRed) - 96usize];
    ["Offset of field: BITMAPV5HEADER::bV5GammaGreen"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5GammaGreen) - 100usize];
    ["Offset of field: BITMAPV5HEADER::bV5GammaBlue"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5GammaBlue) - 104usize];
    ["Offset of field: BITMAPV5HEADER::bV5Intent"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Intent) - 108usize];
    ["Offset of field: BITMAPV5HEADER::bV5ProfileData"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5ProfileData) - 112usize];
    ["Offset of field: BITMAPV5HEADER::bV5ProfileSize"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5ProfileSize) - 116usize];
    ["Offset of field: BITMAPV5HEADER::bV5Reserved"]
        [::std::mem::offset_of!(BITMAPV5HEADER, bV5Reserved) - 120usize];
};
pub type LPBITMAPV5HEADER = *mut BITMAPV5HEADER;
pub type PBITMAPV5HEADER = *mut BITMAPV5HEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagBITMAPINFO {
    pub bmiHeader: BITMAPINFOHEADER,
    pub bmiColors: [RGBQUAD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagBITMAPINFO"][::std::mem::size_of::<tagBITMAPINFO>() - 44usize];
    ["Alignment of tagBITMAPINFO"][::std::mem::align_of::<tagBITMAPINFO>() - 4usize];
    ["Offset of field: tagBITMAPINFO::bmiHeader"]
        [::std::mem::offset_of!(tagBITMAPINFO, bmiHeader) - 0usize];
    ["Offset of field: tagBITMAPINFO::bmiColors"]
        [::std::mem::offset_of!(tagBITMAPINFO, bmiColors) - 40usize];
};
pub type BITMAPINFO = tagBITMAPINFO;
pub type LPBITMAPINFO = *mut tagBITMAPINFO;
pub type PBITMAPINFO = *mut tagBITMAPINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagBITMAPCOREINFO {
    pub bmciHeader: BITMAPCOREHEADER,
    pub bmciColors: [RGBTRIPLE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagBITMAPCOREINFO"][::std::mem::size_of::<tagBITMAPCOREINFO>() - 16usize];
    ["Alignment of tagBITMAPCOREINFO"][::std::mem::align_of::<tagBITMAPCOREINFO>() - 4usize];
    ["Offset of field: tagBITMAPCOREINFO::bmciHeader"]
        [::std::mem::offset_of!(tagBITMAPCOREINFO, bmciHeader) - 0usize];
    ["Offset of field: tagBITMAPCOREINFO::bmciColors"]
        [::std::mem::offset_of!(tagBITMAPCOREINFO, bmciColors) - 12usize];
};
pub type BITMAPCOREINFO = tagBITMAPCOREINFO;
pub type LPBITMAPCOREINFO = *mut tagBITMAPCOREINFO;
pub type PBITMAPCOREINFO = *mut tagBITMAPCOREINFO;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct tagBITMAPFILEHEADER {
    pub bfType: WORD,
    pub bfSize: DWORD,
    pub bfReserved1: WORD,
    pub bfReserved2: WORD,
    pub bfOffBits: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagBITMAPFILEHEADER"][::std::mem::size_of::<tagBITMAPFILEHEADER>() - 14usize];
    ["Alignment of tagBITMAPFILEHEADER"][::std::mem::align_of::<tagBITMAPFILEHEADER>() - 2usize];
    ["Offset of field: tagBITMAPFILEHEADER::bfType"]
        [::std::mem::offset_of!(tagBITMAPFILEHEADER, bfType) - 0usize];
    ["Offset of field: tagBITMAPFILEHEADER::bfSize"]
        [::std::mem::offset_of!(tagBITMAPFILEHEADER, bfSize) - 2usize];
    ["Offset of field: tagBITMAPFILEHEADER::bfReserved1"]
        [::std::mem::offset_of!(tagBITMAPFILEHEADER, bfReserved1) - 6usize];
    ["Offset of field: tagBITMAPFILEHEADER::bfReserved2"]
        [::std::mem::offset_of!(tagBITMAPFILEHEADER, bfReserved2) - 8usize];
    ["Offset of field: tagBITMAPFILEHEADER::bfOffBits"]
        [::std::mem::offset_of!(tagBITMAPFILEHEADER, bfOffBits) - 10usize];
};
pub type BITMAPFILEHEADER = tagBITMAPFILEHEADER;
pub type LPBITMAPFILEHEADER = *mut tagBITMAPFILEHEADER;
pub type PBITMAPFILEHEADER = *mut tagBITMAPFILEHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagFONTSIGNATURE {
    pub fsUsb: [DWORD; 4usize],
    pub fsCsb: [DWORD; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagFONTSIGNATURE"][::std::mem::size_of::<tagFONTSIGNATURE>() - 24usize];
    ["Alignment of tagFONTSIGNATURE"][::std::mem::align_of::<tagFONTSIGNATURE>() - 4usize];
    ["Offset of field: tagFONTSIGNATURE::fsUsb"]
        [::std::mem::offset_of!(tagFONTSIGNATURE, fsUsb) - 0usize];
    ["Offset of field: tagFONTSIGNATURE::fsCsb"]
        [::std::mem::offset_of!(tagFONTSIGNATURE, fsCsb) - 16usize];
};
pub type FONTSIGNATURE = tagFONTSIGNATURE;
pub type PFONTSIGNATURE = *mut tagFONTSIGNATURE;
pub type LPFONTSIGNATURE = *mut tagFONTSIGNATURE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCHARSETINFO {
    pub ciCharset: UINT,
    pub ciACP: UINT,
    pub fs: FONTSIGNATURE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCHARSETINFO"][::std::mem::size_of::<tagCHARSETINFO>() - 32usize];
    ["Alignment of tagCHARSETINFO"][::std::mem::align_of::<tagCHARSETINFO>() - 4usize];
    ["Offset of field: tagCHARSETINFO::ciCharset"]
        [::std::mem::offset_of!(tagCHARSETINFO, ciCharset) - 0usize];
    ["Offset of field: tagCHARSETINFO::ciACP"]
        [::std::mem::offset_of!(tagCHARSETINFO, ciACP) - 4usize];
    ["Offset of field: tagCHARSETINFO::fs"][::std::mem::offset_of!(tagCHARSETINFO, fs) - 8usize];
};
pub type CHARSETINFO = tagCHARSETINFO;
pub type PCHARSETINFO = *mut tagCHARSETINFO;
pub type NPCHARSETINFO = *mut tagCHARSETINFO;
pub type LPCHARSETINFO = *mut tagCHARSETINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOCALESIGNATURE {
    pub lsUsb: [DWORD; 4usize],
    pub lsCsbDefault: [DWORD; 2usize],
    pub lsCsbSupported: [DWORD; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOCALESIGNATURE"][::std::mem::size_of::<tagLOCALESIGNATURE>() - 32usize];
    ["Alignment of tagLOCALESIGNATURE"][::std::mem::align_of::<tagLOCALESIGNATURE>() - 4usize];
    ["Offset of field: tagLOCALESIGNATURE::lsUsb"]
        [::std::mem::offset_of!(tagLOCALESIGNATURE, lsUsb) - 0usize];
    ["Offset of field: tagLOCALESIGNATURE::lsCsbDefault"]
        [::std::mem::offset_of!(tagLOCALESIGNATURE, lsCsbDefault) - 16usize];
    ["Offset of field: tagLOCALESIGNATURE::lsCsbSupported"]
        [::std::mem::offset_of!(tagLOCALESIGNATURE, lsCsbSupported) - 24usize];
};
pub type LOCALESIGNATURE = tagLOCALESIGNATURE;
pub type PLOCALESIGNATURE = *mut tagLOCALESIGNATURE;
pub type LPLOCALESIGNATURE = *mut tagLOCALESIGNATURE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHANDLETABLE {
    pub objectHandle: [HGDIOBJ; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHANDLETABLE"][::std::mem::size_of::<tagHANDLETABLE>() - 8usize];
    ["Alignment of tagHANDLETABLE"][::std::mem::align_of::<tagHANDLETABLE>() - 8usize];
    ["Offset of field: tagHANDLETABLE::objectHandle"]
        [::std::mem::offset_of!(tagHANDLETABLE, objectHandle) - 0usize];
};
pub type HANDLETABLE = tagHANDLETABLE;
pub type PHANDLETABLE = *mut tagHANDLETABLE;
pub type LPHANDLETABLE = *mut tagHANDLETABLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMETARECORD {
    pub rdSize: DWORD,
    pub rdFunction: WORD,
    pub rdParm: [WORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMETARECORD"][::std::mem::size_of::<tagMETARECORD>() - 8usize];
    ["Alignment of tagMETARECORD"][::std::mem::align_of::<tagMETARECORD>() - 4usize];
    ["Offset of field: tagMETARECORD::rdSize"]
        [::std::mem::offset_of!(tagMETARECORD, rdSize) - 0usize];
    ["Offset of field: tagMETARECORD::rdFunction"]
        [::std::mem::offset_of!(tagMETARECORD, rdFunction) - 4usize];
    ["Offset of field: tagMETARECORD::rdParm"]
        [::std::mem::offset_of!(tagMETARECORD, rdParm) - 6usize];
};
pub type METARECORD = tagMETARECORD;
pub type PMETARECORD = *mut tagMETARECORD;
pub type LPMETARECORD = *mut tagMETARECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMETAFILEPICT {
    pub mm: LONG,
    pub xExt: LONG,
    pub yExt: LONG,
    pub hMF: HMETAFILE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMETAFILEPICT"][::std::mem::size_of::<tagMETAFILEPICT>() - 24usize];
    ["Alignment of tagMETAFILEPICT"][::std::mem::align_of::<tagMETAFILEPICT>() - 8usize];
    ["Offset of field: tagMETAFILEPICT::mm"][::std::mem::offset_of!(tagMETAFILEPICT, mm) - 0usize];
    ["Offset of field: tagMETAFILEPICT::xExt"]
        [::std::mem::offset_of!(tagMETAFILEPICT, xExt) - 4usize];
    ["Offset of field: tagMETAFILEPICT::yExt"]
        [::std::mem::offset_of!(tagMETAFILEPICT, yExt) - 8usize];
    ["Offset of field: tagMETAFILEPICT::hMF"]
        [::std::mem::offset_of!(tagMETAFILEPICT, hMF) - 16usize];
};
pub type METAFILEPICT = tagMETAFILEPICT;
pub type LPMETAFILEPICT = *mut tagMETAFILEPICT;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct tagMETAHEADER {
    pub mtType: WORD,
    pub mtHeaderSize: WORD,
    pub mtVersion: WORD,
    pub mtSize: DWORD,
    pub mtNoObjects: WORD,
    pub mtMaxRecord: DWORD,
    pub mtNoParameters: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMETAHEADER"][::std::mem::size_of::<tagMETAHEADER>() - 18usize];
    ["Alignment of tagMETAHEADER"][::std::mem::align_of::<tagMETAHEADER>() - 2usize];
    ["Offset of field: tagMETAHEADER::mtType"]
        [::std::mem::offset_of!(tagMETAHEADER, mtType) - 0usize];
    ["Offset of field: tagMETAHEADER::mtHeaderSize"]
        [::std::mem::offset_of!(tagMETAHEADER, mtHeaderSize) - 2usize];
    ["Offset of field: tagMETAHEADER::mtVersion"]
        [::std::mem::offset_of!(tagMETAHEADER, mtVersion) - 4usize];
    ["Offset of field: tagMETAHEADER::mtSize"]
        [::std::mem::offset_of!(tagMETAHEADER, mtSize) - 6usize];
    ["Offset of field: tagMETAHEADER::mtNoObjects"]
        [::std::mem::offset_of!(tagMETAHEADER, mtNoObjects) - 10usize];
    ["Offset of field: tagMETAHEADER::mtMaxRecord"]
        [::std::mem::offset_of!(tagMETAHEADER, mtMaxRecord) - 12usize];
    ["Offset of field: tagMETAHEADER::mtNoParameters"]
        [::std::mem::offset_of!(tagMETAHEADER, mtNoParameters) - 16usize];
};
pub type METAHEADER = tagMETAHEADER;
pub type PMETAHEADER = *mut tagMETAHEADER;
pub type LPMETAHEADER = *mut tagMETAHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENHMETARECORD {
    pub iType: DWORD,
    pub nSize: DWORD,
    pub dParm: [DWORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENHMETARECORD"][::std::mem::size_of::<tagENHMETARECORD>() - 12usize];
    ["Alignment of tagENHMETARECORD"][::std::mem::align_of::<tagENHMETARECORD>() - 4usize];
    ["Offset of field: tagENHMETARECORD::iType"]
        [::std::mem::offset_of!(tagENHMETARECORD, iType) - 0usize];
    ["Offset of field: tagENHMETARECORD::nSize"]
        [::std::mem::offset_of!(tagENHMETARECORD, nSize) - 4usize];
    ["Offset of field: tagENHMETARECORD::dParm"]
        [::std::mem::offset_of!(tagENHMETARECORD, dParm) - 8usize];
};
pub type ENHMETARECORD = tagENHMETARECORD;
pub type PENHMETARECORD = *mut tagENHMETARECORD;
pub type LPENHMETARECORD = *mut tagENHMETARECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENHMETAHEADER {
    pub iType: DWORD,
    pub nSize: DWORD,
    pub rclBounds: RECTL,
    pub rclFrame: RECTL,
    pub dSignature: DWORD,
    pub nVersion: DWORD,
    pub nBytes: DWORD,
    pub nRecords: DWORD,
    pub nHandles: WORD,
    pub sReserved: WORD,
    pub nDescription: DWORD,
    pub offDescription: DWORD,
    pub nPalEntries: DWORD,
    pub szlDevice: SIZEL,
    pub szlMillimeters: SIZEL,
    pub cbPixelFormat: DWORD,
    pub offPixelFormat: DWORD,
    pub bOpenGL: DWORD,
    pub szlMicrometers: SIZEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENHMETAHEADER"][::std::mem::size_of::<tagENHMETAHEADER>() - 108usize];
    ["Alignment of tagENHMETAHEADER"][::std::mem::align_of::<tagENHMETAHEADER>() - 4usize];
    ["Offset of field: tagENHMETAHEADER::iType"]
        [::std::mem::offset_of!(tagENHMETAHEADER, iType) - 0usize];
    ["Offset of field: tagENHMETAHEADER::nSize"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nSize) - 4usize];
    ["Offset of field: tagENHMETAHEADER::rclBounds"]
        [::std::mem::offset_of!(tagENHMETAHEADER, rclBounds) - 8usize];
    ["Offset of field: tagENHMETAHEADER::rclFrame"]
        [::std::mem::offset_of!(tagENHMETAHEADER, rclFrame) - 24usize];
    ["Offset of field: tagENHMETAHEADER::dSignature"]
        [::std::mem::offset_of!(tagENHMETAHEADER, dSignature) - 40usize];
    ["Offset of field: tagENHMETAHEADER::nVersion"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nVersion) - 44usize];
    ["Offset of field: tagENHMETAHEADER::nBytes"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nBytes) - 48usize];
    ["Offset of field: tagENHMETAHEADER::nRecords"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nRecords) - 52usize];
    ["Offset of field: tagENHMETAHEADER::nHandles"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nHandles) - 56usize];
    ["Offset of field: tagENHMETAHEADER::sReserved"]
        [::std::mem::offset_of!(tagENHMETAHEADER, sReserved) - 58usize];
    ["Offset of field: tagENHMETAHEADER::nDescription"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nDescription) - 60usize];
    ["Offset of field: tagENHMETAHEADER::offDescription"]
        [::std::mem::offset_of!(tagENHMETAHEADER, offDescription) - 64usize];
    ["Offset of field: tagENHMETAHEADER::nPalEntries"]
        [::std::mem::offset_of!(tagENHMETAHEADER, nPalEntries) - 68usize];
    ["Offset of field: tagENHMETAHEADER::szlDevice"]
        [::std::mem::offset_of!(tagENHMETAHEADER, szlDevice) - 72usize];
    ["Offset of field: tagENHMETAHEADER::szlMillimeters"]
        [::std::mem::offset_of!(tagENHMETAHEADER, szlMillimeters) - 80usize];
    ["Offset of field: tagENHMETAHEADER::cbPixelFormat"]
        [::std::mem::offset_of!(tagENHMETAHEADER, cbPixelFormat) - 88usize];
    ["Offset of field: tagENHMETAHEADER::offPixelFormat"]
        [::std::mem::offset_of!(tagENHMETAHEADER, offPixelFormat) - 92usize];
    ["Offset of field: tagENHMETAHEADER::bOpenGL"]
        [::std::mem::offset_of!(tagENHMETAHEADER, bOpenGL) - 96usize];
    ["Offset of field: tagENHMETAHEADER::szlMicrometers"]
        [::std::mem::offset_of!(tagENHMETAHEADER, szlMicrometers) - 100usize];
};
pub type ENHMETAHEADER = tagENHMETAHEADER;
pub type PENHMETAHEADER = *mut tagENHMETAHEADER;
pub type LPENHMETAHEADER = *mut tagENHMETAHEADER;
pub type BCHAR = BYTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTEXTMETRICA {
    pub tmHeight: LONG,
    pub tmAscent: LONG,
    pub tmDescent: LONG,
    pub tmInternalLeading: LONG,
    pub tmExternalLeading: LONG,
    pub tmAveCharWidth: LONG,
    pub tmMaxCharWidth: LONG,
    pub tmWeight: LONG,
    pub tmOverhang: LONG,
    pub tmDigitizedAspectX: LONG,
    pub tmDigitizedAspectY: LONG,
    pub tmFirstChar: BYTE,
    pub tmLastChar: BYTE,
    pub tmDefaultChar: BYTE,
    pub tmBreakChar: BYTE,
    pub tmItalic: BYTE,
    pub tmUnderlined: BYTE,
    pub tmStruckOut: BYTE,
    pub tmPitchAndFamily: BYTE,
    pub tmCharSet: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTEXTMETRICA"][::std::mem::size_of::<tagTEXTMETRICA>() - 56usize];
    ["Alignment of tagTEXTMETRICA"][::std::mem::align_of::<tagTEXTMETRICA>() - 4usize];
    ["Offset of field: tagTEXTMETRICA::tmHeight"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmHeight) - 0usize];
    ["Offset of field: tagTEXTMETRICA::tmAscent"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmAscent) - 4usize];
    ["Offset of field: tagTEXTMETRICA::tmDescent"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmDescent) - 8usize];
    ["Offset of field: tagTEXTMETRICA::tmInternalLeading"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmInternalLeading) - 12usize];
    ["Offset of field: tagTEXTMETRICA::tmExternalLeading"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmExternalLeading) - 16usize];
    ["Offset of field: tagTEXTMETRICA::tmAveCharWidth"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmAveCharWidth) - 20usize];
    ["Offset of field: tagTEXTMETRICA::tmMaxCharWidth"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmMaxCharWidth) - 24usize];
    ["Offset of field: tagTEXTMETRICA::tmWeight"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmWeight) - 28usize];
    ["Offset of field: tagTEXTMETRICA::tmOverhang"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmOverhang) - 32usize];
    ["Offset of field: tagTEXTMETRICA::tmDigitizedAspectX"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmDigitizedAspectX) - 36usize];
    ["Offset of field: tagTEXTMETRICA::tmDigitizedAspectY"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmDigitizedAspectY) - 40usize];
    ["Offset of field: tagTEXTMETRICA::tmFirstChar"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmFirstChar) - 44usize];
    ["Offset of field: tagTEXTMETRICA::tmLastChar"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmLastChar) - 45usize];
    ["Offset of field: tagTEXTMETRICA::tmDefaultChar"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmDefaultChar) - 46usize];
    ["Offset of field: tagTEXTMETRICA::tmBreakChar"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmBreakChar) - 47usize];
    ["Offset of field: tagTEXTMETRICA::tmItalic"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmItalic) - 48usize];
    ["Offset of field: tagTEXTMETRICA::tmUnderlined"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmUnderlined) - 49usize];
    ["Offset of field: tagTEXTMETRICA::tmStruckOut"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmStruckOut) - 50usize];
    ["Offset of field: tagTEXTMETRICA::tmPitchAndFamily"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmPitchAndFamily) - 51usize];
    ["Offset of field: tagTEXTMETRICA::tmCharSet"]
        [::std::mem::offset_of!(tagTEXTMETRICA, tmCharSet) - 52usize];
};
pub type TEXTMETRICA = tagTEXTMETRICA;
pub type PTEXTMETRICA = *mut tagTEXTMETRICA;
pub type NPTEXTMETRICA = *mut tagTEXTMETRICA;
pub type LPTEXTMETRICA = *mut tagTEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTEXTMETRICW {
    pub tmHeight: LONG,
    pub tmAscent: LONG,
    pub tmDescent: LONG,
    pub tmInternalLeading: LONG,
    pub tmExternalLeading: LONG,
    pub tmAveCharWidth: LONG,
    pub tmMaxCharWidth: LONG,
    pub tmWeight: LONG,
    pub tmOverhang: LONG,
    pub tmDigitizedAspectX: LONG,
    pub tmDigitizedAspectY: LONG,
    pub tmFirstChar: WCHAR,
    pub tmLastChar: WCHAR,
    pub tmDefaultChar: WCHAR,
    pub tmBreakChar: WCHAR,
    pub tmItalic: BYTE,
    pub tmUnderlined: BYTE,
    pub tmStruckOut: BYTE,
    pub tmPitchAndFamily: BYTE,
    pub tmCharSet: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTEXTMETRICW"][::std::mem::size_of::<tagTEXTMETRICW>() - 60usize];
    ["Alignment of tagTEXTMETRICW"][::std::mem::align_of::<tagTEXTMETRICW>() - 4usize];
    ["Offset of field: tagTEXTMETRICW::tmHeight"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmHeight) - 0usize];
    ["Offset of field: tagTEXTMETRICW::tmAscent"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmAscent) - 4usize];
    ["Offset of field: tagTEXTMETRICW::tmDescent"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmDescent) - 8usize];
    ["Offset of field: tagTEXTMETRICW::tmInternalLeading"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmInternalLeading) - 12usize];
    ["Offset of field: tagTEXTMETRICW::tmExternalLeading"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmExternalLeading) - 16usize];
    ["Offset of field: tagTEXTMETRICW::tmAveCharWidth"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmAveCharWidth) - 20usize];
    ["Offset of field: tagTEXTMETRICW::tmMaxCharWidth"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmMaxCharWidth) - 24usize];
    ["Offset of field: tagTEXTMETRICW::tmWeight"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmWeight) - 28usize];
    ["Offset of field: tagTEXTMETRICW::tmOverhang"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmOverhang) - 32usize];
    ["Offset of field: tagTEXTMETRICW::tmDigitizedAspectX"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmDigitizedAspectX) - 36usize];
    ["Offset of field: tagTEXTMETRICW::tmDigitizedAspectY"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmDigitizedAspectY) - 40usize];
    ["Offset of field: tagTEXTMETRICW::tmFirstChar"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmFirstChar) - 44usize];
    ["Offset of field: tagTEXTMETRICW::tmLastChar"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmLastChar) - 46usize];
    ["Offset of field: tagTEXTMETRICW::tmDefaultChar"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmDefaultChar) - 48usize];
    ["Offset of field: tagTEXTMETRICW::tmBreakChar"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmBreakChar) - 50usize];
    ["Offset of field: tagTEXTMETRICW::tmItalic"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmItalic) - 52usize];
    ["Offset of field: tagTEXTMETRICW::tmUnderlined"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmUnderlined) - 53usize];
    ["Offset of field: tagTEXTMETRICW::tmStruckOut"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmStruckOut) - 54usize];
    ["Offset of field: tagTEXTMETRICW::tmPitchAndFamily"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmPitchAndFamily) - 55usize];
    ["Offset of field: tagTEXTMETRICW::tmCharSet"]
        [::std::mem::offset_of!(tagTEXTMETRICW, tmCharSet) - 56usize];
};
pub type TEXTMETRICW = tagTEXTMETRICW;
pub type PTEXTMETRICW = *mut tagTEXTMETRICW;
pub type NPTEXTMETRICW = *mut tagTEXTMETRICW;
pub type LPTEXTMETRICW = *mut tagTEXTMETRICW;
pub type TEXTMETRIC = TEXTMETRICA;
pub type PTEXTMETRIC = PTEXTMETRICA;
pub type NPTEXTMETRIC = NPTEXTMETRICA;
pub type LPTEXTMETRIC = LPTEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNEWTEXTMETRICA {
    pub tmHeight: LONG,
    pub tmAscent: LONG,
    pub tmDescent: LONG,
    pub tmInternalLeading: LONG,
    pub tmExternalLeading: LONG,
    pub tmAveCharWidth: LONG,
    pub tmMaxCharWidth: LONG,
    pub tmWeight: LONG,
    pub tmOverhang: LONG,
    pub tmDigitizedAspectX: LONG,
    pub tmDigitizedAspectY: LONG,
    pub tmFirstChar: BYTE,
    pub tmLastChar: BYTE,
    pub tmDefaultChar: BYTE,
    pub tmBreakChar: BYTE,
    pub tmItalic: BYTE,
    pub tmUnderlined: BYTE,
    pub tmStruckOut: BYTE,
    pub tmPitchAndFamily: BYTE,
    pub tmCharSet: BYTE,
    pub ntmFlags: DWORD,
    pub ntmSizeEM: UINT,
    pub ntmCellHeight: UINT,
    pub ntmAvgWidth: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNEWTEXTMETRICA"][::std::mem::size_of::<tagNEWTEXTMETRICA>() - 72usize];
    ["Alignment of tagNEWTEXTMETRICA"][::std::mem::align_of::<tagNEWTEXTMETRICA>() - 4usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmHeight"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmHeight) - 0usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmAscent"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmAscent) - 4usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmDescent"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmDescent) - 8usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmInternalLeading"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmInternalLeading) - 12usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmExternalLeading"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmExternalLeading) - 16usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmAveCharWidth"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmAveCharWidth) - 20usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmMaxCharWidth"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmMaxCharWidth) - 24usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmWeight"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmWeight) - 28usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmOverhang"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmOverhang) - 32usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmDigitizedAspectX"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmDigitizedAspectX) - 36usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmDigitizedAspectY"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmDigitizedAspectY) - 40usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmFirstChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmFirstChar) - 44usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmLastChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmLastChar) - 45usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmDefaultChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmDefaultChar) - 46usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmBreakChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmBreakChar) - 47usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmItalic"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmItalic) - 48usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmUnderlined"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmUnderlined) - 49usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmStruckOut"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmStruckOut) - 50usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmPitchAndFamily"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmPitchAndFamily) - 51usize];
    ["Offset of field: tagNEWTEXTMETRICA::tmCharSet"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, tmCharSet) - 52usize];
    ["Offset of field: tagNEWTEXTMETRICA::ntmFlags"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, ntmFlags) - 56usize];
    ["Offset of field: tagNEWTEXTMETRICA::ntmSizeEM"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, ntmSizeEM) - 60usize];
    ["Offset of field: tagNEWTEXTMETRICA::ntmCellHeight"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, ntmCellHeight) - 64usize];
    ["Offset of field: tagNEWTEXTMETRICA::ntmAvgWidth"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICA, ntmAvgWidth) - 68usize];
};
pub type NEWTEXTMETRICA = tagNEWTEXTMETRICA;
pub type PNEWTEXTMETRICA = *mut tagNEWTEXTMETRICA;
pub type NPNEWTEXTMETRICA = *mut tagNEWTEXTMETRICA;
pub type LPNEWTEXTMETRICA = *mut tagNEWTEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNEWTEXTMETRICW {
    pub tmHeight: LONG,
    pub tmAscent: LONG,
    pub tmDescent: LONG,
    pub tmInternalLeading: LONG,
    pub tmExternalLeading: LONG,
    pub tmAveCharWidth: LONG,
    pub tmMaxCharWidth: LONG,
    pub tmWeight: LONG,
    pub tmOverhang: LONG,
    pub tmDigitizedAspectX: LONG,
    pub tmDigitizedAspectY: LONG,
    pub tmFirstChar: WCHAR,
    pub tmLastChar: WCHAR,
    pub tmDefaultChar: WCHAR,
    pub tmBreakChar: WCHAR,
    pub tmItalic: BYTE,
    pub tmUnderlined: BYTE,
    pub tmStruckOut: BYTE,
    pub tmPitchAndFamily: BYTE,
    pub tmCharSet: BYTE,
    pub ntmFlags: DWORD,
    pub ntmSizeEM: UINT,
    pub ntmCellHeight: UINT,
    pub ntmAvgWidth: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNEWTEXTMETRICW"][::std::mem::size_of::<tagNEWTEXTMETRICW>() - 76usize];
    ["Alignment of tagNEWTEXTMETRICW"][::std::mem::align_of::<tagNEWTEXTMETRICW>() - 4usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmHeight"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmHeight) - 0usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmAscent"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmAscent) - 4usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmDescent"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmDescent) - 8usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmInternalLeading"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmInternalLeading) - 12usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmExternalLeading"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmExternalLeading) - 16usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmAveCharWidth"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmAveCharWidth) - 20usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmMaxCharWidth"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmMaxCharWidth) - 24usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmWeight"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmWeight) - 28usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmOverhang"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmOverhang) - 32usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmDigitizedAspectX"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmDigitizedAspectX) - 36usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmDigitizedAspectY"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmDigitizedAspectY) - 40usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmFirstChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmFirstChar) - 44usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmLastChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmLastChar) - 46usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmDefaultChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmDefaultChar) - 48usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmBreakChar"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmBreakChar) - 50usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmItalic"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmItalic) - 52usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmUnderlined"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmUnderlined) - 53usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmStruckOut"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmStruckOut) - 54usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmPitchAndFamily"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmPitchAndFamily) - 55usize];
    ["Offset of field: tagNEWTEXTMETRICW::tmCharSet"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, tmCharSet) - 56usize];
    ["Offset of field: tagNEWTEXTMETRICW::ntmFlags"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, ntmFlags) - 60usize];
    ["Offset of field: tagNEWTEXTMETRICW::ntmSizeEM"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, ntmSizeEM) - 64usize];
    ["Offset of field: tagNEWTEXTMETRICW::ntmCellHeight"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, ntmCellHeight) - 68usize];
    ["Offset of field: tagNEWTEXTMETRICW::ntmAvgWidth"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICW, ntmAvgWidth) - 72usize];
};
pub type NEWTEXTMETRICW = tagNEWTEXTMETRICW;
pub type PNEWTEXTMETRICW = *mut tagNEWTEXTMETRICW;
pub type NPNEWTEXTMETRICW = *mut tagNEWTEXTMETRICW;
pub type LPNEWTEXTMETRICW = *mut tagNEWTEXTMETRICW;
pub type NEWTEXTMETRIC = NEWTEXTMETRICA;
pub type PNEWTEXTMETRIC = PNEWTEXTMETRICA;
pub type NPNEWTEXTMETRIC = NPNEWTEXTMETRICA;
pub type LPNEWTEXTMETRIC = LPNEWTEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNEWTEXTMETRICEXA {
    pub ntmTm: NEWTEXTMETRICA,
    pub ntmFontSig: FONTSIGNATURE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNEWTEXTMETRICEXA"][::std::mem::size_of::<tagNEWTEXTMETRICEXA>() - 96usize];
    ["Alignment of tagNEWTEXTMETRICEXA"][::std::mem::align_of::<tagNEWTEXTMETRICEXA>() - 4usize];
    ["Offset of field: tagNEWTEXTMETRICEXA::ntmTm"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICEXA, ntmTm) - 0usize];
    ["Offset of field: tagNEWTEXTMETRICEXA::ntmFontSig"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICEXA, ntmFontSig) - 72usize];
};
pub type NEWTEXTMETRICEXA = tagNEWTEXTMETRICEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNEWTEXTMETRICEXW {
    pub ntmTm: NEWTEXTMETRICW,
    pub ntmFontSig: FONTSIGNATURE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNEWTEXTMETRICEXW"][::std::mem::size_of::<tagNEWTEXTMETRICEXW>() - 100usize];
    ["Alignment of tagNEWTEXTMETRICEXW"][::std::mem::align_of::<tagNEWTEXTMETRICEXW>() - 4usize];
    ["Offset of field: tagNEWTEXTMETRICEXW::ntmTm"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICEXW, ntmTm) - 0usize];
    ["Offset of field: tagNEWTEXTMETRICEXW::ntmFontSig"]
        [::std::mem::offset_of!(tagNEWTEXTMETRICEXW, ntmFontSig) - 76usize];
};
pub type NEWTEXTMETRICEXW = tagNEWTEXTMETRICEXW;
pub type NEWTEXTMETRICEX = NEWTEXTMETRICEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPELARRAY {
    pub paXCount: LONG,
    pub paYCount: LONG,
    pub paXExt: LONG,
    pub paYExt: LONG,
    pub paRGBs: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPELARRAY"][::std::mem::size_of::<tagPELARRAY>() - 20usize];
    ["Alignment of tagPELARRAY"][::std::mem::align_of::<tagPELARRAY>() - 4usize];
    ["Offset of field: tagPELARRAY::paXCount"]
        [::std::mem::offset_of!(tagPELARRAY, paXCount) - 0usize];
    ["Offset of field: tagPELARRAY::paYCount"]
        [::std::mem::offset_of!(tagPELARRAY, paYCount) - 4usize];
    ["Offset of field: tagPELARRAY::paXExt"][::std::mem::offset_of!(tagPELARRAY, paXExt) - 8usize];
    ["Offset of field: tagPELARRAY::paYExt"][::std::mem::offset_of!(tagPELARRAY, paYExt) - 12usize];
    ["Offset of field: tagPELARRAY::paRGBs"][::std::mem::offset_of!(tagPELARRAY, paRGBs) - 16usize];
};
pub type PELARRAY = tagPELARRAY;
pub type PPELARRAY = *mut tagPELARRAY;
pub type NPPELARRAY = *mut tagPELARRAY;
pub type LPPELARRAY = *mut tagPELARRAY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGBRUSH {
    pub lbStyle: UINT,
    pub lbColor: COLORREF,
    pub lbHatch: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGBRUSH"][::std::mem::size_of::<tagLOGBRUSH>() - 16usize];
    ["Alignment of tagLOGBRUSH"][::std::mem::align_of::<tagLOGBRUSH>() - 8usize];
    ["Offset of field: tagLOGBRUSH::lbStyle"]
        [::std::mem::offset_of!(tagLOGBRUSH, lbStyle) - 0usize];
    ["Offset of field: tagLOGBRUSH::lbColor"]
        [::std::mem::offset_of!(tagLOGBRUSH, lbColor) - 4usize];
    ["Offset of field: tagLOGBRUSH::lbHatch"]
        [::std::mem::offset_of!(tagLOGBRUSH, lbHatch) - 8usize];
};
pub type LOGBRUSH = tagLOGBRUSH;
pub type PLOGBRUSH = *mut tagLOGBRUSH;
pub type NPLOGBRUSH = *mut tagLOGBRUSH;
pub type LPLOGBRUSH = *mut tagLOGBRUSH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGBRUSH32 {
    pub lbStyle: UINT,
    pub lbColor: COLORREF,
    pub lbHatch: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGBRUSH32"][::std::mem::size_of::<tagLOGBRUSH32>() - 12usize];
    ["Alignment of tagLOGBRUSH32"][::std::mem::align_of::<tagLOGBRUSH32>() - 4usize];
    ["Offset of field: tagLOGBRUSH32::lbStyle"]
        [::std::mem::offset_of!(tagLOGBRUSH32, lbStyle) - 0usize];
    ["Offset of field: tagLOGBRUSH32::lbColor"]
        [::std::mem::offset_of!(tagLOGBRUSH32, lbColor) - 4usize];
    ["Offset of field: tagLOGBRUSH32::lbHatch"]
        [::std::mem::offset_of!(tagLOGBRUSH32, lbHatch) - 8usize];
};
pub type LOGBRUSH32 = tagLOGBRUSH32;
pub type PLOGBRUSH32 = *mut tagLOGBRUSH32;
pub type NPLOGBRUSH32 = *mut tagLOGBRUSH32;
pub type LPLOGBRUSH32 = *mut tagLOGBRUSH32;
pub type PATTERN = LOGBRUSH;
pub type PPATTERN = *mut PATTERN;
pub type NPPATTERN = *mut PATTERN;
pub type LPPATTERN = *mut PATTERN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGPEN {
    pub lopnStyle: UINT,
    pub lopnWidth: POINT,
    pub lopnColor: COLORREF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGPEN"][::std::mem::size_of::<tagLOGPEN>() - 16usize];
    ["Alignment of tagLOGPEN"][::std::mem::align_of::<tagLOGPEN>() - 4usize];
    ["Offset of field: tagLOGPEN::lopnStyle"]
        [::std::mem::offset_of!(tagLOGPEN, lopnStyle) - 0usize];
    ["Offset of field: tagLOGPEN::lopnWidth"]
        [::std::mem::offset_of!(tagLOGPEN, lopnWidth) - 4usize];
    ["Offset of field: tagLOGPEN::lopnColor"]
        [::std::mem::offset_of!(tagLOGPEN, lopnColor) - 12usize];
};
pub type LOGPEN = tagLOGPEN;
pub type PLOGPEN = *mut tagLOGPEN;
pub type NPLOGPEN = *mut tagLOGPEN;
pub type LPLOGPEN = *mut tagLOGPEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEXTLOGPEN {
    pub elpPenStyle: DWORD,
    pub elpWidth: DWORD,
    pub elpBrushStyle: UINT,
    pub elpColor: COLORREF,
    pub elpHatch: ULONG_PTR,
    pub elpNumEntries: DWORD,
    pub elpStyleEntry: [DWORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEXTLOGPEN"][::std::mem::size_of::<tagEXTLOGPEN>() - 32usize];
    ["Alignment of tagEXTLOGPEN"][::std::mem::align_of::<tagEXTLOGPEN>() - 8usize];
    ["Offset of field: tagEXTLOGPEN::elpPenStyle"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpPenStyle) - 0usize];
    ["Offset of field: tagEXTLOGPEN::elpWidth"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpWidth) - 4usize];
    ["Offset of field: tagEXTLOGPEN::elpBrushStyle"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpBrushStyle) - 8usize];
    ["Offset of field: tagEXTLOGPEN::elpColor"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpColor) - 12usize];
    ["Offset of field: tagEXTLOGPEN::elpHatch"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpHatch) - 16usize];
    ["Offset of field: tagEXTLOGPEN::elpNumEntries"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpNumEntries) - 24usize];
    ["Offset of field: tagEXTLOGPEN::elpStyleEntry"]
        [::std::mem::offset_of!(tagEXTLOGPEN, elpStyleEntry) - 28usize];
};
pub type EXTLOGPEN = tagEXTLOGPEN;
pub type PEXTLOGPEN = *mut tagEXTLOGPEN;
pub type NPEXTLOGPEN = *mut tagEXTLOGPEN;
pub type LPEXTLOGPEN = *mut tagEXTLOGPEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEXTLOGPEN32 {
    pub elpPenStyle: DWORD,
    pub elpWidth: DWORD,
    pub elpBrushStyle: UINT,
    pub elpColor: COLORREF,
    pub elpHatch: ULONG,
    pub elpNumEntries: DWORD,
    pub elpStyleEntry: [DWORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEXTLOGPEN32"][::std::mem::size_of::<tagEXTLOGPEN32>() - 28usize];
    ["Alignment of tagEXTLOGPEN32"][::std::mem::align_of::<tagEXTLOGPEN32>() - 4usize];
    ["Offset of field: tagEXTLOGPEN32::elpPenStyle"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpPenStyle) - 0usize];
    ["Offset of field: tagEXTLOGPEN32::elpWidth"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpWidth) - 4usize];
    ["Offset of field: tagEXTLOGPEN32::elpBrushStyle"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpBrushStyle) - 8usize];
    ["Offset of field: tagEXTLOGPEN32::elpColor"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpColor) - 12usize];
    ["Offset of field: tagEXTLOGPEN32::elpHatch"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpHatch) - 16usize];
    ["Offset of field: tagEXTLOGPEN32::elpNumEntries"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpNumEntries) - 20usize];
    ["Offset of field: tagEXTLOGPEN32::elpStyleEntry"]
        [::std::mem::offset_of!(tagEXTLOGPEN32, elpStyleEntry) - 24usize];
};
pub type EXTLOGPEN32 = tagEXTLOGPEN32;
pub type PEXTLOGPEN32 = *mut tagEXTLOGPEN32;
pub type NPEXTLOGPEN32 = *mut tagEXTLOGPEN32;
pub type LPEXTLOGPEN32 = *mut tagEXTLOGPEN32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPALETTEENTRY {
    pub peRed: BYTE,
    pub peGreen: BYTE,
    pub peBlue: BYTE,
    pub peFlags: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPALETTEENTRY"][::std::mem::size_of::<tagPALETTEENTRY>() - 4usize];
    ["Alignment of tagPALETTEENTRY"][::std::mem::align_of::<tagPALETTEENTRY>() - 1usize];
    ["Offset of field: tagPALETTEENTRY::peRed"]
        [::std::mem::offset_of!(tagPALETTEENTRY, peRed) - 0usize];
    ["Offset of field: tagPALETTEENTRY::peGreen"]
        [::std::mem::offset_of!(tagPALETTEENTRY, peGreen) - 1usize];
    ["Offset of field: tagPALETTEENTRY::peBlue"]
        [::std::mem::offset_of!(tagPALETTEENTRY, peBlue) - 2usize];
    ["Offset of field: tagPALETTEENTRY::peFlags"]
        [::std::mem::offset_of!(tagPALETTEENTRY, peFlags) - 3usize];
};
pub type PALETTEENTRY = tagPALETTEENTRY;
pub type PPALETTEENTRY = *mut tagPALETTEENTRY;
pub type LPPALETTEENTRY = *mut tagPALETTEENTRY;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGPALETTE {
    pub palVersion: WORD,
    pub palNumEntries: WORD,
    pub palPalEntry: [PALETTEENTRY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGPALETTE"][::std::mem::size_of::<tagLOGPALETTE>() - 8usize];
    ["Alignment of tagLOGPALETTE"][::std::mem::align_of::<tagLOGPALETTE>() - 2usize];
    ["Offset of field: tagLOGPALETTE::palVersion"]
        [::std::mem::offset_of!(tagLOGPALETTE, palVersion) - 0usize];
    ["Offset of field: tagLOGPALETTE::palNumEntries"]
        [::std::mem::offset_of!(tagLOGPALETTE, palNumEntries) - 2usize];
    ["Offset of field: tagLOGPALETTE::palPalEntry"]
        [::std::mem::offset_of!(tagLOGPALETTE, palPalEntry) - 4usize];
};
pub type LOGPALETTE = tagLOGPALETTE;
pub type PLOGPALETTE = *mut tagLOGPALETTE;
pub type NPLOGPALETTE = *mut tagLOGPALETTE;
pub type LPLOGPALETTE = *mut tagLOGPALETTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGFONTA {
    pub lfHeight: LONG,
    pub lfWidth: LONG,
    pub lfEscapement: LONG,
    pub lfOrientation: LONG,
    pub lfWeight: LONG,
    pub lfItalic: BYTE,
    pub lfUnderline: BYTE,
    pub lfStrikeOut: BYTE,
    pub lfCharSet: BYTE,
    pub lfOutPrecision: BYTE,
    pub lfClipPrecision: BYTE,
    pub lfQuality: BYTE,
    pub lfPitchAndFamily: BYTE,
    pub lfFaceName: [CHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGFONTA"][::std::mem::size_of::<tagLOGFONTA>() - 60usize];
    ["Alignment of tagLOGFONTA"][::std::mem::align_of::<tagLOGFONTA>() - 4usize];
    ["Offset of field: tagLOGFONTA::lfHeight"]
        [::std::mem::offset_of!(tagLOGFONTA, lfHeight) - 0usize];
    ["Offset of field: tagLOGFONTA::lfWidth"]
        [::std::mem::offset_of!(tagLOGFONTA, lfWidth) - 4usize];
    ["Offset of field: tagLOGFONTA::lfEscapement"]
        [::std::mem::offset_of!(tagLOGFONTA, lfEscapement) - 8usize];
    ["Offset of field: tagLOGFONTA::lfOrientation"]
        [::std::mem::offset_of!(tagLOGFONTA, lfOrientation) - 12usize];
    ["Offset of field: tagLOGFONTA::lfWeight"]
        [::std::mem::offset_of!(tagLOGFONTA, lfWeight) - 16usize];
    ["Offset of field: tagLOGFONTA::lfItalic"]
        [::std::mem::offset_of!(tagLOGFONTA, lfItalic) - 20usize];
    ["Offset of field: tagLOGFONTA::lfUnderline"]
        [::std::mem::offset_of!(tagLOGFONTA, lfUnderline) - 21usize];
    ["Offset of field: tagLOGFONTA::lfStrikeOut"]
        [::std::mem::offset_of!(tagLOGFONTA, lfStrikeOut) - 22usize];
    ["Offset of field: tagLOGFONTA::lfCharSet"]
        [::std::mem::offset_of!(tagLOGFONTA, lfCharSet) - 23usize];
    ["Offset of field: tagLOGFONTA::lfOutPrecision"]
        [::std::mem::offset_of!(tagLOGFONTA, lfOutPrecision) - 24usize];
    ["Offset of field: tagLOGFONTA::lfClipPrecision"]
        [::std::mem::offset_of!(tagLOGFONTA, lfClipPrecision) - 25usize];
    ["Offset of field: tagLOGFONTA::lfQuality"]
        [::std::mem::offset_of!(tagLOGFONTA, lfQuality) - 26usize];
    ["Offset of field: tagLOGFONTA::lfPitchAndFamily"]
        [::std::mem::offset_of!(tagLOGFONTA, lfPitchAndFamily) - 27usize];
    ["Offset of field: tagLOGFONTA::lfFaceName"]
        [::std::mem::offset_of!(tagLOGFONTA, lfFaceName) - 28usize];
};
pub type LOGFONTA = tagLOGFONTA;
pub type PLOGFONTA = *mut tagLOGFONTA;
pub type NPLOGFONTA = *mut tagLOGFONTA;
pub type LPLOGFONTA = *mut tagLOGFONTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLOGFONTW {
    pub lfHeight: LONG,
    pub lfWidth: LONG,
    pub lfEscapement: LONG,
    pub lfOrientation: LONG,
    pub lfWeight: LONG,
    pub lfItalic: BYTE,
    pub lfUnderline: BYTE,
    pub lfStrikeOut: BYTE,
    pub lfCharSet: BYTE,
    pub lfOutPrecision: BYTE,
    pub lfClipPrecision: BYTE,
    pub lfQuality: BYTE,
    pub lfPitchAndFamily: BYTE,
    pub lfFaceName: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLOGFONTW"][::std::mem::size_of::<tagLOGFONTW>() - 92usize];
    ["Alignment of tagLOGFONTW"][::std::mem::align_of::<tagLOGFONTW>() - 4usize];
    ["Offset of field: tagLOGFONTW::lfHeight"]
        [::std::mem::offset_of!(tagLOGFONTW, lfHeight) - 0usize];
    ["Offset of field: tagLOGFONTW::lfWidth"]
        [::std::mem::offset_of!(tagLOGFONTW, lfWidth) - 4usize];
    ["Offset of field: tagLOGFONTW::lfEscapement"]
        [::std::mem::offset_of!(tagLOGFONTW, lfEscapement) - 8usize];
    ["Offset of field: tagLOGFONTW::lfOrientation"]
        [::std::mem::offset_of!(tagLOGFONTW, lfOrientation) - 12usize];
    ["Offset of field: tagLOGFONTW::lfWeight"]
        [::std::mem::offset_of!(tagLOGFONTW, lfWeight) - 16usize];
    ["Offset of field: tagLOGFONTW::lfItalic"]
        [::std::mem::offset_of!(tagLOGFONTW, lfItalic) - 20usize];
    ["Offset of field: tagLOGFONTW::lfUnderline"]
        [::std::mem::offset_of!(tagLOGFONTW, lfUnderline) - 21usize];
    ["Offset of field: tagLOGFONTW::lfStrikeOut"]
        [::std::mem::offset_of!(tagLOGFONTW, lfStrikeOut) - 22usize];
    ["Offset of field: tagLOGFONTW::lfCharSet"]
        [::std::mem::offset_of!(tagLOGFONTW, lfCharSet) - 23usize];
    ["Offset of field: tagLOGFONTW::lfOutPrecision"]
        [::std::mem::offset_of!(tagLOGFONTW, lfOutPrecision) - 24usize];
    ["Offset of field: tagLOGFONTW::lfClipPrecision"]
        [::std::mem::offset_of!(tagLOGFONTW, lfClipPrecision) - 25usize];
    ["Offset of field: tagLOGFONTW::lfQuality"]
        [::std::mem::offset_of!(tagLOGFONTW, lfQuality) - 26usize];
    ["Offset of field: tagLOGFONTW::lfPitchAndFamily"]
        [::std::mem::offset_of!(tagLOGFONTW, lfPitchAndFamily) - 27usize];
    ["Offset of field: tagLOGFONTW::lfFaceName"]
        [::std::mem::offset_of!(tagLOGFONTW, lfFaceName) - 28usize];
};
pub type LOGFONTW = tagLOGFONTW;
pub type PLOGFONTW = *mut tagLOGFONTW;
pub type NPLOGFONTW = *mut tagLOGFONTW;
pub type LPLOGFONTW = *mut tagLOGFONTW;
pub type LOGFONT = LOGFONTA;
pub type PLOGFONT = PLOGFONTA;
pub type NPLOGFONT = NPLOGFONTA;
pub type LPLOGFONT = LPLOGFONTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMLOGFONTA {
    pub elfLogFont: LOGFONTA,
    pub elfFullName: [BYTE; 64usize],
    pub elfStyle: [BYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMLOGFONTA"][::std::mem::size_of::<tagENUMLOGFONTA>() - 156usize];
    ["Alignment of tagENUMLOGFONTA"][::std::mem::align_of::<tagENUMLOGFONTA>() - 4usize];
    ["Offset of field: tagENUMLOGFONTA::elfLogFont"]
        [::std::mem::offset_of!(tagENUMLOGFONTA, elfLogFont) - 0usize];
    ["Offset of field: tagENUMLOGFONTA::elfFullName"]
        [::std::mem::offset_of!(tagENUMLOGFONTA, elfFullName) - 60usize];
    ["Offset of field: tagENUMLOGFONTA::elfStyle"]
        [::std::mem::offset_of!(tagENUMLOGFONTA, elfStyle) - 124usize];
};
pub type ENUMLOGFONTA = tagENUMLOGFONTA;
pub type LPENUMLOGFONTA = *mut tagENUMLOGFONTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMLOGFONTW {
    pub elfLogFont: LOGFONTW,
    pub elfFullName: [WCHAR; 64usize],
    pub elfStyle: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMLOGFONTW"][::std::mem::size_of::<tagENUMLOGFONTW>() - 284usize];
    ["Alignment of tagENUMLOGFONTW"][::std::mem::align_of::<tagENUMLOGFONTW>() - 4usize];
    ["Offset of field: tagENUMLOGFONTW::elfLogFont"]
        [::std::mem::offset_of!(tagENUMLOGFONTW, elfLogFont) - 0usize];
    ["Offset of field: tagENUMLOGFONTW::elfFullName"]
        [::std::mem::offset_of!(tagENUMLOGFONTW, elfFullName) - 92usize];
    ["Offset of field: tagENUMLOGFONTW::elfStyle"]
        [::std::mem::offset_of!(tagENUMLOGFONTW, elfStyle) - 220usize];
};
pub type ENUMLOGFONTW = tagENUMLOGFONTW;
pub type LPENUMLOGFONTW = *mut tagENUMLOGFONTW;
pub type ENUMLOGFONT = ENUMLOGFONTA;
pub type LPENUMLOGFONT = LPENUMLOGFONTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMLOGFONTEXA {
    pub elfLogFont: LOGFONTA,
    pub elfFullName: [BYTE; 64usize],
    pub elfStyle: [BYTE; 32usize],
    pub elfScript: [BYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMLOGFONTEXA"][::std::mem::size_of::<tagENUMLOGFONTEXA>() - 188usize];
    ["Alignment of tagENUMLOGFONTEXA"][::std::mem::align_of::<tagENUMLOGFONTEXA>() - 4usize];
    ["Offset of field: tagENUMLOGFONTEXA::elfLogFont"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXA, elfLogFont) - 0usize];
    ["Offset of field: tagENUMLOGFONTEXA::elfFullName"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXA, elfFullName) - 60usize];
    ["Offset of field: tagENUMLOGFONTEXA::elfStyle"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXA, elfStyle) - 124usize];
    ["Offset of field: tagENUMLOGFONTEXA::elfScript"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXA, elfScript) - 156usize];
};
pub type ENUMLOGFONTEXA = tagENUMLOGFONTEXA;
pub type LPENUMLOGFONTEXA = *mut tagENUMLOGFONTEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMLOGFONTEXW {
    pub elfLogFont: LOGFONTW,
    pub elfFullName: [WCHAR; 64usize],
    pub elfStyle: [WCHAR; 32usize],
    pub elfScript: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMLOGFONTEXW"][::std::mem::size_of::<tagENUMLOGFONTEXW>() - 348usize];
    ["Alignment of tagENUMLOGFONTEXW"][::std::mem::align_of::<tagENUMLOGFONTEXW>() - 4usize];
    ["Offset of field: tagENUMLOGFONTEXW::elfLogFont"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXW, elfLogFont) - 0usize];
    ["Offset of field: tagENUMLOGFONTEXW::elfFullName"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXW, elfFullName) - 92usize];
    ["Offset of field: tagENUMLOGFONTEXW::elfStyle"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXW, elfStyle) - 220usize];
    ["Offset of field: tagENUMLOGFONTEXW::elfScript"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXW, elfScript) - 284usize];
};
pub type ENUMLOGFONTEXW = tagENUMLOGFONTEXW;
pub type LPENUMLOGFONTEXW = *mut tagENUMLOGFONTEXW;
pub type ENUMLOGFONTEX = ENUMLOGFONTEXA;
pub type LPENUMLOGFONTEX = LPENUMLOGFONTEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPANOSE {
    pub bFamilyType: BYTE,
    pub bSerifStyle: BYTE,
    pub bWeight: BYTE,
    pub bProportion: BYTE,
    pub bContrast: BYTE,
    pub bStrokeVariation: BYTE,
    pub bArmStyle: BYTE,
    pub bLetterform: BYTE,
    pub bMidline: BYTE,
    pub bXHeight: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPANOSE"][::std::mem::size_of::<tagPANOSE>() - 10usize];
    ["Alignment of tagPANOSE"][::std::mem::align_of::<tagPANOSE>() - 1usize];
    ["Offset of field: tagPANOSE::bFamilyType"]
        [::std::mem::offset_of!(tagPANOSE, bFamilyType) - 0usize];
    ["Offset of field: tagPANOSE::bSerifStyle"]
        [::std::mem::offset_of!(tagPANOSE, bSerifStyle) - 1usize];
    ["Offset of field: tagPANOSE::bWeight"][::std::mem::offset_of!(tagPANOSE, bWeight) - 2usize];
    ["Offset of field: tagPANOSE::bProportion"]
        [::std::mem::offset_of!(tagPANOSE, bProportion) - 3usize];
    ["Offset of field: tagPANOSE::bContrast"]
        [::std::mem::offset_of!(tagPANOSE, bContrast) - 4usize];
    ["Offset of field: tagPANOSE::bStrokeVariation"]
        [::std::mem::offset_of!(tagPANOSE, bStrokeVariation) - 5usize];
    ["Offset of field: tagPANOSE::bArmStyle"]
        [::std::mem::offset_of!(tagPANOSE, bArmStyle) - 6usize];
    ["Offset of field: tagPANOSE::bLetterform"]
        [::std::mem::offset_of!(tagPANOSE, bLetterform) - 7usize];
    ["Offset of field: tagPANOSE::bMidline"][::std::mem::offset_of!(tagPANOSE, bMidline) - 8usize];
    ["Offset of field: tagPANOSE::bXHeight"][::std::mem::offset_of!(tagPANOSE, bXHeight) - 9usize];
};
pub type PANOSE = tagPANOSE;
pub type LPPANOSE = *mut tagPANOSE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEXTLOGFONTA {
    pub elfLogFont: LOGFONTA,
    pub elfFullName: [BYTE; 64usize],
    pub elfStyle: [BYTE; 32usize],
    pub elfVersion: DWORD,
    pub elfStyleSize: DWORD,
    pub elfMatch: DWORD,
    pub elfReserved: DWORD,
    pub elfVendorId: [BYTE; 4usize],
    pub elfCulture: DWORD,
    pub elfPanose: PANOSE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEXTLOGFONTA"][::std::mem::size_of::<tagEXTLOGFONTA>() - 192usize];
    ["Alignment of tagEXTLOGFONTA"][::std::mem::align_of::<tagEXTLOGFONTA>() - 4usize];
    ["Offset of field: tagEXTLOGFONTA::elfLogFont"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfLogFont) - 0usize];
    ["Offset of field: tagEXTLOGFONTA::elfFullName"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfFullName) - 60usize];
    ["Offset of field: tagEXTLOGFONTA::elfStyle"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfStyle) - 124usize];
    ["Offset of field: tagEXTLOGFONTA::elfVersion"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfVersion) - 156usize];
    ["Offset of field: tagEXTLOGFONTA::elfStyleSize"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfStyleSize) - 160usize];
    ["Offset of field: tagEXTLOGFONTA::elfMatch"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfMatch) - 164usize];
    ["Offset of field: tagEXTLOGFONTA::elfReserved"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfReserved) - 168usize];
    ["Offset of field: tagEXTLOGFONTA::elfVendorId"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfVendorId) - 172usize];
    ["Offset of field: tagEXTLOGFONTA::elfCulture"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfCulture) - 176usize];
    ["Offset of field: tagEXTLOGFONTA::elfPanose"]
        [::std::mem::offset_of!(tagEXTLOGFONTA, elfPanose) - 180usize];
};
pub type EXTLOGFONTA = tagEXTLOGFONTA;
pub type PEXTLOGFONTA = *mut tagEXTLOGFONTA;
pub type NPEXTLOGFONTA = *mut tagEXTLOGFONTA;
pub type LPEXTLOGFONTA = *mut tagEXTLOGFONTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEXTLOGFONTW {
    pub elfLogFont: LOGFONTW,
    pub elfFullName: [WCHAR; 64usize],
    pub elfStyle: [WCHAR; 32usize],
    pub elfVersion: DWORD,
    pub elfStyleSize: DWORD,
    pub elfMatch: DWORD,
    pub elfReserved: DWORD,
    pub elfVendorId: [BYTE; 4usize],
    pub elfCulture: DWORD,
    pub elfPanose: PANOSE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEXTLOGFONTW"][::std::mem::size_of::<tagEXTLOGFONTW>() - 320usize];
    ["Alignment of tagEXTLOGFONTW"][::std::mem::align_of::<tagEXTLOGFONTW>() - 4usize];
    ["Offset of field: tagEXTLOGFONTW::elfLogFont"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfLogFont) - 0usize];
    ["Offset of field: tagEXTLOGFONTW::elfFullName"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfFullName) - 92usize];
    ["Offset of field: tagEXTLOGFONTW::elfStyle"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfStyle) - 220usize];
    ["Offset of field: tagEXTLOGFONTW::elfVersion"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfVersion) - 284usize];
    ["Offset of field: tagEXTLOGFONTW::elfStyleSize"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfStyleSize) - 288usize];
    ["Offset of field: tagEXTLOGFONTW::elfMatch"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfMatch) - 292usize];
    ["Offset of field: tagEXTLOGFONTW::elfReserved"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfReserved) - 296usize];
    ["Offset of field: tagEXTLOGFONTW::elfVendorId"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfVendorId) - 300usize];
    ["Offset of field: tagEXTLOGFONTW::elfCulture"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfCulture) - 304usize];
    ["Offset of field: tagEXTLOGFONTW::elfPanose"]
        [::std::mem::offset_of!(tagEXTLOGFONTW, elfPanose) - 308usize];
};
pub type EXTLOGFONTW = tagEXTLOGFONTW;
pub type PEXTLOGFONTW = *mut tagEXTLOGFONTW;
pub type NPEXTLOGFONTW = *mut tagEXTLOGFONTW;
pub type LPEXTLOGFONTW = *mut tagEXTLOGFONTW;
pub type EXTLOGFONT = EXTLOGFONTA;
pub type PEXTLOGFONT = PEXTLOGFONTA;
pub type NPEXTLOGFONT = NPEXTLOGFONTA;
pub type LPEXTLOGFONT = LPEXTLOGFONTA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _devicemodeA {
    pub dmDeviceName: [BYTE; 32usize],
    pub dmSpecVersion: WORD,
    pub dmDriverVersion: WORD,
    pub dmSize: WORD,
    pub dmDriverExtra: WORD,
    pub dmFields: DWORD,
    pub __bindgen_anon_1: _devicemodeA__bindgen_ty_1,
    pub dmColor: ::std::os::raw::c_short,
    pub dmDuplex: ::std::os::raw::c_short,
    pub dmYResolution: ::std::os::raw::c_short,
    pub dmTTOption: ::std::os::raw::c_short,
    pub dmCollate: ::std::os::raw::c_short,
    pub dmFormName: [BYTE; 32usize],
    pub dmLogPixels: WORD,
    pub dmBitsPerPel: DWORD,
    pub dmPelsWidth: DWORD,
    pub dmPelsHeight: DWORD,
    pub __bindgen_anon_2: _devicemodeA__bindgen_ty_2,
    pub dmDisplayFrequency: DWORD,
    pub dmICMMethod: DWORD,
    pub dmICMIntent: DWORD,
    pub dmMediaType: DWORD,
    pub dmDitherType: DWORD,
    pub dmReserved1: DWORD,
    pub dmReserved2: DWORD,
    pub dmPanningWidth: DWORD,
    pub dmPanningHeight: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _devicemodeA__bindgen_ty_1 {
    pub __bindgen_anon_1: _devicemodeA__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _devicemodeA__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _devicemodeA__bindgen_ty_1__bindgen_ty_1 {
    pub dmOrientation: ::std::os::raw::c_short,
    pub dmPaperSize: ::std::os::raw::c_short,
    pub dmPaperLength: ::std::os::raw::c_short,
    pub dmPaperWidth: ::std::os::raw::c_short,
    pub dmScale: ::std::os::raw::c_short,
    pub dmCopies: ::std::os::raw::c_short,
    pub dmDefaultSource: ::std::os::raw::c_short,
    pub dmPrintQuality: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeA__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_devicemodeA__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of _devicemodeA__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_devicemodeA__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmOrientation"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_1, dmOrientation) - 0usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmPaperSize"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_1, dmPaperSize) - 2usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmPaperLength"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_1, dmPaperLength) - 4usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmPaperWidth"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_1, dmPaperWidth) - 6usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmScale"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_1, dmScale) - 8usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmCopies"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_1, dmCopies) - 10usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmDefaultSource"][::std::mem::offset_of!(
        _devicemodeA__bindgen_ty_1__bindgen_ty_1,
        dmDefaultSource
    ) - 12usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_1::dmPrintQuality"][::std::mem::offset_of!(
        _devicemodeA__bindgen_ty_1__bindgen_ty_1,
        dmPrintQuality
    ) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _devicemodeA__bindgen_ty_1__bindgen_ty_2 {
    pub dmPosition: POINTL,
    pub dmDisplayOrientation: DWORD,
    pub dmDisplayFixedOutput: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeA__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_devicemodeA__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of _devicemodeA__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_devicemodeA__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_2::dmPosition"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_1__bindgen_ty_2, dmPosition) - 0usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_2::dmDisplayOrientation"][::std::mem::offset_of!(
        _devicemodeA__bindgen_ty_1__bindgen_ty_2,
        dmDisplayOrientation
    ) - 8usize];
    ["Offset of field: _devicemodeA__bindgen_ty_1__bindgen_ty_2::dmDisplayFixedOutput"][::std::mem::offset_of!(
        _devicemodeA__bindgen_ty_1__bindgen_ty_2,
        dmDisplayFixedOutput
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeA__bindgen_ty_1"]
        [::std::mem::size_of::<_devicemodeA__bindgen_ty_1>() - 16usize];
    ["Alignment of _devicemodeA__bindgen_ty_1"]
        [::std::mem::align_of::<_devicemodeA__bindgen_ty_1>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _devicemodeA__bindgen_ty_2 {
    pub dmDisplayFlags: DWORD,
    pub dmNup: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeA__bindgen_ty_2"]
        [::std::mem::size_of::<_devicemodeA__bindgen_ty_2>() - 4usize];
    ["Alignment of _devicemodeA__bindgen_ty_2"]
        [::std::mem::align_of::<_devicemodeA__bindgen_ty_2>() - 4usize];
    ["Offset of field: _devicemodeA__bindgen_ty_2::dmDisplayFlags"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_2, dmDisplayFlags) - 0usize];
    ["Offset of field: _devicemodeA__bindgen_ty_2::dmNup"]
        [::std::mem::offset_of!(_devicemodeA__bindgen_ty_2, dmNup) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeA"][::std::mem::size_of::<_devicemodeA>() - 156usize];
    ["Alignment of _devicemodeA"][::std::mem::align_of::<_devicemodeA>() - 4usize];
    ["Offset of field: _devicemodeA::dmDeviceName"]
        [::std::mem::offset_of!(_devicemodeA, dmDeviceName) - 0usize];
    ["Offset of field: _devicemodeA::dmSpecVersion"]
        [::std::mem::offset_of!(_devicemodeA, dmSpecVersion) - 32usize];
    ["Offset of field: _devicemodeA::dmDriverVersion"]
        [::std::mem::offset_of!(_devicemodeA, dmDriverVersion) - 34usize];
    ["Offset of field: _devicemodeA::dmSize"]
        [::std::mem::offset_of!(_devicemodeA, dmSize) - 36usize];
    ["Offset of field: _devicemodeA::dmDriverExtra"]
        [::std::mem::offset_of!(_devicemodeA, dmDriverExtra) - 38usize];
    ["Offset of field: _devicemodeA::dmFields"]
        [::std::mem::offset_of!(_devicemodeA, dmFields) - 40usize];
    ["Offset of field: _devicemodeA::dmColor"]
        [::std::mem::offset_of!(_devicemodeA, dmColor) - 60usize];
    ["Offset of field: _devicemodeA::dmDuplex"]
        [::std::mem::offset_of!(_devicemodeA, dmDuplex) - 62usize];
    ["Offset of field: _devicemodeA::dmYResolution"]
        [::std::mem::offset_of!(_devicemodeA, dmYResolution) - 64usize];
    ["Offset of field: _devicemodeA::dmTTOption"]
        [::std::mem::offset_of!(_devicemodeA, dmTTOption) - 66usize];
    ["Offset of field: _devicemodeA::dmCollate"]
        [::std::mem::offset_of!(_devicemodeA, dmCollate) - 68usize];
    ["Offset of field: _devicemodeA::dmFormName"]
        [::std::mem::offset_of!(_devicemodeA, dmFormName) - 70usize];
    ["Offset of field: _devicemodeA::dmLogPixels"]
        [::std::mem::offset_of!(_devicemodeA, dmLogPixels) - 102usize];
    ["Offset of field: _devicemodeA::dmBitsPerPel"]
        [::std::mem::offset_of!(_devicemodeA, dmBitsPerPel) - 104usize];
    ["Offset of field: _devicemodeA::dmPelsWidth"]
        [::std::mem::offset_of!(_devicemodeA, dmPelsWidth) - 108usize];
    ["Offset of field: _devicemodeA::dmPelsHeight"]
        [::std::mem::offset_of!(_devicemodeA, dmPelsHeight) - 112usize];
    ["Offset of field: _devicemodeA::dmDisplayFrequency"]
        [::std::mem::offset_of!(_devicemodeA, dmDisplayFrequency) - 120usize];
    ["Offset of field: _devicemodeA::dmICMMethod"]
        [::std::mem::offset_of!(_devicemodeA, dmICMMethod) - 124usize];
    ["Offset of field: _devicemodeA::dmICMIntent"]
        [::std::mem::offset_of!(_devicemodeA, dmICMIntent) - 128usize];
    ["Offset of field: _devicemodeA::dmMediaType"]
        [::std::mem::offset_of!(_devicemodeA, dmMediaType) - 132usize];
    ["Offset of field: _devicemodeA::dmDitherType"]
        [::std::mem::offset_of!(_devicemodeA, dmDitherType) - 136usize];
    ["Offset of field: _devicemodeA::dmReserved1"]
        [::std::mem::offset_of!(_devicemodeA, dmReserved1) - 140usize];
    ["Offset of field: _devicemodeA::dmReserved2"]
        [::std::mem::offset_of!(_devicemodeA, dmReserved2) - 144usize];
    ["Offset of field: _devicemodeA::dmPanningWidth"]
        [::std::mem::offset_of!(_devicemodeA, dmPanningWidth) - 148usize];
    ["Offset of field: _devicemodeA::dmPanningHeight"]
        [::std::mem::offset_of!(_devicemodeA, dmPanningHeight) - 152usize];
};
pub type DEVMODEA = _devicemodeA;
pub type PDEVMODEA = *mut _devicemodeA;
pub type NPDEVMODEA = *mut _devicemodeA;
pub type LPDEVMODEA = *mut _devicemodeA;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _devicemodeW {
    pub dmDeviceName: [WCHAR; 32usize],
    pub dmSpecVersion: WORD,
    pub dmDriverVersion: WORD,
    pub dmSize: WORD,
    pub dmDriverExtra: WORD,
    pub dmFields: DWORD,
    pub __bindgen_anon_1: _devicemodeW__bindgen_ty_1,
    pub dmColor: ::std::os::raw::c_short,
    pub dmDuplex: ::std::os::raw::c_short,
    pub dmYResolution: ::std::os::raw::c_short,
    pub dmTTOption: ::std::os::raw::c_short,
    pub dmCollate: ::std::os::raw::c_short,
    pub dmFormName: [WCHAR; 32usize],
    pub dmLogPixels: WORD,
    pub dmBitsPerPel: DWORD,
    pub dmPelsWidth: DWORD,
    pub dmPelsHeight: DWORD,
    pub __bindgen_anon_2: _devicemodeW__bindgen_ty_2,
    pub dmDisplayFrequency: DWORD,
    pub dmICMMethod: DWORD,
    pub dmICMIntent: DWORD,
    pub dmMediaType: DWORD,
    pub dmDitherType: DWORD,
    pub dmReserved1: DWORD,
    pub dmReserved2: DWORD,
    pub dmPanningWidth: DWORD,
    pub dmPanningHeight: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _devicemodeW__bindgen_ty_1 {
    pub __bindgen_anon_1: _devicemodeW__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _devicemodeW__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _devicemodeW__bindgen_ty_1__bindgen_ty_1 {
    pub dmOrientation: ::std::os::raw::c_short,
    pub dmPaperSize: ::std::os::raw::c_short,
    pub dmPaperLength: ::std::os::raw::c_short,
    pub dmPaperWidth: ::std::os::raw::c_short,
    pub dmScale: ::std::os::raw::c_short,
    pub dmCopies: ::std::os::raw::c_short,
    pub dmDefaultSource: ::std::os::raw::c_short,
    pub dmPrintQuality: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeW__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_devicemodeW__bindgen_ty_1__bindgen_ty_1>() - 16usize];
    ["Alignment of _devicemodeW__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_devicemodeW__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmOrientation"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_1, dmOrientation) - 0usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmPaperSize"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_1, dmPaperSize) - 2usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmPaperLength"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_1, dmPaperLength) - 4usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmPaperWidth"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_1, dmPaperWidth) - 6usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmScale"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_1, dmScale) - 8usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmCopies"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_1, dmCopies) - 10usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmDefaultSource"][::std::mem::offset_of!(
        _devicemodeW__bindgen_ty_1__bindgen_ty_1,
        dmDefaultSource
    ) - 12usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_1::dmPrintQuality"][::std::mem::offset_of!(
        _devicemodeW__bindgen_ty_1__bindgen_ty_1,
        dmPrintQuality
    ) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _devicemodeW__bindgen_ty_1__bindgen_ty_2 {
    pub dmPosition: POINTL,
    pub dmDisplayOrientation: DWORD,
    pub dmDisplayFixedOutput: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeW__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_devicemodeW__bindgen_ty_1__bindgen_ty_2>() - 16usize];
    ["Alignment of _devicemodeW__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_devicemodeW__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_2::dmPosition"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_1__bindgen_ty_2, dmPosition) - 0usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_2::dmDisplayOrientation"][::std::mem::offset_of!(
        _devicemodeW__bindgen_ty_1__bindgen_ty_2,
        dmDisplayOrientation
    ) - 8usize];
    ["Offset of field: _devicemodeW__bindgen_ty_1__bindgen_ty_2::dmDisplayFixedOutput"][::std::mem::offset_of!(
        _devicemodeW__bindgen_ty_1__bindgen_ty_2,
        dmDisplayFixedOutput
    )
        - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeW__bindgen_ty_1"]
        [::std::mem::size_of::<_devicemodeW__bindgen_ty_1>() - 16usize];
    ["Alignment of _devicemodeW__bindgen_ty_1"]
        [::std::mem::align_of::<_devicemodeW__bindgen_ty_1>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _devicemodeW__bindgen_ty_2 {
    pub dmDisplayFlags: DWORD,
    pub dmNup: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeW__bindgen_ty_2"]
        [::std::mem::size_of::<_devicemodeW__bindgen_ty_2>() - 4usize];
    ["Alignment of _devicemodeW__bindgen_ty_2"]
        [::std::mem::align_of::<_devicemodeW__bindgen_ty_2>() - 4usize];
    ["Offset of field: _devicemodeW__bindgen_ty_2::dmDisplayFlags"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_2, dmDisplayFlags) - 0usize];
    ["Offset of field: _devicemodeW__bindgen_ty_2::dmNup"]
        [::std::mem::offset_of!(_devicemodeW__bindgen_ty_2, dmNup) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _devicemodeW"][::std::mem::size_of::<_devicemodeW>() - 220usize];
    ["Alignment of _devicemodeW"][::std::mem::align_of::<_devicemodeW>() - 4usize];
    ["Offset of field: _devicemodeW::dmDeviceName"]
        [::std::mem::offset_of!(_devicemodeW, dmDeviceName) - 0usize];
    ["Offset of field: _devicemodeW::dmSpecVersion"]
        [::std::mem::offset_of!(_devicemodeW, dmSpecVersion) - 64usize];
    ["Offset of field: _devicemodeW::dmDriverVersion"]
        [::std::mem::offset_of!(_devicemodeW, dmDriverVersion) - 66usize];
    ["Offset of field: _devicemodeW::dmSize"]
        [::std::mem::offset_of!(_devicemodeW, dmSize) - 68usize];
    ["Offset of field: _devicemodeW::dmDriverExtra"]
        [::std::mem::offset_of!(_devicemodeW, dmDriverExtra) - 70usize];
    ["Offset of field: _devicemodeW::dmFields"]
        [::std::mem::offset_of!(_devicemodeW, dmFields) - 72usize];
    ["Offset of field: _devicemodeW::dmColor"]
        [::std::mem::offset_of!(_devicemodeW, dmColor) - 92usize];
    ["Offset of field: _devicemodeW::dmDuplex"]
        [::std::mem::offset_of!(_devicemodeW, dmDuplex) - 94usize];
    ["Offset of field: _devicemodeW::dmYResolution"]
        [::std::mem::offset_of!(_devicemodeW, dmYResolution) - 96usize];
    ["Offset of field: _devicemodeW::dmTTOption"]
        [::std::mem::offset_of!(_devicemodeW, dmTTOption) - 98usize];
    ["Offset of field: _devicemodeW::dmCollate"]
        [::std::mem::offset_of!(_devicemodeW, dmCollate) - 100usize];
    ["Offset of field: _devicemodeW::dmFormName"]
        [::std::mem::offset_of!(_devicemodeW, dmFormName) - 102usize];
    ["Offset of field: _devicemodeW::dmLogPixels"]
        [::std::mem::offset_of!(_devicemodeW, dmLogPixels) - 166usize];
    ["Offset of field: _devicemodeW::dmBitsPerPel"]
        [::std::mem::offset_of!(_devicemodeW, dmBitsPerPel) - 168usize];
    ["Offset of field: _devicemodeW::dmPelsWidth"]
        [::std::mem::offset_of!(_devicemodeW, dmPelsWidth) - 172usize];
    ["Offset of field: _devicemodeW::dmPelsHeight"]
        [::std::mem::offset_of!(_devicemodeW, dmPelsHeight) - 176usize];
    ["Offset of field: _devicemodeW::dmDisplayFrequency"]
        [::std::mem::offset_of!(_devicemodeW, dmDisplayFrequency) - 184usize];
    ["Offset of field: _devicemodeW::dmICMMethod"]
        [::std::mem::offset_of!(_devicemodeW, dmICMMethod) - 188usize];
    ["Offset of field: _devicemodeW::dmICMIntent"]
        [::std::mem::offset_of!(_devicemodeW, dmICMIntent) - 192usize];
    ["Offset of field: _devicemodeW::dmMediaType"]
        [::std::mem::offset_of!(_devicemodeW, dmMediaType) - 196usize];
    ["Offset of field: _devicemodeW::dmDitherType"]
        [::std::mem::offset_of!(_devicemodeW, dmDitherType) - 200usize];
    ["Offset of field: _devicemodeW::dmReserved1"]
        [::std::mem::offset_of!(_devicemodeW, dmReserved1) - 204usize];
    ["Offset of field: _devicemodeW::dmReserved2"]
        [::std::mem::offset_of!(_devicemodeW, dmReserved2) - 208usize];
    ["Offset of field: _devicemodeW::dmPanningWidth"]
        [::std::mem::offset_of!(_devicemodeW, dmPanningWidth) - 212usize];
    ["Offset of field: _devicemodeW::dmPanningHeight"]
        [::std::mem::offset_of!(_devicemodeW, dmPanningHeight) - 216usize];
};
pub type DEVMODEW = _devicemodeW;
pub type PDEVMODEW = *mut _devicemodeW;
pub type NPDEVMODEW = *mut _devicemodeW;
pub type LPDEVMODEW = *mut _devicemodeW;
pub type DEVMODE = DEVMODEA;
pub type PDEVMODE = PDEVMODEA;
pub type NPDEVMODE = NPDEVMODEA;
pub type LPDEVMODE = LPDEVMODEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAY_DEVICEA {
    pub cb: DWORD,
    pub DeviceName: [CHAR; 32usize],
    pub DeviceString: [CHAR; 128usize],
    pub StateFlags: DWORD,
    pub DeviceID: [CHAR; 128usize],
    pub DeviceKey: [CHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAY_DEVICEA"][::std::mem::size_of::<_DISPLAY_DEVICEA>() - 424usize];
    ["Alignment of _DISPLAY_DEVICEA"][::std::mem::align_of::<_DISPLAY_DEVICEA>() - 4usize];
    ["Offset of field: _DISPLAY_DEVICEA::cb"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEA, cb) - 0usize];
    ["Offset of field: _DISPLAY_DEVICEA::DeviceName"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEA, DeviceName) - 4usize];
    ["Offset of field: _DISPLAY_DEVICEA::DeviceString"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEA, DeviceString) - 36usize];
    ["Offset of field: _DISPLAY_DEVICEA::StateFlags"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEA, StateFlags) - 164usize];
    ["Offset of field: _DISPLAY_DEVICEA::DeviceID"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEA, DeviceID) - 168usize];
    ["Offset of field: _DISPLAY_DEVICEA::DeviceKey"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEA, DeviceKey) - 296usize];
};
pub type DISPLAY_DEVICEA = _DISPLAY_DEVICEA;
pub type PDISPLAY_DEVICEA = *mut _DISPLAY_DEVICEA;
pub type LPDISPLAY_DEVICEA = *mut _DISPLAY_DEVICEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAY_DEVICEW {
    pub cb: DWORD,
    pub DeviceName: [WCHAR; 32usize],
    pub DeviceString: [WCHAR; 128usize],
    pub StateFlags: DWORD,
    pub DeviceID: [WCHAR; 128usize],
    pub DeviceKey: [WCHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAY_DEVICEW"][::std::mem::size_of::<_DISPLAY_DEVICEW>() - 840usize];
    ["Alignment of _DISPLAY_DEVICEW"][::std::mem::align_of::<_DISPLAY_DEVICEW>() - 4usize];
    ["Offset of field: _DISPLAY_DEVICEW::cb"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEW, cb) - 0usize];
    ["Offset of field: _DISPLAY_DEVICEW::DeviceName"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEW, DeviceName) - 4usize];
    ["Offset of field: _DISPLAY_DEVICEW::DeviceString"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEW, DeviceString) - 68usize];
    ["Offset of field: _DISPLAY_DEVICEW::StateFlags"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEW, StateFlags) - 324usize];
    ["Offset of field: _DISPLAY_DEVICEW::DeviceID"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEW, DeviceID) - 328usize];
    ["Offset of field: _DISPLAY_DEVICEW::DeviceKey"]
        [::std::mem::offset_of!(_DISPLAY_DEVICEW, DeviceKey) - 584usize];
};
pub type DISPLAY_DEVICEW = _DISPLAY_DEVICEW;
pub type PDISPLAY_DEVICEW = *mut _DISPLAY_DEVICEW;
pub type LPDISPLAY_DEVICEW = *mut _DISPLAY_DEVICEW;
pub type DISPLAY_DEVICE = DISPLAY_DEVICEA;
pub type PDISPLAY_DEVICE = PDISPLAY_DEVICEA;
pub type LPDISPLAY_DEVICE = LPDISPLAY_DEVICEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_RATIONAL {
    pub Numerator: UINT32,
    pub Denominator: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_RATIONAL"][::std::mem::size_of::<DISPLAYCONFIG_RATIONAL>() - 8usize];
    ["Alignment of DISPLAYCONFIG_RATIONAL"]
        [::std::mem::align_of::<DISPLAYCONFIG_RATIONAL>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_RATIONAL::Numerator"]
        [::std::mem::offset_of!(DISPLAYCONFIG_RATIONAL, Numerator) - 0usize];
    ["Offset of field: DISPLAYCONFIG_RATIONAL::Denominator"]
        [::std::mem::offset_of!(DISPLAYCONFIG_RATIONAL, Denominator) - 4usize];
};
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = -1;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 0;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 1;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 2;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 3;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 4;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 5;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 6;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 8;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 9;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL : DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 10 ;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED : DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 11 ;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 12;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 13;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 14;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 15;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 16;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 17;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_USB_TUNNEL : DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = 18 ;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = -2147483648;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY_DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32:
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = -1;
pub type DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = ::std::os::raw::c_int;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED:
    DISPLAYCONFIG_SCANLINE_ORDERING = 0;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE:
    DISPLAYCONFIG_SCANLINE_ORDERING = 1;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED:
    DISPLAYCONFIG_SCANLINE_ORDERING = 2;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST : DISPLAYCONFIG_SCANLINE_ORDERING = 2 ;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST : DISPLAYCONFIG_SCANLINE_ORDERING = 3 ;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32:
    DISPLAYCONFIG_SCANLINE_ORDERING = -1;
pub type DISPLAYCONFIG_SCANLINE_ORDERING = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_2DREGION {
    pub cx: UINT32,
    pub cy: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_2DREGION"][::std::mem::size_of::<DISPLAYCONFIG_2DREGION>() - 8usize];
    ["Alignment of DISPLAYCONFIG_2DREGION"]
        [::std::mem::align_of::<DISPLAYCONFIG_2DREGION>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_2DREGION::cx"]
        [::std::mem::offset_of!(DISPLAYCONFIG_2DREGION, cx) - 0usize];
    ["Offset of field: DISPLAYCONFIG_2DREGION::cy"]
        [::std::mem::offset_of!(DISPLAYCONFIG_2DREGION, cy) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO {
    pub pixelRate: UINT64,
    pub hSyncFreq: DISPLAYCONFIG_RATIONAL,
    pub vSyncFreq: DISPLAYCONFIG_RATIONAL,
    pub activeSize: DISPLAYCONFIG_2DREGION,
    pub totalSize: DISPLAYCONFIG_2DREGION,
    pub __bindgen_anon_1: DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1,
    pub scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1 {
    pub AdditionalSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1,
    pub videoStandard: UINT32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
};
impl DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn videoStandard(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_videoStandard(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn videoStandard_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_videoStandard_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn vSyncFreqDivider(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_vSyncFreqDivider(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn vSyncFreqDivider_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                6u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_vSyncFreqDivider_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                6u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                22usize,
                10u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                22usize,
                10u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        videoStandard: UINT32,
        vSyncFreqDivider: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let videoStandard: u32 = unsafe { ::std::mem::transmute(videoStandard) };
            videoStandard as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let vSyncFreqDivider: u32 = unsafe { ::std::mem::transmute(vSyncFreqDivider) };
            vSyncFreqDivider as u64
        });
        __bindgen_bitfield_unit.set(22usize, 10u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1>() - 4usize];
    ["Alignment of DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1::AdditionalSignalInfo"][::std::mem::offset_of!(
        DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1,
        AdditionalSignalInfo
    )
        - 0usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1::videoStandard"][::std::mem::offset_of!(
        DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1,
        videoStandard
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_VIDEO_SIGNAL_INFO"]
        [::std::mem::size_of::<DISPLAYCONFIG_VIDEO_SIGNAL_INFO>() - 48usize];
    ["Alignment of DISPLAYCONFIG_VIDEO_SIGNAL_INFO"]
        [::std::mem::align_of::<DISPLAYCONFIG_VIDEO_SIGNAL_INFO>() - 8usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO::pixelRate"]
        [::std::mem::offset_of!(DISPLAYCONFIG_VIDEO_SIGNAL_INFO, pixelRate) - 0usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO::hSyncFreq"]
        [::std::mem::offset_of!(DISPLAYCONFIG_VIDEO_SIGNAL_INFO, hSyncFreq) - 8usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO::vSyncFreq"]
        [::std::mem::offset_of!(DISPLAYCONFIG_VIDEO_SIGNAL_INFO, vSyncFreq) - 16usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO::activeSize"]
        [::std::mem::offset_of!(DISPLAYCONFIG_VIDEO_SIGNAL_INFO, activeSize) - 24usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO::totalSize"]
        [::std::mem::offset_of!(DISPLAYCONFIG_VIDEO_SIGNAL_INFO, totalSize) - 32usize];
    ["Offset of field: DISPLAYCONFIG_VIDEO_SIGNAL_INFO::scanLineOrdering"]
        [::std::mem::offset_of!(DISPLAYCONFIG_VIDEO_SIGNAL_INFO, scanLineOrdering) - 44usize];
};
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_IDENTITY: DISPLAYCONFIG_SCALING = 1;
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_CENTERED: DISPLAYCONFIG_SCALING = 2;
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_STRETCHED: DISPLAYCONFIG_SCALING = 3;
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX:
    DISPLAYCONFIG_SCALING = 4;
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_CUSTOM: DISPLAYCONFIG_SCALING = 5;
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_PREFERRED: DISPLAYCONFIG_SCALING = 128;
pub const DISPLAYCONFIG_SCALING_DISPLAYCONFIG_SCALING_FORCE_UINT32: DISPLAYCONFIG_SCALING = -1;
pub type DISPLAYCONFIG_SCALING = ::std::os::raw::c_int;
pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_IDENTITY: DISPLAYCONFIG_ROTATION = 1;
pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_ROTATE90: DISPLAYCONFIG_ROTATION = 2;
pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_ROTATE180: DISPLAYCONFIG_ROTATION = 3;
pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_ROTATE270: DISPLAYCONFIG_ROTATION = 4;
pub const DISPLAYCONFIG_ROTATION_DISPLAYCONFIG_ROTATION_FORCE_UINT32: DISPLAYCONFIG_ROTATION = -1;
pub type DISPLAYCONFIG_ROTATION = ::std::os::raw::c_int;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE:
    DISPLAYCONFIG_MODE_INFO_TYPE = 1;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_TARGET:
    DISPLAYCONFIG_MODE_INFO_TYPE = 2;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE:
    DISPLAYCONFIG_MODE_INFO_TYPE = 3;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32:
    DISPLAYCONFIG_MODE_INFO_TYPE = -1;
pub type DISPLAYCONFIG_MODE_INFO_TYPE = ::std::os::raw::c_int;
pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_8BPP: DISPLAYCONFIG_PIXELFORMAT = 1;
pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_16BPP: DISPLAYCONFIG_PIXELFORMAT = 2;
pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_24BPP: DISPLAYCONFIG_PIXELFORMAT = 3;
pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_32BPP: DISPLAYCONFIG_PIXELFORMAT = 4;
pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_NONGDI: DISPLAYCONFIG_PIXELFORMAT = 5;
pub const DISPLAYCONFIG_PIXELFORMAT_DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32:
    DISPLAYCONFIG_PIXELFORMAT = -1;
pub type DISPLAYCONFIG_PIXELFORMAT = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_SOURCE_MODE {
    pub width: UINT32,
    pub height: UINT32,
    pub pixelFormat: DISPLAYCONFIG_PIXELFORMAT,
    pub position: POINTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SOURCE_MODE"]
        [::std::mem::size_of::<DISPLAYCONFIG_SOURCE_MODE>() - 20usize];
    ["Alignment of DISPLAYCONFIG_SOURCE_MODE"]
        [::std::mem::align_of::<DISPLAYCONFIG_SOURCE_MODE>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_SOURCE_MODE::width"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SOURCE_MODE, width) - 0usize];
    ["Offset of field: DISPLAYCONFIG_SOURCE_MODE::height"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SOURCE_MODE, height) - 4usize];
    ["Offset of field: DISPLAYCONFIG_SOURCE_MODE::pixelFormat"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SOURCE_MODE, pixelFormat) - 8usize];
    ["Offset of field: DISPLAYCONFIG_SOURCE_MODE::position"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SOURCE_MODE, position) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_TARGET_MODE {
    pub targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_MODE"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_MODE>() - 48usize];
    ["Alignment of DISPLAYCONFIG_TARGET_MODE"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_MODE>() - 8usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_MODE::targetVideoSignalInfo"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_MODE, targetVideoSignalInfo) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO {
    pub PathSourceSize: POINTL,
    pub DesktopImageRegion: RECTL,
    pub DesktopImageClip: RECTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_DESKTOP_IMAGE_INFO"]
        [::std::mem::size_of::<DISPLAYCONFIG_DESKTOP_IMAGE_INFO>() - 40usize];
    ["Alignment of DISPLAYCONFIG_DESKTOP_IMAGE_INFO"]
        [::std::mem::align_of::<DISPLAYCONFIG_DESKTOP_IMAGE_INFO>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_DESKTOP_IMAGE_INFO::PathSourceSize"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DESKTOP_IMAGE_INFO, PathSourceSize) - 0usize];
    ["Offset of field: DISPLAYCONFIG_DESKTOP_IMAGE_INFO::DesktopImageRegion"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DESKTOP_IMAGE_INFO, DesktopImageRegion) - 8usize];
    ["Offset of field: DISPLAYCONFIG_DESKTOP_IMAGE_INFO::DesktopImageClip"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DESKTOP_IMAGE_INFO, DesktopImageClip) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_MODE_INFO {
    pub infoType: DISPLAYCONFIG_MODE_INFO_TYPE,
    pub id: UINT32,
    pub adapterId: LUID,
    pub __bindgen_anon_1: DISPLAYCONFIG_MODE_INFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_MODE_INFO__bindgen_ty_1 {
    pub targetMode: DISPLAYCONFIG_TARGET_MODE,
    pub sourceMode: DISPLAYCONFIG_SOURCE_MODE,
    pub desktopImageInfo: DISPLAYCONFIG_DESKTOP_IMAGE_INFO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_MODE_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_MODE_INFO__bindgen_ty_1>() - 48usize];
    ["Alignment of DISPLAYCONFIG_MODE_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_MODE_INFO__bindgen_ty_1>() - 8usize];
    ["Offset of field: DISPLAYCONFIG_MODE_INFO__bindgen_ty_1::targetMode"]
        [::std::mem::offset_of!(DISPLAYCONFIG_MODE_INFO__bindgen_ty_1, targetMode) - 0usize];
    ["Offset of field: DISPLAYCONFIG_MODE_INFO__bindgen_ty_1::sourceMode"]
        [::std::mem::offset_of!(DISPLAYCONFIG_MODE_INFO__bindgen_ty_1, sourceMode) - 0usize];
    ["Offset of field: DISPLAYCONFIG_MODE_INFO__bindgen_ty_1::desktopImageInfo"]
        [::std::mem::offset_of!(DISPLAYCONFIG_MODE_INFO__bindgen_ty_1, desktopImageInfo) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_MODE_INFO"][::std::mem::size_of::<DISPLAYCONFIG_MODE_INFO>() - 64usize];
    ["Alignment of DISPLAYCONFIG_MODE_INFO"]
        [::std::mem::align_of::<DISPLAYCONFIG_MODE_INFO>() - 8usize];
    ["Offset of field: DISPLAYCONFIG_MODE_INFO::infoType"]
        [::std::mem::offset_of!(DISPLAYCONFIG_MODE_INFO, infoType) - 0usize];
    ["Offset of field: DISPLAYCONFIG_MODE_INFO::id"]
        [::std::mem::offset_of!(DISPLAYCONFIG_MODE_INFO, id) - 4usize];
    ["Offset of field: DISPLAYCONFIG_MODE_INFO::adapterId"]
        [::std::mem::offset_of!(DISPLAYCONFIG_MODE_INFO, adapterId) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_PATH_SOURCE_INFO {
    pub adapterId: LUID,
    pub id: UINT32,
    pub __bindgen_anon_1: DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1,
    pub statusFlags: UINT32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1 {
    pub modeInfoIdx: UINT32,
    pub __bindgen_anon_1: DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn cloneGroupId(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_cloneGroupId(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn cloneGroupId_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_cloneGroupId_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn sourceModeInfoIdx(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_sourceModeInfoIdx(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn sourceModeInfoIdx_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_sourceModeInfoIdx_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        cloneGroupId: UINT32,
        sourceModeInfoIdx: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let cloneGroupId: u32 = unsafe { ::std::mem::transmute(cloneGroupId) };
            cloneGroupId as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let sourceModeInfoIdx: u32 = unsafe { ::std::mem::transmute(sourceModeInfoIdx) };
            sourceModeInfoIdx as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1>() - 4usize];
    ["Alignment of DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1::modeInfoIdx"][::std::mem::offset_of!(
        DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1,
        modeInfoIdx
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_SOURCE_INFO"]
        [::std::mem::size_of::<DISPLAYCONFIG_PATH_SOURCE_INFO>() - 20usize];
    ["Alignment of DISPLAYCONFIG_PATH_SOURCE_INFO"]
        [::std::mem::align_of::<DISPLAYCONFIG_PATH_SOURCE_INFO>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_PATH_SOURCE_INFO::adapterId"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_SOURCE_INFO, adapterId) - 0usize];
    ["Offset of field: DISPLAYCONFIG_PATH_SOURCE_INFO::id"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_SOURCE_INFO, id) - 8usize];
    ["Offset of field: DISPLAYCONFIG_PATH_SOURCE_INFO::statusFlags"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_SOURCE_INFO, statusFlags) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_PATH_TARGET_INFO {
    pub adapterId: LUID,
    pub id: UINT32,
    pub __bindgen_anon_1: DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1,
    pub outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    pub rotation: DISPLAYCONFIG_ROTATION,
    pub scaling: DISPLAYCONFIG_SCALING,
    pub refreshRate: DISPLAYCONFIG_RATIONAL,
    pub scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
    pub targetAvailable: BOOL,
    pub statusFlags: UINT32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1 {
    pub modeInfoIdx: UINT32,
    pub __bindgen_anon_1: DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn desktopModeInfoIdx(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_desktopModeInfoIdx(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn desktopModeInfoIdx_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_desktopModeInfoIdx_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn targetModeInfoIdx(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_targetModeInfoIdx(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn targetModeInfoIdx_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_targetModeInfoIdx_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        desktopModeInfoIdx: UINT32,
        targetModeInfoIdx: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let desktopModeInfoIdx: u32 = unsafe { ::std::mem::transmute(desktopModeInfoIdx) };
            desktopModeInfoIdx as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let targetModeInfoIdx: u32 = unsafe { ::std::mem::transmute(targetModeInfoIdx) };
            targetModeInfoIdx as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1>() - 4usize];
    ["Alignment of DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1::modeInfoIdx"][::std::mem::offset_of!(
        DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1,
        modeInfoIdx
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_TARGET_INFO"]
        [::std::mem::size_of::<DISPLAYCONFIG_PATH_TARGET_INFO>() - 48usize];
    ["Alignment of DISPLAYCONFIG_PATH_TARGET_INFO"]
        [::std::mem::align_of::<DISPLAYCONFIG_PATH_TARGET_INFO>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::adapterId"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, adapterId) - 0usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::id"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, id) - 8usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::outputTechnology"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, outputTechnology) - 16usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::rotation"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, rotation) - 20usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::scaling"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, scaling) - 24usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::refreshRate"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, refreshRate) - 28usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::scanLineOrdering"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, scanLineOrdering) - 36usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::targetAvailable"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, targetAvailable) - 40usize];
    ["Offset of field: DISPLAYCONFIG_PATH_TARGET_INFO::statusFlags"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_TARGET_INFO, statusFlags) - 44usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_PATH_INFO {
    pub sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO,
    pub targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO,
    pub flags: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_PATH_INFO"][::std::mem::size_of::<DISPLAYCONFIG_PATH_INFO>() - 72usize];
    ["Alignment of DISPLAYCONFIG_PATH_INFO"]
        [::std::mem::align_of::<DISPLAYCONFIG_PATH_INFO>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_PATH_INFO::sourceInfo"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_INFO, sourceInfo) - 0usize];
    ["Offset of field: DISPLAYCONFIG_PATH_INFO::targetInfo"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_INFO, targetInfo) - 20usize];
    ["Offset of field: DISPLAYCONFIG_PATH_INFO::flags"]
        [::std::mem::offset_of!(DISPLAYCONFIG_PATH_INFO, flags) - 68usize];
};
pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_INTERNAL: DISPLAYCONFIG_TOPOLOGY_ID = 1;
pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_CLONE: DISPLAYCONFIG_TOPOLOGY_ID = 2;
pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_EXTEND: DISPLAYCONFIG_TOPOLOGY_ID = 4;
pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_EXTERNAL: DISPLAYCONFIG_TOPOLOGY_ID = 8;
pub const DISPLAYCONFIG_TOPOLOGY_ID_DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32: DISPLAYCONFIG_TOPOLOGY_ID =
    -1;
pub type DISPLAYCONFIG_TOPOLOGY_ID = ::std::os::raw::c_int;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 1;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 2;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 3;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 4;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 5;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 6;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION : DISPLAYCONFIG_DEVICE_INFO_TYPE = 7 ;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION : DISPLAYCONFIG_DEVICE_INFO_TYPE = 8 ;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 9;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 10;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 11;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_MONITOR_SPECIALIZATION:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 12;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_MONITOR_SPECIALIZATION:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 13;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_RESERVED1:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 14;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO_2:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 15;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_HDR_STATE:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 16;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_SET_WCG_STATE:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = 17;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE_DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32:
    DISPLAYCONFIG_DEVICE_INFO_TYPE = -1;
pub type DISPLAYCONFIG_DEVICE_INFO_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_DEVICE_INFO_HEADER {
    pub type_: DISPLAYCONFIG_DEVICE_INFO_TYPE,
    pub size: UINT32,
    pub adapterId: LUID,
    pub id: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_DEVICE_INFO_HEADER"]
        [::std::mem::size_of::<DISPLAYCONFIG_DEVICE_INFO_HEADER>() - 20usize];
    ["Alignment of DISPLAYCONFIG_DEVICE_INFO_HEADER"]
        [::std::mem::align_of::<DISPLAYCONFIG_DEVICE_INFO_HEADER>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_DEVICE_INFO_HEADER::type_"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DEVICE_INFO_HEADER, type_) - 0usize];
    ["Offset of field: DISPLAYCONFIG_DEVICE_INFO_HEADER::size"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DEVICE_INFO_HEADER, size) - 4usize];
    ["Offset of field: DISPLAYCONFIG_DEVICE_INFO_HEADER::adapterId"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DEVICE_INFO_HEADER, adapterId) - 8usize];
    ["Offset of field: DISPLAYCONFIG_DEVICE_INFO_HEADER::id"]
        [::std::mem::offset_of!(DISPLAYCONFIG_DEVICE_INFO_HEADER, id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_SOURCE_DEVICE_NAME {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub viewGdiDeviceName: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SOURCE_DEVICE_NAME"]
        [::std::mem::size_of::<DISPLAYCONFIG_SOURCE_DEVICE_NAME>() - 84usize];
    ["Alignment of DISPLAYCONFIG_SOURCE_DEVICE_NAME"]
        [::std::mem::align_of::<DISPLAYCONFIG_SOURCE_DEVICE_NAME>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_SOURCE_DEVICE_NAME::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SOURCE_DEVICE_NAME, header) - 0usize];
    ["Offset of field: DISPLAYCONFIG_SOURCE_DEVICE_NAME::viewGdiDeviceName"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SOURCE_DEVICE_NAME, viewGdiDeviceName) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS {
    pub __bindgen_anon_1: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1 {
    pub __bindgen_anon_1: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn friendlyNameFromEdid(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_friendlyNameFromEdid(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn friendlyNameFromEdid_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_friendlyNameFromEdid_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn friendlyNameForced(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_friendlyNameForced(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn friendlyNameForced_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_friendlyNameForced_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn edidIdsValid(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_edidIdsValid(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn edidIdsValid_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_edidIdsValid_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        friendlyNameFromEdid: UINT32,
        friendlyNameForced: UINT32,
        edidIdsValid: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let friendlyNameFromEdid: u32 = unsafe { ::std::mem::transmute(friendlyNameFromEdid) };
            friendlyNameFromEdid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let friendlyNameForced: u32 = unsafe { ::std::mem::transmute(friendlyNameForced) };
            friendlyNameForced as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let edidIdsValid: u32 = unsafe { ::std::mem::transmute(edidIdsValid) };
            edidIdsValid as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1>() - 4usize];
    ["Alignment of DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1::value"][::std::mem::offset_of!(
        DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS>() - 4usize];
    ["Alignment of DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS>() - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_TARGET_DEVICE_NAME {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
    pub outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    pub edidManufactureId: UINT16,
    pub edidProductCodeId: UINT16,
    pub connectorInstance: UINT32,
    pub monitorFriendlyDeviceName: [WCHAR; 64usize],
    pub monitorDevicePath: [WCHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_DEVICE_NAME"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME>() - 420usize];
    ["Alignment of DISPLAYCONFIG_TARGET_DEVICE_NAME"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_DEVICE_NAME>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, header) - 0usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::flags"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, flags) - 20usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::outputTechnology"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, outputTechnology) - 24usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::edidManufactureId"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, edidManufactureId) - 28usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::edidProductCodeId"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, edidProductCodeId) - 30usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::connectorInstance"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, connectorInstance) - 32usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::monitorFriendlyDeviceName"][::std::mem::offset_of!(
        DISPLAYCONFIG_TARGET_DEVICE_NAME,
        monitorFriendlyDeviceName
    ) - 36usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_DEVICE_NAME::monitorDevicePath"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_DEVICE_NAME, monitorDevicePath) - 164usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_TARGET_PREFERRED_MODE {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub width: UINT32,
    pub height: UINT32,
    pub targetMode: DISPLAYCONFIG_TARGET_MODE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_PREFERRED_MODE"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_PREFERRED_MODE>() - 80usize];
    ["Alignment of DISPLAYCONFIG_TARGET_PREFERRED_MODE"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_PREFERRED_MODE>() - 8usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_PREFERRED_MODE::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_PREFERRED_MODE, header) - 0usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_PREFERRED_MODE::width"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_PREFERRED_MODE, width) - 20usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_PREFERRED_MODE::height"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_PREFERRED_MODE, height) - 24usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_PREFERRED_MODE::targetMode"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_PREFERRED_MODE, targetMode) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_ADAPTER_NAME {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub adapterDevicePath: [WCHAR; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_ADAPTER_NAME"]
        [::std::mem::size_of::<DISPLAYCONFIG_ADAPTER_NAME>() - 276usize];
    ["Alignment of DISPLAYCONFIG_ADAPTER_NAME"]
        [::std::mem::align_of::<DISPLAYCONFIG_ADAPTER_NAME>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_ADAPTER_NAME::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_ADAPTER_NAME, header) - 0usize];
    ["Offset of field: DISPLAYCONFIG_ADAPTER_NAME::adapterDevicePath"]
        [::std::mem::offset_of!(DISPLAYCONFIG_ADAPTER_NAME, adapterDevicePath) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_TARGET_BASE_TYPE {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub baseOutputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_TARGET_BASE_TYPE"]
        [::std::mem::size_of::<DISPLAYCONFIG_TARGET_BASE_TYPE>() - 24usize];
    ["Alignment of DISPLAYCONFIG_TARGET_BASE_TYPE"]
        [::std::mem::align_of::<DISPLAYCONFIG_TARGET_BASE_TYPE>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_BASE_TYPE::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_BASE_TYPE, header) - 0usize];
    ["Offset of field: DISPLAYCONFIG_TARGET_BASE_TYPE::baseOutputTechnology"]
        [::std::mem::offset_of!(DISPLAYCONFIG_TARGET_BASE_TYPE, baseOutputTechnology) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1 {
    pub __bindgen_anon_1: DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn bootPersistenceOn(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_bootPersistenceOn(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn bootPersistenceOn_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_bootPersistenceOn_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bootPersistenceOn: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bootPersistenceOn: u32 = unsafe { ::std::mem::transmute(bootPersistenceOn) };
            bootPersistenceOn as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1>() - 4usize];
    ["Alignment of DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1::value"][::std::mem::offset_of!(
        DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SET_TARGET_PERSISTENCE"]
        [::std::mem::size_of::<DISPLAYCONFIG_SET_TARGET_PERSISTENCE>() - 24usize];
    ["Alignment of DISPLAYCONFIG_SET_TARGET_PERSISTENCE"]
        [::std::mem::align_of::<DISPLAYCONFIG_SET_TARGET_PERSISTENCE>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_SET_TARGET_PERSISTENCE::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SET_TARGET_PERSISTENCE, header) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1 {
    pub __bindgen_anon_1: DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn disableMonitorVirtualResolution(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_disableMonitorVirtualResolution(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn disableMonitorVirtualResolution_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_disableMonitorVirtualResolution_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        disableMonitorVirtualResolution: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let disableMonitorVirtualResolution: u32 =
                unsafe { ::std::mem::transmute(disableMonitorVirtualResolution) };
            disableMonitorVirtualResolution as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1"]
        [::std::mem::size_of::<DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1>() - 4usize];
    ["Alignment of DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1"]
        [::std::mem::align_of::<DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1::value"][::std::mem::offset_of!(
        DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION"]
        [::std::mem::size_of::<DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION>() - 24usize];
    ["Alignment of DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION"]
        [::std::mem::align_of::<DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION>() - 4usize];
    ["Offset of field: DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION::header"]
        [::std::mem::offset_of!(DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION, header) - 0usize];
};
pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_RGB:
    _DISPLAYCONFIG_COLOR_ENCODING = 0;
pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_YCBCR444:
    _DISPLAYCONFIG_COLOR_ENCODING = 1;
pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_YCBCR422:
    _DISPLAYCONFIG_COLOR_ENCODING = 2;
pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_YCBCR420:
    _DISPLAYCONFIG_COLOR_ENCODING = 3;
pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_INTENSITY:
    _DISPLAYCONFIG_COLOR_ENCODING = 4;
pub const _DISPLAYCONFIG_COLOR_ENCODING_DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32:
    _DISPLAYCONFIG_COLOR_ENCODING = -1;
pub type _DISPLAYCONFIG_COLOR_ENCODING = ::std::os::raw::c_int;
pub use self::_DISPLAYCONFIG_COLOR_ENCODING as DISPLAYCONFIG_COLOR_ENCODING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1,
    pub colorEncoding: DISPLAYCONFIG_COLOR_ENCODING,
    pub bitsPerColorChannel: UINT32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn advancedColorSupported(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_advancedColorSupported(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn advancedColorSupported_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_advancedColorSupported_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn advancedColorEnabled(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_advancedColorEnabled(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn advancedColorEnabled_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_advancedColorEnabled_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wideColorEnforced(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wideColorEnforced(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wideColorEnforced_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wideColorEnforced_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn advancedColorForceDisabled(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_advancedColorForceDisabled(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn advancedColorForceDisabled_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_advancedColorForceDisabled_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        advancedColorSupported: UINT32,
        advancedColorEnabled: UINT32,
        wideColorEnforced: UINT32,
        advancedColorForceDisabled: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let advancedColorSupported: u32 =
                unsafe { ::std::mem::transmute(advancedColorSupported) };
            advancedColorSupported as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let advancedColorEnabled: u32 = unsafe { ::std::mem::transmute(advancedColorEnabled) };
            advancedColorEnabled as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let wideColorEnforced: u32 = unsafe { ::std::mem::transmute(wideColorEnforced) };
            wideColorEnforced as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let advancedColorForceDisabled: u32 =
                unsafe { ::std::mem::transmute(advancedColorForceDisabled) };
            advancedColorForceDisabled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 28u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1::value"][::std::mem::offset_of!(
        _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO>() - 32usize];
    ["Alignment of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO"]
        [::std::mem::align_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO, header) - 0usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO::colorEncoding"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO, colorEncoding) - 24usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO::bitsPerColorChannel"][::std::mem::offset_of!(
        _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO,
        bitsPerColorChannel
    ) - 28usize];
};
pub type DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
};
impl _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn enableAdvancedColor(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enableAdvancedColor(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enableAdvancedColor_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enableAdvancedColor_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enableAdvancedColor: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enableAdvancedColor: u32 = unsafe { ::std::mem::transmute(enableAdvancedColor) };
            enableAdvancedColor as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1::value"][::std::mem::offset_of!(
        _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE>() - 24usize];
    ["Alignment of _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE, header) - 0usize];
};
pub type DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
pub const _DISPLAYCONFIG_ADVANCED_COLOR_MODE_DISPLAYCONFIG_ADVANCED_COLOR_MODE_SDR:
    _DISPLAYCONFIG_ADVANCED_COLOR_MODE = 0;
pub const _DISPLAYCONFIG_ADVANCED_COLOR_MODE_DISPLAYCONFIG_ADVANCED_COLOR_MODE_WCG:
    _DISPLAYCONFIG_ADVANCED_COLOR_MODE = 1;
pub const _DISPLAYCONFIG_ADVANCED_COLOR_MODE_DISPLAYCONFIG_ADVANCED_COLOR_MODE_HDR:
    _DISPLAYCONFIG_ADVANCED_COLOR_MODE = 2;
pub type _DISPLAYCONFIG_ADVANCED_COLOR_MODE = ::std::os::raw::c_int;
pub use self::_DISPLAYCONFIG_ADVANCED_COLOR_MODE as DISPLAYCONFIG_ADVANCED_COLOR_MODE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2 {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1,
    pub colorEncoding: DISPLAYCONFIG_COLOR_ENCODING,
    pub bitsPerColorChannel: UINT32,
    pub activeColorMode: DISPLAYCONFIG_ADVANCED_COLOR_MODE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1>(
        ) - 4usize];
    ["Alignment of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn advancedColorSupported(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_advancedColorSupported(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn advancedColorSupported_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_advancedColorSupported_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn advancedColorActive(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_advancedColorActive(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn advancedColorActive_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_advancedColorActive_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved1(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved1_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved1_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn advancedColorLimitedByPolicy(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_advancedColorLimitedByPolicy(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn advancedColorLimitedByPolicy_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_advancedColorLimitedByPolicy_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn highDynamicRangeSupported(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_highDynamicRangeSupported(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn highDynamicRangeSupported_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_highDynamicRangeSupported_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn highDynamicRangeUserEnabled(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_highDynamicRangeUserEnabled(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn highDynamicRangeUserEnabled_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_highDynamicRangeUserEnabled_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wideColorSupported(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wideColorSupported(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wideColorSupported_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wideColorSupported_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wideColorUserEnabled(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wideColorUserEnabled(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wideColorUserEnabled_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wideColorUserEnabled_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                8usize,
                24u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                8usize,
                24u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        advancedColorSupported: UINT32,
        advancedColorActive: UINT32,
        reserved1: UINT32,
        advancedColorLimitedByPolicy: UINT32,
        highDynamicRangeSupported: UINT32,
        highDynamicRangeUserEnabled: UINT32,
        wideColorSupported: UINT32,
        wideColorUserEnabled: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let advancedColorSupported: u32 =
                unsafe { ::std::mem::transmute(advancedColorSupported) };
            advancedColorSupported as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let advancedColorActive: u32 = unsafe { ::std::mem::transmute(advancedColorActive) };
            advancedColorActive as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let advancedColorLimitedByPolicy: u32 =
                unsafe { ::std::mem::transmute(advancedColorLimitedByPolicy) };
            advancedColorLimitedByPolicy as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let highDynamicRangeSupported: u32 =
                unsafe { ::std::mem::transmute(highDynamicRangeSupported) };
            highDynamicRangeSupported as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let highDynamicRangeUserEnabled: u32 =
                unsafe { ::std::mem::transmute(highDynamicRangeUserEnabled) };
            highDynamicRangeUserEnabled as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let wideColorSupported: u32 = unsafe { ::std::mem::transmute(wideColorSupported) };
            wideColorSupported as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let wideColorUserEnabled: u32 = unsafe { ::std::mem::transmute(wideColorUserEnabled) };
            wideColorUserEnabled as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1::value"][::std::mem::offset_of!(
        _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2>() - 36usize];
    ["Alignment of _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2"]
        [::std::mem::align_of::<_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2, header) - 0usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2::colorEncoding"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2, colorEncoding) - 24usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2::bitsPerColorChannel"][::std::mem::offset_of!(
        _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2,
        bitsPerColorChannel
    ) - 28usize];
    ["Offset of field: _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2::activeColorMode"][::std::mem::offset_of!(
        _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2,
        activeColorMode
    ) - 32usize];
};
pub type DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2 = _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO_2;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_HDR_STATE {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn enableHdr(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enableHdr(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enableHdr_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enableHdr_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enableHdr: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enableHdr: u32 = unsafe { ::std::mem::transmute(enableHdr) };
            enableHdr as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SET_HDR_STATE__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_HDR_STATE"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_HDR_STATE>() - 24usize];
    ["Alignment of _DISPLAYCONFIG_SET_HDR_STATE"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_HDR_STATE>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_HDR_STATE::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SET_HDR_STATE, header) - 0usize];
};
pub type DISPLAYCONFIG_SET_HDR_STATE = _DISPLAYCONFIG_SET_HDR_STATE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_WCG_STATE {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
};
impl _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn enableWcg(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_enableWcg(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn enableWcg_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_enableWcg_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        enableWcg: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let enableWcg: u32 = unsafe { ::std::mem::transmute(enableWcg) };
            enableWcg as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1::value"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SET_WCG_STATE__bindgen_ty_1, value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_WCG_STATE"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_WCG_STATE>() - 24usize];
    ["Alignment of _DISPLAYCONFIG_SET_WCG_STATE"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_WCG_STATE>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_WCG_STATE::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SET_WCG_STATE, header) - 0usize];
};
pub type DISPLAYCONFIG_SET_WCG_STATE = _DISPLAYCONFIG_SET_WCG_STATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_SDR_WHITE_LEVEL {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub SDRWhiteLevel: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SDR_WHITE_LEVEL"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SDR_WHITE_LEVEL>() - 24usize];
    ["Alignment of _DISPLAYCONFIG_SDR_WHITE_LEVEL"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SDR_WHITE_LEVEL>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SDR_WHITE_LEVEL::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SDR_WHITE_LEVEL, header) - 0usize];
    ["Offset of field: _DISPLAYCONFIG_SDR_WHITE_LEVEL::SDRWhiteLevel"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SDR_WHITE_LEVEL, SDRWhiteLevel) - 20usize];
};
pub type DISPLAYCONFIG_SDR_WHITE_LEVEL = _DISPLAYCONFIG_SDR_WHITE_LEVEL;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn isSpecializationEnabled(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isSpecializationEnabled(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isSpecializationEnabled_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isSpecializationEnabled_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isSpecializationAvailableForMonitor(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isSpecializationAvailableForMonitor(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isSpecializationAvailableForMonitor_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isSpecializationAvailableForMonitor_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn isSpecializationAvailableForSystem(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isSpecializationAvailableForSystem(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isSpecializationAvailableForSystem_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isSpecializationAvailableForSystem_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 29u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 29u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                29u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                29u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        isSpecializationEnabled: UINT32,
        isSpecializationAvailableForMonitor: UINT32,
        isSpecializationAvailableForSystem: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let isSpecializationEnabled: u32 =
                unsafe { ::std::mem::transmute(isSpecializationEnabled) };
            isSpecializationEnabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let isSpecializationAvailableForMonitor: u32 =
                unsafe { ::std::mem::transmute(isSpecializationAvailableForMonitor) };
            isSpecializationAvailableForMonitor as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let isSpecializationAvailableForSystem: u32 =
                unsafe { ::std::mem::transmute(isSpecializationAvailableForSystem) };
            isSpecializationAvailableForSystem as u64
        });
        __bindgen_bitfield_unit.set(3usize, 29u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1"][::std::mem::align_of::<
        _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1::value"][::std::mem::offset_of!(
        _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION"]
        [::std::mem::size_of::<_DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION>() - 24usize];
    ["Alignment of _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION"]
        [::std::mem::align_of::<_DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION, header) - 0usize];
};
pub type DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION = _DISPLAYCONFIG_GET_MONITOR_SPECIALIZATION;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION {
    pub header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1,
    pub specializationType: GUID,
    pub specializationSubType: GUID,
    pub specializationApplicationName: [WCHAR; 128usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1 {
    pub __bindgen_anon_1: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1,
    pub value: UINT32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
};
impl _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn isSpecializationEnabled(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_isSpecializationEnabled(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn isSpecializationEnabled_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_isSpecializationEnabled_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved(&self) -> UINT32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved_raw(this: *const Self) -> UINT32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                31u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved_raw(this: *mut Self, val: UINT32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                31u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        isSpecializationEnabled: UINT32,
        reserved: UINT32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let isSpecializationEnabled: u32 =
                unsafe { ::std::mem::transmute(isSpecializationEnabled) };
            isSpecializationEnabled as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let reserved: u32 = unsafe { ::std::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1>() - 4usize];
    ["Alignment of _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1"][::std::mem::align_of::<
        _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1::value"][::std::mem::offset_of!(
        _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION__bindgen_ty_1,
        value
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION"]
        [::std::mem::size_of::<_DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION>() - 312usize];
    ["Alignment of _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION"]
        [::std::mem::align_of::<_DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION>() - 4usize];
    ["Offset of field: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION::header"]
        [::std::mem::offset_of!(_DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION, header) - 0usize];
    ["Offset of field: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION::specializationType"][::std::mem::offset_of!(
        _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION,
        specializationType
    ) - 24usize];
    ["Offset of field: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION::specializationSubType"][::std::mem::offset_of!(
        _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION,
        specializationSubType
    )
        - 40usize];
    ["Offset of field: _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION::specializationApplicationName"][::std::mem::offset_of!(
        _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION,
        specializationApplicationName
    )
        - 56usize];
};
pub type DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION = _DISPLAYCONFIG_SET_MONITOR_SPECIALIZATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RGNDATAHEADER {
    pub dwSize: DWORD,
    pub iType: DWORD,
    pub nCount: DWORD,
    pub nRgnSize: DWORD,
    pub rcBound: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RGNDATAHEADER"][::std::mem::size_of::<_RGNDATAHEADER>() - 32usize];
    ["Alignment of _RGNDATAHEADER"][::std::mem::align_of::<_RGNDATAHEADER>() - 4usize];
    ["Offset of field: _RGNDATAHEADER::dwSize"]
        [::std::mem::offset_of!(_RGNDATAHEADER, dwSize) - 0usize];
    ["Offset of field: _RGNDATAHEADER::iType"]
        [::std::mem::offset_of!(_RGNDATAHEADER, iType) - 4usize];
    ["Offset of field: _RGNDATAHEADER::nCount"]
        [::std::mem::offset_of!(_RGNDATAHEADER, nCount) - 8usize];
    ["Offset of field: _RGNDATAHEADER::nRgnSize"]
        [::std::mem::offset_of!(_RGNDATAHEADER, nRgnSize) - 12usize];
    ["Offset of field: _RGNDATAHEADER::rcBound"]
        [::std::mem::offset_of!(_RGNDATAHEADER, rcBound) - 16usize];
};
pub type RGNDATAHEADER = _RGNDATAHEADER;
pub type PRGNDATAHEADER = *mut _RGNDATAHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RGNDATA {
    pub rdh: RGNDATAHEADER,
    pub Buffer: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RGNDATA"][::std::mem::size_of::<_RGNDATA>() - 36usize];
    ["Alignment of _RGNDATA"][::std::mem::align_of::<_RGNDATA>() - 4usize];
    ["Offset of field: _RGNDATA::rdh"][::std::mem::offset_of!(_RGNDATA, rdh) - 0usize];
    ["Offset of field: _RGNDATA::Buffer"][::std::mem::offset_of!(_RGNDATA, Buffer) - 32usize];
};
pub type RGNDATA = _RGNDATA;
pub type PRGNDATA = *mut _RGNDATA;
pub type NPRGNDATA = *mut _RGNDATA;
pub type LPRGNDATA = *mut _RGNDATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ABC {
    pub abcA: ::std::os::raw::c_int,
    pub abcB: UINT,
    pub abcC: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ABC"][::std::mem::size_of::<_ABC>() - 12usize];
    ["Alignment of _ABC"][::std::mem::align_of::<_ABC>() - 4usize];
    ["Offset of field: _ABC::abcA"][::std::mem::offset_of!(_ABC, abcA) - 0usize];
    ["Offset of field: _ABC::abcB"][::std::mem::offset_of!(_ABC, abcB) - 4usize];
    ["Offset of field: _ABC::abcC"][::std::mem::offset_of!(_ABC, abcC) - 8usize];
};
pub type ABC = _ABC;
pub type PABC = *mut _ABC;
pub type NPABC = *mut _ABC;
pub type LPABC = *mut _ABC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ABCFLOAT {
    pub abcfA: FLOAT,
    pub abcfB: FLOAT,
    pub abcfC: FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ABCFLOAT"][::std::mem::size_of::<_ABCFLOAT>() - 12usize];
    ["Alignment of _ABCFLOAT"][::std::mem::align_of::<_ABCFLOAT>() - 4usize];
    ["Offset of field: _ABCFLOAT::abcfA"][::std::mem::offset_of!(_ABCFLOAT, abcfA) - 0usize];
    ["Offset of field: _ABCFLOAT::abcfB"][::std::mem::offset_of!(_ABCFLOAT, abcfB) - 4usize];
    ["Offset of field: _ABCFLOAT::abcfC"][::std::mem::offset_of!(_ABCFLOAT, abcfC) - 8usize];
};
pub type ABCFLOAT = _ABCFLOAT;
pub type PABCFLOAT = *mut _ABCFLOAT;
pub type NPABCFLOAT = *mut _ABCFLOAT;
pub type LPABCFLOAT = *mut _ABCFLOAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUTLINETEXTMETRICA {
    pub otmSize: UINT,
    pub otmTextMetrics: TEXTMETRICA,
    pub otmFiller: BYTE,
    pub otmPanoseNumber: PANOSE,
    pub otmfsSelection: UINT,
    pub otmfsType: UINT,
    pub otmsCharSlopeRise: ::std::os::raw::c_int,
    pub otmsCharSlopeRun: ::std::os::raw::c_int,
    pub otmItalicAngle: ::std::os::raw::c_int,
    pub otmEMSquare: UINT,
    pub otmAscent: ::std::os::raw::c_int,
    pub otmDescent: ::std::os::raw::c_int,
    pub otmLineGap: UINT,
    pub otmsCapEmHeight: UINT,
    pub otmsXHeight: UINT,
    pub otmrcFontBox: RECT,
    pub otmMacAscent: ::std::os::raw::c_int,
    pub otmMacDescent: ::std::os::raw::c_int,
    pub otmMacLineGap: UINT,
    pub otmusMinimumPPEM: UINT,
    pub otmptSubscriptSize: POINT,
    pub otmptSubscriptOffset: POINT,
    pub otmptSuperscriptSize: POINT,
    pub otmptSuperscriptOffset: POINT,
    pub otmsStrikeoutSize: UINT,
    pub otmsStrikeoutPosition: ::std::os::raw::c_int,
    pub otmsUnderscoreSize: ::std::os::raw::c_int,
    pub otmsUnderscorePosition: ::std::os::raw::c_int,
    pub otmpFamilyName: PSTR,
    pub otmpFaceName: PSTR,
    pub otmpStyleName: PSTR,
    pub otmpFullName: PSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OUTLINETEXTMETRICA"][::std::mem::size_of::<_OUTLINETEXTMETRICA>() - 232usize];
    ["Alignment of _OUTLINETEXTMETRICA"][::std::mem::align_of::<_OUTLINETEXTMETRICA>() - 8usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmSize) - 0usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmTextMetrics"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmTextMetrics) - 4usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmFiller"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmFiller) - 60usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmPanoseNumber"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmPanoseNumber) - 61usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmfsSelection"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmfsSelection) - 72usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmfsType"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmfsType) - 76usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsCharSlopeRise"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsCharSlopeRise) - 80usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsCharSlopeRun"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsCharSlopeRun) - 84usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmItalicAngle"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmItalicAngle) - 88usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmEMSquare"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmEMSquare) - 92usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmAscent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmAscent) - 96usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmDescent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmDescent) - 100usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmLineGap"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmLineGap) - 104usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsCapEmHeight"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsCapEmHeight) - 108usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsXHeight"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsXHeight) - 112usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmrcFontBox"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmrcFontBox) - 116usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmMacAscent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmMacAscent) - 132usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmMacDescent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmMacDescent) - 136usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmMacLineGap"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmMacLineGap) - 140usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmusMinimumPPEM"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmusMinimumPPEM) - 144usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmptSubscriptSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmptSubscriptSize) - 148usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmptSubscriptOffset"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmptSubscriptOffset) - 156usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmptSuperscriptSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmptSuperscriptSize) - 164usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmptSuperscriptOffset"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmptSuperscriptOffset) - 172usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsStrikeoutSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsStrikeoutSize) - 180usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsStrikeoutPosition"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsStrikeoutPosition) - 184usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsUnderscoreSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsUnderscoreSize) - 188usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmsUnderscorePosition"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmsUnderscorePosition) - 192usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmpFamilyName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmpFamilyName) - 200usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmpFaceName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmpFaceName) - 208usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmpStyleName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmpStyleName) - 216usize];
    ["Offset of field: _OUTLINETEXTMETRICA::otmpFullName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICA, otmpFullName) - 224usize];
};
pub type OUTLINETEXTMETRICA = _OUTLINETEXTMETRICA;
pub type POUTLINETEXTMETRICA = *mut _OUTLINETEXTMETRICA;
pub type NPOUTLINETEXTMETRICA = *mut _OUTLINETEXTMETRICA;
pub type LPOUTLINETEXTMETRICA = *mut _OUTLINETEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _OUTLINETEXTMETRICW {
    pub otmSize: UINT,
    pub otmTextMetrics: TEXTMETRICW,
    pub otmFiller: BYTE,
    pub otmPanoseNumber: PANOSE,
    pub otmfsSelection: UINT,
    pub otmfsType: UINT,
    pub otmsCharSlopeRise: ::std::os::raw::c_int,
    pub otmsCharSlopeRun: ::std::os::raw::c_int,
    pub otmItalicAngle: ::std::os::raw::c_int,
    pub otmEMSquare: UINT,
    pub otmAscent: ::std::os::raw::c_int,
    pub otmDescent: ::std::os::raw::c_int,
    pub otmLineGap: UINT,
    pub otmsCapEmHeight: UINT,
    pub otmsXHeight: UINT,
    pub otmrcFontBox: RECT,
    pub otmMacAscent: ::std::os::raw::c_int,
    pub otmMacDescent: ::std::os::raw::c_int,
    pub otmMacLineGap: UINT,
    pub otmusMinimumPPEM: UINT,
    pub otmptSubscriptSize: POINT,
    pub otmptSubscriptOffset: POINT,
    pub otmptSuperscriptSize: POINT,
    pub otmptSuperscriptOffset: POINT,
    pub otmsStrikeoutSize: UINT,
    pub otmsStrikeoutPosition: ::std::os::raw::c_int,
    pub otmsUnderscoreSize: ::std::os::raw::c_int,
    pub otmsUnderscorePosition: ::std::os::raw::c_int,
    pub otmpFamilyName: PSTR,
    pub otmpFaceName: PSTR,
    pub otmpStyleName: PSTR,
    pub otmpFullName: PSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _OUTLINETEXTMETRICW"][::std::mem::size_of::<_OUTLINETEXTMETRICW>() - 232usize];
    ["Alignment of _OUTLINETEXTMETRICW"][::std::mem::align_of::<_OUTLINETEXTMETRICW>() - 8usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmSize) - 0usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmTextMetrics"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmTextMetrics) - 4usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmFiller"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmFiller) - 64usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmPanoseNumber"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmPanoseNumber) - 65usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmfsSelection"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmfsSelection) - 76usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmfsType"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmfsType) - 80usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsCharSlopeRise"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsCharSlopeRise) - 84usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsCharSlopeRun"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsCharSlopeRun) - 88usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmItalicAngle"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmItalicAngle) - 92usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmEMSquare"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmEMSquare) - 96usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmAscent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmAscent) - 100usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmDescent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmDescent) - 104usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmLineGap"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmLineGap) - 108usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsCapEmHeight"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsCapEmHeight) - 112usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsXHeight"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsXHeight) - 116usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmrcFontBox"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmrcFontBox) - 120usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmMacAscent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmMacAscent) - 136usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmMacDescent"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmMacDescent) - 140usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmMacLineGap"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmMacLineGap) - 144usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmusMinimumPPEM"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmusMinimumPPEM) - 148usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmptSubscriptSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmptSubscriptSize) - 152usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmptSubscriptOffset"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmptSubscriptOffset) - 160usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmptSuperscriptSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmptSuperscriptSize) - 168usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmptSuperscriptOffset"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmptSuperscriptOffset) - 176usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsStrikeoutSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsStrikeoutSize) - 184usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsStrikeoutPosition"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsStrikeoutPosition) - 188usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsUnderscoreSize"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsUnderscoreSize) - 192usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmsUnderscorePosition"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmsUnderscorePosition) - 196usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmpFamilyName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmpFamilyName) - 200usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmpFaceName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmpFaceName) - 208usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmpStyleName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmpStyleName) - 216usize];
    ["Offset of field: _OUTLINETEXTMETRICW::otmpFullName"]
        [::std::mem::offset_of!(_OUTLINETEXTMETRICW, otmpFullName) - 224usize];
};
pub type OUTLINETEXTMETRICW = _OUTLINETEXTMETRICW;
pub type POUTLINETEXTMETRICW = *mut _OUTLINETEXTMETRICW;
pub type NPOUTLINETEXTMETRICW = *mut _OUTLINETEXTMETRICW;
pub type LPOUTLINETEXTMETRICW = *mut _OUTLINETEXTMETRICW;
pub type OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;
pub type POUTLINETEXTMETRIC = POUTLINETEXTMETRICA;
pub type NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICA;
pub type LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOLYTEXTA {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub n: UINT,
    pub lpstr: LPCSTR,
    pub uiFlags: UINT,
    pub rcl: RECT,
    pub pdx: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOLYTEXTA"][::std::mem::size_of::<tagPOLYTEXTA>() - 56usize];
    ["Alignment of tagPOLYTEXTA"][::std::mem::align_of::<tagPOLYTEXTA>() - 8usize];
    ["Offset of field: tagPOLYTEXTA::x"][::std::mem::offset_of!(tagPOLYTEXTA, x) - 0usize];
    ["Offset of field: tagPOLYTEXTA::y"][::std::mem::offset_of!(tagPOLYTEXTA, y) - 4usize];
    ["Offset of field: tagPOLYTEXTA::n"][::std::mem::offset_of!(tagPOLYTEXTA, n) - 8usize];
    ["Offset of field: tagPOLYTEXTA::lpstr"][::std::mem::offset_of!(tagPOLYTEXTA, lpstr) - 16usize];
    ["Offset of field: tagPOLYTEXTA::uiFlags"]
        [::std::mem::offset_of!(tagPOLYTEXTA, uiFlags) - 24usize];
    ["Offset of field: tagPOLYTEXTA::rcl"][::std::mem::offset_of!(tagPOLYTEXTA, rcl) - 28usize];
    ["Offset of field: tagPOLYTEXTA::pdx"][::std::mem::offset_of!(tagPOLYTEXTA, pdx) - 48usize];
};
pub type POLYTEXTA = tagPOLYTEXTA;
pub type PPOLYTEXTA = *mut tagPOLYTEXTA;
pub type NPPOLYTEXTA = *mut tagPOLYTEXTA;
pub type LPPOLYTEXTA = *mut tagPOLYTEXTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOLYTEXTW {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub n: UINT,
    pub lpstr: LPCWSTR,
    pub uiFlags: UINT,
    pub rcl: RECT,
    pub pdx: *mut ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOLYTEXTW"][::std::mem::size_of::<tagPOLYTEXTW>() - 56usize];
    ["Alignment of tagPOLYTEXTW"][::std::mem::align_of::<tagPOLYTEXTW>() - 8usize];
    ["Offset of field: tagPOLYTEXTW::x"][::std::mem::offset_of!(tagPOLYTEXTW, x) - 0usize];
    ["Offset of field: tagPOLYTEXTW::y"][::std::mem::offset_of!(tagPOLYTEXTW, y) - 4usize];
    ["Offset of field: tagPOLYTEXTW::n"][::std::mem::offset_of!(tagPOLYTEXTW, n) - 8usize];
    ["Offset of field: tagPOLYTEXTW::lpstr"][::std::mem::offset_of!(tagPOLYTEXTW, lpstr) - 16usize];
    ["Offset of field: tagPOLYTEXTW::uiFlags"]
        [::std::mem::offset_of!(tagPOLYTEXTW, uiFlags) - 24usize];
    ["Offset of field: tagPOLYTEXTW::rcl"][::std::mem::offset_of!(tagPOLYTEXTW, rcl) - 28usize];
    ["Offset of field: tagPOLYTEXTW::pdx"][::std::mem::offset_of!(tagPOLYTEXTW, pdx) - 48usize];
};
pub type POLYTEXTW = tagPOLYTEXTW;
pub type PPOLYTEXTW = *mut tagPOLYTEXTW;
pub type NPPOLYTEXTW = *mut tagPOLYTEXTW;
pub type LPPOLYTEXTW = *mut tagPOLYTEXTW;
pub type POLYTEXT = POLYTEXTA;
pub type PPOLYTEXT = PPOLYTEXTA;
pub type NPPOLYTEXT = NPPOLYTEXTA;
pub type LPPOLYTEXT = LPPOLYTEXTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FIXED {
    pub fract: WORD,
    pub value: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FIXED"][::std::mem::size_of::<_FIXED>() - 4usize];
    ["Alignment of _FIXED"][::std::mem::align_of::<_FIXED>() - 2usize];
    ["Offset of field: _FIXED::fract"][::std::mem::offset_of!(_FIXED, fract) - 0usize];
    ["Offset of field: _FIXED::value"][::std::mem::offset_of!(_FIXED, value) - 2usize];
};
pub type FIXED = _FIXED;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MAT2 {
    pub eM11: FIXED,
    pub eM12: FIXED,
    pub eM21: FIXED,
    pub eM22: FIXED,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MAT2"][::std::mem::size_of::<_MAT2>() - 16usize];
    ["Alignment of _MAT2"][::std::mem::align_of::<_MAT2>() - 2usize];
    ["Offset of field: _MAT2::eM11"][::std::mem::offset_of!(_MAT2, eM11) - 0usize];
    ["Offset of field: _MAT2::eM12"][::std::mem::offset_of!(_MAT2, eM12) - 4usize];
    ["Offset of field: _MAT2::eM21"][::std::mem::offset_of!(_MAT2, eM21) - 8usize];
    ["Offset of field: _MAT2::eM22"][::std::mem::offset_of!(_MAT2, eM22) - 12usize];
};
pub type MAT2 = _MAT2;
pub type LPMAT2 = *mut _MAT2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPHMETRICS {
    pub gmBlackBoxX: UINT,
    pub gmBlackBoxY: UINT,
    pub gmptGlyphOrigin: POINT,
    pub gmCellIncX: ::std::os::raw::c_short,
    pub gmCellIncY: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GLYPHMETRICS"][::std::mem::size_of::<_GLYPHMETRICS>() - 20usize];
    ["Alignment of _GLYPHMETRICS"][::std::mem::align_of::<_GLYPHMETRICS>() - 4usize];
    ["Offset of field: _GLYPHMETRICS::gmBlackBoxX"]
        [::std::mem::offset_of!(_GLYPHMETRICS, gmBlackBoxX) - 0usize];
    ["Offset of field: _GLYPHMETRICS::gmBlackBoxY"]
        [::std::mem::offset_of!(_GLYPHMETRICS, gmBlackBoxY) - 4usize];
    ["Offset of field: _GLYPHMETRICS::gmptGlyphOrigin"]
        [::std::mem::offset_of!(_GLYPHMETRICS, gmptGlyphOrigin) - 8usize];
    ["Offset of field: _GLYPHMETRICS::gmCellIncX"]
        [::std::mem::offset_of!(_GLYPHMETRICS, gmCellIncX) - 16usize];
    ["Offset of field: _GLYPHMETRICS::gmCellIncY"]
        [::std::mem::offset_of!(_GLYPHMETRICS, gmCellIncY) - 18usize];
};
pub type GLYPHMETRICS = _GLYPHMETRICS;
pub type LPGLYPHMETRICS = *mut _GLYPHMETRICS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTFX {
    pub x: FIXED,
    pub y: FIXED,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTFX"][::std::mem::size_of::<tagPOINTFX>() - 8usize];
    ["Alignment of tagPOINTFX"][::std::mem::align_of::<tagPOINTFX>() - 2usize];
    ["Offset of field: tagPOINTFX::x"][::std::mem::offset_of!(tagPOINTFX, x) - 0usize];
    ["Offset of field: tagPOINTFX::y"][::std::mem::offset_of!(tagPOINTFX, y) - 4usize];
};
pub type POINTFX = tagPOINTFX;
pub type LPPOINTFX = *mut tagPOINTFX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTTPOLYCURVE {
    pub wType: WORD,
    pub cpfx: WORD,
    pub apfx: [POINTFX; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTTPOLYCURVE"][::std::mem::size_of::<tagTTPOLYCURVE>() - 12usize];
    ["Alignment of tagTTPOLYCURVE"][::std::mem::align_of::<tagTTPOLYCURVE>() - 2usize];
    ["Offset of field: tagTTPOLYCURVE::wType"]
        [::std::mem::offset_of!(tagTTPOLYCURVE, wType) - 0usize];
    ["Offset of field: tagTTPOLYCURVE::cpfx"]
        [::std::mem::offset_of!(tagTTPOLYCURVE, cpfx) - 2usize];
    ["Offset of field: tagTTPOLYCURVE::apfx"]
        [::std::mem::offset_of!(tagTTPOLYCURVE, apfx) - 4usize];
};
pub type TTPOLYCURVE = tagTTPOLYCURVE;
pub type LPTTPOLYCURVE = *mut tagTTPOLYCURVE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTTPOLYGONHEADER {
    pub cb: DWORD,
    pub dwType: DWORD,
    pub pfxStart: POINTFX,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTTPOLYGONHEADER"][::std::mem::size_of::<tagTTPOLYGONHEADER>() - 16usize];
    ["Alignment of tagTTPOLYGONHEADER"][::std::mem::align_of::<tagTTPOLYGONHEADER>() - 4usize];
    ["Offset of field: tagTTPOLYGONHEADER::cb"]
        [::std::mem::offset_of!(tagTTPOLYGONHEADER, cb) - 0usize];
    ["Offset of field: tagTTPOLYGONHEADER::dwType"]
        [::std::mem::offset_of!(tagTTPOLYGONHEADER, dwType) - 4usize];
    ["Offset of field: tagTTPOLYGONHEADER::pfxStart"]
        [::std::mem::offset_of!(tagTTPOLYGONHEADER, pfxStart) - 8usize];
};
pub type TTPOLYGONHEADER = tagTTPOLYGONHEADER;
pub type LPTTPOLYGONHEADER = *mut tagTTPOLYGONHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGCP_RESULTSA {
    pub lStructSize: DWORD,
    pub lpOutString: LPSTR,
    pub lpOrder: *mut UINT,
    pub lpDx: *mut ::std::os::raw::c_int,
    pub lpCaretPos: *mut ::std::os::raw::c_int,
    pub lpClass: LPSTR,
    pub lpGlyphs: LPWSTR,
    pub nGlyphs: UINT,
    pub nMaxFit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGCP_RESULTSA"][::std::mem::size_of::<tagGCP_RESULTSA>() - 64usize];
    ["Alignment of tagGCP_RESULTSA"][::std::mem::align_of::<tagGCP_RESULTSA>() - 8usize];
    ["Offset of field: tagGCP_RESULTSA::lStructSize"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lStructSize) - 0usize];
    ["Offset of field: tagGCP_RESULTSA::lpOutString"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lpOutString) - 8usize];
    ["Offset of field: tagGCP_RESULTSA::lpOrder"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lpOrder) - 16usize];
    ["Offset of field: tagGCP_RESULTSA::lpDx"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lpDx) - 24usize];
    ["Offset of field: tagGCP_RESULTSA::lpCaretPos"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lpCaretPos) - 32usize];
    ["Offset of field: tagGCP_RESULTSA::lpClass"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lpClass) - 40usize];
    ["Offset of field: tagGCP_RESULTSA::lpGlyphs"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, lpGlyphs) - 48usize];
    ["Offset of field: tagGCP_RESULTSA::nGlyphs"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, nGlyphs) - 56usize];
    ["Offset of field: tagGCP_RESULTSA::nMaxFit"]
        [::std::mem::offset_of!(tagGCP_RESULTSA, nMaxFit) - 60usize];
};
pub type GCP_RESULTSA = tagGCP_RESULTSA;
pub type LPGCP_RESULTSA = *mut tagGCP_RESULTSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGCP_RESULTSW {
    pub lStructSize: DWORD,
    pub lpOutString: LPWSTR,
    pub lpOrder: *mut UINT,
    pub lpDx: *mut ::std::os::raw::c_int,
    pub lpCaretPos: *mut ::std::os::raw::c_int,
    pub lpClass: LPSTR,
    pub lpGlyphs: LPWSTR,
    pub nGlyphs: UINT,
    pub nMaxFit: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGCP_RESULTSW"][::std::mem::size_of::<tagGCP_RESULTSW>() - 64usize];
    ["Alignment of tagGCP_RESULTSW"][::std::mem::align_of::<tagGCP_RESULTSW>() - 8usize];
    ["Offset of field: tagGCP_RESULTSW::lStructSize"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lStructSize) - 0usize];
    ["Offset of field: tagGCP_RESULTSW::lpOutString"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lpOutString) - 8usize];
    ["Offset of field: tagGCP_RESULTSW::lpOrder"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lpOrder) - 16usize];
    ["Offset of field: tagGCP_RESULTSW::lpDx"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lpDx) - 24usize];
    ["Offset of field: tagGCP_RESULTSW::lpCaretPos"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lpCaretPos) - 32usize];
    ["Offset of field: tagGCP_RESULTSW::lpClass"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lpClass) - 40usize];
    ["Offset of field: tagGCP_RESULTSW::lpGlyphs"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, lpGlyphs) - 48usize];
    ["Offset of field: tagGCP_RESULTSW::nGlyphs"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, nGlyphs) - 56usize];
    ["Offset of field: tagGCP_RESULTSW::nMaxFit"]
        [::std::mem::offset_of!(tagGCP_RESULTSW, nMaxFit) - 60usize];
};
pub type GCP_RESULTSW = tagGCP_RESULTSW;
pub type LPGCP_RESULTSW = *mut tagGCP_RESULTSW;
pub type GCP_RESULTS = GCP_RESULTSA;
pub type LPGCP_RESULTS = LPGCP_RESULTSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RASTERIZER_STATUS {
    pub nSize: ::std::os::raw::c_short,
    pub wFlags: ::std::os::raw::c_short,
    pub nLanguageID: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RASTERIZER_STATUS"][::std::mem::size_of::<_RASTERIZER_STATUS>() - 6usize];
    ["Alignment of _RASTERIZER_STATUS"][::std::mem::align_of::<_RASTERIZER_STATUS>() - 2usize];
    ["Offset of field: _RASTERIZER_STATUS::nSize"]
        [::std::mem::offset_of!(_RASTERIZER_STATUS, nSize) - 0usize];
    ["Offset of field: _RASTERIZER_STATUS::wFlags"]
        [::std::mem::offset_of!(_RASTERIZER_STATUS, wFlags) - 2usize];
    ["Offset of field: _RASTERIZER_STATUS::nLanguageID"]
        [::std::mem::offset_of!(_RASTERIZER_STATUS, nLanguageID) - 4usize];
};
pub type RASTERIZER_STATUS = _RASTERIZER_STATUS;
pub type LPRASTERIZER_STATUS = *mut _RASTERIZER_STATUS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPIXELFORMATDESCRIPTOR {
    pub nSize: WORD,
    pub nVersion: WORD,
    pub dwFlags: DWORD,
    pub iPixelType: BYTE,
    pub cColorBits: BYTE,
    pub cRedBits: BYTE,
    pub cRedShift: BYTE,
    pub cGreenBits: BYTE,
    pub cGreenShift: BYTE,
    pub cBlueBits: BYTE,
    pub cBlueShift: BYTE,
    pub cAlphaBits: BYTE,
    pub cAlphaShift: BYTE,
    pub cAccumBits: BYTE,
    pub cAccumRedBits: BYTE,
    pub cAccumGreenBits: BYTE,
    pub cAccumBlueBits: BYTE,
    pub cAccumAlphaBits: BYTE,
    pub cDepthBits: BYTE,
    pub cStencilBits: BYTE,
    pub cAuxBuffers: BYTE,
    pub iLayerType: BYTE,
    pub bReserved: BYTE,
    pub dwLayerMask: DWORD,
    pub dwVisibleMask: DWORD,
    pub dwDamageMask: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPIXELFORMATDESCRIPTOR"]
        [::std::mem::size_of::<tagPIXELFORMATDESCRIPTOR>() - 40usize];
    ["Alignment of tagPIXELFORMATDESCRIPTOR"]
        [::std::mem::align_of::<tagPIXELFORMATDESCRIPTOR>() - 4usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::nSize"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, nSize) - 0usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::nVersion"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, nVersion) - 2usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::dwFlags"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, dwFlags) - 4usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::iPixelType"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, iPixelType) - 8usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cColorBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cColorBits) - 9usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cRedBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cRedBits) - 10usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cRedShift"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cRedShift) - 11usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cGreenBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cGreenBits) - 12usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cGreenShift"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cGreenShift) - 13usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cBlueBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cBlueBits) - 14usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cBlueShift"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cBlueShift) - 15usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAlphaBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAlphaBits) - 16usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAlphaShift"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAlphaShift) - 17usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAccumBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAccumBits) - 18usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAccumRedBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAccumRedBits) - 19usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAccumGreenBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAccumGreenBits) - 20usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAccumBlueBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAccumBlueBits) - 21usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAccumAlphaBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAccumAlphaBits) - 22usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cDepthBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cDepthBits) - 23usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cStencilBits"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cStencilBits) - 24usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::cAuxBuffers"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, cAuxBuffers) - 25usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::iLayerType"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, iLayerType) - 26usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::bReserved"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, bReserved) - 27usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::dwLayerMask"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, dwLayerMask) - 28usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::dwVisibleMask"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, dwVisibleMask) - 32usize];
    ["Offset of field: tagPIXELFORMATDESCRIPTOR::dwDamageMask"]
        [::std::mem::offset_of!(tagPIXELFORMATDESCRIPTOR, dwDamageMask) - 36usize];
};
pub type PIXELFORMATDESCRIPTOR = tagPIXELFORMATDESCRIPTOR;
pub type PPIXELFORMATDESCRIPTOR = *mut tagPIXELFORMATDESCRIPTOR;
pub type LPPIXELFORMATDESCRIPTOR = *mut tagPIXELFORMATDESCRIPTOR;
pub type OLDFONTENUMPROCA = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const LOGFONTA,
        arg2: *const TEXTMETRICA,
        arg3: DWORD,
        arg4: LPARAM,
    ) -> ::std::os::raw::c_int,
>;
pub type OLDFONTENUMPROCW = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const LOGFONTW,
        arg2: *const TEXTMETRICW,
        arg3: DWORD,
        arg4: LPARAM,
    ) -> ::std::os::raw::c_int,
>;
pub type FONTENUMPROCA = OLDFONTENUMPROCA;
pub type FONTENUMPROCW = OLDFONTENUMPROCW;
pub type FONTENUMPROC = FONTENUMPROCA;
pub type GOBJENUMPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: LPVOID, arg2: LPARAM) -> ::std::os::raw::c_int,
>;
pub type LINEDDAPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int, arg3: LPARAM),
>;
unsafe extern "C" {
    pub fn AddFontResourceA(arg1: LPCSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AddFontResourceW(arg1: LPCWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AnimatePalette(
        hPal: HPALETTE,
        iStartIndex: UINT,
        cEntries: UINT,
        ppe: *const PALETTEENTRY,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn Arc(
        hdc: HDC,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        x3: ::std::os::raw::c_int,
        y3: ::std::os::raw::c_int,
        x4: ::std::os::raw::c_int,
        y4: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BitBlt(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        hdcSrc: HDC,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        rop: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CancelDC(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn Chord(
        hdc: HDC,
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        x3: ::std::os::raw::c_int,
        y3: ::std::os::raw::c_int,
        x4: ::std::os::raw::c_int,
        y4: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ChoosePixelFormat(hdc: HDC, ppfd: *const PIXELFORMATDESCRIPTOR)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CloseMetaFile(hdc: HDC) -> HMETAFILE;
}
unsafe extern "C" {
    pub fn CombineRgn(
        hrgnDst: HRGN,
        hrgnSrc1: HRGN,
        hrgnSrc2: HRGN,
        iMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CopyMetaFileA(arg1: HMETAFILE, arg2: LPCSTR) -> HMETAFILE;
}
unsafe extern "C" {
    pub fn CopyMetaFileW(arg1: HMETAFILE, arg2: LPCWSTR) -> HMETAFILE;
}
unsafe extern "C" {
    pub fn CreateBitmap(
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        nPlanes: UINT,
        nBitCount: UINT,
        lpBits: *const ::std::os::raw::c_void,
    ) -> HBITMAP;
}
unsafe extern "C" {
    pub fn CreateBitmapIndirect(pbm: *const BITMAP) -> HBITMAP;
}
unsafe extern "C" {
    pub fn CreateBrushIndirect(plbrush: *const LOGBRUSH) -> HBRUSH;
}
unsafe extern "C" {
    pub fn CreateCompatibleBitmap(
        hdc: HDC,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
    ) -> HBITMAP;
}
unsafe extern "C" {
    pub fn CreateDiscardableBitmap(
        hdc: HDC,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
    ) -> HBITMAP;
}
unsafe extern "C" {
    pub fn CreateCompatibleDC(hdc: HDC) -> HDC;
}
unsafe extern "C" {
    pub fn CreateDCA(
        pwszDriver: LPCSTR,
        pwszDevice: LPCSTR,
        pszPort: LPCSTR,
        pdm: *const DEVMODEA,
    ) -> HDC;
}
unsafe extern "C" {
    pub fn CreateDCW(
        pwszDriver: LPCWSTR,
        pwszDevice: LPCWSTR,
        pszPort: LPCWSTR,
        pdm: *const DEVMODEW,
    ) -> HDC;
}
unsafe extern "C" {
    pub fn CreateDIBitmap(
        hdc: HDC,
        pbmih: *const BITMAPINFOHEADER,
        flInit: DWORD,
        pjBits: *const ::std::os::raw::c_void,
        pbmi: *const BITMAPINFO,
        iUsage: UINT,
    ) -> HBITMAP;
}
unsafe extern "C" {
    pub fn CreateDIBPatternBrush(h: HGLOBAL, iUsage: UINT) -> HBRUSH;
}
unsafe extern "C" {
    pub fn CreateDIBPatternBrushPt(
        lpPackedDIB: *const ::std::os::raw::c_void,
        iUsage: UINT,
    ) -> HBRUSH;
}
unsafe extern "C" {
    pub fn CreateEllipticRgn(
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    ) -> HRGN;
}
unsafe extern "C" {
    pub fn CreateEllipticRgnIndirect(lprect: *const RECT) -> HRGN;
}
unsafe extern "C" {
    pub fn CreateFontIndirectA(lplf: *const LOGFONTA) -> HFONT;
}
unsafe extern "C" {
    pub fn CreateFontIndirectW(lplf: *const LOGFONTW) -> HFONT;
}
unsafe extern "C" {
    pub fn CreateFontA(
        cHeight: ::std::os::raw::c_int,
        cWidth: ::std::os::raw::c_int,
        cEscapement: ::std::os::raw::c_int,
        cOrientation: ::std::os::raw::c_int,
        cWeight: ::std::os::raw::c_int,
        bItalic: DWORD,
        bUnderline: DWORD,
        bStrikeOut: DWORD,
        iCharSet: DWORD,
        iOutPrecision: DWORD,
        iClipPrecision: DWORD,
        iQuality: DWORD,
        iPitchAndFamily: DWORD,
        pszFaceName: LPCSTR,
    ) -> HFONT;
}
unsafe extern "C" {
    pub fn CreateFontW(
        cHeight: ::std::os::raw::c_int,
        cWidth: ::std::os::raw::c_int,
        cEscapement: ::std::os::raw::c_int,
        cOrientation: ::std::os::raw::c_int,
        cWeight: ::std::os::raw::c_int,
        bItalic: DWORD,
        bUnderline: DWORD,
        bStrikeOut: DWORD,
        iCharSet: DWORD,
        iOutPrecision: DWORD,
        iClipPrecision: DWORD,
        iQuality: DWORD,
        iPitchAndFamily: DWORD,
        pszFaceName: LPCWSTR,
    ) -> HFONT;
}
unsafe extern "C" {
    pub fn CreateHatchBrush(iHatch: ::std::os::raw::c_int, color: COLORREF) -> HBRUSH;
}
unsafe extern "C" {
    pub fn CreateICA(
        pszDriver: LPCSTR,
        pszDevice: LPCSTR,
        pszPort: LPCSTR,
        pdm: *const DEVMODEA,
    ) -> HDC;
}
unsafe extern "C" {
    pub fn CreateICW(
        pszDriver: LPCWSTR,
        pszDevice: LPCWSTR,
        pszPort: LPCWSTR,
        pdm: *const DEVMODEW,
    ) -> HDC;
}
unsafe extern "C" {
    pub fn CreateMetaFileA(pszFile: LPCSTR) -> HDC;
}
unsafe extern "C" {
    pub fn CreateMetaFileW(pszFile: LPCWSTR) -> HDC;
}
unsafe extern "C" {
    pub fn CreatePalette(plpal: *const LOGPALETTE) -> HPALETTE;
}
unsafe extern "C" {
    pub fn CreatePen(
        iStyle: ::std::os::raw::c_int,
        cWidth: ::std::os::raw::c_int,
        color: COLORREF,
    ) -> HPEN;
}
unsafe extern "C" {
    pub fn CreatePenIndirect(plpen: *const LOGPEN) -> HPEN;
}
unsafe extern "C" {
    pub fn CreatePolyPolygonRgn(
        pptl: *const POINT,
        pc: *const INT,
        cPoly: ::std::os::raw::c_int,
        iMode: ::std::os::raw::c_int,
    ) -> HRGN;
}
unsafe extern "C" {
    pub fn CreatePatternBrush(hbm: HBITMAP) -> HBRUSH;
}
unsafe extern "C" {
    pub fn CreateRectRgn(
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
    ) -> HRGN;
}
unsafe extern "C" {
    pub fn CreateRectRgnIndirect(lprect: *const RECT) -> HRGN;
}
unsafe extern "C" {
    pub fn CreateRoundRectRgn(
        x1: ::std::os::raw::c_int,
        y1: ::std::os::raw::c_int,
        x2: ::std::os::raw::c_int,
        y2: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> HRGN;
}
unsafe extern "C" {
    pub fn CreateScalableFontResourceA(
        fdwHidden: DWORD,
        lpszFont: LPCSTR,
        lpszFile: LPCSTR,
        lpszPath: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateScalableFontResourceW(
        fdwHidden: DWORD,
        lpszFont: LPCWSTR,
        lpszFile: LPCWSTR,
        lpszPath: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateSolidBrush(color: COLORREF) -> HBRUSH;
}
unsafe extern "C" {
    pub fn DeleteDC(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteMetaFile(hmf: HMETAFILE) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteObject(ho: HGDIOBJ) -> BOOL;
}
unsafe extern "C" {
    pub fn DescribePixelFormat(
        hdc: HDC,
        iPixelFormat: ::std::os::raw::c_int,
        nBytes: UINT,
        ppfd: LPPIXELFORMATDESCRIPTOR,
    ) -> ::std::os::raw::c_int;
}
pub type LPFNDEVMODE = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: HWND,
        arg2: HMODULE,
        arg3: LPDEVMODE,
        arg4: LPSTR,
        arg5: LPSTR,
        arg6: LPDEVMODE,
        arg7: LPSTR,
        arg8: UINT,
    ) -> UINT,
>;
pub type LPFNDEVCAPS = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: LPSTR,
        arg2: LPSTR,
        arg3: UINT,
        arg4: LPSTR,
        arg5: LPDEVMODE,
    ) -> DWORD,
>;
unsafe extern "C" {
    pub fn DeviceCapabilitiesA(
        pDevice: LPCSTR,
        pPort: LPCSTR,
        fwCapability: WORD,
        pOutput: LPSTR,
        pDevMode: *const DEVMODEA,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DeviceCapabilitiesW(
        pDevice: LPCWSTR,
        pPort: LPCWSTR,
        fwCapability: WORD,
        pOutput: LPWSTR,
        pDevMode: *const DEVMODEW,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DrawEscape(
        hdc: HDC,
        iEscape: ::std::os::raw::c_int,
        cjIn: ::std::os::raw::c_int,
        lpIn: LPCSTR,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Ellipse(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumFontFamiliesExA(
        hdc: HDC,
        lpLogfont: LPLOGFONTA,
        lpProc: FONTENUMPROCA,
        lParam: LPARAM,
        dwFlags: DWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumFontFamiliesExW(
        hdc: HDC,
        lpLogfont: LPLOGFONTW,
        lpProc: FONTENUMPROCW,
        lParam: LPARAM,
        dwFlags: DWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumFontFamiliesA(
        hdc: HDC,
        lpLogfont: LPCSTR,
        lpProc: FONTENUMPROCA,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumFontFamiliesW(
        hdc: HDC,
        lpLogfont: LPCWSTR,
        lpProc: FONTENUMPROCW,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumFontsA(
        hdc: HDC,
        lpLogfont: LPCSTR,
        lpProc: FONTENUMPROCA,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumFontsW(
        hdc: HDC,
        lpLogfont: LPCWSTR,
        lpProc: FONTENUMPROCW,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumObjects(
        hdc: HDC,
        nType: ::std::os::raw::c_int,
        lpFunc: GOBJENUMPROC,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EqualRgn(hrgn1: HRGN, hrgn2: HRGN) -> BOOL;
}
unsafe extern "C" {
    pub fn Escape(
        hdc: HDC,
        iEscape: ::std::os::raw::c_int,
        cjIn: ::std::os::raw::c_int,
        pvIn: LPCSTR,
        pvOut: LPVOID,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtEscape(
        hdc: HDC,
        iEscape: ::std::os::raw::c_int,
        cjInput: ::std::os::raw::c_int,
        lpInData: LPCSTR,
        cjOutput: ::std::os::raw::c_int,
        lpOutData: LPSTR,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExcludeClipRect(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtCreateRegion(lpx: *const XFORM, nCount: DWORD, lpData: *const RGNDATA) -> HRGN;
}
unsafe extern "C" {
    pub fn ExtFloodFill(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: COLORREF,
        type_: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FillRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH) -> BOOL;
}
unsafe extern "C" {
    pub fn FloodFill(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: COLORREF,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FrameRgn(
        hdc: HDC,
        hrgn: HRGN,
        hbr: HBRUSH,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetROP2(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetAspectRatioFilterEx(hdc: HDC, lpsize: LPSIZE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetBkColor(hdc: HDC) -> COLORREF;
}
unsafe extern "C" {
    pub fn GetDCBrushColor(hdc: HDC) -> COLORREF;
}
unsafe extern "C" {
    pub fn GetDCPenColor(hdc: HDC) -> COLORREF;
}
unsafe extern "C" {
    pub fn GetBkMode(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetBitmapBits(hbit: HBITMAP, cb: LONG, lpvBits: LPVOID) -> LONG;
}
unsafe extern "C" {
    pub fn GetBitmapDimensionEx(hbit: HBITMAP, lpsize: LPSIZE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetBoundsRect(hdc: HDC, lprect: LPRECT, flags: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetBrushOrgEx(hdc: HDC, lppt: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidthA(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidthW(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidth32A(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidth32W(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidthFloatA(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidthFloatW(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharABCWidthsA(hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharABCWidthsW(hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharABCWidthsFloatA(hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharABCWidthsFloatW(hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetClipBox(hdc: HDC, lprect: LPRECT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetClipRgn(hdc: HDC, hrgn: HRGN) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetMetaRgn(hdc: HDC, hrgn: HRGN) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetCurrentObject(hdc: HDC, type_: UINT) -> HGDIOBJ;
}
unsafe extern "C" {
    pub fn GetCurrentPositionEx(hdc: HDC, lppt: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDeviceCaps(hdc: HDC, index: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetDIBits(
        hdc: HDC,
        hbm: HBITMAP,
        start: UINT,
        cLines: UINT,
        lpvBits: LPVOID,
        lpbmi: LPBITMAPINFO,
        usage: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetFontData(
        hdc: HDC,
        dwTable: DWORD,
        dwOffset: DWORD,
        pvBuffer: PVOID,
        cjBuffer: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetGlyphOutlineA(
        hdc: HDC,
        uChar: UINT,
        fuFormat: UINT,
        lpgm: LPGLYPHMETRICS,
        cjBuffer: DWORD,
        pvBuffer: LPVOID,
        lpmat2: *const MAT2,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetGlyphOutlineW(
        hdc: HDC,
        uChar: UINT,
        fuFormat: UINT,
        lpgm: LPGLYPHMETRICS,
        cjBuffer: DWORD,
        pvBuffer: LPVOID,
        lpmat2: *const MAT2,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetGraphicsMode(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetMapMode(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetMetaFileBitsEx(hMF: HMETAFILE, cbBuffer: UINT, lpData: LPVOID) -> UINT;
}
unsafe extern "C" {
    pub fn GetMetaFileA(lpName: LPCSTR) -> HMETAFILE;
}
unsafe extern "C" {
    pub fn GetMetaFileW(lpName: LPCWSTR) -> HMETAFILE;
}
unsafe extern "C" {
    pub fn GetNearestColor(hdc: HDC, color: COLORREF) -> COLORREF;
}
unsafe extern "C" {
    pub fn GetNearestPaletteIndex(h: HPALETTE, color: COLORREF) -> UINT;
}
unsafe extern "C" {
    pub fn GetObjectType(h: HGDIOBJ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetOutlineTextMetricsA(hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICA) -> UINT;
}
unsafe extern "C" {
    pub fn GetOutlineTextMetricsW(hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICW) -> UINT;
}
unsafe extern "C" {
    pub fn GetPaletteEntries(
        hpal: HPALETTE,
        iStart: UINT,
        cEntries: UINT,
        pPalEntries: LPPALETTEENTRY,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetPixel(hdc: HDC, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> COLORREF;
}
unsafe extern "C" {
    pub fn GetPixelFormat(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetPolyFillMode(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetRasterizerCaps(lpraststat: LPRASTERIZER_STATUS, cjBytes: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetRandomRgn(hdc: HDC, hrgn: HRGN, i: INT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetRegionData(hrgn: HRGN, nCount: DWORD, lpRgnData: LPRGNDATA) -> DWORD;
}
unsafe extern "C" {
    pub fn GetRgnBox(hrgn: HRGN, lprc: LPRECT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetStockObject(i: ::std::os::raw::c_int) -> HGDIOBJ;
}
unsafe extern "C" {
    pub fn GetStretchBltMode(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetSystemPaletteEntries(
        hdc: HDC,
        iStart: UINT,
        cEntries: UINT,
        pPalEntries: LPPALETTEENTRY,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemPaletteUse(hdc: HDC) -> UINT;
}
unsafe extern "C" {
    pub fn GetTextCharacterExtra(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTextAlign(hdc: HDC) -> UINT;
}
unsafe extern "C" {
    pub fn GetTextColor(hdc: HDC) -> COLORREF;
}
unsafe extern "C" {
    pub fn GetTextExtentPointA(
        hdc: HDC,
        lpString: LPCSTR,
        c: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextExtentPointW(
        hdc: HDC,
        lpString: LPCWSTR,
        c: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextExtentPoint32A(
        hdc: HDC,
        lpString: LPCSTR,
        c: ::std::os::raw::c_int,
        psizl: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextExtentPoint32W(
        hdc: HDC,
        lpString: LPCWSTR,
        c: ::std::os::raw::c_int,
        psizl: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextExtentExPointA(
        hdc: HDC,
        lpszString: LPCSTR,
        cchString: ::std::os::raw::c_int,
        nMaxExtent: ::std::os::raw::c_int,
        lpnFit: LPINT,
        lpnDx: LPINT,
        lpSize: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextExtentExPointW(
        hdc: HDC,
        lpszString: LPCWSTR,
        cchString: ::std::os::raw::c_int,
        nMaxExtent: ::std::os::raw::c_int,
        lpnFit: LPINT,
        lpnDx: LPINT,
        lpSize: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextCharset(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTextCharsetInfo(
        hdc: HDC,
        lpSig: LPFONTSIGNATURE,
        dwFlags: DWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TranslateCharsetInfo(lpSrc: *mut DWORD, lpCs: LPCHARSETINFO, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFontLanguageInfo(hdc: HDC) -> DWORD;
}
unsafe extern "C" {
    pub fn GetCharacterPlacementA(
        hdc: HDC,
        lpString: LPCSTR,
        nCount: ::std::os::raw::c_int,
        nMexExtent: ::std::os::raw::c_int,
        lpResults: LPGCP_RESULTSA,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetCharacterPlacementW(
        hdc: HDC,
        lpString: LPCWSTR,
        nCount: ::std::os::raw::c_int,
        nMexExtent: ::std::os::raw::c_int,
        lpResults: LPGCP_RESULTSW,
        dwFlags: DWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWCRANGE {
    pub wcLow: WCHAR,
    pub cGlyphs: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWCRANGE"][::std::mem::size_of::<tagWCRANGE>() - 4usize];
    ["Alignment of tagWCRANGE"][::std::mem::align_of::<tagWCRANGE>() - 2usize];
    ["Offset of field: tagWCRANGE::wcLow"][::std::mem::offset_of!(tagWCRANGE, wcLow) - 0usize];
    ["Offset of field: tagWCRANGE::cGlyphs"][::std::mem::offset_of!(tagWCRANGE, cGlyphs) - 2usize];
};
pub type WCRANGE = tagWCRANGE;
pub type PWCRANGE = *mut tagWCRANGE;
pub type LPWCRANGE = *mut tagWCRANGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGLYPHSET {
    pub cbThis: DWORD,
    pub flAccel: DWORD,
    pub cGlyphsSupported: DWORD,
    pub cRanges: DWORD,
    pub ranges: [WCRANGE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGLYPHSET"][::std::mem::size_of::<tagGLYPHSET>() - 20usize];
    ["Alignment of tagGLYPHSET"][::std::mem::align_of::<tagGLYPHSET>() - 4usize];
    ["Offset of field: tagGLYPHSET::cbThis"][::std::mem::offset_of!(tagGLYPHSET, cbThis) - 0usize];
    ["Offset of field: tagGLYPHSET::flAccel"]
        [::std::mem::offset_of!(tagGLYPHSET, flAccel) - 4usize];
    ["Offset of field: tagGLYPHSET::cGlyphsSupported"]
        [::std::mem::offset_of!(tagGLYPHSET, cGlyphsSupported) - 8usize];
    ["Offset of field: tagGLYPHSET::cRanges"]
        [::std::mem::offset_of!(tagGLYPHSET, cRanges) - 12usize];
    ["Offset of field: tagGLYPHSET::ranges"][::std::mem::offset_of!(tagGLYPHSET, ranges) - 16usize];
};
pub type GLYPHSET = tagGLYPHSET;
pub type PGLYPHSET = *mut tagGLYPHSET;
pub type LPGLYPHSET = *mut tagGLYPHSET;
unsafe extern "C" {
    pub fn GetFontUnicodeRanges(hdc: HDC, lpgs: LPGLYPHSET) -> DWORD;
}
unsafe extern "C" {
    pub fn GetGlyphIndicesA(
        hdc: HDC,
        lpstr: LPCSTR,
        c: ::std::os::raw::c_int,
        pgi: LPWORD,
        fl: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetGlyphIndicesW(
        hdc: HDC,
        lpstr: LPCWSTR,
        c: ::std::os::raw::c_int,
        pgi: LPWORD,
        fl: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTextExtentPointI(
        hdc: HDC,
        pgiIn: LPWORD,
        cgi: ::std::os::raw::c_int,
        psize: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextExtentExPointI(
        hdc: HDC,
        lpwszString: LPWORD,
        cwchString: ::std::os::raw::c_int,
        nMaxExtent: ::std::os::raw::c_int,
        lpnFit: LPINT,
        lpnDx: LPINT,
        lpSize: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharWidthI(hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, piWidths: LPINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCharABCWidthsI(hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, pabc: LPABC) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDESIGNVECTOR {
    pub dvReserved: DWORD,
    pub dvNumAxes: DWORD,
    pub dvValues: [LONG; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDESIGNVECTOR"][::std::mem::size_of::<tagDESIGNVECTOR>() - 72usize];
    ["Alignment of tagDESIGNVECTOR"][::std::mem::align_of::<tagDESIGNVECTOR>() - 4usize];
    ["Offset of field: tagDESIGNVECTOR::dvReserved"]
        [::std::mem::offset_of!(tagDESIGNVECTOR, dvReserved) - 0usize];
    ["Offset of field: tagDESIGNVECTOR::dvNumAxes"]
        [::std::mem::offset_of!(tagDESIGNVECTOR, dvNumAxes) - 4usize];
    ["Offset of field: tagDESIGNVECTOR::dvValues"]
        [::std::mem::offset_of!(tagDESIGNVECTOR, dvValues) - 8usize];
};
pub type DESIGNVECTOR = tagDESIGNVECTOR;
pub type PDESIGNVECTOR = *mut tagDESIGNVECTOR;
pub type LPDESIGNVECTOR = *mut tagDESIGNVECTOR;
unsafe extern "C" {
    pub fn AddFontResourceExA(name: LPCSTR, fl: DWORD, res: PVOID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AddFontResourceExW(name: LPCWSTR, fl: DWORD, res: PVOID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RemoveFontResourceExA(name: LPCSTR, fl: DWORD, pdv: PVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveFontResourceExW(name: LPCWSTR, fl: DWORD, pdv: PVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn AddFontMemResourceEx(
        pFileView: PVOID,
        cjSize: DWORD,
        pvResrved: PVOID,
        pNumFonts: *mut DWORD,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn RemoveFontMemResourceEx(h: HANDLE) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagAXISINFOA {
    pub axMinValue: LONG,
    pub axMaxValue: LONG,
    pub axAxisName: [BYTE; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagAXISINFOA"][::std::mem::size_of::<tagAXISINFOA>() - 24usize];
    ["Alignment of tagAXISINFOA"][::std::mem::align_of::<tagAXISINFOA>() - 4usize];
    ["Offset of field: tagAXISINFOA::axMinValue"]
        [::std::mem::offset_of!(tagAXISINFOA, axMinValue) - 0usize];
    ["Offset of field: tagAXISINFOA::axMaxValue"]
        [::std::mem::offset_of!(tagAXISINFOA, axMaxValue) - 4usize];
    ["Offset of field: tagAXISINFOA::axAxisName"]
        [::std::mem::offset_of!(tagAXISINFOA, axAxisName) - 8usize];
};
pub type AXISINFOA = tagAXISINFOA;
pub type PAXISINFOA = *mut tagAXISINFOA;
pub type LPAXISINFOA = *mut tagAXISINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagAXISINFOW {
    pub axMinValue: LONG,
    pub axMaxValue: LONG,
    pub axAxisName: [WCHAR; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagAXISINFOW"][::std::mem::size_of::<tagAXISINFOW>() - 40usize];
    ["Alignment of tagAXISINFOW"][::std::mem::align_of::<tagAXISINFOW>() - 4usize];
    ["Offset of field: tagAXISINFOW::axMinValue"]
        [::std::mem::offset_of!(tagAXISINFOW, axMinValue) - 0usize];
    ["Offset of field: tagAXISINFOW::axMaxValue"]
        [::std::mem::offset_of!(tagAXISINFOW, axMaxValue) - 4usize];
    ["Offset of field: tagAXISINFOW::axAxisName"]
        [::std::mem::offset_of!(tagAXISINFOW, axAxisName) - 8usize];
};
pub type AXISINFOW = tagAXISINFOW;
pub type PAXISINFOW = *mut tagAXISINFOW;
pub type LPAXISINFOW = *mut tagAXISINFOW;
pub type AXISINFO = AXISINFOA;
pub type PAXISINFO = PAXISINFOA;
pub type LPAXISINFO = LPAXISINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagAXESLISTA {
    pub axlReserved: DWORD,
    pub axlNumAxes: DWORD,
    pub axlAxisInfo: [AXISINFOA; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagAXESLISTA"][::std::mem::size_of::<tagAXESLISTA>() - 392usize];
    ["Alignment of tagAXESLISTA"][::std::mem::align_of::<tagAXESLISTA>() - 4usize];
    ["Offset of field: tagAXESLISTA::axlReserved"]
        [::std::mem::offset_of!(tagAXESLISTA, axlReserved) - 0usize];
    ["Offset of field: tagAXESLISTA::axlNumAxes"]
        [::std::mem::offset_of!(tagAXESLISTA, axlNumAxes) - 4usize];
    ["Offset of field: tagAXESLISTA::axlAxisInfo"]
        [::std::mem::offset_of!(tagAXESLISTA, axlAxisInfo) - 8usize];
};
pub type AXESLISTA = tagAXESLISTA;
pub type PAXESLISTA = *mut tagAXESLISTA;
pub type LPAXESLISTA = *mut tagAXESLISTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagAXESLISTW {
    pub axlReserved: DWORD,
    pub axlNumAxes: DWORD,
    pub axlAxisInfo: [AXISINFOW; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagAXESLISTW"][::std::mem::size_of::<tagAXESLISTW>() - 648usize];
    ["Alignment of tagAXESLISTW"][::std::mem::align_of::<tagAXESLISTW>() - 4usize];
    ["Offset of field: tagAXESLISTW::axlReserved"]
        [::std::mem::offset_of!(tagAXESLISTW, axlReserved) - 0usize];
    ["Offset of field: tagAXESLISTW::axlNumAxes"]
        [::std::mem::offset_of!(tagAXESLISTW, axlNumAxes) - 4usize];
    ["Offset of field: tagAXESLISTW::axlAxisInfo"]
        [::std::mem::offset_of!(tagAXESLISTW, axlAxisInfo) - 8usize];
};
pub type AXESLISTW = tagAXESLISTW;
pub type PAXESLISTW = *mut tagAXESLISTW;
pub type LPAXESLISTW = *mut tagAXESLISTW;
pub type AXESLIST = AXESLISTA;
pub type PAXESLIST = PAXESLISTA;
pub type LPAXESLIST = LPAXESLISTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMLOGFONTEXDVA {
    pub elfEnumLogfontEx: ENUMLOGFONTEXA,
    pub elfDesignVector: DESIGNVECTOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMLOGFONTEXDVA"][::std::mem::size_of::<tagENUMLOGFONTEXDVA>() - 260usize];
    ["Alignment of tagENUMLOGFONTEXDVA"][::std::mem::align_of::<tagENUMLOGFONTEXDVA>() - 4usize];
    ["Offset of field: tagENUMLOGFONTEXDVA::elfEnumLogfontEx"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXDVA, elfEnumLogfontEx) - 0usize];
    ["Offset of field: tagENUMLOGFONTEXDVA::elfDesignVector"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXDVA, elfDesignVector) - 188usize];
};
pub type ENUMLOGFONTEXDVA = tagENUMLOGFONTEXDVA;
pub type PENUMLOGFONTEXDVA = *mut tagENUMLOGFONTEXDVA;
pub type LPENUMLOGFONTEXDVA = *mut tagENUMLOGFONTEXDVA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMLOGFONTEXDVW {
    pub elfEnumLogfontEx: ENUMLOGFONTEXW,
    pub elfDesignVector: DESIGNVECTOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMLOGFONTEXDVW"][::std::mem::size_of::<tagENUMLOGFONTEXDVW>() - 420usize];
    ["Alignment of tagENUMLOGFONTEXDVW"][::std::mem::align_of::<tagENUMLOGFONTEXDVW>() - 4usize];
    ["Offset of field: tagENUMLOGFONTEXDVW::elfEnumLogfontEx"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXDVW, elfEnumLogfontEx) - 0usize];
    ["Offset of field: tagENUMLOGFONTEXDVW::elfDesignVector"]
        [::std::mem::offset_of!(tagENUMLOGFONTEXDVW, elfDesignVector) - 348usize];
};
pub type ENUMLOGFONTEXDVW = tagENUMLOGFONTEXDVW;
pub type PENUMLOGFONTEXDVW = *mut tagENUMLOGFONTEXDVW;
pub type LPENUMLOGFONTEXDVW = *mut tagENUMLOGFONTEXDVW;
pub type ENUMLOGFONTEXDV = ENUMLOGFONTEXDVA;
pub type PENUMLOGFONTEXDV = PENUMLOGFONTEXDVA;
pub type LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVA;
unsafe extern "C" {
    pub fn CreateFontIndirectExA(arg1: *const ENUMLOGFONTEXDVA) -> HFONT;
}
unsafe extern "C" {
    pub fn CreateFontIndirectExW(arg1: *const ENUMLOGFONTEXDVW) -> HFONT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMTEXTMETRICA {
    pub etmNewTextMetricEx: NEWTEXTMETRICEXA,
    pub etmAxesList: AXESLISTA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMTEXTMETRICA"][::std::mem::size_of::<tagENUMTEXTMETRICA>() - 488usize];
    ["Alignment of tagENUMTEXTMETRICA"][::std::mem::align_of::<tagENUMTEXTMETRICA>() - 4usize];
    ["Offset of field: tagENUMTEXTMETRICA::etmNewTextMetricEx"]
        [::std::mem::offset_of!(tagENUMTEXTMETRICA, etmNewTextMetricEx) - 0usize];
    ["Offset of field: tagENUMTEXTMETRICA::etmAxesList"]
        [::std::mem::offset_of!(tagENUMTEXTMETRICA, etmAxesList) - 96usize];
};
pub type ENUMTEXTMETRICA = tagENUMTEXTMETRICA;
pub type PENUMTEXTMETRICA = *mut tagENUMTEXTMETRICA;
pub type LPENUMTEXTMETRICA = *mut tagENUMTEXTMETRICA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagENUMTEXTMETRICW {
    pub etmNewTextMetricEx: NEWTEXTMETRICEXW,
    pub etmAxesList: AXESLISTW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagENUMTEXTMETRICW"][::std::mem::size_of::<tagENUMTEXTMETRICW>() - 748usize];
    ["Alignment of tagENUMTEXTMETRICW"][::std::mem::align_of::<tagENUMTEXTMETRICW>() - 4usize];
    ["Offset of field: tagENUMTEXTMETRICW::etmNewTextMetricEx"]
        [::std::mem::offset_of!(tagENUMTEXTMETRICW, etmNewTextMetricEx) - 0usize];
    ["Offset of field: tagENUMTEXTMETRICW::etmAxesList"]
        [::std::mem::offset_of!(tagENUMTEXTMETRICW, etmAxesList) - 100usize];
};
pub type ENUMTEXTMETRICW = tagENUMTEXTMETRICW;
pub type PENUMTEXTMETRICW = *mut tagENUMTEXTMETRICW;
pub type LPENUMTEXTMETRICW = *mut tagENUMTEXTMETRICW;
pub type ENUMTEXTMETRIC = ENUMTEXTMETRICA;
pub type PENUMTEXTMETRIC = PENUMTEXTMETRICA;
pub type LPENUMTEXTMETRIC = LPENUMTEXTMETRICA;
unsafe extern "C" {
    pub fn GetViewportExtEx(hdc: HDC, lpsize: LPSIZE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetViewportOrgEx(hdc: HDC, lppoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowExtEx(hdc: HDC, lpsize: LPSIZE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowOrgEx(hdc: HDC, lppoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn IntersectClipRect(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn InvertRgn(hdc: HDC, hrgn: HRGN) -> BOOL;
}
unsafe extern "C" {
    pub fn LineDDA(
        xStart: ::std::os::raw::c_int,
        yStart: ::std::os::raw::c_int,
        xEnd: ::std::os::raw::c_int,
        yEnd: ::std::os::raw::c_int,
        lpProc: LINEDDAPROC,
        data: LPARAM,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LineTo(hdc: HDC, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn MaskBlt(
        hdcDest: HDC,
        xDest: ::std::os::raw::c_int,
        yDest: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        hdcSrc: HDC,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        hbmMask: HBITMAP,
        xMask: ::std::os::raw::c_int,
        yMask: ::std::os::raw::c_int,
        rop: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PlgBlt(
        hdcDest: HDC,
        lpPoint: *const POINT,
        hdcSrc: HDC,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        hbmMask: HBITMAP,
        xMask: ::std::os::raw::c_int,
        yMask: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn OffsetClipRgn(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OffsetRgn(
        hrgn: HRGN,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PatBlt(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        rop: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn Pie(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        xr1: ::std::os::raw::c_int,
        yr1: ::std::os::raw::c_int,
        xr2: ::std::os::raw::c_int,
        yr2: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PlayMetaFile(hdc: HDC, hmf: HMETAFILE) -> BOOL;
}
unsafe extern "C" {
    pub fn PaintRgn(hdc: HDC, hrgn: HRGN) -> BOOL;
}
unsafe extern "C" {
    pub fn PolyPolygon(
        hdc: HDC,
        apt: *const POINT,
        asz: *const INT,
        csz: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PtInRegion(hrgn: HRGN, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn PtVisible(hdc: HDC, x: ::std::os::raw::c_int, y: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn RectInRegion(hrgn: HRGN, lprect: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn RectVisible(hdc: HDC, lprect: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn Rectangle(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RestoreDC(hdc: HDC, nSavedDC: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn ResetDCA(hdc: HDC, lpdm: *const DEVMODEA) -> HDC;
}
unsafe extern "C" {
    pub fn ResetDCW(hdc: HDC, lpdm: *const DEVMODEW) -> HDC;
}
unsafe extern "C" {
    pub fn RealizePalette(hdc: HDC) -> UINT;
}
unsafe extern "C" {
    pub fn RemoveFontResourceA(lpFileName: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveFontResourceW(lpFileName: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn RoundRect(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ResizePalette(hpal: HPALETTE, n: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn SaveDC(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SelectClipRgn(hdc: HDC, hrgn: HRGN) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtSelectClipRgn(
        hdc: HDC,
        hrgn: HRGN,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetMetaRgn(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SelectObject(hdc: HDC, h: HGDIOBJ) -> HGDIOBJ;
}
unsafe extern "C" {
    pub fn SelectPalette(hdc: HDC, hPal: HPALETTE, bForceBkgd: BOOL) -> HPALETTE;
}
unsafe extern "C" {
    pub fn SetBkColor(hdc: HDC, color: COLORREF) -> COLORREF;
}
unsafe extern "C" {
    pub fn SetDCBrushColor(hdc: HDC, color: COLORREF) -> COLORREF;
}
unsafe extern "C" {
    pub fn SetDCPenColor(hdc: HDC, color: COLORREF) -> COLORREF;
}
unsafe extern "C" {
    pub fn SetBkMode(hdc: HDC, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetBitmapBits(hbm: HBITMAP, cb: DWORD, pvBits: *const ::std::os::raw::c_void) -> LONG;
}
unsafe extern "C" {
    pub fn SetBoundsRect(hdc: HDC, lprect: *const RECT, flags: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn SetDIBits(
        hdc: HDC,
        hbm: HBITMAP,
        start: UINT,
        cLines: UINT,
        lpBits: *const ::std::os::raw::c_void,
        lpbmi: *const BITMAPINFO,
        ColorUse: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetDIBitsToDevice(
        hdc: HDC,
        xDest: ::std::os::raw::c_int,
        yDest: ::std::os::raw::c_int,
        w: DWORD,
        h: DWORD,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        StartScan: UINT,
        cLines: UINT,
        lpvBits: *const ::std::os::raw::c_void,
        lpbmi: *const BITMAPINFO,
        ColorUse: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetMapperFlags(hdc: HDC, flags: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn SetGraphicsMode(hdc: HDC, iMode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetMapMode(hdc: HDC, iMode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetLayout(hdc: HDC, l: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetLayout(hdc: HDC) -> DWORD;
}
unsafe extern "C" {
    pub fn SetMetaFileBitsEx(cbBuffer: UINT, lpData: *const BYTE) -> HMETAFILE;
}
unsafe extern "C" {
    pub fn SetPaletteEntries(
        hpal: HPALETTE,
        iStart: UINT,
        cEntries: UINT,
        pPalEntries: *const PALETTEENTRY,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn SetPixel(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: COLORREF,
    ) -> COLORREF;
}
unsafe extern "C" {
    pub fn SetPixelV(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        color: COLORREF,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPixelFormat(
        hdc: HDC,
        format: ::std::os::raw::c_int,
        ppfd: *const PIXELFORMATDESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPolyFillMode(hdc: HDC, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn StretchBlt(
        hdcDest: HDC,
        xDest: ::std::os::raw::c_int,
        yDest: ::std::os::raw::c_int,
        wDest: ::std::os::raw::c_int,
        hDest: ::std::os::raw::c_int,
        hdcSrc: HDC,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        rop: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetRectRgn(
        hrgn: HRGN,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn StretchDIBits(
        hdc: HDC,
        xDest: ::std::os::raw::c_int,
        yDest: ::std::os::raw::c_int,
        DestWidth: ::std::os::raw::c_int,
        DestHeight: ::std::os::raw::c_int,
        xSrc: ::std::os::raw::c_int,
        ySrc: ::std::os::raw::c_int,
        SrcWidth: ::std::os::raw::c_int,
        SrcHeight: ::std::os::raw::c_int,
        lpBits: *const ::std::os::raw::c_void,
        lpbmi: *const BITMAPINFO,
        iUsage: UINT,
        rop: DWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetROP2(hdc: HDC, rop2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetStretchBltMode(hdc: HDC, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetSystemPaletteUse(hdc: HDC, use_: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn SetTextCharacterExtra(hdc: HDC, extra: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetTextColor(hdc: HDC, color: COLORREF) -> COLORREF;
}
unsafe extern "C" {
    pub fn SetTextAlign(hdc: HDC, align: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn SetTextJustification(
        hdc: HDC,
        extra: ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UpdateColors(hdc: HDC) -> BOOL;
}
pub type COLOR16 = USHORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TRIVERTEX {
    pub x: LONG,
    pub y: LONG,
    pub Red: COLOR16,
    pub Green: COLOR16,
    pub Blue: COLOR16,
    pub Alpha: COLOR16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _TRIVERTEX"][::std::mem::size_of::<_TRIVERTEX>() - 16usize];
    ["Alignment of _TRIVERTEX"][::std::mem::align_of::<_TRIVERTEX>() - 4usize];
    ["Offset of field: _TRIVERTEX::x"][::std::mem::offset_of!(_TRIVERTEX, x) - 0usize];
    ["Offset of field: _TRIVERTEX::y"][::std::mem::offset_of!(_TRIVERTEX, y) - 4usize];
    ["Offset of field: _TRIVERTEX::Red"][::std::mem::offset_of!(_TRIVERTEX, Red) - 8usize];
    ["Offset of field: _TRIVERTEX::Green"][::std::mem::offset_of!(_TRIVERTEX, Green) - 10usize];
    ["Offset of field: _TRIVERTEX::Blue"][::std::mem::offset_of!(_TRIVERTEX, Blue) - 12usize];
    ["Offset of field: _TRIVERTEX::Alpha"][::std::mem::offset_of!(_TRIVERTEX, Alpha) - 14usize];
};
pub type TRIVERTEX = _TRIVERTEX;
pub type PTRIVERTEX = *mut _TRIVERTEX;
pub type LPTRIVERTEX = *mut _TRIVERTEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRADIENT_TRIANGLE {
    pub Vertex1: ULONG,
    pub Vertex2: ULONG,
    pub Vertex3: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GRADIENT_TRIANGLE"][::std::mem::size_of::<_GRADIENT_TRIANGLE>() - 12usize];
    ["Alignment of _GRADIENT_TRIANGLE"][::std::mem::align_of::<_GRADIENT_TRIANGLE>() - 4usize];
    ["Offset of field: _GRADIENT_TRIANGLE::Vertex1"]
        [::std::mem::offset_of!(_GRADIENT_TRIANGLE, Vertex1) - 0usize];
    ["Offset of field: _GRADIENT_TRIANGLE::Vertex2"]
        [::std::mem::offset_of!(_GRADIENT_TRIANGLE, Vertex2) - 4usize];
    ["Offset of field: _GRADIENT_TRIANGLE::Vertex3"]
        [::std::mem::offset_of!(_GRADIENT_TRIANGLE, Vertex3) - 8usize];
};
pub type GRADIENT_TRIANGLE = _GRADIENT_TRIANGLE;
pub type PGRADIENT_TRIANGLE = *mut _GRADIENT_TRIANGLE;
pub type LPGRADIENT_TRIANGLE = *mut _GRADIENT_TRIANGLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRADIENT_RECT {
    pub UpperLeft: ULONG,
    pub LowerRight: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GRADIENT_RECT"][::std::mem::size_of::<_GRADIENT_RECT>() - 8usize];
    ["Alignment of _GRADIENT_RECT"][::std::mem::align_of::<_GRADIENT_RECT>() - 4usize];
    ["Offset of field: _GRADIENT_RECT::UpperLeft"]
        [::std::mem::offset_of!(_GRADIENT_RECT, UpperLeft) - 0usize];
    ["Offset of field: _GRADIENT_RECT::LowerRight"]
        [::std::mem::offset_of!(_GRADIENT_RECT, LowerRight) - 4usize];
};
pub type GRADIENT_RECT = _GRADIENT_RECT;
pub type PGRADIENT_RECT = *mut _GRADIENT_RECT;
pub type LPGRADIENT_RECT = *mut _GRADIENT_RECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BLENDFUNCTION {
    pub BlendOp: BYTE,
    pub BlendFlags: BYTE,
    pub SourceConstantAlpha: BYTE,
    pub AlphaFormat: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BLENDFUNCTION"][::std::mem::size_of::<_BLENDFUNCTION>() - 4usize];
    ["Alignment of _BLENDFUNCTION"][::std::mem::align_of::<_BLENDFUNCTION>() - 1usize];
    ["Offset of field: _BLENDFUNCTION::BlendOp"]
        [::std::mem::offset_of!(_BLENDFUNCTION, BlendOp) - 0usize];
    ["Offset of field: _BLENDFUNCTION::BlendFlags"]
        [::std::mem::offset_of!(_BLENDFUNCTION, BlendFlags) - 1usize];
    ["Offset of field: _BLENDFUNCTION::SourceConstantAlpha"]
        [::std::mem::offset_of!(_BLENDFUNCTION, SourceConstantAlpha) - 2usize];
    ["Offset of field: _BLENDFUNCTION::AlphaFormat"]
        [::std::mem::offset_of!(_BLENDFUNCTION, AlphaFormat) - 3usize];
};
pub type BLENDFUNCTION = _BLENDFUNCTION;
pub type PBLENDFUNCTION = *mut _BLENDFUNCTION;
unsafe extern "C" {
    pub fn AlphaBlend(
        hdcDest: HDC,
        xoriginDest: ::std::os::raw::c_int,
        yoriginDest: ::std::os::raw::c_int,
        wDest: ::std::os::raw::c_int,
        hDest: ::std::os::raw::c_int,
        hdcSrc: HDC,
        xoriginSrc: ::std::os::raw::c_int,
        yoriginSrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        ftn: BLENDFUNCTION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TransparentBlt(
        hdcDest: HDC,
        xoriginDest: ::std::os::raw::c_int,
        yoriginDest: ::std::os::raw::c_int,
        wDest: ::std::os::raw::c_int,
        hDest: ::std::os::raw::c_int,
        hdcSrc: HDC,
        xoriginSrc: ::std::os::raw::c_int,
        yoriginSrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        crTransparent: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GradientFill(
        hdc: HDC,
        pVertex: PTRIVERTEX,
        nVertex: ULONG,
        pMesh: PVOID,
        nMesh: ULONG,
        ulMode: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GdiAlphaBlend(
        hdcDest: HDC,
        xoriginDest: ::std::os::raw::c_int,
        yoriginDest: ::std::os::raw::c_int,
        wDest: ::std::os::raw::c_int,
        hDest: ::std::os::raw::c_int,
        hdcSrc: HDC,
        xoriginSrc: ::std::os::raw::c_int,
        yoriginSrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        ftn: BLENDFUNCTION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GdiTransparentBlt(
        hdcDest: HDC,
        xoriginDest: ::std::os::raw::c_int,
        yoriginDest: ::std::os::raw::c_int,
        wDest: ::std::os::raw::c_int,
        hDest: ::std::os::raw::c_int,
        hdcSrc: HDC,
        xoriginSrc: ::std::os::raw::c_int,
        yoriginSrc: ::std::os::raw::c_int,
        wSrc: ::std::os::raw::c_int,
        hSrc: ::std::os::raw::c_int,
        crTransparent: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GdiGradientFill(
        hdc: HDC,
        pVertex: PTRIVERTEX,
        nVertex: ULONG,
        pMesh: PVOID,
        nCount: ULONG,
        ulMode: ULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PlayMetaFileRecord(
        hdc: HDC,
        lpHandleTable: LPHANDLETABLE,
        lpMR: LPMETARECORD,
        noObjs: UINT,
    ) -> BOOL;
}
pub type MFENUMPROC = ::std::option::Option<
    unsafe extern "C" fn(
        hdc: HDC,
        lpht: *mut HANDLETABLE,
        lpMR: *mut METARECORD,
        nObj: ::std::os::raw::c_int,
        param: LPARAM,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn EnumMetaFile(hdc: HDC, hmf: HMETAFILE, proc_: MFENUMPROC, param: LPARAM) -> BOOL;
}
pub type ENHMFENUMPROC = ::std::option::Option<
    unsafe extern "C" fn(
        hdc: HDC,
        lpht: *mut HANDLETABLE,
        lpmr: *const ENHMETARECORD,
        nHandles: ::std::os::raw::c_int,
        data: LPARAM,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn CloseEnhMetaFile(hdc: HDC) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn CopyEnhMetaFileA(hEnh: HENHMETAFILE, lpFileName: LPCSTR) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn CopyEnhMetaFileW(hEnh: HENHMETAFILE, lpFileName: LPCWSTR) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn CreateEnhMetaFileA(
        hdc: HDC,
        lpFilename: LPCSTR,
        lprc: *const RECT,
        lpDesc: LPCSTR,
    ) -> HDC;
}
unsafe extern "C" {
    pub fn CreateEnhMetaFileW(
        hdc: HDC,
        lpFilename: LPCWSTR,
        lprc: *const RECT,
        lpDesc: LPCWSTR,
    ) -> HDC;
}
unsafe extern "C" {
    pub fn DeleteEnhMetaFile(hmf: HENHMETAFILE) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumEnhMetaFile(
        hdc: HDC,
        hmf: HENHMETAFILE,
        proc_: ENHMFENUMPROC,
        param: LPVOID,
        lpRect: *const RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetEnhMetaFileA(lpName: LPCSTR) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn GetEnhMetaFileW(lpName: LPCWSTR) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn GetEnhMetaFileBits(hEMF: HENHMETAFILE, nSize: UINT, lpData: LPBYTE) -> UINT;
}
unsafe extern "C" {
    pub fn GetEnhMetaFileDescriptionA(
        hemf: HENHMETAFILE,
        cchBuffer: UINT,
        lpDescription: LPSTR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetEnhMetaFileDescriptionW(
        hemf: HENHMETAFILE,
        cchBuffer: UINT,
        lpDescription: LPWSTR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetEnhMetaFileHeader(
        hemf: HENHMETAFILE,
        nSize: UINT,
        lpEnhMetaHeader: LPENHMETAHEADER,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetEnhMetaFilePaletteEntries(
        hemf: HENHMETAFILE,
        nNumEntries: UINT,
        lpPaletteEntries: LPPALETTEENTRY,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetEnhMetaFilePixelFormat(
        hemf: HENHMETAFILE,
        cbBuffer: UINT,
        ppfd: *mut PIXELFORMATDESCRIPTOR,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetWinMetaFileBits(
        hemf: HENHMETAFILE,
        cbData16: UINT,
        pData16: LPBYTE,
        iMapMode: INT,
        hdcRef: HDC,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn PlayEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, lprect: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn PlayEnhMetaFileRecord(
        hdc: HDC,
        pht: LPHANDLETABLE,
        pmr: *const ENHMETARECORD,
        cht: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetEnhMetaFileBits(nSize: UINT, pb: *const BYTE) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn SetWinMetaFileBits(
        nSize: UINT,
        lpMeta16Data: *const BYTE,
        hdcRef: HDC,
        lpMFP: *const METAFILEPICT,
    ) -> HENHMETAFILE;
}
unsafe extern "C" {
    pub fn GdiComment(hdc: HDC, nSize: UINT, lpData: *const BYTE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextMetricsA(hdc: HDC, lptm: LPTEXTMETRICA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextMetricsW(hdc: HDC, lptm: LPTEXTMETRICW) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDIBSECTION {
    pub dsBm: BITMAP,
    pub dsBmih: BITMAPINFOHEADER,
    pub dsBitfields: [DWORD; 3usize],
    pub dshSection: HANDLE,
    pub dsOffset: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDIBSECTION"][::std::mem::size_of::<tagDIBSECTION>() - 104usize];
    ["Alignment of tagDIBSECTION"][::std::mem::align_of::<tagDIBSECTION>() - 8usize];
    ["Offset of field: tagDIBSECTION::dsBm"][::std::mem::offset_of!(tagDIBSECTION, dsBm) - 0usize];
    ["Offset of field: tagDIBSECTION::dsBmih"]
        [::std::mem::offset_of!(tagDIBSECTION, dsBmih) - 32usize];
    ["Offset of field: tagDIBSECTION::dsBitfields"]
        [::std::mem::offset_of!(tagDIBSECTION, dsBitfields) - 72usize];
    ["Offset of field: tagDIBSECTION::dshSection"]
        [::std::mem::offset_of!(tagDIBSECTION, dshSection) - 88usize];
    ["Offset of field: tagDIBSECTION::dsOffset"]
        [::std::mem::offset_of!(tagDIBSECTION, dsOffset) - 96usize];
};
pub type DIBSECTION = tagDIBSECTION;
pub type LPDIBSECTION = *mut tagDIBSECTION;
pub type PDIBSECTION = *mut tagDIBSECTION;
unsafe extern "C" {
    pub fn AngleArc(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        r: DWORD,
        StartAngle: FLOAT,
        SweepAngle: FLOAT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PolyPolyline(hdc: HDC, apt: *const POINT, asz: *const DWORD, csz: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWorldTransform(hdc: HDC, lpxf: LPXFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWorldTransform(hdc: HDC, lpxf: *const XFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn ModifyWorldTransform(hdc: HDC, lpxf: *const XFORM, mode: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CombineTransform(lpxfOut: LPXFORM, lpxf1: *const XFORM, lpxf2: *const XFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateDIBSection(
        hdc: HDC,
        pbmi: *const BITMAPINFO,
        usage: UINT,
        ppvBits: *mut *mut ::std::os::raw::c_void,
        hSection: HANDLE,
        offset: DWORD,
    ) -> HBITMAP;
}
unsafe extern "C" {
    pub fn GetDIBColorTable(hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: *mut RGBQUAD) -> UINT;
}
unsafe extern "C" {
    pub fn SetDIBColorTable(hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: *const RGBQUAD) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOLORADJUSTMENT {
    pub caSize: WORD,
    pub caFlags: WORD,
    pub caIlluminantIndex: WORD,
    pub caRedGamma: WORD,
    pub caGreenGamma: WORD,
    pub caBlueGamma: WORD,
    pub caReferenceBlack: WORD,
    pub caReferenceWhite: WORD,
    pub caContrast: SHORT,
    pub caBrightness: SHORT,
    pub caColorfulness: SHORT,
    pub caRedGreenTint: SHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOLORADJUSTMENT"][::std::mem::size_of::<tagCOLORADJUSTMENT>() - 24usize];
    ["Alignment of tagCOLORADJUSTMENT"][::std::mem::align_of::<tagCOLORADJUSTMENT>() - 2usize];
    ["Offset of field: tagCOLORADJUSTMENT::caSize"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caSize) - 0usize];
    ["Offset of field: tagCOLORADJUSTMENT::caFlags"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caFlags) - 2usize];
    ["Offset of field: tagCOLORADJUSTMENT::caIlluminantIndex"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caIlluminantIndex) - 4usize];
    ["Offset of field: tagCOLORADJUSTMENT::caRedGamma"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caRedGamma) - 6usize];
    ["Offset of field: tagCOLORADJUSTMENT::caGreenGamma"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caGreenGamma) - 8usize];
    ["Offset of field: tagCOLORADJUSTMENT::caBlueGamma"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caBlueGamma) - 10usize];
    ["Offset of field: tagCOLORADJUSTMENT::caReferenceBlack"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caReferenceBlack) - 12usize];
    ["Offset of field: tagCOLORADJUSTMENT::caReferenceWhite"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caReferenceWhite) - 14usize];
    ["Offset of field: tagCOLORADJUSTMENT::caContrast"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caContrast) - 16usize];
    ["Offset of field: tagCOLORADJUSTMENT::caBrightness"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caBrightness) - 18usize];
    ["Offset of field: tagCOLORADJUSTMENT::caColorfulness"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caColorfulness) - 20usize];
    ["Offset of field: tagCOLORADJUSTMENT::caRedGreenTint"]
        [::std::mem::offset_of!(tagCOLORADJUSTMENT, caRedGreenTint) - 22usize];
};
pub type COLORADJUSTMENT = tagCOLORADJUSTMENT;
pub type PCOLORADJUSTMENT = *mut tagCOLORADJUSTMENT;
pub type LPCOLORADJUSTMENT = *mut tagCOLORADJUSTMENT;
unsafe extern "C" {
    pub fn SetColorAdjustment(hdc: HDC, lpca: *const COLORADJUSTMENT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetColorAdjustment(hdc: HDC, lpca: LPCOLORADJUSTMENT) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateHalftonePalette(hdc: HDC) -> HPALETTE;
}
pub type ABORTPROC =
    ::std::option::Option<unsafe extern "C" fn(arg1: HDC, arg2: ::std::os::raw::c_int) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DOCINFOA {
    pub cbSize: ::std::os::raw::c_int,
    pub lpszDocName: LPCSTR,
    pub lpszOutput: LPCSTR,
    pub lpszDatatype: LPCSTR,
    pub fwType: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DOCINFOA"][::std::mem::size_of::<_DOCINFOA>() - 40usize];
    ["Alignment of _DOCINFOA"][::std::mem::align_of::<_DOCINFOA>() - 8usize];
    ["Offset of field: _DOCINFOA::cbSize"][::std::mem::offset_of!(_DOCINFOA, cbSize) - 0usize];
    ["Offset of field: _DOCINFOA::lpszDocName"]
        [::std::mem::offset_of!(_DOCINFOA, lpszDocName) - 8usize];
    ["Offset of field: _DOCINFOA::lpszOutput"]
        [::std::mem::offset_of!(_DOCINFOA, lpszOutput) - 16usize];
    ["Offset of field: _DOCINFOA::lpszDatatype"]
        [::std::mem::offset_of!(_DOCINFOA, lpszDatatype) - 24usize];
    ["Offset of field: _DOCINFOA::fwType"][::std::mem::offset_of!(_DOCINFOA, fwType) - 32usize];
};
pub type DOCINFOA = _DOCINFOA;
pub type LPDOCINFOA = *mut _DOCINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DOCINFOW {
    pub cbSize: ::std::os::raw::c_int,
    pub lpszDocName: LPCWSTR,
    pub lpszOutput: LPCWSTR,
    pub lpszDatatype: LPCWSTR,
    pub fwType: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DOCINFOW"][::std::mem::size_of::<_DOCINFOW>() - 40usize];
    ["Alignment of _DOCINFOW"][::std::mem::align_of::<_DOCINFOW>() - 8usize];
    ["Offset of field: _DOCINFOW::cbSize"][::std::mem::offset_of!(_DOCINFOW, cbSize) - 0usize];
    ["Offset of field: _DOCINFOW::lpszDocName"]
        [::std::mem::offset_of!(_DOCINFOW, lpszDocName) - 8usize];
    ["Offset of field: _DOCINFOW::lpszOutput"]
        [::std::mem::offset_of!(_DOCINFOW, lpszOutput) - 16usize];
    ["Offset of field: _DOCINFOW::lpszDatatype"]
        [::std::mem::offset_of!(_DOCINFOW, lpszDatatype) - 24usize];
    ["Offset of field: _DOCINFOW::fwType"][::std::mem::offset_of!(_DOCINFOW, fwType) - 32usize];
};
pub type DOCINFOW = _DOCINFOW;
pub type LPDOCINFOW = *mut _DOCINFOW;
pub type DOCINFO = DOCINFOA;
pub type LPDOCINFO = LPDOCINFOA;
unsafe extern "C" {
    pub fn StartDocA(hdc: HDC, lpdi: *const DOCINFOA) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn StartDocW(hdc: HDC, lpdi: *const DOCINFOW) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EndDoc(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn StartPage(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EndPage(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AbortDoc(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetAbortProc(hdc: HDC, proc_: ABORTPROC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AbortPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn ArcTo(
        hdc: HDC,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        right: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        xr1: ::std::os::raw::c_int,
        yr1: ::std::os::raw::c_int,
        xr2: ::std::os::raw::c_int,
        yr2: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn BeginPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseFigure(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn EndPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn FillPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn FlattenPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPath(
        hdc: HDC,
        apt: LPPOINT,
        aj: LPBYTE,
        cpt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PathToRegion(hdc: HDC) -> HRGN;
}
unsafe extern "C" {
    pub fn PolyDraw(
        hdc: HDC,
        apt: *const POINT,
        aj: *const BYTE,
        cpt: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SelectClipPath(hdc: HDC, mode: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn SetArcDirection(hdc: HDC, dir: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetMiterLimit(hdc: HDC, limit: FLOAT, old: PFLOAT) -> BOOL;
}
unsafe extern "C" {
    pub fn StrokeAndFillPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn StrokePath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn WidenPath(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn ExtCreatePen(
        iPenStyle: DWORD,
        cWidth: DWORD,
        plbrush: *const LOGBRUSH,
        cStyle: DWORD,
        pstyle: *const DWORD,
    ) -> HPEN;
}
unsafe extern "C" {
    pub fn GetMiterLimit(hdc: HDC, plimit: PFLOAT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetArcDirection(hdc: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetObjectA(h: HANDLE, c: ::std::os::raw::c_int, pv: LPVOID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetObjectW(h: HANDLE, c: ::std::os::raw::c_int, pv: LPVOID) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MoveToEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lppt: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TextOutA(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lpString: LPCSTR,
        c: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TextOutW(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lpString: LPCWSTR,
        c: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ExtTextOutA(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        options: UINT,
        lprect: *const RECT,
        lpString: LPCSTR,
        c: UINT,
        lpDx: *const INT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ExtTextOutW(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        options: UINT,
        lprect: *const RECT,
        lpString: LPCWSTR,
        c: UINT,
        lpDx: *const INT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PolyTextOutA(hdc: HDC, ppt: *const POLYTEXTA, nstrings: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn PolyTextOutW(hdc: HDC, ppt: *const POLYTEXTW, nstrings: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePolygonRgn(
        pptl: *const POINT,
        cPoint: ::std::os::raw::c_int,
        iMode: ::std::os::raw::c_int,
    ) -> HRGN;
}
unsafe extern "C" {
    pub fn DPtoLP(hdc: HDC, lppt: LPPOINT, c: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn LPtoDP(hdc: HDC, lppt: LPPOINT, c: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn Polygon(hdc: HDC, apt: *const POINT, cpt: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn Polyline(hdc: HDC, apt: *const POINT, cpt: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn PolyBezier(hdc: HDC, apt: *const POINT, cpt: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn PolyBezierTo(hdc: HDC, apt: *const POINT, cpt: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn PolylineTo(hdc: HDC, apt: *const POINT, cpt: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetViewportExtEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetViewportOrgEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lppt: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowExtEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowOrgEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lppt: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn OffsetViewportOrgEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lppt: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn OffsetWindowOrgEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lppt: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ScaleViewportExtEx(
        hdc: HDC,
        xn: ::std::os::raw::c_int,
        dx: ::std::os::raw::c_int,
        yn: ::std::os::raw::c_int,
        yd: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ScaleWindowExtEx(
        hdc: HDC,
        xn: ::std::os::raw::c_int,
        xd: ::std::os::raw::c_int,
        yn: ::std::os::raw::c_int,
        yd: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetBitmapDimensionEx(
        hbm: HBITMAP,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        lpsz: LPSIZE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetBrushOrgEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lppt: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetTextFaceA(hdc: HDC, c: ::std::os::raw::c_int, lpName: LPSTR)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTextFaceW(
        hdc: HDC,
        c: ::std::os::raw::c_int,
        lpName: LPWSTR,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagKERNINGPAIR {
    pub wFirst: WORD,
    pub wSecond: WORD,
    pub iKernAmount: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagKERNINGPAIR"][::std::mem::size_of::<tagKERNINGPAIR>() - 8usize];
    ["Alignment of tagKERNINGPAIR"][::std::mem::align_of::<tagKERNINGPAIR>() - 4usize];
    ["Offset of field: tagKERNINGPAIR::wFirst"]
        [::std::mem::offset_of!(tagKERNINGPAIR, wFirst) - 0usize];
    ["Offset of field: tagKERNINGPAIR::wSecond"]
        [::std::mem::offset_of!(tagKERNINGPAIR, wSecond) - 2usize];
    ["Offset of field: tagKERNINGPAIR::iKernAmount"]
        [::std::mem::offset_of!(tagKERNINGPAIR, iKernAmount) - 4usize];
};
pub type KERNINGPAIR = tagKERNINGPAIR;
pub type LPKERNINGPAIR = *mut tagKERNINGPAIR;
unsafe extern "C" {
    pub fn GetKerningPairsA(hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetKerningPairsW(hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetDCOrgEx(hdc: HDC, lppt: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn FixBrushOrgEx(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        ptl: LPPOINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnrealizeObject(h: HGDIOBJ) -> BOOL;
}
unsafe extern "C" {
    pub fn GdiFlush() -> BOOL;
}
unsafe extern "C" {
    pub fn GdiSetBatchLimit(dw: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GdiGetBatchLimit() -> DWORD;
}
pub type ICMENUMPROCA =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR, arg2: LPARAM) -> ::std::os::raw::c_int>;
pub type ICMENUMPROCW = ::std::option::Option<
    unsafe extern "C" fn(arg1: LPWSTR, arg2: LPARAM) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn SetICMMode(hdc: HDC, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CheckColorsInGamut(
        hdc: HDC,
        lpRGBTriple: LPRGBTRIPLE,
        dlpBuffer: LPVOID,
        nCount: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetColorSpace(hdc: HDC) -> HCOLORSPACE;
}
unsafe extern "C" {
    pub fn GetLogColorSpaceA(
        hColorSpace: HCOLORSPACE,
        lpBuffer: LPLOGCOLORSPACEA,
        nSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLogColorSpaceW(
        hColorSpace: HCOLORSPACE,
        lpBuffer: LPLOGCOLORSPACEW,
        nSize: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateColorSpaceA(lplcs: LPLOGCOLORSPACEA) -> HCOLORSPACE;
}
unsafe extern "C" {
    pub fn CreateColorSpaceW(lplcs: LPLOGCOLORSPACEW) -> HCOLORSPACE;
}
unsafe extern "C" {
    pub fn SetColorSpace(hdc: HDC, hcs: HCOLORSPACE) -> HCOLORSPACE;
}
unsafe extern "C" {
    pub fn DeleteColorSpace(hcs: HCOLORSPACE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetICMProfileA(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetICMProfileW(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetICMProfileA(hdc: HDC, lpFileName: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetICMProfileW(hdc: HDC, lpFileName: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn ColorMatchToTarget(hdc: HDC, hdcTarget: HDC, action: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumICMProfilesA(hdc: HDC, proc_: ICMENUMPROCA, param: LPARAM) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumICMProfilesW(hdc: HDC, proc_: ICMENUMPROCW, param: LPARAM) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UpdateICMRegKeyA(
        reserved: DWORD,
        lpszCMID: LPSTR,
        lpszFileName: LPSTR,
        command: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UpdateICMRegKeyW(
        reserved: DWORD,
        lpszCMID: LPWSTR,
        lpszFileName: LPWSTR,
        command: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ColorCorrectPalette(hdc: HDC, hPal: HPALETTE, deFirst: DWORD, num: DWORD) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMR {
    pub iType: DWORD,
    pub nSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMR"][::std::mem::size_of::<tagEMR>() - 8usize];
    ["Alignment of tagEMR"][::std::mem::align_of::<tagEMR>() - 4usize];
    ["Offset of field: tagEMR::iType"][::std::mem::offset_of!(tagEMR, iType) - 0usize];
    ["Offset of field: tagEMR::nSize"][::std::mem::offset_of!(tagEMR, nSize) - 4usize];
};
pub type EMR = tagEMR;
pub type PEMR = *mut tagEMR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRTEXT {
    pub ptlReference: POINTL,
    pub nChars: DWORD,
    pub offString: DWORD,
    pub fOptions: DWORD,
    pub rcl: RECTL,
    pub offDx: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRTEXT"][::std::mem::size_of::<tagEMRTEXT>() - 40usize];
    ["Alignment of tagEMRTEXT"][::std::mem::align_of::<tagEMRTEXT>() - 4usize];
    ["Offset of field: tagEMRTEXT::ptlReference"]
        [::std::mem::offset_of!(tagEMRTEXT, ptlReference) - 0usize];
    ["Offset of field: tagEMRTEXT::nChars"][::std::mem::offset_of!(tagEMRTEXT, nChars) - 8usize];
    ["Offset of field: tagEMRTEXT::offString"]
        [::std::mem::offset_of!(tagEMRTEXT, offString) - 12usize];
    ["Offset of field: tagEMRTEXT::fOptions"]
        [::std::mem::offset_of!(tagEMRTEXT, fOptions) - 16usize];
    ["Offset of field: tagEMRTEXT::rcl"][::std::mem::offset_of!(tagEMRTEXT, rcl) - 20usize];
    ["Offset of field: tagEMRTEXT::offDx"][::std::mem::offset_of!(tagEMRTEXT, offDx) - 36usize];
};
pub type EMRTEXT = tagEMRTEXT;
pub type PEMRTEXT = *mut tagEMRTEXT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagABORTPATH {
    pub emr: EMR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagABORTPATH"][::std::mem::size_of::<tagABORTPATH>() - 8usize];
    ["Alignment of tagABORTPATH"][::std::mem::align_of::<tagABORTPATH>() - 4usize];
    ["Offset of field: tagABORTPATH::emr"][::std::mem::offset_of!(tagABORTPATH, emr) - 0usize];
};
pub type EMRABORTPATH = tagABORTPATH;
pub type PEMRABORTPATH = *mut tagABORTPATH;
pub type EMRBEGINPATH = tagABORTPATH;
pub type PEMRBEGINPATH = *mut tagABORTPATH;
pub type EMRENDPATH = tagABORTPATH;
pub type PEMRENDPATH = *mut tagABORTPATH;
pub type EMRCLOSEFIGURE = tagABORTPATH;
pub type PEMRCLOSEFIGURE = *mut tagABORTPATH;
pub type EMRFLATTENPATH = tagABORTPATH;
pub type PEMRFLATTENPATH = *mut tagABORTPATH;
pub type EMRWIDENPATH = tagABORTPATH;
pub type PEMRWIDENPATH = *mut tagABORTPATH;
pub type EMRSETMETARGN = tagABORTPATH;
pub type PEMRSETMETARGN = *mut tagABORTPATH;
pub type EMRSAVEDC = tagABORTPATH;
pub type PEMRSAVEDC = *mut tagABORTPATH;
pub type EMRREALIZEPALETTE = tagABORTPATH;
pub type PEMRREALIZEPALETTE = *mut tagABORTPATH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSELECTCLIPPATH {
    pub emr: EMR,
    pub iMode: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSELECTCLIPPATH"][::std::mem::size_of::<tagEMRSELECTCLIPPATH>() - 12usize];
    ["Alignment of tagEMRSELECTCLIPPATH"][::std::mem::align_of::<tagEMRSELECTCLIPPATH>() - 4usize];
    ["Offset of field: tagEMRSELECTCLIPPATH::emr"]
        [::std::mem::offset_of!(tagEMRSELECTCLIPPATH, emr) - 0usize];
    ["Offset of field: tagEMRSELECTCLIPPATH::iMode"]
        [::std::mem::offset_of!(tagEMRSELECTCLIPPATH, iMode) - 8usize];
};
pub type EMRSELECTCLIPPATH = tagEMRSELECTCLIPPATH;
pub type PEMRSELECTCLIPPATH = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETBKMODE = tagEMRSELECTCLIPPATH;
pub type PEMRSETBKMODE = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETMAPMODE = tagEMRSELECTCLIPPATH;
pub type PEMRSETMAPMODE = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETLAYOUT = tagEMRSELECTCLIPPATH;
pub type PEMRSETLAYOUT = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETPOLYFILLMODE = tagEMRSELECTCLIPPATH;
pub type PEMRSETPOLYFILLMODE = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETROP2 = tagEMRSELECTCLIPPATH;
pub type PEMRSETROP2 = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETSTRETCHBLTMODE = tagEMRSELECTCLIPPATH;
pub type PEMRSETSTRETCHBLTMODE = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETICMMODE = tagEMRSELECTCLIPPATH;
pub type PEMRSETICMMODE = *mut tagEMRSELECTCLIPPATH;
pub type EMRSETTEXTALIGN = tagEMRSELECTCLIPPATH;
pub type PEMRSETTEXTALIGN = *mut tagEMRSELECTCLIPPATH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETMITERLIMIT {
    pub emr: EMR,
    pub eMiterLimit: FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETMITERLIMIT"][::std::mem::size_of::<tagEMRSETMITERLIMIT>() - 12usize];
    ["Alignment of tagEMRSETMITERLIMIT"][::std::mem::align_of::<tagEMRSETMITERLIMIT>() - 4usize];
    ["Offset of field: tagEMRSETMITERLIMIT::emr"]
        [::std::mem::offset_of!(tagEMRSETMITERLIMIT, emr) - 0usize];
    ["Offset of field: tagEMRSETMITERLIMIT::eMiterLimit"]
        [::std::mem::offset_of!(tagEMRSETMITERLIMIT, eMiterLimit) - 8usize];
};
pub type EMRSETMITERLIMIT = tagEMRSETMITERLIMIT;
pub type PEMRSETMITERLIMIT = *mut tagEMRSETMITERLIMIT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRRESTOREDC {
    pub emr: EMR,
    pub iRelative: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRRESTOREDC"][::std::mem::size_of::<tagEMRRESTOREDC>() - 12usize];
    ["Alignment of tagEMRRESTOREDC"][::std::mem::align_of::<tagEMRRESTOREDC>() - 4usize];
    ["Offset of field: tagEMRRESTOREDC::emr"]
        [::std::mem::offset_of!(tagEMRRESTOREDC, emr) - 0usize];
    ["Offset of field: tagEMRRESTOREDC::iRelative"]
        [::std::mem::offset_of!(tagEMRRESTOREDC, iRelative) - 8usize];
};
pub type EMRRESTOREDC = tagEMRRESTOREDC;
pub type PEMRRESTOREDC = *mut tagEMRRESTOREDC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETARCDIRECTION {
    pub emr: EMR,
    pub iArcDirection: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETARCDIRECTION"][::std::mem::size_of::<tagEMRSETARCDIRECTION>() - 12usize];
    ["Alignment of tagEMRSETARCDIRECTION"]
        [::std::mem::align_of::<tagEMRSETARCDIRECTION>() - 4usize];
    ["Offset of field: tagEMRSETARCDIRECTION::emr"]
        [::std::mem::offset_of!(tagEMRSETARCDIRECTION, emr) - 0usize];
    ["Offset of field: tagEMRSETARCDIRECTION::iArcDirection"]
        [::std::mem::offset_of!(tagEMRSETARCDIRECTION, iArcDirection) - 8usize];
};
pub type EMRSETARCDIRECTION = tagEMRSETARCDIRECTION;
pub type PEMRSETARCDIRECTION = *mut tagEMRSETARCDIRECTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETMAPPERFLAGS {
    pub emr: EMR,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETMAPPERFLAGS"][::std::mem::size_of::<tagEMRSETMAPPERFLAGS>() - 12usize];
    ["Alignment of tagEMRSETMAPPERFLAGS"][::std::mem::align_of::<tagEMRSETMAPPERFLAGS>() - 4usize];
    ["Offset of field: tagEMRSETMAPPERFLAGS::emr"]
        [::std::mem::offset_of!(tagEMRSETMAPPERFLAGS, emr) - 0usize];
    ["Offset of field: tagEMRSETMAPPERFLAGS::dwFlags"]
        [::std::mem::offset_of!(tagEMRSETMAPPERFLAGS, dwFlags) - 8usize];
};
pub type EMRSETMAPPERFLAGS = tagEMRSETMAPPERFLAGS;
pub type PEMRSETMAPPERFLAGS = *mut tagEMRSETMAPPERFLAGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETTEXTCOLOR {
    pub emr: EMR,
    pub crColor: COLORREF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETTEXTCOLOR"][::std::mem::size_of::<tagEMRSETTEXTCOLOR>() - 12usize];
    ["Alignment of tagEMRSETTEXTCOLOR"][::std::mem::align_of::<tagEMRSETTEXTCOLOR>() - 4usize];
    ["Offset of field: tagEMRSETTEXTCOLOR::emr"]
        [::std::mem::offset_of!(tagEMRSETTEXTCOLOR, emr) - 0usize];
    ["Offset of field: tagEMRSETTEXTCOLOR::crColor"]
        [::std::mem::offset_of!(tagEMRSETTEXTCOLOR, crColor) - 8usize];
};
pub type EMRSETBKCOLOR = tagEMRSETTEXTCOLOR;
pub type PEMRSETBKCOLOR = *mut tagEMRSETTEXTCOLOR;
pub type EMRSETTEXTCOLOR = tagEMRSETTEXTCOLOR;
pub type PEMRSETTEXTCOLOR = *mut tagEMRSETTEXTCOLOR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSELECTOBJECT {
    pub emr: EMR,
    pub ihObject: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSELECTOBJECT"][::std::mem::size_of::<tagEMRSELECTOBJECT>() - 12usize];
    ["Alignment of tagEMRSELECTOBJECT"][::std::mem::align_of::<tagEMRSELECTOBJECT>() - 4usize];
    ["Offset of field: tagEMRSELECTOBJECT::emr"]
        [::std::mem::offset_of!(tagEMRSELECTOBJECT, emr) - 0usize];
    ["Offset of field: tagEMRSELECTOBJECT::ihObject"]
        [::std::mem::offset_of!(tagEMRSELECTOBJECT, ihObject) - 8usize];
};
pub type EMRSELECTOBJECT = tagEMRSELECTOBJECT;
pub type PEMRSELECTOBJECT = *mut tagEMRSELECTOBJECT;
pub type EMRDELETEOBJECT = tagEMRSELECTOBJECT;
pub type PEMRDELETEOBJECT = *mut tagEMRSELECTOBJECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSELECTPALETTE {
    pub emr: EMR,
    pub ihPal: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSELECTPALETTE"][::std::mem::size_of::<tagEMRSELECTPALETTE>() - 12usize];
    ["Alignment of tagEMRSELECTPALETTE"][::std::mem::align_of::<tagEMRSELECTPALETTE>() - 4usize];
    ["Offset of field: tagEMRSELECTPALETTE::emr"]
        [::std::mem::offset_of!(tagEMRSELECTPALETTE, emr) - 0usize];
    ["Offset of field: tagEMRSELECTPALETTE::ihPal"]
        [::std::mem::offset_of!(tagEMRSELECTPALETTE, ihPal) - 8usize];
};
pub type EMRSELECTPALETTE = tagEMRSELECTPALETTE;
pub type PEMRSELECTPALETTE = *mut tagEMRSELECTPALETTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRRESIZEPALETTE {
    pub emr: EMR,
    pub ihPal: DWORD,
    pub cEntries: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRRESIZEPALETTE"][::std::mem::size_of::<tagEMRRESIZEPALETTE>() - 16usize];
    ["Alignment of tagEMRRESIZEPALETTE"][::std::mem::align_of::<tagEMRRESIZEPALETTE>() - 4usize];
    ["Offset of field: tagEMRRESIZEPALETTE::emr"]
        [::std::mem::offset_of!(tagEMRRESIZEPALETTE, emr) - 0usize];
    ["Offset of field: tagEMRRESIZEPALETTE::ihPal"]
        [::std::mem::offset_of!(tagEMRRESIZEPALETTE, ihPal) - 8usize];
    ["Offset of field: tagEMRRESIZEPALETTE::cEntries"]
        [::std::mem::offset_of!(tagEMRRESIZEPALETTE, cEntries) - 12usize];
};
pub type EMRRESIZEPALETTE = tagEMRRESIZEPALETTE;
pub type PEMRRESIZEPALETTE = *mut tagEMRRESIZEPALETTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETPALETTEENTRIES {
    pub emr: EMR,
    pub ihPal: DWORD,
    pub iStart: DWORD,
    pub cEntries: DWORD,
    pub aPalEntries: [PALETTEENTRY; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETPALETTEENTRIES"][::std::mem::size_of::<tagEMRSETPALETTEENTRIES>() - 24usize];
    ["Alignment of tagEMRSETPALETTEENTRIES"]
        [::std::mem::align_of::<tagEMRSETPALETTEENTRIES>() - 4usize];
    ["Offset of field: tagEMRSETPALETTEENTRIES::emr"]
        [::std::mem::offset_of!(tagEMRSETPALETTEENTRIES, emr) - 0usize];
    ["Offset of field: tagEMRSETPALETTEENTRIES::ihPal"]
        [::std::mem::offset_of!(tagEMRSETPALETTEENTRIES, ihPal) - 8usize];
    ["Offset of field: tagEMRSETPALETTEENTRIES::iStart"]
        [::std::mem::offset_of!(tagEMRSETPALETTEENTRIES, iStart) - 12usize];
    ["Offset of field: tagEMRSETPALETTEENTRIES::cEntries"]
        [::std::mem::offset_of!(tagEMRSETPALETTEENTRIES, cEntries) - 16usize];
    ["Offset of field: tagEMRSETPALETTEENTRIES::aPalEntries"]
        [::std::mem::offset_of!(tagEMRSETPALETTEENTRIES, aPalEntries) - 20usize];
};
pub type EMRSETPALETTEENTRIES = tagEMRSETPALETTEENTRIES;
pub type PEMRSETPALETTEENTRIES = *mut tagEMRSETPALETTEENTRIES;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETCOLORADJUSTMENT {
    pub emr: EMR,
    pub ColorAdjustment: COLORADJUSTMENT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETCOLORADJUSTMENT"]
        [::std::mem::size_of::<tagEMRSETCOLORADJUSTMENT>() - 32usize];
    ["Alignment of tagEMRSETCOLORADJUSTMENT"]
        [::std::mem::align_of::<tagEMRSETCOLORADJUSTMENT>() - 4usize];
    ["Offset of field: tagEMRSETCOLORADJUSTMENT::emr"]
        [::std::mem::offset_of!(tagEMRSETCOLORADJUSTMENT, emr) - 0usize];
    ["Offset of field: tagEMRSETCOLORADJUSTMENT::ColorAdjustment"]
        [::std::mem::offset_of!(tagEMRSETCOLORADJUSTMENT, ColorAdjustment) - 8usize];
};
pub type EMRSETCOLORADJUSTMENT = tagEMRSETCOLORADJUSTMENT;
pub type PEMRSETCOLORADJUSTMENT = *mut tagEMRSETCOLORADJUSTMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRGDICOMMENT {
    pub emr: EMR,
    pub cbData: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRGDICOMMENT"][::std::mem::size_of::<tagEMRGDICOMMENT>() - 16usize];
    ["Alignment of tagEMRGDICOMMENT"][::std::mem::align_of::<tagEMRGDICOMMENT>() - 4usize];
    ["Offset of field: tagEMRGDICOMMENT::emr"]
        [::std::mem::offset_of!(tagEMRGDICOMMENT, emr) - 0usize];
    ["Offset of field: tagEMRGDICOMMENT::cbData"]
        [::std::mem::offset_of!(tagEMRGDICOMMENT, cbData) - 8usize];
    ["Offset of field: tagEMRGDICOMMENT::Data"]
        [::std::mem::offset_of!(tagEMRGDICOMMENT, Data) - 12usize];
};
pub type EMRGDICOMMENT = tagEMRGDICOMMENT;
pub type PEMRGDICOMMENT = *mut tagEMRGDICOMMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREOF {
    pub emr: EMR,
    pub nPalEntries: DWORD,
    pub offPalEntries: DWORD,
    pub nSizeLast: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREOF"][::std::mem::size_of::<tagEMREOF>() - 20usize];
    ["Alignment of tagEMREOF"][::std::mem::align_of::<tagEMREOF>() - 4usize];
    ["Offset of field: tagEMREOF::emr"][::std::mem::offset_of!(tagEMREOF, emr) - 0usize];
    ["Offset of field: tagEMREOF::nPalEntries"]
        [::std::mem::offset_of!(tagEMREOF, nPalEntries) - 8usize];
    ["Offset of field: tagEMREOF::offPalEntries"]
        [::std::mem::offset_of!(tagEMREOF, offPalEntries) - 12usize];
    ["Offset of field: tagEMREOF::nSizeLast"]
        [::std::mem::offset_of!(tagEMREOF, nSizeLast) - 16usize];
};
pub type EMREOF = tagEMREOF;
pub type PEMREOF = *mut tagEMREOF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRLINETO {
    pub emr: EMR,
    pub ptl: POINTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRLINETO"][::std::mem::size_of::<tagEMRLINETO>() - 16usize];
    ["Alignment of tagEMRLINETO"][::std::mem::align_of::<tagEMRLINETO>() - 4usize];
    ["Offset of field: tagEMRLINETO::emr"][::std::mem::offset_of!(tagEMRLINETO, emr) - 0usize];
    ["Offset of field: tagEMRLINETO::ptl"][::std::mem::offset_of!(tagEMRLINETO, ptl) - 8usize];
};
pub type EMRLINETO = tagEMRLINETO;
pub type PEMRLINETO = *mut tagEMRLINETO;
pub type EMRMOVETOEX = tagEMRLINETO;
pub type PEMRMOVETOEX = *mut tagEMRLINETO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMROFFSETCLIPRGN {
    pub emr: EMR,
    pub ptlOffset: POINTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMROFFSETCLIPRGN"][::std::mem::size_of::<tagEMROFFSETCLIPRGN>() - 16usize];
    ["Alignment of tagEMROFFSETCLIPRGN"][::std::mem::align_of::<tagEMROFFSETCLIPRGN>() - 4usize];
    ["Offset of field: tagEMROFFSETCLIPRGN::emr"]
        [::std::mem::offset_of!(tagEMROFFSETCLIPRGN, emr) - 0usize];
    ["Offset of field: tagEMROFFSETCLIPRGN::ptlOffset"]
        [::std::mem::offset_of!(tagEMROFFSETCLIPRGN, ptlOffset) - 8usize];
};
pub type EMROFFSETCLIPRGN = tagEMROFFSETCLIPRGN;
pub type PEMROFFSETCLIPRGN = *mut tagEMROFFSETCLIPRGN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRFILLPATH {
    pub emr: EMR,
    pub rclBounds: RECTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRFILLPATH"][::std::mem::size_of::<tagEMRFILLPATH>() - 24usize];
    ["Alignment of tagEMRFILLPATH"][::std::mem::align_of::<tagEMRFILLPATH>() - 4usize];
    ["Offset of field: tagEMRFILLPATH::emr"][::std::mem::offset_of!(tagEMRFILLPATH, emr) - 0usize];
    ["Offset of field: tagEMRFILLPATH::rclBounds"]
        [::std::mem::offset_of!(tagEMRFILLPATH, rclBounds) - 8usize];
};
pub type EMRFILLPATH = tagEMRFILLPATH;
pub type PEMRFILLPATH = *mut tagEMRFILLPATH;
pub type EMRSTROKEANDFILLPATH = tagEMRFILLPATH;
pub type PEMRSTROKEANDFILLPATH = *mut tagEMRFILLPATH;
pub type EMRSTROKEPATH = tagEMRFILLPATH;
pub type PEMRSTROKEPATH = *mut tagEMRFILLPATH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXCLUDECLIPRECT {
    pub emr: EMR,
    pub rclClip: RECTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXCLUDECLIPRECT"][::std::mem::size_of::<tagEMREXCLUDECLIPRECT>() - 24usize];
    ["Alignment of tagEMREXCLUDECLIPRECT"]
        [::std::mem::align_of::<tagEMREXCLUDECLIPRECT>() - 4usize];
    ["Offset of field: tagEMREXCLUDECLIPRECT::emr"]
        [::std::mem::offset_of!(tagEMREXCLUDECLIPRECT, emr) - 0usize];
    ["Offset of field: tagEMREXCLUDECLIPRECT::rclClip"]
        [::std::mem::offset_of!(tagEMREXCLUDECLIPRECT, rclClip) - 8usize];
};
pub type EMREXCLUDECLIPRECT = tagEMREXCLUDECLIPRECT;
pub type PEMREXCLUDECLIPRECT = *mut tagEMREXCLUDECLIPRECT;
pub type EMRINTERSECTCLIPRECT = tagEMREXCLUDECLIPRECT;
pub type PEMRINTERSECTCLIPRECT = *mut tagEMREXCLUDECLIPRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETVIEWPORTORGEX {
    pub emr: EMR,
    pub ptlOrigin: POINTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETVIEWPORTORGEX"][::std::mem::size_of::<tagEMRSETVIEWPORTORGEX>() - 16usize];
    ["Alignment of tagEMRSETVIEWPORTORGEX"]
        [::std::mem::align_of::<tagEMRSETVIEWPORTORGEX>() - 4usize];
    ["Offset of field: tagEMRSETVIEWPORTORGEX::emr"]
        [::std::mem::offset_of!(tagEMRSETVIEWPORTORGEX, emr) - 0usize];
    ["Offset of field: tagEMRSETVIEWPORTORGEX::ptlOrigin"]
        [::std::mem::offset_of!(tagEMRSETVIEWPORTORGEX, ptlOrigin) - 8usize];
};
pub type EMRSETVIEWPORTORGEX = tagEMRSETVIEWPORTORGEX;
pub type PEMRSETVIEWPORTORGEX = *mut tagEMRSETVIEWPORTORGEX;
pub type EMRSETWINDOWORGEX = tagEMRSETVIEWPORTORGEX;
pub type PEMRSETWINDOWORGEX = *mut tagEMRSETVIEWPORTORGEX;
pub type EMRSETBRUSHORGEX = tagEMRSETVIEWPORTORGEX;
pub type PEMRSETBRUSHORGEX = *mut tagEMRSETVIEWPORTORGEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETVIEWPORTEXTEX {
    pub emr: EMR,
    pub szlExtent: SIZEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETVIEWPORTEXTEX"][::std::mem::size_of::<tagEMRSETVIEWPORTEXTEX>() - 16usize];
    ["Alignment of tagEMRSETVIEWPORTEXTEX"]
        [::std::mem::align_of::<tagEMRSETVIEWPORTEXTEX>() - 4usize];
    ["Offset of field: tagEMRSETVIEWPORTEXTEX::emr"]
        [::std::mem::offset_of!(tagEMRSETVIEWPORTEXTEX, emr) - 0usize];
    ["Offset of field: tagEMRSETVIEWPORTEXTEX::szlExtent"]
        [::std::mem::offset_of!(tagEMRSETVIEWPORTEXTEX, szlExtent) - 8usize];
};
pub type EMRSETVIEWPORTEXTEX = tagEMRSETVIEWPORTEXTEX;
pub type PEMRSETVIEWPORTEXTEX = *mut tagEMRSETVIEWPORTEXTEX;
pub type EMRSETWINDOWEXTEX = tagEMRSETVIEWPORTEXTEX;
pub type PEMRSETWINDOWEXTEX = *mut tagEMRSETVIEWPORTEXTEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSCALEVIEWPORTEXTEX {
    pub emr: EMR,
    pub xNum: LONG,
    pub xDenom: LONG,
    pub yNum: LONG,
    pub yDenom: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSCALEVIEWPORTEXTEX"]
        [::std::mem::size_of::<tagEMRSCALEVIEWPORTEXTEX>() - 24usize];
    ["Alignment of tagEMRSCALEVIEWPORTEXTEX"]
        [::std::mem::align_of::<tagEMRSCALEVIEWPORTEXTEX>() - 4usize];
    ["Offset of field: tagEMRSCALEVIEWPORTEXTEX::emr"]
        [::std::mem::offset_of!(tagEMRSCALEVIEWPORTEXTEX, emr) - 0usize];
    ["Offset of field: tagEMRSCALEVIEWPORTEXTEX::xNum"]
        [::std::mem::offset_of!(tagEMRSCALEVIEWPORTEXTEX, xNum) - 8usize];
    ["Offset of field: tagEMRSCALEVIEWPORTEXTEX::xDenom"]
        [::std::mem::offset_of!(tagEMRSCALEVIEWPORTEXTEX, xDenom) - 12usize];
    ["Offset of field: tagEMRSCALEVIEWPORTEXTEX::yNum"]
        [::std::mem::offset_of!(tagEMRSCALEVIEWPORTEXTEX, yNum) - 16usize];
    ["Offset of field: tagEMRSCALEVIEWPORTEXTEX::yDenom"]
        [::std::mem::offset_of!(tagEMRSCALEVIEWPORTEXTEX, yDenom) - 20usize];
};
pub type EMRSCALEVIEWPORTEXTEX = tagEMRSCALEVIEWPORTEXTEX;
pub type PEMRSCALEVIEWPORTEXTEX = *mut tagEMRSCALEVIEWPORTEXTEX;
pub type EMRSCALEWINDOWEXTEX = tagEMRSCALEVIEWPORTEXTEX;
pub type PEMRSCALEWINDOWEXTEX = *mut tagEMRSCALEVIEWPORTEXTEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETWORLDTRANSFORM {
    pub emr: EMR,
    pub xform: XFORM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETWORLDTRANSFORM"][::std::mem::size_of::<tagEMRSETWORLDTRANSFORM>() - 32usize];
    ["Alignment of tagEMRSETWORLDTRANSFORM"]
        [::std::mem::align_of::<tagEMRSETWORLDTRANSFORM>() - 4usize];
    ["Offset of field: tagEMRSETWORLDTRANSFORM::emr"]
        [::std::mem::offset_of!(tagEMRSETWORLDTRANSFORM, emr) - 0usize];
    ["Offset of field: tagEMRSETWORLDTRANSFORM::xform"]
        [::std::mem::offset_of!(tagEMRSETWORLDTRANSFORM, xform) - 8usize];
};
pub type EMRSETWORLDTRANSFORM = tagEMRSETWORLDTRANSFORM;
pub type PEMRSETWORLDTRANSFORM = *mut tagEMRSETWORLDTRANSFORM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRMODIFYWORLDTRANSFORM {
    pub emr: EMR,
    pub xform: XFORM,
    pub iMode: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRMODIFYWORLDTRANSFORM"]
        [::std::mem::size_of::<tagEMRMODIFYWORLDTRANSFORM>() - 36usize];
    ["Alignment of tagEMRMODIFYWORLDTRANSFORM"]
        [::std::mem::align_of::<tagEMRMODIFYWORLDTRANSFORM>() - 4usize];
    ["Offset of field: tagEMRMODIFYWORLDTRANSFORM::emr"]
        [::std::mem::offset_of!(tagEMRMODIFYWORLDTRANSFORM, emr) - 0usize];
    ["Offset of field: tagEMRMODIFYWORLDTRANSFORM::xform"]
        [::std::mem::offset_of!(tagEMRMODIFYWORLDTRANSFORM, xform) - 8usize];
    ["Offset of field: tagEMRMODIFYWORLDTRANSFORM::iMode"]
        [::std::mem::offset_of!(tagEMRMODIFYWORLDTRANSFORM, iMode) - 32usize];
};
pub type EMRMODIFYWORLDTRANSFORM = tagEMRMODIFYWORLDTRANSFORM;
pub type PEMRMODIFYWORLDTRANSFORM = *mut tagEMRMODIFYWORLDTRANSFORM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETPIXELV {
    pub emr: EMR,
    pub ptlPixel: POINTL,
    pub crColor: COLORREF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETPIXELV"][::std::mem::size_of::<tagEMRSETPIXELV>() - 20usize];
    ["Alignment of tagEMRSETPIXELV"][::std::mem::align_of::<tagEMRSETPIXELV>() - 4usize];
    ["Offset of field: tagEMRSETPIXELV::emr"]
        [::std::mem::offset_of!(tagEMRSETPIXELV, emr) - 0usize];
    ["Offset of field: tagEMRSETPIXELV::ptlPixel"]
        [::std::mem::offset_of!(tagEMRSETPIXELV, ptlPixel) - 8usize];
    ["Offset of field: tagEMRSETPIXELV::crColor"]
        [::std::mem::offset_of!(tagEMRSETPIXELV, crColor) - 16usize];
};
pub type EMRSETPIXELV = tagEMRSETPIXELV;
pub type PEMRSETPIXELV = *mut tagEMRSETPIXELV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXTFLOODFILL {
    pub emr: EMR,
    pub ptlStart: POINTL,
    pub crColor: COLORREF,
    pub iMode: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXTFLOODFILL"][::std::mem::size_of::<tagEMREXTFLOODFILL>() - 24usize];
    ["Alignment of tagEMREXTFLOODFILL"][::std::mem::align_of::<tagEMREXTFLOODFILL>() - 4usize];
    ["Offset of field: tagEMREXTFLOODFILL::emr"]
        [::std::mem::offset_of!(tagEMREXTFLOODFILL, emr) - 0usize];
    ["Offset of field: tagEMREXTFLOODFILL::ptlStart"]
        [::std::mem::offset_of!(tagEMREXTFLOODFILL, ptlStart) - 8usize];
    ["Offset of field: tagEMREXTFLOODFILL::crColor"]
        [::std::mem::offset_of!(tagEMREXTFLOODFILL, crColor) - 16usize];
    ["Offset of field: tagEMREXTFLOODFILL::iMode"]
        [::std::mem::offset_of!(tagEMREXTFLOODFILL, iMode) - 20usize];
};
pub type EMREXTFLOODFILL = tagEMREXTFLOODFILL;
pub type PEMREXTFLOODFILL = *mut tagEMREXTFLOODFILL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRELLIPSE {
    pub emr: EMR,
    pub rclBox: RECTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRELLIPSE"][::std::mem::size_of::<tagEMRELLIPSE>() - 24usize];
    ["Alignment of tagEMRELLIPSE"][::std::mem::align_of::<tagEMRELLIPSE>() - 4usize];
    ["Offset of field: tagEMRELLIPSE::emr"][::std::mem::offset_of!(tagEMRELLIPSE, emr) - 0usize];
    ["Offset of field: tagEMRELLIPSE::rclBox"]
        [::std::mem::offset_of!(tagEMRELLIPSE, rclBox) - 8usize];
};
pub type EMRELLIPSE = tagEMRELLIPSE;
pub type PEMRELLIPSE = *mut tagEMRELLIPSE;
pub type EMRRECTANGLE = tagEMRELLIPSE;
pub type PEMRRECTANGLE = *mut tagEMRELLIPSE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRROUNDRECT {
    pub emr: EMR,
    pub rclBox: RECTL,
    pub szlCorner: SIZEL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRROUNDRECT"][::std::mem::size_of::<tagEMRROUNDRECT>() - 32usize];
    ["Alignment of tagEMRROUNDRECT"][::std::mem::align_of::<tagEMRROUNDRECT>() - 4usize];
    ["Offset of field: tagEMRROUNDRECT::emr"]
        [::std::mem::offset_of!(tagEMRROUNDRECT, emr) - 0usize];
    ["Offset of field: tagEMRROUNDRECT::rclBox"]
        [::std::mem::offset_of!(tagEMRROUNDRECT, rclBox) - 8usize];
    ["Offset of field: tagEMRROUNDRECT::szlCorner"]
        [::std::mem::offset_of!(tagEMRROUNDRECT, szlCorner) - 24usize];
};
pub type EMRROUNDRECT = tagEMRROUNDRECT;
pub type PEMRROUNDRECT = *mut tagEMRROUNDRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRARC {
    pub emr: EMR,
    pub rclBox: RECTL,
    pub ptlStart: POINTL,
    pub ptlEnd: POINTL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRARC"][::std::mem::size_of::<tagEMRARC>() - 40usize];
    ["Alignment of tagEMRARC"][::std::mem::align_of::<tagEMRARC>() - 4usize];
    ["Offset of field: tagEMRARC::emr"][::std::mem::offset_of!(tagEMRARC, emr) - 0usize];
    ["Offset of field: tagEMRARC::rclBox"][::std::mem::offset_of!(tagEMRARC, rclBox) - 8usize];
    ["Offset of field: tagEMRARC::ptlStart"][::std::mem::offset_of!(tagEMRARC, ptlStart) - 24usize];
    ["Offset of field: tagEMRARC::ptlEnd"][::std::mem::offset_of!(tagEMRARC, ptlEnd) - 32usize];
};
pub type EMRARC = tagEMRARC;
pub type PEMRARC = *mut tagEMRARC;
pub type EMRARCTO = tagEMRARC;
pub type PEMRARCTO = *mut tagEMRARC;
pub type EMRCHORD = tagEMRARC;
pub type PEMRCHORD = *mut tagEMRARC;
pub type EMRPIE = tagEMRARC;
pub type PEMRPIE = *mut tagEMRARC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRANGLEARC {
    pub emr: EMR,
    pub ptlCenter: POINTL,
    pub nRadius: DWORD,
    pub eStartAngle: FLOAT,
    pub eSweepAngle: FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRANGLEARC"][::std::mem::size_of::<tagEMRANGLEARC>() - 28usize];
    ["Alignment of tagEMRANGLEARC"][::std::mem::align_of::<tagEMRANGLEARC>() - 4usize];
    ["Offset of field: tagEMRANGLEARC::emr"][::std::mem::offset_of!(tagEMRANGLEARC, emr) - 0usize];
    ["Offset of field: tagEMRANGLEARC::ptlCenter"]
        [::std::mem::offset_of!(tagEMRANGLEARC, ptlCenter) - 8usize];
    ["Offset of field: tagEMRANGLEARC::nRadius"]
        [::std::mem::offset_of!(tagEMRANGLEARC, nRadius) - 16usize];
    ["Offset of field: tagEMRANGLEARC::eStartAngle"]
        [::std::mem::offset_of!(tagEMRANGLEARC, eStartAngle) - 20usize];
    ["Offset of field: tagEMRANGLEARC::eSweepAngle"]
        [::std::mem::offset_of!(tagEMRANGLEARC, eSweepAngle) - 24usize];
};
pub type EMRANGLEARC = tagEMRANGLEARC;
pub type PEMRANGLEARC = *mut tagEMRANGLEARC;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYLINE {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cptl: DWORD,
    pub aptl: [POINTL; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYLINE"][::std::mem::size_of::<tagEMRPOLYLINE>() - 36usize];
    ["Alignment of tagEMRPOLYLINE"][::std::mem::align_of::<tagEMRPOLYLINE>() - 4usize];
    ["Offset of field: tagEMRPOLYLINE::emr"][::std::mem::offset_of!(tagEMRPOLYLINE, emr) - 0usize];
    ["Offset of field: tagEMRPOLYLINE::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYLINE, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYLINE::cptl"]
        [::std::mem::offset_of!(tagEMRPOLYLINE, cptl) - 24usize];
    ["Offset of field: tagEMRPOLYLINE::aptl"]
        [::std::mem::offset_of!(tagEMRPOLYLINE, aptl) - 28usize];
};
pub type EMRPOLYLINE = tagEMRPOLYLINE;
pub type PEMRPOLYLINE = *mut tagEMRPOLYLINE;
pub type EMRPOLYBEZIER = tagEMRPOLYLINE;
pub type PEMRPOLYBEZIER = *mut tagEMRPOLYLINE;
pub type EMRPOLYGON = tagEMRPOLYLINE;
pub type PEMRPOLYGON = *mut tagEMRPOLYLINE;
pub type EMRPOLYBEZIERTO = tagEMRPOLYLINE;
pub type PEMRPOLYBEZIERTO = *mut tagEMRPOLYLINE;
pub type EMRPOLYLINETO = tagEMRPOLYLINE;
pub type PEMRPOLYLINETO = *mut tagEMRPOLYLINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYLINE16 {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cpts: DWORD,
    pub apts: [POINTS; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYLINE16"][::std::mem::size_of::<tagEMRPOLYLINE16>() - 32usize];
    ["Alignment of tagEMRPOLYLINE16"][::std::mem::align_of::<tagEMRPOLYLINE16>() - 4usize];
    ["Offset of field: tagEMRPOLYLINE16::emr"]
        [::std::mem::offset_of!(tagEMRPOLYLINE16, emr) - 0usize];
    ["Offset of field: tagEMRPOLYLINE16::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYLINE16, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYLINE16::cpts"]
        [::std::mem::offset_of!(tagEMRPOLYLINE16, cpts) - 24usize];
    ["Offset of field: tagEMRPOLYLINE16::apts"]
        [::std::mem::offset_of!(tagEMRPOLYLINE16, apts) - 28usize];
};
pub type EMRPOLYLINE16 = tagEMRPOLYLINE16;
pub type PEMRPOLYLINE16 = *mut tagEMRPOLYLINE16;
pub type EMRPOLYBEZIER16 = tagEMRPOLYLINE16;
pub type PEMRPOLYBEZIER16 = *mut tagEMRPOLYLINE16;
pub type EMRPOLYGON16 = tagEMRPOLYLINE16;
pub type PEMRPOLYGON16 = *mut tagEMRPOLYLINE16;
pub type EMRPOLYBEZIERTO16 = tagEMRPOLYLINE16;
pub type PEMRPOLYBEZIERTO16 = *mut tagEMRPOLYLINE16;
pub type EMRPOLYLINETO16 = tagEMRPOLYLINE16;
pub type PEMRPOLYLINETO16 = *mut tagEMRPOLYLINE16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYDRAW {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cptl: DWORD,
    pub aptl: [POINTL; 1usize],
    pub abTypes: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYDRAW"][::std::mem::size_of::<tagEMRPOLYDRAW>() - 40usize];
    ["Alignment of tagEMRPOLYDRAW"][::std::mem::align_of::<tagEMRPOLYDRAW>() - 4usize];
    ["Offset of field: tagEMRPOLYDRAW::emr"][::std::mem::offset_of!(tagEMRPOLYDRAW, emr) - 0usize];
    ["Offset of field: tagEMRPOLYDRAW::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYDRAW::cptl"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW, cptl) - 24usize];
    ["Offset of field: tagEMRPOLYDRAW::aptl"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW, aptl) - 28usize];
    ["Offset of field: tagEMRPOLYDRAW::abTypes"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW, abTypes) - 36usize];
};
pub type EMRPOLYDRAW = tagEMRPOLYDRAW;
pub type PEMRPOLYDRAW = *mut tagEMRPOLYDRAW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYDRAW16 {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cpts: DWORD,
    pub apts: [POINTS; 1usize],
    pub abTypes: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYDRAW16"][::std::mem::size_of::<tagEMRPOLYDRAW16>() - 36usize];
    ["Alignment of tagEMRPOLYDRAW16"][::std::mem::align_of::<tagEMRPOLYDRAW16>() - 4usize];
    ["Offset of field: tagEMRPOLYDRAW16::emr"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW16, emr) - 0usize];
    ["Offset of field: tagEMRPOLYDRAW16::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW16, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYDRAW16::cpts"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW16, cpts) - 24usize];
    ["Offset of field: tagEMRPOLYDRAW16::apts"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW16, apts) - 28usize];
    ["Offset of field: tagEMRPOLYDRAW16::abTypes"]
        [::std::mem::offset_of!(tagEMRPOLYDRAW16, abTypes) - 32usize];
};
pub type EMRPOLYDRAW16 = tagEMRPOLYDRAW16;
pub type PEMRPOLYDRAW16 = *mut tagEMRPOLYDRAW16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYPOLYLINE {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub nPolys: DWORD,
    pub cptl: DWORD,
    pub aPolyCounts: [DWORD; 1usize],
    pub aptl: [POINTL; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYPOLYLINE"][::std::mem::size_of::<tagEMRPOLYPOLYLINE>() - 44usize];
    ["Alignment of tagEMRPOLYPOLYLINE"][::std::mem::align_of::<tagEMRPOLYPOLYLINE>() - 4usize];
    ["Offset of field: tagEMRPOLYPOLYLINE::emr"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE, emr) - 0usize];
    ["Offset of field: tagEMRPOLYPOLYLINE::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYPOLYLINE::nPolys"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE, nPolys) - 24usize];
    ["Offset of field: tagEMRPOLYPOLYLINE::cptl"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE, cptl) - 28usize];
    ["Offset of field: tagEMRPOLYPOLYLINE::aPolyCounts"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE, aPolyCounts) - 32usize];
    ["Offset of field: tagEMRPOLYPOLYLINE::aptl"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE, aptl) - 36usize];
};
pub type EMRPOLYPOLYLINE = tagEMRPOLYPOLYLINE;
pub type PEMRPOLYPOLYLINE = *mut tagEMRPOLYPOLYLINE;
pub type EMRPOLYPOLYGON = tagEMRPOLYPOLYLINE;
pub type PEMRPOLYPOLYGON = *mut tagEMRPOLYPOLYLINE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYPOLYLINE16 {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub nPolys: DWORD,
    pub cpts: DWORD,
    pub aPolyCounts: [DWORD; 1usize],
    pub apts: [POINTS; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYPOLYLINE16"][::std::mem::size_of::<tagEMRPOLYPOLYLINE16>() - 40usize];
    ["Alignment of tagEMRPOLYPOLYLINE16"][::std::mem::align_of::<tagEMRPOLYPOLYLINE16>() - 4usize];
    ["Offset of field: tagEMRPOLYPOLYLINE16::emr"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE16, emr) - 0usize];
    ["Offset of field: tagEMRPOLYPOLYLINE16::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE16, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYPOLYLINE16::nPolys"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE16, nPolys) - 24usize];
    ["Offset of field: tagEMRPOLYPOLYLINE16::cpts"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE16, cpts) - 28usize];
    ["Offset of field: tagEMRPOLYPOLYLINE16::aPolyCounts"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE16, aPolyCounts) - 32usize];
    ["Offset of field: tagEMRPOLYPOLYLINE16::apts"]
        [::std::mem::offset_of!(tagEMRPOLYPOLYLINE16, apts) - 36usize];
};
pub type EMRPOLYPOLYLINE16 = tagEMRPOLYPOLYLINE16;
pub type PEMRPOLYPOLYLINE16 = *mut tagEMRPOLYPOLYLINE16;
pub type EMRPOLYPOLYGON16 = tagEMRPOLYPOLYLINE16;
pub type PEMRPOLYPOLYGON16 = *mut tagEMRPOLYPOLYLINE16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRINVERTRGN {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cbRgnData: DWORD,
    pub RgnData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRINVERTRGN"][::std::mem::size_of::<tagEMRINVERTRGN>() - 32usize];
    ["Alignment of tagEMRINVERTRGN"][::std::mem::align_of::<tagEMRINVERTRGN>() - 4usize];
    ["Offset of field: tagEMRINVERTRGN::emr"]
        [::std::mem::offset_of!(tagEMRINVERTRGN, emr) - 0usize];
    ["Offset of field: tagEMRINVERTRGN::rclBounds"]
        [::std::mem::offset_of!(tagEMRINVERTRGN, rclBounds) - 8usize];
    ["Offset of field: tagEMRINVERTRGN::cbRgnData"]
        [::std::mem::offset_of!(tagEMRINVERTRGN, cbRgnData) - 24usize];
    ["Offset of field: tagEMRINVERTRGN::RgnData"]
        [::std::mem::offset_of!(tagEMRINVERTRGN, RgnData) - 28usize];
};
pub type EMRINVERTRGN = tagEMRINVERTRGN;
pub type PEMRINVERTRGN = *mut tagEMRINVERTRGN;
pub type EMRPAINTRGN = tagEMRINVERTRGN;
pub type PEMRPAINTRGN = *mut tagEMRINVERTRGN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRFILLRGN {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cbRgnData: DWORD,
    pub ihBrush: DWORD,
    pub RgnData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRFILLRGN"][::std::mem::size_of::<tagEMRFILLRGN>() - 36usize];
    ["Alignment of tagEMRFILLRGN"][::std::mem::align_of::<tagEMRFILLRGN>() - 4usize];
    ["Offset of field: tagEMRFILLRGN::emr"][::std::mem::offset_of!(tagEMRFILLRGN, emr) - 0usize];
    ["Offset of field: tagEMRFILLRGN::rclBounds"]
        [::std::mem::offset_of!(tagEMRFILLRGN, rclBounds) - 8usize];
    ["Offset of field: tagEMRFILLRGN::cbRgnData"]
        [::std::mem::offset_of!(tagEMRFILLRGN, cbRgnData) - 24usize];
    ["Offset of field: tagEMRFILLRGN::ihBrush"]
        [::std::mem::offset_of!(tagEMRFILLRGN, ihBrush) - 28usize];
    ["Offset of field: tagEMRFILLRGN::RgnData"]
        [::std::mem::offset_of!(tagEMRFILLRGN, RgnData) - 32usize];
};
pub type EMRFILLRGN = tagEMRFILLRGN;
pub type PEMRFILLRGN = *mut tagEMRFILLRGN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRFRAMERGN {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cbRgnData: DWORD,
    pub ihBrush: DWORD,
    pub szlStroke: SIZEL,
    pub RgnData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRFRAMERGN"][::std::mem::size_of::<tagEMRFRAMERGN>() - 44usize];
    ["Alignment of tagEMRFRAMERGN"][::std::mem::align_of::<tagEMRFRAMERGN>() - 4usize];
    ["Offset of field: tagEMRFRAMERGN::emr"][::std::mem::offset_of!(tagEMRFRAMERGN, emr) - 0usize];
    ["Offset of field: tagEMRFRAMERGN::rclBounds"]
        [::std::mem::offset_of!(tagEMRFRAMERGN, rclBounds) - 8usize];
    ["Offset of field: tagEMRFRAMERGN::cbRgnData"]
        [::std::mem::offset_of!(tagEMRFRAMERGN, cbRgnData) - 24usize];
    ["Offset of field: tagEMRFRAMERGN::ihBrush"]
        [::std::mem::offset_of!(tagEMRFRAMERGN, ihBrush) - 28usize];
    ["Offset of field: tagEMRFRAMERGN::szlStroke"]
        [::std::mem::offset_of!(tagEMRFRAMERGN, szlStroke) - 32usize];
    ["Offset of field: tagEMRFRAMERGN::RgnData"]
        [::std::mem::offset_of!(tagEMRFRAMERGN, RgnData) - 40usize];
};
pub type EMRFRAMERGN = tagEMRFRAMERGN;
pub type PEMRFRAMERGN = *mut tagEMRFRAMERGN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXTSELECTCLIPRGN {
    pub emr: EMR,
    pub cbRgnData: DWORD,
    pub iMode: DWORD,
    pub RgnData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXTSELECTCLIPRGN"][::std::mem::size_of::<tagEMREXTSELECTCLIPRGN>() - 20usize];
    ["Alignment of tagEMREXTSELECTCLIPRGN"]
        [::std::mem::align_of::<tagEMREXTSELECTCLIPRGN>() - 4usize];
    ["Offset of field: tagEMREXTSELECTCLIPRGN::emr"]
        [::std::mem::offset_of!(tagEMREXTSELECTCLIPRGN, emr) - 0usize];
    ["Offset of field: tagEMREXTSELECTCLIPRGN::cbRgnData"]
        [::std::mem::offset_of!(tagEMREXTSELECTCLIPRGN, cbRgnData) - 8usize];
    ["Offset of field: tagEMREXTSELECTCLIPRGN::iMode"]
        [::std::mem::offset_of!(tagEMREXTSELECTCLIPRGN, iMode) - 12usize];
    ["Offset of field: tagEMREXTSELECTCLIPRGN::RgnData"]
        [::std::mem::offset_of!(tagEMREXTSELECTCLIPRGN, RgnData) - 16usize];
};
pub type EMREXTSELECTCLIPRGN = tagEMREXTSELECTCLIPRGN;
pub type PEMREXTSELECTCLIPRGN = *mut tagEMREXTSELECTCLIPRGN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXTTEXTOUTA {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub iGraphicsMode: DWORD,
    pub exScale: FLOAT,
    pub eyScale: FLOAT,
    pub emrtext: EMRTEXT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXTTEXTOUTA"][::std::mem::size_of::<tagEMREXTTEXTOUTA>() - 76usize];
    ["Alignment of tagEMREXTTEXTOUTA"][::std::mem::align_of::<tagEMREXTTEXTOUTA>() - 4usize];
    ["Offset of field: tagEMREXTTEXTOUTA::emr"]
        [::std::mem::offset_of!(tagEMREXTTEXTOUTA, emr) - 0usize];
    ["Offset of field: tagEMREXTTEXTOUTA::rclBounds"]
        [::std::mem::offset_of!(tagEMREXTTEXTOUTA, rclBounds) - 8usize];
    ["Offset of field: tagEMREXTTEXTOUTA::iGraphicsMode"]
        [::std::mem::offset_of!(tagEMREXTTEXTOUTA, iGraphicsMode) - 24usize];
    ["Offset of field: tagEMREXTTEXTOUTA::exScale"]
        [::std::mem::offset_of!(tagEMREXTTEXTOUTA, exScale) - 28usize];
    ["Offset of field: tagEMREXTTEXTOUTA::eyScale"]
        [::std::mem::offset_of!(tagEMREXTTEXTOUTA, eyScale) - 32usize];
    ["Offset of field: tagEMREXTTEXTOUTA::emrtext"]
        [::std::mem::offset_of!(tagEMREXTTEXTOUTA, emrtext) - 36usize];
};
pub type EMREXTTEXTOUTA = tagEMREXTTEXTOUTA;
pub type PEMREXTTEXTOUTA = *mut tagEMREXTTEXTOUTA;
pub type EMREXTTEXTOUTW = tagEMREXTTEXTOUTA;
pub type PEMREXTTEXTOUTW = *mut tagEMREXTTEXTOUTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPOLYTEXTOUTA {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub iGraphicsMode: DWORD,
    pub exScale: FLOAT,
    pub eyScale: FLOAT,
    pub cStrings: LONG,
    pub aemrtext: [EMRTEXT; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPOLYTEXTOUTA"][::std::mem::size_of::<tagEMRPOLYTEXTOUTA>() - 80usize];
    ["Alignment of tagEMRPOLYTEXTOUTA"][::std::mem::align_of::<tagEMRPOLYTEXTOUTA>() - 4usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::emr"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, emr) - 0usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::rclBounds"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, rclBounds) - 8usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::iGraphicsMode"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, iGraphicsMode) - 24usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::exScale"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, exScale) - 28usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::eyScale"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, eyScale) - 32usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::cStrings"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, cStrings) - 36usize];
    ["Offset of field: tagEMRPOLYTEXTOUTA::aemrtext"]
        [::std::mem::offset_of!(tagEMRPOLYTEXTOUTA, aemrtext) - 40usize];
};
pub type EMRPOLYTEXTOUTA = tagEMRPOLYTEXTOUTA;
pub type PEMRPOLYTEXTOUTA = *mut tagEMRPOLYTEXTOUTA;
pub type EMRPOLYTEXTOUTW = tagEMRPOLYTEXTOUTA;
pub type PEMRPOLYTEXTOUTW = *mut tagEMRPOLYTEXTOUTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRBITBLT {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub cxDest: LONG,
    pub cyDest: LONG,
    pub dwRop: DWORD,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub xformSrc: XFORM,
    pub crBkColorSrc: COLORREF,
    pub iUsageSrc: DWORD,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRBITBLT"][::std::mem::size_of::<tagEMRBITBLT>() - 100usize];
    ["Alignment of tagEMRBITBLT"][::std::mem::align_of::<tagEMRBITBLT>() - 4usize];
    ["Offset of field: tagEMRBITBLT::emr"][::std::mem::offset_of!(tagEMRBITBLT, emr) - 0usize];
    ["Offset of field: tagEMRBITBLT::rclBounds"]
        [::std::mem::offset_of!(tagEMRBITBLT, rclBounds) - 8usize];
    ["Offset of field: tagEMRBITBLT::xDest"][::std::mem::offset_of!(tagEMRBITBLT, xDest) - 24usize];
    ["Offset of field: tagEMRBITBLT::yDest"][::std::mem::offset_of!(tagEMRBITBLT, yDest) - 28usize];
    ["Offset of field: tagEMRBITBLT::cxDest"]
        [::std::mem::offset_of!(tagEMRBITBLT, cxDest) - 32usize];
    ["Offset of field: tagEMRBITBLT::cyDest"]
        [::std::mem::offset_of!(tagEMRBITBLT, cyDest) - 36usize];
    ["Offset of field: tagEMRBITBLT::dwRop"][::std::mem::offset_of!(tagEMRBITBLT, dwRop) - 40usize];
    ["Offset of field: tagEMRBITBLT::xSrc"][::std::mem::offset_of!(tagEMRBITBLT, xSrc) - 44usize];
    ["Offset of field: tagEMRBITBLT::ySrc"][::std::mem::offset_of!(tagEMRBITBLT, ySrc) - 48usize];
    ["Offset of field: tagEMRBITBLT::xformSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, xformSrc) - 52usize];
    ["Offset of field: tagEMRBITBLT::crBkColorSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, crBkColorSrc) - 76usize];
    ["Offset of field: tagEMRBITBLT::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, iUsageSrc) - 80usize];
    ["Offset of field: tagEMRBITBLT::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, offBmiSrc) - 84usize];
    ["Offset of field: tagEMRBITBLT::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, cbBmiSrc) - 88usize];
    ["Offset of field: tagEMRBITBLT::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, offBitsSrc) - 92usize];
    ["Offset of field: tagEMRBITBLT::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRBITBLT, cbBitsSrc) - 96usize];
};
pub type EMRBITBLT = tagEMRBITBLT;
pub type PEMRBITBLT = *mut tagEMRBITBLT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSTRETCHBLT {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub cxDest: LONG,
    pub cyDest: LONG,
    pub dwRop: DWORD,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub xformSrc: XFORM,
    pub crBkColorSrc: COLORREF,
    pub iUsageSrc: DWORD,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub cxSrc: LONG,
    pub cySrc: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSTRETCHBLT"][::std::mem::size_of::<tagEMRSTRETCHBLT>() - 108usize];
    ["Alignment of tagEMRSTRETCHBLT"][::std::mem::align_of::<tagEMRSTRETCHBLT>() - 4usize];
    ["Offset of field: tagEMRSTRETCHBLT::emr"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, emr) - 0usize];
    ["Offset of field: tagEMRSTRETCHBLT::rclBounds"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, rclBounds) - 8usize];
    ["Offset of field: tagEMRSTRETCHBLT::xDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, xDest) - 24usize];
    ["Offset of field: tagEMRSTRETCHBLT::yDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, yDest) - 28usize];
    ["Offset of field: tagEMRSTRETCHBLT::cxDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, cxDest) - 32usize];
    ["Offset of field: tagEMRSTRETCHBLT::cyDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, cyDest) - 36usize];
    ["Offset of field: tagEMRSTRETCHBLT::dwRop"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, dwRop) - 40usize];
    ["Offset of field: tagEMRSTRETCHBLT::xSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, xSrc) - 44usize];
    ["Offset of field: tagEMRSTRETCHBLT::ySrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, ySrc) - 48usize];
    ["Offset of field: tagEMRSTRETCHBLT::xformSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, xformSrc) - 52usize];
    ["Offset of field: tagEMRSTRETCHBLT::crBkColorSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, crBkColorSrc) - 76usize];
    ["Offset of field: tagEMRSTRETCHBLT::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, iUsageSrc) - 80usize];
    ["Offset of field: tagEMRSTRETCHBLT::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, offBmiSrc) - 84usize];
    ["Offset of field: tagEMRSTRETCHBLT::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, cbBmiSrc) - 88usize];
    ["Offset of field: tagEMRSTRETCHBLT::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, offBitsSrc) - 92usize];
    ["Offset of field: tagEMRSTRETCHBLT::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, cbBitsSrc) - 96usize];
    ["Offset of field: tagEMRSTRETCHBLT::cxSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, cxSrc) - 100usize];
    ["Offset of field: tagEMRSTRETCHBLT::cySrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHBLT, cySrc) - 104usize];
};
pub type EMRSTRETCHBLT = tagEMRSTRETCHBLT;
pub type PEMRSTRETCHBLT = *mut tagEMRSTRETCHBLT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRMASKBLT {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub cxDest: LONG,
    pub cyDest: LONG,
    pub dwRop: DWORD,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub xformSrc: XFORM,
    pub crBkColorSrc: COLORREF,
    pub iUsageSrc: DWORD,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub xMask: LONG,
    pub yMask: LONG,
    pub iUsageMask: DWORD,
    pub offBmiMask: DWORD,
    pub cbBmiMask: DWORD,
    pub offBitsMask: DWORD,
    pub cbBitsMask: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRMASKBLT"][::std::mem::size_of::<tagEMRMASKBLT>() - 128usize];
    ["Alignment of tagEMRMASKBLT"][::std::mem::align_of::<tagEMRMASKBLT>() - 4usize];
    ["Offset of field: tagEMRMASKBLT::emr"][::std::mem::offset_of!(tagEMRMASKBLT, emr) - 0usize];
    ["Offset of field: tagEMRMASKBLT::rclBounds"]
        [::std::mem::offset_of!(tagEMRMASKBLT, rclBounds) - 8usize];
    ["Offset of field: tagEMRMASKBLT::xDest"]
        [::std::mem::offset_of!(tagEMRMASKBLT, xDest) - 24usize];
    ["Offset of field: tagEMRMASKBLT::yDest"]
        [::std::mem::offset_of!(tagEMRMASKBLT, yDest) - 28usize];
    ["Offset of field: tagEMRMASKBLT::cxDest"]
        [::std::mem::offset_of!(tagEMRMASKBLT, cxDest) - 32usize];
    ["Offset of field: tagEMRMASKBLT::cyDest"]
        [::std::mem::offset_of!(tagEMRMASKBLT, cyDest) - 36usize];
    ["Offset of field: tagEMRMASKBLT::dwRop"]
        [::std::mem::offset_of!(tagEMRMASKBLT, dwRop) - 40usize];
    ["Offset of field: tagEMRMASKBLT::xSrc"][::std::mem::offset_of!(tagEMRMASKBLT, xSrc) - 44usize];
    ["Offset of field: tagEMRMASKBLT::ySrc"][::std::mem::offset_of!(tagEMRMASKBLT, ySrc) - 48usize];
    ["Offset of field: tagEMRMASKBLT::xformSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, xformSrc) - 52usize];
    ["Offset of field: tagEMRMASKBLT::crBkColorSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, crBkColorSrc) - 76usize];
    ["Offset of field: tagEMRMASKBLT::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, iUsageSrc) - 80usize];
    ["Offset of field: tagEMRMASKBLT::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, offBmiSrc) - 84usize];
    ["Offset of field: tagEMRMASKBLT::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, cbBmiSrc) - 88usize];
    ["Offset of field: tagEMRMASKBLT::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, offBitsSrc) - 92usize];
    ["Offset of field: tagEMRMASKBLT::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRMASKBLT, cbBitsSrc) - 96usize];
    ["Offset of field: tagEMRMASKBLT::xMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, xMask) - 100usize];
    ["Offset of field: tagEMRMASKBLT::yMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, yMask) - 104usize];
    ["Offset of field: tagEMRMASKBLT::iUsageMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, iUsageMask) - 108usize];
    ["Offset of field: tagEMRMASKBLT::offBmiMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, offBmiMask) - 112usize];
    ["Offset of field: tagEMRMASKBLT::cbBmiMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, cbBmiMask) - 116usize];
    ["Offset of field: tagEMRMASKBLT::offBitsMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, offBitsMask) - 120usize];
    ["Offset of field: tagEMRMASKBLT::cbBitsMask"]
        [::std::mem::offset_of!(tagEMRMASKBLT, cbBitsMask) - 124usize];
};
pub type EMRMASKBLT = tagEMRMASKBLT;
pub type PEMRMASKBLT = *mut tagEMRMASKBLT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPLGBLT {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub aptlDest: [POINTL; 3usize],
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub cxSrc: LONG,
    pub cySrc: LONG,
    pub xformSrc: XFORM,
    pub crBkColorSrc: COLORREF,
    pub iUsageSrc: DWORD,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub xMask: LONG,
    pub yMask: LONG,
    pub iUsageMask: DWORD,
    pub offBmiMask: DWORD,
    pub cbBmiMask: DWORD,
    pub offBitsMask: DWORD,
    pub cbBitsMask: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPLGBLT"][::std::mem::size_of::<tagEMRPLGBLT>() - 140usize];
    ["Alignment of tagEMRPLGBLT"][::std::mem::align_of::<tagEMRPLGBLT>() - 4usize];
    ["Offset of field: tagEMRPLGBLT::emr"][::std::mem::offset_of!(tagEMRPLGBLT, emr) - 0usize];
    ["Offset of field: tagEMRPLGBLT::rclBounds"]
        [::std::mem::offset_of!(tagEMRPLGBLT, rclBounds) - 8usize];
    ["Offset of field: tagEMRPLGBLT::aptlDest"]
        [::std::mem::offset_of!(tagEMRPLGBLT, aptlDest) - 24usize];
    ["Offset of field: tagEMRPLGBLT::xSrc"][::std::mem::offset_of!(tagEMRPLGBLT, xSrc) - 48usize];
    ["Offset of field: tagEMRPLGBLT::ySrc"][::std::mem::offset_of!(tagEMRPLGBLT, ySrc) - 52usize];
    ["Offset of field: tagEMRPLGBLT::cxSrc"][::std::mem::offset_of!(tagEMRPLGBLT, cxSrc) - 56usize];
    ["Offset of field: tagEMRPLGBLT::cySrc"][::std::mem::offset_of!(tagEMRPLGBLT, cySrc) - 60usize];
    ["Offset of field: tagEMRPLGBLT::xformSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, xformSrc) - 64usize];
    ["Offset of field: tagEMRPLGBLT::crBkColorSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, crBkColorSrc) - 88usize];
    ["Offset of field: tagEMRPLGBLT::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, iUsageSrc) - 92usize];
    ["Offset of field: tagEMRPLGBLT::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, offBmiSrc) - 96usize];
    ["Offset of field: tagEMRPLGBLT::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, cbBmiSrc) - 100usize];
    ["Offset of field: tagEMRPLGBLT::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, offBitsSrc) - 104usize];
    ["Offset of field: tagEMRPLGBLT::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRPLGBLT, cbBitsSrc) - 108usize];
    ["Offset of field: tagEMRPLGBLT::xMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, xMask) - 112usize];
    ["Offset of field: tagEMRPLGBLT::yMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, yMask) - 116usize];
    ["Offset of field: tagEMRPLGBLT::iUsageMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, iUsageMask) - 120usize];
    ["Offset of field: tagEMRPLGBLT::offBmiMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, offBmiMask) - 124usize];
    ["Offset of field: tagEMRPLGBLT::cbBmiMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, cbBmiMask) - 128usize];
    ["Offset of field: tagEMRPLGBLT::offBitsMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, offBitsMask) - 132usize];
    ["Offset of field: tagEMRPLGBLT::cbBitsMask"]
        [::std::mem::offset_of!(tagEMRPLGBLT, cbBitsMask) - 136usize];
};
pub type EMRPLGBLT = tagEMRPLGBLT;
pub type PEMRPLGBLT = *mut tagEMRPLGBLT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETDIBITSTODEVICE {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub cxSrc: LONG,
    pub cySrc: LONG,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub iUsageSrc: DWORD,
    pub iStartScan: DWORD,
    pub cScans: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETDIBITSTODEVICE"][::std::mem::size_of::<tagEMRSETDIBITSTODEVICE>() - 76usize];
    ["Alignment of tagEMRSETDIBITSTODEVICE"]
        [::std::mem::align_of::<tagEMRSETDIBITSTODEVICE>() - 4usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::emr"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, emr) - 0usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::rclBounds"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, rclBounds) - 8usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::xDest"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, xDest) - 24usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::yDest"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, yDest) - 28usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::xSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, xSrc) - 32usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::ySrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, ySrc) - 36usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::cxSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, cxSrc) - 40usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::cySrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, cySrc) - 44usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, offBmiSrc) - 48usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, cbBmiSrc) - 52usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, offBitsSrc) - 56usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, cbBitsSrc) - 60usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, iUsageSrc) - 64usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::iStartScan"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, iStartScan) - 68usize];
    ["Offset of field: tagEMRSETDIBITSTODEVICE::cScans"]
        [::std::mem::offset_of!(tagEMRSETDIBITSTODEVICE, cScans) - 72usize];
};
pub type EMRSETDIBITSTODEVICE = tagEMRSETDIBITSTODEVICE;
pub type PEMRSETDIBITSTODEVICE = *mut tagEMRSETDIBITSTODEVICE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSTRETCHDIBITS {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub cxSrc: LONG,
    pub cySrc: LONG,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub iUsageSrc: DWORD,
    pub dwRop: DWORD,
    pub cxDest: LONG,
    pub cyDest: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSTRETCHDIBITS"][::std::mem::size_of::<tagEMRSTRETCHDIBITS>() - 80usize];
    ["Alignment of tagEMRSTRETCHDIBITS"][::std::mem::align_of::<tagEMRSTRETCHDIBITS>() - 4usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::emr"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, emr) - 0usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::rclBounds"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, rclBounds) - 8usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::xDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, xDest) - 24usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::yDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, yDest) - 28usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::xSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, xSrc) - 32usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::ySrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, ySrc) - 36usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::cxSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, cxSrc) - 40usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::cySrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, cySrc) - 44usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, offBmiSrc) - 48usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, cbBmiSrc) - 52usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, offBitsSrc) - 56usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, cbBitsSrc) - 60usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, iUsageSrc) - 64usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::dwRop"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, dwRop) - 68usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::cxDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, cxDest) - 72usize];
    ["Offset of field: tagEMRSTRETCHDIBITS::cyDest"]
        [::std::mem::offset_of!(tagEMRSTRETCHDIBITS, cyDest) - 76usize];
};
pub type EMRSTRETCHDIBITS = tagEMRSTRETCHDIBITS;
pub type PEMRSTRETCHDIBITS = *mut tagEMRSTRETCHDIBITS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXTCREATEFONTINDIRECTW {
    pub emr: EMR,
    pub ihFont: DWORD,
    pub elfw: EXTLOGFONTW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXTCREATEFONTINDIRECTW"]
        [::std::mem::size_of::<tagEMREXTCREATEFONTINDIRECTW>() - 332usize];
    ["Alignment of tagEMREXTCREATEFONTINDIRECTW"]
        [::std::mem::align_of::<tagEMREXTCREATEFONTINDIRECTW>() - 4usize];
    ["Offset of field: tagEMREXTCREATEFONTINDIRECTW::emr"]
        [::std::mem::offset_of!(tagEMREXTCREATEFONTINDIRECTW, emr) - 0usize];
    ["Offset of field: tagEMREXTCREATEFONTINDIRECTW::ihFont"]
        [::std::mem::offset_of!(tagEMREXTCREATEFONTINDIRECTW, ihFont) - 8usize];
    ["Offset of field: tagEMREXTCREATEFONTINDIRECTW::elfw"]
        [::std::mem::offset_of!(tagEMREXTCREATEFONTINDIRECTW, elfw) - 12usize];
};
pub type EMREXTCREATEFONTINDIRECTW = tagEMREXTCREATEFONTINDIRECTW;
pub type PEMREXTCREATEFONTINDIRECTW = *mut tagEMREXTCREATEFONTINDIRECTW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATEPALETTE {
    pub emr: EMR,
    pub ihPal: DWORD,
    pub lgpl: LOGPALETTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATEPALETTE"][::std::mem::size_of::<tagEMRCREATEPALETTE>() - 20usize];
    ["Alignment of tagEMRCREATEPALETTE"][::std::mem::align_of::<tagEMRCREATEPALETTE>() - 4usize];
    ["Offset of field: tagEMRCREATEPALETTE::emr"]
        [::std::mem::offset_of!(tagEMRCREATEPALETTE, emr) - 0usize];
    ["Offset of field: tagEMRCREATEPALETTE::ihPal"]
        [::std::mem::offset_of!(tagEMRCREATEPALETTE, ihPal) - 8usize];
    ["Offset of field: tagEMRCREATEPALETTE::lgpl"]
        [::std::mem::offset_of!(tagEMRCREATEPALETTE, lgpl) - 12usize];
};
pub type EMRCREATEPALETTE = tagEMRCREATEPALETTE;
pub type PEMRCREATEPALETTE = *mut tagEMRCREATEPALETTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATEPEN {
    pub emr: EMR,
    pub ihPen: DWORD,
    pub lopn: LOGPEN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATEPEN"][::std::mem::size_of::<tagEMRCREATEPEN>() - 28usize];
    ["Alignment of tagEMRCREATEPEN"][::std::mem::align_of::<tagEMRCREATEPEN>() - 4usize];
    ["Offset of field: tagEMRCREATEPEN::emr"]
        [::std::mem::offset_of!(tagEMRCREATEPEN, emr) - 0usize];
    ["Offset of field: tagEMRCREATEPEN::ihPen"]
        [::std::mem::offset_of!(tagEMRCREATEPEN, ihPen) - 8usize];
    ["Offset of field: tagEMRCREATEPEN::lopn"]
        [::std::mem::offset_of!(tagEMRCREATEPEN, lopn) - 12usize];
};
pub type EMRCREATEPEN = tagEMRCREATEPEN;
pub type PEMRCREATEPEN = *mut tagEMRCREATEPEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXTCREATEPEN {
    pub emr: EMR,
    pub ihPen: DWORD,
    pub offBmi: DWORD,
    pub cbBmi: DWORD,
    pub offBits: DWORD,
    pub cbBits: DWORD,
    pub elp: EXTLOGPEN32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXTCREATEPEN"][::std::mem::size_of::<tagEMREXTCREATEPEN>() - 56usize];
    ["Alignment of tagEMREXTCREATEPEN"][::std::mem::align_of::<tagEMREXTCREATEPEN>() - 4usize];
    ["Offset of field: tagEMREXTCREATEPEN::emr"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, emr) - 0usize];
    ["Offset of field: tagEMREXTCREATEPEN::ihPen"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, ihPen) - 8usize];
    ["Offset of field: tagEMREXTCREATEPEN::offBmi"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, offBmi) - 12usize];
    ["Offset of field: tagEMREXTCREATEPEN::cbBmi"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, cbBmi) - 16usize];
    ["Offset of field: tagEMREXTCREATEPEN::offBits"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, offBits) - 20usize];
    ["Offset of field: tagEMREXTCREATEPEN::cbBits"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, cbBits) - 24usize];
    ["Offset of field: tagEMREXTCREATEPEN::elp"]
        [::std::mem::offset_of!(tagEMREXTCREATEPEN, elp) - 28usize];
};
pub type EMREXTCREATEPEN = tagEMREXTCREATEPEN;
pub type PEMREXTCREATEPEN = *mut tagEMREXTCREATEPEN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATEBRUSHINDIRECT {
    pub emr: EMR,
    pub ihBrush: DWORD,
    pub lb: LOGBRUSH32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATEBRUSHINDIRECT"]
        [::std::mem::size_of::<tagEMRCREATEBRUSHINDIRECT>() - 24usize];
    ["Alignment of tagEMRCREATEBRUSHINDIRECT"]
        [::std::mem::align_of::<tagEMRCREATEBRUSHINDIRECT>() - 4usize];
    ["Offset of field: tagEMRCREATEBRUSHINDIRECT::emr"]
        [::std::mem::offset_of!(tagEMRCREATEBRUSHINDIRECT, emr) - 0usize];
    ["Offset of field: tagEMRCREATEBRUSHINDIRECT::ihBrush"]
        [::std::mem::offset_of!(tagEMRCREATEBRUSHINDIRECT, ihBrush) - 8usize];
    ["Offset of field: tagEMRCREATEBRUSHINDIRECT::lb"]
        [::std::mem::offset_of!(tagEMRCREATEBRUSHINDIRECT, lb) - 12usize];
};
pub type EMRCREATEBRUSHINDIRECT = tagEMRCREATEBRUSHINDIRECT;
pub type PEMRCREATEBRUSHINDIRECT = *mut tagEMRCREATEBRUSHINDIRECT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATEMONOBRUSH {
    pub emr: EMR,
    pub ihBrush: DWORD,
    pub iUsage: DWORD,
    pub offBmi: DWORD,
    pub cbBmi: DWORD,
    pub offBits: DWORD,
    pub cbBits: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATEMONOBRUSH"][::std::mem::size_of::<tagEMRCREATEMONOBRUSH>() - 32usize];
    ["Alignment of tagEMRCREATEMONOBRUSH"]
        [::std::mem::align_of::<tagEMRCREATEMONOBRUSH>() - 4usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::emr"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, emr) - 0usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::ihBrush"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, ihBrush) - 8usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::iUsage"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, iUsage) - 12usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::offBmi"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, offBmi) - 16usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::cbBmi"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, cbBmi) - 20usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::offBits"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, offBits) - 24usize];
    ["Offset of field: tagEMRCREATEMONOBRUSH::cbBits"]
        [::std::mem::offset_of!(tagEMRCREATEMONOBRUSH, cbBits) - 28usize];
};
pub type EMRCREATEMONOBRUSH = tagEMRCREATEMONOBRUSH;
pub type PEMRCREATEMONOBRUSH = *mut tagEMRCREATEMONOBRUSH;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATEDIBPATTERNBRUSHPT {
    pub emr: EMR,
    pub ihBrush: DWORD,
    pub iUsage: DWORD,
    pub offBmi: DWORD,
    pub cbBmi: DWORD,
    pub offBits: DWORD,
    pub cbBits: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATEDIBPATTERNBRUSHPT"]
        [::std::mem::size_of::<tagEMRCREATEDIBPATTERNBRUSHPT>() - 32usize];
    ["Alignment of tagEMRCREATEDIBPATTERNBRUSHPT"]
        [::std::mem::align_of::<tagEMRCREATEDIBPATTERNBRUSHPT>() - 4usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::emr"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, emr) - 0usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::ihBrush"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, ihBrush) - 8usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::iUsage"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, iUsage) - 12usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::offBmi"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, offBmi) - 16usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::cbBmi"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, cbBmi) - 20usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::offBits"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, offBits) - 24usize];
    ["Offset of field: tagEMRCREATEDIBPATTERNBRUSHPT::cbBits"]
        [::std::mem::offset_of!(tagEMRCREATEDIBPATTERNBRUSHPT, cbBits) - 28usize];
};
pub type EMRCREATEDIBPATTERNBRUSHPT = tagEMRCREATEDIBPATTERNBRUSHPT;
pub type PEMRCREATEDIBPATTERNBRUSHPT = *mut tagEMRCREATEDIBPATTERNBRUSHPT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRFORMAT {
    pub dSignature: DWORD,
    pub nVersion: DWORD,
    pub cbData: DWORD,
    pub offData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRFORMAT"][::std::mem::size_of::<tagEMRFORMAT>() - 16usize];
    ["Alignment of tagEMRFORMAT"][::std::mem::align_of::<tagEMRFORMAT>() - 4usize];
    ["Offset of field: tagEMRFORMAT::dSignature"]
        [::std::mem::offset_of!(tagEMRFORMAT, dSignature) - 0usize];
    ["Offset of field: tagEMRFORMAT::nVersion"]
        [::std::mem::offset_of!(tagEMRFORMAT, nVersion) - 4usize];
    ["Offset of field: tagEMRFORMAT::cbData"]
        [::std::mem::offset_of!(tagEMRFORMAT, cbData) - 8usize];
    ["Offset of field: tagEMRFORMAT::offData"]
        [::std::mem::offset_of!(tagEMRFORMAT, offData) - 12usize];
};
pub type EMRFORMAT = tagEMRFORMAT;
pub type PEMRFORMAT = *mut tagEMRFORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRGLSRECORD {
    pub emr: EMR,
    pub cbData: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRGLSRECORD"][::std::mem::size_of::<tagEMRGLSRECORD>() - 16usize];
    ["Alignment of tagEMRGLSRECORD"][::std::mem::align_of::<tagEMRGLSRECORD>() - 4usize];
    ["Offset of field: tagEMRGLSRECORD::emr"]
        [::std::mem::offset_of!(tagEMRGLSRECORD, emr) - 0usize];
    ["Offset of field: tagEMRGLSRECORD::cbData"]
        [::std::mem::offset_of!(tagEMRGLSRECORD, cbData) - 8usize];
    ["Offset of field: tagEMRGLSRECORD::Data"]
        [::std::mem::offset_of!(tagEMRGLSRECORD, Data) - 12usize];
};
pub type EMRGLSRECORD = tagEMRGLSRECORD;
pub type PEMRGLSRECORD = *mut tagEMRGLSRECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRGLSBOUNDEDRECORD {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub cbData: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRGLSBOUNDEDRECORD"][::std::mem::size_of::<tagEMRGLSBOUNDEDRECORD>() - 32usize];
    ["Alignment of tagEMRGLSBOUNDEDRECORD"]
        [::std::mem::align_of::<tagEMRGLSBOUNDEDRECORD>() - 4usize];
    ["Offset of field: tagEMRGLSBOUNDEDRECORD::emr"]
        [::std::mem::offset_of!(tagEMRGLSBOUNDEDRECORD, emr) - 0usize];
    ["Offset of field: tagEMRGLSBOUNDEDRECORD::rclBounds"]
        [::std::mem::offset_of!(tagEMRGLSBOUNDEDRECORD, rclBounds) - 8usize];
    ["Offset of field: tagEMRGLSBOUNDEDRECORD::cbData"]
        [::std::mem::offset_of!(tagEMRGLSBOUNDEDRECORD, cbData) - 24usize];
    ["Offset of field: tagEMRGLSBOUNDEDRECORD::Data"]
        [::std::mem::offset_of!(tagEMRGLSBOUNDEDRECORD, Data) - 28usize];
};
pub type EMRGLSBOUNDEDRECORD = tagEMRGLSBOUNDEDRECORD;
pub type PEMRGLSBOUNDEDRECORD = *mut tagEMRGLSBOUNDEDRECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRPIXELFORMAT {
    pub emr: EMR,
    pub pfd: PIXELFORMATDESCRIPTOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRPIXELFORMAT"][::std::mem::size_of::<tagEMRPIXELFORMAT>() - 48usize];
    ["Alignment of tagEMRPIXELFORMAT"][::std::mem::align_of::<tagEMRPIXELFORMAT>() - 4usize];
    ["Offset of field: tagEMRPIXELFORMAT::emr"]
        [::std::mem::offset_of!(tagEMRPIXELFORMAT, emr) - 0usize];
    ["Offset of field: tagEMRPIXELFORMAT::pfd"]
        [::std::mem::offset_of!(tagEMRPIXELFORMAT, pfd) - 8usize];
};
pub type EMRPIXELFORMAT = tagEMRPIXELFORMAT;
pub type PEMRPIXELFORMAT = *mut tagEMRPIXELFORMAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATECOLORSPACE {
    pub emr: EMR,
    pub ihCS: DWORD,
    pub lcs: LOGCOLORSPACEA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATECOLORSPACE"][::std::mem::size_of::<tagEMRCREATECOLORSPACE>() - 340usize];
    ["Alignment of tagEMRCREATECOLORSPACE"]
        [::std::mem::align_of::<tagEMRCREATECOLORSPACE>() - 4usize];
    ["Offset of field: tagEMRCREATECOLORSPACE::emr"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACE, emr) - 0usize];
    ["Offset of field: tagEMRCREATECOLORSPACE::ihCS"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACE, ihCS) - 8usize];
    ["Offset of field: tagEMRCREATECOLORSPACE::lcs"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACE, lcs) - 12usize];
};
pub type EMRCREATECOLORSPACE = tagEMRCREATECOLORSPACE;
pub type PEMRCREATECOLORSPACE = *mut tagEMRCREATECOLORSPACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETCOLORSPACE {
    pub emr: EMR,
    pub ihCS: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETCOLORSPACE"][::std::mem::size_of::<tagEMRSETCOLORSPACE>() - 12usize];
    ["Alignment of tagEMRSETCOLORSPACE"][::std::mem::align_of::<tagEMRSETCOLORSPACE>() - 4usize];
    ["Offset of field: tagEMRSETCOLORSPACE::emr"]
        [::std::mem::offset_of!(tagEMRSETCOLORSPACE, emr) - 0usize];
    ["Offset of field: tagEMRSETCOLORSPACE::ihCS"]
        [::std::mem::offset_of!(tagEMRSETCOLORSPACE, ihCS) - 8usize];
};
pub type EMRSETCOLORSPACE = tagEMRSETCOLORSPACE;
pub type PEMRSETCOLORSPACE = *mut tagEMRSETCOLORSPACE;
pub type EMRSELECTCOLORSPACE = tagEMRSETCOLORSPACE;
pub type PEMRSELECTCOLORSPACE = *mut tagEMRSETCOLORSPACE;
pub type EMRDELETECOLORSPACE = tagEMRSETCOLORSPACE;
pub type PEMRDELETECOLORSPACE = *mut tagEMRSETCOLORSPACE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMREXTESCAPE {
    pub emr: EMR,
    pub iEscape: INT,
    pub cbEscData: INT,
    pub EscData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMREXTESCAPE"][::std::mem::size_of::<tagEMREXTESCAPE>() - 20usize];
    ["Alignment of tagEMREXTESCAPE"][::std::mem::align_of::<tagEMREXTESCAPE>() - 4usize];
    ["Offset of field: tagEMREXTESCAPE::emr"]
        [::std::mem::offset_of!(tagEMREXTESCAPE, emr) - 0usize];
    ["Offset of field: tagEMREXTESCAPE::iEscape"]
        [::std::mem::offset_of!(tagEMREXTESCAPE, iEscape) - 8usize];
    ["Offset of field: tagEMREXTESCAPE::cbEscData"]
        [::std::mem::offset_of!(tagEMREXTESCAPE, cbEscData) - 12usize];
    ["Offset of field: tagEMREXTESCAPE::EscData"]
        [::std::mem::offset_of!(tagEMREXTESCAPE, EscData) - 16usize];
};
pub type EMREXTESCAPE = tagEMREXTESCAPE;
pub type PEMREXTESCAPE = *mut tagEMREXTESCAPE;
pub type EMRDRAWESCAPE = tagEMREXTESCAPE;
pub type PEMRDRAWESCAPE = *mut tagEMREXTESCAPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRNAMEDESCAPE {
    pub emr: EMR,
    pub iEscape: INT,
    pub cbDriver: INT,
    pub cbEscData: INT,
    pub EscData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRNAMEDESCAPE"][::std::mem::size_of::<tagEMRNAMEDESCAPE>() - 24usize];
    ["Alignment of tagEMRNAMEDESCAPE"][::std::mem::align_of::<tagEMRNAMEDESCAPE>() - 4usize];
    ["Offset of field: tagEMRNAMEDESCAPE::emr"]
        [::std::mem::offset_of!(tagEMRNAMEDESCAPE, emr) - 0usize];
    ["Offset of field: tagEMRNAMEDESCAPE::iEscape"]
        [::std::mem::offset_of!(tagEMRNAMEDESCAPE, iEscape) - 8usize];
    ["Offset of field: tagEMRNAMEDESCAPE::cbDriver"]
        [::std::mem::offset_of!(tagEMRNAMEDESCAPE, cbDriver) - 12usize];
    ["Offset of field: tagEMRNAMEDESCAPE::cbEscData"]
        [::std::mem::offset_of!(tagEMRNAMEDESCAPE, cbEscData) - 16usize];
    ["Offset of field: tagEMRNAMEDESCAPE::EscData"]
        [::std::mem::offset_of!(tagEMRNAMEDESCAPE, EscData) - 20usize];
};
pub type EMRNAMEDESCAPE = tagEMRNAMEDESCAPE;
pub type PEMRNAMEDESCAPE = *mut tagEMRNAMEDESCAPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRSETICMPROFILE {
    pub emr: EMR,
    pub dwFlags: DWORD,
    pub cbName: DWORD,
    pub cbData: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRSETICMPROFILE"][::std::mem::size_of::<tagEMRSETICMPROFILE>() - 24usize];
    ["Alignment of tagEMRSETICMPROFILE"][::std::mem::align_of::<tagEMRSETICMPROFILE>() - 4usize];
    ["Offset of field: tagEMRSETICMPROFILE::emr"]
        [::std::mem::offset_of!(tagEMRSETICMPROFILE, emr) - 0usize];
    ["Offset of field: tagEMRSETICMPROFILE::dwFlags"]
        [::std::mem::offset_of!(tagEMRSETICMPROFILE, dwFlags) - 8usize];
    ["Offset of field: tagEMRSETICMPROFILE::cbName"]
        [::std::mem::offset_of!(tagEMRSETICMPROFILE, cbName) - 12usize];
    ["Offset of field: tagEMRSETICMPROFILE::cbData"]
        [::std::mem::offset_of!(tagEMRSETICMPROFILE, cbData) - 16usize];
    ["Offset of field: tagEMRSETICMPROFILE::Data"]
        [::std::mem::offset_of!(tagEMRSETICMPROFILE, Data) - 20usize];
};
pub type EMRSETICMPROFILE = tagEMRSETICMPROFILE;
pub type PEMRSETICMPROFILE = *mut tagEMRSETICMPROFILE;
pub type EMRSETICMPROFILEA = tagEMRSETICMPROFILE;
pub type PEMRSETICMPROFILEA = *mut tagEMRSETICMPROFILE;
pub type EMRSETICMPROFILEW = tagEMRSETICMPROFILE;
pub type PEMRSETICMPROFILEW = *mut tagEMRSETICMPROFILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRCREATECOLORSPACEW {
    pub emr: EMR,
    pub ihCS: DWORD,
    pub lcs: LOGCOLORSPACEW,
    pub dwFlags: DWORD,
    pub cbData: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRCREATECOLORSPACEW"]
        [::std::mem::size_of::<tagEMRCREATECOLORSPACEW>() - 612usize];
    ["Alignment of tagEMRCREATECOLORSPACEW"]
        [::std::mem::align_of::<tagEMRCREATECOLORSPACEW>() - 4usize];
    ["Offset of field: tagEMRCREATECOLORSPACEW::emr"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACEW, emr) - 0usize];
    ["Offset of field: tagEMRCREATECOLORSPACEW::ihCS"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACEW, ihCS) - 8usize];
    ["Offset of field: tagEMRCREATECOLORSPACEW::lcs"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACEW, lcs) - 12usize];
    ["Offset of field: tagEMRCREATECOLORSPACEW::dwFlags"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACEW, dwFlags) - 600usize];
    ["Offset of field: tagEMRCREATECOLORSPACEW::cbData"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACEW, cbData) - 604usize];
    ["Offset of field: tagEMRCREATECOLORSPACEW::Data"]
        [::std::mem::offset_of!(tagEMRCREATECOLORSPACEW, Data) - 608usize];
};
pub type EMRCREATECOLORSPACEW = tagEMRCREATECOLORSPACEW;
pub type PEMRCREATECOLORSPACEW = *mut tagEMRCREATECOLORSPACEW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOLORMATCHTOTARGET {
    pub emr: EMR,
    pub dwAction: DWORD,
    pub dwFlags: DWORD,
    pub cbName: DWORD,
    pub cbData: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOLORMATCHTOTARGET"][::std::mem::size_of::<tagCOLORMATCHTOTARGET>() - 28usize];
    ["Alignment of tagCOLORMATCHTOTARGET"]
        [::std::mem::align_of::<tagCOLORMATCHTOTARGET>() - 4usize];
    ["Offset of field: tagCOLORMATCHTOTARGET::emr"]
        [::std::mem::offset_of!(tagCOLORMATCHTOTARGET, emr) - 0usize];
    ["Offset of field: tagCOLORMATCHTOTARGET::dwAction"]
        [::std::mem::offset_of!(tagCOLORMATCHTOTARGET, dwAction) - 8usize];
    ["Offset of field: tagCOLORMATCHTOTARGET::dwFlags"]
        [::std::mem::offset_of!(tagCOLORMATCHTOTARGET, dwFlags) - 12usize];
    ["Offset of field: tagCOLORMATCHTOTARGET::cbName"]
        [::std::mem::offset_of!(tagCOLORMATCHTOTARGET, cbName) - 16usize];
    ["Offset of field: tagCOLORMATCHTOTARGET::cbData"]
        [::std::mem::offset_of!(tagCOLORMATCHTOTARGET, cbData) - 20usize];
    ["Offset of field: tagCOLORMATCHTOTARGET::Data"]
        [::std::mem::offset_of!(tagCOLORMATCHTOTARGET, Data) - 24usize];
};
pub type EMRCOLORMATCHTOTARGET = tagCOLORMATCHTOTARGET;
pub type PEMRCOLORMATCHTOTARGET = *mut tagCOLORMATCHTOTARGET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOLORCORRECTPALETTE {
    pub emr: EMR,
    pub ihPalette: DWORD,
    pub nFirstEntry: DWORD,
    pub nPalEntries: DWORD,
    pub nReserved: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOLORCORRECTPALETTE"][::std::mem::size_of::<tagCOLORCORRECTPALETTE>() - 24usize];
    ["Alignment of tagCOLORCORRECTPALETTE"]
        [::std::mem::align_of::<tagCOLORCORRECTPALETTE>() - 4usize];
    ["Offset of field: tagCOLORCORRECTPALETTE::emr"]
        [::std::mem::offset_of!(tagCOLORCORRECTPALETTE, emr) - 0usize];
    ["Offset of field: tagCOLORCORRECTPALETTE::ihPalette"]
        [::std::mem::offset_of!(tagCOLORCORRECTPALETTE, ihPalette) - 8usize];
    ["Offset of field: tagCOLORCORRECTPALETTE::nFirstEntry"]
        [::std::mem::offset_of!(tagCOLORCORRECTPALETTE, nFirstEntry) - 12usize];
    ["Offset of field: tagCOLORCORRECTPALETTE::nPalEntries"]
        [::std::mem::offset_of!(tagCOLORCORRECTPALETTE, nPalEntries) - 16usize];
    ["Offset of field: tagCOLORCORRECTPALETTE::nReserved"]
        [::std::mem::offset_of!(tagCOLORCORRECTPALETTE, nReserved) - 20usize];
};
pub type EMRCOLORCORRECTPALETTE = tagCOLORCORRECTPALETTE;
pub type PEMRCOLORCORRECTPALETTE = *mut tagCOLORCORRECTPALETTE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRALPHABLEND {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub cxDest: LONG,
    pub cyDest: LONG,
    pub dwRop: DWORD,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub xformSrc: XFORM,
    pub crBkColorSrc: COLORREF,
    pub iUsageSrc: DWORD,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub cxSrc: LONG,
    pub cySrc: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRALPHABLEND"][::std::mem::size_of::<tagEMRALPHABLEND>() - 108usize];
    ["Alignment of tagEMRALPHABLEND"][::std::mem::align_of::<tagEMRALPHABLEND>() - 4usize];
    ["Offset of field: tagEMRALPHABLEND::emr"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, emr) - 0usize];
    ["Offset of field: tagEMRALPHABLEND::rclBounds"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, rclBounds) - 8usize];
    ["Offset of field: tagEMRALPHABLEND::xDest"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, xDest) - 24usize];
    ["Offset of field: tagEMRALPHABLEND::yDest"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, yDest) - 28usize];
    ["Offset of field: tagEMRALPHABLEND::cxDest"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, cxDest) - 32usize];
    ["Offset of field: tagEMRALPHABLEND::cyDest"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, cyDest) - 36usize];
    ["Offset of field: tagEMRALPHABLEND::dwRop"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, dwRop) - 40usize];
    ["Offset of field: tagEMRALPHABLEND::xSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, xSrc) - 44usize];
    ["Offset of field: tagEMRALPHABLEND::ySrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, ySrc) - 48usize];
    ["Offset of field: tagEMRALPHABLEND::xformSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, xformSrc) - 52usize];
    ["Offset of field: tagEMRALPHABLEND::crBkColorSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, crBkColorSrc) - 76usize];
    ["Offset of field: tagEMRALPHABLEND::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, iUsageSrc) - 80usize];
    ["Offset of field: tagEMRALPHABLEND::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, offBmiSrc) - 84usize];
    ["Offset of field: tagEMRALPHABLEND::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, cbBmiSrc) - 88usize];
    ["Offset of field: tagEMRALPHABLEND::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, offBitsSrc) - 92usize];
    ["Offset of field: tagEMRALPHABLEND::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, cbBitsSrc) - 96usize];
    ["Offset of field: tagEMRALPHABLEND::cxSrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, cxSrc) - 100usize];
    ["Offset of field: tagEMRALPHABLEND::cySrc"]
        [::std::mem::offset_of!(tagEMRALPHABLEND, cySrc) - 104usize];
};
pub type EMRALPHABLEND = tagEMRALPHABLEND;
pub type PEMRALPHABLEND = *mut tagEMRALPHABLEND;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRGRADIENTFILL {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub nVer: DWORD,
    pub nTri: DWORD,
    pub ulMode: ULONG,
    pub Ver: [TRIVERTEX; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRGRADIENTFILL"][::std::mem::size_of::<tagEMRGRADIENTFILL>() - 52usize];
    ["Alignment of tagEMRGRADIENTFILL"][::std::mem::align_of::<tagEMRGRADIENTFILL>() - 4usize];
    ["Offset of field: tagEMRGRADIENTFILL::emr"]
        [::std::mem::offset_of!(tagEMRGRADIENTFILL, emr) - 0usize];
    ["Offset of field: tagEMRGRADIENTFILL::rclBounds"]
        [::std::mem::offset_of!(tagEMRGRADIENTFILL, rclBounds) - 8usize];
    ["Offset of field: tagEMRGRADIENTFILL::nVer"]
        [::std::mem::offset_of!(tagEMRGRADIENTFILL, nVer) - 24usize];
    ["Offset of field: tagEMRGRADIENTFILL::nTri"]
        [::std::mem::offset_of!(tagEMRGRADIENTFILL, nTri) - 28usize];
    ["Offset of field: tagEMRGRADIENTFILL::ulMode"]
        [::std::mem::offset_of!(tagEMRGRADIENTFILL, ulMode) - 32usize];
    ["Offset of field: tagEMRGRADIENTFILL::Ver"]
        [::std::mem::offset_of!(tagEMRGRADIENTFILL, Ver) - 36usize];
};
pub type EMRGRADIENTFILL = tagEMRGRADIENTFILL;
pub type PEMRGRADIENTFILL = *mut tagEMRGRADIENTFILL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEMRTRANSPARENTBLT {
    pub emr: EMR,
    pub rclBounds: RECTL,
    pub xDest: LONG,
    pub yDest: LONG,
    pub cxDest: LONG,
    pub cyDest: LONG,
    pub dwRop: DWORD,
    pub xSrc: LONG,
    pub ySrc: LONG,
    pub xformSrc: XFORM,
    pub crBkColorSrc: COLORREF,
    pub iUsageSrc: DWORD,
    pub offBmiSrc: DWORD,
    pub cbBmiSrc: DWORD,
    pub offBitsSrc: DWORD,
    pub cbBitsSrc: DWORD,
    pub cxSrc: LONG,
    pub cySrc: LONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEMRTRANSPARENTBLT"][::std::mem::size_of::<tagEMRTRANSPARENTBLT>() - 108usize];
    ["Alignment of tagEMRTRANSPARENTBLT"][::std::mem::align_of::<tagEMRTRANSPARENTBLT>() - 4usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::emr"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, emr) - 0usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::rclBounds"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, rclBounds) - 8usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::xDest"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, xDest) - 24usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::yDest"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, yDest) - 28usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::cxDest"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, cxDest) - 32usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::cyDest"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, cyDest) - 36usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::dwRop"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, dwRop) - 40usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::xSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, xSrc) - 44usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::ySrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, ySrc) - 48usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::xformSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, xformSrc) - 52usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::crBkColorSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, crBkColorSrc) - 76usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::iUsageSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, iUsageSrc) - 80usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::offBmiSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, offBmiSrc) - 84usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::cbBmiSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, cbBmiSrc) - 88usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::offBitsSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, offBitsSrc) - 92usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::cbBitsSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, cbBitsSrc) - 96usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::cxSrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, cxSrc) - 100usize];
    ["Offset of field: tagEMRTRANSPARENTBLT::cySrc"]
        [::std::mem::offset_of!(tagEMRTRANSPARENTBLT, cySrc) - 104usize];
};
pub type EMRTRANSPARENTBLT = tagEMRTRANSPARENTBLT;
pub type PEMRTRANSPARENTBLT = *mut tagEMRTRANSPARENTBLT;
unsafe extern "C" {
    pub fn wglCopyContext(arg1: HGLRC, arg2: HGLRC, arg3: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn wglCreateContext(arg1: HDC) -> HGLRC;
}
unsafe extern "C" {
    pub fn wglCreateLayerContext(arg1: HDC, arg2: ::std::os::raw::c_int) -> HGLRC;
}
unsafe extern "C" {
    pub fn wglDeleteContext(arg1: HGLRC) -> BOOL;
}
unsafe extern "C" {
    pub fn wglGetCurrentContext() -> HGLRC;
}
unsafe extern "C" {
    pub fn wglGetCurrentDC() -> HDC;
}
unsafe extern "C" {
    pub fn wglGetProcAddress(arg1: LPCSTR) -> PROC;
}
unsafe extern "C" {
    pub fn wglMakeCurrent(arg1: HDC, arg2: HGLRC) -> BOOL;
}
unsafe extern "C" {
    pub fn wglShareLists(arg1: HGLRC, arg2: HGLRC) -> BOOL;
}
unsafe extern "C" {
    pub fn wglUseFontBitmapsA(arg1: HDC, arg2: DWORD, arg3: DWORD, arg4: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn wglUseFontBitmapsW(arg1: HDC, arg2: DWORD, arg3: DWORD, arg4: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SwapBuffers(arg1: HDC) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINTFLOAT {
    pub x: FLOAT,
    pub y: FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINTFLOAT"][::std::mem::size_of::<_POINTFLOAT>() - 8usize];
    ["Alignment of _POINTFLOAT"][::std::mem::align_of::<_POINTFLOAT>() - 4usize];
    ["Offset of field: _POINTFLOAT::x"][::std::mem::offset_of!(_POINTFLOAT, x) - 0usize];
    ["Offset of field: _POINTFLOAT::y"][::std::mem::offset_of!(_POINTFLOAT, y) - 4usize];
};
pub type POINTFLOAT = _POINTFLOAT;
pub type PPOINTFLOAT = *mut _POINTFLOAT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLYPHMETRICSFLOAT {
    pub gmfBlackBoxX: FLOAT,
    pub gmfBlackBoxY: FLOAT,
    pub gmfptGlyphOrigin: POINTFLOAT,
    pub gmfCellIncX: FLOAT,
    pub gmfCellIncY: FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GLYPHMETRICSFLOAT"][::std::mem::size_of::<_GLYPHMETRICSFLOAT>() - 24usize];
    ["Alignment of _GLYPHMETRICSFLOAT"][::std::mem::align_of::<_GLYPHMETRICSFLOAT>() - 4usize];
    ["Offset of field: _GLYPHMETRICSFLOAT::gmfBlackBoxX"]
        [::std::mem::offset_of!(_GLYPHMETRICSFLOAT, gmfBlackBoxX) - 0usize];
    ["Offset of field: _GLYPHMETRICSFLOAT::gmfBlackBoxY"]
        [::std::mem::offset_of!(_GLYPHMETRICSFLOAT, gmfBlackBoxY) - 4usize];
    ["Offset of field: _GLYPHMETRICSFLOAT::gmfptGlyphOrigin"]
        [::std::mem::offset_of!(_GLYPHMETRICSFLOAT, gmfptGlyphOrigin) - 8usize];
    ["Offset of field: _GLYPHMETRICSFLOAT::gmfCellIncX"]
        [::std::mem::offset_of!(_GLYPHMETRICSFLOAT, gmfCellIncX) - 16usize];
    ["Offset of field: _GLYPHMETRICSFLOAT::gmfCellIncY"]
        [::std::mem::offset_of!(_GLYPHMETRICSFLOAT, gmfCellIncY) - 20usize];
};
pub type GLYPHMETRICSFLOAT = _GLYPHMETRICSFLOAT;
pub type PGLYPHMETRICSFLOAT = *mut _GLYPHMETRICSFLOAT;
pub type LPGLYPHMETRICSFLOAT = *mut _GLYPHMETRICSFLOAT;
unsafe extern "C" {
    pub fn wglUseFontOutlinesA(
        arg1: HDC,
        arg2: DWORD,
        arg3: DWORD,
        arg4: DWORD,
        arg5: FLOAT,
        arg6: FLOAT,
        arg7: ::std::os::raw::c_int,
        arg8: LPGLYPHMETRICSFLOAT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn wglUseFontOutlinesW(
        arg1: HDC,
        arg2: DWORD,
        arg3: DWORD,
        arg4: DWORD,
        arg5: FLOAT,
        arg6: FLOAT,
        arg7: ::std::os::raw::c_int,
        arg8: LPGLYPHMETRICSFLOAT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLAYERPLANEDESCRIPTOR {
    pub nSize: WORD,
    pub nVersion: WORD,
    pub dwFlags: DWORD,
    pub iPixelType: BYTE,
    pub cColorBits: BYTE,
    pub cRedBits: BYTE,
    pub cRedShift: BYTE,
    pub cGreenBits: BYTE,
    pub cGreenShift: BYTE,
    pub cBlueBits: BYTE,
    pub cBlueShift: BYTE,
    pub cAlphaBits: BYTE,
    pub cAlphaShift: BYTE,
    pub cAccumBits: BYTE,
    pub cAccumRedBits: BYTE,
    pub cAccumGreenBits: BYTE,
    pub cAccumBlueBits: BYTE,
    pub cAccumAlphaBits: BYTE,
    pub cDepthBits: BYTE,
    pub cStencilBits: BYTE,
    pub cAuxBuffers: BYTE,
    pub iLayerPlane: BYTE,
    pub bReserved: BYTE,
    pub crTransparent: COLORREF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLAYERPLANEDESCRIPTOR"][::std::mem::size_of::<tagLAYERPLANEDESCRIPTOR>() - 32usize];
    ["Alignment of tagLAYERPLANEDESCRIPTOR"]
        [::std::mem::align_of::<tagLAYERPLANEDESCRIPTOR>() - 4usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::nSize"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, nSize) - 0usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::nVersion"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, nVersion) - 2usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::dwFlags"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, dwFlags) - 4usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::iPixelType"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, iPixelType) - 8usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cColorBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cColorBits) - 9usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cRedBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cRedBits) - 10usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cRedShift"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cRedShift) - 11usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cGreenBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cGreenBits) - 12usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cGreenShift"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cGreenShift) - 13usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cBlueBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cBlueBits) - 14usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cBlueShift"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cBlueShift) - 15usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAlphaBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAlphaBits) - 16usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAlphaShift"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAlphaShift) - 17usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAccumBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAccumBits) - 18usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAccumRedBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAccumRedBits) - 19usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAccumGreenBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAccumGreenBits) - 20usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAccumBlueBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAccumBlueBits) - 21usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAccumAlphaBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAccumAlphaBits) - 22usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cDepthBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cDepthBits) - 23usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cStencilBits"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cStencilBits) - 24usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::cAuxBuffers"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, cAuxBuffers) - 25usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::iLayerPlane"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, iLayerPlane) - 26usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::bReserved"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, bReserved) - 27usize];
    ["Offset of field: tagLAYERPLANEDESCRIPTOR::crTransparent"]
        [::std::mem::offset_of!(tagLAYERPLANEDESCRIPTOR, crTransparent) - 28usize];
};
pub type LAYERPLANEDESCRIPTOR = tagLAYERPLANEDESCRIPTOR;
pub type PLAYERPLANEDESCRIPTOR = *mut tagLAYERPLANEDESCRIPTOR;
pub type LPLAYERPLANEDESCRIPTOR = *mut tagLAYERPLANEDESCRIPTOR;
unsafe extern "C" {
    pub fn wglDescribeLayerPlane(
        arg1: HDC,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: UINT,
        arg5: LPLAYERPLANEDESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn wglSetLayerPaletteEntries(
        arg1: HDC,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *const COLORREF,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wglGetLayerPaletteEntries(
        arg1: HDC,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut COLORREF,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wglRealizeLayerPalette(arg1: HDC, arg2: ::std::os::raw::c_int, arg3: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn wglSwapLayerBuffers(arg1: HDC, arg2: UINT) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WGLSWAP {
    pub hdc: HDC,
    pub uiFlags: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WGLSWAP"][::std::mem::size_of::<_WGLSWAP>() - 16usize];
    ["Alignment of _WGLSWAP"][::std::mem::align_of::<_WGLSWAP>() - 8usize];
    ["Offset of field: _WGLSWAP::hdc"][::std::mem::offset_of!(_WGLSWAP, hdc) - 0usize];
    ["Offset of field: _WGLSWAP::uiFlags"][::std::mem::offset_of!(_WGLSWAP, uiFlags) - 8usize];
};
pub type WGLSWAP = _WGLSWAP;
pub type PWGLSWAP = *mut _WGLSWAP;
pub type LPWGLSWAP = *mut _WGLSWAP;
unsafe extern "C" {
    pub fn wglSwapMultipleBuffers(arg1: UINT, arg2: *const WGLSWAP) -> DWORD;
}
pub type HDWP = HANDLE;
pub type MENUTEMPLATEA = ::std::os::raw::c_void;
pub type MENUTEMPLATEW = ::std::os::raw::c_void;
pub type MENUTEMPLATE = MENUTEMPLATEA;
pub type LPMENUTEMPLATEA = PVOID;
pub type LPMENUTEMPLATEW = PVOID;
pub type LPMENUTEMPLATE = LPMENUTEMPLATEA;
pub type WNDPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: HWND, arg2: UINT, arg3: WPARAM, arg4: LPARAM) -> LRESULT,
>;
pub type DLGPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: HWND, arg2: UINT, arg3: WPARAM, arg4: LPARAM) -> INT_PTR,
>;
pub type TIMERPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: HWND, arg2: UINT, arg3: UINT_PTR, arg4: DWORD),
>;
pub type GRAYSTRINGPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: HDC, arg2: LPARAM, arg3: ::std::os::raw::c_int) -> BOOL,
>;
pub type WNDENUMPROC =
    ::std::option::Option<unsafe extern "C" fn(arg1: HWND, arg2: LPARAM) -> BOOL>;
pub type HOOKPROC = ::std::option::Option<
    unsafe extern "C" fn(code: ::std::os::raw::c_int, wParam: WPARAM, lParam: LPARAM) -> LRESULT,
>;
pub type SENDASYNCPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: HWND, arg2: UINT, arg3: ULONG_PTR, arg4: LRESULT),
>;
pub type PROPENUMPROCA =
    ::std::option::Option<unsafe extern "C" fn(arg1: HWND, arg2: LPCSTR, arg3: HANDLE) -> BOOL>;
pub type PROPENUMPROCW =
    ::std::option::Option<unsafe extern "C" fn(arg1: HWND, arg2: LPCWSTR, arg3: HANDLE) -> BOOL>;
pub type PROPENUMPROCEXA = ::std::option::Option<
    unsafe extern "C" fn(arg1: HWND, arg2: LPSTR, arg3: HANDLE, arg4: ULONG_PTR) -> BOOL,
>;
pub type PROPENUMPROCEXW = ::std::option::Option<
    unsafe extern "C" fn(arg1: HWND, arg2: LPWSTR, arg3: HANDLE, arg4: ULONG_PTR) -> BOOL,
>;
pub type EDITWORDBREAKPROCA = ::std::option::Option<
    unsafe extern "C" fn(
        lpch: LPSTR,
        ichCurrent: ::std::os::raw::c_int,
        cch: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type EDITWORDBREAKPROCW = ::std::option::Option<
    unsafe extern "C" fn(
        lpch: LPWSTR,
        ichCurrent: ::std::os::raw::c_int,
        cch: ::std::os::raw::c_int,
        code: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type DRAWSTATEPROC = ::std::option::Option<
    unsafe extern "C" fn(
        hdc: HDC,
        lData: LPARAM,
        wData: WPARAM,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
    ) -> BOOL,
>;
pub type PROPENUMPROC = PROPENUMPROCA;
pub type PROPENUMPROCEX = PROPENUMPROCEXA;
pub type EDITWORDBREAKPROC = EDITWORDBREAKPROCA;
pub type NAMEENUMPROCA =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR, arg2: LPARAM) -> BOOL>;
pub type NAMEENUMPROCW =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: LPARAM) -> BOOL>;
pub type WINSTAENUMPROCA = NAMEENUMPROCA;
pub type DESKTOPENUMPROCA = NAMEENUMPROCA;
pub type WINSTAENUMPROCW = NAMEENUMPROCW;
pub type DESKTOPENUMPROCW = NAMEENUMPROCW;
pub type WINSTAENUMPROC = WINSTAENUMPROCA;
pub type DESKTOPENUMPROC = DESKTOPENUMPROCA;
unsafe extern "C" {
    pub fn wvsprintfA(arg1: LPSTR, arg2: LPCSTR, arglist: va_list) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wvsprintfW(arg1: LPWSTR, arg2: LPCWSTR, arglist: va_list) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wsprintfA(arg1: LPSTR, arg2: LPCSTR, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wsprintfW(arg1: LPWSTR, arg2: LPCWSTR, ...) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCBT_CREATEWNDA {
    pub lpcs: *mut tagCREATESTRUCTA,
    pub hwndInsertAfter: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCBT_CREATEWNDA"][::std::mem::size_of::<tagCBT_CREATEWNDA>() - 16usize];
    ["Alignment of tagCBT_CREATEWNDA"][::std::mem::align_of::<tagCBT_CREATEWNDA>() - 8usize];
    ["Offset of field: tagCBT_CREATEWNDA::lpcs"]
        [::std::mem::offset_of!(tagCBT_CREATEWNDA, lpcs) - 0usize];
    ["Offset of field: tagCBT_CREATEWNDA::hwndInsertAfter"]
        [::std::mem::offset_of!(tagCBT_CREATEWNDA, hwndInsertAfter) - 8usize];
};
pub type CBT_CREATEWNDA = tagCBT_CREATEWNDA;
pub type LPCBT_CREATEWNDA = *mut tagCBT_CREATEWNDA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCBT_CREATEWNDW {
    pub lpcs: *mut tagCREATESTRUCTW,
    pub hwndInsertAfter: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCBT_CREATEWNDW"][::std::mem::size_of::<tagCBT_CREATEWNDW>() - 16usize];
    ["Alignment of tagCBT_CREATEWNDW"][::std::mem::align_of::<tagCBT_CREATEWNDW>() - 8usize];
    ["Offset of field: tagCBT_CREATEWNDW::lpcs"]
        [::std::mem::offset_of!(tagCBT_CREATEWNDW, lpcs) - 0usize];
    ["Offset of field: tagCBT_CREATEWNDW::hwndInsertAfter"]
        [::std::mem::offset_of!(tagCBT_CREATEWNDW, hwndInsertAfter) - 8usize];
};
pub type CBT_CREATEWNDW = tagCBT_CREATEWNDW;
pub type LPCBT_CREATEWNDW = *mut tagCBT_CREATEWNDW;
pub type CBT_CREATEWND = CBT_CREATEWNDA;
pub type LPCBT_CREATEWND = LPCBT_CREATEWNDA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCBTACTIVATESTRUCT {
    pub fMouse: BOOL,
    pub hWndActive: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCBTACTIVATESTRUCT"][::std::mem::size_of::<tagCBTACTIVATESTRUCT>() - 16usize];
    ["Alignment of tagCBTACTIVATESTRUCT"][::std::mem::align_of::<tagCBTACTIVATESTRUCT>() - 8usize];
    ["Offset of field: tagCBTACTIVATESTRUCT::fMouse"]
        [::std::mem::offset_of!(tagCBTACTIVATESTRUCT, fMouse) - 0usize];
    ["Offset of field: tagCBTACTIVATESTRUCT::hWndActive"]
        [::std::mem::offset_of!(tagCBTACTIVATESTRUCT, hWndActive) - 8usize];
};
pub type CBTACTIVATESTRUCT = tagCBTACTIVATESTRUCT;
pub type LPCBTACTIVATESTRUCT = *mut tagCBTACTIVATESTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWTSSESSION_NOTIFICATION {
    pub cbSize: DWORD,
    pub dwSessionId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWTSSESSION_NOTIFICATION"]
        [::std::mem::size_of::<tagWTSSESSION_NOTIFICATION>() - 8usize];
    ["Alignment of tagWTSSESSION_NOTIFICATION"]
        [::std::mem::align_of::<tagWTSSESSION_NOTIFICATION>() - 4usize];
    ["Offset of field: tagWTSSESSION_NOTIFICATION::cbSize"]
        [::std::mem::offset_of!(tagWTSSESSION_NOTIFICATION, cbSize) - 0usize];
    ["Offset of field: tagWTSSESSION_NOTIFICATION::dwSessionId"]
        [::std::mem::offset_of!(tagWTSSESSION_NOTIFICATION, dwSessionId) - 4usize];
};
pub type WTSSESSION_NOTIFICATION = tagWTSSESSION_NOTIFICATION;
pub type PWTSSESSION_NOTIFICATION = *mut tagWTSSESSION_NOTIFICATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SHELLHOOKINFO {
    pub hwnd: HWND,
    pub rc: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SHELLHOOKINFO"][::std::mem::size_of::<SHELLHOOKINFO>() - 24usize];
    ["Alignment of SHELLHOOKINFO"][::std::mem::align_of::<SHELLHOOKINFO>() - 8usize];
    ["Offset of field: SHELLHOOKINFO::hwnd"][::std::mem::offset_of!(SHELLHOOKINFO, hwnd) - 0usize];
    ["Offset of field: SHELLHOOKINFO::rc"][::std::mem::offset_of!(SHELLHOOKINFO, rc) - 8usize];
};
pub type LPSHELLHOOKINFO = *mut SHELLHOOKINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagEVENTMSG {
    pub message: UINT,
    pub paramL: UINT,
    pub paramH: UINT,
    pub time: DWORD,
    pub hwnd: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagEVENTMSG"][::std::mem::size_of::<tagEVENTMSG>() - 24usize];
    ["Alignment of tagEVENTMSG"][::std::mem::align_of::<tagEVENTMSG>() - 8usize];
    ["Offset of field: tagEVENTMSG::message"]
        [::std::mem::offset_of!(tagEVENTMSG, message) - 0usize];
    ["Offset of field: tagEVENTMSG::paramL"][::std::mem::offset_of!(tagEVENTMSG, paramL) - 4usize];
    ["Offset of field: tagEVENTMSG::paramH"][::std::mem::offset_of!(tagEVENTMSG, paramH) - 8usize];
    ["Offset of field: tagEVENTMSG::time"][::std::mem::offset_of!(tagEVENTMSG, time) - 12usize];
    ["Offset of field: tagEVENTMSG::hwnd"][::std::mem::offset_of!(tagEVENTMSG, hwnd) - 16usize];
};
pub type EVENTMSG = tagEVENTMSG;
pub type PEVENTMSGMSG = *mut tagEVENTMSG;
pub type NPEVENTMSGMSG = *mut tagEVENTMSG;
pub type LPEVENTMSGMSG = *mut tagEVENTMSG;
pub type PEVENTMSG = *mut tagEVENTMSG;
pub type NPEVENTMSG = *mut tagEVENTMSG;
pub type LPEVENTMSG = *mut tagEVENTMSG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCWPSTRUCT {
    pub lParam: LPARAM,
    pub wParam: WPARAM,
    pub message: UINT,
    pub hwnd: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCWPSTRUCT"][::std::mem::size_of::<tagCWPSTRUCT>() - 32usize];
    ["Alignment of tagCWPSTRUCT"][::std::mem::align_of::<tagCWPSTRUCT>() - 8usize];
    ["Offset of field: tagCWPSTRUCT::lParam"]
        [::std::mem::offset_of!(tagCWPSTRUCT, lParam) - 0usize];
    ["Offset of field: tagCWPSTRUCT::wParam"]
        [::std::mem::offset_of!(tagCWPSTRUCT, wParam) - 8usize];
    ["Offset of field: tagCWPSTRUCT::message"]
        [::std::mem::offset_of!(tagCWPSTRUCT, message) - 16usize];
    ["Offset of field: tagCWPSTRUCT::hwnd"][::std::mem::offset_of!(tagCWPSTRUCT, hwnd) - 24usize];
};
pub type CWPSTRUCT = tagCWPSTRUCT;
pub type PCWPSTRUCT = *mut tagCWPSTRUCT;
pub type NPCWPSTRUCT = *mut tagCWPSTRUCT;
pub type LPCWPSTRUCT = *mut tagCWPSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCWPRETSTRUCT {
    pub lResult: LRESULT,
    pub lParam: LPARAM,
    pub wParam: WPARAM,
    pub message: UINT,
    pub hwnd: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCWPRETSTRUCT"][::std::mem::size_of::<tagCWPRETSTRUCT>() - 40usize];
    ["Alignment of tagCWPRETSTRUCT"][::std::mem::align_of::<tagCWPRETSTRUCT>() - 8usize];
    ["Offset of field: tagCWPRETSTRUCT::lResult"]
        [::std::mem::offset_of!(tagCWPRETSTRUCT, lResult) - 0usize];
    ["Offset of field: tagCWPRETSTRUCT::lParam"]
        [::std::mem::offset_of!(tagCWPRETSTRUCT, lParam) - 8usize];
    ["Offset of field: tagCWPRETSTRUCT::wParam"]
        [::std::mem::offset_of!(tagCWPRETSTRUCT, wParam) - 16usize];
    ["Offset of field: tagCWPRETSTRUCT::message"]
        [::std::mem::offset_of!(tagCWPRETSTRUCT, message) - 24usize];
    ["Offset of field: tagCWPRETSTRUCT::hwnd"]
        [::std::mem::offset_of!(tagCWPRETSTRUCT, hwnd) - 32usize];
};
pub type CWPRETSTRUCT = tagCWPRETSTRUCT;
pub type PCWPRETSTRUCT = *mut tagCWPRETSTRUCT;
pub type NPCWPRETSTRUCT = *mut tagCWPRETSTRUCT;
pub type LPCWPRETSTRUCT = *mut tagCWPRETSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagKBDLLHOOKSTRUCT {
    pub vkCode: DWORD,
    pub scanCode: DWORD,
    pub flags: DWORD,
    pub time: DWORD,
    pub dwExtraInfo: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagKBDLLHOOKSTRUCT"][::std::mem::size_of::<tagKBDLLHOOKSTRUCT>() - 24usize];
    ["Alignment of tagKBDLLHOOKSTRUCT"][::std::mem::align_of::<tagKBDLLHOOKSTRUCT>() - 8usize];
    ["Offset of field: tagKBDLLHOOKSTRUCT::vkCode"]
        [::std::mem::offset_of!(tagKBDLLHOOKSTRUCT, vkCode) - 0usize];
    ["Offset of field: tagKBDLLHOOKSTRUCT::scanCode"]
        [::std::mem::offset_of!(tagKBDLLHOOKSTRUCT, scanCode) - 4usize];
    ["Offset of field: tagKBDLLHOOKSTRUCT::flags"]
        [::std::mem::offset_of!(tagKBDLLHOOKSTRUCT, flags) - 8usize];
    ["Offset of field: tagKBDLLHOOKSTRUCT::time"]
        [::std::mem::offset_of!(tagKBDLLHOOKSTRUCT, time) - 12usize];
    ["Offset of field: tagKBDLLHOOKSTRUCT::dwExtraInfo"]
        [::std::mem::offset_of!(tagKBDLLHOOKSTRUCT, dwExtraInfo) - 16usize];
};
pub type KBDLLHOOKSTRUCT = tagKBDLLHOOKSTRUCT;
pub type LPKBDLLHOOKSTRUCT = *mut tagKBDLLHOOKSTRUCT;
pub type PKBDLLHOOKSTRUCT = *mut tagKBDLLHOOKSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMSLLHOOKSTRUCT {
    pub pt: POINT,
    pub mouseData: DWORD,
    pub flags: DWORD,
    pub time: DWORD,
    pub dwExtraInfo: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMSLLHOOKSTRUCT"][::std::mem::size_of::<tagMSLLHOOKSTRUCT>() - 32usize];
    ["Alignment of tagMSLLHOOKSTRUCT"][::std::mem::align_of::<tagMSLLHOOKSTRUCT>() - 8usize];
    ["Offset of field: tagMSLLHOOKSTRUCT::pt"]
        [::std::mem::offset_of!(tagMSLLHOOKSTRUCT, pt) - 0usize];
    ["Offset of field: tagMSLLHOOKSTRUCT::mouseData"]
        [::std::mem::offset_of!(tagMSLLHOOKSTRUCT, mouseData) - 8usize];
    ["Offset of field: tagMSLLHOOKSTRUCT::flags"]
        [::std::mem::offset_of!(tagMSLLHOOKSTRUCT, flags) - 12usize];
    ["Offset of field: tagMSLLHOOKSTRUCT::time"]
        [::std::mem::offset_of!(tagMSLLHOOKSTRUCT, time) - 16usize];
    ["Offset of field: tagMSLLHOOKSTRUCT::dwExtraInfo"]
        [::std::mem::offset_of!(tagMSLLHOOKSTRUCT, dwExtraInfo) - 24usize];
};
pub type MSLLHOOKSTRUCT = tagMSLLHOOKSTRUCT;
pub type LPMSLLHOOKSTRUCT = *mut tagMSLLHOOKSTRUCT;
pub type PMSLLHOOKSTRUCT = *mut tagMSLLHOOKSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDEBUGHOOKINFO {
    pub idThread: DWORD,
    pub idThreadInstaller: DWORD,
    pub lParam: LPARAM,
    pub wParam: WPARAM,
    pub code: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDEBUGHOOKINFO"][::std::mem::size_of::<tagDEBUGHOOKINFO>() - 32usize];
    ["Alignment of tagDEBUGHOOKINFO"][::std::mem::align_of::<tagDEBUGHOOKINFO>() - 8usize];
    ["Offset of field: tagDEBUGHOOKINFO::idThread"]
        [::std::mem::offset_of!(tagDEBUGHOOKINFO, idThread) - 0usize];
    ["Offset of field: tagDEBUGHOOKINFO::idThreadInstaller"]
        [::std::mem::offset_of!(tagDEBUGHOOKINFO, idThreadInstaller) - 4usize];
    ["Offset of field: tagDEBUGHOOKINFO::lParam"]
        [::std::mem::offset_of!(tagDEBUGHOOKINFO, lParam) - 8usize];
    ["Offset of field: tagDEBUGHOOKINFO::wParam"]
        [::std::mem::offset_of!(tagDEBUGHOOKINFO, wParam) - 16usize];
    ["Offset of field: tagDEBUGHOOKINFO::code"]
        [::std::mem::offset_of!(tagDEBUGHOOKINFO, code) - 24usize];
};
pub type DEBUGHOOKINFO = tagDEBUGHOOKINFO;
pub type PDEBUGHOOKINFO = *mut tagDEBUGHOOKINFO;
pub type NPDEBUGHOOKINFO = *mut tagDEBUGHOOKINFO;
pub type LPDEBUGHOOKINFO = *mut tagDEBUGHOOKINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMOUSEHOOKSTRUCT {
    pub pt: POINT,
    pub hwnd: HWND,
    pub wHitTestCode: UINT,
    pub dwExtraInfo: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMOUSEHOOKSTRUCT"][::std::mem::size_of::<tagMOUSEHOOKSTRUCT>() - 32usize];
    ["Alignment of tagMOUSEHOOKSTRUCT"][::std::mem::align_of::<tagMOUSEHOOKSTRUCT>() - 8usize];
    ["Offset of field: tagMOUSEHOOKSTRUCT::pt"]
        [::std::mem::offset_of!(tagMOUSEHOOKSTRUCT, pt) - 0usize];
    ["Offset of field: tagMOUSEHOOKSTRUCT::hwnd"]
        [::std::mem::offset_of!(tagMOUSEHOOKSTRUCT, hwnd) - 8usize];
    ["Offset of field: tagMOUSEHOOKSTRUCT::wHitTestCode"]
        [::std::mem::offset_of!(tagMOUSEHOOKSTRUCT, wHitTestCode) - 16usize];
    ["Offset of field: tagMOUSEHOOKSTRUCT::dwExtraInfo"]
        [::std::mem::offset_of!(tagMOUSEHOOKSTRUCT, dwExtraInfo) - 24usize];
};
pub type MOUSEHOOKSTRUCT = tagMOUSEHOOKSTRUCT;
pub type LPMOUSEHOOKSTRUCT = *mut tagMOUSEHOOKSTRUCT;
pub type PMOUSEHOOKSTRUCT = *mut tagMOUSEHOOKSTRUCT;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct tagMOUSEHOOKSTRUCTEX {
    pub __bindgen_padding_0: [u32; 8usize],
    pub mouseData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMOUSEHOOKSTRUCTEX"][::std::mem::size_of::<tagMOUSEHOOKSTRUCTEX>() - 40usize];
    ["Alignment of tagMOUSEHOOKSTRUCTEX"][::std::mem::align_of::<tagMOUSEHOOKSTRUCTEX>() - 8usize];
    ["Offset of field: tagMOUSEHOOKSTRUCTEX::mouseData"]
        [::std::mem::offset_of!(tagMOUSEHOOKSTRUCTEX, mouseData) - 32usize];
};
pub type MOUSEHOOKSTRUCTEX = tagMOUSEHOOKSTRUCTEX;
pub type LPMOUSEHOOKSTRUCTEX = *mut tagMOUSEHOOKSTRUCTEX;
pub type PMOUSEHOOKSTRUCTEX = *mut tagMOUSEHOOKSTRUCTEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHARDWAREHOOKSTRUCT {
    pub hwnd: HWND,
    pub message: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHARDWAREHOOKSTRUCT"][::std::mem::size_of::<tagHARDWAREHOOKSTRUCT>() - 32usize];
    ["Alignment of tagHARDWAREHOOKSTRUCT"]
        [::std::mem::align_of::<tagHARDWAREHOOKSTRUCT>() - 8usize];
    ["Offset of field: tagHARDWAREHOOKSTRUCT::hwnd"]
        [::std::mem::offset_of!(tagHARDWAREHOOKSTRUCT, hwnd) - 0usize];
    ["Offset of field: tagHARDWAREHOOKSTRUCT::message"]
        [::std::mem::offset_of!(tagHARDWAREHOOKSTRUCT, message) - 8usize];
    ["Offset of field: tagHARDWAREHOOKSTRUCT::wParam"]
        [::std::mem::offset_of!(tagHARDWAREHOOKSTRUCT, wParam) - 16usize];
    ["Offset of field: tagHARDWAREHOOKSTRUCT::lParam"]
        [::std::mem::offset_of!(tagHARDWAREHOOKSTRUCT, lParam) - 24usize];
};
pub type HARDWAREHOOKSTRUCT = tagHARDWAREHOOKSTRUCT;
pub type LPHARDWAREHOOKSTRUCT = *mut tagHARDWAREHOOKSTRUCT;
pub type PHARDWAREHOOKSTRUCT = *mut tagHARDWAREHOOKSTRUCT;
unsafe extern "C" {
    pub fn LoadKeyboardLayoutA(pwszKLID: LPCSTR, Flags: UINT) -> HKL;
}
unsafe extern "C" {
    pub fn LoadKeyboardLayoutW(pwszKLID: LPCWSTR, Flags: UINT) -> HKL;
}
unsafe extern "C" {
    pub fn ActivateKeyboardLayout(hkl: HKL, Flags: UINT) -> HKL;
}
unsafe extern "C" {
    pub fn ToUnicodeEx(
        wVirtKey: UINT,
        wScanCode: UINT,
        lpKeyState: *const BYTE,
        pwszBuff: LPWSTR,
        cchBuff: ::std::os::raw::c_int,
        wFlags: UINT,
        dwhkl: HKL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UnloadKeyboardLayout(hkl: HKL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetKeyboardLayoutNameA(pwszKLID: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetKeyboardLayoutNameW(pwszKLID: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetKeyboardLayoutList(
        nBuff: ::std::os::raw::c_int,
        lpList: *mut HKL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetKeyboardLayout(idThread: DWORD) -> HKL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMOUSEMOVEPOINT {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub time: DWORD,
    pub dwExtraInfo: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMOUSEMOVEPOINT"][::std::mem::size_of::<tagMOUSEMOVEPOINT>() - 24usize];
    ["Alignment of tagMOUSEMOVEPOINT"][::std::mem::align_of::<tagMOUSEMOVEPOINT>() - 8usize];
    ["Offset of field: tagMOUSEMOVEPOINT::x"]
        [::std::mem::offset_of!(tagMOUSEMOVEPOINT, x) - 0usize];
    ["Offset of field: tagMOUSEMOVEPOINT::y"]
        [::std::mem::offset_of!(tagMOUSEMOVEPOINT, y) - 4usize];
    ["Offset of field: tagMOUSEMOVEPOINT::time"]
        [::std::mem::offset_of!(tagMOUSEMOVEPOINT, time) - 8usize];
    ["Offset of field: tagMOUSEMOVEPOINT::dwExtraInfo"]
        [::std::mem::offset_of!(tagMOUSEMOVEPOINT, dwExtraInfo) - 16usize];
};
pub type MOUSEMOVEPOINT = tagMOUSEMOVEPOINT;
pub type PMOUSEMOVEPOINT = *mut tagMOUSEMOVEPOINT;
pub type LPMOUSEMOVEPOINT = *mut tagMOUSEMOVEPOINT;
unsafe extern "C" {
    pub fn GetMouseMovePointsEx(
        cbSize: UINT,
        lppt: LPMOUSEMOVEPOINT,
        lpptBuf: LPMOUSEMOVEPOINT,
        nBufPoints: ::std::os::raw::c_int,
        resolution: DWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CreateDesktopA(
        lpszDesktop: LPCSTR,
        lpszDevice: LPCSTR,
        pDevmode: *mut DEVMODEA,
        dwFlags: DWORD,
        dwDesiredAccess: ACCESS_MASK,
        lpsa: LPSECURITY_ATTRIBUTES,
    ) -> HDESK;
}
unsafe extern "C" {
    pub fn CreateDesktopW(
        lpszDesktop: LPCWSTR,
        lpszDevice: LPCWSTR,
        pDevmode: *mut DEVMODEW,
        dwFlags: DWORD,
        dwDesiredAccess: ACCESS_MASK,
        lpsa: LPSECURITY_ATTRIBUTES,
    ) -> HDESK;
}
unsafe extern "C" {
    pub fn CreateDesktopExA(
        lpszDesktop: LPCSTR,
        lpszDevice: LPCSTR,
        pDevmode: *mut DEVMODEA,
        dwFlags: DWORD,
        dwDesiredAccess: ACCESS_MASK,
        lpsa: LPSECURITY_ATTRIBUTES,
        ulHeapSize: ULONG,
        pvoid: PVOID,
    ) -> HDESK;
}
unsafe extern "C" {
    pub fn CreateDesktopExW(
        lpszDesktop: LPCWSTR,
        lpszDevice: LPCWSTR,
        pDevmode: *mut DEVMODEW,
        dwFlags: DWORD,
        dwDesiredAccess: ACCESS_MASK,
        lpsa: LPSECURITY_ATTRIBUTES,
        ulHeapSize: ULONG,
        pvoid: PVOID,
    ) -> HDESK;
}
unsafe extern "C" {
    pub fn OpenDesktopA(
        lpszDesktop: LPCSTR,
        dwFlags: DWORD,
        fInherit: BOOL,
        dwDesiredAccess: ACCESS_MASK,
    ) -> HDESK;
}
unsafe extern "C" {
    pub fn OpenDesktopW(
        lpszDesktop: LPCWSTR,
        dwFlags: DWORD,
        fInherit: BOOL,
        dwDesiredAccess: ACCESS_MASK,
    ) -> HDESK;
}
unsafe extern "C" {
    pub fn OpenInputDesktop(dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) -> HDESK;
}
unsafe extern "C" {
    pub fn EnumDesktopsA(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCA, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDesktopsW(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCW, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDesktopWindows(hDesktop: HDESK, lpfn: WNDENUMPROC, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn SwitchDesktop(hDesktop: HDESK) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadDesktop(hDesktop: HDESK) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseDesktop(hDesktop: HDESK) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadDesktop(dwThreadId: DWORD) -> HDESK;
}
unsafe extern "C" {
    pub fn CreateWindowStationA(
        lpwinsta: LPCSTR,
        dwFlags: DWORD,
        dwDesiredAccess: ACCESS_MASK,
        lpsa: LPSECURITY_ATTRIBUTES,
    ) -> HWINSTA;
}
unsafe extern "C" {
    pub fn CreateWindowStationW(
        lpwinsta: LPCWSTR,
        dwFlags: DWORD,
        dwDesiredAccess: ACCESS_MASK,
        lpsa: LPSECURITY_ATTRIBUTES,
    ) -> HWINSTA;
}
unsafe extern "C" {
    pub fn OpenWindowStationA(
        lpszWinSta: LPCSTR,
        fInherit: BOOL,
        dwDesiredAccess: ACCESS_MASK,
    ) -> HWINSTA;
}
unsafe extern "C" {
    pub fn OpenWindowStationW(
        lpszWinSta: LPCWSTR,
        fInherit: BOOL,
        dwDesiredAccess: ACCESS_MASK,
    ) -> HWINSTA;
}
unsafe extern "C" {
    pub fn EnumWindowStationsA(lpEnumFunc: WINSTAENUMPROCA, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumWindowStationsW(lpEnumFunc: WINSTAENUMPROCW, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseWindowStation(hWinSta: HWINSTA) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessWindowStation(hWinSta: HWINSTA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetProcessWindowStation() -> HWINSTA;
}
unsafe extern "C" {
    pub fn SetUserObjectSecurity(
        hObj: HANDLE,
        pSIRequested: PSECURITY_INFORMATION,
        pSID: PSECURITY_DESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserObjectSecurity(
        hObj: HANDLE,
        pSIRequested: PSECURITY_INFORMATION,
        pSID: PSECURITY_DESCRIPTOR,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagUSEROBJECTFLAGS {
    pub fInherit: BOOL,
    pub fReserved: BOOL,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagUSEROBJECTFLAGS"][::std::mem::size_of::<tagUSEROBJECTFLAGS>() - 12usize];
    ["Alignment of tagUSEROBJECTFLAGS"][::std::mem::align_of::<tagUSEROBJECTFLAGS>() - 4usize];
    ["Offset of field: tagUSEROBJECTFLAGS::fInherit"]
        [::std::mem::offset_of!(tagUSEROBJECTFLAGS, fInherit) - 0usize];
    ["Offset of field: tagUSEROBJECTFLAGS::fReserved"]
        [::std::mem::offset_of!(tagUSEROBJECTFLAGS, fReserved) - 4usize];
    ["Offset of field: tagUSEROBJECTFLAGS::dwFlags"]
        [::std::mem::offset_of!(tagUSEROBJECTFLAGS, dwFlags) - 8usize];
};
pub type USEROBJECTFLAGS = tagUSEROBJECTFLAGS;
pub type PUSEROBJECTFLAGS = *mut tagUSEROBJECTFLAGS;
unsafe extern "C" {
    pub fn GetUserObjectInformationA(
        hObj: HANDLE,
        nIndex: ::std::os::raw::c_int,
        pvInfo: PVOID,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserObjectInformationW(
        hObj: HANDLE,
        nIndex: ::std::os::raw::c_int,
        pvInfo: PVOID,
        nLength: DWORD,
        lpnLengthNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetUserObjectInformationA(
        hObj: HANDLE,
        nIndex: ::std::os::raw::c_int,
        pvInfo: PVOID,
        nLength: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetUserObjectInformationW(
        hObj: HANDLE,
        nIndex: ::std::os::raw::c_int,
        pvInfo: PVOID,
        nLength: DWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWNDCLASSEXA {
    pub cbSize: UINT,
    pub style: UINT,
    pub lpfnWndProc: WNDPROC,
    pub cbClsExtra: ::std::os::raw::c_int,
    pub cbWndExtra: ::std::os::raw::c_int,
    pub hInstance: HINSTANCE,
    pub hIcon: HICON,
    pub hCursor: HCURSOR,
    pub hbrBackground: HBRUSH,
    pub lpszMenuName: LPCSTR,
    pub lpszClassName: LPCSTR,
    pub hIconSm: HICON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWNDCLASSEXA"][::std::mem::size_of::<tagWNDCLASSEXA>() - 80usize];
    ["Alignment of tagWNDCLASSEXA"][::std::mem::align_of::<tagWNDCLASSEXA>() - 8usize];
    ["Offset of field: tagWNDCLASSEXA::cbSize"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, cbSize) - 0usize];
    ["Offset of field: tagWNDCLASSEXA::style"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, style) - 4usize];
    ["Offset of field: tagWNDCLASSEXA::lpfnWndProc"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, lpfnWndProc) - 8usize];
    ["Offset of field: tagWNDCLASSEXA::cbClsExtra"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, cbClsExtra) - 16usize];
    ["Offset of field: tagWNDCLASSEXA::cbWndExtra"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, cbWndExtra) - 20usize];
    ["Offset of field: tagWNDCLASSEXA::hInstance"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, hInstance) - 24usize];
    ["Offset of field: tagWNDCLASSEXA::hIcon"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, hIcon) - 32usize];
    ["Offset of field: tagWNDCLASSEXA::hCursor"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, hCursor) - 40usize];
    ["Offset of field: tagWNDCLASSEXA::hbrBackground"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, hbrBackground) - 48usize];
    ["Offset of field: tagWNDCLASSEXA::lpszMenuName"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, lpszMenuName) - 56usize];
    ["Offset of field: tagWNDCLASSEXA::lpszClassName"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, lpszClassName) - 64usize];
    ["Offset of field: tagWNDCLASSEXA::hIconSm"]
        [::std::mem::offset_of!(tagWNDCLASSEXA, hIconSm) - 72usize];
};
pub type WNDCLASSEXA = tagWNDCLASSEXA;
pub type PWNDCLASSEXA = *mut tagWNDCLASSEXA;
pub type NPWNDCLASSEXA = *mut tagWNDCLASSEXA;
pub type LPWNDCLASSEXA = *mut tagWNDCLASSEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWNDCLASSEXW {
    pub cbSize: UINT,
    pub style: UINT,
    pub lpfnWndProc: WNDPROC,
    pub cbClsExtra: ::std::os::raw::c_int,
    pub cbWndExtra: ::std::os::raw::c_int,
    pub hInstance: HINSTANCE,
    pub hIcon: HICON,
    pub hCursor: HCURSOR,
    pub hbrBackground: HBRUSH,
    pub lpszMenuName: LPCWSTR,
    pub lpszClassName: LPCWSTR,
    pub hIconSm: HICON,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWNDCLASSEXW"][::std::mem::size_of::<tagWNDCLASSEXW>() - 80usize];
    ["Alignment of tagWNDCLASSEXW"][::std::mem::align_of::<tagWNDCLASSEXW>() - 8usize];
    ["Offset of field: tagWNDCLASSEXW::cbSize"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, cbSize) - 0usize];
    ["Offset of field: tagWNDCLASSEXW::style"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, style) - 4usize];
    ["Offset of field: tagWNDCLASSEXW::lpfnWndProc"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, lpfnWndProc) - 8usize];
    ["Offset of field: tagWNDCLASSEXW::cbClsExtra"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, cbClsExtra) - 16usize];
    ["Offset of field: tagWNDCLASSEXW::cbWndExtra"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, cbWndExtra) - 20usize];
    ["Offset of field: tagWNDCLASSEXW::hInstance"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, hInstance) - 24usize];
    ["Offset of field: tagWNDCLASSEXW::hIcon"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, hIcon) - 32usize];
    ["Offset of field: tagWNDCLASSEXW::hCursor"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, hCursor) - 40usize];
    ["Offset of field: tagWNDCLASSEXW::hbrBackground"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, hbrBackground) - 48usize];
    ["Offset of field: tagWNDCLASSEXW::lpszMenuName"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, lpszMenuName) - 56usize];
    ["Offset of field: tagWNDCLASSEXW::lpszClassName"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, lpszClassName) - 64usize];
    ["Offset of field: tagWNDCLASSEXW::hIconSm"]
        [::std::mem::offset_of!(tagWNDCLASSEXW, hIconSm) - 72usize];
};
pub type WNDCLASSEXW = tagWNDCLASSEXW;
pub type PWNDCLASSEXW = *mut tagWNDCLASSEXW;
pub type NPWNDCLASSEXW = *mut tagWNDCLASSEXW;
pub type LPWNDCLASSEXW = *mut tagWNDCLASSEXW;
pub type WNDCLASSEX = WNDCLASSEXA;
pub type PWNDCLASSEX = PWNDCLASSEXA;
pub type NPWNDCLASSEX = NPWNDCLASSEXA;
pub type LPWNDCLASSEX = LPWNDCLASSEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWNDCLASSA {
    pub style: UINT,
    pub lpfnWndProc: WNDPROC,
    pub cbClsExtra: ::std::os::raw::c_int,
    pub cbWndExtra: ::std::os::raw::c_int,
    pub hInstance: HINSTANCE,
    pub hIcon: HICON,
    pub hCursor: HCURSOR,
    pub hbrBackground: HBRUSH,
    pub lpszMenuName: LPCSTR,
    pub lpszClassName: LPCSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWNDCLASSA"][::std::mem::size_of::<tagWNDCLASSA>() - 72usize];
    ["Alignment of tagWNDCLASSA"][::std::mem::align_of::<tagWNDCLASSA>() - 8usize];
    ["Offset of field: tagWNDCLASSA::style"][::std::mem::offset_of!(tagWNDCLASSA, style) - 0usize];
    ["Offset of field: tagWNDCLASSA::lpfnWndProc"]
        [::std::mem::offset_of!(tagWNDCLASSA, lpfnWndProc) - 8usize];
    ["Offset of field: tagWNDCLASSA::cbClsExtra"]
        [::std::mem::offset_of!(tagWNDCLASSA, cbClsExtra) - 16usize];
    ["Offset of field: tagWNDCLASSA::cbWndExtra"]
        [::std::mem::offset_of!(tagWNDCLASSA, cbWndExtra) - 20usize];
    ["Offset of field: tagWNDCLASSA::hInstance"]
        [::std::mem::offset_of!(tagWNDCLASSA, hInstance) - 24usize];
    ["Offset of field: tagWNDCLASSA::hIcon"][::std::mem::offset_of!(tagWNDCLASSA, hIcon) - 32usize];
    ["Offset of field: tagWNDCLASSA::hCursor"]
        [::std::mem::offset_of!(tagWNDCLASSA, hCursor) - 40usize];
    ["Offset of field: tagWNDCLASSA::hbrBackground"]
        [::std::mem::offset_of!(tagWNDCLASSA, hbrBackground) - 48usize];
    ["Offset of field: tagWNDCLASSA::lpszMenuName"]
        [::std::mem::offset_of!(tagWNDCLASSA, lpszMenuName) - 56usize];
    ["Offset of field: tagWNDCLASSA::lpszClassName"]
        [::std::mem::offset_of!(tagWNDCLASSA, lpszClassName) - 64usize];
};
pub type WNDCLASSA = tagWNDCLASSA;
pub type PWNDCLASSA = *mut tagWNDCLASSA;
pub type NPWNDCLASSA = *mut tagWNDCLASSA;
pub type LPWNDCLASSA = *mut tagWNDCLASSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWNDCLASSW {
    pub style: UINT,
    pub lpfnWndProc: WNDPROC,
    pub cbClsExtra: ::std::os::raw::c_int,
    pub cbWndExtra: ::std::os::raw::c_int,
    pub hInstance: HINSTANCE,
    pub hIcon: HICON,
    pub hCursor: HCURSOR,
    pub hbrBackground: HBRUSH,
    pub lpszMenuName: LPCWSTR,
    pub lpszClassName: LPCWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWNDCLASSW"][::std::mem::size_of::<tagWNDCLASSW>() - 72usize];
    ["Alignment of tagWNDCLASSW"][::std::mem::align_of::<tagWNDCLASSW>() - 8usize];
    ["Offset of field: tagWNDCLASSW::style"][::std::mem::offset_of!(tagWNDCLASSW, style) - 0usize];
    ["Offset of field: tagWNDCLASSW::lpfnWndProc"]
        [::std::mem::offset_of!(tagWNDCLASSW, lpfnWndProc) - 8usize];
    ["Offset of field: tagWNDCLASSW::cbClsExtra"]
        [::std::mem::offset_of!(tagWNDCLASSW, cbClsExtra) - 16usize];
    ["Offset of field: tagWNDCLASSW::cbWndExtra"]
        [::std::mem::offset_of!(tagWNDCLASSW, cbWndExtra) - 20usize];
    ["Offset of field: tagWNDCLASSW::hInstance"]
        [::std::mem::offset_of!(tagWNDCLASSW, hInstance) - 24usize];
    ["Offset of field: tagWNDCLASSW::hIcon"][::std::mem::offset_of!(tagWNDCLASSW, hIcon) - 32usize];
    ["Offset of field: tagWNDCLASSW::hCursor"]
        [::std::mem::offset_of!(tagWNDCLASSW, hCursor) - 40usize];
    ["Offset of field: tagWNDCLASSW::hbrBackground"]
        [::std::mem::offset_of!(tagWNDCLASSW, hbrBackground) - 48usize];
    ["Offset of field: tagWNDCLASSW::lpszMenuName"]
        [::std::mem::offset_of!(tagWNDCLASSW, lpszMenuName) - 56usize];
    ["Offset of field: tagWNDCLASSW::lpszClassName"]
        [::std::mem::offset_of!(tagWNDCLASSW, lpszClassName) - 64usize];
};
pub type WNDCLASSW = tagWNDCLASSW;
pub type PWNDCLASSW = *mut tagWNDCLASSW;
pub type NPWNDCLASSW = *mut tagWNDCLASSW;
pub type LPWNDCLASSW = *mut tagWNDCLASSW;
pub type WNDCLASS = WNDCLASSA;
pub type PWNDCLASS = PWNDCLASSA;
pub type NPWNDCLASS = NPWNDCLASSA;
pub type LPWNDCLASS = LPWNDCLASSA;
unsafe extern "C" {
    pub fn IsHungAppWindow(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn DisableProcessWindowsGhosting();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMSG {
    pub hwnd: HWND,
    pub message: UINT,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
    pub time: DWORD,
    pub pt: POINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMSG"][::std::mem::size_of::<tagMSG>() - 48usize];
    ["Alignment of tagMSG"][::std::mem::align_of::<tagMSG>() - 8usize];
    ["Offset of field: tagMSG::hwnd"][::std::mem::offset_of!(tagMSG, hwnd) - 0usize];
    ["Offset of field: tagMSG::message"][::std::mem::offset_of!(tagMSG, message) - 8usize];
    ["Offset of field: tagMSG::wParam"][::std::mem::offset_of!(tagMSG, wParam) - 16usize];
    ["Offset of field: tagMSG::lParam"][::std::mem::offset_of!(tagMSG, lParam) - 24usize];
    ["Offset of field: tagMSG::time"][::std::mem::offset_of!(tagMSG, time) - 32usize];
    ["Offset of field: tagMSG::pt"][::std::mem::offset_of!(tagMSG, pt) - 36usize];
};
pub type MSG = tagMSG;
pub type PMSG = *mut tagMSG;
pub type NPMSG = *mut tagMSG;
pub type LPMSG = *mut tagMSG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMINMAXINFO {
    pub ptReserved: POINT,
    pub ptMaxSize: POINT,
    pub ptMaxPosition: POINT,
    pub ptMinTrackSize: POINT,
    pub ptMaxTrackSize: POINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMINMAXINFO"][::std::mem::size_of::<tagMINMAXINFO>() - 40usize];
    ["Alignment of tagMINMAXINFO"][::std::mem::align_of::<tagMINMAXINFO>() - 4usize];
    ["Offset of field: tagMINMAXINFO::ptReserved"]
        [::std::mem::offset_of!(tagMINMAXINFO, ptReserved) - 0usize];
    ["Offset of field: tagMINMAXINFO::ptMaxSize"]
        [::std::mem::offset_of!(tagMINMAXINFO, ptMaxSize) - 8usize];
    ["Offset of field: tagMINMAXINFO::ptMaxPosition"]
        [::std::mem::offset_of!(tagMINMAXINFO, ptMaxPosition) - 16usize];
    ["Offset of field: tagMINMAXINFO::ptMinTrackSize"]
        [::std::mem::offset_of!(tagMINMAXINFO, ptMinTrackSize) - 24usize];
    ["Offset of field: tagMINMAXINFO::ptMaxTrackSize"]
        [::std::mem::offset_of!(tagMINMAXINFO, ptMaxTrackSize) - 32usize];
};
pub type MINMAXINFO = tagMINMAXINFO;
pub type PMINMAXINFO = *mut tagMINMAXINFO;
pub type LPMINMAXINFO = *mut tagMINMAXINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOPYDATASTRUCT {
    pub dwData: ULONG_PTR,
    pub cbData: DWORD,
    pub lpData: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOPYDATASTRUCT"][::std::mem::size_of::<tagCOPYDATASTRUCT>() - 24usize];
    ["Alignment of tagCOPYDATASTRUCT"][::std::mem::align_of::<tagCOPYDATASTRUCT>() - 8usize];
    ["Offset of field: tagCOPYDATASTRUCT::dwData"]
        [::std::mem::offset_of!(tagCOPYDATASTRUCT, dwData) - 0usize];
    ["Offset of field: tagCOPYDATASTRUCT::cbData"]
        [::std::mem::offset_of!(tagCOPYDATASTRUCT, cbData) - 8usize];
    ["Offset of field: tagCOPYDATASTRUCT::lpData"]
        [::std::mem::offset_of!(tagCOPYDATASTRUCT, lpData) - 16usize];
};
pub type COPYDATASTRUCT = tagCOPYDATASTRUCT;
pub type PCOPYDATASTRUCT = *mut tagCOPYDATASTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMDINEXTMENU {
    pub hmenuIn: HMENU,
    pub hmenuNext: HMENU,
    pub hwndNext: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMDINEXTMENU"][::std::mem::size_of::<tagMDINEXTMENU>() - 24usize];
    ["Alignment of tagMDINEXTMENU"][::std::mem::align_of::<tagMDINEXTMENU>() - 8usize];
    ["Offset of field: tagMDINEXTMENU::hmenuIn"]
        [::std::mem::offset_of!(tagMDINEXTMENU, hmenuIn) - 0usize];
    ["Offset of field: tagMDINEXTMENU::hmenuNext"]
        [::std::mem::offset_of!(tagMDINEXTMENU, hmenuNext) - 8usize];
    ["Offset of field: tagMDINEXTMENU::hwndNext"]
        [::std::mem::offset_of!(tagMDINEXTMENU, hwndNext) - 16usize];
};
pub type MDINEXTMENU = tagMDINEXTMENU;
pub type PMDINEXTMENU = *mut tagMDINEXTMENU;
pub type LPMDINEXTMENU = *mut tagMDINEXTMENU;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POWERBROADCAST_SETTING {
    pub PowerSetting: GUID,
    pub DataLength: DWORD,
    pub Data: [UCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POWERBROADCAST_SETTING"][::std::mem::size_of::<POWERBROADCAST_SETTING>() - 24usize];
    ["Alignment of POWERBROADCAST_SETTING"]
        [::std::mem::align_of::<POWERBROADCAST_SETTING>() - 4usize];
    ["Offset of field: POWERBROADCAST_SETTING::PowerSetting"]
        [::std::mem::offset_of!(POWERBROADCAST_SETTING, PowerSetting) - 0usize];
    ["Offset of field: POWERBROADCAST_SETTING::DataLength"]
        [::std::mem::offset_of!(POWERBROADCAST_SETTING, DataLength) - 16usize];
    ["Offset of field: POWERBROADCAST_SETTING::Data"]
        [::std::mem::offset_of!(POWERBROADCAST_SETTING, Data) - 20usize];
};
pub type PPOWERBROADCAST_SETTING = *mut POWERBROADCAST_SETTING;
unsafe extern "C" {
    pub fn RegisterWindowMessageA(lpString: LPCSTR) -> UINT;
}
unsafe extern "C" {
    pub fn RegisterWindowMessageW(lpString: LPCWSTR) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWINDOWPOS {
    pub hwnd: HWND,
    pub hwndInsertAfter: HWND,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub flags: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWINDOWPOS"][::std::mem::size_of::<tagWINDOWPOS>() - 40usize];
    ["Alignment of tagWINDOWPOS"][::std::mem::align_of::<tagWINDOWPOS>() - 8usize];
    ["Offset of field: tagWINDOWPOS::hwnd"][::std::mem::offset_of!(tagWINDOWPOS, hwnd) - 0usize];
    ["Offset of field: tagWINDOWPOS::hwndInsertAfter"]
        [::std::mem::offset_of!(tagWINDOWPOS, hwndInsertAfter) - 8usize];
    ["Offset of field: tagWINDOWPOS::x"][::std::mem::offset_of!(tagWINDOWPOS, x) - 16usize];
    ["Offset of field: tagWINDOWPOS::y"][::std::mem::offset_of!(tagWINDOWPOS, y) - 20usize];
    ["Offset of field: tagWINDOWPOS::cx"][::std::mem::offset_of!(tagWINDOWPOS, cx) - 24usize];
    ["Offset of field: tagWINDOWPOS::cy"][::std::mem::offset_of!(tagWINDOWPOS, cy) - 28usize];
    ["Offset of field: tagWINDOWPOS::flags"][::std::mem::offset_of!(tagWINDOWPOS, flags) - 32usize];
};
pub type WINDOWPOS = tagWINDOWPOS;
pub type LPWINDOWPOS = *mut tagWINDOWPOS;
pub type PWINDOWPOS = *mut tagWINDOWPOS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNCCALCSIZE_PARAMS {
    pub rgrc: [RECT; 3usize],
    pub lppos: PWINDOWPOS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNCCALCSIZE_PARAMS"][::std::mem::size_of::<tagNCCALCSIZE_PARAMS>() - 56usize];
    ["Alignment of tagNCCALCSIZE_PARAMS"][::std::mem::align_of::<tagNCCALCSIZE_PARAMS>() - 8usize];
    ["Offset of field: tagNCCALCSIZE_PARAMS::rgrc"]
        [::std::mem::offset_of!(tagNCCALCSIZE_PARAMS, rgrc) - 0usize];
    ["Offset of field: tagNCCALCSIZE_PARAMS::lppos"]
        [::std::mem::offset_of!(tagNCCALCSIZE_PARAMS, lppos) - 48usize];
};
pub type NCCALCSIZE_PARAMS = tagNCCALCSIZE_PARAMS;
pub type LPNCCALCSIZE_PARAMS = *mut tagNCCALCSIZE_PARAMS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTRACKMOUSEEVENT {
    pub cbSize: DWORD,
    pub dwFlags: DWORD,
    pub hwndTrack: HWND,
    pub dwHoverTime: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTRACKMOUSEEVENT"][::std::mem::size_of::<tagTRACKMOUSEEVENT>() - 24usize];
    ["Alignment of tagTRACKMOUSEEVENT"][::std::mem::align_of::<tagTRACKMOUSEEVENT>() - 8usize];
    ["Offset of field: tagTRACKMOUSEEVENT::cbSize"]
        [::std::mem::offset_of!(tagTRACKMOUSEEVENT, cbSize) - 0usize];
    ["Offset of field: tagTRACKMOUSEEVENT::dwFlags"]
        [::std::mem::offset_of!(tagTRACKMOUSEEVENT, dwFlags) - 4usize];
    ["Offset of field: tagTRACKMOUSEEVENT::hwndTrack"]
        [::std::mem::offset_of!(tagTRACKMOUSEEVENT, hwndTrack) - 8usize];
    ["Offset of field: tagTRACKMOUSEEVENT::dwHoverTime"]
        [::std::mem::offset_of!(tagTRACKMOUSEEVENT, dwHoverTime) - 16usize];
};
pub type TRACKMOUSEEVENT = tagTRACKMOUSEEVENT;
pub type LPTRACKMOUSEEVENT = *mut tagTRACKMOUSEEVENT;
unsafe extern "C" {
    pub fn TrackMouseEvent(lpEventTrack: LPTRACKMOUSEEVENT) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawEdge(hdc: HDC, qrc: LPRECT, edge: UINT, grfFlags: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawFrameControl(hdc: HDC, lprc: LPRECT, uType: UINT, uState: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawCaption(hwnd: HWND, hdc: HDC, lprect: *const RECT, flags: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawAnimatedRects(
        hwnd: HWND,
        idAni: ::std::os::raw::c_int,
        lprcFrom: *const RECT,
        lprcTo: *const RECT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACCEL {
    pub fVirt: BYTE,
    pub key: WORD,
    pub cmd: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACCEL"][::std::mem::size_of::<tagACCEL>() - 6usize];
    ["Alignment of tagACCEL"][::std::mem::align_of::<tagACCEL>() - 2usize];
    ["Offset of field: tagACCEL::fVirt"][::std::mem::offset_of!(tagACCEL, fVirt) - 0usize];
    ["Offset of field: tagACCEL::key"][::std::mem::offset_of!(tagACCEL, key) - 2usize];
    ["Offset of field: tagACCEL::cmd"][::std::mem::offset_of!(tagACCEL, cmd) - 4usize];
};
pub type ACCEL = tagACCEL;
pub type LPACCEL = *mut tagACCEL;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPAINTSTRUCT {
    pub hdc: HDC,
    pub fErase: BOOL,
    pub rcPaint: RECT,
    pub fRestore: BOOL,
    pub fIncUpdate: BOOL,
    pub rgbReserved: [BYTE; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPAINTSTRUCT"][::std::mem::size_of::<tagPAINTSTRUCT>() - 72usize];
    ["Alignment of tagPAINTSTRUCT"][::std::mem::align_of::<tagPAINTSTRUCT>() - 8usize];
    ["Offset of field: tagPAINTSTRUCT::hdc"][::std::mem::offset_of!(tagPAINTSTRUCT, hdc) - 0usize];
    ["Offset of field: tagPAINTSTRUCT::fErase"]
        [::std::mem::offset_of!(tagPAINTSTRUCT, fErase) - 8usize];
    ["Offset of field: tagPAINTSTRUCT::rcPaint"]
        [::std::mem::offset_of!(tagPAINTSTRUCT, rcPaint) - 12usize];
    ["Offset of field: tagPAINTSTRUCT::fRestore"]
        [::std::mem::offset_of!(tagPAINTSTRUCT, fRestore) - 28usize];
    ["Offset of field: tagPAINTSTRUCT::fIncUpdate"]
        [::std::mem::offset_of!(tagPAINTSTRUCT, fIncUpdate) - 32usize];
    ["Offset of field: tagPAINTSTRUCT::rgbReserved"]
        [::std::mem::offset_of!(tagPAINTSTRUCT, rgbReserved) - 36usize];
};
pub type PAINTSTRUCT = tagPAINTSTRUCT;
pub type PPAINTSTRUCT = *mut tagPAINTSTRUCT;
pub type NPPAINTSTRUCT = *mut tagPAINTSTRUCT;
pub type LPPAINTSTRUCT = *mut tagPAINTSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCREATESTRUCTA {
    pub lpCreateParams: LPVOID,
    pub hInstance: HINSTANCE,
    pub hMenu: HMENU,
    pub hwndParent: HWND,
    pub cy: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub style: LONG,
    pub lpszName: LPCSTR,
    pub lpszClass: LPCSTR,
    pub dwExStyle: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCREATESTRUCTA"][::std::mem::size_of::<tagCREATESTRUCTA>() - 80usize];
    ["Alignment of tagCREATESTRUCTA"][::std::mem::align_of::<tagCREATESTRUCTA>() - 8usize];
    ["Offset of field: tagCREATESTRUCTA::lpCreateParams"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, lpCreateParams) - 0usize];
    ["Offset of field: tagCREATESTRUCTA::hInstance"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, hInstance) - 8usize];
    ["Offset of field: tagCREATESTRUCTA::hMenu"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, hMenu) - 16usize];
    ["Offset of field: tagCREATESTRUCTA::hwndParent"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, hwndParent) - 24usize];
    ["Offset of field: tagCREATESTRUCTA::cy"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, cy) - 32usize];
    ["Offset of field: tagCREATESTRUCTA::cx"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, cx) - 36usize];
    ["Offset of field: tagCREATESTRUCTA::y"][::std::mem::offset_of!(tagCREATESTRUCTA, y) - 40usize];
    ["Offset of field: tagCREATESTRUCTA::x"][::std::mem::offset_of!(tagCREATESTRUCTA, x) - 44usize];
    ["Offset of field: tagCREATESTRUCTA::style"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, style) - 48usize];
    ["Offset of field: tagCREATESTRUCTA::lpszName"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, lpszName) - 56usize];
    ["Offset of field: tagCREATESTRUCTA::lpszClass"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, lpszClass) - 64usize];
    ["Offset of field: tagCREATESTRUCTA::dwExStyle"]
        [::std::mem::offset_of!(tagCREATESTRUCTA, dwExStyle) - 72usize];
};
pub type CREATESTRUCTA = tagCREATESTRUCTA;
pub type LPCREATESTRUCTA = *mut tagCREATESTRUCTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCREATESTRUCTW {
    pub lpCreateParams: LPVOID,
    pub hInstance: HINSTANCE,
    pub hMenu: HMENU,
    pub hwndParent: HWND,
    pub cy: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub style: LONG,
    pub lpszName: LPCWSTR,
    pub lpszClass: LPCWSTR,
    pub dwExStyle: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCREATESTRUCTW"][::std::mem::size_of::<tagCREATESTRUCTW>() - 80usize];
    ["Alignment of tagCREATESTRUCTW"][::std::mem::align_of::<tagCREATESTRUCTW>() - 8usize];
    ["Offset of field: tagCREATESTRUCTW::lpCreateParams"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, lpCreateParams) - 0usize];
    ["Offset of field: tagCREATESTRUCTW::hInstance"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, hInstance) - 8usize];
    ["Offset of field: tagCREATESTRUCTW::hMenu"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, hMenu) - 16usize];
    ["Offset of field: tagCREATESTRUCTW::hwndParent"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, hwndParent) - 24usize];
    ["Offset of field: tagCREATESTRUCTW::cy"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, cy) - 32usize];
    ["Offset of field: tagCREATESTRUCTW::cx"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, cx) - 36usize];
    ["Offset of field: tagCREATESTRUCTW::y"][::std::mem::offset_of!(tagCREATESTRUCTW, y) - 40usize];
    ["Offset of field: tagCREATESTRUCTW::x"][::std::mem::offset_of!(tagCREATESTRUCTW, x) - 44usize];
    ["Offset of field: tagCREATESTRUCTW::style"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, style) - 48usize];
    ["Offset of field: tagCREATESTRUCTW::lpszName"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, lpszName) - 56usize];
    ["Offset of field: tagCREATESTRUCTW::lpszClass"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, lpszClass) - 64usize];
    ["Offset of field: tagCREATESTRUCTW::dwExStyle"]
        [::std::mem::offset_of!(tagCREATESTRUCTW, dwExStyle) - 72usize];
};
pub type CREATESTRUCTW = tagCREATESTRUCTW;
pub type LPCREATESTRUCTW = *mut tagCREATESTRUCTW;
pub type CREATESTRUCT = CREATESTRUCTA;
pub type LPCREATESTRUCT = LPCREATESTRUCTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWINDOWPLACEMENT {
    pub length: UINT,
    pub flags: UINT,
    pub showCmd: UINT,
    pub ptMinPosition: POINT,
    pub ptMaxPosition: POINT,
    pub rcNormalPosition: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWINDOWPLACEMENT"][::std::mem::size_of::<tagWINDOWPLACEMENT>() - 44usize];
    ["Alignment of tagWINDOWPLACEMENT"][::std::mem::align_of::<tagWINDOWPLACEMENT>() - 4usize];
    ["Offset of field: tagWINDOWPLACEMENT::length"]
        [::std::mem::offset_of!(tagWINDOWPLACEMENT, length) - 0usize];
    ["Offset of field: tagWINDOWPLACEMENT::flags"]
        [::std::mem::offset_of!(tagWINDOWPLACEMENT, flags) - 4usize];
    ["Offset of field: tagWINDOWPLACEMENT::showCmd"]
        [::std::mem::offset_of!(tagWINDOWPLACEMENT, showCmd) - 8usize];
    ["Offset of field: tagWINDOWPLACEMENT::ptMinPosition"]
        [::std::mem::offset_of!(tagWINDOWPLACEMENT, ptMinPosition) - 12usize];
    ["Offset of field: tagWINDOWPLACEMENT::ptMaxPosition"]
        [::std::mem::offset_of!(tagWINDOWPLACEMENT, ptMaxPosition) - 20usize];
    ["Offset of field: tagWINDOWPLACEMENT::rcNormalPosition"]
        [::std::mem::offset_of!(tagWINDOWPLACEMENT, rcNormalPosition) - 28usize];
};
pub type WINDOWPLACEMENT = tagWINDOWPLACEMENT;
pub type PWINDOWPLACEMENT = *mut WINDOWPLACEMENT;
pub type LPWINDOWPLACEMENT = *mut WINDOWPLACEMENT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNMHDR {
    pub hwndFrom: HWND,
    pub idFrom: UINT_PTR,
    pub code: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNMHDR"][::std::mem::size_of::<tagNMHDR>() - 24usize];
    ["Alignment of tagNMHDR"][::std::mem::align_of::<tagNMHDR>() - 8usize];
    ["Offset of field: tagNMHDR::hwndFrom"][::std::mem::offset_of!(tagNMHDR, hwndFrom) - 0usize];
    ["Offset of field: tagNMHDR::idFrom"][::std::mem::offset_of!(tagNMHDR, idFrom) - 8usize];
    ["Offset of field: tagNMHDR::code"][::std::mem::offset_of!(tagNMHDR, code) - 16usize];
};
pub type NMHDR = tagNMHDR;
pub type LPNMHDR = *mut NMHDR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSTYLESTRUCT {
    pub styleOld: DWORD,
    pub styleNew: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSTYLESTRUCT"][::std::mem::size_of::<tagSTYLESTRUCT>() - 8usize];
    ["Alignment of tagSTYLESTRUCT"][::std::mem::align_of::<tagSTYLESTRUCT>() - 4usize];
    ["Offset of field: tagSTYLESTRUCT::styleOld"]
        [::std::mem::offset_of!(tagSTYLESTRUCT, styleOld) - 0usize];
    ["Offset of field: tagSTYLESTRUCT::styleNew"]
        [::std::mem::offset_of!(tagSTYLESTRUCT, styleNew) - 4usize];
};
pub type STYLESTRUCT = tagSTYLESTRUCT;
pub type LPSTYLESTRUCT = *mut tagSTYLESTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMEASUREITEMSTRUCT {
    pub CtlType: UINT,
    pub CtlID: UINT,
    pub itemID: UINT,
    pub itemWidth: UINT,
    pub itemHeight: UINT,
    pub itemData: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMEASUREITEMSTRUCT"][::std::mem::size_of::<tagMEASUREITEMSTRUCT>() - 32usize];
    ["Alignment of tagMEASUREITEMSTRUCT"][::std::mem::align_of::<tagMEASUREITEMSTRUCT>() - 8usize];
    ["Offset of field: tagMEASUREITEMSTRUCT::CtlType"]
        [::std::mem::offset_of!(tagMEASUREITEMSTRUCT, CtlType) - 0usize];
    ["Offset of field: tagMEASUREITEMSTRUCT::CtlID"]
        [::std::mem::offset_of!(tagMEASUREITEMSTRUCT, CtlID) - 4usize];
    ["Offset of field: tagMEASUREITEMSTRUCT::itemID"]
        [::std::mem::offset_of!(tagMEASUREITEMSTRUCT, itemID) - 8usize];
    ["Offset of field: tagMEASUREITEMSTRUCT::itemWidth"]
        [::std::mem::offset_of!(tagMEASUREITEMSTRUCT, itemWidth) - 12usize];
    ["Offset of field: tagMEASUREITEMSTRUCT::itemHeight"]
        [::std::mem::offset_of!(tagMEASUREITEMSTRUCT, itemHeight) - 16usize];
    ["Offset of field: tagMEASUREITEMSTRUCT::itemData"]
        [::std::mem::offset_of!(tagMEASUREITEMSTRUCT, itemData) - 24usize];
};
pub type MEASUREITEMSTRUCT = tagMEASUREITEMSTRUCT;
pub type PMEASUREITEMSTRUCT = *mut tagMEASUREITEMSTRUCT;
pub type LPMEASUREITEMSTRUCT = *mut tagMEASUREITEMSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDRAWITEMSTRUCT {
    pub CtlType: UINT,
    pub CtlID: UINT,
    pub itemID: UINT,
    pub itemAction: UINT,
    pub itemState: UINT,
    pub hwndItem: HWND,
    pub hDC: HDC,
    pub rcItem: RECT,
    pub itemData: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDRAWITEMSTRUCT"][::std::mem::size_of::<tagDRAWITEMSTRUCT>() - 64usize];
    ["Alignment of tagDRAWITEMSTRUCT"][::std::mem::align_of::<tagDRAWITEMSTRUCT>() - 8usize];
    ["Offset of field: tagDRAWITEMSTRUCT::CtlType"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, CtlType) - 0usize];
    ["Offset of field: tagDRAWITEMSTRUCT::CtlID"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, CtlID) - 4usize];
    ["Offset of field: tagDRAWITEMSTRUCT::itemID"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, itemID) - 8usize];
    ["Offset of field: tagDRAWITEMSTRUCT::itemAction"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, itemAction) - 12usize];
    ["Offset of field: tagDRAWITEMSTRUCT::itemState"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, itemState) - 16usize];
    ["Offset of field: tagDRAWITEMSTRUCT::hwndItem"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, hwndItem) - 24usize];
    ["Offset of field: tagDRAWITEMSTRUCT::hDC"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, hDC) - 32usize];
    ["Offset of field: tagDRAWITEMSTRUCT::rcItem"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, rcItem) - 40usize];
    ["Offset of field: tagDRAWITEMSTRUCT::itemData"]
        [::std::mem::offset_of!(tagDRAWITEMSTRUCT, itemData) - 56usize];
};
pub type DRAWITEMSTRUCT = tagDRAWITEMSTRUCT;
pub type PDRAWITEMSTRUCT = *mut tagDRAWITEMSTRUCT;
pub type LPDRAWITEMSTRUCT = *mut tagDRAWITEMSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDELETEITEMSTRUCT {
    pub CtlType: UINT,
    pub CtlID: UINT,
    pub itemID: UINT,
    pub hwndItem: HWND,
    pub itemData: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDELETEITEMSTRUCT"][::std::mem::size_of::<tagDELETEITEMSTRUCT>() - 32usize];
    ["Alignment of tagDELETEITEMSTRUCT"][::std::mem::align_of::<tagDELETEITEMSTRUCT>() - 8usize];
    ["Offset of field: tagDELETEITEMSTRUCT::CtlType"]
        [::std::mem::offset_of!(tagDELETEITEMSTRUCT, CtlType) - 0usize];
    ["Offset of field: tagDELETEITEMSTRUCT::CtlID"]
        [::std::mem::offset_of!(tagDELETEITEMSTRUCT, CtlID) - 4usize];
    ["Offset of field: tagDELETEITEMSTRUCT::itemID"]
        [::std::mem::offset_of!(tagDELETEITEMSTRUCT, itemID) - 8usize];
    ["Offset of field: tagDELETEITEMSTRUCT::hwndItem"]
        [::std::mem::offset_of!(tagDELETEITEMSTRUCT, hwndItem) - 16usize];
    ["Offset of field: tagDELETEITEMSTRUCT::itemData"]
        [::std::mem::offset_of!(tagDELETEITEMSTRUCT, itemData) - 24usize];
};
pub type DELETEITEMSTRUCT = tagDELETEITEMSTRUCT;
pub type PDELETEITEMSTRUCT = *mut tagDELETEITEMSTRUCT;
pub type LPDELETEITEMSTRUCT = *mut tagDELETEITEMSTRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOMPAREITEMSTRUCT {
    pub CtlType: UINT,
    pub CtlID: UINT,
    pub hwndItem: HWND,
    pub itemID1: UINT,
    pub itemData1: ULONG_PTR,
    pub itemID2: UINT,
    pub itemData2: ULONG_PTR,
    pub dwLocaleId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOMPAREITEMSTRUCT"][::std::mem::size_of::<tagCOMPAREITEMSTRUCT>() - 56usize];
    ["Alignment of tagCOMPAREITEMSTRUCT"][::std::mem::align_of::<tagCOMPAREITEMSTRUCT>() - 8usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::CtlType"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, CtlType) - 0usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::CtlID"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, CtlID) - 4usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::hwndItem"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, hwndItem) - 8usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::itemID1"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, itemID1) - 16usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::itemData1"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, itemData1) - 24usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::itemID2"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, itemID2) - 32usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::itemData2"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, itemData2) - 40usize];
    ["Offset of field: tagCOMPAREITEMSTRUCT::dwLocaleId"]
        [::std::mem::offset_of!(tagCOMPAREITEMSTRUCT, dwLocaleId) - 48usize];
};
pub type COMPAREITEMSTRUCT = tagCOMPAREITEMSTRUCT;
pub type PCOMPAREITEMSTRUCT = *mut tagCOMPAREITEMSTRUCT;
pub type LPCOMPAREITEMSTRUCT = *mut tagCOMPAREITEMSTRUCT;
unsafe extern "C" {
    pub fn GetMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn TranslateMessage(lpMsg: *const MSG) -> BOOL;
}
unsafe extern "C" {
    pub fn DispatchMessageA(lpMsg: *const MSG) -> LRESULT;
}
unsafe extern "C" {
    pub fn DispatchMessageW(lpMsg: *const MSG) -> LRESULT;
}
unsafe extern "C" {
    pub fn SetMessageQueue(cMessagesMax: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn PeekMessageA(
        lpMsg: LPMSG,
        hWnd: HWND,
        wMsgFilterMin: UINT,
        wMsgFilterMax: UINT,
        wRemoveMsg: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PeekMessageW(
        lpMsg: LPMSG,
        hWnd: HWND,
        wMsgFilterMin: UINT,
        wMsgFilterMax: UINT,
        wRemoveMsg: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterHotKey(
        hWnd: HWND,
        id: ::std::os::raw::c_int,
        fsModifiers: UINT,
        vk: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterHotKey(hWnd: HWND, id: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn ExitWindowsEx(uFlags: UINT, dwReason: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SwapMouseButton(fSwap: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMessagePos() -> DWORD;
}
unsafe extern "C" {
    pub fn GetMessageTime() -> LONG;
}
unsafe extern "C" {
    pub fn GetMessageExtraInfo() -> LPARAM;
}
unsafe extern "C" {
    pub fn GetUnpredictedMessagePos() -> DWORD;
}
unsafe extern "C" {
    pub fn IsWow64Message() -> BOOL;
}
unsafe extern "C" {
    pub fn SetMessageExtraInfo(lParam: LPARAM) -> LPARAM;
}
unsafe extern "C" {
    pub fn SendMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn SendMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn SendMessageTimeoutA(
        hWnd: HWND,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        fuFlags: UINT,
        uTimeout: UINT,
        lpdwResult: PDWORD_PTR,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn SendMessageTimeoutW(
        hWnd: HWND,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        fuFlags: UINT,
        uTimeout: UINT,
        lpdwResult: PDWORD_PTR,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn SendNotifyMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn SendNotifyMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn SendMessageCallbackA(
        hWnd: HWND,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        lpResultCallBack: SENDASYNCPROC,
        dwData: ULONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SendMessageCallbackW(
        hWnd: HWND,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        lpResultCallBack: SENDASYNCPROC,
        dwData: ULONG_PTR,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BSMINFO {
    pub cbSize: UINT,
    pub hdesk: HDESK,
    pub hwnd: HWND,
    pub luid: LUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BSMINFO"][::std::mem::size_of::<BSMINFO>() - 32usize];
    ["Alignment of BSMINFO"][::std::mem::align_of::<BSMINFO>() - 8usize];
    ["Offset of field: BSMINFO::cbSize"][::std::mem::offset_of!(BSMINFO, cbSize) - 0usize];
    ["Offset of field: BSMINFO::hdesk"][::std::mem::offset_of!(BSMINFO, hdesk) - 8usize];
    ["Offset of field: BSMINFO::hwnd"][::std::mem::offset_of!(BSMINFO, hwnd) - 16usize];
    ["Offset of field: BSMINFO::luid"][::std::mem::offset_of!(BSMINFO, luid) - 24usize];
};
pub type PBSMINFO = *mut BSMINFO;
unsafe extern "C" {
    pub fn BroadcastSystemMessageExA(
        flags: DWORD,
        lpInfo: LPDWORD,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        pbsmInfo: PBSMINFO,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn BroadcastSystemMessageExW(
        flags: DWORD,
        lpInfo: LPDWORD,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
        pbsmInfo: PBSMINFO,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn BroadcastSystemMessageA(
        flags: DWORD,
        lpInfo: LPDWORD,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn BroadcastSystemMessageW(
        flags: DWORD,
        lpInfo: LPDWORD,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_long;
}
pub type HDEVNOTIFY = PVOID;
pub type PHDEVNOTIFY = *mut HDEVNOTIFY;
unsafe extern "C" {
    pub fn RegisterDeviceNotificationA(
        hRecipient: HANDLE,
        NotificationFilter: LPVOID,
        Flags: DWORD,
    ) -> HDEVNOTIFY;
}
unsafe extern "C" {
    pub fn RegisterDeviceNotificationW(
        hRecipient: HANDLE,
        NotificationFilter: LPVOID,
        Flags: DWORD,
    ) -> HDEVNOTIFY;
}
unsafe extern "C" {
    pub fn UnregisterDeviceNotification(Handle: HDEVNOTIFY) -> BOOL;
}
pub type HPOWERNOTIFY = PVOID;
pub type PHPOWERNOTIFY = *mut HPOWERNOTIFY;
unsafe extern "C" {
    pub fn RegisterPowerSettingNotification(
        hRecipient: HANDLE,
        PowerSettingGuid: LPCGUID,
        Flags: DWORD,
    ) -> HPOWERNOTIFY;
}
unsafe extern "C" {
    pub fn UnregisterPowerSettingNotification(Handle: HPOWERNOTIFY) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterSuspendResumeNotification(hRecipient: HANDLE, Flags: DWORD) -> HPOWERNOTIFY;
}
unsafe extern "C" {
    pub fn UnregisterSuspendResumeNotification(Handle: HPOWERNOTIFY) -> BOOL;
}
unsafe extern "C" {
    pub fn PostMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn PostMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn PostThreadMessageA(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn PostThreadMessageW(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn AttachThreadInput(idAttach: DWORD, idAttachTo: DWORD, fAttach: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn ReplyMessage(lResult: LRESULT) -> BOOL;
}
unsafe extern "C" {
    pub fn WaitMessage() -> BOOL;
}
unsafe extern "C" {
    pub fn WaitForInputIdle(hProcess: HANDLE, dwMilliseconds: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn DefWindowProcA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn DefWindowProcW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn PostQuitMessage(nExitCode: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn CallWindowProcA(
        lpPrevWndFunc: WNDPROC,
        hWnd: HWND,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn CallWindowProcW(
        lpPrevWndFunc: WNDPROC,
        hWnd: HWND,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn InSendMessage() -> BOOL;
}
unsafe extern "C" {
    pub fn InSendMessageEx(lpReserved: LPVOID) -> DWORD;
}
unsafe extern "C" {
    pub fn GetDoubleClickTime() -> UINT;
}
unsafe extern "C" {
    pub fn SetDoubleClickTime(arg1: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterClassA(lpWndClass: *const WNDCLASSA) -> ATOM;
}
unsafe extern "C" {
    pub fn RegisterClassW(lpWndClass: *const WNDCLASSW) -> ATOM;
}
unsafe extern "C" {
    pub fn UnregisterClassA(lpClassName: LPCSTR, hInstance: HINSTANCE) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterClassW(lpClassName: LPCWSTR, hInstance: HINSTANCE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetClassInfoA(
        hInstance: HINSTANCE,
        lpClassName: LPCSTR,
        lpWndClass: LPWNDCLASSA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetClassInfoW(
        hInstance: HINSTANCE,
        lpClassName: LPCWSTR,
        lpWndClass: LPWNDCLASSW,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterClassExA(arg1: *const WNDCLASSEXA) -> ATOM;
}
unsafe extern "C" {
    pub fn RegisterClassExW(arg1: *const WNDCLASSEXW) -> ATOM;
}
unsafe extern "C" {
    pub fn GetClassInfoExA(hInstance: HINSTANCE, lpszClass: LPCSTR, lpwcx: LPWNDCLASSEXA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetClassInfoExW(hInstance: HINSTANCE, lpszClass: LPCWSTR, lpwcx: LPWNDCLASSEXW) -> BOOL;
}
pub type PREGISTERCLASSNAMEW =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPCWSTR) -> BOOLEAN>;
unsafe extern "C" {
    pub fn CreateWindowExA(
        dwExStyle: DWORD,
        lpClassName: LPCSTR,
        lpWindowName: LPCSTR,
        dwStyle: DWORD,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        hWndParent: HWND,
        hMenu: HMENU,
        hInstance: HINSTANCE,
        lpParam: LPVOID,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn CreateWindowExW(
        dwExStyle: DWORD,
        lpClassName: LPCWSTR,
        lpWindowName: LPCWSTR,
        dwStyle: DWORD,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        hWndParent: HWND,
        hMenu: HMENU,
        hInstance: HINSTANCE,
        lpParam: LPVOID,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn IsWindow(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn IsMenu(hMenu: HMENU) -> BOOL;
}
unsafe extern "C" {
    pub fn IsChild(hWndParent: HWND, hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn DestroyWindow(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn ShowWindow(hWnd: HWND, nCmdShow: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn AnimateWindow(hWnd: HWND, dwTime: DWORD, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn UpdateLayeredWindow(
        hWnd: HWND,
        hdcDst: HDC,
        pptDst: *mut POINT,
        psize: *mut SIZE,
        hdcSrc: HDC,
        pptSrc: *mut POINT,
        crKey: COLORREF,
        pblend: *mut BLENDFUNCTION,
        dwFlags: DWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagUPDATELAYEREDWINDOWINFO {
    pub cbSize: DWORD,
    pub hdcDst: HDC,
    pub pptDst: *const POINT,
    pub psize: *const SIZE,
    pub hdcSrc: HDC,
    pub pptSrc: *const POINT,
    pub crKey: COLORREF,
    pub pblend: *const BLENDFUNCTION,
    pub dwFlags: DWORD,
    pub prcDirty: *const RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagUPDATELAYEREDWINDOWINFO"]
        [::std::mem::size_of::<tagUPDATELAYEREDWINDOWINFO>() - 80usize];
    ["Alignment of tagUPDATELAYEREDWINDOWINFO"]
        [::std::mem::align_of::<tagUPDATELAYEREDWINDOWINFO>() - 8usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::cbSize"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, cbSize) - 0usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::hdcDst"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, hdcDst) - 8usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::pptDst"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, pptDst) - 16usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::psize"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, psize) - 24usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::hdcSrc"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, hdcSrc) - 32usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::pptSrc"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, pptSrc) - 40usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::crKey"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, crKey) - 48usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::pblend"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, pblend) - 56usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::dwFlags"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, dwFlags) - 64usize];
    ["Offset of field: tagUPDATELAYEREDWINDOWINFO::prcDirty"]
        [::std::mem::offset_of!(tagUPDATELAYEREDWINDOWINFO, prcDirty) - 72usize];
};
pub type UPDATELAYEREDWINDOWINFO = tagUPDATELAYEREDWINDOWINFO;
pub type PUPDATELAYEREDWINDOWINFO = *mut tagUPDATELAYEREDWINDOWINFO;
unsafe extern "C" {
    pub fn UpdateLayeredWindowIndirect(
        hWnd: HWND,
        pULWInfo: *const UPDATELAYEREDWINDOWINFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLayeredWindowAttributes(
        hwnd: HWND,
        pcrKey: *mut COLORREF,
        pbAlpha: *mut BYTE,
        pdwFlags: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PrintWindow(hwnd: HWND, hdcBlt: HDC, nFlags: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetLayeredWindowAttributes(
        hwnd: HWND,
        crKey: COLORREF,
        bAlpha: BYTE,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ShowWindowAsync(hWnd: HWND, nCmdShow: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn FlashWindow(hWnd: HWND, bInvert: BOOL) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FLASHWINFO {
    pub cbSize: UINT,
    pub hwnd: HWND,
    pub dwFlags: DWORD,
    pub uCount: UINT,
    pub dwTimeout: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FLASHWINFO"][::std::mem::size_of::<FLASHWINFO>() - 32usize];
    ["Alignment of FLASHWINFO"][::std::mem::align_of::<FLASHWINFO>() - 8usize];
    ["Offset of field: FLASHWINFO::cbSize"][::std::mem::offset_of!(FLASHWINFO, cbSize) - 0usize];
    ["Offset of field: FLASHWINFO::hwnd"][::std::mem::offset_of!(FLASHWINFO, hwnd) - 8usize];
    ["Offset of field: FLASHWINFO::dwFlags"][::std::mem::offset_of!(FLASHWINFO, dwFlags) - 16usize];
    ["Offset of field: FLASHWINFO::uCount"][::std::mem::offset_of!(FLASHWINFO, uCount) - 20usize];
    ["Offset of field: FLASHWINFO::dwTimeout"]
        [::std::mem::offset_of!(FLASHWINFO, dwTimeout) - 24usize];
};
pub type PFLASHWINFO = *mut FLASHWINFO;
unsafe extern "C" {
    pub fn FlashWindowEx(pfwi: PFLASHWINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn ShowOwnedPopups(hWnd: HWND, fShow: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenIcon(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseWindow(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn MoveWindow(
        hWnd: HWND,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        bRepaint: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowPos(
        hWnd: HWND,
        hWndInsertAfter: HWND,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        uFlags: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowPlacement(hWnd: HWND, lpwndpl: *mut WINDOWPLACEMENT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowPlacement(hWnd: HWND, lpwndpl: *const WINDOWPLACEMENT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowDisplayAffinity(hWnd: HWND, pdwAffinity: *mut DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowDisplayAffinity(hWnd: HWND, dwAffinity: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn BeginDeferWindowPos(nNumWindows: ::std::os::raw::c_int) -> HDWP;
}
unsafe extern "C" {
    pub fn DeferWindowPos(
        hWinPosInfo: HDWP,
        hWnd: HWND,
        hWndInsertAfter: HWND,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        uFlags: UINT,
    ) -> HDWP;
}
unsafe extern "C" {
    pub fn EndDeferWindowPos(hWinPosInfo: HDWP) -> BOOL;
}
unsafe extern "C" {
    pub fn IsWindowVisible(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn IsIconic(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn AnyPopup() -> BOOL;
}
unsafe extern "C" {
    pub fn BringWindowToTop(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn IsZoomed(hWnd: HWND) -> BOOL;
}
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DLGTEMPLATE {
    pub style: DWORD,
    pub dwExtendedStyle: DWORD,
    pub cdit: WORD,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DLGTEMPLATE"][::std::mem::size_of::<DLGTEMPLATE>() - 18usize];
    ["Alignment of DLGTEMPLATE"][::std::mem::align_of::<DLGTEMPLATE>() - 2usize];
    ["Offset of field: DLGTEMPLATE::style"][::std::mem::offset_of!(DLGTEMPLATE, style) - 0usize];
    ["Offset of field: DLGTEMPLATE::dwExtendedStyle"]
        [::std::mem::offset_of!(DLGTEMPLATE, dwExtendedStyle) - 4usize];
    ["Offset of field: DLGTEMPLATE::cdit"][::std::mem::offset_of!(DLGTEMPLATE, cdit) - 8usize];
    ["Offset of field: DLGTEMPLATE::x"][::std::mem::offset_of!(DLGTEMPLATE, x) - 10usize];
    ["Offset of field: DLGTEMPLATE::y"][::std::mem::offset_of!(DLGTEMPLATE, y) - 12usize];
    ["Offset of field: DLGTEMPLATE::cx"][::std::mem::offset_of!(DLGTEMPLATE, cx) - 14usize];
    ["Offset of field: DLGTEMPLATE::cy"][::std::mem::offset_of!(DLGTEMPLATE, cy) - 16usize];
};
pub type LPDLGTEMPLATEA = *mut DLGTEMPLATE;
pub type LPDLGTEMPLATEW = *mut DLGTEMPLATE;
pub type LPDLGTEMPLATE = LPDLGTEMPLATEA;
pub type LPCDLGTEMPLATEA = *const DLGTEMPLATE;
pub type LPCDLGTEMPLATEW = *const DLGTEMPLATE;
pub type LPCDLGTEMPLATE = LPCDLGTEMPLATEA;
#[repr(C, packed(2))]
#[derive(Debug, Copy, Clone)]
pub struct DLGITEMTEMPLATE {
    pub style: DWORD,
    pub dwExtendedStyle: DWORD,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub id: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DLGITEMTEMPLATE"][::std::mem::size_of::<DLGITEMTEMPLATE>() - 18usize];
    ["Alignment of DLGITEMTEMPLATE"][::std::mem::align_of::<DLGITEMTEMPLATE>() - 2usize];
    ["Offset of field: DLGITEMTEMPLATE::style"]
        [::std::mem::offset_of!(DLGITEMTEMPLATE, style) - 0usize];
    ["Offset of field: DLGITEMTEMPLATE::dwExtendedStyle"]
        [::std::mem::offset_of!(DLGITEMTEMPLATE, dwExtendedStyle) - 4usize];
    ["Offset of field: DLGITEMTEMPLATE::x"][::std::mem::offset_of!(DLGITEMTEMPLATE, x) - 8usize];
    ["Offset of field: DLGITEMTEMPLATE::y"][::std::mem::offset_of!(DLGITEMTEMPLATE, y) - 10usize];
    ["Offset of field: DLGITEMTEMPLATE::cx"][::std::mem::offset_of!(DLGITEMTEMPLATE, cx) - 12usize];
    ["Offset of field: DLGITEMTEMPLATE::cy"][::std::mem::offset_of!(DLGITEMTEMPLATE, cy) - 14usize];
    ["Offset of field: DLGITEMTEMPLATE::id"][::std::mem::offset_of!(DLGITEMTEMPLATE, id) - 16usize];
};
pub type PDLGITEMTEMPLATEA = *mut DLGITEMTEMPLATE;
pub type PDLGITEMTEMPLATEW = *mut DLGITEMTEMPLATE;
pub type PDLGITEMTEMPLATE = PDLGITEMTEMPLATEA;
pub type LPDLGITEMTEMPLATEA = *mut DLGITEMTEMPLATE;
pub type LPDLGITEMTEMPLATEW = *mut DLGITEMTEMPLATE;
pub type LPDLGITEMTEMPLATE = LPDLGITEMTEMPLATEA;
unsafe extern "C" {
    pub fn CreateDialogParamA(
        hInstance: HINSTANCE,
        lpTemplateName: LPCSTR,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn CreateDialogParamW(
        hInstance: HINSTANCE,
        lpTemplateName: LPCWSTR,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn CreateDialogIndirectParamA(
        hInstance: HINSTANCE,
        lpTemplate: LPCDLGTEMPLATEA,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn CreateDialogIndirectParamW(
        hInstance: HINSTANCE,
        lpTemplate: LPCDLGTEMPLATEW,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn DialogBoxParamA(
        hInstance: HINSTANCE,
        lpTemplateName: LPCSTR,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> INT_PTR;
}
unsafe extern "C" {
    pub fn DialogBoxParamW(
        hInstance: HINSTANCE,
        lpTemplateName: LPCWSTR,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> INT_PTR;
}
unsafe extern "C" {
    pub fn DialogBoxIndirectParamA(
        hInstance: HINSTANCE,
        hDialogTemplate: LPCDLGTEMPLATEA,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> INT_PTR;
}
unsafe extern "C" {
    pub fn DialogBoxIndirectParamW(
        hInstance: HINSTANCE,
        hDialogTemplate: LPCDLGTEMPLATEW,
        hWndParent: HWND,
        lpDialogFunc: DLGPROC,
        dwInitParam: LPARAM,
    ) -> INT_PTR;
}
unsafe extern "C" {
    pub fn EndDialog(hDlg: HWND, nResult: INT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDlgItem(hDlg: HWND, nIDDlgItem: ::std::os::raw::c_int) -> HWND;
}
unsafe extern "C" {
    pub fn SetDlgItemInt(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        uValue: UINT,
        bSigned: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDlgItemInt(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        lpTranslated: *mut BOOL,
        bSigned: BOOL,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn SetDlgItemTextA(hDlg: HWND, nIDDlgItem: ::std::os::raw::c_int, lpString: LPCSTR)
    -> BOOL;
}
unsafe extern "C" {
    pub fn SetDlgItemTextW(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        lpString: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDlgItemTextA(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        lpString: LPSTR,
        cchMax: ::std::os::raw::c_int,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetDlgItemTextW(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        lpString: LPWSTR,
        cchMax: ::std::os::raw::c_int,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn CheckDlgButton(hDlg: HWND, nIDButton: ::std::os::raw::c_int, uCheck: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckRadioButton(
        hDlg: HWND,
        nIDFirstButton: ::std::os::raw::c_int,
        nIDLastButton: ::std::os::raw::c_int,
        nIDCheckButton: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsDlgButtonChecked(hDlg: HWND, nIDButton: ::std::os::raw::c_int) -> UINT;
}
unsafe extern "C" {
    pub fn SendDlgItemMessageA(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn SendDlgItemMessageW(
        hDlg: HWND,
        nIDDlgItem: ::std::os::raw::c_int,
        Msg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn GetNextDlgGroupItem(hDlg: HWND, hCtl: HWND, bPrevious: BOOL) -> HWND;
}
unsafe extern "C" {
    pub fn GetNextDlgTabItem(hDlg: HWND, hCtl: HWND, bPrevious: BOOL) -> HWND;
}
unsafe extern "C" {
    pub fn GetDlgCtrlID(hWnd: HWND) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetDialogBaseUnits() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn DefDlgProcA(hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn DefDlgProcW(hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS_DCDC_DEFAULT: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = 0;
pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS_DCDC_DISABLE_FONT_UPDATE:
    DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = 1;
pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS_DCDC_DISABLE_RELAYOUT:
    DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = 2;
pub type DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn SetDialogControlDpiChangeBehavior(
        hWnd: HWND,
        mask: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS,
        values: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDialogControlDpiChangeBehavior(hWnd: HWND) -> DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
}
pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DEFAULT: DIALOG_DPI_CHANGE_BEHAVIORS = 0;
pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DISABLE_ALL: DIALOG_DPI_CHANGE_BEHAVIORS = 1;
pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DISABLE_RESIZE: DIALOG_DPI_CHANGE_BEHAVIORS = 2;
pub const DIALOG_DPI_CHANGE_BEHAVIORS_DDC_DISABLE_CONTROL_RELAYOUT: DIALOG_DPI_CHANGE_BEHAVIORS = 4;
pub type DIALOG_DPI_CHANGE_BEHAVIORS = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn SetDialogDpiChangeBehavior(
        hDlg: HWND,
        mask: DIALOG_DPI_CHANGE_BEHAVIORS,
        values: DIALOG_DPI_CHANGE_BEHAVIORS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDialogDpiChangeBehavior(hDlg: HWND) -> DIALOG_DPI_CHANGE_BEHAVIORS;
}
unsafe extern "C" {
    pub fn CallMsgFilterA(lpMsg: LPMSG, nCode: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn CallMsgFilterW(lpMsg: LPMSG, nCode: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenClipboard(hWndNewOwner: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseClipboard() -> BOOL;
}
unsafe extern "C" {
    pub fn GetClipboardSequenceNumber() -> DWORD;
}
unsafe extern "C" {
    pub fn GetClipboardOwner() -> HWND;
}
unsafe extern "C" {
    pub fn SetClipboardViewer(hWndNewViewer: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn GetClipboardViewer() -> HWND;
}
unsafe extern "C" {
    pub fn ChangeClipboardChain(hWndRemove: HWND, hWndNewNext: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn SetClipboardData(uFormat: UINT, hMem: HANDLE) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetClipboardData(uFormat: UINT) -> HANDLE;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGETCLIPBMETADATA {
    pub Version: UINT,
    pub IsDelayRendered: BOOL,
    pub IsSynthetic: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGETCLIPBMETADATA"][::std::mem::size_of::<tagGETCLIPBMETADATA>() - 12usize];
    ["Alignment of tagGETCLIPBMETADATA"][::std::mem::align_of::<tagGETCLIPBMETADATA>() - 4usize];
    ["Offset of field: tagGETCLIPBMETADATA::Version"]
        [::std::mem::offset_of!(tagGETCLIPBMETADATA, Version) - 0usize];
    ["Offset of field: tagGETCLIPBMETADATA::IsDelayRendered"]
        [::std::mem::offset_of!(tagGETCLIPBMETADATA, IsDelayRendered) - 4usize];
    ["Offset of field: tagGETCLIPBMETADATA::IsSynthetic"]
        [::std::mem::offset_of!(tagGETCLIPBMETADATA, IsSynthetic) - 8usize];
};
pub type GETCLIPBMETADATA = tagGETCLIPBMETADATA;
pub type PGETCLIPBMETADATA = *mut tagGETCLIPBMETADATA;
unsafe extern "C" {
    pub fn GetClipboardMetadata(format: UINT, metadata: PGETCLIPBMETADATA) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterClipboardFormatA(lpszFormat: LPCSTR) -> UINT;
}
unsafe extern "C" {
    pub fn RegisterClipboardFormatW(lpszFormat: LPCWSTR) -> UINT;
}
unsafe extern "C" {
    pub fn CountClipboardFormats() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumClipboardFormats(format: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetClipboardFormatNameA(
        format: UINT,
        lpszFormatName: LPSTR,
        cchMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetClipboardFormatNameW(
        format: UINT,
        lpszFormatName: LPWSTR,
        cchMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EmptyClipboard() -> BOOL;
}
unsafe extern "C" {
    pub fn IsClipboardFormatAvailable(format: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPriorityClipboardFormat(
        paFormatPriorityList: *mut UINT,
        cFormats: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetOpenClipboardWindow() -> HWND;
}
unsafe extern "C" {
    pub fn AddClipboardFormatListener(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveClipboardFormatListener(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUpdatedClipboardFormats(
        lpuiFormats: PUINT,
        cFormats: UINT,
        pcFormatsOut: PUINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CharToOemA(pSrc: LPCSTR, pDst: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn CharToOemW(pSrc: LPCWSTR, pDst: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn OemToCharA(pSrc: LPCSTR, pDst: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn OemToCharW(pSrc: LPCSTR, pDst: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn CharToOemBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CharToOemBuffW(lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn OemToCharBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn OemToCharBuffW(lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CharUpperA(lpsz: LPSTR) -> LPSTR;
}
unsafe extern "C" {
    pub fn CharUpperW(lpsz: LPWSTR) -> LPWSTR;
}
unsafe extern "C" {
    pub fn CharUpperBuffA(lpsz: LPSTR, cchLength: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn CharUpperBuffW(lpsz: LPWSTR, cchLength: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn CharLowerA(lpsz: LPSTR) -> LPSTR;
}
unsafe extern "C" {
    pub fn CharLowerW(lpsz: LPWSTR) -> LPWSTR;
}
unsafe extern "C" {
    pub fn CharLowerBuffA(lpsz: LPSTR, cchLength: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn CharLowerBuffW(lpsz: LPWSTR, cchLength: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn CharNextA(lpsz: LPCSTR) -> LPSTR;
}
unsafe extern "C" {
    pub fn CharNextW(lpsz: LPCWSTR) -> LPWSTR;
}
unsafe extern "C" {
    pub fn CharPrevA(lpszStart: LPCSTR, lpszCurrent: LPCSTR) -> LPSTR;
}
unsafe extern "C" {
    pub fn CharPrevW(lpszStart: LPCWSTR, lpszCurrent: LPCWSTR) -> LPWSTR;
}
unsafe extern "C" {
    pub fn CharNextExA(CodePage: WORD, lpCurrentChar: LPCSTR, dwFlags: DWORD) -> LPSTR;
}
unsafe extern "C" {
    pub fn CharPrevExA(
        CodePage: WORD,
        lpStart: LPCSTR,
        lpCurrentChar: LPCSTR,
        dwFlags: DWORD,
    ) -> LPSTR;
}
unsafe extern "C" {
    pub fn IsCharAlphaA(ch: CHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharAlphaW(ch: WCHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharAlphaNumericA(ch: CHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharAlphaNumericW(ch: WCHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharUpperA(ch: CHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharUpperW(ch: WCHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharLowerA(ch: CHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsCharLowerW(ch: WCHAR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetFocus(hWnd: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn GetActiveWindow() -> HWND;
}
unsafe extern "C" {
    pub fn GetFocus() -> HWND;
}
unsafe extern "C" {
    pub fn GetKBCodePage() -> UINT;
}
unsafe extern "C" {
    pub fn GetKeyState(nVirtKey: ::std::os::raw::c_int) -> SHORT;
}
unsafe extern "C" {
    pub fn GetAsyncKeyState(vKey: ::std::os::raw::c_int) -> SHORT;
}
unsafe extern "C" {
    pub fn GetKeyboardState(lpKeyState: PBYTE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetKeyboardState(lpKeyState: LPBYTE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetKeyNameTextA(
        lParam: LONG,
        lpString: LPSTR,
        cchSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetKeyNameTextW(
        lParam: LONG,
        lpString: LPWSTR,
        cchSize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetKeyboardType(nTypeFlag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ToAscii(
        uVirtKey: UINT,
        uScanCode: UINT,
        lpKeyState: *const BYTE,
        lpChar: LPWORD,
        uFlags: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ToAsciiEx(
        uVirtKey: UINT,
        uScanCode: UINT,
        lpKeyState: *const BYTE,
        lpChar: LPWORD,
        uFlags: UINT,
        dwhkl: HKL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ToUnicode(
        wVirtKey: UINT,
        wScanCode: UINT,
        lpKeyState: *const BYTE,
        pwszBuff: LPWSTR,
        cchBuff: ::std::os::raw::c_int,
        wFlags: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OemKeyScan(wOemChar: WORD) -> DWORD;
}
unsafe extern "C" {
    pub fn VkKeyScanA(ch: CHAR) -> SHORT;
}
unsafe extern "C" {
    pub fn VkKeyScanW(ch: WCHAR) -> SHORT;
}
unsafe extern "C" {
    pub fn VkKeyScanExA(ch: CHAR, dwhkl: HKL) -> SHORT;
}
unsafe extern "C" {
    pub fn VkKeyScanExW(ch: WCHAR, dwhkl: HKL) -> SHORT;
}
unsafe extern "C" {
    pub fn keybd_event(bVk: BYTE, bScan: BYTE, dwFlags: DWORD, dwExtraInfo: ULONG_PTR);
}
unsafe extern "C" {
    pub fn mouse_event(dwFlags: DWORD, dx: DWORD, dy: DWORD, dwData: DWORD, dwExtraInfo: ULONG_PTR);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMOUSEINPUT {
    pub dx: LONG,
    pub dy: LONG,
    pub mouseData: DWORD,
    pub dwFlags: DWORD,
    pub time: DWORD,
    pub dwExtraInfo: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMOUSEINPUT"][::std::mem::size_of::<tagMOUSEINPUT>() - 32usize];
    ["Alignment of tagMOUSEINPUT"][::std::mem::align_of::<tagMOUSEINPUT>() - 8usize];
    ["Offset of field: tagMOUSEINPUT::dx"][::std::mem::offset_of!(tagMOUSEINPUT, dx) - 0usize];
    ["Offset of field: tagMOUSEINPUT::dy"][::std::mem::offset_of!(tagMOUSEINPUT, dy) - 4usize];
    ["Offset of field: tagMOUSEINPUT::mouseData"]
        [::std::mem::offset_of!(tagMOUSEINPUT, mouseData) - 8usize];
    ["Offset of field: tagMOUSEINPUT::dwFlags"]
        [::std::mem::offset_of!(tagMOUSEINPUT, dwFlags) - 12usize];
    ["Offset of field: tagMOUSEINPUT::time"][::std::mem::offset_of!(tagMOUSEINPUT, time) - 16usize];
    ["Offset of field: tagMOUSEINPUT::dwExtraInfo"]
        [::std::mem::offset_of!(tagMOUSEINPUT, dwExtraInfo) - 24usize];
};
pub type MOUSEINPUT = tagMOUSEINPUT;
pub type PMOUSEINPUT = *mut tagMOUSEINPUT;
pub type LPMOUSEINPUT = *mut tagMOUSEINPUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagKEYBDINPUT {
    pub wVk: WORD,
    pub wScan: WORD,
    pub dwFlags: DWORD,
    pub time: DWORD,
    pub dwExtraInfo: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagKEYBDINPUT"][::std::mem::size_of::<tagKEYBDINPUT>() - 24usize];
    ["Alignment of tagKEYBDINPUT"][::std::mem::align_of::<tagKEYBDINPUT>() - 8usize];
    ["Offset of field: tagKEYBDINPUT::wVk"][::std::mem::offset_of!(tagKEYBDINPUT, wVk) - 0usize];
    ["Offset of field: tagKEYBDINPUT::wScan"]
        [::std::mem::offset_of!(tagKEYBDINPUT, wScan) - 2usize];
    ["Offset of field: tagKEYBDINPUT::dwFlags"]
        [::std::mem::offset_of!(tagKEYBDINPUT, dwFlags) - 4usize];
    ["Offset of field: tagKEYBDINPUT::time"][::std::mem::offset_of!(tagKEYBDINPUT, time) - 8usize];
    ["Offset of field: tagKEYBDINPUT::dwExtraInfo"]
        [::std::mem::offset_of!(tagKEYBDINPUT, dwExtraInfo) - 16usize];
};
pub type KEYBDINPUT = tagKEYBDINPUT;
pub type PKEYBDINPUT = *mut tagKEYBDINPUT;
pub type LPKEYBDINPUT = *mut tagKEYBDINPUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHARDWAREINPUT {
    pub uMsg: DWORD,
    pub wParamL: WORD,
    pub wParamH: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHARDWAREINPUT"][::std::mem::size_of::<tagHARDWAREINPUT>() - 8usize];
    ["Alignment of tagHARDWAREINPUT"][::std::mem::align_of::<tagHARDWAREINPUT>() - 4usize];
    ["Offset of field: tagHARDWAREINPUT::uMsg"]
        [::std::mem::offset_of!(tagHARDWAREINPUT, uMsg) - 0usize];
    ["Offset of field: tagHARDWAREINPUT::wParamL"]
        [::std::mem::offset_of!(tagHARDWAREINPUT, wParamL) - 4usize];
    ["Offset of field: tagHARDWAREINPUT::wParamH"]
        [::std::mem::offset_of!(tagHARDWAREINPUT, wParamH) - 6usize];
};
pub type HARDWAREINPUT = tagHARDWAREINPUT;
pub type PHARDWAREINPUT = *mut tagHARDWAREINPUT;
pub type LPHARDWAREINPUT = *mut tagHARDWAREINPUT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagINPUT {
    pub type_: DWORD,
    pub __bindgen_anon_1: tagINPUT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagINPUT__bindgen_ty_1 {
    pub mi: MOUSEINPUT,
    pub ki: KEYBDINPUT,
    pub hi: HARDWAREINPUT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT__bindgen_ty_1"][::std::mem::size_of::<tagINPUT__bindgen_ty_1>() - 32usize];
    ["Alignment of tagINPUT__bindgen_ty_1"]
        [::std::mem::align_of::<tagINPUT__bindgen_ty_1>() - 8usize];
    ["Offset of field: tagINPUT__bindgen_ty_1::mi"]
        [::std::mem::offset_of!(tagINPUT__bindgen_ty_1, mi) - 0usize];
    ["Offset of field: tagINPUT__bindgen_ty_1::ki"]
        [::std::mem::offset_of!(tagINPUT__bindgen_ty_1, ki) - 0usize];
    ["Offset of field: tagINPUT__bindgen_ty_1::hi"]
        [::std::mem::offset_of!(tagINPUT__bindgen_ty_1, hi) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT"][::std::mem::size_of::<tagINPUT>() - 40usize];
    ["Alignment of tagINPUT"][::std::mem::align_of::<tagINPUT>() - 8usize];
    ["Offset of field: tagINPUT::type_"][::std::mem::offset_of!(tagINPUT, type_) - 0usize];
};
pub type INPUT = tagINPUT;
pub type PINPUT = *mut tagINPUT;
pub type LPINPUT = *mut tagINPUT;
unsafe extern "C" {
    pub fn SendInput(cInputs: UINT, pInputs: LPINPUT, cbSize: ::std::os::raw::c_int) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTOUCHINPUT__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HTOUCHINPUT__"][::std::mem::size_of::<HTOUCHINPUT__>() - 4usize];
    ["Alignment of HTOUCHINPUT__"][::std::mem::align_of::<HTOUCHINPUT__>() - 4usize];
    ["Offset of field: HTOUCHINPUT__::unused"]
        [::std::mem::offset_of!(HTOUCHINPUT__, unused) - 0usize];
};
pub type HTOUCHINPUT = *mut HTOUCHINPUT__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTOUCHINPUT {
    pub x: LONG,
    pub y: LONG,
    pub hSource: HANDLE,
    pub dwID: DWORD,
    pub dwFlags: DWORD,
    pub dwMask: DWORD,
    pub dwTime: DWORD,
    pub dwExtraInfo: ULONG_PTR,
    pub cxContact: DWORD,
    pub cyContact: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTOUCHINPUT"][::std::mem::size_of::<tagTOUCHINPUT>() - 48usize];
    ["Alignment of tagTOUCHINPUT"][::std::mem::align_of::<tagTOUCHINPUT>() - 8usize];
    ["Offset of field: tagTOUCHINPUT::x"][::std::mem::offset_of!(tagTOUCHINPUT, x) - 0usize];
    ["Offset of field: tagTOUCHINPUT::y"][::std::mem::offset_of!(tagTOUCHINPUT, y) - 4usize];
    ["Offset of field: tagTOUCHINPUT::hSource"]
        [::std::mem::offset_of!(tagTOUCHINPUT, hSource) - 8usize];
    ["Offset of field: tagTOUCHINPUT::dwID"][::std::mem::offset_of!(tagTOUCHINPUT, dwID) - 16usize];
    ["Offset of field: tagTOUCHINPUT::dwFlags"]
        [::std::mem::offset_of!(tagTOUCHINPUT, dwFlags) - 20usize];
    ["Offset of field: tagTOUCHINPUT::dwMask"]
        [::std::mem::offset_of!(tagTOUCHINPUT, dwMask) - 24usize];
    ["Offset of field: tagTOUCHINPUT::dwTime"]
        [::std::mem::offset_of!(tagTOUCHINPUT, dwTime) - 28usize];
    ["Offset of field: tagTOUCHINPUT::dwExtraInfo"]
        [::std::mem::offset_of!(tagTOUCHINPUT, dwExtraInfo) - 32usize];
    ["Offset of field: tagTOUCHINPUT::cxContact"]
        [::std::mem::offset_of!(tagTOUCHINPUT, cxContact) - 40usize];
    ["Offset of field: tagTOUCHINPUT::cyContact"]
        [::std::mem::offset_of!(tagTOUCHINPUT, cyContact) - 44usize];
};
pub type TOUCHINPUT = tagTOUCHINPUT;
pub type PTOUCHINPUT = *mut tagTOUCHINPUT;
pub type PCTOUCHINPUT = *const TOUCHINPUT;
unsafe extern "C" {
    pub fn GetTouchInputInfo(
        hTouchInput: HTOUCHINPUT,
        cInputs: UINT,
        pInputs: PTOUCHINPUT,
        cbSize: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseTouchInputHandle(hTouchInput: HTOUCHINPUT) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterTouchWindow(hwnd: HWND, ulFlags: ULONG) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterTouchWindow(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn IsTouchWindow(hwnd: HWND, pulFlags: PULONG) -> BOOL;
}
pub const tagPOINTER_INPUT_TYPE_PT_POINTER: tagPOINTER_INPUT_TYPE = 1;
pub const tagPOINTER_INPUT_TYPE_PT_TOUCH: tagPOINTER_INPUT_TYPE = 2;
pub const tagPOINTER_INPUT_TYPE_PT_PEN: tagPOINTER_INPUT_TYPE = 3;
pub const tagPOINTER_INPUT_TYPE_PT_MOUSE: tagPOINTER_INPUT_TYPE = 4;
pub const tagPOINTER_INPUT_TYPE_PT_TOUCHPAD: tagPOINTER_INPUT_TYPE = 5;
pub type tagPOINTER_INPUT_TYPE = ::std::os::raw::c_int;
pub type POINTER_INPUT_TYPE = DWORD;
pub type POINTER_FLAGS = UINT32;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_NONE: tagPOINTER_BUTTON_CHANGE_TYPE = 0;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIRSTBUTTON_DOWN:
    tagPOINTER_BUTTON_CHANGE_TYPE = 1;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIRSTBUTTON_UP:
    tagPOINTER_BUTTON_CHANGE_TYPE = 2;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_SECONDBUTTON_DOWN:
    tagPOINTER_BUTTON_CHANGE_TYPE = 3;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_SECONDBUTTON_UP:
    tagPOINTER_BUTTON_CHANGE_TYPE = 4;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_THIRDBUTTON_DOWN:
    tagPOINTER_BUTTON_CHANGE_TYPE = 5;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_THIRDBUTTON_UP:
    tagPOINTER_BUTTON_CHANGE_TYPE = 6;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FOURTHBUTTON_DOWN:
    tagPOINTER_BUTTON_CHANGE_TYPE = 7;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FOURTHBUTTON_UP:
    tagPOINTER_BUTTON_CHANGE_TYPE = 8;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIFTHBUTTON_DOWN:
    tagPOINTER_BUTTON_CHANGE_TYPE = 9;
pub const tagPOINTER_BUTTON_CHANGE_TYPE_POINTER_CHANGE_FIFTHBUTTON_UP:
    tagPOINTER_BUTTON_CHANGE_TYPE = 10;
pub type tagPOINTER_BUTTON_CHANGE_TYPE = ::std::os::raw::c_int;
pub use self::tagPOINTER_BUTTON_CHANGE_TYPE as POINTER_BUTTON_CHANGE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTER_INFO {
    pub pointerType: POINTER_INPUT_TYPE,
    pub pointerId: UINT32,
    pub frameId: UINT32,
    pub pointerFlags: POINTER_FLAGS,
    pub sourceDevice: HANDLE,
    pub hwndTarget: HWND,
    pub ptPixelLocation: POINT,
    pub ptHimetricLocation: POINT,
    pub ptPixelLocationRaw: POINT,
    pub ptHimetricLocationRaw: POINT,
    pub dwTime: DWORD,
    pub historyCount: UINT32,
    pub InputData: INT32,
    pub dwKeyStates: DWORD,
    pub PerformanceCount: UINT64,
    pub ButtonChangeType: POINTER_BUTTON_CHANGE_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_INFO"][::std::mem::size_of::<tagPOINTER_INFO>() - 96usize];
    ["Alignment of tagPOINTER_INFO"][::std::mem::align_of::<tagPOINTER_INFO>() - 8usize];
    ["Offset of field: tagPOINTER_INFO::pointerType"]
        [::std::mem::offset_of!(tagPOINTER_INFO, pointerType) - 0usize];
    ["Offset of field: tagPOINTER_INFO::pointerId"]
        [::std::mem::offset_of!(tagPOINTER_INFO, pointerId) - 4usize];
    ["Offset of field: tagPOINTER_INFO::frameId"]
        [::std::mem::offset_of!(tagPOINTER_INFO, frameId) - 8usize];
    ["Offset of field: tagPOINTER_INFO::pointerFlags"]
        [::std::mem::offset_of!(tagPOINTER_INFO, pointerFlags) - 12usize];
    ["Offset of field: tagPOINTER_INFO::sourceDevice"]
        [::std::mem::offset_of!(tagPOINTER_INFO, sourceDevice) - 16usize];
    ["Offset of field: tagPOINTER_INFO::hwndTarget"]
        [::std::mem::offset_of!(tagPOINTER_INFO, hwndTarget) - 24usize];
    ["Offset of field: tagPOINTER_INFO::ptPixelLocation"]
        [::std::mem::offset_of!(tagPOINTER_INFO, ptPixelLocation) - 32usize];
    ["Offset of field: tagPOINTER_INFO::ptHimetricLocation"]
        [::std::mem::offset_of!(tagPOINTER_INFO, ptHimetricLocation) - 40usize];
    ["Offset of field: tagPOINTER_INFO::ptPixelLocationRaw"]
        [::std::mem::offset_of!(tagPOINTER_INFO, ptPixelLocationRaw) - 48usize];
    ["Offset of field: tagPOINTER_INFO::ptHimetricLocationRaw"]
        [::std::mem::offset_of!(tagPOINTER_INFO, ptHimetricLocationRaw) - 56usize];
    ["Offset of field: tagPOINTER_INFO::dwTime"]
        [::std::mem::offset_of!(tagPOINTER_INFO, dwTime) - 64usize];
    ["Offset of field: tagPOINTER_INFO::historyCount"]
        [::std::mem::offset_of!(tagPOINTER_INFO, historyCount) - 68usize];
    ["Offset of field: tagPOINTER_INFO::InputData"]
        [::std::mem::offset_of!(tagPOINTER_INFO, InputData) - 72usize];
    ["Offset of field: tagPOINTER_INFO::dwKeyStates"]
        [::std::mem::offset_of!(tagPOINTER_INFO, dwKeyStates) - 76usize];
    ["Offset of field: tagPOINTER_INFO::PerformanceCount"]
        [::std::mem::offset_of!(tagPOINTER_INFO, PerformanceCount) - 80usize];
    ["Offset of field: tagPOINTER_INFO::ButtonChangeType"]
        [::std::mem::offset_of!(tagPOINTER_INFO, ButtonChangeType) - 88usize];
};
pub type POINTER_INFO = tagPOINTER_INFO;
pub type TOUCH_FLAGS = UINT32;
pub type TOUCH_MASK = UINT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTER_TOUCH_INFO {
    pub pointerInfo: POINTER_INFO,
    pub touchFlags: TOUCH_FLAGS,
    pub touchMask: TOUCH_MASK,
    pub rcContact: RECT,
    pub rcContactRaw: RECT,
    pub orientation: UINT32,
    pub pressure: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_TOUCH_INFO"][::std::mem::size_of::<tagPOINTER_TOUCH_INFO>() - 144usize];
    ["Alignment of tagPOINTER_TOUCH_INFO"]
        [::std::mem::align_of::<tagPOINTER_TOUCH_INFO>() - 8usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::pointerInfo"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, pointerInfo) - 0usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::touchFlags"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, touchFlags) - 96usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::touchMask"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, touchMask) - 100usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::rcContact"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, rcContact) - 104usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::rcContactRaw"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, rcContactRaw) - 120usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::orientation"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, orientation) - 136usize];
    ["Offset of field: tagPOINTER_TOUCH_INFO::pressure"]
        [::std::mem::offset_of!(tagPOINTER_TOUCH_INFO, pressure) - 140usize];
};
pub type POINTER_TOUCH_INFO = tagPOINTER_TOUCH_INFO;
pub type PEN_FLAGS = UINT32;
pub type PEN_MASK = UINT32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTER_PEN_INFO {
    pub pointerInfo: POINTER_INFO,
    pub penFlags: PEN_FLAGS,
    pub penMask: PEN_MASK,
    pub pressure: UINT32,
    pub rotation: UINT32,
    pub tiltX: INT32,
    pub tiltY: INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_PEN_INFO"][::std::mem::size_of::<tagPOINTER_PEN_INFO>() - 120usize];
    ["Alignment of tagPOINTER_PEN_INFO"][::std::mem::align_of::<tagPOINTER_PEN_INFO>() - 8usize];
    ["Offset of field: tagPOINTER_PEN_INFO::pointerInfo"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, pointerInfo) - 0usize];
    ["Offset of field: tagPOINTER_PEN_INFO::penFlags"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, penFlags) - 96usize];
    ["Offset of field: tagPOINTER_PEN_INFO::penMask"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, penMask) - 100usize];
    ["Offset of field: tagPOINTER_PEN_INFO::pressure"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, pressure) - 104usize];
    ["Offset of field: tagPOINTER_PEN_INFO::rotation"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, rotation) - 108usize];
    ["Offset of field: tagPOINTER_PEN_INFO::tiltX"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, tiltX) - 112usize];
    ["Offset of field: tagPOINTER_PEN_INFO::tiltY"]
        [::std::mem::offset_of!(tagPOINTER_PEN_INFO, tiltY) - 116usize];
};
pub type POINTER_PEN_INFO = tagPOINTER_PEN_INFO;
pub const POINTER_FEEDBACK_MODE_POINTER_FEEDBACK_DEFAULT: POINTER_FEEDBACK_MODE = 1;
pub const POINTER_FEEDBACK_MODE_POINTER_FEEDBACK_INDIRECT: POINTER_FEEDBACK_MODE = 2;
pub const POINTER_FEEDBACK_MODE_POINTER_FEEDBACK_NONE: POINTER_FEEDBACK_MODE = 3;
pub type POINTER_FEEDBACK_MODE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn InitializeTouchInjection(maxCount: UINT32, dwMode: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn InjectTouchInput(count: UINT32, contacts: *const POINTER_TOUCH_INFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagUSAGE_PROPERTIES {
    pub level: USHORT,
    pub page: USHORT,
    pub usage: USHORT,
    pub logicalMinimum: INT32,
    pub logicalMaximum: INT32,
    pub unit: USHORT,
    pub exponent: USHORT,
    pub count: BYTE,
    pub physicalMinimum: INT32,
    pub physicalMaximum: INT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagUSAGE_PROPERTIES"][::std::mem::size_of::<tagUSAGE_PROPERTIES>() - 32usize];
    ["Alignment of tagUSAGE_PROPERTIES"][::std::mem::align_of::<tagUSAGE_PROPERTIES>() - 4usize];
    ["Offset of field: tagUSAGE_PROPERTIES::level"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, level) - 0usize];
    ["Offset of field: tagUSAGE_PROPERTIES::page"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, page) - 2usize];
    ["Offset of field: tagUSAGE_PROPERTIES::usage"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, usage) - 4usize];
    ["Offset of field: tagUSAGE_PROPERTIES::logicalMinimum"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, logicalMinimum) - 8usize];
    ["Offset of field: tagUSAGE_PROPERTIES::logicalMaximum"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, logicalMaximum) - 12usize];
    ["Offset of field: tagUSAGE_PROPERTIES::unit"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, unit) - 16usize];
    ["Offset of field: tagUSAGE_PROPERTIES::exponent"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, exponent) - 18usize];
    ["Offset of field: tagUSAGE_PROPERTIES::count"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, count) - 20usize];
    ["Offset of field: tagUSAGE_PROPERTIES::physicalMinimum"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, physicalMinimum) - 24usize];
    ["Offset of field: tagUSAGE_PROPERTIES::physicalMaximum"]
        [::std::mem::offset_of!(tagUSAGE_PROPERTIES, physicalMaximum) - 28usize];
};
pub type USAGE_PROPERTIES = tagUSAGE_PROPERTIES;
pub type PUSAGE_PROPERTIES = *mut tagUSAGE_PROPERTIES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagPOINTER_TYPE_INFO {
    pub type_: POINTER_INPUT_TYPE,
    pub __bindgen_anon_1: tagPOINTER_TYPE_INFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagPOINTER_TYPE_INFO__bindgen_ty_1 {
    pub touchInfo: POINTER_TOUCH_INFO,
    pub penInfo: POINTER_PEN_INFO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_TYPE_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<tagPOINTER_TYPE_INFO__bindgen_ty_1>() - 144usize];
    ["Alignment of tagPOINTER_TYPE_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<tagPOINTER_TYPE_INFO__bindgen_ty_1>() - 8usize];
    ["Offset of field: tagPOINTER_TYPE_INFO__bindgen_ty_1::touchInfo"]
        [::std::mem::offset_of!(tagPOINTER_TYPE_INFO__bindgen_ty_1, touchInfo) - 0usize];
    ["Offset of field: tagPOINTER_TYPE_INFO__bindgen_ty_1::penInfo"]
        [::std::mem::offset_of!(tagPOINTER_TYPE_INFO__bindgen_ty_1, penInfo) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_TYPE_INFO"][::std::mem::size_of::<tagPOINTER_TYPE_INFO>() - 152usize];
    ["Alignment of tagPOINTER_TYPE_INFO"][::std::mem::align_of::<tagPOINTER_TYPE_INFO>() - 8usize];
    ["Offset of field: tagPOINTER_TYPE_INFO::type_"]
        [::std::mem::offset_of!(tagPOINTER_TYPE_INFO, type_) - 0usize];
};
pub type POINTER_TYPE_INFO = tagPOINTER_TYPE_INFO;
pub type PPOINTER_TYPE_INFO = *mut tagPOINTER_TYPE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagINPUT_INJECTION_VALUE {
    pub page: USHORT,
    pub usage: USHORT,
    pub value: INT32,
    pub index: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT_INJECTION_VALUE"]
        [::std::mem::size_of::<tagINPUT_INJECTION_VALUE>() - 12usize];
    ["Alignment of tagINPUT_INJECTION_VALUE"]
        [::std::mem::align_of::<tagINPUT_INJECTION_VALUE>() - 4usize];
    ["Offset of field: tagINPUT_INJECTION_VALUE::page"]
        [::std::mem::offset_of!(tagINPUT_INJECTION_VALUE, page) - 0usize];
    ["Offset of field: tagINPUT_INJECTION_VALUE::usage"]
        [::std::mem::offset_of!(tagINPUT_INJECTION_VALUE, usage) - 2usize];
    ["Offset of field: tagINPUT_INJECTION_VALUE::value"]
        [::std::mem::offset_of!(tagINPUT_INJECTION_VALUE, value) - 4usize];
    ["Offset of field: tagINPUT_INJECTION_VALUE::index"]
        [::std::mem::offset_of!(tagINPUT_INJECTION_VALUE, index) - 8usize];
};
pub type INPUT_INJECTION_VALUE = tagINPUT_INJECTION_VALUE;
pub type PINPUT_INJECTION_VALUE = *mut tagINPUT_INJECTION_VALUE;
unsafe extern "C" {
    pub fn GetPointerType(pointerId: UINT32, pointerType: *mut POINTER_INPUT_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerCursorId(pointerId: UINT32, cursorId: *mut UINT32) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerInfo(pointerId: UINT32, pointerInfo: *mut POINTER_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerInfoHistory(
        pointerId: UINT32,
        entriesCount: *mut UINT32,
        pointerInfo: *mut POINTER_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerFrameInfo(
        pointerId: UINT32,
        pointerCount: *mut UINT32,
        pointerInfo: *mut POINTER_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerFrameInfoHistory(
        pointerId: UINT32,
        entriesCount: *mut UINT32,
        pointerCount: *mut UINT32,
        pointerInfo: *mut POINTER_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerTouchInfo(pointerId: UINT32, touchInfo: *mut POINTER_TOUCH_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerTouchInfoHistory(
        pointerId: UINT32,
        entriesCount: *mut UINT32,
        touchInfo: *mut POINTER_TOUCH_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerFrameTouchInfo(
        pointerId: UINT32,
        pointerCount: *mut UINT32,
        touchInfo: *mut POINTER_TOUCH_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerFrameTouchInfoHistory(
        pointerId: UINT32,
        entriesCount: *mut UINT32,
        pointerCount: *mut UINT32,
        touchInfo: *mut POINTER_TOUCH_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerPenInfo(pointerId: UINT32, penInfo: *mut POINTER_PEN_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerPenInfoHistory(
        pointerId: UINT32,
        entriesCount: *mut UINT32,
        penInfo: *mut POINTER_PEN_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerFramePenInfo(
        pointerId: UINT32,
        pointerCount: *mut UINT32,
        penInfo: *mut POINTER_PEN_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerFramePenInfoHistory(
        pointerId: UINT32,
        entriesCount: *mut UINT32,
        pointerCount: *mut UINT32,
        penInfo: *mut POINTER_PEN_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SkipPointerFrameMessages(pointerId: UINT32) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterPointerInputTarget(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterPointerInputTarget(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterPointerInputTargetEx(
        hwnd: HWND,
        pointerType: POINTER_INPUT_TYPE,
        fObserve: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnregisterPointerInputTargetEx(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSYNTHETICPOINTERDEVICE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HSYNTHETICPOINTERDEVICE__"]
        [::std::mem::size_of::<HSYNTHETICPOINTERDEVICE__>() - 4usize];
    ["Alignment of HSYNTHETICPOINTERDEVICE__"]
        [::std::mem::align_of::<HSYNTHETICPOINTERDEVICE__>() - 4usize];
    ["Offset of field: HSYNTHETICPOINTERDEVICE__::unused"]
        [::std::mem::offset_of!(HSYNTHETICPOINTERDEVICE__, unused) - 0usize];
};
pub type HSYNTHETICPOINTERDEVICE = *mut HSYNTHETICPOINTERDEVICE__;
unsafe extern "C" {
    pub fn CreateSyntheticPointerDevice(
        pointerType: POINTER_INPUT_TYPE,
        maxCount: ULONG,
        mode: POINTER_FEEDBACK_MODE,
    ) -> HSYNTHETICPOINTERDEVICE;
}
unsafe extern "C" {
    pub fn InjectSyntheticPointerInput(
        device: HSYNTHETICPOINTERDEVICE,
        pointerInfo: *const POINTER_TYPE_INFO,
        count: UINT32,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DestroySyntheticPointerDevice(device: HSYNTHETICPOINTERDEVICE);
}
unsafe extern "C" {
    pub fn EnableMouseInPointer(fEnable: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn IsMouseInPointerEnabled() -> BOOL;
}
unsafe extern "C" {
    pub fn EnableMouseInPointerForThread() -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterTouchHitTestingWindow(hwnd: HWND, value: ULONG) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION {
    pub score: UINT16,
    pub adjustedPoint: POINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION"]
        [::std::mem::size_of::<tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION>() - 12usize];
    ["Alignment of tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION"]
        [::std::mem::align_of::<tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION>() - 4usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION::score"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION, score) - 0usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION::adjustedPoint"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION, adjustedPoint) - 4usize];
};
pub type TOUCH_HIT_TESTING_PROXIMITY_EVALUATION = tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
pub type PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = *mut tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTOUCH_HIT_TESTING_INPUT {
    pub pointerId: UINT32,
    pub point: POINT,
    pub boundingBox: RECT,
    pub nonOccludedBoundingBox: RECT,
    pub orientation: UINT32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTOUCH_HIT_TESTING_INPUT"]
        [::std::mem::size_of::<tagTOUCH_HIT_TESTING_INPUT>() - 48usize];
    ["Alignment of tagTOUCH_HIT_TESTING_INPUT"]
        [::std::mem::align_of::<tagTOUCH_HIT_TESTING_INPUT>() - 4usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_INPUT::pointerId"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_INPUT, pointerId) - 0usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_INPUT::point"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_INPUT, point) - 4usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_INPUT::boundingBox"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_INPUT, boundingBox) - 12usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_INPUT::nonOccludedBoundingBox"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_INPUT, nonOccludedBoundingBox) - 28usize];
    ["Offset of field: tagTOUCH_HIT_TESTING_INPUT::orientation"]
        [::std::mem::offset_of!(tagTOUCH_HIT_TESTING_INPUT, orientation) - 44usize];
};
pub type TOUCH_HIT_TESTING_INPUT = tagTOUCH_HIT_TESTING_INPUT;
pub type PTOUCH_HIT_TESTING_INPUT = *mut tagTOUCH_HIT_TESTING_INPUT;
unsafe extern "C" {
    pub fn EvaluateProximityToRect(
        controlBoundingBox: *const RECT,
        pHitTestingInput: *const TOUCH_HIT_TESTING_INPUT,
        pProximityEval: *mut TOUCH_HIT_TESTING_PROXIMITY_EVALUATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EvaluateProximityToPolygon(
        numVertices: UINT32,
        controlPolygon: *const POINT,
        pHitTestingInput: *const TOUCH_HIT_TESTING_INPUT,
        pProximityEval: *mut TOUCH_HIT_TESTING_PROXIMITY_EVALUATION,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PackTouchHitTestingProximityEvaluation(
        pHitTestingInput: *const TOUCH_HIT_TESTING_INPUT,
        pProximityEval: *const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION,
    ) -> LRESULT;
}
pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_CONTACTVISUALIZATION: tagFEEDBACK_TYPE = 1;
pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_BARRELVISUALIZATION: tagFEEDBACK_TYPE = 2;
pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_TAP: tagFEEDBACK_TYPE = 3;
pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_DOUBLETAP: tagFEEDBACK_TYPE = 4;
pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_PRESSANDHOLD: tagFEEDBACK_TYPE = 5;
pub const tagFEEDBACK_TYPE_FEEDBACK_PEN_RIGHTTAP: tagFEEDBACK_TYPE = 6;
pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_TAP: tagFEEDBACK_TYPE = 7;
pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_DOUBLETAP: tagFEEDBACK_TYPE = 8;
pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_PRESSANDHOLD: tagFEEDBACK_TYPE = 9;
pub const tagFEEDBACK_TYPE_FEEDBACK_TOUCH_RIGHTTAP: tagFEEDBACK_TYPE = 10;
pub const tagFEEDBACK_TYPE_FEEDBACK_GESTURE_PRESSANDTAP: tagFEEDBACK_TYPE = 11;
pub const tagFEEDBACK_TYPE_FEEDBACK_MAX: tagFEEDBACK_TYPE = -1;
pub type tagFEEDBACK_TYPE = ::std::os::raw::c_int;
pub use self::tagFEEDBACK_TYPE as FEEDBACK_TYPE;
unsafe extern "C" {
    pub fn GetWindowFeedbackSetting(
        hwnd: HWND,
        feedback: FEEDBACK_TYPE,
        dwFlags: DWORD,
        pSize: *mut UINT32,
        config: *mut ::std::os::raw::c_void,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowFeedbackSetting(
        hwnd: HWND,
        feedback: FEEDBACK_TYPE,
        dwFlags: DWORD,
        size: UINT32,
        configuration: *const ::std::os::raw::c_void,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagINPUT_TRANSFORM {
    pub __bindgen_anon_1: tagINPUT_TRANSFORM__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagINPUT_TRANSFORM__bindgen_ty_1 {
    pub __bindgen_anon_1: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1,
    pub m: [[f32; 4usize]; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1 {
    pub _11: f32,
    pub _12: f32,
    pub _13: f32,
    pub _14: f32,
    pub _21: f32,
    pub _22: f32,
    pub _23: f32,
    pub _24: f32,
    pub _31: f32,
    pub _32: f32,
    pub _33: f32,
    pub _34: f32,
    pub _41: f32,
    pub _42: f32,
    pub _43: f32,
    pub _44: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1>() - 64usize];
    ["Alignment of tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_11"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _11) - 0usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_12"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _12) - 4usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_13"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _13) - 8usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_14"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _14) - 12usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_21"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _21) - 16usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_22"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _22) - 20usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_23"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _23) - 24usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_24"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _24) - 28usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_31"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _31) - 32usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_32"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _32) - 36usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_33"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _33) - 40usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_34"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _34) - 44usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_41"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _41) - 48usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_42"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _42) - 52usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_43"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _43) - 56usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1::_44"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1, _44) - 60usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT_TRANSFORM__bindgen_ty_1"]
        [::std::mem::size_of::<tagINPUT_TRANSFORM__bindgen_ty_1>() - 64usize];
    ["Alignment of tagINPUT_TRANSFORM__bindgen_ty_1"]
        [::std::mem::align_of::<tagINPUT_TRANSFORM__bindgen_ty_1>() - 4usize];
    ["Offset of field: tagINPUT_TRANSFORM__bindgen_ty_1::m"]
        [::std::mem::offset_of!(tagINPUT_TRANSFORM__bindgen_ty_1, m) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT_TRANSFORM"][::std::mem::size_of::<tagINPUT_TRANSFORM>() - 64usize];
    ["Alignment of tagINPUT_TRANSFORM"][::std::mem::align_of::<tagINPUT_TRANSFORM>() - 4usize];
};
pub type INPUT_TRANSFORM = tagINPUT_TRANSFORM;
unsafe extern "C" {
    pub fn GetPointerInputTransform(
        pointerId: UINT32,
        historyCount: UINT32,
        inputTransform: *mut INPUT_TRANSFORM,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagLASTINPUTINFO {
    pub cbSize: UINT,
    pub dwTime: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagLASTINPUTINFO"][::std::mem::size_of::<tagLASTINPUTINFO>() - 8usize];
    ["Alignment of tagLASTINPUTINFO"][::std::mem::align_of::<tagLASTINPUTINFO>() - 4usize];
    ["Offset of field: tagLASTINPUTINFO::cbSize"]
        [::std::mem::offset_of!(tagLASTINPUTINFO, cbSize) - 0usize];
    ["Offset of field: tagLASTINPUTINFO::dwTime"]
        [::std::mem::offset_of!(tagLASTINPUTINFO, dwTime) - 4usize];
};
pub type LASTINPUTINFO = tagLASTINPUTINFO;
pub type PLASTINPUTINFO = *mut tagLASTINPUTINFO;
unsafe extern "C" {
    pub fn GetLastInputInfo(plii: PLASTINPUTINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn MapVirtualKeyA(uCode: UINT, uMapType: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn MapVirtualKeyW(uCode: UINT, uMapType: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn MapVirtualKeyExA(uCode: UINT, uMapType: UINT, dwhkl: HKL) -> UINT;
}
unsafe extern "C" {
    pub fn MapVirtualKeyExW(uCode: UINT, uMapType: UINT, dwhkl: HKL) -> UINT;
}
unsafe extern "C" {
    pub fn GetInputState() -> BOOL;
}
unsafe extern "C" {
    pub fn GetQueueStatus(flags: UINT) -> DWORD;
}
unsafe extern "C" {
    pub fn GetCapture() -> HWND;
}
unsafe extern "C" {
    pub fn SetCapture(hWnd: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn ReleaseCapture() -> BOOL;
}
unsafe extern "C" {
    pub fn MsgWaitForMultipleObjects(
        nCount: DWORD,
        pHandles: *const HANDLE,
        fWaitAll: BOOL,
        dwMilliseconds: DWORD,
        dwWakeMask: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn MsgWaitForMultipleObjectsEx(
        nCount: DWORD,
        pHandles: *const HANDLE,
        dwMilliseconds: DWORD,
        dwWakeMask: DWORD,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn SetTimer(
        hWnd: HWND,
        nIDEvent: UINT_PTR,
        uElapse: UINT,
        lpTimerFunc: TIMERPROC,
    ) -> UINT_PTR;
}
unsafe extern "C" {
    pub fn SetCoalescableTimer(
        hWnd: HWND,
        nIDEvent: UINT_PTR,
        uElapse: UINT,
        lpTimerFunc: TIMERPROC,
        uToleranceDelay: ULONG,
    ) -> UINT_PTR;
}
unsafe extern "C" {
    pub fn KillTimer(hWnd: HWND, uIDEvent: UINT_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn IsWindowUnicode(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn EnableWindow(hWnd: HWND, bEnable: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn IsWindowEnabled(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn LoadAcceleratorsA(hInstance: HINSTANCE, lpTableName: LPCSTR) -> HACCEL;
}
unsafe extern "C" {
    pub fn LoadAcceleratorsW(hInstance: HINSTANCE, lpTableName: LPCWSTR) -> HACCEL;
}
unsafe extern "C" {
    pub fn CreateAcceleratorTableA(paccel: LPACCEL, cAccel: ::std::os::raw::c_int) -> HACCEL;
}
unsafe extern "C" {
    pub fn CreateAcceleratorTableW(paccel: LPACCEL, cAccel: ::std::os::raw::c_int) -> HACCEL;
}
unsafe extern "C" {
    pub fn DestroyAcceleratorTable(hAccel: HACCEL) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyAcceleratorTableA(
        hAccelSrc: HACCEL,
        lpAccelDst: LPACCEL,
        cAccelEntries: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CopyAcceleratorTableW(
        hAccelSrc: HACCEL,
        lpAccelDst: LPACCEL,
        cAccelEntries: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TranslateAcceleratorA(
        hWnd: HWND,
        hAccTable: HACCEL,
        lpMsg: LPMSG,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TranslateAcceleratorW(
        hWnd: HWND,
        hAccTable: HACCEL,
        lpMsg: LPMSG,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetSystemMetrics(nIndex: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetSystemMetricsForDpi(
        nIndex: ::std::os::raw::c_int,
        dpi: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LoadMenuA(hInstance: HINSTANCE, lpMenuName: LPCSTR) -> HMENU;
}
unsafe extern "C" {
    pub fn LoadMenuW(hInstance: HINSTANCE, lpMenuName: LPCWSTR) -> HMENU;
}
unsafe extern "C" {
    pub fn LoadMenuIndirectA(lpMenuTemplate: *const MENUTEMPLATEA) -> HMENU;
}
unsafe extern "C" {
    pub fn LoadMenuIndirectW(lpMenuTemplate: *const MENUTEMPLATEW) -> HMENU;
}
unsafe extern "C" {
    pub fn GetMenu(hWnd: HWND) -> HMENU;
}
unsafe extern "C" {
    pub fn SetMenu(hWnd: HWND, hMenu: HMENU) -> BOOL;
}
unsafe extern "C" {
    pub fn ChangeMenuA(
        hMenu: HMENU,
        cmd: UINT,
        lpszNewItem: LPCSTR,
        cmdInsert: UINT,
        flags: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ChangeMenuW(
        hMenu: HMENU,
        cmd: UINT,
        lpszNewItem: LPCWSTR,
        cmdInsert: UINT,
        flags: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn HiliteMenuItem(hWnd: HWND, hMenu: HMENU, uIDHiliteItem: UINT, uHilite: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuStringA(
        hMenu: HMENU,
        uIDItem: UINT,
        lpString: LPSTR,
        cchMax: ::std::os::raw::c_int,
        flags: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetMenuStringW(
        hMenu: HMENU,
        uIDItem: UINT,
        lpString: LPWSTR,
        cchMax: ::std::os::raw::c_int,
        flags: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetMenuState(hMenu: HMENU, uId: UINT, uFlags: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn DrawMenuBar(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemMenu(hWnd: HWND, bRevert: BOOL) -> HMENU;
}
unsafe extern "C" {
    pub fn CreateMenu() -> HMENU;
}
unsafe extern "C" {
    pub fn CreatePopupMenu() -> HMENU;
}
unsafe extern "C" {
    pub fn DestroyMenu(hMenu: HMENU) -> BOOL;
}
unsafe extern "C" {
    pub fn CheckMenuItem(hMenu: HMENU, uIDCheckItem: UINT, uCheck: UINT) -> DWORD;
}
unsafe extern "C" {
    pub fn EnableMenuItem(hMenu: HMENU, uIDEnableItem: UINT, uEnable: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSubMenu(hMenu: HMENU, nPos: ::std::os::raw::c_int) -> HMENU;
}
unsafe extern "C" {
    pub fn GetMenuItemID(hMenu: HMENU, nPos: ::std::os::raw::c_int) -> UINT;
}
unsafe extern "C" {
    pub fn GetMenuItemCount(hMenu: HMENU) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn InsertMenuA(
        hMenu: HMENU,
        uPosition: UINT,
        uFlags: UINT,
        uIDNewItem: UINT_PTR,
        lpNewItem: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InsertMenuW(
        hMenu: HMENU,
        uPosition: UINT,
        uFlags: UINT,
        uIDNewItem: UINT_PTR,
        lpNewItem: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AppendMenuA(hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR)
    -> BOOL;
}
unsafe extern "C" {
    pub fn AppendMenuW(
        hMenu: HMENU,
        uFlags: UINT,
        uIDNewItem: UINT_PTR,
        lpNewItem: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ModifyMenuA(
        hMnu: HMENU,
        uPosition: UINT,
        uFlags: UINT,
        uIDNewItem: UINT_PTR,
        lpNewItem: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ModifyMenuW(
        hMnu: HMENU,
        uPosition: UINT,
        uFlags: UINT,
        uIDNewItem: UINT_PTR,
        lpNewItem: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RemoveMenu(hMenu: HMENU, uPosition: UINT, uFlags: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn DeleteMenu(hMenu: HMENU, uPosition: UINT, uFlags: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetMenuItemBitmaps(
        hMenu: HMENU,
        uPosition: UINT,
        uFlags: UINT,
        hBitmapUnchecked: HBITMAP,
        hBitmapChecked: HBITMAP,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuCheckMarkDimensions() -> LONG;
}
unsafe extern "C" {
    pub fn TrackPopupMenu(
        hMenu: HMENU,
        uFlags: UINT,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        nReserved: ::std::os::raw::c_int,
        hWnd: HWND,
        prcRect: *const RECT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTPMPARAMS {
    pub cbSize: UINT,
    pub rcExclude: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTPMPARAMS"][::std::mem::size_of::<tagTPMPARAMS>() - 20usize];
    ["Alignment of tagTPMPARAMS"][::std::mem::align_of::<tagTPMPARAMS>() - 4usize];
    ["Offset of field: tagTPMPARAMS::cbSize"]
        [::std::mem::offset_of!(tagTPMPARAMS, cbSize) - 0usize];
    ["Offset of field: tagTPMPARAMS::rcExclude"]
        [::std::mem::offset_of!(tagTPMPARAMS, rcExclude) - 4usize];
};
pub type TPMPARAMS = tagTPMPARAMS;
pub type LPTPMPARAMS = *mut TPMPARAMS;
unsafe extern "C" {
    pub fn TrackPopupMenuEx(
        hMenu: HMENU,
        uFlags: UINT,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        hwnd: HWND,
        lptpm: LPTPMPARAMS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CalculatePopupWindowPosition(
        anchorPoint: *const POINT,
        windowSize: *const SIZE,
        flags: UINT,
        excludeRect: *mut RECT,
        popupWindowPosition: *mut RECT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENUINFO {
    pub cbSize: DWORD,
    pub fMask: DWORD,
    pub dwStyle: DWORD,
    pub cyMax: UINT,
    pub hbrBack: HBRUSH,
    pub dwContextHelpID: DWORD,
    pub dwMenuData: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMENUINFO"][::std::mem::size_of::<tagMENUINFO>() - 40usize];
    ["Alignment of tagMENUINFO"][::std::mem::align_of::<tagMENUINFO>() - 8usize];
    ["Offset of field: tagMENUINFO::cbSize"][::std::mem::offset_of!(tagMENUINFO, cbSize) - 0usize];
    ["Offset of field: tagMENUINFO::fMask"][::std::mem::offset_of!(tagMENUINFO, fMask) - 4usize];
    ["Offset of field: tagMENUINFO::dwStyle"]
        [::std::mem::offset_of!(tagMENUINFO, dwStyle) - 8usize];
    ["Offset of field: tagMENUINFO::cyMax"][::std::mem::offset_of!(tagMENUINFO, cyMax) - 12usize];
    ["Offset of field: tagMENUINFO::hbrBack"]
        [::std::mem::offset_of!(tagMENUINFO, hbrBack) - 16usize];
    ["Offset of field: tagMENUINFO::dwContextHelpID"]
        [::std::mem::offset_of!(tagMENUINFO, dwContextHelpID) - 24usize];
    ["Offset of field: tagMENUINFO::dwMenuData"]
        [::std::mem::offset_of!(tagMENUINFO, dwMenuData) - 32usize];
};
pub type MENUINFO = tagMENUINFO;
pub type LPMENUINFO = *mut tagMENUINFO;
pub type LPCMENUINFO = *const MENUINFO;
unsafe extern "C" {
    pub fn GetMenuInfo(arg1: HMENU, arg2: LPMENUINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn SetMenuInfo(arg1: HMENU, arg2: LPCMENUINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn EndMenu() -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENUGETOBJECTINFO {
    pub dwFlags: DWORD,
    pub uPos: UINT,
    pub hmenu: HMENU,
    pub riid: PVOID,
    pub pvObj: PVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMENUGETOBJECTINFO"][::std::mem::size_of::<tagMENUGETOBJECTINFO>() - 32usize];
    ["Alignment of tagMENUGETOBJECTINFO"][::std::mem::align_of::<tagMENUGETOBJECTINFO>() - 8usize];
    ["Offset of field: tagMENUGETOBJECTINFO::dwFlags"]
        [::std::mem::offset_of!(tagMENUGETOBJECTINFO, dwFlags) - 0usize];
    ["Offset of field: tagMENUGETOBJECTINFO::uPos"]
        [::std::mem::offset_of!(tagMENUGETOBJECTINFO, uPos) - 4usize];
    ["Offset of field: tagMENUGETOBJECTINFO::hmenu"]
        [::std::mem::offset_of!(tagMENUGETOBJECTINFO, hmenu) - 8usize];
    ["Offset of field: tagMENUGETOBJECTINFO::riid"]
        [::std::mem::offset_of!(tagMENUGETOBJECTINFO, riid) - 16usize];
    ["Offset of field: tagMENUGETOBJECTINFO::pvObj"]
        [::std::mem::offset_of!(tagMENUGETOBJECTINFO, pvObj) - 24usize];
};
pub type MENUGETOBJECTINFO = tagMENUGETOBJECTINFO;
pub type PMENUGETOBJECTINFO = *mut tagMENUGETOBJECTINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENUITEMINFOA {
    pub cbSize: UINT,
    pub fMask: UINT,
    pub fType: UINT,
    pub fState: UINT,
    pub wID: UINT,
    pub hSubMenu: HMENU,
    pub hbmpChecked: HBITMAP,
    pub hbmpUnchecked: HBITMAP,
    pub dwItemData: ULONG_PTR,
    pub dwTypeData: LPSTR,
    pub cch: UINT,
    pub hbmpItem: HBITMAP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMENUITEMINFOA"][::std::mem::size_of::<tagMENUITEMINFOA>() - 80usize];
    ["Alignment of tagMENUITEMINFOA"][::std::mem::align_of::<tagMENUITEMINFOA>() - 8usize];
    ["Offset of field: tagMENUITEMINFOA::cbSize"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, cbSize) - 0usize];
    ["Offset of field: tagMENUITEMINFOA::fMask"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, fMask) - 4usize];
    ["Offset of field: tagMENUITEMINFOA::fType"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, fType) - 8usize];
    ["Offset of field: tagMENUITEMINFOA::fState"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, fState) - 12usize];
    ["Offset of field: tagMENUITEMINFOA::wID"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, wID) - 16usize];
    ["Offset of field: tagMENUITEMINFOA::hSubMenu"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, hSubMenu) - 24usize];
    ["Offset of field: tagMENUITEMINFOA::hbmpChecked"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, hbmpChecked) - 32usize];
    ["Offset of field: tagMENUITEMINFOA::hbmpUnchecked"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, hbmpUnchecked) - 40usize];
    ["Offset of field: tagMENUITEMINFOA::dwItemData"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, dwItemData) - 48usize];
    ["Offset of field: tagMENUITEMINFOA::dwTypeData"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, dwTypeData) - 56usize];
    ["Offset of field: tagMENUITEMINFOA::cch"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, cch) - 64usize];
    ["Offset of field: tagMENUITEMINFOA::hbmpItem"]
        [::std::mem::offset_of!(tagMENUITEMINFOA, hbmpItem) - 72usize];
};
pub type MENUITEMINFOA = tagMENUITEMINFOA;
pub type LPMENUITEMINFOA = *mut tagMENUITEMINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENUITEMINFOW {
    pub cbSize: UINT,
    pub fMask: UINT,
    pub fType: UINT,
    pub fState: UINT,
    pub wID: UINT,
    pub hSubMenu: HMENU,
    pub hbmpChecked: HBITMAP,
    pub hbmpUnchecked: HBITMAP,
    pub dwItemData: ULONG_PTR,
    pub dwTypeData: LPWSTR,
    pub cch: UINT,
    pub hbmpItem: HBITMAP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMENUITEMINFOW"][::std::mem::size_of::<tagMENUITEMINFOW>() - 80usize];
    ["Alignment of tagMENUITEMINFOW"][::std::mem::align_of::<tagMENUITEMINFOW>() - 8usize];
    ["Offset of field: tagMENUITEMINFOW::cbSize"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, cbSize) - 0usize];
    ["Offset of field: tagMENUITEMINFOW::fMask"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, fMask) - 4usize];
    ["Offset of field: tagMENUITEMINFOW::fType"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, fType) - 8usize];
    ["Offset of field: tagMENUITEMINFOW::fState"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, fState) - 12usize];
    ["Offset of field: tagMENUITEMINFOW::wID"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, wID) - 16usize];
    ["Offset of field: tagMENUITEMINFOW::hSubMenu"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, hSubMenu) - 24usize];
    ["Offset of field: tagMENUITEMINFOW::hbmpChecked"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, hbmpChecked) - 32usize];
    ["Offset of field: tagMENUITEMINFOW::hbmpUnchecked"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, hbmpUnchecked) - 40usize];
    ["Offset of field: tagMENUITEMINFOW::dwItemData"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, dwItemData) - 48usize];
    ["Offset of field: tagMENUITEMINFOW::dwTypeData"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, dwTypeData) - 56usize];
    ["Offset of field: tagMENUITEMINFOW::cch"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, cch) - 64usize];
    ["Offset of field: tagMENUITEMINFOW::hbmpItem"]
        [::std::mem::offset_of!(tagMENUITEMINFOW, hbmpItem) - 72usize];
};
pub type MENUITEMINFOW = tagMENUITEMINFOW;
pub type LPMENUITEMINFOW = *mut tagMENUITEMINFOW;
pub type MENUITEMINFO = MENUITEMINFOA;
pub type LPMENUITEMINFO = LPMENUITEMINFOA;
pub type LPCMENUITEMINFOA = *const MENUITEMINFOA;
pub type LPCMENUITEMINFOW = *const MENUITEMINFOW;
pub type LPCMENUITEMINFO = LPCMENUITEMINFOA;
unsafe extern "C" {
    pub fn InsertMenuItemA(
        hmenu: HMENU,
        item: UINT,
        fByPosition: BOOL,
        lpmi: LPCMENUITEMINFOA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InsertMenuItemW(
        hmenu: HMENU,
        item: UINT,
        fByPosition: BOOL,
        lpmi: LPCMENUITEMINFOW,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuItemInfoA(
        hmenu: HMENU,
        item: UINT,
        fByPosition: BOOL,
        lpmii: LPMENUITEMINFOA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuItemInfoW(
        hmenu: HMENU,
        item: UINT,
        fByPosition: BOOL,
        lpmii: LPMENUITEMINFOW,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetMenuItemInfoA(
        hmenu: HMENU,
        item: UINT,
        fByPositon: BOOL,
        lpmii: LPCMENUITEMINFOA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetMenuItemInfoW(
        hmenu: HMENU,
        item: UINT,
        fByPositon: BOOL,
        lpmii: LPCMENUITEMINFOW,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuDefaultItem(hMenu: HMENU, fByPos: UINT, gmdiFlags: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn SetMenuDefaultItem(hMenu: HMENU, uItem: UINT, fByPos: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuItemRect(hWnd: HWND, hMenu: HMENU, uItem: UINT, lprcItem: LPRECT) -> BOOL;
}
unsafe extern "C" {
    pub fn MenuItemFromPoint(hWnd: HWND, hMenu: HMENU, ptScreen: POINT) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDROPSTRUCT {
    pub hwndSource: HWND,
    pub hwndSink: HWND,
    pub wFmt: DWORD,
    pub dwData: ULONG_PTR,
    pub ptDrop: POINT,
    pub dwControlData: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDROPSTRUCT"][::std::mem::size_of::<tagDROPSTRUCT>() - 48usize];
    ["Alignment of tagDROPSTRUCT"][::std::mem::align_of::<tagDROPSTRUCT>() - 8usize];
    ["Offset of field: tagDROPSTRUCT::hwndSource"]
        [::std::mem::offset_of!(tagDROPSTRUCT, hwndSource) - 0usize];
    ["Offset of field: tagDROPSTRUCT::hwndSink"]
        [::std::mem::offset_of!(tagDROPSTRUCT, hwndSink) - 8usize];
    ["Offset of field: tagDROPSTRUCT::wFmt"][::std::mem::offset_of!(tagDROPSTRUCT, wFmt) - 16usize];
    ["Offset of field: tagDROPSTRUCT::dwData"]
        [::std::mem::offset_of!(tagDROPSTRUCT, dwData) - 24usize];
    ["Offset of field: tagDROPSTRUCT::ptDrop"]
        [::std::mem::offset_of!(tagDROPSTRUCT, ptDrop) - 32usize];
    ["Offset of field: tagDROPSTRUCT::dwControlData"]
        [::std::mem::offset_of!(tagDROPSTRUCT, dwControlData) - 40usize];
};
pub type DROPSTRUCT = tagDROPSTRUCT;
pub type PDROPSTRUCT = *mut tagDROPSTRUCT;
pub type LPDROPSTRUCT = *mut tagDROPSTRUCT;
unsafe extern "C" {
    pub fn DragObject(
        hwndParent: HWND,
        hwndFrom: HWND,
        fmt: UINT,
        data: ULONG_PTR,
        hcur: HCURSOR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn DragDetect(hwnd: HWND, pt: POINT) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawIcon(
        hDC: HDC,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        hIcon: HICON,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagDRAWTEXTPARAMS {
    pub cbSize: UINT,
    pub iTabLength: ::std::os::raw::c_int,
    pub iLeftMargin: ::std::os::raw::c_int,
    pub iRightMargin: ::std::os::raw::c_int,
    pub uiLengthDrawn: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagDRAWTEXTPARAMS"][::std::mem::size_of::<tagDRAWTEXTPARAMS>() - 20usize];
    ["Alignment of tagDRAWTEXTPARAMS"][::std::mem::align_of::<tagDRAWTEXTPARAMS>() - 4usize];
    ["Offset of field: tagDRAWTEXTPARAMS::cbSize"]
        [::std::mem::offset_of!(tagDRAWTEXTPARAMS, cbSize) - 0usize];
    ["Offset of field: tagDRAWTEXTPARAMS::iTabLength"]
        [::std::mem::offset_of!(tagDRAWTEXTPARAMS, iTabLength) - 4usize];
    ["Offset of field: tagDRAWTEXTPARAMS::iLeftMargin"]
        [::std::mem::offset_of!(tagDRAWTEXTPARAMS, iLeftMargin) - 8usize];
    ["Offset of field: tagDRAWTEXTPARAMS::iRightMargin"]
        [::std::mem::offset_of!(tagDRAWTEXTPARAMS, iRightMargin) - 12usize];
    ["Offset of field: tagDRAWTEXTPARAMS::uiLengthDrawn"]
        [::std::mem::offset_of!(tagDRAWTEXTPARAMS, uiLengthDrawn) - 16usize];
};
pub type DRAWTEXTPARAMS = tagDRAWTEXTPARAMS;
pub type LPDRAWTEXTPARAMS = *mut tagDRAWTEXTPARAMS;
unsafe extern "C" {
    pub fn DrawTextA(
        hdc: HDC,
        lpchText: LPCSTR,
        cchText: ::std::os::raw::c_int,
        lprc: LPRECT,
        format: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DrawTextW(
        hdc: HDC,
        lpchText: LPCWSTR,
        cchText: ::std::os::raw::c_int,
        lprc: LPRECT,
        format: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DrawTextExA(
        hdc: HDC,
        lpchText: LPSTR,
        cchText: ::std::os::raw::c_int,
        lprc: LPRECT,
        format: UINT,
        lpdtp: LPDRAWTEXTPARAMS,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DrawTextExW(
        hdc: HDC,
        lpchText: LPWSTR,
        cchText: ::std::os::raw::c_int,
        lprc: LPRECT,
        format: UINT,
        lpdtp: LPDRAWTEXTPARAMS,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GrayStringA(
        hDC: HDC,
        hBrush: HBRUSH,
        lpOutputFunc: GRAYSTRINGPROC,
        lpData: LPARAM,
        nCount: ::std::os::raw::c_int,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GrayStringW(
        hDC: HDC,
        hBrush: HBRUSH,
        lpOutputFunc: GRAYSTRINGPROC,
        lpData: LPARAM,
        nCount: ::std::os::raw::c_int,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawStateA(
        hdc: HDC,
        hbrFore: HBRUSH,
        qfnCallBack: DRAWSTATEPROC,
        lData: LPARAM,
        wData: WPARAM,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        uFlags: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawStateW(
        hdc: HDC,
        hbrFore: HBRUSH,
        qfnCallBack: DRAWSTATEPROC,
        lData: LPARAM,
        wData: WPARAM,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        uFlags: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn TabbedTextOutA(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lpString: LPCSTR,
        chCount: ::std::os::raw::c_int,
        nTabPositions: ::std::os::raw::c_int,
        lpnTabStopPositions: *const INT,
        nTabOrigin: ::std::os::raw::c_int,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn TabbedTextOutW(
        hdc: HDC,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        lpString: LPCWSTR,
        chCount: ::std::os::raw::c_int,
        nTabPositions: ::std::os::raw::c_int,
        lpnTabStopPositions: *const INT,
        nTabOrigin: ::std::os::raw::c_int,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn GetTabbedTextExtentA(
        hdc: HDC,
        lpString: LPCSTR,
        chCount: ::std::os::raw::c_int,
        nTabPositions: ::std::os::raw::c_int,
        lpnTabStopPositions: *const INT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetTabbedTextExtentW(
        hdc: HDC,
        lpString: LPCWSTR,
        chCount: ::std::os::raw::c_int,
        nTabPositions: ::std::os::raw::c_int,
        lpnTabStopPositions: *const INT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn UpdateWindow(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn SetActiveWindow(hWnd: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn GetForegroundWindow() -> HWND;
}
unsafe extern "C" {
    pub fn PaintDesktop(hdc: HDC) -> BOOL;
}
unsafe extern "C" {
    pub fn SwitchToThisWindow(hwnd: HWND, fUnknown: BOOL);
}
unsafe extern "C" {
    pub fn SetForegroundWindow(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn AllowSetForegroundWindow(dwProcessId: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn LockSetForegroundWindow(uLockCode: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn WindowFromDC(hDC: HDC) -> HWND;
}
unsafe extern "C" {
    pub fn GetDC(hWnd: HWND) -> HDC;
}
unsafe extern "C" {
    pub fn GetDCEx(hWnd: HWND, hrgnClip: HRGN, flags: DWORD) -> HDC;
}
unsafe extern "C" {
    pub fn GetWindowDC(hWnd: HWND) -> HDC;
}
unsafe extern "C" {
    pub fn ReleaseDC(hWnd: HWND, hDC: HDC) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BeginPaint(hWnd: HWND, lpPaint: LPPAINTSTRUCT) -> HDC;
}
unsafe extern "C" {
    pub fn EndPaint(hWnd: HWND, lpPaint: *const PAINTSTRUCT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUpdateRect(hWnd: HWND, lpRect: LPRECT, bErase: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUpdateRgn(hWnd: HWND, hRgn: HRGN, bErase: BOOL) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetWindowRgn(hWnd: HWND, hRgn: HRGN, bRedraw: BOOL) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetWindowRgn(hWnd: HWND, hRgn: HRGN) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetWindowRgnBox(hWnd: HWND, lprc: LPRECT) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExcludeUpdateRgn(hDC: HDC, hWnd: HWND) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn InvalidateRect(hWnd: HWND, lpRect: *const RECT, bErase: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn ValidateRect(hWnd: HWND, lpRect: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn InvalidateRgn(hWnd: HWND, hRgn: HRGN, bErase: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn ValidateRgn(hWnd: HWND, hRgn: HRGN) -> BOOL;
}
unsafe extern "C" {
    pub fn RedrawWindow(hWnd: HWND, lprcUpdate: *const RECT, hrgnUpdate: HRGN, flags: UINT)
    -> BOOL;
}
unsafe extern "C" {
    pub fn LockWindowUpdate(hWndLock: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn ScrollWindow(
        hWnd: HWND,
        XAmount: ::std::os::raw::c_int,
        YAmount: ::std::os::raw::c_int,
        lpRect: *const RECT,
        lpClipRect: *const RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ScrollDC(
        hDC: HDC,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        lprcScroll: *const RECT,
        lprcClip: *const RECT,
        hrgnUpdate: HRGN,
        lprcUpdate: LPRECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ScrollWindowEx(
        hWnd: HWND,
        dx: ::std::os::raw::c_int,
        dy: ::std::os::raw::c_int,
        prcScroll: *const RECT,
        prcClip: *const RECT,
        hrgnUpdate: HRGN,
        prcUpdate: LPRECT,
        flags: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetScrollPos(
        hWnd: HWND,
        nBar: ::std::os::raw::c_int,
        nPos: ::std::os::raw::c_int,
        bRedraw: BOOL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetScrollPos(hWnd: HWND, nBar: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetScrollRange(
        hWnd: HWND,
        nBar: ::std::os::raw::c_int,
        nMinPos: ::std::os::raw::c_int,
        nMaxPos: ::std::os::raw::c_int,
        bRedraw: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetScrollRange(
        hWnd: HWND,
        nBar: ::std::os::raw::c_int,
        lpMinPos: LPINT,
        lpMaxPos: LPINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ShowScrollBar(hWnd: HWND, wBar: ::std::os::raw::c_int, bShow: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn EnableScrollBar(hWnd: HWND, wSBflags: UINT, wArrows: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPropA(hWnd: HWND, lpString: LPCSTR, hData: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPropW(hWnd: HWND, lpString: LPCWSTR, hData: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPropA(hWnd: HWND, lpString: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn GetPropW(hWnd: HWND, lpString: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn RemovePropA(hWnd: HWND, lpString: LPCSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn RemovePropW(hWnd: HWND, lpString: LPCWSTR) -> HANDLE;
}
unsafe extern "C" {
    pub fn EnumPropsExA(
        hWnd: HWND,
        lpEnumFunc: PROPENUMPROCEXA,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumPropsExW(
        hWnd: HWND,
        lpEnumFunc: PROPENUMPROCEXW,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumPropsA(hWnd: HWND, lpEnumFunc: PROPENUMPROCA) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumPropsW(hWnd: HWND, lpEnumFunc: PROPENUMPROCW) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetWindowTextA(hWnd: HWND, lpString: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowTextW(hWnd: HWND, lpString: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowTextA(
        hWnd: HWND,
        lpString: LPSTR,
        nMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetWindowTextW(
        hWnd: HWND,
        lpString: LPWSTR,
        nMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetWindowTextLengthA(hWnd: HWND) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetWindowTextLengthW(hWnd: HWND) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetClientRect(hWnd: HWND, lpRect: LPRECT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowRect(hWnd: HWND, lpRect: LPRECT) -> BOOL;
}
unsafe extern "C" {
    pub fn AdjustWindowRect(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn AdjustWindowRectEx(
        lpRect: LPRECT,
        dwStyle: DWORD,
        bMenu: BOOL,
        dwExStyle: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AdjustWindowRectExForDpi(
        lpRect: LPRECT,
        dwStyle: DWORD,
        bMenu: BOOL,
        dwExStyle: DWORD,
        dpi: UINT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHELPINFO {
    pub cbSize: UINT,
    pub iContextType: ::std::os::raw::c_int,
    pub iCtrlId: ::std::os::raw::c_int,
    pub hItemHandle: HANDLE,
    pub dwContextId: DWORD_PTR,
    pub MousePos: POINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHELPINFO"][::std::mem::size_of::<tagHELPINFO>() - 40usize];
    ["Alignment of tagHELPINFO"][::std::mem::align_of::<tagHELPINFO>() - 8usize];
    ["Offset of field: tagHELPINFO::cbSize"][::std::mem::offset_of!(tagHELPINFO, cbSize) - 0usize];
    ["Offset of field: tagHELPINFO::iContextType"]
        [::std::mem::offset_of!(tagHELPINFO, iContextType) - 4usize];
    ["Offset of field: tagHELPINFO::iCtrlId"]
        [::std::mem::offset_of!(tagHELPINFO, iCtrlId) - 8usize];
    ["Offset of field: tagHELPINFO::hItemHandle"]
        [::std::mem::offset_of!(tagHELPINFO, hItemHandle) - 16usize];
    ["Offset of field: tagHELPINFO::dwContextId"]
        [::std::mem::offset_of!(tagHELPINFO, dwContextId) - 24usize];
    ["Offset of field: tagHELPINFO::MousePos"]
        [::std::mem::offset_of!(tagHELPINFO, MousePos) - 32usize];
};
pub type HELPINFO = tagHELPINFO;
pub type LPHELPINFO = *mut tagHELPINFO;
unsafe extern "C" {
    pub fn SetWindowContextHelpId(arg1: HWND, arg2: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowContextHelpId(arg1: HWND) -> DWORD;
}
unsafe extern "C" {
    pub fn SetMenuContextHelpId(arg1: HMENU, arg2: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMenuContextHelpId(arg1: HMENU) -> DWORD;
}
unsafe extern "C" {
    pub fn MessageBoxA(
        hWnd: HWND,
        lpText: LPCSTR,
        lpCaption: LPCSTR,
        uType: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageBoxW(
        hWnd: HWND,
        lpText: LPCWSTR,
        lpCaption: LPCWSTR,
        uType: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageBoxExA(
        hWnd: HWND,
        lpText: LPCSTR,
        lpCaption: LPCSTR,
        uType: UINT,
        wLanguageId: WORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageBoxExW(
        hWnd: HWND,
        lpText: LPCWSTR,
        lpCaption: LPCWSTR,
        uType: UINT,
        wLanguageId: WORD,
    ) -> ::std::os::raw::c_int;
}
pub type MSGBOXCALLBACK = ::std::option::Option<unsafe extern "C" fn(lpHelpInfo: LPHELPINFO)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMSGBOXPARAMSA {
    pub cbSize: UINT,
    pub hwndOwner: HWND,
    pub hInstance: HINSTANCE,
    pub lpszText: LPCSTR,
    pub lpszCaption: LPCSTR,
    pub dwStyle: DWORD,
    pub lpszIcon: LPCSTR,
    pub dwContextHelpId: DWORD_PTR,
    pub lpfnMsgBoxCallback: MSGBOXCALLBACK,
    pub dwLanguageId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMSGBOXPARAMSA"][::std::mem::size_of::<tagMSGBOXPARAMSA>() - 80usize];
    ["Alignment of tagMSGBOXPARAMSA"][::std::mem::align_of::<tagMSGBOXPARAMSA>() - 8usize];
    ["Offset of field: tagMSGBOXPARAMSA::cbSize"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, cbSize) - 0usize];
    ["Offset of field: tagMSGBOXPARAMSA::hwndOwner"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, hwndOwner) - 8usize];
    ["Offset of field: tagMSGBOXPARAMSA::hInstance"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, hInstance) - 16usize];
    ["Offset of field: tagMSGBOXPARAMSA::lpszText"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, lpszText) - 24usize];
    ["Offset of field: tagMSGBOXPARAMSA::lpszCaption"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, lpszCaption) - 32usize];
    ["Offset of field: tagMSGBOXPARAMSA::dwStyle"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, dwStyle) - 40usize];
    ["Offset of field: tagMSGBOXPARAMSA::lpszIcon"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, lpszIcon) - 48usize];
    ["Offset of field: tagMSGBOXPARAMSA::dwContextHelpId"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, dwContextHelpId) - 56usize];
    ["Offset of field: tagMSGBOXPARAMSA::lpfnMsgBoxCallback"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, lpfnMsgBoxCallback) - 64usize];
    ["Offset of field: tagMSGBOXPARAMSA::dwLanguageId"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSA, dwLanguageId) - 72usize];
};
pub type MSGBOXPARAMSA = tagMSGBOXPARAMSA;
pub type PMSGBOXPARAMSA = *mut tagMSGBOXPARAMSA;
pub type LPMSGBOXPARAMSA = *mut tagMSGBOXPARAMSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMSGBOXPARAMSW {
    pub cbSize: UINT,
    pub hwndOwner: HWND,
    pub hInstance: HINSTANCE,
    pub lpszText: LPCWSTR,
    pub lpszCaption: LPCWSTR,
    pub dwStyle: DWORD,
    pub lpszIcon: LPCWSTR,
    pub dwContextHelpId: DWORD_PTR,
    pub lpfnMsgBoxCallback: MSGBOXCALLBACK,
    pub dwLanguageId: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMSGBOXPARAMSW"][::std::mem::size_of::<tagMSGBOXPARAMSW>() - 80usize];
    ["Alignment of tagMSGBOXPARAMSW"][::std::mem::align_of::<tagMSGBOXPARAMSW>() - 8usize];
    ["Offset of field: tagMSGBOXPARAMSW::cbSize"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, cbSize) - 0usize];
    ["Offset of field: tagMSGBOXPARAMSW::hwndOwner"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, hwndOwner) - 8usize];
    ["Offset of field: tagMSGBOXPARAMSW::hInstance"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, hInstance) - 16usize];
    ["Offset of field: tagMSGBOXPARAMSW::lpszText"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, lpszText) - 24usize];
    ["Offset of field: tagMSGBOXPARAMSW::lpszCaption"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, lpszCaption) - 32usize];
    ["Offset of field: tagMSGBOXPARAMSW::dwStyle"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, dwStyle) - 40usize];
    ["Offset of field: tagMSGBOXPARAMSW::lpszIcon"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, lpszIcon) - 48usize];
    ["Offset of field: tagMSGBOXPARAMSW::dwContextHelpId"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, dwContextHelpId) - 56usize];
    ["Offset of field: tagMSGBOXPARAMSW::lpfnMsgBoxCallback"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, lpfnMsgBoxCallback) - 64usize];
    ["Offset of field: tagMSGBOXPARAMSW::dwLanguageId"]
        [::std::mem::offset_of!(tagMSGBOXPARAMSW, dwLanguageId) - 72usize];
};
pub type MSGBOXPARAMSW = tagMSGBOXPARAMSW;
pub type PMSGBOXPARAMSW = *mut tagMSGBOXPARAMSW;
pub type LPMSGBOXPARAMSW = *mut tagMSGBOXPARAMSW;
pub type MSGBOXPARAMS = MSGBOXPARAMSA;
pub type PMSGBOXPARAMS = PMSGBOXPARAMSA;
pub type LPMSGBOXPARAMS = LPMSGBOXPARAMSA;
unsafe extern "C" {
    pub fn MessageBoxIndirectA(lpmbp: *const MSGBOXPARAMSA) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageBoxIndirectW(lpmbp: *const MSGBOXPARAMSW) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageBeep(uType: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn ShowCursor(bShow: BOOL) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetCursorPos(X: ::std::os::raw::c_int, Y: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn SetPhysicalCursorPos(X: ::std::os::raw::c_int, Y: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCursor(hCursor: HCURSOR) -> HCURSOR;
}
unsafe extern "C" {
    pub fn GetCursorPos(lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPhysicalCursorPos(lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetClipCursor(lpRect: LPRECT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCursor() -> HCURSOR;
}
unsafe extern "C" {
    pub fn CreateCaret(
        hWnd: HWND,
        hBitmap: HBITMAP,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCaretBlinkTime() -> UINT;
}
unsafe extern "C" {
    pub fn SetCaretBlinkTime(uMSeconds: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn DestroyCaret() -> BOOL;
}
unsafe extern "C" {
    pub fn HideCaret(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn ShowCaret(hWnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCaretPos(X: ::std::os::raw::c_int, Y: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCaretPos(lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn ClientToScreen(hWnd: HWND, lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn ScreenToClient(hWnd: HWND, lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn LogicalToPhysicalPoint(hWnd: HWND, lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn PhysicalToLogicalPoint(hWnd: HWND, lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn LogicalToPhysicalPointForPerMonitorDPI(hWnd: HWND, lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn PhysicalToLogicalPointForPerMonitorDPI(hWnd: HWND, lpPoint: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn MapWindowPoints(
        hWndFrom: HWND,
        hWndTo: HWND,
        lpPoints: LPPOINT,
        cPoints: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WindowFromPoint(Point: POINT) -> HWND;
}
unsafe extern "C" {
    pub fn WindowFromPhysicalPoint(Point: POINT) -> HWND;
}
unsafe extern "C" {
    pub fn ChildWindowFromPoint(hWndParent: HWND, Point: POINT) -> HWND;
}
unsafe extern "C" {
    pub fn ClipCursor(lpRect: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn ChildWindowFromPointEx(hwnd: HWND, pt: POINT, flags: UINT) -> HWND;
}
unsafe extern "C" {
    pub fn GetSysColor(nIndex: ::std::os::raw::c_int) -> DWORD;
}
unsafe extern "C" {
    pub fn GetSysColorBrush(nIndex: ::std::os::raw::c_int) -> HBRUSH;
}
unsafe extern "C" {
    pub fn SetSysColors(
        cElements: ::std::os::raw::c_int,
        lpaElements: *const INT,
        lpaRgbValues: *const COLORREF,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DrawFocusRect(hDC: HDC, lprc: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn FillRect(hDC: HDC, lprc: *const RECT, hbr: HBRUSH) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FrameRect(hDC: HDC, lprc: *const RECT, hbr: HBRUSH) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn InvertRect(hDC: HDC, lprc: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetRect(
        lprc: LPRECT,
        xLeft: ::std::os::raw::c_int,
        yTop: ::std::os::raw::c_int,
        xRight: ::std::os::raw::c_int,
        yBottom: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetRectEmpty(lprc: LPRECT) -> BOOL;
}
unsafe extern "C" {
    pub fn CopyRect(lprcDst: LPRECT, lprcSrc: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn InflateRect(lprc: LPRECT, dx: ::std::os::raw::c_int, dy: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn IntersectRect(lprcDst: LPRECT, lprcSrc1: *const RECT, lprcSrc2: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn UnionRect(lprcDst: LPRECT, lprcSrc1: *const RECT, lprcSrc2: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn SubtractRect(lprcDst: LPRECT, lprcSrc1: *const RECT, lprcSrc2: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn OffsetRect(lprc: LPRECT, dx: ::std::os::raw::c_int, dy: ::std::os::raw::c_int) -> BOOL;
}
unsafe extern "C" {
    pub fn IsRectEmpty(lprc: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn EqualRect(lprc1: *const RECT, lprc2: *const RECT) -> BOOL;
}
unsafe extern "C" {
    pub fn PtInRect(lprc: *const RECT, pt: POINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetWindowWord(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> WORD;
}
unsafe extern "C" {
    pub fn SetWindowWord(hWnd: HWND, nIndex: ::std::os::raw::c_int, wNewWord: WORD) -> WORD;
}
unsafe extern "C" {
    pub fn GetWindowLongA(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG;
}
unsafe extern "C" {
    pub fn GetWindowLongW(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG;
}
unsafe extern "C" {
    pub fn SetWindowLongA(hWnd: HWND, nIndex: ::std::os::raw::c_int, dwNewLong: LONG) -> LONG;
}
unsafe extern "C" {
    pub fn SetWindowLongW(hWnd: HWND, nIndex: ::std::os::raw::c_int, dwNewLong: LONG) -> LONG;
}
unsafe extern "C" {
    pub fn GetWindowLongPtrA(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG_PTR;
}
unsafe extern "C" {
    pub fn GetWindowLongPtrW(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> LONG_PTR;
}
unsafe extern "C" {
    pub fn SetWindowLongPtrA(
        hWnd: HWND,
        nIndex: ::std::os::raw::c_int,
        dwNewLong: LONG_PTR,
    ) -> LONG_PTR;
}
unsafe extern "C" {
    pub fn SetWindowLongPtrW(
        hWnd: HWND,
        nIndex: ::std::os::raw::c_int,
        dwNewLong: LONG_PTR,
    ) -> LONG_PTR;
}
unsafe extern "C" {
    pub fn GetClassWord(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> WORD;
}
unsafe extern "C" {
    pub fn SetClassWord(hWnd: HWND, nIndex: ::std::os::raw::c_int, wNewWord: WORD) -> WORD;
}
unsafe extern "C" {
    pub fn GetClassLongA(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> DWORD;
}
unsafe extern "C" {
    pub fn GetClassLongW(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> DWORD;
}
unsafe extern "C" {
    pub fn SetClassLongA(hWnd: HWND, nIndex: ::std::os::raw::c_int, dwNewLong: LONG) -> DWORD;
}
unsafe extern "C" {
    pub fn SetClassLongW(hWnd: HWND, nIndex: ::std::os::raw::c_int, dwNewLong: LONG) -> DWORD;
}
unsafe extern "C" {
    pub fn GetClassLongPtrA(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> ULONG_PTR;
}
unsafe extern "C" {
    pub fn GetClassLongPtrW(hWnd: HWND, nIndex: ::std::os::raw::c_int) -> ULONG_PTR;
}
unsafe extern "C" {
    pub fn SetClassLongPtrA(
        hWnd: HWND,
        nIndex: ::std::os::raw::c_int,
        dwNewLong: LONG_PTR,
    ) -> ULONG_PTR;
}
unsafe extern "C" {
    pub fn SetClassLongPtrW(
        hWnd: HWND,
        nIndex: ::std::os::raw::c_int,
        dwNewLong: LONG_PTR,
    ) -> ULONG_PTR;
}
unsafe extern "C" {
    pub fn GetProcessDefaultLayout(pdwDefaultLayout: *mut DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDefaultLayout(dwDefaultLayout: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDesktopWindow() -> HWND;
}
unsafe extern "C" {
    pub fn GetParent(hWnd: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn SetParent(hWndChild: HWND, hWndNewParent: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn EnumChildWindows(hWndParent: HWND, lpEnumFunc: WNDENUMPROC, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn FindWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR) -> HWND;
}
unsafe extern "C" {
    pub fn FindWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR) -> HWND;
}
unsafe extern "C" {
    pub fn FindWindowExA(
        hWndParent: HWND,
        hWndChildAfter: HWND,
        lpszClass: LPCSTR,
        lpszWindow: LPCSTR,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn FindWindowExW(
        hWndParent: HWND,
        hWndChildAfter: HWND,
        lpszClass: LPCWSTR,
        lpszWindow: LPCWSTR,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn GetShellWindow() -> HWND;
}
unsafe extern "C" {
    pub fn RegisterShellHookWindow(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn DeregisterShellHookWindow(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumWindows(lpEnumFunc: WNDENUMPROC, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumThreadWindows(dwThreadId: DWORD, lpfn: WNDENUMPROC, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn GetClassNameA(
        hWnd: HWND,
        lpClassName: LPSTR,
        nMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetClassNameW(
        hWnd: HWND,
        lpClassName: LPWSTR,
        nMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTopWindow(hWnd: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn GetWindowThreadProcessId(hWnd: HWND, lpdwProcessId: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn IsGUIThread(bConvert: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLastActivePopup(hWnd: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn GetWindow(hWnd: HWND, uCmd: UINT) -> HWND;
}
unsafe extern "C" {
    pub fn SetWindowsHookA(nFilterType: ::std::os::raw::c_int, pfnFilterProc: HOOKPROC) -> HHOOK;
}
unsafe extern "C" {
    pub fn SetWindowsHookW(nFilterType: ::std::os::raw::c_int, pfnFilterProc: HOOKPROC) -> HHOOK;
}
unsafe extern "C" {
    pub fn UnhookWindowsHook(nCode: ::std::os::raw::c_int, pfnFilterProc: HOOKPROC) -> BOOL;
}
unsafe extern "C" {
    pub fn SetWindowsHookExA(
        idHook: ::std::os::raw::c_int,
        lpfn: HOOKPROC,
        hmod: HINSTANCE,
        dwThreadId: DWORD,
    ) -> HHOOK;
}
unsafe extern "C" {
    pub fn SetWindowsHookExW(
        idHook: ::std::os::raw::c_int,
        lpfn: HOOKPROC,
        hmod: HINSTANCE,
        dwThreadId: DWORD,
    ) -> HHOOK;
}
unsafe extern "C" {
    pub fn UnhookWindowsHookEx(hhk: HHOOK) -> BOOL;
}
unsafe extern "C" {
    pub fn CallNextHookEx(
        hhk: HHOOK,
        nCode: ::std::os::raw::c_int,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn CheckMenuRadioItem(
        hmenu: HMENU,
        first: UINT,
        last: UINT,
        check: UINT,
        flags: UINT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MENUITEMTEMPLATEHEADER {
    pub versionNumber: WORD,
    pub offset: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MENUITEMTEMPLATEHEADER"][::std::mem::size_of::<MENUITEMTEMPLATEHEADER>() - 4usize];
    ["Alignment of MENUITEMTEMPLATEHEADER"]
        [::std::mem::align_of::<MENUITEMTEMPLATEHEADER>() - 2usize];
    ["Offset of field: MENUITEMTEMPLATEHEADER::versionNumber"]
        [::std::mem::offset_of!(MENUITEMTEMPLATEHEADER, versionNumber) - 0usize];
    ["Offset of field: MENUITEMTEMPLATEHEADER::offset"]
        [::std::mem::offset_of!(MENUITEMTEMPLATEHEADER, offset) - 2usize];
};
pub type PMENUITEMTEMPLATEHEADER = *mut MENUITEMTEMPLATEHEADER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MENUITEMTEMPLATE {
    pub mtOption: WORD,
    pub mtID: WORD,
    pub mtString: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MENUITEMTEMPLATE"][::std::mem::size_of::<MENUITEMTEMPLATE>() - 6usize];
    ["Alignment of MENUITEMTEMPLATE"][::std::mem::align_of::<MENUITEMTEMPLATE>() - 2usize];
    ["Offset of field: MENUITEMTEMPLATE::mtOption"]
        [::std::mem::offset_of!(MENUITEMTEMPLATE, mtOption) - 0usize];
    ["Offset of field: MENUITEMTEMPLATE::mtID"]
        [::std::mem::offset_of!(MENUITEMTEMPLATE, mtID) - 2usize];
    ["Offset of field: MENUITEMTEMPLATE::mtString"]
        [::std::mem::offset_of!(MENUITEMTEMPLATE, mtString) - 4usize];
};
pub type PMENUITEMTEMPLATE = *mut MENUITEMTEMPLATE;
unsafe extern "C" {
    pub fn LoadBitmapA(hInstance: HINSTANCE, lpBitmapName: LPCSTR) -> HBITMAP;
}
unsafe extern "C" {
    pub fn LoadBitmapW(hInstance: HINSTANCE, lpBitmapName: LPCWSTR) -> HBITMAP;
}
unsafe extern "C" {
    pub fn LoadCursorA(hInstance: HINSTANCE, lpCursorName: LPCSTR) -> HCURSOR;
}
unsafe extern "C" {
    pub fn LoadCursorW(hInstance: HINSTANCE, lpCursorName: LPCWSTR) -> HCURSOR;
}
unsafe extern "C" {
    pub fn LoadCursorFromFileA(lpFileName: LPCSTR) -> HCURSOR;
}
unsafe extern "C" {
    pub fn LoadCursorFromFileW(lpFileName: LPCWSTR) -> HCURSOR;
}
unsafe extern "C" {
    pub fn CreateCursor(
        hInst: HINSTANCE,
        xHotSpot: ::std::os::raw::c_int,
        yHotSpot: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        pvANDPlane: *const ::std::os::raw::c_void,
        pvXORPlane: *const ::std::os::raw::c_void,
    ) -> HCURSOR;
}
unsafe extern "C" {
    pub fn DestroyCursor(hCursor: HCURSOR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetSystemCursor(hcur: HCURSOR, id: DWORD) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICONINFO {
    pub fIcon: BOOL,
    pub xHotspot: DWORD,
    pub yHotspot: DWORD,
    pub hbmMask: HBITMAP,
    pub hbmColor: HBITMAP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ICONINFO"][::std::mem::size_of::<_ICONINFO>() - 32usize];
    ["Alignment of _ICONINFO"][::std::mem::align_of::<_ICONINFO>() - 8usize];
    ["Offset of field: _ICONINFO::fIcon"][::std::mem::offset_of!(_ICONINFO, fIcon) - 0usize];
    ["Offset of field: _ICONINFO::xHotspot"][::std::mem::offset_of!(_ICONINFO, xHotspot) - 4usize];
    ["Offset of field: _ICONINFO::yHotspot"][::std::mem::offset_of!(_ICONINFO, yHotspot) - 8usize];
    ["Offset of field: _ICONINFO::hbmMask"][::std::mem::offset_of!(_ICONINFO, hbmMask) - 16usize];
    ["Offset of field: _ICONINFO::hbmColor"][::std::mem::offset_of!(_ICONINFO, hbmColor) - 24usize];
};
pub type ICONINFO = _ICONINFO;
pub type PICONINFO = *mut ICONINFO;
unsafe extern "C" {
    pub fn LoadIconA(hInstance: HINSTANCE, lpIconName: LPCSTR) -> HICON;
}
unsafe extern "C" {
    pub fn LoadIconW(hInstance: HINSTANCE, lpIconName: LPCWSTR) -> HICON;
}
unsafe extern "C" {
    pub fn PrivateExtractIconsA(
        szFileName: LPCSTR,
        nIconIndex: ::std::os::raw::c_int,
        cxIcon: ::std::os::raw::c_int,
        cyIcon: ::std::os::raw::c_int,
        phicon: *mut HICON,
        piconid: *mut UINT,
        nIcons: UINT,
        flags: UINT,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn PrivateExtractIconsW(
        szFileName: LPCWSTR,
        nIconIndex: ::std::os::raw::c_int,
        cxIcon: ::std::os::raw::c_int,
        cyIcon: ::std::os::raw::c_int,
        phicon: *mut HICON,
        piconid: *mut UINT,
        nIcons: UINT,
        flags: UINT,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn CreateIcon(
        hInstance: HINSTANCE,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        cPlanes: BYTE,
        cBitsPixel: BYTE,
        lpbANDbits: *const BYTE,
        lpbXORbits: *const BYTE,
    ) -> HICON;
}
unsafe extern "C" {
    pub fn DestroyIcon(hIcon: HICON) -> BOOL;
}
unsafe extern "C" {
    pub fn LookupIconIdFromDirectory(presbits: PBYTE, fIcon: BOOL) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LookupIconIdFromDirectoryEx(
        presbits: PBYTE,
        fIcon: BOOL,
        cxDesired: ::std::os::raw::c_int,
        cyDesired: ::std::os::raw::c_int,
        Flags: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CreateIconFromResource(
        presbits: PBYTE,
        dwResSize: DWORD,
        fIcon: BOOL,
        dwVer: DWORD,
    ) -> HICON;
}
unsafe extern "C" {
    pub fn CreateIconFromResourceEx(
        presbits: PBYTE,
        dwResSize: DWORD,
        fIcon: BOOL,
        dwVer: DWORD,
        cxDesired: ::std::os::raw::c_int,
        cyDesired: ::std::os::raw::c_int,
        Flags: UINT,
    ) -> HICON;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCURSORSHAPE {
    pub xHotSpot: ::std::os::raw::c_int,
    pub yHotSpot: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub cbWidth: ::std::os::raw::c_int,
    pub Planes: BYTE,
    pub BitsPixel: BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCURSORSHAPE"][::std::mem::size_of::<tagCURSORSHAPE>() - 24usize];
    ["Alignment of tagCURSORSHAPE"][::std::mem::align_of::<tagCURSORSHAPE>() - 4usize];
    ["Offset of field: tagCURSORSHAPE::xHotSpot"]
        [::std::mem::offset_of!(tagCURSORSHAPE, xHotSpot) - 0usize];
    ["Offset of field: tagCURSORSHAPE::yHotSpot"]
        [::std::mem::offset_of!(tagCURSORSHAPE, yHotSpot) - 4usize];
    ["Offset of field: tagCURSORSHAPE::cx"][::std::mem::offset_of!(tagCURSORSHAPE, cx) - 8usize];
    ["Offset of field: tagCURSORSHAPE::cy"][::std::mem::offset_of!(tagCURSORSHAPE, cy) - 12usize];
    ["Offset of field: tagCURSORSHAPE::cbWidth"]
        [::std::mem::offset_of!(tagCURSORSHAPE, cbWidth) - 16usize];
    ["Offset of field: tagCURSORSHAPE::Planes"]
        [::std::mem::offset_of!(tagCURSORSHAPE, Planes) - 20usize];
    ["Offset of field: tagCURSORSHAPE::BitsPixel"]
        [::std::mem::offset_of!(tagCURSORSHAPE, BitsPixel) - 21usize];
};
pub type CURSORSHAPE = tagCURSORSHAPE;
pub type LPCURSORSHAPE = *mut tagCURSORSHAPE;
unsafe extern "C" {
    pub fn SetThreadCursorCreationScaling(cursorDpi: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn LoadImageA(
        hInst: HINSTANCE,
        name: LPCSTR,
        type_: UINT,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        fuLoad: UINT,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn LoadImageW(
        hInst: HINSTANCE,
        name: LPCWSTR,
        type_: UINT,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        fuLoad: UINT,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn CopyImage(
        h: HANDLE,
        type_: UINT,
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        flags: UINT,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn DrawIconEx(
        hdc: HDC,
        xLeft: ::std::os::raw::c_int,
        yTop: ::std::os::raw::c_int,
        hIcon: HICON,
        cxWidth: ::std::os::raw::c_int,
        cyWidth: ::std::os::raw::c_int,
        istepIfAniCur: UINT,
        hbrFlickerFreeDraw: HBRUSH,
        diFlags: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateIconIndirect(piconinfo: PICONINFO) -> HICON;
}
unsafe extern "C" {
    pub fn CopyIcon(hIcon: HICON) -> HICON;
}
unsafe extern "C" {
    pub fn GetIconInfo(hIcon: HICON, piconinfo: PICONINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICONINFOEXA {
    pub cbSize: DWORD,
    pub fIcon: BOOL,
    pub xHotspot: DWORD,
    pub yHotspot: DWORD,
    pub hbmMask: HBITMAP,
    pub hbmColor: HBITMAP,
    pub wResID: WORD,
    pub szModName: [CHAR; 260usize],
    pub szResName: [CHAR; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ICONINFOEXA"][::std::mem::size_of::<_ICONINFOEXA>() - 560usize];
    ["Alignment of _ICONINFOEXA"][::std::mem::align_of::<_ICONINFOEXA>() - 8usize];
    ["Offset of field: _ICONINFOEXA::cbSize"]
        [::std::mem::offset_of!(_ICONINFOEXA, cbSize) - 0usize];
    ["Offset of field: _ICONINFOEXA::fIcon"][::std::mem::offset_of!(_ICONINFOEXA, fIcon) - 4usize];
    ["Offset of field: _ICONINFOEXA::xHotspot"]
        [::std::mem::offset_of!(_ICONINFOEXA, xHotspot) - 8usize];
    ["Offset of field: _ICONINFOEXA::yHotspot"]
        [::std::mem::offset_of!(_ICONINFOEXA, yHotspot) - 12usize];
    ["Offset of field: _ICONINFOEXA::hbmMask"]
        [::std::mem::offset_of!(_ICONINFOEXA, hbmMask) - 16usize];
    ["Offset of field: _ICONINFOEXA::hbmColor"]
        [::std::mem::offset_of!(_ICONINFOEXA, hbmColor) - 24usize];
    ["Offset of field: _ICONINFOEXA::wResID"]
        [::std::mem::offset_of!(_ICONINFOEXA, wResID) - 32usize];
    ["Offset of field: _ICONINFOEXA::szModName"]
        [::std::mem::offset_of!(_ICONINFOEXA, szModName) - 34usize];
    ["Offset of field: _ICONINFOEXA::szResName"]
        [::std::mem::offset_of!(_ICONINFOEXA, szResName) - 294usize];
};
pub type ICONINFOEXA = _ICONINFOEXA;
pub type PICONINFOEXA = *mut _ICONINFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ICONINFOEXW {
    pub cbSize: DWORD,
    pub fIcon: BOOL,
    pub xHotspot: DWORD,
    pub yHotspot: DWORD,
    pub hbmMask: HBITMAP,
    pub hbmColor: HBITMAP,
    pub wResID: WORD,
    pub szModName: [WCHAR; 260usize],
    pub szResName: [WCHAR; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ICONINFOEXW"][::std::mem::size_of::<_ICONINFOEXW>() - 1080usize];
    ["Alignment of _ICONINFOEXW"][::std::mem::align_of::<_ICONINFOEXW>() - 8usize];
    ["Offset of field: _ICONINFOEXW::cbSize"]
        [::std::mem::offset_of!(_ICONINFOEXW, cbSize) - 0usize];
    ["Offset of field: _ICONINFOEXW::fIcon"][::std::mem::offset_of!(_ICONINFOEXW, fIcon) - 4usize];
    ["Offset of field: _ICONINFOEXW::xHotspot"]
        [::std::mem::offset_of!(_ICONINFOEXW, xHotspot) - 8usize];
    ["Offset of field: _ICONINFOEXW::yHotspot"]
        [::std::mem::offset_of!(_ICONINFOEXW, yHotspot) - 12usize];
    ["Offset of field: _ICONINFOEXW::hbmMask"]
        [::std::mem::offset_of!(_ICONINFOEXW, hbmMask) - 16usize];
    ["Offset of field: _ICONINFOEXW::hbmColor"]
        [::std::mem::offset_of!(_ICONINFOEXW, hbmColor) - 24usize];
    ["Offset of field: _ICONINFOEXW::wResID"]
        [::std::mem::offset_of!(_ICONINFOEXW, wResID) - 32usize];
    ["Offset of field: _ICONINFOEXW::szModName"]
        [::std::mem::offset_of!(_ICONINFOEXW, szModName) - 34usize];
    ["Offset of field: _ICONINFOEXW::szResName"]
        [::std::mem::offset_of!(_ICONINFOEXW, szResName) - 554usize];
};
pub type ICONINFOEXW = _ICONINFOEXW;
pub type PICONINFOEXW = *mut _ICONINFOEXW;
pub type ICONINFOEX = ICONINFOEXA;
pub type PICONINFOEX = PICONINFOEXA;
unsafe extern "C" {
    pub fn GetIconInfoExA(hicon: HICON, piconinfo: PICONINFOEXA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetIconInfoExW(hicon: HICON, piconinfo: PICONINFOEXW) -> BOOL;
}
pub const EDIT_CONTROL_FEATURE_EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT:
    EDIT_CONTROL_FEATURE = 0;
pub const EDIT_CONTROL_FEATURE_EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS: EDIT_CONTROL_FEATURE = 1;
pub type EDIT_CONTROL_FEATURE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn IsDialogMessageA(hDlg: HWND, lpMsg: LPMSG) -> BOOL;
}
unsafe extern "C" {
    pub fn IsDialogMessageW(hDlg: HWND, lpMsg: LPMSG) -> BOOL;
}
unsafe extern "C" {
    pub fn MapDialogRect(hDlg: HWND, lpRect: LPRECT) -> BOOL;
}
unsafe extern "C" {
    pub fn DlgDirListA(
        hDlg: HWND,
        lpPathSpec: LPSTR,
        nIDListBox: ::std::os::raw::c_int,
        nIDStaticPath: ::std::os::raw::c_int,
        uFileType: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DlgDirListW(
        hDlg: HWND,
        lpPathSpec: LPWSTR,
        nIDListBox: ::std::os::raw::c_int,
        nIDStaticPath: ::std::os::raw::c_int,
        uFileType: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DlgDirSelectExA(
        hwndDlg: HWND,
        lpString: LPSTR,
        chCount: ::std::os::raw::c_int,
        idListBox: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DlgDirSelectExW(
        hwndDlg: HWND,
        lpString: LPWSTR,
        chCount: ::std::os::raw::c_int,
        idListBox: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DlgDirListComboBoxA(
        hDlg: HWND,
        lpPathSpec: LPSTR,
        nIDComboBox: ::std::os::raw::c_int,
        nIDStaticPath: ::std::os::raw::c_int,
        uFiletype: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DlgDirListComboBoxW(
        hDlg: HWND,
        lpPathSpec: LPWSTR,
        nIDComboBox: ::std::os::raw::c_int,
        nIDStaticPath: ::std::os::raw::c_int,
        uFiletype: UINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DlgDirSelectComboBoxExA(
        hwndDlg: HWND,
        lpString: LPSTR,
        cchOut: ::std::os::raw::c_int,
        idComboBox: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn DlgDirSelectComboBoxExW(
        hwndDlg: HWND,
        lpString: LPWSTR,
        cchOut: ::std::os::raw::c_int,
        idComboBox: ::std::os::raw::c_int,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSCROLLINFO {
    pub cbSize: UINT,
    pub fMask: UINT,
    pub nMin: ::std::os::raw::c_int,
    pub nMax: ::std::os::raw::c_int,
    pub nPage: UINT,
    pub nPos: ::std::os::raw::c_int,
    pub nTrackPos: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSCROLLINFO"][::std::mem::size_of::<tagSCROLLINFO>() - 28usize];
    ["Alignment of tagSCROLLINFO"][::std::mem::align_of::<tagSCROLLINFO>() - 4usize];
    ["Offset of field: tagSCROLLINFO::cbSize"]
        [::std::mem::offset_of!(tagSCROLLINFO, cbSize) - 0usize];
    ["Offset of field: tagSCROLLINFO::fMask"]
        [::std::mem::offset_of!(tagSCROLLINFO, fMask) - 4usize];
    ["Offset of field: tagSCROLLINFO::nMin"][::std::mem::offset_of!(tagSCROLLINFO, nMin) - 8usize];
    ["Offset of field: tagSCROLLINFO::nMax"][::std::mem::offset_of!(tagSCROLLINFO, nMax) - 12usize];
    ["Offset of field: tagSCROLLINFO::nPage"]
        [::std::mem::offset_of!(tagSCROLLINFO, nPage) - 16usize];
    ["Offset of field: tagSCROLLINFO::nPos"][::std::mem::offset_of!(tagSCROLLINFO, nPos) - 20usize];
    ["Offset of field: tagSCROLLINFO::nTrackPos"]
        [::std::mem::offset_of!(tagSCROLLINFO, nTrackPos) - 24usize];
};
pub type SCROLLINFO = tagSCROLLINFO;
pub type LPSCROLLINFO = *mut tagSCROLLINFO;
pub type LPCSCROLLINFO = *const SCROLLINFO;
unsafe extern "C" {
    pub fn SetScrollInfo(
        hwnd: HWND,
        nBar: ::std::os::raw::c_int,
        lpsi: LPCSCROLLINFO,
        redraw: BOOL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetScrollInfo(hwnd: HWND, nBar: ::std::os::raw::c_int, lpsi: LPSCROLLINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMDICREATESTRUCTA {
    pub szClass: LPCSTR,
    pub szTitle: LPCSTR,
    pub hOwner: HANDLE,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub style: DWORD,
    pub lParam: LPARAM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMDICREATESTRUCTA"][::std::mem::size_of::<tagMDICREATESTRUCTA>() - 56usize];
    ["Alignment of tagMDICREATESTRUCTA"][::std::mem::align_of::<tagMDICREATESTRUCTA>() - 8usize];
    ["Offset of field: tagMDICREATESTRUCTA::szClass"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, szClass) - 0usize];
    ["Offset of field: tagMDICREATESTRUCTA::szTitle"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, szTitle) - 8usize];
    ["Offset of field: tagMDICREATESTRUCTA::hOwner"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, hOwner) - 16usize];
    ["Offset of field: tagMDICREATESTRUCTA::x"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, x) - 24usize];
    ["Offset of field: tagMDICREATESTRUCTA::y"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, y) - 28usize];
    ["Offset of field: tagMDICREATESTRUCTA::cx"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, cx) - 32usize];
    ["Offset of field: tagMDICREATESTRUCTA::cy"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, cy) - 36usize];
    ["Offset of field: tagMDICREATESTRUCTA::style"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, style) - 40usize];
    ["Offset of field: tagMDICREATESTRUCTA::lParam"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTA, lParam) - 48usize];
};
pub type MDICREATESTRUCTA = tagMDICREATESTRUCTA;
pub type LPMDICREATESTRUCTA = *mut tagMDICREATESTRUCTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMDICREATESTRUCTW {
    pub szClass: LPCWSTR,
    pub szTitle: LPCWSTR,
    pub hOwner: HANDLE,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub cx: ::std::os::raw::c_int,
    pub cy: ::std::os::raw::c_int,
    pub style: DWORD,
    pub lParam: LPARAM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMDICREATESTRUCTW"][::std::mem::size_of::<tagMDICREATESTRUCTW>() - 56usize];
    ["Alignment of tagMDICREATESTRUCTW"][::std::mem::align_of::<tagMDICREATESTRUCTW>() - 8usize];
    ["Offset of field: tagMDICREATESTRUCTW::szClass"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, szClass) - 0usize];
    ["Offset of field: tagMDICREATESTRUCTW::szTitle"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, szTitle) - 8usize];
    ["Offset of field: tagMDICREATESTRUCTW::hOwner"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, hOwner) - 16usize];
    ["Offset of field: tagMDICREATESTRUCTW::x"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, x) - 24usize];
    ["Offset of field: tagMDICREATESTRUCTW::y"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, y) - 28usize];
    ["Offset of field: tagMDICREATESTRUCTW::cx"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, cx) - 32usize];
    ["Offset of field: tagMDICREATESTRUCTW::cy"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, cy) - 36usize];
    ["Offset of field: tagMDICREATESTRUCTW::style"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, style) - 40usize];
    ["Offset of field: tagMDICREATESTRUCTW::lParam"]
        [::std::mem::offset_of!(tagMDICREATESTRUCTW, lParam) - 48usize];
};
pub type MDICREATESTRUCTW = tagMDICREATESTRUCTW;
pub type LPMDICREATESTRUCTW = *mut tagMDICREATESTRUCTW;
pub type MDICREATESTRUCT = MDICREATESTRUCTA;
pub type LPMDICREATESTRUCT = LPMDICREATESTRUCTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCLIENTCREATESTRUCT {
    pub hWindowMenu: HANDLE,
    pub idFirstChild: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCLIENTCREATESTRUCT"][::std::mem::size_of::<tagCLIENTCREATESTRUCT>() - 16usize];
    ["Alignment of tagCLIENTCREATESTRUCT"]
        [::std::mem::align_of::<tagCLIENTCREATESTRUCT>() - 8usize];
    ["Offset of field: tagCLIENTCREATESTRUCT::hWindowMenu"]
        [::std::mem::offset_of!(tagCLIENTCREATESTRUCT, hWindowMenu) - 0usize];
    ["Offset of field: tagCLIENTCREATESTRUCT::idFirstChild"]
        [::std::mem::offset_of!(tagCLIENTCREATESTRUCT, idFirstChild) - 8usize];
};
pub type CLIENTCREATESTRUCT = tagCLIENTCREATESTRUCT;
pub type LPCLIENTCREATESTRUCT = *mut tagCLIENTCREATESTRUCT;
unsafe extern "C" {
    pub fn DefFrameProcA(
        hWnd: HWND,
        hWndMDIClient: HWND,
        uMsg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn DefFrameProcW(
        hWnd: HWND,
        hWndMDIClient: HWND,
        uMsg: UINT,
        wParam: WPARAM,
        lParam: LPARAM,
    ) -> LRESULT;
}
unsafe extern "C" {
    pub fn DefMDIChildProcA(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn DefMDIChildProcW(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) -> LRESULT;
}
unsafe extern "C" {
    pub fn TranslateMDISysAccel(hWndClient: HWND, lpMsg: LPMSG) -> BOOL;
}
unsafe extern "C" {
    pub fn ArrangeIconicWindows(hWnd: HWND) -> UINT;
}
unsafe extern "C" {
    pub fn CreateMDIWindowA(
        lpClassName: LPCSTR,
        lpWindowName: LPCSTR,
        dwStyle: DWORD,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        hWndParent: HWND,
        hInstance: HINSTANCE,
        lParam: LPARAM,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn CreateMDIWindowW(
        lpClassName: LPCWSTR,
        lpWindowName: LPCWSTR,
        dwStyle: DWORD,
        X: ::std::os::raw::c_int,
        Y: ::std::os::raw::c_int,
        nWidth: ::std::os::raw::c_int,
        nHeight: ::std::os::raw::c_int,
        hWndParent: HWND,
        hInstance: HINSTANCE,
        lParam: LPARAM,
    ) -> HWND;
}
unsafe extern "C" {
    pub fn TileWindows(
        hwndParent: HWND,
        wHow: UINT,
        lpRect: *const RECT,
        cKids: UINT,
        lpKids: *const HWND,
    ) -> WORD;
}
unsafe extern "C" {
    pub fn CascadeWindows(
        hwndParent: HWND,
        wHow: UINT,
        lpRect: *const RECT,
        cKids: UINT,
        lpKids: *const HWND,
    ) -> WORD;
}
pub type HELPPOLY = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMULTIKEYHELPA {
    pub mkSize: DWORD,
    pub mkKeylist: CHAR,
    pub szKeyphrase: [CHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMULTIKEYHELPA"][::std::mem::size_of::<tagMULTIKEYHELPA>() - 8usize];
    ["Alignment of tagMULTIKEYHELPA"][::std::mem::align_of::<tagMULTIKEYHELPA>() - 4usize];
    ["Offset of field: tagMULTIKEYHELPA::mkSize"]
        [::std::mem::offset_of!(tagMULTIKEYHELPA, mkSize) - 0usize];
    ["Offset of field: tagMULTIKEYHELPA::mkKeylist"]
        [::std::mem::offset_of!(tagMULTIKEYHELPA, mkKeylist) - 4usize];
    ["Offset of field: tagMULTIKEYHELPA::szKeyphrase"]
        [::std::mem::offset_of!(tagMULTIKEYHELPA, szKeyphrase) - 5usize];
};
pub type MULTIKEYHELPA = tagMULTIKEYHELPA;
pub type PMULTIKEYHELPA = *mut tagMULTIKEYHELPA;
pub type LPMULTIKEYHELPA = *mut tagMULTIKEYHELPA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMULTIKEYHELPW {
    pub mkSize: DWORD,
    pub mkKeylist: WCHAR,
    pub szKeyphrase: [WCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMULTIKEYHELPW"][::std::mem::size_of::<tagMULTIKEYHELPW>() - 8usize];
    ["Alignment of tagMULTIKEYHELPW"][::std::mem::align_of::<tagMULTIKEYHELPW>() - 4usize];
    ["Offset of field: tagMULTIKEYHELPW::mkSize"]
        [::std::mem::offset_of!(tagMULTIKEYHELPW, mkSize) - 0usize];
    ["Offset of field: tagMULTIKEYHELPW::mkKeylist"]
        [::std::mem::offset_of!(tagMULTIKEYHELPW, mkKeylist) - 4usize];
    ["Offset of field: tagMULTIKEYHELPW::szKeyphrase"]
        [::std::mem::offset_of!(tagMULTIKEYHELPW, szKeyphrase) - 6usize];
};
pub type MULTIKEYHELPW = tagMULTIKEYHELPW;
pub type PMULTIKEYHELPW = *mut tagMULTIKEYHELPW;
pub type LPMULTIKEYHELPW = *mut tagMULTIKEYHELPW;
pub type MULTIKEYHELP = MULTIKEYHELPA;
pub type PMULTIKEYHELP = PMULTIKEYHELPA;
pub type LPMULTIKEYHELP = LPMULTIKEYHELPA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHELPWININFOA {
    pub wStructSize: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub dx: ::std::os::raw::c_int,
    pub dy: ::std::os::raw::c_int,
    pub wMax: ::std::os::raw::c_int,
    pub rgchMember: [CHAR; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHELPWININFOA"][::std::mem::size_of::<tagHELPWININFOA>() - 28usize];
    ["Alignment of tagHELPWININFOA"][::std::mem::align_of::<tagHELPWININFOA>() - 4usize];
    ["Offset of field: tagHELPWININFOA::wStructSize"]
        [::std::mem::offset_of!(tagHELPWININFOA, wStructSize) - 0usize];
    ["Offset of field: tagHELPWININFOA::x"][::std::mem::offset_of!(tagHELPWININFOA, x) - 4usize];
    ["Offset of field: tagHELPWININFOA::y"][::std::mem::offset_of!(tagHELPWININFOA, y) - 8usize];
    ["Offset of field: tagHELPWININFOA::dx"][::std::mem::offset_of!(tagHELPWININFOA, dx) - 12usize];
    ["Offset of field: tagHELPWININFOA::dy"][::std::mem::offset_of!(tagHELPWININFOA, dy) - 16usize];
    ["Offset of field: tagHELPWININFOA::wMax"]
        [::std::mem::offset_of!(tagHELPWININFOA, wMax) - 20usize];
    ["Offset of field: tagHELPWININFOA::rgchMember"]
        [::std::mem::offset_of!(tagHELPWININFOA, rgchMember) - 24usize];
};
pub type HELPWININFOA = tagHELPWININFOA;
pub type PHELPWININFOA = *mut tagHELPWININFOA;
pub type LPHELPWININFOA = *mut tagHELPWININFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHELPWININFOW {
    pub wStructSize: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub dx: ::std::os::raw::c_int,
    pub dy: ::std::os::raw::c_int,
    pub wMax: ::std::os::raw::c_int,
    pub rgchMember: [WCHAR; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHELPWININFOW"][::std::mem::size_of::<tagHELPWININFOW>() - 28usize];
    ["Alignment of tagHELPWININFOW"][::std::mem::align_of::<tagHELPWININFOW>() - 4usize];
    ["Offset of field: tagHELPWININFOW::wStructSize"]
        [::std::mem::offset_of!(tagHELPWININFOW, wStructSize) - 0usize];
    ["Offset of field: tagHELPWININFOW::x"][::std::mem::offset_of!(tagHELPWININFOW, x) - 4usize];
    ["Offset of field: tagHELPWININFOW::y"][::std::mem::offset_of!(tagHELPWININFOW, y) - 8usize];
    ["Offset of field: tagHELPWININFOW::dx"][::std::mem::offset_of!(tagHELPWININFOW, dx) - 12usize];
    ["Offset of field: tagHELPWININFOW::dy"][::std::mem::offset_of!(tagHELPWININFOW, dy) - 16usize];
    ["Offset of field: tagHELPWININFOW::wMax"]
        [::std::mem::offset_of!(tagHELPWININFOW, wMax) - 20usize];
    ["Offset of field: tagHELPWININFOW::rgchMember"]
        [::std::mem::offset_of!(tagHELPWININFOW, rgchMember) - 24usize];
};
pub type HELPWININFOW = tagHELPWININFOW;
pub type PHELPWININFOW = *mut tagHELPWININFOW;
pub type LPHELPWININFOW = *mut tagHELPWININFOW;
pub type HELPWININFO = HELPWININFOA;
pub type PHELPWININFO = PHELPWININFOA;
pub type LPHELPWININFO = LPHELPWININFOA;
unsafe extern "C" {
    pub fn WinHelpA(hWndMain: HWND, lpszHelp: LPCSTR, uCommand: UINT, dwData: ULONG_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn WinHelpW(hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: UINT, dwData: ULONG_PTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetGuiResources(hProcess: HANDLE, uiFlags: DWORD) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTouchPredictionParameters {
    pub cbSize: UINT,
    pub dwLatency: UINT,
    pub dwSampleTime: UINT,
    pub bUseHWTimeStamp: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTouchPredictionParameters"]
        [::std::mem::size_of::<tagTouchPredictionParameters>() - 16usize];
    ["Alignment of tagTouchPredictionParameters"]
        [::std::mem::align_of::<tagTouchPredictionParameters>() - 4usize];
    ["Offset of field: tagTouchPredictionParameters::cbSize"]
        [::std::mem::offset_of!(tagTouchPredictionParameters, cbSize) - 0usize];
    ["Offset of field: tagTouchPredictionParameters::dwLatency"]
        [::std::mem::offset_of!(tagTouchPredictionParameters, dwLatency) - 4usize];
    ["Offset of field: tagTouchPredictionParameters::dwSampleTime"]
        [::std::mem::offset_of!(tagTouchPredictionParameters, dwSampleTime) - 8usize];
    ["Offset of field: tagTouchPredictionParameters::bUseHWTimeStamp"]
        [::std::mem::offset_of!(tagTouchPredictionParameters, bUseHWTimeStamp) - 12usize];
};
pub type TOUCHPREDICTIONPARAMETERS = tagTouchPredictionParameters;
pub type PTOUCHPREDICTIONPARAMETERS = *mut tagTouchPredictionParameters;
pub const tagHANDEDNESS_HANDEDNESS_LEFT: tagHANDEDNESS = 0;
pub const tagHANDEDNESS_HANDEDNESS_RIGHT: tagHANDEDNESS = 1;
pub type tagHANDEDNESS = ::std::os::raw::c_int;
pub use self::tagHANDEDNESS as HANDEDNESS;
pub type PHANDEDNESS = *mut tagHANDEDNESS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNONCLIENTMETRICSA {
    pub cbSize: UINT,
    pub iBorderWidth: ::std::os::raw::c_int,
    pub iScrollWidth: ::std::os::raw::c_int,
    pub iScrollHeight: ::std::os::raw::c_int,
    pub iCaptionWidth: ::std::os::raw::c_int,
    pub iCaptionHeight: ::std::os::raw::c_int,
    pub lfCaptionFont: LOGFONTA,
    pub iSmCaptionWidth: ::std::os::raw::c_int,
    pub iSmCaptionHeight: ::std::os::raw::c_int,
    pub lfSmCaptionFont: LOGFONTA,
    pub iMenuWidth: ::std::os::raw::c_int,
    pub iMenuHeight: ::std::os::raw::c_int,
    pub lfMenuFont: LOGFONTA,
    pub lfStatusFont: LOGFONTA,
    pub lfMessageFont: LOGFONTA,
    pub iPaddedBorderWidth: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNONCLIENTMETRICSA"][::std::mem::size_of::<tagNONCLIENTMETRICSA>() - 344usize];
    ["Alignment of tagNONCLIENTMETRICSA"][::std::mem::align_of::<tagNONCLIENTMETRICSA>() - 4usize];
    ["Offset of field: tagNONCLIENTMETRICSA::cbSize"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, cbSize) - 0usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iBorderWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iBorderWidth) - 4usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iScrollWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iScrollWidth) - 8usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iScrollHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iScrollHeight) - 12usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iCaptionWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iCaptionWidth) - 16usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iCaptionHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iCaptionHeight) - 20usize];
    ["Offset of field: tagNONCLIENTMETRICSA::lfCaptionFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, lfCaptionFont) - 24usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iSmCaptionWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iSmCaptionWidth) - 84usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iSmCaptionHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iSmCaptionHeight) - 88usize];
    ["Offset of field: tagNONCLIENTMETRICSA::lfSmCaptionFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, lfSmCaptionFont) - 92usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iMenuWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iMenuWidth) - 152usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iMenuHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iMenuHeight) - 156usize];
    ["Offset of field: tagNONCLIENTMETRICSA::lfMenuFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, lfMenuFont) - 160usize];
    ["Offset of field: tagNONCLIENTMETRICSA::lfStatusFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, lfStatusFont) - 220usize];
    ["Offset of field: tagNONCLIENTMETRICSA::lfMessageFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, lfMessageFont) - 280usize];
    ["Offset of field: tagNONCLIENTMETRICSA::iPaddedBorderWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSA, iPaddedBorderWidth) - 340usize];
};
pub type NONCLIENTMETRICSA = tagNONCLIENTMETRICSA;
pub type PNONCLIENTMETRICSA = *mut tagNONCLIENTMETRICSA;
pub type LPNONCLIENTMETRICSA = *mut tagNONCLIENTMETRICSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagNONCLIENTMETRICSW {
    pub cbSize: UINT,
    pub iBorderWidth: ::std::os::raw::c_int,
    pub iScrollWidth: ::std::os::raw::c_int,
    pub iScrollHeight: ::std::os::raw::c_int,
    pub iCaptionWidth: ::std::os::raw::c_int,
    pub iCaptionHeight: ::std::os::raw::c_int,
    pub lfCaptionFont: LOGFONTW,
    pub iSmCaptionWidth: ::std::os::raw::c_int,
    pub iSmCaptionHeight: ::std::os::raw::c_int,
    pub lfSmCaptionFont: LOGFONTW,
    pub iMenuWidth: ::std::os::raw::c_int,
    pub iMenuHeight: ::std::os::raw::c_int,
    pub lfMenuFont: LOGFONTW,
    pub lfStatusFont: LOGFONTW,
    pub lfMessageFont: LOGFONTW,
    pub iPaddedBorderWidth: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagNONCLIENTMETRICSW"][::std::mem::size_of::<tagNONCLIENTMETRICSW>() - 504usize];
    ["Alignment of tagNONCLIENTMETRICSW"][::std::mem::align_of::<tagNONCLIENTMETRICSW>() - 4usize];
    ["Offset of field: tagNONCLIENTMETRICSW::cbSize"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, cbSize) - 0usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iBorderWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iBorderWidth) - 4usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iScrollWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iScrollWidth) - 8usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iScrollHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iScrollHeight) - 12usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iCaptionWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iCaptionWidth) - 16usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iCaptionHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iCaptionHeight) - 20usize];
    ["Offset of field: tagNONCLIENTMETRICSW::lfCaptionFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, lfCaptionFont) - 24usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iSmCaptionWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iSmCaptionWidth) - 116usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iSmCaptionHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iSmCaptionHeight) - 120usize];
    ["Offset of field: tagNONCLIENTMETRICSW::lfSmCaptionFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, lfSmCaptionFont) - 124usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iMenuWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iMenuWidth) - 216usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iMenuHeight"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iMenuHeight) - 220usize];
    ["Offset of field: tagNONCLIENTMETRICSW::lfMenuFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, lfMenuFont) - 224usize];
    ["Offset of field: tagNONCLIENTMETRICSW::lfStatusFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, lfStatusFont) - 316usize];
    ["Offset of field: tagNONCLIENTMETRICSW::lfMessageFont"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, lfMessageFont) - 408usize];
    ["Offset of field: tagNONCLIENTMETRICSW::iPaddedBorderWidth"]
        [::std::mem::offset_of!(tagNONCLIENTMETRICSW, iPaddedBorderWidth) - 500usize];
};
pub type NONCLIENTMETRICSW = tagNONCLIENTMETRICSW;
pub type PNONCLIENTMETRICSW = *mut tagNONCLIENTMETRICSW;
pub type LPNONCLIENTMETRICSW = *mut tagNONCLIENTMETRICSW;
pub type NONCLIENTMETRICS = NONCLIENTMETRICSA;
pub type PNONCLIENTMETRICS = PNONCLIENTMETRICSA;
pub type LPNONCLIENTMETRICS = LPNONCLIENTMETRICSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMINIMIZEDMETRICS {
    pub cbSize: UINT,
    pub iWidth: ::std::os::raw::c_int,
    pub iHorzGap: ::std::os::raw::c_int,
    pub iVertGap: ::std::os::raw::c_int,
    pub iArrange: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMINIMIZEDMETRICS"][::std::mem::size_of::<tagMINIMIZEDMETRICS>() - 20usize];
    ["Alignment of tagMINIMIZEDMETRICS"][::std::mem::align_of::<tagMINIMIZEDMETRICS>() - 4usize];
    ["Offset of field: tagMINIMIZEDMETRICS::cbSize"]
        [::std::mem::offset_of!(tagMINIMIZEDMETRICS, cbSize) - 0usize];
    ["Offset of field: tagMINIMIZEDMETRICS::iWidth"]
        [::std::mem::offset_of!(tagMINIMIZEDMETRICS, iWidth) - 4usize];
    ["Offset of field: tagMINIMIZEDMETRICS::iHorzGap"]
        [::std::mem::offset_of!(tagMINIMIZEDMETRICS, iHorzGap) - 8usize];
    ["Offset of field: tagMINIMIZEDMETRICS::iVertGap"]
        [::std::mem::offset_of!(tagMINIMIZEDMETRICS, iVertGap) - 12usize];
    ["Offset of field: tagMINIMIZEDMETRICS::iArrange"]
        [::std::mem::offset_of!(tagMINIMIZEDMETRICS, iArrange) - 16usize];
};
pub type MINIMIZEDMETRICS = tagMINIMIZEDMETRICS;
pub type PMINIMIZEDMETRICS = *mut tagMINIMIZEDMETRICS;
pub type LPMINIMIZEDMETRICS = *mut tagMINIMIZEDMETRICS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagICONMETRICSA {
    pub cbSize: UINT,
    pub iHorzSpacing: ::std::os::raw::c_int,
    pub iVertSpacing: ::std::os::raw::c_int,
    pub iTitleWrap: ::std::os::raw::c_int,
    pub lfFont: LOGFONTA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagICONMETRICSA"][::std::mem::size_of::<tagICONMETRICSA>() - 76usize];
    ["Alignment of tagICONMETRICSA"][::std::mem::align_of::<tagICONMETRICSA>() - 4usize];
    ["Offset of field: tagICONMETRICSA::cbSize"]
        [::std::mem::offset_of!(tagICONMETRICSA, cbSize) - 0usize];
    ["Offset of field: tagICONMETRICSA::iHorzSpacing"]
        [::std::mem::offset_of!(tagICONMETRICSA, iHorzSpacing) - 4usize];
    ["Offset of field: tagICONMETRICSA::iVertSpacing"]
        [::std::mem::offset_of!(tagICONMETRICSA, iVertSpacing) - 8usize];
    ["Offset of field: tagICONMETRICSA::iTitleWrap"]
        [::std::mem::offset_of!(tagICONMETRICSA, iTitleWrap) - 12usize];
    ["Offset of field: tagICONMETRICSA::lfFont"]
        [::std::mem::offset_of!(tagICONMETRICSA, lfFont) - 16usize];
};
pub type ICONMETRICSA = tagICONMETRICSA;
pub type PICONMETRICSA = *mut tagICONMETRICSA;
pub type LPICONMETRICSA = *mut tagICONMETRICSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagICONMETRICSW {
    pub cbSize: UINT,
    pub iHorzSpacing: ::std::os::raw::c_int,
    pub iVertSpacing: ::std::os::raw::c_int,
    pub iTitleWrap: ::std::os::raw::c_int,
    pub lfFont: LOGFONTW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagICONMETRICSW"][::std::mem::size_of::<tagICONMETRICSW>() - 108usize];
    ["Alignment of tagICONMETRICSW"][::std::mem::align_of::<tagICONMETRICSW>() - 4usize];
    ["Offset of field: tagICONMETRICSW::cbSize"]
        [::std::mem::offset_of!(tagICONMETRICSW, cbSize) - 0usize];
    ["Offset of field: tagICONMETRICSW::iHorzSpacing"]
        [::std::mem::offset_of!(tagICONMETRICSW, iHorzSpacing) - 4usize];
    ["Offset of field: tagICONMETRICSW::iVertSpacing"]
        [::std::mem::offset_of!(tagICONMETRICSW, iVertSpacing) - 8usize];
    ["Offset of field: tagICONMETRICSW::iTitleWrap"]
        [::std::mem::offset_of!(tagICONMETRICSW, iTitleWrap) - 12usize];
    ["Offset of field: tagICONMETRICSW::lfFont"]
        [::std::mem::offset_of!(tagICONMETRICSW, lfFont) - 16usize];
};
pub type ICONMETRICSW = tagICONMETRICSW;
pub type PICONMETRICSW = *mut tagICONMETRICSW;
pub type LPICONMETRICSW = *mut tagICONMETRICSW;
pub type ICONMETRICS = ICONMETRICSA;
pub type PICONMETRICS = PICONMETRICSA;
pub type LPICONMETRICS = LPICONMETRICSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagANIMATIONINFO {
    pub cbSize: UINT,
    pub iMinAnimate: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagANIMATIONINFO"][::std::mem::size_of::<tagANIMATIONINFO>() - 8usize];
    ["Alignment of tagANIMATIONINFO"][::std::mem::align_of::<tagANIMATIONINFO>() - 4usize];
    ["Offset of field: tagANIMATIONINFO::cbSize"]
        [::std::mem::offset_of!(tagANIMATIONINFO, cbSize) - 0usize];
    ["Offset of field: tagANIMATIONINFO::iMinAnimate"]
        [::std::mem::offset_of!(tagANIMATIONINFO, iMinAnimate) - 4usize];
};
pub type ANIMATIONINFO = tagANIMATIONINFO;
pub type LPANIMATIONINFO = *mut tagANIMATIONINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSERIALKEYSA {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub lpszActivePort: LPSTR,
    pub lpszPort: LPSTR,
    pub iBaudRate: UINT,
    pub iPortState: UINT,
    pub iActive: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSERIALKEYSA"][::std::mem::size_of::<tagSERIALKEYSA>() - 40usize];
    ["Alignment of tagSERIALKEYSA"][::std::mem::align_of::<tagSERIALKEYSA>() - 8usize];
    ["Offset of field: tagSERIALKEYSA::cbSize"]
        [::std::mem::offset_of!(tagSERIALKEYSA, cbSize) - 0usize];
    ["Offset of field: tagSERIALKEYSA::dwFlags"]
        [::std::mem::offset_of!(tagSERIALKEYSA, dwFlags) - 4usize];
    ["Offset of field: tagSERIALKEYSA::lpszActivePort"]
        [::std::mem::offset_of!(tagSERIALKEYSA, lpszActivePort) - 8usize];
    ["Offset of field: tagSERIALKEYSA::lpszPort"]
        [::std::mem::offset_of!(tagSERIALKEYSA, lpszPort) - 16usize];
    ["Offset of field: tagSERIALKEYSA::iBaudRate"]
        [::std::mem::offset_of!(tagSERIALKEYSA, iBaudRate) - 24usize];
    ["Offset of field: tagSERIALKEYSA::iPortState"]
        [::std::mem::offset_of!(tagSERIALKEYSA, iPortState) - 28usize];
    ["Offset of field: tagSERIALKEYSA::iActive"]
        [::std::mem::offset_of!(tagSERIALKEYSA, iActive) - 32usize];
};
pub type SERIALKEYSA = tagSERIALKEYSA;
pub type LPSERIALKEYSA = *mut tagSERIALKEYSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSERIALKEYSW {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub lpszActivePort: LPWSTR,
    pub lpszPort: LPWSTR,
    pub iBaudRate: UINT,
    pub iPortState: UINT,
    pub iActive: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSERIALKEYSW"][::std::mem::size_of::<tagSERIALKEYSW>() - 40usize];
    ["Alignment of tagSERIALKEYSW"][::std::mem::align_of::<tagSERIALKEYSW>() - 8usize];
    ["Offset of field: tagSERIALKEYSW::cbSize"]
        [::std::mem::offset_of!(tagSERIALKEYSW, cbSize) - 0usize];
    ["Offset of field: tagSERIALKEYSW::dwFlags"]
        [::std::mem::offset_of!(tagSERIALKEYSW, dwFlags) - 4usize];
    ["Offset of field: tagSERIALKEYSW::lpszActivePort"]
        [::std::mem::offset_of!(tagSERIALKEYSW, lpszActivePort) - 8usize];
    ["Offset of field: tagSERIALKEYSW::lpszPort"]
        [::std::mem::offset_of!(tagSERIALKEYSW, lpszPort) - 16usize];
    ["Offset of field: tagSERIALKEYSW::iBaudRate"]
        [::std::mem::offset_of!(tagSERIALKEYSW, iBaudRate) - 24usize];
    ["Offset of field: tagSERIALKEYSW::iPortState"]
        [::std::mem::offset_of!(tagSERIALKEYSW, iPortState) - 28usize];
    ["Offset of field: tagSERIALKEYSW::iActive"]
        [::std::mem::offset_of!(tagSERIALKEYSW, iActive) - 32usize];
};
pub type SERIALKEYSW = tagSERIALKEYSW;
pub type LPSERIALKEYSW = *mut tagSERIALKEYSW;
pub type SERIALKEYS = SERIALKEYSA;
pub type LPSERIALKEYS = LPSERIALKEYSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHIGHCONTRASTA {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub lpszDefaultScheme: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHIGHCONTRASTA"][::std::mem::size_of::<tagHIGHCONTRASTA>() - 16usize];
    ["Alignment of tagHIGHCONTRASTA"][::std::mem::align_of::<tagHIGHCONTRASTA>() - 8usize];
    ["Offset of field: tagHIGHCONTRASTA::cbSize"]
        [::std::mem::offset_of!(tagHIGHCONTRASTA, cbSize) - 0usize];
    ["Offset of field: tagHIGHCONTRASTA::dwFlags"]
        [::std::mem::offset_of!(tagHIGHCONTRASTA, dwFlags) - 4usize];
    ["Offset of field: tagHIGHCONTRASTA::lpszDefaultScheme"]
        [::std::mem::offset_of!(tagHIGHCONTRASTA, lpszDefaultScheme) - 8usize];
};
pub type HIGHCONTRASTA = tagHIGHCONTRASTA;
pub type LPHIGHCONTRASTA = *mut tagHIGHCONTRASTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagHIGHCONTRASTW {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub lpszDefaultScheme: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagHIGHCONTRASTW"][::std::mem::size_of::<tagHIGHCONTRASTW>() - 16usize];
    ["Alignment of tagHIGHCONTRASTW"][::std::mem::align_of::<tagHIGHCONTRASTW>() - 8usize];
    ["Offset of field: tagHIGHCONTRASTW::cbSize"]
        [::std::mem::offset_of!(tagHIGHCONTRASTW, cbSize) - 0usize];
    ["Offset of field: tagHIGHCONTRASTW::dwFlags"]
        [::std::mem::offset_of!(tagHIGHCONTRASTW, dwFlags) - 4usize];
    ["Offset of field: tagHIGHCONTRASTW::lpszDefaultScheme"]
        [::std::mem::offset_of!(tagHIGHCONTRASTW, lpszDefaultScheme) - 8usize];
};
pub type HIGHCONTRASTW = tagHIGHCONTRASTW;
pub type LPHIGHCONTRASTW = *mut tagHIGHCONTRASTW;
pub type HIGHCONTRAST = HIGHCONTRASTA;
pub type LPHIGHCONTRAST = LPHIGHCONTRASTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEOPARAMETERS {
    pub Guid: GUID,
    pub dwOffset: ULONG,
    pub dwCommand: ULONG,
    pub dwFlags: ULONG,
    pub dwMode: ULONG,
    pub dwTVStandard: ULONG,
    pub dwAvailableModes: ULONG,
    pub dwAvailableTVStandard: ULONG,
    pub dwFlickerFilter: ULONG,
    pub dwOverScanX: ULONG,
    pub dwOverScanY: ULONG,
    pub dwMaxUnscaledX: ULONG,
    pub dwMaxUnscaledY: ULONG,
    pub dwPositionX: ULONG,
    pub dwPositionY: ULONG,
    pub dwBrightness: ULONG,
    pub dwContrast: ULONG,
    pub dwCPType: ULONG,
    pub dwCPCommand: ULONG,
    pub dwCPStandard: ULONG,
    pub dwCPKey: ULONG,
    pub bCP_APSTriggerBits: ULONG,
    pub bOEMCopyProtection: [UCHAR; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEOPARAMETERS"][::std::mem::size_of::<_VIDEOPARAMETERS>() - 356usize];
    ["Alignment of _VIDEOPARAMETERS"][::std::mem::align_of::<_VIDEOPARAMETERS>() - 4usize];
    ["Offset of field: _VIDEOPARAMETERS::Guid"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, Guid) - 0usize];
    ["Offset of field: _VIDEOPARAMETERS::dwOffset"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwOffset) - 16usize];
    ["Offset of field: _VIDEOPARAMETERS::dwCommand"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwCommand) - 20usize];
    ["Offset of field: _VIDEOPARAMETERS::dwFlags"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwFlags) - 24usize];
    ["Offset of field: _VIDEOPARAMETERS::dwMode"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwMode) - 28usize];
    ["Offset of field: _VIDEOPARAMETERS::dwTVStandard"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwTVStandard) - 32usize];
    ["Offset of field: _VIDEOPARAMETERS::dwAvailableModes"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwAvailableModes) - 36usize];
    ["Offset of field: _VIDEOPARAMETERS::dwAvailableTVStandard"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwAvailableTVStandard) - 40usize];
    ["Offset of field: _VIDEOPARAMETERS::dwFlickerFilter"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwFlickerFilter) - 44usize];
    ["Offset of field: _VIDEOPARAMETERS::dwOverScanX"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwOverScanX) - 48usize];
    ["Offset of field: _VIDEOPARAMETERS::dwOverScanY"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwOverScanY) - 52usize];
    ["Offset of field: _VIDEOPARAMETERS::dwMaxUnscaledX"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwMaxUnscaledX) - 56usize];
    ["Offset of field: _VIDEOPARAMETERS::dwMaxUnscaledY"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwMaxUnscaledY) - 60usize];
    ["Offset of field: _VIDEOPARAMETERS::dwPositionX"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwPositionX) - 64usize];
    ["Offset of field: _VIDEOPARAMETERS::dwPositionY"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwPositionY) - 68usize];
    ["Offset of field: _VIDEOPARAMETERS::dwBrightness"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwBrightness) - 72usize];
    ["Offset of field: _VIDEOPARAMETERS::dwContrast"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwContrast) - 76usize];
    ["Offset of field: _VIDEOPARAMETERS::dwCPType"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwCPType) - 80usize];
    ["Offset of field: _VIDEOPARAMETERS::dwCPCommand"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwCPCommand) - 84usize];
    ["Offset of field: _VIDEOPARAMETERS::dwCPStandard"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwCPStandard) - 88usize];
    ["Offset of field: _VIDEOPARAMETERS::dwCPKey"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, dwCPKey) - 92usize];
    ["Offset of field: _VIDEOPARAMETERS::bCP_APSTriggerBits"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, bCP_APSTriggerBits) - 96usize];
    ["Offset of field: _VIDEOPARAMETERS::bOEMCopyProtection"]
        [::std::mem::offset_of!(_VIDEOPARAMETERS, bOEMCopyProtection) - 100usize];
};
pub type VIDEOPARAMETERS = _VIDEOPARAMETERS;
pub type PVIDEOPARAMETERS = *mut _VIDEOPARAMETERS;
pub type LPVIDEOPARAMETERS = *mut _VIDEOPARAMETERS;
unsafe extern "C" {
    pub fn ChangeDisplaySettingsA(lpDevMode: *mut DEVMODEA, dwFlags: DWORD) -> LONG;
}
unsafe extern "C" {
    pub fn ChangeDisplaySettingsW(lpDevMode: *mut DEVMODEW, dwFlags: DWORD) -> LONG;
}
unsafe extern "C" {
    pub fn ChangeDisplaySettingsExA(
        lpszDeviceName: LPCSTR,
        lpDevMode: *mut DEVMODEA,
        hwnd: HWND,
        dwflags: DWORD,
        lParam: LPVOID,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn ChangeDisplaySettingsExW(
        lpszDeviceName: LPCWSTR,
        lpDevMode: *mut DEVMODEW,
        hwnd: HWND,
        dwflags: DWORD,
        lParam: LPVOID,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn EnumDisplaySettingsA(
        lpszDeviceName: LPCSTR,
        iModeNum: DWORD,
        lpDevMode: *mut DEVMODEA,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDisplaySettingsW(
        lpszDeviceName: LPCWSTR,
        iModeNum: DWORD,
        lpDevMode: *mut DEVMODEW,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDisplaySettingsExA(
        lpszDeviceName: LPCSTR,
        iModeNum: DWORD,
        lpDevMode: *mut DEVMODEA,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDisplaySettingsExW(
        lpszDeviceName: LPCWSTR,
        iModeNum: DWORD,
        lpDevMode: *mut DEVMODEW,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDisplayDevicesA(
        lpDevice: LPCSTR,
        iDevNum: DWORD,
        lpDisplayDevice: PDISPLAY_DEVICEA,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDisplayDevicesW(
        lpDevice: LPCWSTR,
        iDevNum: DWORD,
        lpDisplayDevice: PDISPLAY_DEVICEW,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDisplayConfigBufferSizes(
        flags: UINT32,
        numPathArrayElements: *mut UINT32,
        numModeInfoArrayElements: *mut UINT32,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn SetDisplayConfig(
        numPathArrayElements: UINT32,
        pathArray: *mut DISPLAYCONFIG_PATH_INFO,
        numModeInfoArrayElements: UINT32,
        modeInfoArray: *mut DISPLAYCONFIG_MODE_INFO,
        flags: UINT32,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn QueryDisplayConfig(
        flags: UINT32,
        numPathArrayElements: *mut UINT32,
        pathArray: *mut DISPLAYCONFIG_PATH_INFO,
        numModeInfoArrayElements: *mut UINT32,
        modeInfoArray: *mut DISPLAYCONFIG_MODE_INFO,
        currentTopologyId: *mut DISPLAYCONFIG_TOPOLOGY_ID,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn DisplayConfigGetDeviceInfo(requestPacket: *mut DISPLAYCONFIG_DEVICE_INFO_HEADER)
    -> LONG;
}
unsafe extern "C" {
    pub fn DisplayConfigSetDeviceInfo(setPacket: *mut DISPLAYCONFIG_DEVICE_INFO_HEADER) -> LONG;
}
unsafe extern "C" {
    pub fn SystemParametersInfoA(
        uiAction: UINT,
        uiParam: UINT,
        pvParam: PVOID,
        fWinIni: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SystemParametersInfoW(
        uiAction: UINT,
        uiParam: UINT,
        pvParam: PVOID,
        fWinIni: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SystemParametersInfoForDpi(
        uiAction: UINT,
        uiParam: UINT,
        pvParam: PVOID,
        fWinIni: UINT,
        dpi: UINT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagFILTERKEYS {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub iWaitMSec: DWORD,
    pub iDelayMSec: DWORD,
    pub iRepeatMSec: DWORD,
    pub iBounceMSec: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagFILTERKEYS"][::std::mem::size_of::<tagFILTERKEYS>() - 24usize];
    ["Alignment of tagFILTERKEYS"][::std::mem::align_of::<tagFILTERKEYS>() - 4usize];
    ["Offset of field: tagFILTERKEYS::cbSize"]
        [::std::mem::offset_of!(tagFILTERKEYS, cbSize) - 0usize];
    ["Offset of field: tagFILTERKEYS::dwFlags"]
        [::std::mem::offset_of!(tagFILTERKEYS, dwFlags) - 4usize];
    ["Offset of field: tagFILTERKEYS::iWaitMSec"]
        [::std::mem::offset_of!(tagFILTERKEYS, iWaitMSec) - 8usize];
    ["Offset of field: tagFILTERKEYS::iDelayMSec"]
        [::std::mem::offset_of!(tagFILTERKEYS, iDelayMSec) - 12usize];
    ["Offset of field: tagFILTERKEYS::iRepeatMSec"]
        [::std::mem::offset_of!(tagFILTERKEYS, iRepeatMSec) - 16usize];
    ["Offset of field: tagFILTERKEYS::iBounceMSec"]
        [::std::mem::offset_of!(tagFILTERKEYS, iBounceMSec) - 20usize];
};
pub type FILTERKEYS = tagFILTERKEYS;
pub type LPFILTERKEYS = *mut tagFILTERKEYS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSTICKYKEYS {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSTICKYKEYS"][::std::mem::size_of::<tagSTICKYKEYS>() - 8usize];
    ["Alignment of tagSTICKYKEYS"][::std::mem::align_of::<tagSTICKYKEYS>() - 4usize];
    ["Offset of field: tagSTICKYKEYS::cbSize"]
        [::std::mem::offset_of!(tagSTICKYKEYS, cbSize) - 0usize];
    ["Offset of field: tagSTICKYKEYS::dwFlags"]
        [::std::mem::offset_of!(tagSTICKYKEYS, dwFlags) - 4usize];
};
pub type STICKYKEYS = tagSTICKYKEYS;
pub type LPSTICKYKEYS = *mut tagSTICKYKEYS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMOUSEKEYS {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub iMaxSpeed: DWORD,
    pub iTimeToMaxSpeed: DWORD,
    pub iCtrlSpeed: DWORD,
    pub dwReserved1: DWORD,
    pub dwReserved2: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMOUSEKEYS"][::std::mem::size_of::<tagMOUSEKEYS>() - 28usize];
    ["Alignment of tagMOUSEKEYS"][::std::mem::align_of::<tagMOUSEKEYS>() - 4usize];
    ["Offset of field: tagMOUSEKEYS::cbSize"]
        [::std::mem::offset_of!(tagMOUSEKEYS, cbSize) - 0usize];
    ["Offset of field: tagMOUSEKEYS::dwFlags"]
        [::std::mem::offset_of!(tagMOUSEKEYS, dwFlags) - 4usize];
    ["Offset of field: tagMOUSEKEYS::iMaxSpeed"]
        [::std::mem::offset_of!(tagMOUSEKEYS, iMaxSpeed) - 8usize];
    ["Offset of field: tagMOUSEKEYS::iTimeToMaxSpeed"]
        [::std::mem::offset_of!(tagMOUSEKEYS, iTimeToMaxSpeed) - 12usize];
    ["Offset of field: tagMOUSEKEYS::iCtrlSpeed"]
        [::std::mem::offset_of!(tagMOUSEKEYS, iCtrlSpeed) - 16usize];
    ["Offset of field: tagMOUSEKEYS::dwReserved1"]
        [::std::mem::offset_of!(tagMOUSEKEYS, dwReserved1) - 20usize];
    ["Offset of field: tagMOUSEKEYS::dwReserved2"]
        [::std::mem::offset_of!(tagMOUSEKEYS, dwReserved2) - 24usize];
};
pub type MOUSEKEYS = tagMOUSEKEYS;
pub type LPMOUSEKEYS = *mut tagMOUSEKEYS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagACCESSTIMEOUT {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub iTimeOutMSec: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagACCESSTIMEOUT"][::std::mem::size_of::<tagACCESSTIMEOUT>() - 12usize];
    ["Alignment of tagACCESSTIMEOUT"][::std::mem::align_of::<tagACCESSTIMEOUT>() - 4usize];
    ["Offset of field: tagACCESSTIMEOUT::cbSize"]
        [::std::mem::offset_of!(tagACCESSTIMEOUT, cbSize) - 0usize];
    ["Offset of field: tagACCESSTIMEOUT::dwFlags"]
        [::std::mem::offset_of!(tagACCESSTIMEOUT, dwFlags) - 4usize];
    ["Offset of field: tagACCESSTIMEOUT::iTimeOutMSec"]
        [::std::mem::offset_of!(tagACCESSTIMEOUT, iTimeOutMSec) - 8usize];
};
pub type ACCESSTIMEOUT = tagACCESSTIMEOUT;
pub type LPACCESSTIMEOUT = *mut tagACCESSTIMEOUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSOUNDSENTRYA {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub iFSTextEffect: DWORD,
    pub iFSTextEffectMSec: DWORD,
    pub iFSTextEffectColorBits: DWORD,
    pub iFSGrafEffect: DWORD,
    pub iFSGrafEffectMSec: DWORD,
    pub iFSGrafEffectColor: DWORD,
    pub iWindowsEffect: DWORD,
    pub iWindowsEffectMSec: DWORD,
    pub lpszWindowsEffectDLL: LPSTR,
    pub iWindowsEffectOrdinal: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSOUNDSENTRYA"][::std::mem::size_of::<tagSOUNDSENTRYA>() - 56usize];
    ["Alignment of tagSOUNDSENTRYA"][::std::mem::align_of::<tagSOUNDSENTRYA>() - 8usize];
    ["Offset of field: tagSOUNDSENTRYA::cbSize"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, cbSize) - 0usize];
    ["Offset of field: tagSOUNDSENTRYA::dwFlags"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, dwFlags) - 4usize];
    ["Offset of field: tagSOUNDSENTRYA::iFSTextEffect"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iFSTextEffect) - 8usize];
    ["Offset of field: tagSOUNDSENTRYA::iFSTextEffectMSec"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iFSTextEffectMSec) - 12usize];
    ["Offset of field: tagSOUNDSENTRYA::iFSTextEffectColorBits"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iFSTextEffectColorBits) - 16usize];
    ["Offset of field: tagSOUNDSENTRYA::iFSGrafEffect"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iFSGrafEffect) - 20usize];
    ["Offset of field: tagSOUNDSENTRYA::iFSGrafEffectMSec"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iFSGrafEffectMSec) - 24usize];
    ["Offset of field: tagSOUNDSENTRYA::iFSGrafEffectColor"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iFSGrafEffectColor) - 28usize];
    ["Offset of field: tagSOUNDSENTRYA::iWindowsEffect"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iWindowsEffect) - 32usize];
    ["Offset of field: tagSOUNDSENTRYA::iWindowsEffectMSec"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iWindowsEffectMSec) - 36usize];
    ["Offset of field: tagSOUNDSENTRYA::lpszWindowsEffectDLL"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, lpszWindowsEffectDLL) - 40usize];
    ["Offset of field: tagSOUNDSENTRYA::iWindowsEffectOrdinal"]
        [::std::mem::offset_of!(tagSOUNDSENTRYA, iWindowsEffectOrdinal) - 48usize];
};
pub type SOUNDSENTRYA = tagSOUNDSENTRYA;
pub type LPSOUNDSENTRYA = *mut tagSOUNDSENTRYA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSOUNDSENTRYW {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub iFSTextEffect: DWORD,
    pub iFSTextEffectMSec: DWORD,
    pub iFSTextEffectColorBits: DWORD,
    pub iFSGrafEffect: DWORD,
    pub iFSGrafEffectMSec: DWORD,
    pub iFSGrafEffectColor: DWORD,
    pub iWindowsEffect: DWORD,
    pub iWindowsEffectMSec: DWORD,
    pub lpszWindowsEffectDLL: LPWSTR,
    pub iWindowsEffectOrdinal: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSOUNDSENTRYW"][::std::mem::size_of::<tagSOUNDSENTRYW>() - 56usize];
    ["Alignment of tagSOUNDSENTRYW"][::std::mem::align_of::<tagSOUNDSENTRYW>() - 8usize];
    ["Offset of field: tagSOUNDSENTRYW::cbSize"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, cbSize) - 0usize];
    ["Offset of field: tagSOUNDSENTRYW::dwFlags"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, dwFlags) - 4usize];
    ["Offset of field: tagSOUNDSENTRYW::iFSTextEffect"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iFSTextEffect) - 8usize];
    ["Offset of field: tagSOUNDSENTRYW::iFSTextEffectMSec"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iFSTextEffectMSec) - 12usize];
    ["Offset of field: tagSOUNDSENTRYW::iFSTextEffectColorBits"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iFSTextEffectColorBits) - 16usize];
    ["Offset of field: tagSOUNDSENTRYW::iFSGrafEffect"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iFSGrafEffect) - 20usize];
    ["Offset of field: tagSOUNDSENTRYW::iFSGrafEffectMSec"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iFSGrafEffectMSec) - 24usize];
    ["Offset of field: tagSOUNDSENTRYW::iFSGrafEffectColor"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iFSGrafEffectColor) - 28usize];
    ["Offset of field: tagSOUNDSENTRYW::iWindowsEffect"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iWindowsEffect) - 32usize];
    ["Offset of field: tagSOUNDSENTRYW::iWindowsEffectMSec"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iWindowsEffectMSec) - 36usize];
    ["Offset of field: tagSOUNDSENTRYW::lpszWindowsEffectDLL"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, lpszWindowsEffectDLL) - 40usize];
    ["Offset of field: tagSOUNDSENTRYW::iWindowsEffectOrdinal"]
        [::std::mem::offset_of!(tagSOUNDSENTRYW, iWindowsEffectOrdinal) - 48usize];
};
pub type SOUNDSENTRYW = tagSOUNDSENTRYW;
pub type LPSOUNDSENTRYW = *mut tagSOUNDSENTRYW;
pub type SOUNDSENTRY = SOUNDSENTRYA;
pub type LPSOUNDSENTRY = LPSOUNDSENTRYA;
unsafe extern "C" {
    pub fn SoundSentry() -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTOGGLEKEYS {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTOGGLEKEYS"][::std::mem::size_of::<tagTOGGLEKEYS>() - 8usize];
    ["Alignment of tagTOGGLEKEYS"][::std::mem::align_of::<tagTOGGLEKEYS>() - 4usize];
    ["Offset of field: tagTOGGLEKEYS::cbSize"]
        [::std::mem::offset_of!(tagTOGGLEKEYS, cbSize) - 0usize];
    ["Offset of field: tagTOGGLEKEYS::dwFlags"]
        [::std::mem::offset_of!(tagTOGGLEKEYS, dwFlags) - 4usize];
};
pub type TOGGLEKEYS = tagTOGGLEKEYS;
pub type LPTOGGLEKEYS = *mut tagTOGGLEKEYS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagAUDIODESCRIPTION {
    pub cbSize: UINT,
    pub Enabled: BOOL,
    pub Locale: LCID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagAUDIODESCRIPTION"][::std::mem::size_of::<tagAUDIODESCRIPTION>() - 12usize];
    ["Alignment of tagAUDIODESCRIPTION"][::std::mem::align_of::<tagAUDIODESCRIPTION>() - 4usize];
    ["Offset of field: tagAUDIODESCRIPTION::cbSize"]
        [::std::mem::offset_of!(tagAUDIODESCRIPTION, cbSize) - 0usize];
    ["Offset of field: tagAUDIODESCRIPTION::Enabled"]
        [::std::mem::offset_of!(tagAUDIODESCRIPTION, Enabled) - 4usize];
    ["Offset of field: tagAUDIODESCRIPTION::Locale"]
        [::std::mem::offset_of!(tagAUDIODESCRIPTION, Locale) - 8usize];
};
pub type AUDIODESCRIPTION = tagAUDIODESCRIPTION;
pub type LPAUDIODESCRIPTION = *mut tagAUDIODESCRIPTION;
unsafe extern "C" {
    pub fn SetDebugErrorLevel(dwLevel: DWORD);
}
unsafe extern "C" {
    pub fn SetLastErrorEx(dwErrCode: DWORD, dwType: DWORD);
}
unsafe extern "C" {
    pub fn InternalGetWindowText(
        hWnd: HWND,
        pString: LPWSTR,
        cchMaxCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CancelShutdown() -> BOOL;
}
unsafe extern "C" {
    pub fn MonitorFromPoint(pt: POINT, dwFlags: DWORD) -> HMONITOR;
}
unsafe extern "C" {
    pub fn MonitorFromRect(lprc: LPCRECT, dwFlags: DWORD) -> HMONITOR;
}
unsafe extern "C" {
    pub fn MonitorFromWindow(hwnd: HWND, dwFlags: DWORD) -> HMONITOR;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMONITORINFO {
    pub cbSize: DWORD,
    pub rcMonitor: RECT,
    pub rcWork: RECT,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMONITORINFO"][::std::mem::size_of::<tagMONITORINFO>() - 40usize];
    ["Alignment of tagMONITORINFO"][::std::mem::align_of::<tagMONITORINFO>() - 4usize];
    ["Offset of field: tagMONITORINFO::cbSize"]
        [::std::mem::offset_of!(tagMONITORINFO, cbSize) - 0usize];
    ["Offset of field: tagMONITORINFO::rcMonitor"]
        [::std::mem::offset_of!(tagMONITORINFO, rcMonitor) - 4usize];
    ["Offset of field: tagMONITORINFO::rcWork"]
        [::std::mem::offset_of!(tagMONITORINFO, rcWork) - 20usize];
    ["Offset of field: tagMONITORINFO::dwFlags"]
        [::std::mem::offset_of!(tagMONITORINFO, dwFlags) - 36usize];
};
pub type MONITORINFO = tagMONITORINFO;
pub type LPMONITORINFO = *mut tagMONITORINFO;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct tagMONITORINFOEXA {
    pub __bindgen_padding_0: [u8; 40usize],
    pub szDevice: [CHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMONITORINFOEXA"][::std::mem::size_of::<tagMONITORINFOEXA>() - 72usize];
    ["Alignment of tagMONITORINFOEXA"][::std::mem::align_of::<tagMONITORINFOEXA>() - 4usize];
    ["Offset of field: tagMONITORINFOEXA::szDevice"]
        [::std::mem::offset_of!(tagMONITORINFOEXA, szDevice) - 40usize];
};
pub type MONITORINFOEXA = tagMONITORINFOEXA;
pub type LPMONITORINFOEXA = *mut tagMONITORINFOEXA;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct tagMONITORINFOEXW {
    pub __bindgen_padding_0: [u16; 20usize],
    pub szDevice: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMONITORINFOEXW"][::std::mem::size_of::<tagMONITORINFOEXW>() - 104usize];
    ["Alignment of tagMONITORINFOEXW"][::std::mem::align_of::<tagMONITORINFOEXW>() - 4usize];
    ["Offset of field: tagMONITORINFOEXW::szDevice"]
        [::std::mem::offset_of!(tagMONITORINFOEXW, szDevice) - 40usize];
};
pub type MONITORINFOEXW = tagMONITORINFOEXW;
pub type LPMONITORINFOEXW = *mut tagMONITORINFOEXW;
pub type MONITORINFOEX = MONITORINFOEXA;
pub type LPMONITORINFOEX = LPMONITORINFOEXA;
unsafe extern "C" {
    pub fn GetMonitorInfoA(hMonitor: HMONITOR, lpmi: LPMONITORINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetMonitorInfoW(hMonitor: HMONITOR, lpmi: LPMONITORINFO) -> BOOL;
}
pub type MONITORENUMPROC = ::std::option::Option<
    unsafe extern "C" fn(arg1: HMONITOR, arg2: HDC, arg3: LPRECT, arg4: LPARAM) -> BOOL,
>;
unsafe extern "C" {
    pub fn EnumDisplayMonitors(
        hdc: HDC,
        lprcClip: LPCRECT,
        lpfnEnum: MONITORENUMPROC,
        dwData: LPARAM,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn NotifyWinEvent(event: DWORD, hwnd: HWND, idObject: LONG, idChild: LONG);
}
pub type WINEVENTPROC = ::std::option::Option<
    unsafe extern "C" fn(
        hWinEventHook: HWINEVENTHOOK,
        event: DWORD,
        hwnd: HWND,
        idObject: LONG,
        idChild: LONG,
        idEventThread: DWORD,
        dwmsEventTime: DWORD,
    ),
>;
unsafe extern "C" {
    pub fn SetWinEventHook(
        eventMin: DWORD,
        eventMax: DWORD,
        hmodWinEventProc: HMODULE,
        pfnWinEventProc: WINEVENTPROC,
        idProcess: DWORD,
        idThread: DWORD,
        dwFlags: DWORD,
    ) -> HWINEVENTHOOK;
}
unsafe extern "C" {
    pub fn IsWinEventHookInstalled(event: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn UnhookWinEvent(hWinEventHook: HWINEVENTHOOK) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGUITHREADINFO {
    pub cbSize: DWORD,
    pub flags: DWORD,
    pub hwndActive: HWND,
    pub hwndFocus: HWND,
    pub hwndCapture: HWND,
    pub hwndMenuOwner: HWND,
    pub hwndMoveSize: HWND,
    pub hwndCaret: HWND,
    pub rcCaret: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGUITHREADINFO"][::std::mem::size_of::<tagGUITHREADINFO>() - 72usize];
    ["Alignment of tagGUITHREADINFO"][::std::mem::align_of::<tagGUITHREADINFO>() - 8usize];
    ["Offset of field: tagGUITHREADINFO::cbSize"]
        [::std::mem::offset_of!(tagGUITHREADINFO, cbSize) - 0usize];
    ["Offset of field: tagGUITHREADINFO::flags"]
        [::std::mem::offset_of!(tagGUITHREADINFO, flags) - 4usize];
    ["Offset of field: tagGUITHREADINFO::hwndActive"]
        [::std::mem::offset_of!(tagGUITHREADINFO, hwndActive) - 8usize];
    ["Offset of field: tagGUITHREADINFO::hwndFocus"]
        [::std::mem::offset_of!(tagGUITHREADINFO, hwndFocus) - 16usize];
    ["Offset of field: tagGUITHREADINFO::hwndCapture"]
        [::std::mem::offset_of!(tagGUITHREADINFO, hwndCapture) - 24usize];
    ["Offset of field: tagGUITHREADINFO::hwndMenuOwner"]
        [::std::mem::offset_of!(tagGUITHREADINFO, hwndMenuOwner) - 32usize];
    ["Offset of field: tagGUITHREADINFO::hwndMoveSize"]
        [::std::mem::offset_of!(tagGUITHREADINFO, hwndMoveSize) - 40usize];
    ["Offset of field: tagGUITHREADINFO::hwndCaret"]
        [::std::mem::offset_of!(tagGUITHREADINFO, hwndCaret) - 48usize];
    ["Offset of field: tagGUITHREADINFO::rcCaret"]
        [::std::mem::offset_of!(tagGUITHREADINFO, rcCaret) - 56usize];
};
pub type GUITHREADINFO = tagGUITHREADINFO;
pub type PGUITHREADINFO = *mut tagGUITHREADINFO;
pub type LPGUITHREADINFO = *mut tagGUITHREADINFO;
unsafe extern "C" {
    pub fn GetGUIThreadInfo(idThread: DWORD, pgui: PGUITHREADINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn BlockInput(fBlockIt: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDPIAware() -> BOOL;
}
unsafe extern "C" {
    pub fn IsProcessDPIAware() -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadDpiAwarenessContext(dpiContext: DPI_AWARENESS_CONTEXT)
    -> DPI_AWARENESS_CONTEXT;
}
unsafe extern "C" {
    pub fn GetThreadDpiAwarenessContext() -> DPI_AWARENESS_CONTEXT;
}
unsafe extern "C" {
    pub fn GetWindowDpiAwarenessContext(hwnd: HWND) -> DPI_AWARENESS_CONTEXT;
}
unsafe extern "C" {
    pub fn GetAwarenessFromDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) -> DPI_AWARENESS;
}
unsafe extern "C" {
    pub fn GetDpiFromDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) -> UINT;
}
unsafe extern "C" {
    pub fn AreDpiAwarenessContextsEqual(
        dpiContextA: DPI_AWARENESS_CONTEXT,
        dpiContextB: DPI_AWARENESS_CONTEXT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDpiForWindow(hwnd: HWND) -> UINT;
}
unsafe extern "C" {
    pub fn GetDpiForSystem() -> UINT;
}
unsafe extern "C" {
    pub fn GetSystemDpiForProcess(hProcess: HANDLE) -> UINT;
}
unsafe extern "C" {
    pub fn EnableNonClientDpiScaling(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn InheritWindowMonitor(hwnd: HWND, hwndInherit: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDpiAwarenessContextForProcess(hProcess: HANDLE) -> DPI_AWARENESS_CONTEXT;
}
unsafe extern "C" {
    pub fn SetThreadDpiHostingBehavior(value: DPI_HOSTING_BEHAVIOR) -> DPI_HOSTING_BEHAVIOR;
}
unsafe extern "C" {
    pub fn GetThreadDpiHostingBehavior() -> DPI_HOSTING_BEHAVIOR;
}
unsafe extern "C" {
    pub fn GetWindowDpiHostingBehavior(hwnd: HWND) -> DPI_HOSTING_BEHAVIOR;
}
unsafe extern "C" {
    pub fn GetWindowModuleFileNameA(hwnd: HWND, pszFileName: LPSTR, cchFileNameMax: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn GetWindowModuleFileNameW(hwnd: HWND, pszFileName: LPWSTR, cchFileNameMax: UINT) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCURSORINFO {
    pub cbSize: DWORD,
    pub flags: DWORD,
    pub hCursor: HCURSOR,
    pub ptScreenPos: POINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCURSORINFO"][::std::mem::size_of::<tagCURSORINFO>() - 24usize];
    ["Alignment of tagCURSORINFO"][::std::mem::align_of::<tagCURSORINFO>() - 8usize];
    ["Offset of field: tagCURSORINFO::cbSize"]
        [::std::mem::offset_of!(tagCURSORINFO, cbSize) - 0usize];
    ["Offset of field: tagCURSORINFO::flags"]
        [::std::mem::offset_of!(tagCURSORINFO, flags) - 4usize];
    ["Offset of field: tagCURSORINFO::hCursor"]
        [::std::mem::offset_of!(tagCURSORINFO, hCursor) - 8usize];
    ["Offset of field: tagCURSORINFO::ptScreenPos"]
        [::std::mem::offset_of!(tagCURSORINFO, ptScreenPos) - 16usize];
};
pub type CURSORINFO = tagCURSORINFO;
pub type PCURSORINFO = *mut tagCURSORINFO;
pub type LPCURSORINFO = *mut tagCURSORINFO;
unsafe extern "C" {
    pub fn GetCursorInfo(pci: PCURSORINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagWINDOWINFO {
    pub cbSize: DWORD,
    pub rcWindow: RECT,
    pub rcClient: RECT,
    pub dwStyle: DWORD,
    pub dwExStyle: DWORD,
    pub dwWindowStatus: DWORD,
    pub cxWindowBorders: UINT,
    pub cyWindowBorders: UINT,
    pub atomWindowType: ATOM,
    pub wCreatorVersion: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagWINDOWINFO"][::std::mem::size_of::<tagWINDOWINFO>() - 60usize];
    ["Alignment of tagWINDOWINFO"][::std::mem::align_of::<tagWINDOWINFO>() - 4usize];
    ["Offset of field: tagWINDOWINFO::cbSize"]
        [::std::mem::offset_of!(tagWINDOWINFO, cbSize) - 0usize];
    ["Offset of field: tagWINDOWINFO::rcWindow"]
        [::std::mem::offset_of!(tagWINDOWINFO, rcWindow) - 4usize];
    ["Offset of field: tagWINDOWINFO::rcClient"]
        [::std::mem::offset_of!(tagWINDOWINFO, rcClient) - 20usize];
    ["Offset of field: tagWINDOWINFO::dwStyle"]
        [::std::mem::offset_of!(tagWINDOWINFO, dwStyle) - 36usize];
    ["Offset of field: tagWINDOWINFO::dwExStyle"]
        [::std::mem::offset_of!(tagWINDOWINFO, dwExStyle) - 40usize];
    ["Offset of field: tagWINDOWINFO::dwWindowStatus"]
        [::std::mem::offset_of!(tagWINDOWINFO, dwWindowStatus) - 44usize];
    ["Offset of field: tagWINDOWINFO::cxWindowBorders"]
        [::std::mem::offset_of!(tagWINDOWINFO, cxWindowBorders) - 48usize];
    ["Offset of field: tagWINDOWINFO::cyWindowBorders"]
        [::std::mem::offset_of!(tagWINDOWINFO, cyWindowBorders) - 52usize];
    ["Offset of field: tagWINDOWINFO::atomWindowType"]
        [::std::mem::offset_of!(tagWINDOWINFO, atomWindowType) - 56usize];
    ["Offset of field: tagWINDOWINFO::wCreatorVersion"]
        [::std::mem::offset_of!(tagWINDOWINFO, wCreatorVersion) - 58usize];
};
pub type WINDOWINFO = tagWINDOWINFO;
pub type PWINDOWINFO = *mut tagWINDOWINFO;
pub type LPWINDOWINFO = *mut tagWINDOWINFO;
unsafe extern "C" {
    pub fn GetWindowInfo(hwnd: HWND, pwi: PWINDOWINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTITLEBARINFO {
    pub cbSize: DWORD,
    pub rcTitleBar: RECT,
    pub rgstate: [DWORD; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTITLEBARINFO"][::std::mem::size_of::<tagTITLEBARINFO>() - 44usize];
    ["Alignment of tagTITLEBARINFO"][::std::mem::align_of::<tagTITLEBARINFO>() - 4usize];
    ["Offset of field: tagTITLEBARINFO::cbSize"]
        [::std::mem::offset_of!(tagTITLEBARINFO, cbSize) - 0usize];
    ["Offset of field: tagTITLEBARINFO::rcTitleBar"]
        [::std::mem::offset_of!(tagTITLEBARINFO, rcTitleBar) - 4usize];
    ["Offset of field: tagTITLEBARINFO::rgstate"]
        [::std::mem::offset_of!(tagTITLEBARINFO, rgstate) - 20usize];
};
pub type TITLEBARINFO = tagTITLEBARINFO;
pub type PTITLEBARINFO = *mut tagTITLEBARINFO;
pub type LPTITLEBARINFO = *mut tagTITLEBARINFO;
unsafe extern "C" {
    pub fn GetTitleBarInfo(hwnd: HWND, pti: PTITLEBARINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagTITLEBARINFOEX {
    pub cbSize: DWORD,
    pub rcTitleBar: RECT,
    pub rgstate: [DWORD; 6usize],
    pub rgrect: [RECT; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagTITLEBARINFOEX"][::std::mem::size_of::<tagTITLEBARINFOEX>() - 140usize];
    ["Alignment of tagTITLEBARINFOEX"][::std::mem::align_of::<tagTITLEBARINFOEX>() - 4usize];
    ["Offset of field: tagTITLEBARINFOEX::cbSize"]
        [::std::mem::offset_of!(tagTITLEBARINFOEX, cbSize) - 0usize];
    ["Offset of field: tagTITLEBARINFOEX::rcTitleBar"]
        [::std::mem::offset_of!(tagTITLEBARINFOEX, rcTitleBar) - 4usize];
    ["Offset of field: tagTITLEBARINFOEX::rgstate"]
        [::std::mem::offset_of!(tagTITLEBARINFOEX, rgstate) - 20usize];
    ["Offset of field: tagTITLEBARINFOEX::rgrect"]
        [::std::mem::offset_of!(tagTITLEBARINFOEX, rgrect) - 44usize];
};
pub type TITLEBARINFOEX = tagTITLEBARINFOEX;
pub type PTITLEBARINFOEX = *mut tagTITLEBARINFOEX;
pub type LPTITLEBARINFOEX = *mut tagTITLEBARINFOEX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagMENUBARINFO {
    pub cbSize: DWORD,
    pub rcBar: RECT,
    pub hMenu: HMENU,
    pub hwndMenu: HWND,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub __bindgen_padding_0: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagMENUBARINFO"][::std::mem::size_of::<tagMENUBARINFO>() - 48usize];
    ["Alignment of tagMENUBARINFO"][::std::mem::align_of::<tagMENUBARINFO>() - 8usize];
    ["Offset of field: tagMENUBARINFO::cbSize"]
        [::std::mem::offset_of!(tagMENUBARINFO, cbSize) - 0usize];
    ["Offset of field: tagMENUBARINFO::rcBar"]
        [::std::mem::offset_of!(tagMENUBARINFO, rcBar) - 4usize];
    ["Offset of field: tagMENUBARINFO::hMenu"]
        [::std::mem::offset_of!(tagMENUBARINFO, hMenu) - 24usize];
    ["Offset of field: tagMENUBARINFO::hwndMenu"]
        [::std::mem::offset_of!(tagMENUBARINFO, hwndMenu) - 32usize];
};
impl tagMENUBARINFO {
    #[inline]
    pub fn fBarFocused(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fBarFocused(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fBarFocused_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fBarFocused_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fFocused(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_fFocused(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fFocused_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fFocused_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn fUnused(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_fUnused(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn fUnused_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                30u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_fUnused_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                30u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        fBarFocused: BOOL,
        fFocused: BOOL,
        fUnused: BOOL,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let fBarFocused: u32 = unsafe { ::std::mem::transmute(fBarFocused) };
            fBarFocused as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let fFocused: u32 = unsafe { ::std::mem::transmute(fFocused) };
            fFocused as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let fUnused: u32 = unsafe { ::std::mem::transmute(fUnused) };
            fUnused as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type MENUBARINFO = tagMENUBARINFO;
pub type PMENUBARINFO = *mut tagMENUBARINFO;
pub type LPMENUBARINFO = *mut tagMENUBARINFO;
unsafe extern "C" {
    pub fn GetMenuBarInfo(hwnd: HWND, idObject: LONG, idItem: LONG, pmbi: PMENUBARINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSCROLLBARINFO {
    pub cbSize: DWORD,
    pub rcScrollBar: RECT,
    pub dxyLineButton: ::std::os::raw::c_int,
    pub xyThumbTop: ::std::os::raw::c_int,
    pub xyThumbBottom: ::std::os::raw::c_int,
    pub reserved: ::std::os::raw::c_int,
    pub rgstate: [DWORD; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSCROLLBARINFO"][::std::mem::size_of::<tagSCROLLBARINFO>() - 60usize];
    ["Alignment of tagSCROLLBARINFO"][::std::mem::align_of::<tagSCROLLBARINFO>() - 4usize];
    ["Offset of field: tagSCROLLBARINFO::cbSize"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, cbSize) - 0usize];
    ["Offset of field: tagSCROLLBARINFO::rcScrollBar"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, rcScrollBar) - 4usize];
    ["Offset of field: tagSCROLLBARINFO::dxyLineButton"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, dxyLineButton) - 20usize];
    ["Offset of field: tagSCROLLBARINFO::xyThumbTop"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, xyThumbTop) - 24usize];
    ["Offset of field: tagSCROLLBARINFO::xyThumbBottom"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, xyThumbBottom) - 28usize];
    ["Offset of field: tagSCROLLBARINFO::reserved"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, reserved) - 32usize];
    ["Offset of field: tagSCROLLBARINFO::rgstate"]
        [::std::mem::offset_of!(tagSCROLLBARINFO, rgstate) - 36usize];
};
pub type SCROLLBARINFO = tagSCROLLBARINFO;
pub type PSCROLLBARINFO = *mut tagSCROLLBARINFO;
pub type LPSCROLLBARINFO = *mut tagSCROLLBARINFO;
unsafe extern "C" {
    pub fn GetScrollBarInfo(hwnd: HWND, idObject: LONG, psbi: PSCROLLBARINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOMBOBOXINFO {
    pub cbSize: DWORD,
    pub rcItem: RECT,
    pub rcButton: RECT,
    pub stateButton: DWORD,
    pub hwndCombo: HWND,
    pub hwndItem: HWND,
    pub hwndList: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOMBOBOXINFO"][::std::mem::size_of::<tagCOMBOBOXINFO>() - 64usize];
    ["Alignment of tagCOMBOBOXINFO"][::std::mem::align_of::<tagCOMBOBOXINFO>() - 8usize];
    ["Offset of field: tagCOMBOBOXINFO::cbSize"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, cbSize) - 0usize];
    ["Offset of field: tagCOMBOBOXINFO::rcItem"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, rcItem) - 4usize];
    ["Offset of field: tagCOMBOBOXINFO::rcButton"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, rcButton) - 20usize];
    ["Offset of field: tagCOMBOBOXINFO::stateButton"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, stateButton) - 36usize];
    ["Offset of field: tagCOMBOBOXINFO::hwndCombo"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, hwndCombo) - 40usize];
    ["Offset of field: tagCOMBOBOXINFO::hwndItem"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, hwndItem) - 48usize];
    ["Offset of field: tagCOMBOBOXINFO::hwndList"]
        [::std::mem::offset_of!(tagCOMBOBOXINFO, hwndList) - 56usize];
};
pub type COMBOBOXINFO = tagCOMBOBOXINFO;
pub type PCOMBOBOXINFO = *mut tagCOMBOBOXINFO;
pub type LPCOMBOBOXINFO = *mut tagCOMBOBOXINFO;
unsafe extern "C" {
    pub fn GetComboBoxInfo(hwndCombo: HWND, pcbi: PCOMBOBOXINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetAncestor(hwnd: HWND, gaFlags: UINT) -> HWND;
}
unsafe extern "C" {
    pub fn RealChildWindowFromPoint(hwndParent: HWND, ptParentClientCoords: POINT) -> HWND;
}
unsafe extern "C" {
    pub fn RealGetWindowClassA(hwnd: HWND, ptszClassName: LPSTR, cchClassNameMax: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn RealGetWindowClassW(hwnd: HWND, ptszClassName: LPWSTR, cchClassNameMax: UINT) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagALTTABINFO {
    pub cbSize: DWORD,
    pub cItems: ::std::os::raw::c_int,
    pub cColumns: ::std::os::raw::c_int,
    pub cRows: ::std::os::raw::c_int,
    pub iColFocus: ::std::os::raw::c_int,
    pub iRowFocus: ::std::os::raw::c_int,
    pub cxItem: ::std::os::raw::c_int,
    pub cyItem: ::std::os::raw::c_int,
    pub ptStart: POINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagALTTABINFO"][::std::mem::size_of::<tagALTTABINFO>() - 40usize];
    ["Alignment of tagALTTABINFO"][::std::mem::align_of::<tagALTTABINFO>() - 4usize];
    ["Offset of field: tagALTTABINFO::cbSize"]
        [::std::mem::offset_of!(tagALTTABINFO, cbSize) - 0usize];
    ["Offset of field: tagALTTABINFO::cItems"]
        [::std::mem::offset_of!(tagALTTABINFO, cItems) - 4usize];
    ["Offset of field: tagALTTABINFO::cColumns"]
        [::std::mem::offset_of!(tagALTTABINFO, cColumns) - 8usize];
    ["Offset of field: tagALTTABINFO::cRows"]
        [::std::mem::offset_of!(tagALTTABINFO, cRows) - 12usize];
    ["Offset of field: tagALTTABINFO::iColFocus"]
        [::std::mem::offset_of!(tagALTTABINFO, iColFocus) - 16usize];
    ["Offset of field: tagALTTABINFO::iRowFocus"]
        [::std::mem::offset_of!(tagALTTABINFO, iRowFocus) - 20usize];
    ["Offset of field: tagALTTABINFO::cxItem"]
        [::std::mem::offset_of!(tagALTTABINFO, cxItem) - 24usize];
    ["Offset of field: tagALTTABINFO::cyItem"]
        [::std::mem::offset_of!(tagALTTABINFO, cyItem) - 28usize];
    ["Offset of field: tagALTTABINFO::ptStart"]
        [::std::mem::offset_of!(tagALTTABINFO, ptStart) - 32usize];
};
pub type ALTTABINFO = tagALTTABINFO;
pub type PALTTABINFO = *mut tagALTTABINFO;
pub type LPALTTABINFO = *mut tagALTTABINFO;
unsafe extern "C" {
    pub fn GetAltTabInfoA(
        hwnd: HWND,
        iItem: ::std::os::raw::c_int,
        pati: PALTTABINFO,
        pszItemText: LPSTR,
        cchItemText: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetAltTabInfoW(
        hwnd: HWND,
        iItem: ::std::os::raw::c_int,
        pati: PALTTABINFO,
        pszItemText: LPWSTR,
        cchItemText: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetListBoxInfo(hwnd: HWND) -> DWORD;
}
unsafe extern "C" {
    pub fn LockWorkStation() -> BOOL;
}
unsafe extern "C" {
    pub fn UserHandleGrantAccess(hUserHandle: HANDLE, hJob: HANDLE, bGrant: BOOL) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HRAWINPUT__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HRAWINPUT__"][::std::mem::size_of::<HRAWINPUT__>() - 4usize];
    ["Alignment of HRAWINPUT__"][::std::mem::align_of::<HRAWINPUT__>() - 4usize];
    ["Offset of field: HRAWINPUT__::unused"][::std::mem::offset_of!(HRAWINPUT__, unused) - 0usize];
};
pub type HRAWINPUT = *mut HRAWINPUT__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRAWINPUTHEADER {
    pub dwType: DWORD,
    pub dwSize: DWORD,
    pub hDevice: HANDLE,
    pub wParam: WPARAM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWINPUTHEADER"][::std::mem::size_of::<tagRAWINPUTHEADER>() - 24usize];
    ["Alignment of tagRAWINPUTHEADER"][::std::mem::align_of::<tagRAWINPUTHEADER>() - 8usize];
    ["Offset of field: tagRAWINPUTHEADER::dwType"]
        [::std::mem::offset_of!(tagRAWINPUTHEADER, dwType) - 0usize];
    ["Offset of field: tagRAWINPUTHEADER::dwSize"]
        [::std::mem::offset_of!(tagRAWINPUTHEADER, dwSize) - 4usize];
    ["Offset of field: tagRAWINPUTHEADER::hDevice"]
        [::std::mem::offset_of!(tagRAWINPUTHEADER, hDevice) - 8usize];
    ["Offset of field: tagRAWINPUTHEADER::wParam"]
        [::std::mem::offset_of!(tagRAWINPUTHEADER, wParam) - 16usize];
};
pub type RAWINPUTHEADER = tagRAWINPUTHEADER;
pub type PRAWINPUTHEADER = *mut tagRAWINPUTHEADER;
pub type LPRAWINPUTHEADER = *mut tagRAWINPUTHEADER;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagRAWMOUSE {
    pub usFlags: USHORT,
    pub __bindgen_anon_1: tagRAWMOUSE__bindgen_ty_1,
    pub ulRawButtons: ULONG,
    pub lLastX: LONG,
    pub lLastY: LONG,
    pub ulExtraInformation: ULONG,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagRAWMOUSE__bindgen_ty_1 {
    pub ulButtons: ULONG,
    pub __bindgen_anon_1: tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1 {
    pub usButtonFlags: USHORT,
    pub usButtonData: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1::usButtonFlags"]
        [::std::mem::offset_of!(tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1, usButtonFlags) - 0usize];
    ["Offset of field: tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1::usButtonData"]
        [::std::mem::offset_of!(tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1, usButtonData) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWMOUSE__bindgen_ty_1"]
        [::std::mem::size_of::<tagRAWMOUSE__bindgen_ty_1>() - 4usize];
    ["Alignment of tagRAWMOUSE__bindgen_ty_1"]
        [::std::mem::align_of::<tagRAWMOUSE__bindgen_ty_1>() - 4usize];
    ["Offset of field: tagRAWMOUSE__bindgen_ty_1::ulButtons"]
        [::std::mem::offset_of!(tagRAWMOUSE__bindgen_ty_1, ulButtons) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWMOUSE"][::std::mem::size_of::<tagRAWMOUSE>() - 24usize];
    ["Alignment of tagRAWMOUSE"][::std::mem::align_of::<tagRAWMOUSE>() - 4usize];
    ["Offset of field: tagRAWMOUSE::usFlags"]
        [::std::mem::offset_of!(tagRAWMOUSE, usFlags) - 0usize];
    ["Offset of field: tagRAWMOUSE::ulRawButtons"]
        [::std::mem::offset_of!(tagRAWMOUSE, ulRawButtons) - 8usize];
    ["Offset of field: tagRAWMOUSE::lLastX"][::std::mem::offset_of!(tagRAWMOUSE, lLastX) - 12usize];
    ["Offset of field: tagRAWMOUSE::lLastY"][::std::mem::offset_of!(tagRAWMOUSE, lLastY) - 16usize];
    ["Offset of field: tagRAWMOUSE::ulExtraInformation"]
        [::std::mem::offset_of!(tagRAWMOUSE, ulExtraInformation) - 20usize];
};
pub type RAWMOUSE = tagRAWMOUSE;
pub type PRAWMOUSE = *mut tagRAWMOUSE;
pub type LPRAWMOUSE = *mut tagRAWMOUSE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRAWKEYBOARD {
    pub MakeCode: USHORT,
    pub Flags: USHORT,
    pub Reserved: USHORT,
    pub VKey: USHORT,
    pub Message: UINT,
    pub ExtraInformation: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWKEYBOARD"][::std::mem::size_of::<tagRAWKEYBOARD>() - 16usize];
    ["Alignment of tagRAWKEYBOARD"][::std::mem::align_of::<tagRAWKEYBOARD>() - 4usize];
    ["Offset of field: tagRAWKEYBOARD::MakeCode"]
        [::std::mem::offset_of!(tagRAWKEYBOARD, MakeCode) - 0usize];
    ["Offset of field: tagRAWKEYBOARD::Flags"]
        [::std::mem::offset_of!(tagRAWKEYBOARD, Flags) - 2usize];
    ["Offset of field: tagRAWKEYBOARD::Reserved"]
        [::std::mem::offset_of!(tagRAWKEYBOARD, Reserved) - 4usize];
    ["Offset of field: tagRAWKEYBOARD::VKey"]
        [::std::mem::offset_of!(tagRAWKEYBOARD, VKey) - 6usize];
    ["Offset of field: tagRAWKEYBOARD::Message"]
        [::std::mem::offset_of!(tagRAWKEYBOARD, Message) - 8usize];
    ["Offset of field: tagRAWKEYBOARD::ExtraInformation"]
        [::std::mem::offset_of!(tagRAWKEYBOARD, ExtraInformation) - 12usize];
};
pub type RAWKEYBOARD = tagRAWKEYBOARD;
pub type PRAWKEYBOARD = *mut tagRAWKEYBOARD;
pub type LPRAWKEYBOARD = *mut tagRAWKEYBOARD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRAWHID {
    pub dwSizeHid: DWORD,
    pub dwCount: DWORD,
    pub bRawData: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWHID"][::std::mem::size_of::<tagRAWHID>() - 12usize];
    ["Alignment of tagRAWHID"][::std::mem::align_of::<tagRAWHID>() - 4usize];
    ["Offset of field: tagRAWHID::dwSizeHid"]
        [::std::mem::offset_of!(tagRAWHID, dwSizeHid) - 0usize];
    ["Offset of field: tagRAWHID::dwCount"][::std::mem::offset_of!(tagRAWHID, dwCount) - 4usize];
    ["Offset of field: tagRAWHID::bRawData"][::std::mem::offset_of!(tagRAWHID, bRawData) - 8usize];
};
pub type RAWHID = tagRAWHID;
pub type PRAWHID = *mut tagRAWHID;
pub type LPRAWHID = *mut tagRAWHID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagRAWINPUT {
    pub header: RAWINPUTHEADER,
    pub data: tagRAWINPUT__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagRAWINPUT__bindgen_ty_1 {
    pub mouse: RAWMOUSE,
    pub keyboard: RAWKEYBOARD,
    pub hid: RAWHID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWINPUT__bindgen_ty_1"]
        [::std::mem::size_of::<tagRAWINPUT__bindgen_ty_1>() - 24usize];
    ["Alignment of tagRAWINPUT__bindgen_ty_1"]
        [::std::mem::align_of::<tagRAWINPUT__bindgen_ty_1>() - 4usize];
    ["Offset of field: tagRAWINPUT__bindgen_ty_1::mouse"]
        [::std::mem::offset_of!(tagRAWINPUT__bindgen_ty_1, mouse) - 0usize];
    ["Offset of field: tagRAWINPUT__bindgen_ty_1::keyboard"]
        [::std::mem::offset_of!(tagRAWINPUT__bindgen_ty_1, keyboard) - 0usize];
    ["Offset of field: tagRAWINPUT__bindgen_ty_1::hid"]
        [::std::mem::offset_of!(tagRAWINPUT__bindgen_ty_1, hid) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWINPUT"][::std::mem::size_of::<tagRAWINPUT>() - 48usize];
    ["Alignment of tagRAWINPUT"][::std::mem::align_of::<tagRAWINPUT>() - 8usize];
    ["Offset of field: tagRAWINPUT::header"][::std::mem::offset_of!(tagRAWINPUT, header) - 0usize];
    ["Offset of field: tagRAWINPUT::data"][::std::mem::offset_of!(tagRAWINPUT, data) - 24usize];
};
pub type RAWINPUT = tagRAWINPUT;
pub type PRAWINPUT = *mut tagRAWINPUT;
pub type LPRAWINPUT = *mut tagRAWINPUT;
unsafe extern "C" {
    pub fn GetRawInputData(
        hRawInput: HRAWINPUT,
        uiCommand: UINT,
        pData: LPVOID,
        pcbSize: PUINT,
        cbSizeHeader: UINT,
    ) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRID_DEVICE_INFO_MOUSE {
    pub dwId: DWORD,
    pub dwNumberOfButtons: DWORD,
    pub dwSampleRate: DWORD,
    pub fHasHorizontalWheel: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRID_DEVICE_INFO_MOUSE"]
        [::std::mem::size_of::<tagRID_DEVICE_INFO_MOUSE>() - 16usize];
    ["Alignment of tagRID_DEVICE_INFO_MOUSE"]
        [::std::mem::align_of::<tagRID_DEVICE_INFO_MOUSE>() - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO_MOUSE::dwId"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_MOUSE, dwId) - 0usize];
    ["Offset of field: tagRID_DEVICE_INFO_MOUSE::dwNumberOfButtons"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_MOUSE, dwNumberOfButtons) - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO_MOUSE::dwSampleRate"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_MOUSE, dwSampleRate) - 8usize];
    ["Offset of field: tagRID_DEVICE_INFO_MOUSE::fHasHorizontalWheel"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_MOUSE, fHasHorizontalWheel) - 12usize];
};
pub type RID_DEVICE_INFO_MOUSE = tagRID_DEVICE_INFO_MOUSE;
pub type PRID_DEVICE_INFO_MOUSE = *mut tagRID_DEVICE_INFO_MOUSE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRID_DEVICE_INFO_KEYBOARD {
    pub dwType: DWORD,
    pub dwSubType: DWORD,
    pub dwKeyboardMode: DWORD,
    pub dwNumberOfFunctionKeys: DWORD,
    pub dwNumberOfIndicators: DWORD,
    pub dwNumberOfKeysTotal: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRID_DEVICE_INFO_KEYBOARD"]
        [::std::mem::size_of::<tagRID_DEVICE_INFO_KEYBOARD>() - 24usize];
    ["Alignment of tagRID_DEVICE_INFO_KEYBOARD"]
        [::std::mem::align_of::<tagRID_DEVICE_INFO_KEYBOARD>() - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO_KEYBOARD::dwType"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_KEYBOARD, dwType) - 0usize];
    ["Offset of field: tagRID_DEVICE_INFO_KEYBOARD::dwSubType"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_KEYBOARD, dwSubType) - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO_KEYBOARD::dwKeyboardMode"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_KEYBOARD, dwKeyboardMode) - 8usize];
    ["Offset of field: tagRID_DEVICE_INFO_KEYBOARD::dwNumberOfFunctionKeys"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_KEYBOARD, dwNumberOfFunctionKeys) - 12usize];
    ["Offset of field: tagRID_DEVICE_INFO_KEYBOARD::dwNumberOfIndicators"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_KEYBOARD, dwNumberOfIndicators) - 16usize];
    ["Offset of field: tagRID_DEVICE_INFO_KEYBOARD::dwNumberOfKeysTotal"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_KEYBOARD, dwNumberOfKeysTotal) - 20usize];
};
pub type RID_DEVICE_INFO_KEYBOARD = tagRID_DEVICE_INFO_KEYBOARD;
pub type PRID_DEVICE_INFO_KEYBOARD = *mut tagRID_DEVICE_INFO_KEYBOARD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRID_DEVICE_INFO_HID {
    pub dwVendorId: DWORD,
    pub dwProductId: DWORD,
    pub dwVersionNumber: DWORD,
    pub usUsagePage: USHORT,
    pub usUsage: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRID_DEVICE_INFO_HID"][::std::mem::size_of::<tagRID_DEVICE_INFO_HID>() - 16usize];
    ["Alignment of tagRID_DEVICE_INFO_HID"]
        [::std::mem::align_of::<tagRID_DEVICE_INFO_HID>() - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO_HID::dwVendorId"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_HID, dwVendorId) - 0usize];
    ["Offset of field: tagRID_DEVICE_INFO_HID::dwProductId"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_HID, dwProductId) - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO_HID::dwVersionNumber"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_HID, dwVersionNumber) - 8usize];
    ["Offset of field: tagRID_DEVICE_INFO_HID::usUsagePage"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_HID, usUsagePage) - 12usize];
    ["Offset of field: tagRID_DEVICE_INFO_HID::usUsage"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO_HID, usUsage) - 14usize];
};
pub type RID_DEVICE_INFO_HID = tagRID_DEVICE_INFO_HID;
pub type PRID_DEVICE_INFO_HID = *mut tagRID_DEVICE_INFO_HID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tagRID_DEVICE_INFO {
    pub cbSize: DWORD,
    pub dwType: DWORD,
    pub __bindgen_anon_1: tagRID_DEVICE_INFO__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tagRID_DEVICE_INFO__bindgen_ty_1 {
    pub mouse: RID_DEVICE_INFO_MOUSE,
    pub keyboard: RID_DEVICE_INFO_KEYBOARD,
    pub hid: RID_DEVICE_INFO_HID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRID_DEVICE_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<tagRID_DEVICE_INFO__bindgen_ty_1>() - 24usize];
    ["Alignment of tagRID_DEVICE_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<tagRID_DEVICE_INFO__bindgen_ty_1>() - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO__bindgen_ty_1::mouse"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO__bindgen_ty_1, mouse) - 0usize];
    ["Offset of field: tagRID_DEVICE_INFO__bindgen_ty_1::keyboard"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO__bindgen_ty_1, keyboard) - 0usize];
    ["Offset of field: tagRID_DEVICE_INFO__bindgen_ty_1::hid"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO__bindgen_ty_1, hid) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRID_DEVICE_INFO"][::std::mem::size_of::<tagRID_DEVICE_INFO>() - 32usize];
    ["Alignment of tagRID_DEVICE_INFO"][::std::mem::align_of::<tagRID_DEVICE_INFO>() - 4usize];
    ["Offset of field: tagRID_DEVICE_INFO::cbSize"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO, cbSize) - 0usize];
    ["Offset of field: tagRID_DEVICE_INFO::dwType"]
        [::std::mem::offset_of!(tagRID_DEVICE_INFO, dwType) - 4usize];
};
pub type RID_DEVICE_INFO = tagRID_DEVICE_INFO;
pub type PRID_DEVICE_INFO = *mut tagRID_DEVICE_INFO;
pub type LPRID_DEVICE_INFO = *mut tagRID_DEVICE_INFO;
unsafe extern "C" {
    pub fn GetRawInputDeviceInfoA(
        hDevice: HANDLE,
        uiCommand: UINT,
        pData: LPVOID,
        pcbSize: PUINT,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetRawInputDeviceInfoW(
        hDevice: HANDLE,
        uiCommand: UINT,
        pData: LPVOID,
        pcbSize: PUINT,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn GetRawInputBuffer(pData: PRAWINPUT, pcbSize: PUINT, cbSizeHeader: UINT) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRAWINPUTDEVICE {
    pub usUsagePage: USHORT,
    pub usUsage: USHORT,
    pub dwFlags: DWORD,
    pub hwndTarget: HWND,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWINPUTDEVICE"][::std::mem::size_of::<tagRAWINPUTDEVICE>() - 16usize];
    ["Alignment of tagRAWINPUTDEVICE"][::std::mem::align_of::<tagRAWINPUTDEVICE>() - 8usize];
    ["Offset of field: tagRAWINPUTDEVICE::usUsagePage"]
        [::std::mem::offset_of!(tagRAWINPUTDEVICE, usUsagePage) - 0usize];
    ["Offset of field: tagRAWINPUTDEVICE::usUsage"]
        [::std::mem::offset_of!(tagRAWINPUTDEVICE, usUsage) - 2usize];
    ["Offset of field: tagRAWINPUTDEVICE::dwFlags"]
        [::std::mem::offset_of!(tagRAWINPUTDEVICE, dwFlags) - 4usize];
    ["Offset of field: tagRAWINPUTDEVICE::hwndTarget"]
        [::std::mem::offset_of!(tagRAWINPUTDEVICE, hwndTarget) - 8usize];
};
pub type RAWINPUTDEVICE = tagRAWINPUTDEVICE;
pub type PRAWINPUTDEVICE = *mut tagRAWINPUTDEVICE;
pub type LPRAWINPUTDEVICE = *mut tagRAWINPUTDEVICE;
pub type PCRAWINPUTDEVICE = *const RAWINPUTDEVICE;
unsafe extern "C" {
    pub fn RegisterRawInputDevices(
        pRawInputDevices: PCRAWINPUTDEVICE,
        uiNumDevices: UINT,
        cbSize: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetRegisteredRawInputDevices(
        pRawInputDevices: PRAWINPUTDEVICE,
        puiNumDevices: PUINT,
        cbSize: UINT,
    ) -> UINT;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRAWINPUTDEVICELIST {
    pub hDevice: HANDLE,
    pub dwType: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRAWINPUTDEVICELIST"][::std::mem::size_of::<tagRAWINPUTDEVICELIST>() - 16usize];
    ["Alignment of tagRAWINPUTDEVICELIST"]
        [::std::mem::align_of::<tagRAWINPUTDEVICELIST>() - 8usize];
    ["Offset of field: tagRAWINPUTDEVICELIST::hDevice"]
        [::std::mem::offset_of!(tagRAWINPUTDEVICELIST, hDevice) - 0usize];
    ["Offset of field: tagRAWINPUTDEVICELIST::dwType"]
        [::std::mem::offset_of!(tagRAWINPUTDEVICELIST, dwType) - 8usize];
};
pub type RAWINPUTDEVICELIST = tagRAWINPUTDEVICELIST;
pub type PRAWINPUTDEVICELIST = *mut tagRAWINPUTDEVICELIST;
unsafe extern "C" {
    pub fn GetRawInputDeviceList(
        pRawInputDeviceList: PRAWINPUTDEVICELIST,
        puiNumDevices: PUINT,
        cbSize: UINT,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn DefRawInputProc(paRawInput: *mut PRAWINPUT, nInput: INT, cbSizeHeader: UINT) -> LRESULT;
}
pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_INTEGRATED_PEN: tagPOINTER_DEVICE_TYPE = 1;
pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_EXTERNAL_PEN: tagPOINTER_DEVICE_TYPE = 2;
pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_TOUCH: tagPOINTER_DEVICE_TYPE = 3;
pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_TOUCH_PAD: tagPOINTER_DEVICE_TYPE = 4;
pub const tagPOINTER_DEVICE_TYPE_POINTER_DEVICE_TYPE_MAX: tagPOINTER_DEVICE_TYPE = -1;
pub type tagPOINTER_DEVICE_TYPE = ::std::os::raw::c_int;
pub use self::tagPOINTER_DEVICE_TYPE as POINTER_DEVICE_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTER_DEVICE_INFO {
    pub displayOrientation: DWORD,
    pub device: HANDLE,
    pub pointerDeviceType: POINTER_DEVICE_TYPE,
    pub monitor: HMONITOR,
    pub startingCursorId: ULONG,
    pub maxActiveContacts: USHORT,
    pub productString: [WCHAR; 520usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_DEVICE_INFO"][::std::mem::size_of::<tagPOINTER_DEVICE_INFO>() - 1080usize];
    ["Alignment of tagPOINTER_DEVICE_INFO"]
        [::std::mem::align_of::<tagPOINTER_DEVICE_INFO>() - 8usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::displayOrientation"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, displayOrientation) - 0usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::device"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, device) - 8usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::pointerDeviceType"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, pointerDeviceType) - 16usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::monitor"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, monitor) - 24usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::startingCursorId"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, startingCursorId) - 32usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::maxActiveContacts"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, maxActiveContacts) - 36usize];
    ["Offset of field: tagPOINTER_DEVICE_INFO::productString"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_INFO, productString) - 38usize];
};
pub type POINTER_DEVICE_INFO = tagPOINTER_DEVICE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTER_DEVICE_PROPERTY {
    pub logicalMin: INT32,
    pub logicalMax: INT32,
    pub physicalMin: INT32,
    pub physicalMax: INT32,
    pub unit: UINT32,
    pub unitExponent: UINT32,
    pub usagePageId: USHORT,
    pub usageId: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_DEVICE_PROPERTY"]
        [::std::mem::size_of::<tagPOINTER_DEVICE_PROPERTY>() - 28usize];
    ["Alignment of tagPOINTER_DEVICE_PROPERTY"]
        [::std::mem::align_of::<tagPOINTER_DEVICE_PROPERTY>() - 4usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::logicalMin"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, logicalMin) - 0usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::logicalMax"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, logicalMax) - 4usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::physicalMin"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, physicalMin) - 8usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::physicalMax"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, physicalMax) - 12usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::unit"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, unit) - 16usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::unitExponent"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, unitExponent) - 20usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::usagePageId"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, usagePageId) - 24usize];
    ["Offset of field: tagPOINTER_DEVICE_PROPERTY::usageId"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_PROPERTY, usageId) - 26usize];
};
pub type POINTER_DEVICE_PROPERTY = tagPOINTER_DEVICE_PROPERTY;
pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_UNKNOWN:
    tagPOINTER_DEVICE_CURSOR_TYPE = 0;
pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_TIP:
    tagPOINTER_DEVICE_CURSOR_TYPE = 1;
pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_ERASER:
    tagPOINTER_DEVICE_CURSOR_TYPE = 2;
pub const tagPOINTER_DEVICE_CURSOR_TYPE_POINTER_DEVICE_CURSOR_TYPE_MAX:
    tagPOINTER_DEVICE_CURSOR_TYPE = -1;
pub type tagPOINTER_DEVICE_CURSOR_TYPE = ::std::os::raw::c_int;
pub use self::tagPOINTER_DEVICE_CURSOR_TYPE as POINTER_DEVICE_CURSOR_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagPOINTER_DEVICE_CURSOR_INFO {
    pub cursorId: UINT32,
    pub cursor: POINTER_DEVICE_CURSOR_TYPE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagPOINTER_DEVICE_CURSOR_INFO"]
        [::std::mem::size_of::<tagPOINTER_DEVICE_CURSOR_INFO>() - 8usize];
    ["Alignment of tagPOINTER_DEVICE_CURSOR_INFO"]
        [::std::mem::align_of::<tagPOINTER_DEVICE_CURSOR_INFO>() - 4usize];
    ["Offset of field: tagPOINTER_DEVICE_CURSOR_INFO::cursorId"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_CURSOR_INFO, cursorId) - 0usize];
    ["Offset of field: tagPOINTER_DEVICE_CURSOR_INFO::cursor"]
        [::std::mem::offset_of!(tagPOINTER_DEVICE_CURSOR_INFO, cursor) - 4usize];
};
pub type POINTER_DEVICE_CURSOR_INFO = tagPOINTER_DEVICE_CURSOR_INFO;
unsafe extern "C" {
    pub fn GetPointerDevices(
        deviceCount: *mut UINT32,
        pointerDevices: *mut POINTER_DEVICE_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerDevice(device: HANDLE, pointerDevice: *mut POINTER_DEVICE_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerDeviceProperties(
        device: HANDLE,
        propertyCount: *mut UINT32,
        pointerProperties: *mut POINTER_DEVICE_PROPERTY,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterPointerDeviceNotifications(window: HWND, notifyRange: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerDeviceRects(
        device: HANDLE,
        pointerDeviceRect: *mut RECT,
        displayRect: *mut RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetPointerDeviceCursors(
        device: HANDLE,
        cursorCount: *mut UINT32,
        deviceCursors: *mut POINTER_DEVICE_CURSOR_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetRawPointerDeviceData(
        pointerId: UINT32,
        historyCount: UINT32,
        propertiesCount: UINT32,
        pProperties: *mut POINTER_DEVICE_PROPERTY,
        pValues: *mut LONG,
    ) -> BOOL;
}
pub const LEGACY_TOUCHPAD_FEATURES_LEGACY_TOUCHPAD_FEATURE_NONE: LEGACY_TOUCHPAD_FEATURES = 0;
pub const LEGACY_TOUCHPAD_FEATURES_LEGACY_TOUCHPAD_FEATURE_ENABLE_DISABLE:
    LEGACY_TOUCHPAD_FEATURES = 1;
pub const LEGACY_TOUCHPAD_FEATURES_LEGACY_TOUCHPAD_FEATURE_REVERSE_SCROLL_DIRECTION:
    LEGACY_TOUCHPAD_FEATURES = 4;
pub type LEGACY_TOUCHPAD_FEATURES = ::std::os::raw::c_int;
pub const TOUCHPAD_SENSITIVITY_LEVEL_TOUCHPAD_SENSITIVITY_LEVEL_MOST_SENSITIVE:
    TOUCHPAD_SENSITIVITY_LEVEL = 0;
pub const TOUCHPAD_SENSITIVITY_LEVEL_TOUCHPAD_SENSITIVITY_LEVEL_HIGH_SENSITIVITY:
    TOUCHPAD_SENSITIVITY_LEVEL = 1;
pub const TOUCHPAD_SENSITIVITY_LEVEL_TOUCHPAD_SENSITIVITY_LEVEL_MEDIUM_SENSITIVITY:
    TOUCHPAD_SENSITIVITY_LEVEL = 2;
pub const TOUCHPAD_SENSITIVITY_LEVEL_TOUCHPAD_SENSITIVITY_LEVEL_LOW_SENSITIVITY:
    TOUCHPAD_SENSITIVITY_LEVEL = 3;
pub const TOUCHPAD_SENSITIVITY_LEVEL_TOUCHPAD_SENSITIVITY_LEVEL_LEAST_SENSITIVE:
    TOUCHPAD_SENSITIVITY_LEVEL = 4;
pub type TOUCHPAD_SENSITIVITY_LEVEL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TOUCHPAD_PARAMETERS {
    pub versionNumber: UINT,
    pub maxSupportedContacts: UINT,
    pub legacyTouchpadFeatures: LEGACY_TOUCHPAD_FEATURES,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub sensitivityLevel: TOUCHPAD_SENSITIVITY_LEVEL,
    pub cursorSpeed: UINT,
    pub feedbackIntensity: UINT,
    pub clickForceSensitivity: UINT,
    pub rightClickZoneWidth: UINT,
    pub rightClickZoneHeight: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TOUCHPAD_PARAMETERS"][::std::mem::size_of::<TOUCHPAD_PARAMETERS>() - 44usize];
    ["Alignment of TOUCHPAD_PARAMETERS"][::std::mem::align_of::<TOUCHPAD_PARAMETERS>() - 4usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::versionNumber"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, versionNumber) - 0usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::maxSupportedContacts"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, maxSupportedContacts) - 4usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::legacyTouchpadFeatures"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, legacyTouchpadFeatures) - 8usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::sensitivityLevel"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, sensitivityLevel) - 20usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::cursorSpeed"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, cursorSpeed) - 24usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::feedbackIntensity"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, feedbackIntensity) - 28usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::clickForceSensitivity"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, clickForceSensitivity) - 32usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::rightClickZoneWidth"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, rightClickZoneWidth) - 36usize];
    ["Offset of field: TOUCHPAD_PARAMETERS::rightClickZoneHeight"]
        [::std::mem::offset_of!(TOUCHPAD_PARAMETERS, rightClickZoneHeight) - 40usize];
};
impl TOUCHPAD_PARAMETERS {
    #[inline]
    pub fn touchpadPresent(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_touchpadPresent(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn touchpadPresent_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_touchpadPresent_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn legacyTouchpadPresent(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_legacyTouchpadPresent(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn legacyTouchpadPresent_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_legacyTouchpadPresent_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn externalMousePresent(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_externalMousePresent(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn externalMousePresent_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_externalMousePresent_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn touchpadEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_touchpadEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn touchpadEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_touchpadEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn touchpadActive(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_touchpadActive(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn touchpadActive_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_touchpadActive_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn feedbackSupported(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_feedbackSupported(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn feedbackSupported_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_feedbackSupported_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn clickForceSupported(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_clickForceSupported(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn clickForceSupported_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                6usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_clickForceSupported_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                6usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved1(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 25u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved1(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 25u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved1_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                7usize,
                25u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved1_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                7usize,
                25u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn allowActiveWhenMousePresent(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_allowActiveWhenMousePresent(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn allowActiveWhenMousePresent_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                32usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_allowActiveWhenMousePresent_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                32usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn feedbackEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_feedbackEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn feedbackEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                33usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_feedbackEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                33usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tapEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(34usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tapEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(34usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tapEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                34usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tapEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                34usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn tapAndDragEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(35usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tapAndDragEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(35usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn tapAndDragEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                35usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_tapAndDragEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                35usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn twoFingerTapEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_twoFingerTapEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn twoFingerTapEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                36usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_twoFingerTapEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                36usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn rightClickZoneEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_rightClickZoneEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn rightClickZoneEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                37usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_rightClickZoneEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                37usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn mouseAccelSettingHonored(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(38usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mouseAccelSettingHonored(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(38usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mouseAccelSettingHonored_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                38usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_mouseAccelSettingHonored_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                38usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn panEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(39usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_panEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(39usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn panEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                39usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_panEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                39usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn zoomEnabled(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(40usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_zoomEnabled(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(40usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn zoomEnabled_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                40usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_zoomEnabled_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                40usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn scrollDirectionReversed(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(41usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scrollDirectionReversed(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(41usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn scrollDirectionReversed_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                41usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_scrollDirectionReversed_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                41usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Reserved2(&self) -> BOOL {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(42usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_Reserved2(&mut self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(42usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Reserved2_raw(this: *const Self) -> BOOL {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 8usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                42usize,
                22u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Reserved2_raw(this: *mut Self, val: BOOL) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 8usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                42usize,
                22u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        touchpadPresent: BOOL,
        legacyTouchpadPresent: BOOL,
        externalMousePresent: BOOL,
        touchpadEnabled: BOOL,
        touchpadActive: BOOL,
        feedbackSupported: BOOL,
        clickForceSupported: BOOL,
        Reserved1: BOOL,
        allowActiveWhenMousePresent: BOOL,
        feedbackEnabled: BOOL,
        tapEnabled: BOOL,
        tapAndDragEnabled: BOOL,
        twoFingerTapEnabled: BOOL,
        rightClickZoneEnabled: BOOL,
        mouseAccelSettingHonored: BOOL,
        panEnabled: BOOL,
        zoomEnabled: BOOL,
        scrollDirectionReversed: BOOL,
        Reserved2: BOOL,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let touchpadPresent: u32 = unsafe { ::std::mem::transmute(touchpadPresent) };
            touchpadPresent as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let legacyTouchpadPresent: u32 =
                unsafe { ::std::mem::transmute(legacyTouchpadPresent) };
            legacyTouchpadPresent as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let externalMousePresent: u32 = unsafe { ::std::mem::transmute(externalMousePresent) };
            externalMousePresent as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let touchpadEnabled: u32 = unsafe { ::std::mem::transmute(touchpadEnabled) };
            touchpadEnabled as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let touchpadActive: u32 = unsafe { ::std::mem::transmute(touchpadActive) };
            touchpadActive as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let feedbackSupported: u32 = unsafe { ::std::mem::transmute(feedbackSupported) };
            feedbackSupported as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let clickForceSupported: u32 = unsafe { ::std::mem::transmute(clickForceSupported) };
            clickForceSupported as u64
        });
        __bindgen_bitfield_unit.set(7usize, 25u8, {
            let Reserved1: u32 = unsafe { ::std::mem::transmute(Reserved1) };
            Reserved1 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let allowActiveWhenMousePresent: u32 =
                unsafe { ::std::mem::transmute(allowActiveWhenMousePresent) };
            allowActiveWhenMousePresent as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let feedbackEnabled: u32 = unsafe { ::std::mem::transmute(feedbackEnabled) };
            feedbackEnabled as u64
        });
        __bindgen_bitfield_unit.set(34usize, 1u8, {
            let tapEnabled: u32 = unsafe { ::std::mem::transmute(tapEnabled) };
            tapEnabled as u64
        });
        __bindgen_bitfield_unit.set(35usize, 1u8, {
            let tapAndDragEnabled: u32 = unsafe { ::std::mem::transmute(tapAndDragEnabled) };
            tapAndDragEnabled as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let twoFingerTapEnabled: u32 = unsafe { ::std::mem::transmute(twoFingerTapEnabled) };
            twoFingerTapEnabled as u64
        });
        __bindgen_bitfield_unit.set(37usize, 1u8, {
            let rightClickZoneEnabled: u32 =
                unsafe { ::std::mem::transmute(rightClickZoneEnabled) };
            rightClickZoneEnabled as u64
        });
        __bindgen_bitfield_unit.set(38usize, 1u8, {
            let mouseAccelSettingHonored: u32 =
                unsafe { ::std::mem::transmute(mouseAccelSettingHonored) };
            mouseAccelSettingHonored as u64
        });
        __bindgen_bitfield_unit.set(39usize, 1u8, {
            let panEnabled: u32 = unsafe { ::std::mem::transmute(panEnabled) };
            panEnabled as u64
        });
        __bindgen_bitfield_unit.set(40usize, 1u8, {
            let zoomEnabled: u32 = unsafe { ::std::mem::transmute(zoomEnabled) };
            zoomEnabled as u64
        });
        __bindgen_bitfield_unit.set(41usize, 1u8, {
            let scrollDirectionReversed: u32 =
                unsafe { ::std::mem::transmute(scrollDirectionReversed) };
            scrollDirectionReversed as u64
        });
        __bindgen_bitfield_unit.set(42usize, 22u8, {
            let Reserved2: u32 = unsafe { ::std::mem::transmute(Reserved2) };
            Reserved2 as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type PTOUCH_PAD_PARAMETERS = *mut TOUCHPAD_PARAMETERS;
pub type TOUCHPAD_PARAMETERS_V1 = TOUCHPAD_PARAMETERS;
pub type PTOUCHPAD_PARAMETERS_V1 = *mut TOUCHPAD_PARAMETERS;
unsafe extern "C" {
    pub fn ChangeWindowMessageFilter(message: UINT, dwFlag: DWORD) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCHANGEFILTERSTRUCT {
    pub cbSize: DWORD,
    pub ExtStatus: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCHANGEFILTERSTRUCT"][::std::mem::size_of::<tagCHANGEFILTERSTRUCT>() - 8usize];
    ["Alignment of tagCHANGEFILTERSTRUCT"]
        [::std::mem::align_of::<tagCHANGEFILTERSTRUCT>() - 4usize];
    ["Offset of field: tagCHANGEFILTERSTRUCT::cbSize"]
        [::std::mem::offset_of!(tagCHANGEFILTERSTRUCT, cbSize) - 0usize];
    ["Offset of field: tagCHANGEFILTERSTRUCT::ExtStatus"]
        [::std::mem::offset_of!(tagCHANGEFILTERSTRUCT, ExtStatus) - 4usize];
};
pub type CHANGEFILTERSTRUCT = tagCHANGEFILTERSTRUCT;
pub type PCHANGEFILTERSTRUCT = *mut tagCHANGEFILTERSTRUCT;
unsafe extern "C" {
    pub fn ChangeWindowMessageFilterEx(
        hwnd: HWND,
        message: UINT,
        action: DWORD,
        pChangeFilterStruct: PCHANGEFILTERSTRUCT,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HGESTUREINFO__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HGESTUREINFO__"][::std::mem::size_of::<HGESTUREINFO__>() - 4usize];
    ["Alignment of HGESTUREINFO__"][::std::mem::align_of::<HGESTUREINFO__>() - 4usize];
    ["Offset of field: HGESTUREINFO__::unused"]
        [::std::mem::offset_of!(HGESTUREINFO__, unused) - 0usize];
};
pub type HGESTUREINFO = *mut HGESTUREINFO__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGESTUREINFO {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub dwID: DWORD,
    pub hwndTarget: HWND,
    pub ptsLocation: POINTS,
    pub dwInstanceID: DWORD,
    pub dwSequenceID: DWORD,
    pub ullArguments: ULONGLONG,
    pub cbExtraArgs: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGESTUREINFO"][::std::mem::size_of::<tagGESTUREINFO>() - 56usize];
    ["Alignment of tagGESTUREINFO"][::std::mem::align_of::<tagGESTUREINFO>() - 8usize];
    ["Offset of field: tagGESTUREINFO::cbSize"]
        [::std::mem::offset_of!(tagGESTUREINFO, cbSize) - 0usize];
    ["Offset of field: tagGESTUREINFO::dwFlags"]
        [::std::mem::offset_of!(tagGESTUREINFO, dwFlags) - 4usize];
    ["Offset of field: tagGESTUREINFO::dwID"]
        [::std::mem::offset_of!(tagGESTUREINFO, dwID) - 8usize];
    ["Offset of field: tagGESTUREINFO::hwndTarget"]
        [::std::mem::offset_of!(tagGESTUREINFO, hwndTarget) - 16usize];
    ["Offset of field: tagGESTUREINFO::ptsLocation"]
        [::std::mem::offset_of!(tagGESTUREINFO, ptsLocation) - 24usize];
    ["Offset of field: tagGESTUREINFO::dwInstanceID"]
        [::std::mem::offset_of!(tagGESTUREINFO, dwInstanceID) - 28usize];
    ["Offset of field: tagGESTUREINFO::dwSequenceID"]
        [::std::mem::offset_of!(tagGESTUREINFO, dwSequenceID) - 32usize];
    ["Offset of field: tagGESTUREINFO::ullArguments"]
        [::std::mem::offset_of!(tagGESTUREINFO, ullArguments) - 40usize];
    ["Offset of field: tagGESTUREINFO::cbExtraArgs"]
        [::std::mem::offset_of!(tagGESTUREINFO, cbExtraArgs) - 48usize];
};
pub type GESTUREINFO = tagGESTUREINFO;
pub type PGESTUREINFO = *mut tagGESTUREINFO;
pub type PCGESTUREINFO = *const GESTUREINFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGESTURENOTIFYSTRUCT {
    pub cbSize: UINT,
    pub dwFlags: DWORD,
    pub hwndTarget: HWND,
    pub ptsLocation: POINTS,
    pub dwInstanceID: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGESTURENOTIFYSTRUCT"][::std::mem::size_of::<tagGESTURENOTIFYSTRUCT>() - 24usize];
    ["Alignment of tagGESTURENOTIFYSTRUCT"]
        [::std::mem::align_of::<tagGESTURENOTIFYSTRUCT>() - 8usize];
    ["Offset of field: tagGESTURENOTIFYSTRUCT::cbSize"]
        [::std::mem::offset_of!(tagGESTURENOTIFYSTRUCT, cbSize) - 0usize];
    ["Offset of field: tagGESTURENOTIFYSTRUCT::dwFlags"]
        [::std::mem::offset_of!(tagGESTURENOTIFYSTRUCT, dwFlags) - 4usize];
    ["Offset of field: tagGESTURENOTIFYSTRUCT::hwndTarget"]
        [::std::mem::offset_of!(tagGESTURENOTIFYSTRUCT, hwndTarget) - 8usize];
    ["Offset of field: tagGESTURENOTIFYSTRUCT::ptsLocation"]
        [::std::mem::offset_of!(tagGESTURENOTIFYSTRUCT, ptsLocation) - 16usize];
    ["Offset of field: tagGESTURENOTIFYSTRUCT::dwInstanceID"]
        [::std::mem::offset_of!(tagGESTURENOTIFYSTRUCT, dwInstanceID) - 20usize];
};
pub type GESTURENOTIFYSTRUCT = tagGESTURENOTIFYSTRUCT;
pub type PGESTURENOTIFYSTRUCT = *mut tagGESTURENOTIFYSTRUCT;
unsafe extern "C" {
    pub fn GetGestureInfo(hGestureInfo: HGESTUREINFO, pGestureInfo: PGESTUREINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetGestureExtraArgs(
        hGestureInfo: HGESTUREINFO,
        cbExtraArgs: UINT,
        pExtraArgs: PBYTE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseGestureInfoHandle(hGestureInfo: HGESTUREINFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagGESTURECONFIG {
    pub dwID: DWORD,
    pub dwWant: DWORD,
    pub dwBlock: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagGESTURECONFIG"][::std::mem::size_of::<tagGESTURECONFIG>() - 12usize];
    ["Alignment of tagGESTURECONFIG"][::std::mem::align_of::<tagGESTURECONFIG>() - 4usize];
    ["Offset of field: tagGESTURECONFIG::dwID"]
        [::std::mem::offset_of!(tagGESTURECONFIG, dwID) - 0usize];
    ["Offset of field: tagGESTURECONFIG::dwWant"]
        [::std::mem::offset_of!(tagGESTURECONFIG, dwWant) - 4usize];
    ["Offset of field: tagGESTURECONFIG::dwBlock"]
        [::std::mem::offset_of!(tagGESTURECONFIG, dwBlock) - 8usize];
};
pub type GESTURECONFIG = tagGESTURECONFIG;
pub type PGESTURECONFIG = *mut tagGESTURECONFIG;
unsafe extern "C" {
    pub fn SetGestureConfig(
        hwnd: HWND,
        dwReserved: DWORD,
        cIDs: UINT,
        pGestureConfig: PGESTURECONFIG,
        cbSize: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetGestureConfig(
        hwnd: HWND,
        dwReserved: DWORD,
        dwFlags: DWORD,
        pcIDs: PUINT,
        pGestureConfig: PGESTURECONFIG,
        cbSize: UINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ShutdownBlockReasonCreate(hWnd: HWND, pwszReason: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn ShutdownBlockReasonQuery(hWnd: HWND, pwszBuff: LPWSTR, pcchBuff: *mut DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ShutdownBlockReasonDestroy(hWnd: HWND) -> BOOL;
}
pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_UNAVAILABLE: tagINPUT_MESSAGE_DEVICE_TYPE = 0;
pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_KEYBOARD: tagINPUT_MESSAGE_DEVICE_TYPE = 1;
pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_MOUSE: tagINPUT_MESSAGE_DEVICE_TYPE = 2;
pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_TOUCH: tagINPUT_MESSAGE_DEVICE_TYPE = 4;
pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_PEN: tagINPUT_MESSAGE_DEVICE_TYPE = 8;
pub const tagINPUT_MESSAGE_DEVICE_TYPE_IMDT_TOUCHPAD: tagINPUT_MESSAGE_DEVICE_TYPE = 16;
pub type tagINPUT_MESSAGE_DEVICE_TYPE = ::std::os::raw::c_int;
pub use self::tagINPUT_MESSAGE_DEVICE_TYPE as INPUT_MESSAGE_DEVICE_TYPE;
pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_UNAVAILABLE: tagINPUT_MESSAGE_ORIGIN_ID = 0;
pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_HARDWARE: tagINPUT_MESSAGE_ORIGIN_ID = 1;
pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_INJECTED: tagINPUT_MESSAGE_ORIGIN_ID = 2;
pub const tagINPUT_MESSAGE_ORIGIN_ID_IMO_SYSTEM: tagINPUT_MESSAGE_ORIGIN_ID = 4;
pub type tagINPUT_MESSAGE_ORIGIN_ID = ::std::os::raw::c_int;
pub use self::tagINPUT_MESSAGE_ORIGIN_ID as INPUT_MESSAGE_ORIGIN_ID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagINPUT_MESSAGE_SOURCE {
    pub deviceType: INPUT_MESSAGE_DEVICE_TYPE,
    pub originId: INPUT_MESSAGE_ORIGIN_ID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagINPUT_MESSAGE_SOURCE"][::std::mem::size_of::<tagINPUT_MESSAGE_SOURCE>() - 8usize];
    ["Alignment of tagINPUT_MESSAGE_SOURCE"]
        [::std::mem::align_of::<tagINPUT_MESSAGE_SOURCE>() - 4usize];
    ["Offset of field: tagINPUT_MESSAGE_SOURCE::deviceType"]
        [::std::mem::offset_of!(tagINPUT_MESSAGE_SOURCE, deviceType) - 0usize];
    ["Offset of field: tagINPUT_MESSAGE_SOURCE::originId"]
        [::std::mem::offset_of!(tagINPUT_MESSAGE_SOURCE, originId) - 4usize];
};
pub type INPUT_MESSAGE_SOURCE = tagINPUT_MESSAGE_SOURCE;
unsafe extern "C" {
    pub fn GetCurrentInputMessageSource(inputMessageSource: *mut INPUT_MESSAGE_SOURCE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCIMSSM(inputMessageSource: *mut INPUT_MESSAGE_SOURCE) -> BOOL;
}
pub const tagAR_STATE_AR_ENABLED: tagAR_STATE = 0;
pub const tagAR_STATE_AR_DISABLED: tagAR_STATE = 1;
pub const tagAR_STATE_AR_SUPPRESSED: tagAR_STATE = 2;
pub const tagAR_STATE_AR_REMOTESESSION: tagAR_STATE = 4;
pub const tagAR_STATE_AR_MULTIMON: tagAR_STATE = 8;
pub const tagAR_STATE_AR_NOSENSOR: tagAR_STATE = 16;
pub const tagAR_STATE_AR_NOT_SUPPORTED: tagAR_STATE = 32;
pub const tagAR_STATE_AR_DOCKED: tagAR_STATE = 64;
pub const tagAR_STATE_AR_LAPTOP: tagAR_STATE = 128;
pub type tagAR_STATE = ::std::os::raw::c_int;
pub use self::tagAR_STATE as AR_STATE;
pub type PAR_STATE = *mut tagAR_STATE;
pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_NONE: ORIENTATION_PREFERENCE = 0;
pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_LANDSCAPE: ORIENTATION_PREFERENCE = 1;
pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_PORTRAIT: ORIENTATION_PREFERENCE = 2;
pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED: ORIENTATION_PREFERENCE =
    4;
pub const ORIENTATION_PREFERENCE_ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED: ORIENTATION_PREFERENCE =
    8;
pub type ORIENTATION_PREFERENCE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn GetAutoRotationState(pState: PAR_STATE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDisplayAutoRotationPreferences(pOrientation: *mut ORIENTATION_PREFERENCE) -> BOOL;
}
unsafe extern "C" {
    pub fn GetDisplayAutoRotationPreferencesByProcessId(
        dwProcessId: DWORD,
        pOrientation: *mut ORIENTATION_PREFERENCE,
        fRotateScreen: *mut BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetDisplayAutoRotationPreferences(orientation: ORIENTATION_PREFERENCE) -> BOOL;
}
unsafe extern "C" {
    pub fn IsImmersiveProcess(hProcess: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessRestrictionExemption(fEnableExemption: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn SetAdditionalForegroundBoostProcesses(
        topLevelWindow: HWND,
        processHandleCount: DWORD,
        processHandleArray: *mut HANDLE,
    ) -> BOOL;
}
pub const TOOLTIP_DISMISS_FLAGS_TDF_REGISTER: TOOLTIP_DISMISS_FLAGS = 1;
pub const TOOLTIP_DISMISS_FLAGS_TDF_UNREGISTER: TOOLTIP_DISMISS_FLAGS = 2;
pub type TOOLTIP_DISMISS_FLAGS = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn RegisterForTooltipDismissNotification(
        hWnd: HWND,
        tdFlags: TOOLTIP_DISMISS_FLAGS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsWindowArranged(hwnd: HWND) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCurrentMonitorTopologyId() -> UINT;
}
unsafe extern "C" {
    pub fn GetDateFormatA(
        Locale: LCID,
        dwFlags: DWORD,
        lpDate: *const SYSTEMTIME,
        lpFormat: LPCSTR,
        lpDateStr: LPSTR,
        cchDate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetDateFormatW(
        Locale: LCID,
        dwFlags: DWORD,
        lpDate: *const SYSTEMTIME,
        lpFormat: LPCWSTR,
        lpDateStr: LPWSTR,
        cchDate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTimeFormatA(
        Locale: LCID,
        dwFlags: DWORD,
        lpTime: *const SYSTEMTIME,
        lpFormat: LPCSTR,
        lpTimeStr: LPSTR,
        cchTime: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTimeFormatW(
        Locale: LCID,
        dwFlags: DWORD,
        lpTime: *const SYSTEMTIME,
        lpFormat: LPCWSTR,
        lpTimeStr: LPWSTR,
        cchTime: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetTimeFormatEx(
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lpTime: *const SYSTEMTIME,
        lpFormat: LPCWSTR,
        lpTimeStr: LPWSTR,
        cchTime: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetDateFormatEx(
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lpDate: *const SYSTEMTIME,
        lpFormat: LPCWSTR,
        lpDateStr: LPWSTR,
        cchDate: ::std::os::raw::c_int,
        lpCalendar: LPCWSTR,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetDurationFormatEx(
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lpDuration: *const SYSTEMTIME,
        ullDuration: ULONGLONG,
        lpFormat: LPCWSTR,
        lpDurationStr: LPWSTR,
        cchDuration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type LGRPID = DWORD;
pub type LCTYPE = DWORD;
pub type CALTYPE = DWORD;
pub type CALID = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpinfo {
    pub MaxCharSize: UINT,
    pub DefaultChar: [BYTE; 2usize],
    pub LeadByte: [BYTE; 12usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cpinfo"][::std::mem::size_of::<_cpinfo>() - 20usize];
    ["Alignment of _cpinfo"][::std::mem::align_of::<_cpinfo>() - 4usize];
    ["Offset of field: _cpinfo::MaxCharSize"]
        [::std::mem::offset_of!(_cpinfo, MaxCharSize) - 0usize];
    ["Offset of field: _cpinfo::DefaultChar"]
        [::std::mem::offset_of!(_cpinfo, DefaultChar) - 4usize];
    ["Offset of field: _cpinfo::LeadByte"][::std::mem::offset_of!(_cpinfo, LeadByte) - 6usize];
};
pub type CPINFO = _cpinfo;
pub type LPCPINFO = *mut _cpinfo;
pub type GEOTYPE = DWORD;
pub type GEOCLASS = DWORD;
pub type GEOID = LONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpinfoexA {
    pub MaxCharSize: UINT,
    pub DefaultChar: [BYTE; 2usize],
    pub LeadByte: [BYTE; 12usize],
    pub UnicodeDefaultChar: WCHAR,
    pub CodePage: UINT,
    pub CodePageName: [CHAR; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cpinfoexA"][::std::mem::size_of::<_cpinfoexA>() - 284usize];
    ["Alignment of _cpinfoexA"][::std::mem::align_of::<_cpinfoexA>() - 4usize];
    ["Offset of field: _cpinfoexA::MaxCharSize"]
        [::std::mem::offset_of!(_cpinfoexA, MaxCharSize) - 0usize];
    ["Offset of field: _cpinfoexA::DefaultChar"]
        [::std::mem::offset_of!(_cpinfoexA, DefaultChar) - 4usize];
    ["Offset of field: _cpinfoexA::LeadByte"]
        [::std::mem::offset_of!(_cpinfoexA, LeadByte) - 6usize];
    ["Offset of field: _cpinfoexA::UnicodeDefaultChar"]
        [::std::mem::offset_of!(_cpinfoexA, UnicodeDefaultChar) - 18usize];
    ["Offset of field: _cpinfoexA::CodePage"]
        [::std::mem::offset_of!(_cpinfoexA, CodePage) - 20usize];
    ["Offset of field: _cpinfoexA::CodePageName"]
        [::std::mem::offset_of!(_cpinfoexA, CodePageName) - 24usize];
};
pub type CPINFOEXA = _cpinfoexA;
pub type LPCPINFOEXA = *mut _cpinfoexA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cpinfoexW {
    pub MaxCharSize: UINT,
    pub DefaultChar: [BYTE; 2usize],
    pub LeadByte: [BYTE; 12usize],
    pub UnicodeDefaultChar: WCHAR,
    pub CodePage: UINT,
    pub CodePageName: [WCHAR; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _cpinfoexW"][::std::mem::size_of::<_cpinfoexW>() - 544usize];
    ["Alignment of _cpinfoexW"][::std::mem::align_of::<_cpinfoexW>() - 4usize];
    ["Offset of field: _cpinfoexW::MaxCharSize"]
        [::std::mem::offset_of!(_cpinfoexW, MaxCharSize) - 0usize];
    ["Offset of field: _cpinfoexW::DefaultChar"]
        [::std::mem::offset_of!(_cpinfoexW, DefaultChar) - 4usize];
    ["Offset of field: _cpinfoexW::LeadByte"]
        [::std::mem::offset_of!(_cpinfoexW, LeadByte) - 6usize];
    ["Offset of field: _cpinfoexW::UnicodeDefaultChar"]
        [::std::mem::offset_of!(_cpinfoexW, UnicodeDefaultChar) - 18usize];
    ["Offset of field: _cpinfoexW::CodePage"]
        [::std::mem::offset_of!(_cpinfoexW, CodePage) - 20usize];
    ["Offset of field: _cpinfoexW::CodePageName"]
        [::std::mem::offset_of!(_cpinfoexW, CodePageName) - 24usize];
};
pub type CPINFOEXW = _cpinfoexW;
pub type LPCPINFOEXW = *mut _cpinfoexW;
pub type CPINFOEX = CPINFOEXA;
pub type LPCPINFOEX = LPCPINFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _numberfmtA {
    pub NumDigits: UINT,
    pub LeadingZero: UINT,
    pub Grouping: UINT,
    pub lpDecimalSep: LPSTR,
    pub lpThousandSep: LPSTR,
    pub NegativeOrder: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _numberfmtA"][::std::mem::size_of::<_numberfmtA>() - 40usize];
    ["Alignment of _numberfmtA"][::std::mem::align_of::<_numberfmtA>() - 8usize];
    ["Offset of field: _numberfmtA::NumDigits"]
        [::std::mem::offset_of!(_numberfmtA, NumDigits) - 0usize];
    ["Offset of field: _numberfmtA::LeadingZero"]
        [::std::mem::offset_of!(_numberfmtA, LeadingZero) - 4usize];
    ["Offset of field: _numberfmtA::Grouping"]
        [::std::mem::offset_of!(_numberfmtA, Grouping) - 8usize];
    ["Offset of field: _numberfmtA::lpDecimalSep"]
        [::std::mem::offset_of!(_numberfmtA, lpDecimalSep) - 16usize];
    ["Offset of field: _numberfmtA::lpThousandSep"]
        [::std::mem::offset_of!(_numberfmtA, lpThousandSep) - 24usize];
    ["Offset of field: _numberfmtA::NegativeOrder"]
        [::std::mem::offset_of!(_numberfmtA, NegativeOrder) - 32usize];
};
pub type NUMBERFMTA = _numberfmtA;
pub type LPNUMBERFMTA = *mut _numberfmtA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _numberfmtW {
    pub NumDigits: UINT,
    pub LeadingZero: UINT,
    pub Grouping: UINT,
    pub lpDecimalSep: LPWSTR,
    pub lpThousandSep: LPWSTR,
    pub NegativeOrder: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _numberfmtW"][::std::mem::size_of::<_numberfmtW>() - 40usize];
    ["Alignment of _numberfmtW"][::std::mem::align_of::<_numberfmtW>() - 8usize];
    ["Offset of field: _numberfmtW::NumDigits"]
        [::std::mem::offset_of!(_numberfmtW, NumDigits) - 0usize];
    ["Offset of field: _numberfmtW::LeadingZero"]
        [::std::mem::offset_of!(_numberfmtW, LeadingZero) - 4usize];
    ["Offset of field: _numberfmtW::Grouping"]
        [::std::mem::offset_of!(_numberfmtW, Grouping) - 8usize];
    ["Offset of field: _numberfmtW::lpDecimalSep"]
        [::std::mem::offset_of!(_numberfmtW, lpDecimalSep) - 16usize];
    ["Offset of field: _numberfmtW::lpThousandSep"]
        [::std::mem::offset_of!(_numberfmtW, lpThousandSep) - 24usize];
    ["Offset of field: _numberfmtW::NegativeOrder"]
        [::std::mem::offset_of!(_numberfmtW, NegativeOrder) - 32usize];
};
pub type NUMBERFMTW = _numberfmtW;
pub type LPNUMBERFMTW = *mut _numberfmtW;
pub type NUMBERFMT = NUMBERFMTA;
pub type LPNUMBERFMT = LPNUMBERFMTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _currencyfmtA {
    pub NumDigits: UINT,
    pub LeadingZero: UINT,
    pub Grouping: UINT,
    pub lpDecimalSep: LPSTR,
    pub lpThousandSep: LPSTR,
    pub NegativeOrder: UINT,
    pub PositiveOrder: UINT,
    pub lpCurrencySymbol: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _currencyfmtA"][::std::mem::size_of::<_currencyfmtA>() - 48usize];
    ["Alignment of _currencyfmtA"][::std::mem::align_of::<_currencyfmtA>() - 8usize];
    ["Offset of field: _currencyfmtA::NumDigits"]
        [::std::mem::offset_of!(_currencyfmtA, NumDigits) - 0usize];
    ["Offset of field: _currencyfmtA::LeadingZero"]
        [::std::mem::offset_of!(_currencyfmtA, LeadingZero) - 4usize];
    ["Offset of field: _currencyfmtA::Grouping"]
        [::std::mem::offset_of!(_currencyfmtA, Grouping) - 8usize];
    ["Offset of field: _currencyfmtA::lpDecimalSep"]
        [::std::mem::offset_of!(_currencyfmtA, lpDecimalSep) - 16usize];
    ["Offset of field: _currencyfmtA::lpThousandSep"]
        [::std::mem::offset_of!(_currencyfmtA, lpThousandSep) - 24usize];
    ["Offset of field: _currencyfmtA::NegativeOrder"]
        [::std::mem::offset_of!(_currencyfmtA, NegativeOrder) - 32usize];
    ["Offset of field: _currencyfmtA::PositiveOrder"]
        [::std::mem::offset_of!(_currencyfmtA, PositiveOrder) - 36usize];
    ["Offset of field: _currencyfmtA::lpCurrencySymbol"]
        [::std::mem::offset_of!(_currencyfmtA, lpCurrencySymbol) - 40usize];
};
pub type CURRENCYFMTA = _currencyfmtA;
pub type LPCURRENCYFMTA = *mut _currencyfmtA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _currencyfmtW {
    pub NumDigits: UINT,
    pub LeadingZero: UINT,
    pub Grouping: UINT,
    pub lpDecimalSep: LPWSTR,
    pub lpThousandSep: LPWSTR,
    pub NegativeOrder: UINT,
    pub PositiveOrder: UINT,
    pub lpCurrencySymbol: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _currencyfmtW"][::std::mem::size_of::<_currencyfmtW>() - 48usize];
    ["Alignment of _currencyfmtW"][::std::mem::align_of::<_currencyfmtW>() - 8usize];
    ["Offset of field: _currencyfmtW::NumDigits"]
        [::std::mem::offset_of!(_currencyfmtW, NumDigits) - 0usize];
    ["Offset of field: _currencyfmtW::LeadingZero"]
        [::std::mem::offset_of!(_currencyfmtW, LeadingZero) - 4usize];
    ["Offset of field: _currencyfmtW::Grouping"]
        [::std::mem::offset_of!(_currencyfmtW, Grouping) - 8usize];
    ["Offset of field: _currencyfmtW::lpDecimalSep"]
        [::std::mem::offset_of!(_currencyfmtW, lpDecimalSep) - 16usize];
    ["Offset of field: _currencyfmtW::lpThousandSep"]
        [::std::mem::offset_of!(_currencyfmtW, lpThousandSep) - 24usize];
    ["Offset of field: _currencyfmtW::NegativeOrder"]
        [::std::mem::offset_of!(_currencyfmtW, NegativeOrder) - 32usize];
    ["Offset of field: _currencyfmtW::PositiveOrder"]
        [::std::mem::offset_of!(_currencyfmtW, PositiveOrder) - 36usize];
    ["Offset of field: _currencyfmtW::lpCurrencySymbol"]
        [::std::mem::offset_of!(_currencyfmtW, lpCurrencySymbol) - 40usize];
};
pub type CURRENCYFMTW = _currencyfmtW;
pub type LPCURRENCYFMTW = *mut _currencyfmtW;
pub type CURRENCYFMT = CURRENCYFMTA;
pub type LPCURRENCYFMT = LPCURRENCYFMTA;
pub const SYSNLS_FUNCTION_COMPARE_STRING: SYSNLS_FUNCTION = 1;
pub type SYSNLS_FUNCTION = ::std::os::raw::c_int;
pub type NLS_FUNCTION = DWORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _nlsversioninfo {
    pub dwNLSVersionInfoSize: DWORD,
    pub dwNLSVersion: DWORD,
    pub dwDefinedVersion: DWORD,
    pub dwEffectiveId: DWORD,
    pub guidCustomVersion: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _nlsversioninfo"][::std::mem::size_of::<_nlsversioninfo>() - 32usize];
    ["Alignment of _nlsversioninfo"][::std::mem::align_of::<_nlsversioninfo>() - 4usize];
    ["Offset of field: _nlsversioninfo::dwNLSVersionInfoSize"]
        [::std::mem::offset_of!(_nlsversioninfo, dwNLSVersionInfoSize) - 0usize];
    ["Offset of field: _nlsversioninfo::dwNLSVersion"]
        [::std::mem::offset_of!(_nlsversioninfo, dwNLSVersion) - 4usize];
    ["Offset of field: _nlsversioninfo::dwDefinedVersion"]
        [::std::mem::offset_of!(_nlsversioninfo, dwDefinedVersion) - 8usize];
    ["Offset of field: _nlsversioninfo::dwEffectiveId"]
        [::std::mem::offset_of!(_nlsversioninfo, dwEffectiveId) - 12usize];
    ["Offset of field: _nlsversioninfo::guidCustomVersion"]
        [::std::mem::offset_of!(_nlsversioninfo, guidCustomVersion) - 16usize];
};
pub type NLSVERSIONINFO = _nlsversioninfo;
pub type LPNLSVERSIONINFO = *mut _nlsversioninfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _nlsversioninfoex {
    pub dwNLSVersionInfoSize: DWORD,
    pub dwNLSVersion: DWORD,
    pub dwDefinedVersion: DWORD,
    pub dwEffectiveId: DWORD,
    pub guidCustomVersion: GUID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _nlsversioninfoex"][::std::mem::size_of::<_nlsversioninfoex>() - 32usize];
    ["Alignment of _nlsversioninfoex"][::std::mem::align_of::<_nlsversioninfoex>() - 4usize];
    ["Offset of field: _nlsversioninfoex::dwNLSVersionInfoSize"]
        [::std::mem::offset_of!(_nlsversioninfoex, dwNLSVersionInfoSize) - 0usize];
    ["Offset of field: _nlsversioninfoex::dwNLSVersion"]
        [::std::mem::offset_of!(_nlsversioninfoex, dwNLSVersion) - 4usize];
    ["Offset of field: _nlsversioninfoex::dwDefinedVersion"]
        [::std::mem::offset_of!(_nlsversioninfoex, dwDefinedVersion) - 8usize];
    ["Offset of field: _nlsversioninfoex::dwEffectiveId"]
        [::std::mem::offset_of!(_nlsversioninfoex, dwEffectiveId) - 12usize];
    ["Offset of field: _nlsversioninfoex::guidCustomVersion"]
        [::std::mem::offset_of!(_nlsversioninfoex, guidCustomVersion) - 16usize];
};
pub type NLSVERSIONINFOEX = _nlsversioninfoex;
pub type LPNLSVERSIONINFOEX = *mut _nlsversioninfoex;
pub const SYSGEOTYPE_GEO_NATION: SYSGEOTYPE = 1;
pub const SYSGEOTYPE_GEO_LATITUDE: SYSGEOTYPE = 2;
pub const SYSGEOTYPE_GEO_LONGITUDE: SYSGEOTYPE = 3;
pub const SYSGEOTYPE_GEO_ISO2: SYSGEOTYPE = 4;
pub const SYSGEOTYPE_GEO_ISO3: SYSGEOTYPE = 5;
pub const SYSGEOTYPE_GEO_RFC1766: SYSGEOTYPE = 6;
pub const SYSGEOTYPE_GEO_LCID: SYSGEOTYPE = 7;
pub const SYSGEOTYPE_GEO_FRIENDLYNAME: SYSGEOTYPE = 8;
pub const SYSGEOTYPE_GEO_OFFICIALNAME: SYSGEOTYPE = 9;
pub const SYSGEOTYPE_GEO_TIMEZONES: SYSGEOTYPE = 10;
pub const SYSGEOTYPE_GEO_OFFICIALLANGUAGES: SYSGEOTYPE = 11;
pub const SYSGEOTYPE_GEO_ISO_UN_NUMBER: SYSGEOTYPE = 12;
pub const SYSGEOTYPE_GEO_PARENT: SYSGEOTYPE = 13;
pub const SYSGEOTYPE_GEO_DIALINGCODE: SYSGEOTYPE = 14;
pub const SYSGEOTYPE_GEO_CURRENCYCODE: SYSGEOTYPE = 15;
pub const SYSGEOTYPE_GEO_CURRENCYSYMBOL: SYSGEOTYPE = 16;
pub const SYSGEOTYPE_GEO_NAME: SYSGEOTYPE = 17;
pub const SYSGEOTYPE_GEO_ID: SYSGEOTYPE = 18;
pub type SYSGEOTYPE = ::std::os::raw::c_int;
pub const SYSGEOCLASS_GEOCLASS_NATION: SYSGEOCLASS = 16;
pub const SYSGEOCLASS_GEOCLASS_REGION: SYSGEOCLASS = 14;
pub const SYSGEOCLASS_GEOCLASS_ALL: SYSGEOCLASS = 0;
pub type SYSGEOCLASS = ::std::os::raw::c_int;
pub type LOCALE_ENUMPROCA = ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR) -> BOOL>;
pub type LOCALE_ENUMPROCW = ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR) -> BOOL>;
pub const _NORM_FORM_NormalizationOther: _NORM_FORM = 0;
pub const _NORM_FORM_NormalizationC: _NORM_FORM = 1;
pub const _NORM_FORM_NormalizationD: _NORM_FORM = 2;
pub const _NORM_FORM_NormalizationKC: _NORM_FORM = 5;
pub const _NORM_FORM_NormalizationKD: _NORM_FORM = 6;
pub type _NORM_FORM = ::std::os::raw::c_int;
pub use self::_NORM_FORM as NORM_FORM;
pub type LANGUAGEGROUP_ENUMPROCA = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: LGRPID,
        arg2: LPSTR,
        arg3: LPSTR,
        arg4: DWORD,
        arg5: LONG_PTR,
    ) -> BOOL,
>;
pub type LANGGROUPLOCALE_ENUMPROCA = ::std::option::Option<
    unsafe extern "C" fn(arg1: LGRPID, arg2: LCID, arg3: LPSTR, arg4: LONG_PTR) -> BOOL,
>;
pub type UILANGUAGE_ENUMPROCA =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR, arg2: LONG_PTR) -> BOOL>;
pub type CODEPAGE_ENUMPROCA = ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR) -> BOOL>;
pub type DATEFMT_ENUMPROCA = ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR) -> BOOL>;
pub type DATEFMT_ENUMPROCEXA =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR, arg2: CALID) -> BOOL>;
pub type TIMEFMT_ENUMPROCA = ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR) -> BOOL>;
pub type CALINFO_ENUMPROCA = ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR) -> BOOL>;
pub type CALINFO_ENUMPROCEXA =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPSTR, arg2: CALID) -> BOOL>;
pub type LANGUAGEGROUP_ENUMPROCW = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: LGRPID,
        arg2: LPWSTR,
        arg3: LPWSTR,
        arg4: DWORD,
        arg5: LONG_PTR,
    ) -> BOOL,
>;
pub type LANGGROUPLOCALE_ENUMPROCW = ::std::option::Option<
    unsafe extern "C" fn(arg1: LGRPID, arg2: LCID, arg3: LPWSTR, arg4: LONG_PTR) -> BOOL,
>;
pub type UILANGUAGE_ENUMPROCW =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: LONG_PTR) -> BOOL>;
pub type CODEPAGE_ENUMPROCW = ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR) -> BOOL>;
pub type DATEFMT_ENUMPROCW = ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR) -> BOOL>;
pub type DATEFMT_ENUMPROCEXW =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: CALID) -> BOOL>;
pub type TIMEFMT_ENUMPROCW = ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR) -> BOOL>;
pub type CALINFO_ENUMPROCW = ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR) -> BOOL>;
pub type CALINFO_ENUMPROCEXW =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: CALID) -> BOOL>;
pub type GEO_ENUMPROC = ::std::option::Option<unsafe extern "C" fn(arg1: GEOID) -> BOOL>;
pub type GEO_ENUMNAMEPROC =
    ::std::option::Option<unsafe extern "C" fn(arg1: PWSTR, arg2: LPARAM) -> BOOL>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FILEMUIINFO {
    pub dwSize: DWORD,
    pub dwVersion: DWORD,
    pub dwFileType: DWORD,
    pub pChecksum: [BYTE; 16usize],
    pub pServiceChecksum: [BYTE; 16usize],
    pub dwLanguageNameOffset: DWORD,
    pub dwTypeIDMainSize: DWORD,
    pub dwTypeIDMainOffset: DWORD,
    pub dwTypeNameMainOffset: DWORD,
    pub dwTypeIDMUISize: DWORD,
    pub dwTypeIDMUIOffset: DWORD,
    pub dwTypeNameMUIOffset: DWORD,
    pub abBuffer: [BYTE; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FILEMUIINFO"][::std::mem::size_of::<_FILEMUIINFO>() - 80usize];
    ["Alignment of _FILEMUIINFO"][::std::mem::align_of::<_FILEMUIINFO>() - 4usize];
    ["Offset of field: _FILEMUIINFO::dwSize"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwSize) - 0usize];
    ["Offset of field: _FILEMUIINFO::dwVersion"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwVersion) - 4usize];
    ["Offset of field: _FILEMUIINFO::dwFileType"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwFileType) - 8usize];
    ["Offset of field: _FILEMUIINFO::pChecksum"]
        [::std::mem::offset_of!(_FILEMUIINFO, pChecksum) - 12usize];
    ["Offset of field: _FILEMUIINFO::pServiceChecksum"]
        [::std::mem::offset_of!(_FILEMUIINFO, pServiceChecksum) - 28usize];
    ["Offset of field: _FILEMUIINFO::dwLanguageNameOffset"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwLanguageNameOffset) - 44usize];
    ["Offset of field: _FILEMUIINFO::dwTypeIDMainSize"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwTypeIDMainSize) - 48usize];
    ["Offset of field: _FILEMUIINFO::dwTypeIDMainOffset"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwTypeIDMainOffset) - 52usize];
    ["Offset of field: _FILEMUIINFO::dwTypeNameMainOffset"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwTypeNameMainOffset) - 56usize];
    ["Offset of field: _FILEMUIINFO::dwTypeIDMUISize"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwTypeIDMUISize) - 60usize];
    ["Offset of field: _FILEMUIINFO::dwTypeIDMUIOffset"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwTypeIDMUIOffset) - 64usize];
    ["Offset of field: _FILEMUIINFO::dwTypeNameMUIOffset"]
        [::std::mem::offset_of!(_FILEMUIINFO, dwTypeNameMUIOffset) - 68usize];
    ["Offset of field: _FILEMUIINFO::abBuffer"]
        [::std::mem::offset_of!(_FILEMUIINFO, abBuffer) - 72usize];
};
pub type FILEMUIINFO = _FILEMUIINFO;
pub type PFILEMUIINFO = *mut _FILEMUIINFO;
unsafe extern "C" {
    pub fn CompareStringEx(
        lpLocaleName: LPCWSTR,
        dwCmpFlags: DWORD,
        lpString1: LPCWCH,
        cchCount1: ::std::os::raw::c_int,
        lpString2: LPCWCH,
        cchCount2: ::std::os::raw::c_int,
        lpVersionInformation: LPNLSVERSIONINFO,
        lpReserved: LPVOID,
        lParam: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CompareStringOrdinal(
        lpString1: LPCWCH,
        cchCount1: ::std::os::raw::c_int,
        lpString2: LPCWCH,
        cchCount2: ::std::os::raw::c_int,
        bIgnoreCase: BOOL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CompareStringW(
        Locale: LCID,
        dwCmpFlags: DWORD,
        lpString1: PCNZWCH,
        cchCount1: ::std::os::raw::c_int,
        lpString2: PCNZWCH,
        cchCount2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FoldStringW(
        dwMapFlags: DWORD,
        lpSrcStr: LPCWCH,
        cchSrc: ::std::os::raw::c_int,
        lpDestStr: LPWSTR,
        cchDest: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetStringTypeExW(
        Locale: LCID,
        dwInfoType: DWORD,
        lpSrcStr: LPCWCH,
        cchSrc: ::std::os::raw::c_int,
        lpCharType: LPWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetStringTypeW(
        dwInfoType: DWORD,
        lpSrcStr: LPCWCH,
        cchSrc: ::std::os::raw::c_int,
        lpCharType: LPWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn MultiByteToWideChar(
        CodePage: UINT,
        dwFlags: DWORD,
        lpMultiByteStr: LPCCH,
        cbMultiByte: ::std::os::raw::c_int,
        lpWideCharStr: LPWSTR,
        cchWideChar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WideCharToMultiByte(
        CodePage: UINT,
        dwFlags: DWORD,
        lpWideCharStr: LPCWCH,
        cchWideChar: ::std::os::raw::c_int,
        lpMultiByteStr: LPSTR,
        cbMultiByte: ::std::os::raw::c_int,
        lpDefaultChar: LPCCH,
        lpUsedDefaultChar: LPBOOL,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IsValidCodePage(CodePage: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn GetACP() -> UINT;
}
unsafe extern "C" {
    pub fn GetOEMCP() -> UINT;
}
unsafe extern "C" {
    pub fn GetCPInfo(CodePage: UINT, lpCPInfo: LPCPINFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCPInfoExA(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXA) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCPInfoExW(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXW) -> BOOL;
}
unsafe extern "C" {
    pub fn CompareStringA(
        Locale: LCID,
        dwCmpFlags: DWORD,
        lpString1: PCNZCH,
        cchCount1: ::std::os::raw::c_int,
        lpString2: PCNZCH,
        cchCount2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FindNLSString(
        Locale: LCID,
        dwFindNLSStringFlags: DWORD,
        lpStringSource: LPCWSTR,
        cchSource: ::std::os::raw::c_int,
        lpStringValue: LPCWSTR,
        cchValue: ::std::os::raw::c_int,
        pcchFound: LPINT,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LCMapStringW(
        Locale: LCID,
        dwMapFlags: DWORD,
        lpSrcStr: LPCWSTR,
        cchSrc: ::std::os::raw::c_int,
        lpDestStr: LPWSTR,
        cchDest: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LCMapStringA(
        Locale: LCID,
        dwMapFlags: DWORD,
        lpSrcStr: LPCSTR,
        cchSrc: ::std::os::raw::c_int,
        lpDestStr: LPSTR,
        cchDest: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetLocaleInfoW(
        Locale: LCID,
        LCType: LCTYPE,
        lpLCData: LPWSTR,
        cchData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetLocaleInfoA(
        Locale: LCID,
        LCType: LCTYPE,
        lpLCData: LPSTR,
        cchData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetCalendarInfoA(
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
        lpCalData: LPSTR,
        cchData: ::std::os::raw::c_int,
        lpValue: LPDWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetCalendarInfoW(
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
        lpCalData: LPWSTR,
        cchData: ::std::os::raw::c_int,
        lpValue: LPDWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetCalendarInfoA(
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
        lpCalData: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCalendarInfoW(
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
        lpCalData: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LoadStringByReference(
        Flags: DWORD,
        Language: PCWSTR,
        SourceString: PCWSTR,
        Buffer: PWSTR,
        cchBuffer: ULONG,
        Directory: PCWSTR,
        pcchBufferOut: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsDBCSLeadByte(TestChar: BYTE) -> BOOL;
}
unsafe extern "C" {
    pub fn IsDBCSLeadByteEx(CodePage: UINT, TestChar: BYTE) -> BOOL;
}
unsafe extern "C" {
    pub fn LocaleNameToLCID(lpName: LPCWSTR, dwFlags: DWORD) -> LCID;
}
unsafe extern "C" {
    pub fn LCIDToLocaleName(
        Locale: LCID,
        lpName: LPWSTR,
        cchName: ::std::os::raw::c_int,
        dwFlags: DWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetDurationFormat(
        Locale: LCID,
        dwFlags: DWORD,
        lpDuration: *const SYSTEMTIME,
        ullDuration: ULONGLONG,
        lpFormat: LPCWSTR,
        lpDurationStr: LPWSTR,
        cchDuration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetNumberFormatA(
        Locale: LCID,
        dwFlags: DWORD,
        lpValue: LPCSTR,
        lpFormat: *const NUMBERFMTA,
        lpNumberStr: LPSTR,
        cchNumber: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetNumberFormatW(
        Locale: LCID,
        dwFlags: DWORD,
        lpValue: LPCWSTR,
        lpFormat: *const NUMBERFMTW,
        lpNumberStr: LPWSTR,
        cchNumber: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetCurrencyFormatA(
        Locale: LCID,
        dwFlags: DWORD,
        lpValue: LPCSTR,
        lpFormat: *const CURRENCYFMTA,
        lpCurrencyStr: LPSTR,
        cchCurrency: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetCurrencyFormatW(
        Locale: LCID,
        dwFlags: DWORD,
        lpValue: LPCWSTR,
        lpFormat: *const CURRENCYFMTW,
        lpCurrencyStr: LPWSTR,
        cchCurrency: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumCalendarInfoA(
        lpCalInfoEnumProc: CALINFO_ENUMPROCA,
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumCalendarInfoW(
        lpCalInfoEnumProc: CALINFO_ENUMPROCW,
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumCalendarInfoExA(
        lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA,
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumCalendarInfoExW(
        lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW,
        Locale: LCID,
        Calendar: CALID,
        CalType: CALTYPE,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumTimeFormatsA(
        lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA,
        Locale: LCID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumTimeFormatsW(
        lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW,
        Locale: LCID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDateFormatsA(
        lpDateFmtEnumProc: DATEFMT_ENUMPROCA,
        Locale: LCID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDateFormatsW(
        lpDateFmtEnumProc: DATEFMT_ENUMPROCW,
        Locale: LCID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDateFormatsExA(
        lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA,
        Locale: LCID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDateFormatsExW(
        lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW,
        Locale: LCID,
        dwFlags: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidLanguageGroup(LanguageGroup: LGRPID, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNLSVersion(
        Function: NLS_FUNCTION,
        Locale: LCID,
        lpVersionInformation: LPNLSVERSIONINFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidLocale(Locale: LCID, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetGeoInfoA(
        Location: GEOID,
        GeoType: GEOTYPE,
        lpGeoData: LPSTR,
        cchData: ::std::os::raw::c_int,
        LangId: LANGID,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetGeoInfoW(
        Location: GEOID,
        GeoType: GEOTYPE,
        lpGeoData: LPWSTR,
        cchData: ::std::os::raw::c_int,
        LangId: LANGID,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetGeoInfoEx(
        location: PWSTR,
        geoType: GEOTYPE,
        geoData: PWSTR,
        geoDataCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumSystemGeoID(
        GeoClass: GEOCLASS,
        ParentGeoId: GEOID,
        lpGeoEnumProc: GEO_ENUMPROC,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemGeoNames(
        geoClass: GEOCLASS,
        geoEnumProc: GEO_ENUMNAMEPROC,
        data: LPARAM,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserGeoID(GeoClass: GEOCLASS) -> GEOID;
}
unsafe extern "C" {
    pub fn GetUserDefaultGeoName(
        geoName: LPWSTR,
        geoNameCount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SetUserGeoID(GeoId: GEOID) -> BOOL;
}
unsafe extern "C" {
    pub fn SetUserGeoName(geoName: PWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn ConvertDefaultLocale(Locale: LCID) -> LCID;
}
unsafe extern "C" {
    pub fn GetSystemDefaultUILanguage() -> LANGID;
}
unsafe extern "C" {
    pub fn GetThreadLocale() -> LCID;
}
unsafe extern "C" {
    pub fn SetThreadLocale(Locale: LCID) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserDefaultUILanguage() -> LANGID;
}
unsafe extern "C" {
    pub fn GetUserDefaultLangID() -> LANGID;
}
unsafe extern "C" {
    pub fn GetSystemDefaultLangID() -> LANGID;
}
unsafe extern "C" {
    pub fn GetSystemDefaultLCID() -> LCID;
}
unsafe extern "C" {
    pub fn GetUserDefaultLCID() -> LCID;
}
unsafe extern "C" {
    pub fn SetThreadUILanguage(LangId: LANGID) -> LANGID;
}
unsafe extern "C" {
    pub fn GetThreadUILanguage() -> LANGID;
}
unsafe extern "C" {
    pub fn GetProcessPreferredUILanguages(
        dwFlags: DWORD,
        pulNumLanguages: PULONG,
        pwszLanguagesBuffer: PZZWSTR,
        pcchLanguagesBuffer: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetProcessPreferredUILanguages(
        dwFlags: DWORD,
        pwszLanguagesBuffer: PCZZWSTR,
        pulNumLanguages: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUserPreferredUILanguages(
        dwFlags: DWORD,
        pulNumLanguages: PULONG,
        pwszLanguagesBuffer: PZZWSTR,
        pcchLanguagesBuffer: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetSystemPreferredUILanguages(
        dwFlags: DWORD,
        pulNumLanguages: PULONG,
        pwszLanguagesBuffer: PZZWSTR,
        pcchLanguagesBuffer: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetThreadPreferredUILanguages(
        dwFlags: DWORD,
        pulNumLanguages: PULONG,
        pwszLanguagesBuffer: PZZWSTR,
        pcchLanguagesBuffer: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetThreadPreferredUILanguages(
        dwFlags: DWORD,
        pwszLanguagesBuffer: PCZZWSTR,
        pulNumLanguages: PULONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileMUIInfo(
        dwFlags: DWORD,
        pcwszFilePath: PCWSTR,
        pFileMUIInfo: PFILEMUIINFO,
        pcbFileMUIInfo: *mut DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileMUIPath(
        dwFlags: DWORD,
        pcwszFilePath: PCWSTR,
        pwszLanguage: PWSTR,
        pcchLanguage: PULONG,
        pwszFileMUIPath: PWSTR,
        pcchFileMUIPath: PULONG,
        pululEnumerator: PULONGLONG,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetUILanguageInfo(
        dwFlags: DWORD,
        pwmszLanguage: PCZZWSTR,
        pwszFallbackLanguages: PZZWSTR,
        pcchFallbackLanguages: PDWORD,
        pAttributes: PDWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HSAVEDUILANGUAGES__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HSAVEDUILANGUAGES__"][::std::mem::size_of::<HSAVEDUILANGUAGES__>() - 4usize];
    ["Alignment of HSAVEDUILANGUAGES__"][::std::mem::align_of::<HSAVEDUILANGUAGES__>() - 4usize];
    ["Offset of field: HSAVEDUILANGUAGES__::unused"]
        [::std::mem::offset_of!(HSAVEDUILANGUAGES__, unused) - 0usize];
};
pub type HSAVEDUILANGUAGES = *mut HSAVEDUILANGUAGES__;
unsafe extern "C" {
    pub fn SetThreadPreferredUILanguages2(
        flags: ULONG,
        languages: PCZZWSTR,
        numLanguagesSet: PULONG,
        snapshot: *mut HSAVEDUILANGUAGES,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RestoreThreadPreferredUILanguages(snapshot: HSAVEDUILANGUAGES);
}
unsafe extern "C" {
    pub fn NotifyUILanguageChange(
        dwFlags: DWORD,
        pcwstrNewLanguage: PCWSTR,
        pcwstrPreviousLanguage: PCWSTR,
        dwReserved: DWORD,
        pdwStatusRtrn: PDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetStringTypeExA(
        Locale: LCID,
        dwInfoType: DWORD,
        lpSrcStr: LPCSTR,
        cchSrc: ::std::os::raw::c_int,
        lpCharType: LPWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetStringTypeA(
        Locale: LCID,
        dwInfoType: DWORD,
        lpSrcStr: LPCSTR,
        cchSrc: ::std::os::raw::c_int,
        lpCharType: LPWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FoldStringA(
        dwMapFlags: DWORD,
        lpSrcStr: LPCSTR,
        cchSrc: ::std::os::raw::c_int,
        lpDestStr: LPSTR,
        cchDest: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnumSystemLocalesA(lpLocaleEnumProc: LOCALE_ENUMPROCA, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemLocalesW(lpLocaleEnumProc: LOCALE_ENUMPROCW, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemLanguageGroupsA(
        lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA,
        dwFlags: DWORD,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemLanguageGroupsW(
        lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW,
        dwFlags: DWORD,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumLanguageGroupLocalesA(
        lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA,
        LanguageGroup: LGRPID,
        dwFlags: DWORD,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumLanguageGroupLocalesW(
        lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW,
        LanguageGroup: LGRPID,
        dwFlags: DWORD,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumUILanguagesA(
        lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA,
        dwFlags: DWORD,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumUILanguagesW(
        lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW,
        dwFlags: DWORD,
        lParam: LONG_PTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemCodePagesA(lpCodePageEnumProc: CODEPAGE_ENUMPROCA, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumSystemCodePagesW(lpCodePageEnumProc: CODEPAGE_ENUMPROCW, dwFlags: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn IdnToAscii(
        dwFlags: DWORD,
        lpUnicodeCharStr: LPCWSTR,
        cchUnicodeChar: ::std::os::raw::c_int,
        lpASCIICharStr: LPWSTR,
        cchASCIIChar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IdnToUnicode(
        dwFlags: DWORD,
        lpASCIICharStr: LPCWSTR,
        cchASCIIChar: ::std::os::raw::c_int,
        lpUnicodeCharStr: LPWSTR,
        cchUnicodeChar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IdnToNameprepUnicode(
        dwFlags: DWORD,
        lpUnicodeCharStr: LPCWSTR,
        cchUnicodeChar: ::std::os::raw::c_int,
        lpNameprepCharStr: LPWSTR,
        cchNameprepChar: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NormalizeString(
        NormForm: NORM_FORM,
        lpSrcString: LPCWSTR,
        cwSrcLength: ::std::os::raw::c_int,
        lpDstString: LPWSTR,
        cwDstLength: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IsNormalizedString(
        NormForm: NORM_FORM,
        lpString: LPCWSTR,
        cwLength: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VerifyScripts(
        dwFlags: DWORD,
        lpLocaleScripts: LPCWSTR,
        cchLocaleScripts: ::std::os::raw::c_int,
        lpTestScripts: LPCWSTR,
        cchTestScripts: ::std::os::raw::c_int,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetStringScripts(
        dwFlags: DWORD,
        lpString: LPCWSTR,
        cchString: ::std::os::raw::c_int,
        lpScripts: LPWSTR,
        cchScripts: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetLocaleInfoEx(
        lpLocaleName: LPCWSTR,
        LCType: LCTYPE,
        lpLCData: LPWSTR,
        cchData: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetCalendarInfoEx(
        lpLocaleName: LPCWSTR,
        Calendar: CALID,
        lpReserved: LPCWSTR,
        CalType: CALTYPE,
        lpCalData: LPWSTR,
        cchData: ::std::os::raw::c_int,
        lpValue: LPDWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetNumberFormatEx(
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lpValue: LPCWSTR,
        lpFormat: *const NUMBERFMTW,
        lpNumberStr: LPWSTR,
        cchNumber: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetCurrencyFormatEx(
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lpValue: LPCWSTR,
        lpFormat: *const CURRENCYFMTW,
        lpCurrencyStr: LPWSTR,
        cchCurrency: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetUserDefaultLocaleName(
        lpLocaleName: LPWSTR,
        cchLocaleName: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetSystemDefaultLocaleName(
        lpLocaleName: LPWSTR,
        cchLocaleName: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IsNLSDefinedString(
        Function: NLS_FUNCTION,
        dwFlags: DWORD,
        lpVersionInformation: LPNLSVERSIONINFO,
        lpString: LPCWSTR,
        cchStr: INT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNLSVersionEx(
        function: NLS_FUNCTION,
        lpLocaleName: LPCWSTR,
        lpVersionInformation: LPNLSVERSIONINFOEX,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn IsValidNLSVersion(
        function: NLS_FUNCTION,
        lpLocaleName: LPCWSTR,
        lpVersionInformation: LPNLSVERSIONINFOEX,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn FindNLSStringEx(
        lpLocaleName: LPCWSTR,
        dwFindNLSStringFlags: DWORD,
        lpStringSource: LPCWSTR,
        cchSource: ::std::os::raw::c_int,
        lpStringValue: LPCWSTR,
        cchValue: ::std::os::raw::c_int,
        pcchFound: LPINT,
        lpVersionInformation: LPNLSVERSIONINFO,
        lpReserved: LPVOID,
        sortHandle: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LCMapStringEx(
        lpLocaleName: LPCWSTR,
        dwMapFlags: DWORD,
        lpSrcStr: LPCWSTR,
        cchSrc: ::std::os::raw::c_int,
        lpDestStr: LPWSTR,
        cchDest: ::std::os::raw::c_int,
        lpVersionInformation: LPNLSVERSIONINFO,
        lpReserved: LPVOID,
        sortHandle: LPARAM,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IsValidLocaleName(lpLocaleName: LPCWSTR) -> BOOL;
}
pub type CALINFO_ENUMPROCEXEX = ::std::option::Option<
    unsafe extern "C" fn(arg1: LPWSTR, arg2: CALID, arg3: LPWSTR, arg4: LPARAM) -> BOOL,
>;
unsafe extern "C" {
    pub fn EnumCalendarInfoExEx(
        pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX,
        lpLocaleName: LPCWSTR,
        Calendar: CALID,
        lpReserved: LPCWSTR,
        CalType: CALTYPE,
        lParam: LPARAM,
    ) -> BOOL;
}
pub type DATEFMT_ENUMPROCEXEX =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: CALID, arg3: LPARAM) -> BOOL>;
unsafe extern "C" {
    pub fn EnumDateFormatsExEx(
        lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX,
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lParam: LPARAM,
    ) -> BOOL;
}
pub type TIMEFMT_ENUMPROCEX =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: LPARAM) -> BOOL>;
unsafe extern "C" {
    pub fn EnumTimeFormatsEx(
        lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX,
        lpLocaleName: LPCWSTR,
        dwFlags: DWORD,
        lParam: LPARAM,
    ) -> BOOL;
}
pub type LOCALE_ENUMPROCEX =
    ::std::option::Option<unsafe extern "C" fn(arg1: LPWSTR, arg2: DWORD, arg3: LPARAM) -> BOOL>;
unsafe extern "C" {
    pub fn EnumSystemLocalesEx(
        lpLocaleEnumProcEx: LOCALE_ENUMPROCEX,
        dwFlags: DWORD,
        lParam: LPARAM,
        lpReserved: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ResolveLocaleName(
        lpNameToResolve: LPCWSTR,
        lpLocaleName: LPWSTR,
        cchLocaleName: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _COORD {
    pub X: SHORT,
    pub Y: SHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _COORD"][::std::mem::size_of::<_COORD>() - 4usize];
    ["Alignment of _COORD"][::std::mem::align_of::<_COORD>() - 2usize];
    ["Offset of field: _COORD::X"][::std::mem::offset_of!(_COORD, X) - 0usize];
    ["Offset of field: _COORD::Y"][::std::mem::offset_of!(_COORD, Y) - 2usize];
};
pub type COORD = _COORD;
pub type PCOORD = *mut _COORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SMALL_RECT {
    pub Left: SHORT,
    pub Top: SHORT,
    pub Right: SHORT,
    pub Bottom: SHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SMALL_RECT"][::std::mem::size_of::<_SMALL_RECT>() - 8usize];
    ["Alignment of _SMALL_RECT"][::std::mem::align_of::<_SMALL_RECT>() - 2usize];
    ["Offset of field: _SMALL_RECT::Left"][::std::mem::offset_of!(_SMALL_RECT, Left) - 0usize];
    ["Offset of field: _SMALL_RECT::Top"][::std::mem::offset_of!(_SMALL_RECT, Top) - 2usize];
    ["Offset of field: _SMALL_RECT::Right"][::std::mem::offset_of!(_SMALL_RECT, Right) - 4usize];
    ["Offset of field: _SMALL_RECT::Bottom"][::std::mem::offset_of!(_SMALL_RECT, Bottom) - 6usize];
};
pub type SMALL_RECT = _SMALL_RECT;
pub type PSMALL_RECT = *mut _SMALL_RECT;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _KEY_EVENT_RECORD {
    pub bKeyDown: BOOL,
    pub wRepeatCount: WORD,
    pub wVirtualKeyCode: WORD,
    pub wVirtualScanCode: WORD,
    pub uChar: _KEY_EVENT_RECORD__bindgen_ty_1,
    pub dwControlKeyState: DWORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _KEY_EVENT_RECORD__bindgen_ty_1 {
    pub UnicodeChar: WCHAR,
    pub AsciiChar: CHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KEY_EVENT_RECORD__bindgen_ty_1"]
        [::std::mem::size_of::<_KEY_EVENT_RECORD__bindgen_ty_1>() - 2usize];
    ["Alignment of _KEY_EVENT_RECORD__bindgen_ty_1"]
        [::std::mem::align_of::<_KEY_EVENT_RECORD__bindgen_ty_1>() - 2usize];
    ["Offset of field: _KEY_EVENT_RECORD__bindgen_ty_1::UnicodeChar"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD__bindgen_ty_1, UnicodeChar) - 0usize];
    ["Offset of field: _KEY_EVENT_RECORD__bindgen_ty_1::AsciiChar"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD__bindgen_ty_1, AsciiChar) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _KEY_EVENT_RECORD"][::std::mem::size_of::<_KEY_EVENT_RECORD>() - 16usize];
    ["Alignment of _KEY_EVENT_RECORD"][::std::mem::align_of::<_KEY_EVENT_RECORD>() - 4usize];
    ["Offset of field: _KEY_EVENT_RECORD::bKeyDown"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD, bKeyDown) - 0usize];
    ["Offset of field: _KEY_EVENT_RECORD::wRepeatCount"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD, wRepeatCount) - 4usize];
    ["Offset of field: _KEY_EVENT_RECORD::wVirtualKeyCode"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD, wVirtualKeyCode) - 6usize];
    ["Offset of field: _KEY_EVENT_RECORD::wVirtualScanCode"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD, wVirtualScanCode) - 8usize];
    ["Offset of field: _KEY_EVENT_RECORD::uChar"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD, uChar) - 10usize];
    ["Offset of field: _KEY_EVENT_RECORD::dwControlKeyState"]
        [::std::mem::offset_of!(_KEY_EVENT_RECORD, dwControlKeyState) - 12usize];
};
pub type KEY_EVENT_RECORD = _KEY_EVENT_RECORD;
pub type PKEY_EVENT_RECORD = *mut _KEY_EVENT_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MOUSE_EVENT_RECORD {
    pub dwMousePosition: COORD,
    pub dwButtonState: DWORD,
    pub dwControlKeyState: DWORD,
    pub dwEventFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MOUSE_EVENT_RECORD"][::std::mem::size_of::<_MOUSE_EVENT_RECORD>() - 16usize];
    ["Alignment of _MOUSE_EVENT_RECORD"][::std::mem::align_of::<_MOUSE_EVENT_RECORD>() - 4usize];
    ["Offset of field: _MOUSE_EVENT_RECORD::dwMousePosition"]
        [::std::mem::offset_of!(_MOUSE_EVENT_RECORD, dwMousePosition) - 0usize];
    ["Offset of field: _MOUSE_EVENT_RECORD::dwButtonState"]
        [::std::mem::offset_of!(_MOUSE_EVENT_RECORD, dwButtonState) - 4usize];
    ["Offset of field: _MOUSE_EVENT_RECORD::dwControlKeyState"]
        [::std::mem::offset_of!(_MOUSE_EVENT_RECORD, dwControlKeyState) - 8usize];
    ["Offset of field: _MOUSE_EVENT_RECORD::dwEventFlags"]
        [::std::mem::offset_of!(_MOUSE_EVENT_RECORD, dwEventFlags) - 12usize];
};
pub type MOUSE_EVENT_RECORD = _MOUSE_EVENT_RECORD;
pub type PMOUSE_EVENT_RECORD = *mut _MOUSE_EVENT_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WINDOW_BUFFER_SIZE_RECORD {
    pub dwSize: COORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WINDOW_BUFFER_SIZE_RECORD"]
        [::std::mem::size_of::<_WINDOW_BUFFER_SIZE_RECORD>() - 4usize];
    ["Alignment of _WINDOW_BUFFER_SIZE_RECORD"]
        [::std::mem::align_of::<_WINDOW_BUFFER_SIZE_RECORD>() - 2usize];
    ["Offset of field: _WINDOW_BUFFER_SIZE_RECORD::dwSize"]
        [::std::mem::offset_of!(_WINDOW_BUFFER_SIZE_RECORD, dwSize) - 0usize];
};
pub type WINDOW_BUFFER_SIZE_RECORD = _WINDOW_BUFFER_SIZE_RECORD;
pub type PWINDOW_BUFFER_SIZE_RECORD = *mut _WINDOW_BUFFER_SIZE_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MENU_EVENT_RECORD {
    pub dwCommandId: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MENU_EVENT_RECORD"][::std::mem::size_of::<_MENU_EVENT_RECORD>() - 4usize];
    ["Alignment of _MENU_EVENT_RECORD"][::std::mem::align_of::<_MENU_EVENT_RECORD>() - 4usize];
    ["Offset of field: _MENU_EVENT_RECORD::dwCommandId"]
        [::std::mem::offset_of!(_MENU_EVENT_RECORD, dwCommandId) - 0usize];
};
pub type MENU_EVENT_RECORD = _MENU_EVENT_RECORD;
pub type PMENU_EVENT_RECORD = *mut _MENU_EVENT_RECORD;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FOCUS_EVENT_RECORD {
    pub bSetFocus: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FOCUS_EVENT_RECORD"][::std::mem::size_of::<_FOCUS_EVENT_RECORD>() - 4usize];
    ["Alignment of _FOCUS_EVENT_RECORD"][::std::mem::align_of::<_FOCUS_EVENT_RECORD>() - 4usize];
    ["Offset of field: _FOCUS_EVENT_RECORD::bSetFocus"]
        [::std::mem::offset_of!(_FOCUS_EVENT_RECORD, bSetFocus) - 0usize];
};
pub type FOCUS_EVENT_RECORD = _FOCUS_EVENT_RECORD;
pub type PFOCUS_EVENT_RECORD = *mut _FOCUS_EVENT_RECORD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _INPUT_RECORD {
    pub EventType: WORD,
    pub Event: _INPUT_RECORD__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _INPUT_RECORD__bindgen_ty_1 {
    pub KeyEvent: KEY_EVENT_RECORD,
    pub MouseEvent: MOUSE_EVENT_RECORD,
    pub WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD,
    pub MenuEvent: MENU_EVENT_RECORD,
    pub FocusEvent: FOCUS_EVENT_RECORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _INPUT_RECORD__bindgen_ty_1"]
        [::std::mem::size_of::<_INPUT_RECORD__bindgen_ty_1>() - 16usize];
    ["Alignment of _INPUT_RECORD__bindgen_ty_1"]
        [::std::mem::align_of::<_INPUT_RECORD__bindgen_ty_1>() - 4usize];
    ["Offset of field: _INPUT_RECORD__bindgen_ty_1::KeyEvent"]
        [::std::mem::offset_of!(_INPUT_RECORD__bindgen_ty_1, KeyEvent) - 0usize];
    ["Offset of field: _INPUT_RECORD__bindgen_ty_1::MouseEvent"]
        [::std::mem::offset_of!(_INPUT_RECORD__bindgen_ty_1, MouseEvent) - 0usize];
    ["Offset of field: _INPUT_RECORD__bindgen_ty_1::WindowBufferSizeEvent"]
        [::std::mem::offset_of!(_INPUT_RECORD__bindgen_ty_1, WindowBufferSizeEvent) - 0usize];
    ["Offset of field: _INPUT_RECORD__bindgen_ty_1::MenuEvent"]
        [::std::mem::offset_of!(_INPUT_RECORD__bindgen_ty_1, MenuEvent) - 0usize];
    ["Offset of field: _INPUT_RECORD__bindgen_ty_1::FocusEvent"]
        [::std::mem::offset_of!(_INPUT_RECORD__bindgen_ty_1, FocusEvent) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _INPUT_RECORD"][::std::mem::size_of::<_INPUT_RECORD>() - 20usize];
    ["Alignment of _INPUT_RECORD"][::std::mem::align_of::<_INPUT_RECORD>() - 4usize];
    ["Offset of field: _INPUT_RECORD::EventType"]
        [::std::mem::offset_of!(_INPUT_RECORD, EventType) - 0usize];
    ["Offset of field: _INPUT_RECORD::Event"]
        [::std::mem::offset_of!(_INPUT_RECORD, Event) - 4usize];
};
pub type INPUT_RECORD = _INPUT_RECORD;
pub type PINPUT_RECORD = *mut _INPUT_RECORD;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _CHAR_INFO {
    pub Char: _CHAR_INFO__bindgen_ty_1,
    pub Attributes: WORD,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _CHAR_INFO__bindgen_ty_1 {
    pub UnicodeChar: WCHAR,
    pub AsciiChar: CHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CHAR_INFO__bindgen_ty_1"]
        [::std::mem::size_of::<_CHAR_INFO__bindgen_ty_1>() - 2usize];
    ["Alignment of _CHAR_INFO__bindgen_ty_1"]
        [::std::mem::align_of::<_CHAR_INFO__bindgen_ty_1>() - 2usize];
    ["Offset of field: _CHAR_INFO__bindgen_ty_1::UnicodeChar"]
        [::std::mem::offset_of!(_CHAR_INFO__bindgen_ty_1, UnicodeChar) - 0usize];
    ["Offset of field: _CHAR_INFO__bindgen_ty_1::AsciiChar"]
        [::std::mem::offset_of!(_CHAR_INFO__bindgen_ty_1, AsciiChar) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CHAR_INFO"][::std::mem::size_of::<_CHAR_INFO>() - 4usize];
    ["Alignment of _CHAR_INFO"][::std::mem::align_of::<_CHAR_INFO>() - 2usize];
    ["Offset of field: _CHAR_INFO::Char"][::std::mem::offset_of!(_CHAR_INFO, Char) - 0usize];
    ["Offset of field: _CHAR_INFO::Attributes"]
        [::std::mem::offset_of!(_CHAR_INFO, Attributes) - 2usize];
};
pub type CHAR_INFO = _CHAR_INFO;
pub type PCHAR_INFO = *mut _CHAR_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_FONT_INFO {
    pub nFont: DWORD,
    pub dwFontSize: COORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_FONT_INFO"][::std::mem::size_of::<_CONSOLE_FONT_INFO>() - 8usize];
    ["Alignment of _CONSOLE_FONT_INFO"][::std::mem::align_of::<_CONSOLE_FONT_INFO>() - 4usize];
    ["Offset of field: _CONSOLE_FONT_INFO::nFont"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFO, nFont) - 0usize];
    ["Offset of field: _CONSOLE_FONT_INFO::dwFontSize"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFO, dwFontSize) - 4usize];
};
pub type CONSOLE_FONT_INFO = _CONSOLE_FONT_INFO;
pub type PCONSOLE_FONT_INFO = *mut _CONSOLE_FONT_INFO;
pub type HPCON = *mut ::std::os::raw::c_void;
unsafe extern "C" {
    pub fn AllocConsole() -> BOOL;
}
pub const ALLOC_CONSOLE_MODE_ALLOC_CONSOLE_MODE_DEFAULT: ALLOC_CONSOLE_MODE = 0;
pub const ALLOC_CONSOLE_MODE_ALLOC_CONSOLE_MODE_NEW_WINDOW: ALLOC_CONSOLE_MODE = 1;
pub const ALLOC_CONSOLE_MODE_ALLOC_CONSOLE_MODE_NO_WINDOW: ALLOC_CONSOLE_MODE = 2;
pub type ALLOC_CONSOLE_MODE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ALLOC_CONSOLE_OPTIONS {
    pub mode: ALLOC_CONSOLE_MODE,
    pub useShowWindow: BOOL,
    pub showWindow: WORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ALLOC_CONSOLE_OPTIONS"][::std::mem::size_of::<ALLOC_CONSOLE_OPTIONS>() - 12usize];
    ["Alignment of ALLOC_CONSOLE_OPTIONS"]
        [::std::mem::align_of::<ALLOC_CONSOLE_OPTIONS>() - 4usize];
    ["Offset of field: ALLOC_CONSOLE_OPTIONS::mode"]
        [::std::mem::offset_of!(ALLOC_CONSOLE_OPTIONS, mode) - 0usize];
    ["Offset of field: ALLOC_CONSOLE_OPTIONS::useShowWindow"]
        [::std::mem::offset_of!(ALLOC_CONSOLE_OPTIONS, useShowWindow) - 4usize];
    ["Offset of field: ALLOC_CONSOLE_OPTIONS::showWindow"]
        [::std::mem::offset_of!(ALLOC_CONSOLE_OPTIONS, showWindow) - 8usize];
};
pub type PALLOC_CONSOLE_OPTIONS = *mut ALLOC_CONSOLE_OPTIONS;
pub const ALLOC_CONSOLE_RESULT_ALLOC_CONSOLE_RESULT_NO_CONSOLE: ALLOC_CONSOLE_RESULT = 0;
pub const ALLOC_CONSOLE_RESULT_ALLOC_CONSOLE_RESULT_NEW_CONSOLE: ALLOC_CONSOLE_RESULT = 1;
pub const ALLOC_CONSOLE_RESULT_ALLOC_CONSOLE_RESULT_EXISTING_CONSOLE: ALLOC_CONSOLE_RESULT = 2;
pub type ALLOC_CONSOLE_RESULT = ::std::os::raw::c_int;
pub type PALLOC_CONSOLE_RESULT = *mut ALLOC_CONSOLE_RESULT;
unsafe extern "C" {
    pub fn AllocConsoleWithOptions(
        options: PALLOC_CONSOLE_OPTIONS,
        result: PALLOC_CONSOLE_RESULT,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn FreeConsole() -> BOOL;
}
unsafe extern "C" {
    pub fn AttachConsole(dwProcessId: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleCP() -> UINT;
}
unsafe extern "C" {
    pub fn GetConsoleOutputCP() -> UINT;
}
unsafe extern "C" {
    pub fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleMode(hConsoleHandle: HANDLE, dwMode: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumberOfConsoleInputEvents(hConsoleInput: HANDLE, lpNumberOfEvents: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleInputA(
        hConsoleInput: HANDLE,
        lpBuffer: PINPUT_RECORD,
        nLength: DWORD,
        lpNumberOfEventsRead: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleInputW(
        hConsoleInput: HANDLE,
        lpBuffer: PINPUT_RECORD,
        nLength: DWORD,
        lpNumberOfEventsRead: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PeekConsoleInputA(
        hConsoleInput: HANDLE,
        lpBuffer: PINPUT_RECORD,
        nLength: DWORD,
        lpNumberOfEventsRead: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn PeekConsoleInputW(
        hConsoleInput: HANDLE,
        lpBuffer: PINPUT_RECORD,
        nLength: DWORD,
        lpNumberOfEventsRead: LPDWORD,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_READCONSOLE_CONTROL {
    pub nLength: ULONG,
    pub nInitialChars: ULONG,
    pub dwCtrlWakeupMask: ULONG,
    pub dwControlKeyState: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_READCONSOLE_CONTROL"]
        [::std::mem::size_of::<_CONSOLE_READCONSOLE_CONTROL>() - 16usize];
    ["Alignment of _CONSOLE_READCONSOLE_CONTROL"]
        [::std::mem::align_of::<_CONSOLE_READCONSOLE_CONTROL>() - 4usize];
    ["Offset of field: _CONSOLE_READCONSOLE_CONTROL::nLength"]
        [::std::mem::offset_of!(_CONSOLE_READCONSOLE_CONTROL, nLength) - 0usize];
    ["Offset of field: _CONSOLE_READCONSOLE_CONTROL::nInitialChars"]
        [::std::mem::offset_of!(_CONSOLE_READCONSOLE_CONTROL, nInitialChars) - 4usize];
    ["Offset of field: _CONSOLE_READCONSOLE_CONTROL::dwCtrlWakeupMask"]
        [::std::mem::offset_of!(_CONSOLE_READCONSOLE_CONTROL, dwCtrlWakeupMask) - 8usize];
    ["Offset of field: _CONSOLE_READCONSOLE_CONTROL::dwControlKeyState"]
        [::std::mem::offset_of!(_CONSOLE_READCONSOLE_CONTROL, dwControlKeyState) - 12usize];
};
pub type CONSOLE_READCONSOLE_CONTROL = _CONSOLE_READCONSOLE_CONTROL;
pub type PCONSOLE_READCONSOLE_CONTROL = *mut _CONSOLE_READCONSOLE_CONTROL;
unsafe extern "C" {
    pub fn ReadConsoleA(
        hConsoleInput: HANDLE,
        lpBuffer: LPVOID,
        nNumberOfCharsToRead: DWORD,
        lpNumberOfCharsRead: LPDWORD,
        pInputControl: PCONSOLE_READCONSOLE_CONTROL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleW(
        hConsoleInput: HANDLE,
        lpBuffer: LPVOID,
        nNumberOfCharsToRead: DWORD,
        lpNumberOfCharsRead: LPDWORD,
        pInputControl: PCONSOLE_READCONSOLE_CONTROL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleA(
        hConsoleOutput: HANDLE,
        lpBuffer: *const ::std::os::raw::c_void,
        nNumberOfCharsToWrite: DWORD,
        lpNumberOfCharsWritten: LPDWORD,
        lpReserved: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleW(
        hConsoleOutput: HANDLE,
        lpBuffer: *const ::std::os::raw::c_void,
        nNumberOfCharsToWrite: DWORD,
        lpNumberOfCharsWritten: LPDWORD,
        lpReserved: LPVOID,
    ) -> BOOL;
}
pub type PHANDLER_ROUTINE = ::std::option::Option<unsafe extern "C" fn(CtrlType: DWORD) -> BOOL>;
unsafe extern "C" {
    pub fn SetConsoleCtrlHandler(HandlerRoutine: PHANDLER_ROUTINE, Add: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn CreatePseudoConsole(
        size: COORD,
        hInput: HANDLE,
        hOutput: HANDLE,
        dwFlags: DWORD,
        phPC: *mut HPCON,
    ) -> HRESULT;
}
unsafe extern "C" {
    pub fn ResizePseudoConsole(hPC: HPCON, size: COORD) -> HRESULT;
}
unsafe extern "C" {
    pub fn ClosePseudoConsole(hPC: HPCON);
}
unsafe extern "C" {
    pub fn ReleasePseudoConsole(hPC: HPCON) -> HRESULT;
}
unsafe extern "C" {
    pub fn FillConsoleOutputCharacterA(
        hConsoleOutput: HANDLE,
        cCharacter: CHAR,
        nLength: DWORD,
        dwWriteCoord: COORD,
        lpNumberOfCharsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FillConsoleOutputCharacterW(
        hConsoleOutput: HANDLE,
        cCharacter: WCHAR,
        nLength: DWORD,
        dwWriteCoord: COORD,
        lpNumberOfCharsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn FillConsoleOutputAttribute(
        hConsoleOutput: HANDLE,
        wAttribute: WORD,
        nLength: DWORD,
        dwWriteCoord: COORD,
        lpNumberOfAttrsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GenerateConsoleCtrlEvent(dwCtrlEvent: DWORD, dwProcessGroupId: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateConsoleScreenBuffer(
        dwDesiredAccess: DWORD,
        dwShareMode: DWORD,
        lpSecurityAttributes: *const SECURITY_ATTRIBUTES,
        dwFlags: DWORD,
        lpScreenBufferData: LPVOID,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn SetConsoleActiveScreenBuffer(hConsoleOutput: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn FlushConsoleInputBuffer(hConsoleInput: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleCP(wCodePageID: UINT) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleOutputCP(wCodePageID: UINT) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_CURSOR_INFO {
    pub dwSize: DWORD,
    pub bVisible: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_CURSOR_INFO"][::std::mem::size_of::<_CONSOLE_CURSOR_INFO>() - 8usize];
    ["Alignment of _CONSOLE_CURSOR_INFO"][::std::mem::align_of::<_CONSOLE_CURSOR_INFO>() - 4usize];
    ["Offset of field: _CONSOLE_CURSOR_INFO::dwSize"]
        [::std::mem::offset_of!(_CONSOLE_CURSOR_INFO, dwSize) - 0usize];
    ["Offset of field: _CONSOLE_CURSOR_INFO::bVisible"]
        [::std::mem::offset_of!(_CONSOLE_CURSOR_INFO, bVisible) - 4usize];
};
pub type CONSOLE_CURSOR_INFO = _CONSOLE_CURSOR_INFO;
pub type PCONSOLE_CURSOR_INFO = *mut _CONSOLE_CURSOR_INFO;
unsafe extern "C" {
    pub fn GetConsoleCursorInfo(
        hConsoleOutput: HANDLE,
        lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleCursorInfo(
        hConsoleOutput: HANDLE,
        lpConsoleCursorInfo: *const CONSOLE_CURSOR_INFO,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_SCREEN_BUFFER_INFO {
    pub dwSize: COORD,
    pub dwCursorPosition: COORD,
    pub wAttributes: WORD,
    pub srWindow: SMALL_RECT,
    pub dwMaximumWindowSize: COORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_SCREEN_BUFFER_INFO"]
        [::std::mem::size_of::<_CONSOLE_SCREEN_BUFFER_INFO>() - 22usize];
    ["Alignment of _CONSOLE_SCREEN_BUFFER_INFO"]
        [::std::mem::align_of::<_CONSOLE_SCREEN_BUFFER_INFO>() - 2usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFO::dwSize"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFO, dwSize) - 0usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFO::dwCursorPosition"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFO, dwCursorPosition) - 4usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFO::wAttributes"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFO, wAttributes) - 8usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFO::srWindow"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFO, srWindow) - 10usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFO::dwMaximumWindowSize"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFO, dwMaximumWindowSize) - 18usize];
};
pub type CONSOLE_SCREEN_BUFFER_INFO = _CONSOLE_SCREEN_BUFFER_INFO;
pub type PCONSOLE_SCREEN_BUFFER_INFO = *mut _CONSOLE_SCREEN_BUFFER_INFO;
unsafe extern "C" {
    pub fn GetConsoleScreenBufferInfo(
        hConsoleOutput: HANDLE,
        lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    pub cbSize: ULONG,
    pub dwSize: COORD,
    pub dwCursorPosition: COORD,
    pub wAttributes: WORD,
    pub srWindow: SMALL_RECT,
    pub dwMaximumWindowSize: COORD,
    pub wPopupAttributes: WORD,
    pub bFullscreenSupported: BOOL,
    pub ColorTable: [COLORREF; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_SCREEN_BUFFER_INFOEX"]
        [::std::mem::size_of::<_CONSOLE_SCREEN_BUFFER_INFOEX>() - 96usize];
    ["Alignment of _CONSOLE_SCREEN_BUFFER_INFOEX"]
        [::std::mem::align_of::<_CONSOLE_SCREEN_BUFFER_INFOEX>() - 4usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::cbSize"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, cbSize) - 0usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::dwSize"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, dwSize) - 4usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::dwCursorPosition"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, dwCursorPosition) - 8usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::wAttributes"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, wAttributes) - 12usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::srWindow"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, srWindow) - 14usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::dwMaximumWindowSize"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, dwMaximumWindowSize) - 22usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::wPopupAttributes"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, wPopupAttributes) - 26usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::bFullscreenSupported"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, bFullscreenSupported) - 28usize];
    ["Offset of field: _CONSOLE_SCREEN_BUFFER_INFOEX::ColorTable"]
        [::std::mem::offset_of!(_CONSOLE_SCREEN_BUFFER_INFOEX, ColorTable) - 32usize];
};
pub type CONSOLE_SCREEN_BUFFER_INFOEX = _CONSOLE_SCREEN_BUFFER_INFOEX;
pub type PCONSOLE_SCREEN_BUFFER_INFOEX = *mut _CONSOLE_SCREEN_BUFFER_INFOEX;
unsafe extern "C" {
    pub fn GetConsoleScreenBufferInfoEx(
        hConsoleOutput: HANDLE,
        lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleScreenBufferInfoEx(
        hConsoleOutput: HANDLE,
        lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleScreenBufferSize(hConsoleOutput: HANDLE, dwSize: COORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleCursorPosition(hConsoleOutput: HANDLE, dwCursorPosition: COORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetLargestConsoleWindowSize(hConsoleOutput: HANDLE) -> COORD;
}
unsafe extern "C" {
    pub fn SetConsoleTextAttribute(hConsoleOutput: HANDLE, wAttributes: WORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleWindowInfo(
        hConsoleOutput: HANDLE,
        bAbsolute: BOOL,
        lpConsoleWindow: *const SMALL_RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleOutputCharacterA(
        hConsoleOutput: HANDLE,
        lpCharacter: LPCSTR,
        nLength: DWORD,
        dwWriteCoord: COORD,
        lpNumberOfCharsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleOutputCharacterW(
        hConsoleOutput: HANDLE,
        lpCharacter: LPCWSTR,
        nLength: DWORD,
        dwWriteCoord: COORD,
        lpNumberOfCharsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleOutputAttribute(
        hConsoleOutput: HANDLE,
        lpAttribute: *const WORD,
        nLength: DWORD,
        dwWriteCoord: COORD,
        lpNumberOfAttrsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleOutputCharacterA(
        hConsoleOutput: HANDLE,
        lpCharacter: LPSTR,
        nLength: DWORD,
        dwReadCoord: COORD,
        lpNumberOfCharsRead: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleOutputCharacterW(
        hConsoleOutput: HANDLE,
        lpCharacter: LPWSTR,
        nLength: DWORD,
        dwReadCoord: COORD,
        lpNumberOfCharsRead: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleOutputAttribute(
        hConsoleOutput: HANDLE,
        lpAttribute: LPWORD,
        nLength: DWORD,
        dwReadCoord: COORD,
        lpNumberOfAttrsRead: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleInputA(
        hConsoleInput: HANDLE,
        lpBuffer: *const INPUT_RECORD,
        nLength: DWORD,
        lpNumberOfEventsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleInputW(
        hConsoleInput: HANDLE,
        lpBuffer: *const INPUT_RECORD,
        nLength: DWORD,
        lpNumberOfEventsWritten: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ScrollConsoleScreenBufferA(
        hConsoleOutput: HANDLE,
        lpScrollRectangle: *const SMALL_RECT,
        lpClipRectangle: *const SMALL_RECT,
        dwDestinationOrigin: COORD,
        lpFill: *const CHAR_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ScrollConsoleScreenBufferW(
        hConsoleOutput: HANDLE,
        lpScrollRectangle: *const SMALL_RECT,
        lpClipRectangle: *const SMALL_RECT,
        dwDestinationOrigin: COORD,
        lpFill: *const CHAR_INFO,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleOutputA(
        hConsoleOutput: HANDLE,
        lpBuffer: *const CHAR_INFO,
        dwBufferSize: COORD,
        dwBufferCoord: COORD,
        lpWriteRegion: PSMALL_RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WriteConsoleOutputW(
        hConsoleOutput: HANDLE,
        lpBuffer: *const CHAR_INFO,
        dwBufferSize: COORD,
        dwBufferCoord: COORD,
        lpWriteRegion: PSMALL_RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleOutputA(
        hConsoleOutput: HANDLE,
        lpBuffer: PCHAR_INFO,
        dwBufferSize: COORD,
        dwBufferCoord: COORD,
        lpReadRegion: PSMALL_RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ReadConsoleOutputW(
        hConsoleOutput: HANDLE,
        lpBuffer: PCHAR_INFO,
        dwBufferSize: COORD,
        dwBufferCoord: COORD,
        lpReadRegion: PSMALL_RECT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleTitleA(lpConsoleTitle: LPSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleTitleW(lpConsoleTitle: LPWSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleOriginalTitleA(lpConsoleTitle: LPSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleOriginalTitleW(lpConsoleTitle: LPWSTR, nSize: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn SetConsoleTitleA(lpConsoleTitle: LPCSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleTitleW(lpConsoleTitle: LPCWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleFontSize(hConsoleOutput: HANDLE, nFont: DWORD) -> COORD;
}
unsafe extern "C" {
    pub fn GetCurrentConsoleFont(
        hConsoleOutput: HANDLE,
        bMaximumWindow: BOOL,
        lpConsoleCurrentFont: PCONSOLE_FONT_INFO,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_FONT_INFOEX {
    pub cbSize: ULONG,
    pub nFont: DWORD,
    pub dwFontSize: COORD,
    pub FontFamily: UINT,
    pub FontWeight: UINT,
    pub FaceName: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_FONT_INFOEX"][::std::mem::size_of::<_CONSOLE_FONT_INFOEX>() - 84usize];
    ["Alignment of _CONSOLE_FONT_INFOEX"][::std::mem::align_of::<_CONSOLE_FONT_INFOEX>() - 4usize];
    ["Offset of field: _CONSOLE_FONT_INFOEX::cbSize"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFOEX, cbSize) - 0usize];
    ["Offset of field: _CONSOLE_FONT_INFOEX::nFont"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFOEX, nFont) - 4usize];
    ["Offset of field: _CONSOLE_FONT_INFOEX::dwFontSize"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFOEX, dwFontSize) - 8usize];
    ["Offset of field: _CONSOLE_FONT_INFOEX::FontFamily"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFOEX, FontFamily) - 12usize];
    ["Offset of field: _CONSOLE_FONT_INFOEX::FontWeight"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFOEX, FontWeight) - 16usize];
    ["Offset of field: _CONSOLE_FONT_INFOEX::FaceName"]
        [::std::mem::offset_of!(_CONSOLE_FONT_INFOEX, FaceName) - 20usize];
};
pub type CONSOLE_FONT_INFOEX = _CONSOLE_FONT_INFOEX;
pub type PCONSOLE_FONT_INFOEX = *mut _CONSOLE_FONT_INFOEX;
unsafe extern "C" {
    pub fn GetCurrentConsoleFontEx(
        hConsoleOutput: HANDLE,
        bMaximumWindow: BOOL,
        lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetCurrentConsoleFontEx(
        hConsoleOutput: HANDLE,
        bMaximumWindow: BOOL,
        lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX,
    ) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_SELECTION_INFO {
    pub dwFlags: DWORD,
    pub dwSelectionAnchor: COORD,
    pub srSelection: SMALL_RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_SELECTION_INFO"][::std::mem::size_of::<_CONSOLE_SELECTION_INFO>() - 16usize];
    ["Alignment of _CONSOLE_SELECTION_INFO"]
        [::std::mem::align_of::<_CONSOLE_SELECTION_INFO>() - 4usize];
    ["Offset of field: _CONSOLE_SELECTION_INFO::dwFlags"]
        [::std::mem::offset_of!(_CONSOLE_SELECTION_INFO, dwFlags) - 0usize];
    ["Offset of field: _CONSOLE_SELECTION_INFO::dwSelectionAnchor"]
        [::std::mem::offset_of!(_CONSOLE_SELECTION_INFO, dwSelectionAnchor) - 4usize];
    ["Offset of field: _CONSOLE_SELECTION_INFO::srSelection"]
        [::std::mem::offset_of!(_CONSOLE_SELECTION_INFO, srSelection) - 8usize];
};
pub type CONSOLE_SELECTION_INFO = _CONSOLE_SELECTION_INFO;
pub type PCONSOLE_SELECTION_INFO = *mut _CONSOLE_SELECTION_INFO;
unsafe extern "C" {
    pub fn GetConsoleSelectionInfo(lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO) -> BOOL;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONSOLE_HISTORY_INFO {
    pub cbSize: UINT,
    pub HistoryBufferSize: UINT,
    pub NumberOfHistoryBuffers: UINT,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONSOLE_HISTORY_INFO"][::std::mem::size_of::<_CONSOLE_HISTORY_INFO>() - 16usize];
    ["Alignment of _CONSOLE_HISTORY_INFO"]
        [::std::mem::align_of::<_CONSOLE_HISTORY_INFO>() - 4usize];
    ["Offset of field: _CONSOLE_HISTORY_INFO::cbSize"]
        [::std::mem::offset_of!(_CONSOLE_HISTORY_INFO, cbSize) - 0usize];
    ["Offset of field: _CONSOLE_HISTORY_INFO::HistoryBufferSize"]
        [::std::mem::offset_of!(_CONSOLE_HISTORY_INFO, HistoryBufferSize) - 4usize];
    ["Offset of field: _CONSOLE_HISTORY_INFO::NumberOfHistoryBuffers"]
        [::std::mem::offset_of!(_CONSOLE_HISTORY_INFO, NumberOfHistoryBuffers) - 8usize];
    ["Offset of field: _CONSOLE_HISTORY_INFO::dwFlags"]
        [::std::mem::offset_of!(_CONSOLE_HISTORY_INFO, dwFlags) - 12usize];
};
pub type CONSOLE_HISTORY_INFO = _CONSOLE_HISTORY_INFO;
pub type PCONSOLE_HISTORY_INFO = *mut _CONSOLE_HISTORY_INFO;
unsafe extern "C" {
    pub fn GetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleDisplayMode(lpModeFlags: LPDWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleDisplayMode(
        hConsoleOutput: HANDLE,
        dwFlags: DWORD,
        lpNewScreenBufferDimensions: PCOORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleWindow() -> HWND;
}
unsafe extern "C" {
    pub fn AddConsoleAliasA(Source: LPSTR, Target: LPSTR, ExeName: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn AddConsoleAliasW(Source: LPWSTR, Target: LPWSTR, ExeName: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleAliasA(
        Source: LPSTR,
        TargetBuffer: LPSTR,
        TargetBufferLength: DWORD,
        ExeName: LPSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasW(
        Source: LPWSTR,
        TargetBuffer: LPWSTR,
        TargetBufferLength: DWORD,
        ExeName: LPWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasesLengthA(ExeName: LPSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasesLengthW(ExeName: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasExesLengthA() -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasExesLengthW() -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasesA(
        AliasBuffer: LPSTR,
        AliasBufferLength: DWORD,
        ExeName: LPSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasesW(
        AliasBuffer: LPWSTR,
        AliasBufferLength: DWORD,
        ExeName: LPWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasExesA(ExeNameBuffer: LPSTR, ExeNameBufferLength: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleAliasExesW(ExeNameBuffer: LPWSTR, ExeNameBufferLength: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ExpungeConsoleCommandHistoryA(ExeName: LPSTR);
}
unsafe extern "C" {
    pub fn ExpungeConsoleCommandHistoryW(ExeName: LPWSTR);
}
unsafe extern "C" {
    pub fn SetConsoleNumberOfCommandsA(Number: DWORD, ExeName: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn SetConsoleNumberOfCommandsW(Number: DWORD, ExeName: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn GetConsoleCommandHistoryLengthA(ExeName: LPSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleCommandHistoryLengthW(ExeName: LPWSTR) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleCommandHistoryA(
        Commands: LPSTR,
        CommandBufferLength: DWORD,
        ExeName: LPSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleCommandHistoryW(
        Commands: LPWSTR,
        CommandBufferLength: DWORD,
        ExeName: LPWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetConsoleProcessList(lpdwProcessList: LPDWORD, dwProcessCount: DWORD) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagVS_FIXEDFILEINFO {
    pub dwSignature: DWORD,
    pub dwStrucVersion: DWORD,
    pub dwFileVersionMS: DWORD,
    pub dwFileVersionLS: DWORD,
    pub dwProductVersionMS: DWORD,
    pub dwProductVersionLS: DWORD,
    pub dwFileFlagsMask: DWORD,
    pub dwFileFlags: DWORD,
    pub dwFileOS: DWORD,
    pub dwFileType: DWORD,
    pub dwFileSubtype: DWORD,
    pub dwFileDateMS: DWORD,
    pub dwFileDateLS: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagVS_FIXEDFILEINFO"][::std::mem::size_of::<tagVS_FIXEDFILEINFO>() - 52usize];
    ["Alignment of tagVS_FIXEDFILEINFO"][::std::mem::align_of::<tagVS_FIXEDFILEINFO>() - 4usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwSignature"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwSignature) - 0usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwStrucVersion"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwStrucVersion) - 4usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileVersionMS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileVersionMS) - 8usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileVersionLS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileVersionLS) - 12usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwProductVersionMS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwProductVersionMS) - 16usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwProductVersionLS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwProductVersionLS) - 20usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileFlagsMask"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileFlagsMask) - 24usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileFlags"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileFlags) - 28usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileOS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileOS) - 32usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileType"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileType) - 36usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileSubtype"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileSubtype) - 40usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileDateMS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileDateMS) - 44usize];
    ["Offset of field: tagVS_FIXEDFILEINFO::dwFileDateLS"]
        [::std::mem::offset_of!(tagVS_FIXEDFILEINFO, dwFileDateLS) - 48usize];
};
pub type VS_FIXEDFILEINFO = tagVS_FIXEDFILEINFO;
unsafe extern "C" {
    pub fn VerFindFileA(
        uFlags: DWORD,
        szFileName: LPCSTR,
        szWinDir: LPCSTR,
        szAppDir: LPCSTR,
        szCurDir: LPSTR,
        puCurDirLen: PUINT,
        szDestDir: LPSTR,
        puDestDirLen: PUINT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn VerFindFileW(
        uFlags: DWORD,
        szFileName: LPCWSTR,
        szWinDir: LPCWSTR,
        szAppDir: LPCWSTR,
        szCurDir: LPWSTR,
        puCurDirLen: PUINT,
        szDestDir: LPWSTR,
        puDestDirLen: PUINT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn VerInstallFileA(
        uFlags: DWORD,
        szSrcFileName: LPCSTR,
        szDestFileName: LPCSTR,
        szSrcDir: LPCSTR,
        szDestDir: LPCSTR,
        szCurDir: LPCSTR,
        szTmpFile: LPSTR,
        puTmpFileLen: PUINT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn VerInstallFileW(
        uFlags: DWORD,
        szSrcFileName: LPCWSTR,
        szDestFileName: LPCWSTR,
        szSrcDir: LPCWSTR,
        szDestDir: LPCWSTR,
        szCurDir: LPCWSTR,
        szTmpFile: LPWSTR,
        puTmpFileLen: PUINT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoSizeA(lptstrFilename: LPCSTR, lpdwHandle: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoSizeW(lptstrFilename: LPCWSTR, lpdwHandle: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoA(
        lptstrFilename: LPCSTR,
        dwHandle: DWORD,
        dwLen: DWORD,
        lpData: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoW(
        lptstrFilename: LPCWSTR,
        dwHandle: DWORD,
        dwLen: DWORD,
        lpData: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoSizeExA(
        dwFlags: DWORD,
        lpwstrFilename: LPCSTR,
        lpdwHandle: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoSizeExW(
        dwFlags: DWORD,
        lpwstrFilename: LPCWSTR,
        lpdwHandle: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoExA(
        dwFlags: DWORD,
        lpwstrFilename: LPCSTR,
        dwHandle: DWORD,
        dwLen: DWORD,
        lpData: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetFileVersionInfoExW(
        dwFlags: DWORD,
        lpwstrFilename: LPCWSTR,
        dwHandle: DWORD,
        dwLen: DWORD,
        lpData: LPVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VerLanguageNameA(wLang: DWORD, szLang: LPSTR, cchLang: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn VerLanguageNameW(wLang: DWORD, szLang: LPWSTR, cchLang: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn VerQueryValueA(
        pBlock: LPCVOID,
        lpSubBlock: LPCSTR,
        lplpBuffer: *mut LPVOID,
        puLen: PUINT,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn VerQueryValueW(
        pBlock: LPCVOID,
        lpSubBlock: LPCWSTR,
        lplpBuffer: *mut LPVOID,
        puLen: PUINT,
    ) -> BOOL;
}
pub type LSTATUS = LONG;
pub type REGSAM = ACCESS_MASK;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct val_context {
    pub valuelen: ::std::os::raw::c_int,
    pub value_context: LPVOID,
    pub val_buff_ptr: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of val_context"][::std::mem::size_of::<val_context>() - 24usize];
    ["Alignment of val_context"][::std::mem::align_of::<val_context>() - 8usize];
    ["Offset of field: val_context::valuelen"]
        [::std::mem::offset_of!(val_context, valuelen) - 0usize];
    ["Offset of field: val_context::value_context"]
        [::std::mem::offset_of!(val_context, value_context) - 8usize];
    ["Offset of field: val_context::val_buff_ptr"]
        [::std::mem::offset_of!(val_context, val_buff_ptr) - 16usize];
};
pub type PVALCONTEXT = *mut val_context;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pvalueA {
    pub pv_valuename: LPSTR,
    pub pv_valuelen: ::std::os::raw::c_int,
    pub pv_value_context: LPVOID,
    pub pv_type: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pvalueA"][::std::mem::size_of::<pvalueA>() - 32usize];
    ["Alignment of pvalueA"][::std::mem::align_of::<pvalueA>() - 8usize];
    ["Offset of field: pvalueA::pv_valuename"]
        [::std::mem::offset_of!(pvalueA, pv_valuename) - 0usize];
    ["Offset of field: pvalueA::pv_valuelen"]
        [::std::mem::offset_of!(pvalueA, pv_valuelen) - 8usize];
    ["Offset of field: pvalueA::pv_value_context"]
        [::std::mem::offset_of!(pvalueA, pv_value_context) - 16usize];
    ["Offset of field: pvalueA::pv_type"][::std::mem::offset_of!(pvalueA, pv_type) - 24usize];
};
pub type PVALUEA = pvalueA;
pub type PPVALUEA = *mut pvalueA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pvalueW {
    pub pv_valuename: LPWSTR,
    pub pv_valuelen: ::std::os::raw::c_int,
    pub pv_value_context: LPVOID,
    pub pv_type: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pvalueW"][::std::mem::size_of::<pvalueW>() - 32usize];
    ["Alignment of pvalueW"][::std::mem::align_of::<pvalueW>() - 8usize];
    ["Offset of field: pvalueW::pv_valuename"]
        [::std::mem::offset_of!(pvalueW, pv_valuename) - 0usize];
    ["Offset of field: pvalueW::pv_valuelen"]
        [::std::mem::offset_of!(pvalueW, pv_valuelen) - 8usize];
    ["Offset of field: pvalueW::pv_value_context"]
        [::std::mem::offset_of!(pvalueW, pv_value_context) - 16usize];
    ["Offset of field: pvalueW::pv_type"][::std::mem::offset_of!(pvalueW, pv_type) - 24usize];
};
pub type PVALUEW = pvalueW;
pub type PPVALUEW = *mut pvalueW;
pub type PVALUE = PVALUEA;
pub type PPVALUE = PPVALUEA;
pub type PQUERYHANDLER = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: LPVOID,
        arg2: PVALCONTEXT,
        arg3: DWORD,
        arg4: LPVOID,
        arg5: *mut DWORD,
        arg6: DWORD,
    ) -> DWORD,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct provider_info {
    pub pi_R0_1val: PQUERYHANDLER,
    pub pi_R0_allvals: PQUERYHANDLER,
    pub pi_R3_1val: PQUERYHANDLER,
    pub pi_R3_allvals: PQUERYHANDLER,
    pub pi_flags: DWORD,
    pub pi_key_context: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of provider_info"][::std::mem::size_of::<provider_info>() - 48usize];
    ["Alignment of provider_info"][::std::mem::align_of::<provider_info>() - 8usize];
    ["Offset of field: provider_info::pi_R0_1val"]
        [::std::mem::offset_of!(provider_info, pi_R0_1val) - 0usize];
    ["Offset of field: provider_info::pi_R0_allvals"]
        [::std::mem::offset_of!(provider_info, pi_R0_allvals) - 8usize];
    ["Offset of field: provider_info::pi_R3_1val"]
        [::std::mem::offset_of!(provider_info, pi_R3_1val) - 16usize];
    ["Offset of field: provider_info::pi_R3_allvals"]
        [::std::mem::offset_of!(provider_info, pi_R3_allvals) - 24usize];
    ["Offset of field: provider_info::pi_flags"]
        [::std::mem::offset_of!(provider_info, pi_flags) - 32usize];
    ["Offset of field: provider_info::pi_key_context"]
        [::std::mem::offset_of!(provider_info, pi_key_context) - 40usize];
};
pub type REG_PROVIDER = provider_info;
pub type PPROVIDER = *mut provider_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct value_entA {
    pub ve_valuename: LPSTR,
    pub ve_valuelen: DWORD,
    pub ve_valueptr: DWORD_PTR,
    pub ve_type: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of value_entA"][::std::mem::size_of::<value_entA>() - 32usize];
    ["Alignment of value_entA"][::std::mem::align_of::<value_entA>() - 8usize];
    ["Offset of field: value_entA::ve_valuename"]
        [::std::mem::offset_of!(value_entA, ve_valuename) - 0usize];
    ["Offset of field: value_entA::ve_valuelen"]
        [::std::mem::offset_of!(value_entA, ve_valuelen) - 8usize];
    ["Offset of field: value_entA::ve_valueptr"]
        [::std::mem::offset_of!(value_entA, ve_valueptr) - 16usize];
    ["Offset of field: value_entA::ve_type"][::std::mem::offset_of!(value_entA, ve_type) - 24usize];
};
pub type VALENTA = value_entA;
pub type PVALENTA = *mut value_entA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct value_entW {
    pub ve_valuename: LPWSTR,
    pub ve_valuelen: DWORD,
    pub ve_valueptr: DWORD_PTR,
    pub ve_type: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of value_entW"][::std::mem::size_of::<value_entW>() - 32usize];
    ["Alignment of value_entW"][::std::mem::align_of::<value_entW>() - 8usize];
    ["Offset of field: value_entW::ve_valuename"]
        [::std::mem::offset_of!(value_entW, ve_valuename) - 0usize];
    ["Offset of field: value_entW::ve_valuelen"]
        [::std::mem::offset_of!(value_entW, ve_valuelen) - 8usize];
    ["Offset of field: value_entW::ve_valueptr"]
        [::std::mem::offset_of!(value_entW, ve_valueptr) - 16usize];
    ["Offset of field: value_entW::ve_type"][::std::mem::offset_of!(value_entW, ve_type) - 24usize];
};
pub type VALENTW = value_entW;
pub type PVALENTW = *mut value_entW;
pub type VALENT = VALENTA;
pub type PVALENT = PVALENTA;
unsafe extern "C" {
    pub fn RegCloseKey(hKey: HKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOverridePredefKey(hKey: HKEY, hNewHKey: HKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenUserClassesRoot(
        hToken: HANDLE,
        dwOptions: DWORD,
        samDesired: REGSAM,
        phkResult: PHKEY,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenCurrentUser(samDesired: REGSAM, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDisablePredefinedCache() -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDisablePredefinedCacheEx() -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegConnectRegistryA(lpMachineName: LPCSTR, hKey: HKEY, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegConnectRegistryW(lpMachineName: LPCWSTR, hKey: HKEY, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegConnectRegistryExA(
        lpMachineName: LPCSTR,
        hKey: HKEY,
        Flags: ULONG,
        phkResult: PHKEY,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegConnectRegistryExW(
        lpMachineName: LPCWSTR,
        hKey: HKEY,
        Flags: ULONG,
        phkResult: PHKEY,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCreateKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCreateKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCreateKeyExA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        Reserved: DWORD,
        lpClass: LPSTR,
        dwOptions: DWORD,
        samDesired: REGSAM,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        phkResult: PHKEY,
        lpdwDisposition: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCreateKeyExW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        Reserved: DWORD,
        lpClass: LPWSTR,
        dwOptions: DWORD,
        samDesired: REGSAM,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        phkResult: PHKEY,
        lpdwDisposition: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCreateKeyTransactedA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        Reserved: DWORD,
        lpClass: LPSTR,
        dwOptions: DWORD,
        samDesired: REGSAM,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        phkResult: PHKEY,
        lpdwDisposition: LPDWORD,
        hTransaction: HANDLE,
        pExtendedParemeter: PVOID,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCreateKeyTransactedW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        Reserved: DWORD,
        lpClass: LPWSTR,
        dwOptions: DWORD,
        samDesired: REGSAM,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        phkResult: PHKEY,
        lpdwDisposition: LPDWORD,
        hTransaction: HANDLE,
        pExtendedParemeter: PVOID,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyA(hKey: HKEY, lpSubKey: LPCSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyW(hKey: HKEY, lpSubKey: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyExA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        samDesired: REGSAM,
        Reserved: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyExW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        samDesired: REGSAM,
        Reserved: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyTransactedA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        samDesired: REGSAM,
        Reserved: DWORD,
        hTransaction: HANDLE,
        pExtendedParameter: PVOID,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyTransactedW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        samDesired: REGSAM,
        Reserved: DWORD,
        hTransaction: HANDLE,
        pExtendedParameter: PVOID,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDisableReflectionKey(hBase: HKEY) -> LONG;
}
unsafe extern "C" {
    pub fn RegEnableReflectionKey(hBase: HKEY) -> LONG;
}
unsafe extern "C" {
    pub fn RegQueryReflectionKey(hBase: HKEY, bIsReflectionDisabled: *mut BOOL) -> LONG;
}
unsafe extern "C" {
    pub fn RegDeleteValueA(hKey: HKEY, lpValueName: LPCSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteValueW(hKey: HKEY, lpValueName: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegEnumKeyA(hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, cchName: DWORD) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegEnumKeyW(hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, cchName: DWORD) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegEnumKeyExA(
        hKey: HKEY,
        dwIndex: DWORD,
        lpName: LPSTR,
        lpcchName: LPDWORD,
        lpReserved: LPDWORD,
        lpClass: LPSTR,
        lpcchClass: LPDWORD,
        lpftLastWriteTime: PFILETIME,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegEnumKeyExW(
        hKey: HKEY,
        dwIndex: DWORD,
        lpName: LPWSTR,
        lpcchName: LPDWORD,
        lpReserved: LPDWORD,
        lpClass: LPWSTR,
        lpcchClass: LPDWORD,
        lpftLastWriteTime: PFILETIME,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegEnumValueA(
        hKey: HKEY,
        dwIndex: DWORD,
        lpValueName: LPSTR,
        lpcchValueName: LPDWORD,
        lpReserved: LPDWORD,
        lpType: LPDWORD,
        lpData: LPBYTE,
        lpcbData: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegEnumValueW(
        hKey: HKEY,
        dwIndex: DWORD,
        lpValueName: LPWSTR,
        lpcchValueName: LPDWORD,
        lpReserved: LPDWORD,
        lpType: LPDWORD,
        lpData: LPBYTE,
        lpcbData: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegFlushKey(hKey: HKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegGetKeySecurity(
        hKey: HKEY,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
        lpcbSecurityDescriptor: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpFile: LPCSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegNotifyChangeKeyValue(
        hKey: HKEY,
        bWatchSubtree: BOOL,
        dwNotifyFilter: DWORD,
        hEvent: HANDLE,
        fAsynchronous: BOOL,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenKeyExA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        ulOptions: DWORD,
        samDesired: REGSAM,
        phkResult: PHKEY,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenKeyExW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        ulOptions: DWORD,
        samDesired: REGSAM,
        phkResult: PHKEY,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenKeyTransactedA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        ulOptions: DWORD,
        samDesired: REGSAM,
        phkResult: PHKEY,
        hTransaction: HANDLE,
        pExtendedParemeter: PVOID,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegOpenKeyTransactedW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        ulOptions: DWORD,
        samDesired: REGSAM,
        phkResult: PHKEY,
        hTransaction: HANDLE,
        pExtendedParemeter: PVOID,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryInfoKeyA(
        hKey: HKEY,
        lpClass: LPSTR,
        lpcchClass: LPDWORD,
        lpReserved: LPDWORD,
        lpcSubKeys: LPDWORD,
        lpcbMaxSubKeyLen: LPDWORD,
        lpcbMaxClassLen: LPDWORD,
        lpcValues: LPDWORD,
        lpcbMaxValueNameLen: LPDWORD,
        lpcbMaxValueLen: LPDWORD,
        lpcbSecurityDescriptor: LPDWORD,
        lpftLastWriteTime: PFILETIME,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryInfoKeyW(
        hKey: HKEY,
        lpClass: LPWSTR,
        lpcchClass: LPDWORD,
        lpReserved: LPDWORD,
        lpcSubKeys: LPDWORD,
        lpcbMaxSubKeyLen: LPDWORD,
        lpcbMaxClassLen: LPDWORD,
        lpcValues: LPDWORD,
        lpcbMaxValueNameLen: LPDWORD,
        lpcbMaxValueLen: LPDWORD,
        lpcbSecurityDescriptor: LPDWORD,
        lpftLastWriteTime: PFILETIME,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryValueA(hKey: HKEY, lpSubKey: LPCSTR, lpData: LPSTR, lpcbData: PLONG) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryValueW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        lpData: LPWSTR,
        lpcbData: PLONG,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryMultipleValuesA(
        hKey: HKEY,
        val_list: PVALENTA,
        num_vals: DWORD,
        lpValueBuf: LPSTR,
        ldwTotsize: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryMultipleValuesW(
        hKey: HKEY,
        val_list: PVALENTW,
        num_vals: DWORD,
        lpValueBuf: LPWSTR,
        ldwTotsize: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryValueExA(
        hKey: HKEY,
        lpValueName: LPCSTR,
        lpReserved: LPDWORD,
        lpType: LPDWORD,
        lpData: LPBYTE,
        lpcbData: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegQueryValueExW(
        hKey: HKEY,
        lpValueName: LPCWSTR,
        lpReserved: LPDWORD,
        lpType: LPDWORD,
        lpData: LPBYTE,
        lpcbData: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegReplaceKeyA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        lpNewFile: LPCSTR,
        lpOldFile: LPCSTR,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegReplaceKeyW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        lpNewFile: LPCWSTR,
        lpOldFile: LPCWSTR,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegRestoreKeyA(hKey: HKEY, lpFile: LPCSTR, dwFlags: DWORD) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegRestoreKeyW(hKey: HKEY, lpFile: LPCWSTR, dwFlags: DWORD) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegRenameKey(hKey: HKEY, lpSubKeyName: LPCWSTR, lpNewKeyName: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSaveKeyA(
        hKey: HKEY,
        lpFile: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSaveKeyW(
        hKey: HKEY,
        lpFile: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetKeySecurity(
        hKey: HKEY,
        SecurityInformation: SECURITY_INFORMATION,
        pSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetValueA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        dwType: DWORD,
        lpData: LPCSTR,
        cbData: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetValueW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        dwType: DWORD,
        lpData: LPCWSTR,
        cbData: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetValueExA(
        hKey: HKEY,
        lpValueName: LPCSTR,
        Reserved: DWORD,
        dwType: DWORD,
        lpData: *const BYTE,
        cbData: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetValueExW(
        hKey: HKEY,
        lpValueName: LPCWSTR,
        Reserved: DWORD,
        dwType: DWORD,
        lpData: *const BYTE,
        cbData: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegUnLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegUnLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetKeyValueA(
        hKey: HKEY,
        lpSubKey: LPCSTR,
        lpValueName: LPCSTR,
        dwType: DWORD,
        lpData: LPCVOID,
        cbData: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSetKeyValueW(
        hKey: HKEY,
        lpSubKey: LPCWSTR,
        lpValueName: LPCWSTR,
        dwType: DWORD,
        lpData: LPCVOID,
        cbData: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteTreeA(hKey: HKEY, lpSubKey: LPCSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegDeleteTreeW(hKey: HKEY, lpSubKey: LPCWSTR) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCopyTreeA(hKeySrc: HKEY, lpSubKey: LPCSTR, hKeyDest: HKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegGetValueA(
        hkey: HKEY,
        lpSubKey: LPCSTR,
        lpValue: LPCSTR,
        dwFlags: DWORD,
        pdwType: LPDWORD,
        pvData: PVOID,
        pcbData: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegGetValueW(
        hkey: HKEY,
        lpSubKey: LPCWSTR,
        lpValue: LPCWSTR,
        dwFlags: DWORD,
        pdwType: LPDWORD,
        pvData: PVOID,
        pcbData: LPDWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegCopyTreeW(hKeySrc: HKEY, lpSubKey: LPCWSTR, hKeyDest: HKEY) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegLoadMUIStringA(
        hKey: HKEY,
        pszValue: LPCSTR,
        pszOutBuf: LPSTR,
        cbOutBuf: DWORD,
        pcbData: LPDWORD,
        Flags: DWORD,
        pszDirectory: LPCSTR,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegLoadMUIStringW(
        hKey: HKEY,
        pszValue: LPCWSTR,
        pszOutBuf: LPWSTR,
        cbOutBuf: DWORD,
        pcbData: LPDWORD,
        Flags: DWORD,
        pszDirectory: LPCWSTR,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegLoadAppKeyA(
        lpFile: LPCSTR,
        phkResult: PHKEY,
        samDesired: REGSAM,
        dwOptions: DWORD,
        Reserved: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegLoadAppKeyW(
        lpFile: LPCWSTR,
        phkResult: PHKEY,
        samDesired: REGSAM,
        dwOptions: DWORD,
        Reserved: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn InitiateSystemShutdownA(
        lpMachineName: LPSTR,
        lpMessage: LPSTR,
        dwTimeout: DWORD,
        bForceAppsClosed: BOOL,
        bRebootAfterShutdown: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitiateSystemShutdownW(
        lpMachineName: LPWSTR,
        lpMessage: LPWSTR,
        dwTimeout: DWORD,
        bForceAppsClosed: BOOL,
        bRebootAfterShutdown: BOOL,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn AbortSystemShutdownA(lpMachineName: LPSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn AbortSystemShutdownW(lpMachineName: LPWSTR) -> BOOL;
}
unsafe extern "C" {
    pub fn InitiateSystemShutdownExA(
        lpMachineName: LPSTR,
        lpMessage: LPSTR,
        dwTimeout: DWORD,
        bForceAppsClosed: BOOL,
        bRebootAfterShutdown: BOOL,
        dwReason: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitiateSystemShutdownExW(
        lpMachineName: LPWSTR,
        lpMessage: LPWSTR,
        dwTimeout: DWORD,
        bForceAppsClosed: BOOL,
        bRebootAfterShutdown: BOOL,
        dwReason: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn InitiateShutdownA(
        lpMachineName: LPSTR,
        lpMessage: LPSTR,
        dwGracePeriod: DWORD,
        dwShutdownFlags: DWORD,
        dwReason: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn InitiateShutdownW(
        lpMachineName: LPWSTR,
        lpMessage: LPWSTR,
        dwGracePeriod: DWORD,
        dwShutdownFlags: DWORD,
        dwReason: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn CheckForHiberboot(pHiberboot: PBOOLEAN, bClearFlag: BOOLEAN) -> DWORD;
}
unsafe extern "C" {
    pub fn RegSaveKeyExA(
        hKey: HKEY,
        lpFile: LPCSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        Flags: DWORD,
    ) -> LSTATUS;
}
unsafe extern "C" {
    pub fn RegSaveKeyExW(
        hKey: HKEY,
        lpFile: LPCWSTR,
        lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
        Flags: DWORD,
    ) -> LSTATUS;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NETRESOURCEA {
    pub dwScope: DWORD,
    pub dwType: DWORD,
    pub dwDisplayType: DWORD,
    pub dwUsage: DWORD,
    pub lpLocalName: LPSTR,
    pub lpRemoteName: LPSTR,
    pub lpComment: LPSTR,
    pub lpProvider: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NETRESOURCEA"][::std::mem::size_of::<_NETRESOURCEA>() - 48usize];
    ["Alignment of _NETRESOURCEA"][::std::mem::align_of::<_NETRESOURCEA>() - 8usize];
    ["Offset of field: _NETRESOURCEA::dwScope"]
        [::std::mem::offset_of!(_NETRESOURCEA, dwScope) - 0usize];
    ["Offset of field: _NETRESOURCEA::dwType"]
        [::std::mem::offset_of!(_NETRESOURCEA, dwType) - 4usize];
    ["Offset of field: _NETRESOURCEA::dwDisplayType"]
        [::std::mem::offset_of!(_NETRESOURCEA, dwDisplayType) - 8usize];
    ["Offset of field: _NETRESOURCEA::dwUsage"]
        [::std::mem::offset_of!(_NETRESOURCEA, dwUsage) - 12usize];
    ["Offset of field: _NETRESOURCEA::lpLocalName"]
        [::std::mem::offset_of!(_NETRESOURCEA, lpLocalName) - 16usize];
    ["Offset of field: _NETRESOURCEA::lpRemoteName"]
        [::std::mem::offset_of!(_NETRESOURCEA, lpRemoteName) - 24usize];
    ["Offset of field: _NETRESOURCEA::lpComment"]
        [::std::mem::offset_of!(_NETRESOURCEA, lpComment) - 32usize];
    ["Offset of field: _NETRESOURCEA::lpProvider"]
        [::std::mem::offset_of!(_NETRESOURCEA, lpProvider) - 40usize];
};
pub type NETRESOURCEA = _NETRESOURCEA;
pub type LPNETRESOURCEA = *mut _NETRESOURCEA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NETRESOURCEW {
    pub dwScope: DWORD,
    pub dwType: DWORD,
    pub dwDisplayType: DWORD,
    pub dwUsage: DWORD,
    pub lpLocalName: LPWSTR,
    pub lpRemoteName: LPWSTR,
    pub lpComment: LPWSTR,
    pub lpProvider: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NETRESOURCEW"][::std::mem::size_of::<_NETRESOURCEW>() - 48usize];
    ["Alignment of _NETRESOURCEW"][::std::mem::align_of::<_NETRESOURCEW>() - 8usize];
    ["Offset of field: _NETRESOURCEW::dwScope"]
        [::std::mem::offset_of!(_NETRESOURCEW, dwScope) - 0usize];
    ["Offset of field: _NETRESOURCEW::dwType"]
        [::std::mem::offset_of!(_NETRESOURCEW, dwType) - 4usize];
    ["Offset of field: _NETRESOURCEW::dwDisplayType"]
        [::std::mem::offset_of!(_NETRESOURCEW, dwDisplayType) - 8usize];
    ["Offset of field: _NETRESOURCEW::dwUsage"]
        [::std::mem::offset_of!(_NETRESOURCEW, dwUsage) - 12usize];
    ["Offset of field: _NETRESOURCEW::lpLocalName"]
        [::std::mem::offset_of!(_NETRESOURCEW, lpLocalName) - 16usize];
    ["Offset of field: _NETRESOURCEW::lpRemoteName"]
        [::std::mem::offset_of!(_NETRESOURCEW, lpRemoteName) - 24usize];
    ["Offset of field: _NETRESOURCEW::lpComment"]
        [::std::mem::offset_of!(_NETRESOURCEW, lpComment) - 32usize];
    ["Offset of field: _NETRESOURCEW::lpProvider"]
        [::std::mem::offset_of!(_NETRESOURCEW, lpProvider) - 40usize];
};
pub type NETRESOURCEW = _NETRESOURCEW;
pub type LPNETRESOURCEW = *mut _NETRESOURCEW;
pub type NETRESOURCE = NETRESOURCEA;
pub type LPNETRESOURCE = LPNETRESOURCEA;
unsafe extern "C" {
    pub fn WNetAddConnectionA(
        lpRemoteName: LPCSTR,
        lpPassword: LPCSTR,
        lpLocalName: LPCSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnectionW(
        lpRemoteName: LPCWSTR,
        lpPassword: LPCWSTR,
        lpLocalName: LPCWSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnection2A(
        lpNetResource: LPNETRESOURCEA,
        lpPassword: LPCSTR,
        lpUserName: LPCSTR,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnection2W(
        lpNetResource: LPNETRESOURCEW,
        lpPassword: LPCWSTR,
        lpUserName: LPCWSTR,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnection3A(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEA,
        lpPassword: LPCSTR,
        lpUserName: LPCSTR,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnection3W(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEW,
        lpPassword: LPCWSTR,
        lpUserName: LPCWSTR,
        dwFlags: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnection4A(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEA,
        pAuthBuffer: PVOID,
        cbAuthBuffer: DWORD,
        dwFlags: DWORD,
        lpUseOptions: PBYTE,
        cbUseOptions: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetAddConnection4W(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEW,
        pAuthBuffer: PVOID,
        cbAuthBuffer: DWORD,
        dwFlags: DWORD,
        lpUseOptions: PBYTE,
        cbUseOptions: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetCancelConnectionA(lpName: LPCSTR, fForce: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetCancelConnectionW(lpName: LPCWSTR, fForce: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetCancelConnection2A(lpName: LPCSTR, dwFlags: DWORD, fForce: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetCancelConnection2W(lpName: LPCWSTR, dwFlags: DWORD, fForce: BOOL) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetConnectionA(
        lpLocalName: LPCSTR,
        lpRemoteName: LPSTR,
        lpnLength: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetConnectionW(
        lpLocalName: LPCWSTR,
        lpRemoteName: LPWSTR,
        lpnLength: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetRestoreSingleConnectionW(hwndParent: HWND, lpDevice: LPCWSTR, fUseUI: BOOL)
    -> DWORD;
}
unsafe extern "C" {
    pub fn WNetUseConnectionA(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEA,
        lpPassword: LPCSTR,
        lpUserId: LPCSTR,
        dwFlags: DWORD,
        lpAccessName: LPSTR,
        lpBufferSize: LPDWORD,
        lpResult: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetUseConnectionW(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEW,
        lpPassword: LPCWSTR,
        lpUserId: LPCWSTR,
        dwFlags: DWORD,
        lpAccessName: LPWSTR,
        lpBufferSize: LPDWORD,
        lpResult: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetUseConnection4A(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEA,
        pAuthBuffer: PVOID,
        cbAuthBuffer: DWORD,
        dwFlags: DWORD,
        lpUseOptions: PBYTE,
        cbUseOptions: DWORD,
        lpAccessName: LPSTR,
        lpBufferSize: LPDWORD,
        lpResult: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetUseConnection4W(
        hwndOwner: HWND,
        lpNetResource: LPNETRESOURCEW,
        pAuthBuffer: PVOID,
        cbAuthBuffer: DWORD,
        dwFlags: DWORD,
        lpUseOptions: PBYTE,
        cbUseOptions: DWORD,
        lpAccessName: LPWSTR,
        lpBufferSize: LPDWORD,
        lpResult: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetConnectionDialog(hwnd: HWND, dwType: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetDisconnectDialog(hwnd: HWND, dwType: DWORD) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONNECTDLGSTRUCTA {
    pub cbStructure: DWORD,
    pub hwndOwner: HWND,
    pub lpConnRes: LPNETRESOURCEA,
    pub dwFlags: DWORD,
    pub dwDevNum: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONNECTDLGSTRUCTA"][::std::mem::size_of::<_CONNECTDLGSTRUCTA>() - 32usize];
    ["Alignment of _CONNECTDLGSTRUCTA"][::std::mem::align_of::<_CONNECTDLGSTRUCTA>() - 8usize];
    ["Offset of field: _CONNECTDLGSTRUCTA::cbStructure"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTA, cbStructure) - 0usize];
    ["Offset of field: _CONNECTDLGSTRUCTA::hwndOwner"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTA, hwndOwner) - 8usize];
    ["Offset of field: _CONNECTDLGSTRUCTA::lpConnRes"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTA, lpConnRes) - 16usize];
    ["Offset of field: _CONNECTDLGSTRUCTA::dwFlags"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTA, dwFlags) - 24usize];
    ["Offset of field: _CONNECTDLGSTRUCTA::dwDevNum"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTA, dwDevNum) - 28usize];
};
pub type CONNECTDLGSTRUCTA = _CONNECTDLGSTRUCTA;
pub type LPCONNECTDLGSTRUCTA = *mut _CONNECTDLGSTRUCTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CONNECTDLGSTRUCTW {
    pub cbStructure: DWORD,
    pub hwndOwner: HWND,
    pub lpConnRes: LPNETRESOURCEW,
    pub dwFlags: DWORD,
    pub dwDevNum: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CONNECTDLGSTRUCTW"][::std::mem::size_of::<_CONNECTDLGSTRUCTW>() - 32usize];
    ["Alignment of _CONNECTDLGSTRUCTW"][::std::mem::align_of::<_CONNECTDLGSTRUCTW>() - 8usize];
    ["Offset of field: _CONNECTDLGSTRUCTW::cbStructure"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTW, cbStructure) - 0usize];
    ["Offset of field: _CONNECTDLGSTRUCTW::hwndOwner"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTW, hwndOwner) - 8usize];
    ["Offset of field: _CONNECTDLGSTRUCTW::lpConnRes"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTW, lpConnRes) - 16usize];
    ["Offset of field: _CONNECTDLGSTRUCTW::dwFlags"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTW, dwFlags) - 24usize];
    ["Offset of field: _CONNECTDLGSTRUCTW::dwDevNum"]
        [::std::mem::offset_of!(_CONNECTDLGSTRUCTW, dwDevNum) - 28usize];
};
pub type CONNECTDLGSTRUCTW = _CONNECTDLGSTRUCTW;
pub type LPCONNECTDLGSTRUCTW = *mut _CONNECTDLGSTRUCTW;
pub type CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA;
pub type LPCONNECTDLGSTRUCT = LPCONNECTDLGSTRUCTA;
unsafe extern "C" {
    pub fn WNetConnectionDialog1A(lpConnDlgStruct: LPCONNECTDLGSTRUCTA) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetConnectionDialog1W(lpConnDlgStruct: LPCONNECTDLGSTRUCTW) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISCDLGSTRUCTA {
    pub cbStructure: DWORD,
    pub hwndOwner: HWND,
    pub lpLocalName: LPSTR,
    pub lpRemoteName: LPSTR,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISCDLGSTRUCTA"][::std::mem::size_of::<_DISCDLGSTRUCTA>() - 40usize];
    ["Alignment of _DISCDLGSTRUCTA"][::std::mem::align_of::<_DISCDLGSTRUCTA>() - 8usize];
    ["Offset of field: _DISCDLGSTRUCTA::cbStructure"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTA, cbStructure) - 0usize];
    ["Offset of field: _DISCDLGSTRUCTA::hwndOwner"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTA, hwndOwner) - 8usize];
    ["Offset of field: _DISCDLGSTRUCTA::lpLocalName"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTA, lpLocalName) - 16usize];
    ["Offset of field: _DISCDLGSTRUCTA::lpRemoteName"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTA, lpRemoteName) - 24usize];
    ["Offset of field: _DISCDLGSTRUCTA::dwFlags"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTA, dwFlags) - 32usize];
};
pub type DISCDLGSTRUCTA = _DISCDLGSTRUCTA;
pub type LPDISCDLGSTRUCTA = *mut _DISCDLGSTRUCTA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DISCDLGSTRUCTW {
    pub cbStructure: DWORD,
    pub hwndOwner: HWND,
    pub lpLocalName: LPWSTR,
    pub lpRemoteName: LPWSTR,
    pub dwFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DISCDLGSTRUCTW"][::std::mem::size_of::<_DISCDLGSTRUCTW>() - 40usize];
    ["Alignment of _DISCDLGSTRUCTW"][::std::mem::align_of::<_DISCDLGSTRUCTW>() - 8usize];
    ["Offset of field: _DISCDLGSTRUCTW::cbStructure"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTW, cbStructure) - 0usize];
    ["Offset of field: _DISCDLGSTRUCTW::hwndOwner"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTW, hwndOwner) - 8usize];
    ["Offset of field: _DISCDLGSTRUCTW::lpLocalName"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTW, lpLocalName) - 16usize];
    ["Offset of field: _DISCDLGSTRUCTW::lpRemoteName"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTW, lpRemoteName) - 24usize];
    ["Offset of field: _DISCDLGSTRUCTW::dwFlags"]
        [::std::mem::offset_of!(_DISCDLGSTRUCTW, dwFlags) - 32usize];
};
pub type DISCDLGSTRUCTW = _DISCDLGSTRUCTW;
pub type LPDISCDLGSTRUCTW = *mut _DISCDLGSTRUCTW;
pub type DISCDLGSTRUCT = DISCDLGSTRUCTA;
pub type LPDISCDLGSTRUCT = LPDISCDLGSTRUCTA;
unsafe extern "C" {
    pub fn WNetDisconnectDialog1A(lpConnDlgStruct: LPDISCDLGSTRUCTA) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetDisconnectDialog1W(lpConnDlgStruct: LPDISCDLGSTRUCTW) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetOpenEnumA(
        dwScope: DWORD,
        dwType: DWORD,
        dwUsage: DWORD,
        lpNetResource: LPNETRESOURCEA,
        lphEnum: LPHANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetOpenEnumW(
        dwScope: DWORD,
        dwType: DWORD,
        dwUsage: DWORD,
        lpNetResource: LPNETRESOURCEW,
        lphEnum: LPHANDLE,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetEnumResourceA(
        hEnum: HANDLE,
        lpcCount: LPDWORD,
        lpBuffer: LPVOID,
        lpBufferSize: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetEnumResourceW(
        hEnum: HANDLE,
        lpcCount: LPDWORD,
        lpBuffer: LPVOID,
        lpBufferSize: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetCloseEnum(hEnum: HANDLE) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetResourceParentA(
        lpNetResource: LPNETRESOURCEA,
        lpBuffer: LPVOID,
        lpcbBuffer: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetResourceParentW(
        lpNetResource: LPNETRESOURCEW,
        lpBuffer: LPVOID,
        lpcbBuffer: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetResourceInformationA(
        lpNetResource: LPNETRESOURCEA,
        lpBuffer: LPVOID,
        lpcbBuffer: LPDWORD,
        lplpSystem: *mut LPSTR,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetResourceInformationW(
        lpNetResource: LPNETRESOURCEW,
        lpBuffer: LPVOID,
        lpcbBuffer: LPDWORD,
        lplpSystem: *mut LPWSTR,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNIVERSAL_NAME_INFOA {
    pub lpUniversalName: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UNIVERSAL_NAME_INFOA"][::std::mem::size_of::<_UNIVERSAL_NAME_INFOA>() - 8usize];
    ["Alignment of _UNIVERSAL_NAME_INFOA"]
        [::std::mem::align_of::<_UNIVERSAL_NAME_INFOA>() - 8usize];
    ["Offset of field: _UNIVERSAL_NAME_INFOA::lpUniversalName"]
        [::std::mem::offset_of!(_UNIVERSAL_NAME_INFOA, lpUniversalName) - 0usize];
};
pub type UNIVERSAL_NAME_INFOA = _UNIVERSAL_NAME_INFOA;
pub type LPUNIVERSAL_NAME_INFOA = *mut _UNIVERSAL_NAME_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UNIVERSAL_NAME_INFOW {
    pub lpUniversalName: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _UNIVERSAL_NAME_INFOW"][::std::mem::size_of::<_UNIVERSAL_NAME_INFOW>() - 8usize];
    ["Alignment of _UNIVERSAL_NAME_INFOW"]
        [::std::mem::align_of::<_UNIVERSAL_NAME_INFOW>() - 8usize];
    ["Offset of field: _UNIVERSAL_NAME_INFOW::lpUniversalName"]
        [::std::mem::offset_of!(_UNIVERSAL_NAME_INFOW, lpUniversalName) - 0usize];
};
pub type UNIVERSAL_NAME_INFOW = _UNIVERSAL_NAME_INFOW;
pub type LPUNIVERSAL_NAME_INFOW = *mut _UNIVERSAL_NAME_INFOW;
pub type UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;
pub type LPUNIVERSAL_NAME_INFO = LPUNIVERSAL_NAME_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REMOTE_NAME_INFOA {
    pub lpUniversalName: LPSTR,
    pub lpConnectionName: LPSTR,
    pub lpRemainingPath: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REMOTE_NAME_INFOA"][::std::mem::size_of::<_REMOTE_NAME_INFOA>() - 24usize];
    ["Alignment of _REMOTE_NAME_INFOA"][::std::mem::align_of::<_REMOTE_NAME_INFOA>() - 8usize];
    ["Offset of field: _REMOTE_NAME_INFOA::lpUniversalName"]
        [::std::mem::offset_of!(_REMOTE_NAME_INFOA, lpUniversalName) - 0usize];
    ["Offset of field: _REMOTE_NAME_INFOA::lpConnectionName"]
        [::std::mem::offset_of!(_REMOTE_NAME_INFOA, lpConnectionName) - 8usize];
    ["Offset of field: _REMOTE_NAME_INFOA::lpRemainingPath"]
        [::std::mem::offset_of!(_REMOTE_NAME_INFOA, lpRemainingPath) - 16usize];
};
pub type REMOTE_NAME_INFOA = _REMOTE_NAME_INFOA;
pub type LPREMOTE_NAME_INFOA = *mut _REMOTE_NAME_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _REMOTE_NAME_INFOW {
    pub lpUniversalName: LPWSTR,
    pub lpConnectionName: LPWSTR,
    pub lpRemainingPath: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _REMOTE_NAME_INFOW"][::std::mem::size_of::<_REMOTE_NAME_INFOW>() - 24usize];
    ["Alignment of _REMOTE_NAME_INFOW"][::std::mem::align_of::<_REMOTE_NAME_INFOW>() - 8usize];
    ["Offset of field: _REMOTE_NAME_INFOW::lpUniversalName"]
        [::std::mem::offset_of!(_REMOTE_NAME_INFOW, lpUniversalName) - 0usize];
    ["Offset of field: _REMOTE_NAME_INFOW::lpConnectionName"]
        [::std::mem::offset_of!(_REMOTE_NAME_INFOW, lpConnectionName) - 8usize];
    ["Offset of field: _REMOTE_NAME_INFOW::lpRemainingPath"]
        [::std::mem::offset_of!(_REMOTE_NAME_INFOW, lpRemainingPath) - 16usize];
};
pub type REMOTE_NAME_INFOW = _REMOTE_NAME_INFOW;
pub type LPREMOTE_NAME_INFOW = *mut _REMOTE_NAME_INFOW;
pub type REMOTE_NAME_INFO = REMOTE_NAME_INFOA;
pub type LPREMOTE_NAME_INFO = LPREMOTE_NAME_INFOA;
unsafe extern "C" {
    pub fn WNetGetUniversalNameA(
        lpLocalPath: LPCSTR,
        dwInfoLevel: DWORD,
        lpBuffer: LPVOID,
        lpBufferSize: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetUniversalNameW(
        lpLocalPath: LPCWSTR,
        dwInfoLevel: DWORD,
        lpBuffer: LPVOID,
        lpBufferSize: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetUserA(lpName: LPCSTR, lpUserName: LPSTR, lpnLength: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetUserW(lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetProviderNameA(
        dwNetType: DWORD,
        lpProviderName: LPSTR,
        lpBufferSize: LPDWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetProviderNameW(
        dwNetType: DWORD,
        lpProviderName: LPWSTR,
        lpBufferSize: LPDWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NETINFOSTRUCT {
    pub cbStructure: DWORD,
    pub dwProviderVersion: DWORD,
    pub dwStatus: DWORD,
    pub dwCharacteristics: DWORD,
    pub dwHandle: ULONG_PTR,
    pub wNetType: WORD,
    pub dwPrinters: DWORD,
    pub dwDrives: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NETINFOSTRUCT"][::std::mem::size_of::<_NETINFOSTRUCT>() - 40usize];
    ["Alignment of _NETINFOSTRUCT"][::std::mem::align_of::<_NETINFOSTRUCT>() - 8usize];
    ["Offset of field: _NETINFOSTRUCT::cbStructure"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, cbStructure) - 0usize];
    ["Offset of field: _NETINFOSTRUCT::dwProviderVersion"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, dwProviderVersion) - 4usize];
    ["Offset of field: _NETINFOSTRUCT::dwStatus"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, dwStatus) - 8usize];
    ["Offset of field: _NETINFOSTRUCT::dwCharacteristics"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, dwCharacteristics) - 12usize];
    ["Offset of field: _NETINFOSTRUCT::dwHandle"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, dwHandle) - 16usize];
    ["Offset of field: _NETINFOSTRUCT::wNetType"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, wNetType) - 24usize];
    ["Offset of field: _NETINFOSTRUCT::dwPrinters"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, dwPrinters) - 28usize];
    ["Offset of field: _NETINFOSTRUCT::dwDrives"]
        [::std::mem::offset_of!(_NETINFOSTRUCT, dwDrives) - 32usize];
};
pub type NETINFOSTRUCT = _NETINFOSTRUCT;
pub type LPNETINFOSTRUCT = *mut _NETINFOSTRUCT;
unsafe extern "C" {
    pub fn WNetGetNetworkInformationA(
        lpProvider: LPCSTR,
        lpNetInfoStruct: LPNETINFOSTRUCT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetNetworkInformationW(
        lpProvider: LPCWSTR,
        lpNetInfoStruct: LPNETINFOSTRUCT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetLastErrorA(
        lpError: LPDWORD,
        lpErrorBuf: LPSTR,
        nErrorBufSize: DWORD,
        lpNameBuf: LPSTR,
        nNameBufSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WNetGetLastErrorW(
        lpError: LPDWORD,
        lpErrorBuf: LPWSTR,
        nErrorBufSize: DWORD,
        lpNameBuf: LPWSTR,
        nNameBufSize: DWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NETCONNECTINFOSTRUCT {
    pub cbStructure: DWORD,
    pub dwFlags: DWORD,
    pub dwSpeed: DWORD,
    pub dwDelay: DWORD,
    pub dwOptDataSize: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NETCONNECTINFOSTRUCT"][::std::mem::size_of::<_NETCONNECTINFOSTRUCT>() - 20usize];
    ["Alignment of _NETCONNECTINFOSTRUCT"]
        [::std::mem::align_of::<_NETCONNECTINFOSTRUCT>() - 4usize];
    ["Offset of field: _NETCONNECTINFOSTRUCT::cbStructure"]
        [::std::mem::offset_of!(_NETCONNECTINFOSTRUCT, cbStructure) - 0usize];
    ["Offset of field: _NETCONNECTINFOSTRUCT::dwFlags"]
        [::std::mem::offset_of!(_NETCONNECTINFOSTRUCT, dwFlags) - 4usize];
    ["Offset of field: _NETCONNECTINFOSTRUCT::dwSpeed"]
        [::std::mem::offset_of!(_NETCONNECTINFOSTRUCT, dwSpeed) - 8usize];
    ["Offset of field: _NETCONNECTINFOSTRUCT::dwDelay"]
        [::std::mem::offset_of!(_NETCONNECTINFOSTRUCT, dwDelay) - 12usize];
    ["Offset of field: _NETCONNECTINFOSTRUCT::dwOptDataSize"]
        [::std::mem::offset_of!(_NETCONNECTINFOSTRUCT, dwOptDataSize) - 16usize];
};
pub type NETCONNECTINFOSTRUCT = _NETCONNECTINFOSTRUCT;
pub type LPNETCONNECTINFOSTRUCT = *mut _NETCONNECTINFOSTRUCT;
unsafe extern "C" {
    pub fn MultinetGetConnectionPerformanceA(
        lpNetResource: LPNETRESOURCEA,
        lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn MultinetGetConnectionPerformanceW(
        lpNetResource: LPNETRESOURCEW,
        lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn uaw_CharUpperW(String: LPUWSTR) -> LPUWSTR;
}
unsafe extern "C" {
    pub fn uaw_lstrcmpW(String1: PCUWSTR, String2: PCUWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uaw_lstrcmpiW(String1: PCUWSTR, String2: PCUWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uaw_lstrlenW(String: LPCUWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uaw_wcschr(String: PCUWSTR, Character: WCHAR) -> PUWSTR;
}
unsafe extern "C" {
    pub fn uaw_wcscpy(Destination: PUWSTR, Source: PCUWSTR) -> PUWSTR;
}
unsafe extern "C" {
    pub fn uaw_wcsicmp(String1: PCUWSTR, String2: PCUWSTR) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uaw_wcslen(String: PCUWSTR) -> usize;
}
unsafe extern "C" {
    pub fn uaw_wcsrchr(String: PCUWSTR, Character: WCHAR) -> PUWSTR;
}
pub type PUWSTR_C = *mut WCHAR;
unsafe extern "C" {
    pub static NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: GUID;
}
unsafe extern "C" {
    pub static NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: GUID;
}
unsafe extern "C" {
    pub static DOMAIN_JOIN_GUID: GUID;
}
unsafe extern "C" {
    pub static DOMAIN_LEAVE_GUID: GUID;
}
unsafe extern "C" {
    pub static FIREWALL_PORT_OPEN_GUID: GUID;
}
unsafe extern "C" {
    pub static FIREWALL_PORT_CLOSE_GUID: GUID;
}
unsafe extern "C" {
    pub static MACHINE_POLICY_PRESENT_GUID: GUID;
}
unsafe extern "C" {
    pub static USER_POLICY_PRESENT_GUID: GUID;
}
unsafe extern "C" {
    pub static RPC_INTERFACE_EVENT_GUID: GUID;
}
unsafe extern "C" {
    pub static NAMED_PIPE_EVENT_GUID: GUID;
}
unsafe extern "C" {
    pub static CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID: GUID;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SERVICE_TRIGGER_CUSTOM_STATE_ID {
    pub Data: [DWORD; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SERVICE_TRIGGER_CUSTOM_STATE_ID"]
        [::std::mem::size_of::<SERVICE_TRIGGER_CUSTOM_STATE_ID>() - 8usize];
    ["Alignment of SERVICE_TRIGGER_CUSTOM_STATE_ID"]
        [::std::mem::align_of::<SERVICE_TRIGGER_CUSTOM_STATE_ID>() - 4usize];
    ["Offset of field: SERVICE_TRIGGER_CUSTOM_STATE_ID::Data"]
        [::std::mem::offset_of!(SERVICE_TRIGGER_CUSTOM_STATE_ID, Data) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    pub u: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1 {
    pub CustomStateId: SERVICE_TRIGGER_CUSTOM_STATE_ID,
    pub s: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1 {
    pub DataOffset: DWORD,
    pub Data: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<
            _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1,
        >() - 8usize];
    ["Alignment of _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<
            _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1,
        >() - 4usize];
    [
        "Offset of field: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1::DataOffset",
    ][::std::mem::offset_of!(
        _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1,
        DataOffset
    ) - 0usize];
    [
        "Offset of field: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1::Data",
    ][::std::mem::offset_of!(
        _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1,
        Data
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1"][::std::mem::size_of::<
        _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1"]
        [::std::mem::align_of::<_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1::CustomStateId"]
        [::std::mem::offset_of!(
            _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1,
            CustomStateId
        ) - 0usize];
    ["Offset of field: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1::s"][::std::mem::offset_of!(
        _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1,
        s
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM"]
        [::std::mem::size_of::<_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM>() - 8usize];
    ["Alignment of _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM"]
        [::std::mem::align_of::<_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM>() - 4usize];
    ["Offset of field: _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM::u"]
        [::std::mem::offset_of!(_SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, u) - 0usize];
};
pub type SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM =
    _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
pub type LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM =
    *mut _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_DESCRIPTIONA {
    pub lpDescription: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_DESCRIPTIONA"][::std::mem::size_of::<_SERVICE_DESCRIPTIONA>() - 8usize];
    ["Alignment of _SERVICE_DESCRIPTIONA"]
        [::std::mem::align_of::<_SERVICE_DESCRIPTIONA>() - 8usize];
    ["Offset of field: _SERVICE_DESCRIPTIONA::lpDescription"]
        [::std::mem::offset_of!(_SERVICE_DESCRIPTIONA, lpDescription) - 0usize];
};
pub type SERVICE_DESCRIPTIONA = _SERVICE_DESCRIPTIONA;
pub type LPSERVICE_DESCRIPTIONA = *mut _SERVICE_DESCRIPTIONA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_DESCRIPTIONW {
    pub lpDescription: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_DESCRIPTIONW"][::std::mem::size_of::<_SERVICE_DESCRIPTIONW>() - 8usize];
    ["Alignment of _SERVICE_DESCRIPTIONW"]
        [::std::mem::align_of::<_SERVICE_DESCRIPTIONW>() - 8usize];
    ["Offset of field: _SERVICE_DESCRIPTIONW::lpDescription"]
        [::std::mem::offset_of!(_SERVICE_DESCRIPTIONW, lpDescription) - 0usize];
};
pub type SERVICE_DESCRIPTIONW = _SERVICE_DESCRIPTIONW;
pub type LPSERVICE_DESCRIPTIONW = *mut _SERVICE_DESCRIPTIONW;
pub type SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;
pub type LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONA;
pub const _SC_ACTION_TYPE_SC_ACTION_NONE: _SC_ACTION_TYPE = 0;
pub const _SC_ACTION_TYPE_SC_ACTION_RESTART: _SC_ACTION_TYPE = 1;
pub const _SC_ACTION_TYPE_SC_ACTION_REBOOT: _SC_ACTION_TYPE = 2;
pub const _SC_ACTION_TYPE_SC_ACTION_RUN_COMMAND: _SC_ACTION_TYPE = 3;
pub const _SC_ACTION_TYPE_SC_ACTION_OWN_RESTART: _SC_ACTION_TYPE = 4;
pub type _SC_ACTION_TYPE = ::std::os::raw::c_int;
pub use self::_SC_ACTION_TYPE as SC_ACTION_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SC_ACTION {
    pub Type: SC_ACTION_TYPE,
    pub Delay: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SC_ACTION"][::std::mem::size_of::<_SC_ACTION>() - 8usize];
    ["Alignment of _SC_ACTION"][::std::mem::align_of::<_SC_ACTION>() - 4usize];
    ["Offset of field: _SC_ACTION::Type"][::std::mem::offset_of!(_SC_ACTION, Type) - 0usize];
    ["Offset of field: _SC_ACTION::Delay"][::std::mem::offset_of!(_SC_ACTION, Delay) - 4usize];
};
pub type SC_ACTION = _SC_ACTION;
pub type LPSC_ACTION = *mut _SC_ACTION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_FAILURE_ACTIONSA {
    pub dwResetPeriod: DWORD,
    pub lpRebootMsg: LPSTR,
    pub lpCommand: LPSTR,
    pub cActions: DWORD,
    pub lpsaActions: *mut SC_ACTION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_FAILURE_ACTIONSA"]
        [::std::mem::size_of::<_SERVICE_FAILURE_ACTIONSA>() - 40usize];
    ["Alignment of _SERVICE_FAILURE_ACTIONSA"]
        [::std::mem::align_of::<_SERVICE_FAILURE_ACTIONSA>() - 8usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSA::dwResetPeriod"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSA, dwResetPeriod) - 0usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSA::lpRebootMsg"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSA, lpRebootMsg) - 8usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSA::lpCommand"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSA, lpCommand) - 16usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSA::cActions"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSA, cActions) - 24usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSA::lpsaActions"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSA, lpsaActions) - 32usize];
};
pub type SERVICE_FAILURE_ACTIONSA = _SERVICE_FAILURE_ACTIONSA;
pub type LPSERVICE_FAILURE_ACTIONSA = *mut _SERVICE_FAILURE_ACTIONSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_FAILURE_ACTIONSW {
    pub dwResetPeriod: DWORD,
    pub lpRebootMsg: LPWSTR,
    pub lpCommand: LPWSTR,
    pub cActions: DWORD,
    pub lpsaActions: *mut SC_ACTION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_FAILURE_ACTIONSW"]
        [::std::mem::size_of::<_SERVICE_FAILURE_ACTIONSW>() - 40usize];
    ["Alignment of _SERVICE_FAILURE_ACTIONSW"]
        [::std::mem::align_of::<_SERVICE_FAILURE_ACTIONSW>() - 8usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSW::dwResetPeriod"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSW, dwResetPeriod) - 0usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSW::lpRebootMsg"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSW, lpRebootMsg) - 8usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSW::lpCommand"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSW, lpCommand) - 16usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSW::cActions"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSW, cActions) - 24usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONSW::lpsaActions"]
        [::std::mem::offset_of!(_SERVICE_FAILURE_ACTIONSW, lpsaActions) - 32usize];
};
pub type SERVICE_FAILURE_ACTIONSW = _SERVICE_FAILURE_ACTIONSW;
pub type LPSERVICE_FAILURE_ACTIONSW = *mut _SERVICE_FAILURE_ACTIONSW;
pub type SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;
pub type LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_DELAYED_AUTO_START_INFO {
    pub fDelayedAutostart: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_DELAYED_AUTO_START_INFO"]
        [::std::mem::size_of::<_SERVICE_DELAYED_AUTO_START_INFO>() - 4usize];
    ["Alignment of _SERVICE_DELAYED_AUTO_START_INFO"]
        [::std::mem::align_of::<_SERVICE_DELAYED_AUTO_START_INFO>() - 4usize];
    ["Offset of field: _SERVICE_DELAYED_AUTO_START_INFO::fDelayedAutostart"]
        [::std::mem::offset_of!(_SERVICE_DELAYED_AUTO_START_INFO, fDelayedAutostart) - 0usize];
};
pub type SERVICE_DELAYED_AUTO_START_INFO = _SERVICE_DELAYED_AUTO_START_INFO;
pub type LPSERVICE_DELAYED_AUTO_START_INFO = *mut _SERVICE_DELAYED_AUTO_START_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_FAILURE_ACTIONS_FLAG {
    pub fFailureActionsOnNonCrashFailures: BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_FAILURE_ACTIONS_FLAG"]
        [::std::mem::size_of::<_SERVICE_FAILURE_ACTIONS_FLAG>() - 4usize];
    ["Alignment of _SERVICE_FAILURE_ACTIONS_FLAG"]
        [::std::mem::align_of::<_SERVICE_FAILURE_ACTIONS_FLAG>() - 4usize];
    ["Offset of field: _SERVICE_FAILURE_ACTIONS_FLAG::fFailureActionsOnNonCrashFailures"][::std::mem::offset_of!(
        _SERVICE_FAILURE_ACTIONS_FLAG,
        fFailureActionsOnNonCrashFailures
    )
        - 0usize];
};
pub type SERVICE_FAILURE_ACTIONS_FLAG = _SERVICE_FAILURE_ACTIONS_FLAG;
pub type LPSERVICE_FAILURE_ACTIONS_FLAG = *mut _SERVICE_FAILURE_ACTIONS_FLAG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_SID_INFO {
    pub dwServiceSidType: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_SID_INFO"][::std::mem::size_of::<_SERVICE_SID_INFO>() - 4usize];
    ["Alignment of _SERVICE_SID_INFO"][::std::mem::align_of::<_SERVICE_SID_INFO>() - 4usize];
    ["Offset of field: _SERVICE_SID_INFO::dwServiceSidType"]
        [::std::mem::offset_of!(_SERVICE_SID_INFO, dwServiceSidType) - 0usize];
};
pub type SERVICE_SID_INFO = _SERVICE_SID_INFO;
pub type LPSERVICE_SID_INFO = *mut _SERVICE_SID_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    pub pmszRequiredPrivileges: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_REQUIRED_PRIVILEGES_INFOA"]
        [::std::mem::size_of::<_SERVICE_REQUIRED_PRIVILEGES_INFOA>() - 8usize];
    ["Alignment of _SERVICE_REQUIRED_PRIVILEGES_INFOA"]
        [::std::mem::align_of::<_SERVICE_REQUIRED_PRIVILEGES_INFOA>() - 8usize];
    ["Offset of field: _SERVICE_REQUIRED_PRIVILEGES_INFOA::pmszRequiredPrivileges"][::std::mem::offset_of!(
        _SERVICE_REQUIRED_PRIVILEGES_INFOA,
        pmszRequiredPrivileges
    ) - 0usize];
};
pub type SERVICE_REQUIRED_PRIVILEGES_INFOA = _SERVICE_REQUIRED_PRIVILEGES_INFOA;
pub type LPSERVICE_REQUIRED_PRIVILEGES_INFOA = *mut _SERVICE_REQUIRED_PRIVILEGES_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    pub pmszRequiredPrivileges: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_REQUIRED_PRIVILEGES_INFOW"]
        [::std::mem::size_of::<_SERVICE_REQUIRED_PRIVILEGES_INFOW>() - 8usize];
    ["Alignment of _SERVICE_REQUIRED_PRIVILEGES_INFOW"]
        [::std::mem::align_of::<_SERVICE_REQUIRED_PRIVILEGES_INFOW>() - 8usize];
    ["Offset of field: _SERVICE_REQUIRED_PRIVILEGES_INFOW::pmszRequiredPrivileges"][::std::mem::offset_of!(
        _SERVICE_REQUIRED_PRIVILEGES_INFOW,
        pmszRequiredPrivileges
    ) - 0usize];
};
pub type SERVICE_REQUIRED_PRIVILEGES_INFOW = _SERVICE_REQUIRED_PRIVILEGES_INFOW;
pub type LPSERVICE_REQUIRED_PRIVILEGES_INFOW = *mut _SERVICE_REQUIRED_PRIVILEGES_INFOW;
pub type SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOA;
pub type LPSERVICE_REQUIRED_PRIVILEGES_INFO = LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_PRESHUTDOWN_INFO {
    pub dwPreshutdownTimeout: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_PRESHUTDOWN_INFO"]
        [::std::mem::size_of::<_SERVICE_PRESHUTDOWN_INFO>() - 4usize];
    ["Alignment of _SERVICE_PRESHUTDOWN_INFO"]
        [::std::mem::align_of::<_SERVICE_PRESHUTDOWN_INFO>() - 4usize];
    ["Offset of field: _SERVICE_PRESHUTDOWN_INFO::dwPreshutdownTimeout"]
        [::std::mem::offset_of!(_SERVICE_PRESHUTDOWN_INFO, dwPreshutdownTimeout) - 0usize];
};
pub type SERVICE_PRESHUTDOWN_INFO = _SERVICE_PRESHUTDOWN_INFO;
pub type LPSERVICE_PRESHUTDOWN_INFO = *mut _SERVICE_PRESHUTDOWN_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM {
    pub dwDataType: DWORD,
    pub cbData: DWORD,
    pub pData: PBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"]
        [::std::mem::size_of::<_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM>() - 16usize];
    ["Alignment of _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"]
        [::std::mem::align_of::<_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM>() - 8usize];
    ["Offset of field: _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM::dwDataType"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, dwDataType) - 0usize];
    ["Offset of field: _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM::cbData"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, cbData) - 4usize];
    ["Offset of field: _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM::pData"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, pData) - 8usize];
};
pub type SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
pub type PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = *mut _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_TRIGGER {
    pub dwTriggerType: DWORD,
    pub dwAction: DWORD,
    pub pTriggerSubtype: *mut GUID,
    pub cDataItems: DWORD,
    pub pDataItems: PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_TRIGGER"][::std::mem::size_of::<_SERVICE_TRIGGER>() - 32usize];
    ["Alignment of _SERVICE_TRIGGER"][::std::mem::align_of::<_SERVICE_TRIGGER>() - 8usize];
    ["Offset of field: _SERVICE_TRIGGER::dwTriggerType"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER, dwTriggerType) - 0usize];
    ["Offset of field: _SERVICE_TRIGGER::dwAction"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER, dwAction) - 4usize];
    ["Offset of field: _SERVICE_TRIGGER::pTriggerSubtype"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER, pTriggerSubtype) - 8usize];
    ["Offset of field: _SERVICE_TRIGGER::cDataItems"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER, cDataItems) - 16usize];
    ["Offset of field: _SERVICE_TRIGGER::pDataItems"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER, pDataItems) - 24usize];
};
pub type SERVICE_TRIGGER = _SERVICE_TRIGGER;
pub type PSERVICE_TRIGGER = *mut _SERVICE_TRIGGER;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_TRIGGER_INFO {
    pub cTriggers: DWORD,
    pub pTriggers: PSERVICE_TRIGGER,
    pub pReserved: PBYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_TRIGGER_INFO"][::std::mem::size_of::<_SERVICE_TRIGGER_INFO>() - 24usize];
    ["Alignment of _SERVICE_TRIGGER_INFO"]
        [::std::mem::align_of::<_SERVICE_TRIGGER_INFO>() - 8usize];
    ["Offset of field: _SERVICE_TRIGGER_INFO::cTriggers"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER_INFO, cTriggers) - 0usize];
    ["Offset of field: _SERVICE_TRIGGER_INFO::pTriggers"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER_INFO, pTriggers) - 8usize];
    ["Offset of field: _SERVICE_TRIGGER_INFO::pReserved"]
        [::std::mem::offset_of!(_SERVICE_TRIGGER_INFO, pReserved) - 16usize];
};
pub type SERVICE_TRIGGER_INFO = _SERVICE_TRIGGER_INFO;
pub type PSERVICE_TRIGGER_INFO = *mut _SERVICE_TRIGGER_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_PREFERRED_NODE_INFO {
    pub usPreferredNode: USHORT,
    pub fDelete: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_PREFERRED_NODE_INFO"]
        [::std::mem::size_of::<_SERVICE_PREFERRED_NODE_INFO>() - 4usize];
    ["Alignment of _SERVICE_PREFERRED_NODE_INFO"]
        [::std::mem::align_of::<_SERVICE_PREFERRED_NODE_INFO>() - 2usize];
    ["Offset of field: _SERVICE_PREFERRED_NODE_INFO::usPreferredNode"]
        [::std::mem::offset_of!(_SERVICE_PREFERRED_NODE_INFO, usPreferredNode) - 0usize];
    ["Offset of field: _SERVICE_PREFERRED_NODE_INFO::fDelete"]
        [::std::mem::offset_of!(_SERVICE_PREFERRED_NODE_INFO, fDelete) - 2usize];
};
pub type SERVICE_PREFERRED_NODE_INFO = _SERVICE_PREFERRED_NODE_INFO;
pub type LPSERVICE_PREFERRED_NODE_INFO = *mut _SERVICE_PREFERRED_NODE_INFO;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SERVICE_TIMECHANGE_INFO {
    pub liNewTime: LARGE_INTEGER,
    pub liOldTime: LARGE_INTEGER,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_TIMECHANGE_INFO"]
        [::std::mem::size_of::<_SERVICE_TIMECHANGE_INFO>() - 16usize];
    ["Alignment of _SERVICE_TIMECHANGE_INFO"]
        [::std::mem::align_of::<_SERVICE_TIMECHANGE_INFO>() - 8usize];
    ["Offset of field: _SERVICE_TIMECHANGE_INFO::liNewTime"]
        [::std::mem::offset_of!(_SERVICE_TIMECHANGE_INFO, liNewTime) - 0usize];
    ["Offset of field: _SERVICE_TIMECHANGE_INFO::liOldTime"]
        [::std::mem::offset_of!(_SERVICE_TIMECHANGE_INFO, liOldTime) - 8usize];
};
pub type SERVICE_TIMECHANGE_INFO = _SERVICE_TIMECHANGE_INFO;
pub type PSERVICE_TIMECHANGE_INFO = *mut _SERVICE_TIMECHANGE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_LAUNCH_PROTECTED_INFO {
    pub dwLaunchProtected: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_LAUNCH_PROTECTED_INFO"]
        [::std::mem::size_of::<_SERVICE_LAUNCH_PROTECTED_INFO>() - 4usize];
    ["Alignment of _SERVICE_LAUNCH_PROTECTED_INFO"]
        [::std::mem::align_of::<_SERVICE_LAUNCH_PROTECTED_INFO>() - 4usize];
    ["Offset of field: _SERVICE_LAUNCH_PROTECTED_INFO::dwLaunchProtected"]
        [::std::mem::offset_of!(_SERVICE_LAUNCH_PROTECTED_INFO, dwLaunchProtected) - 0usize];
};
pub type SERVICE_LAUNCH_PROTECTED_INFO = _SERVICE_LAUNCH_PROTECTED_INFO;
pub type PSERVICE_LAUNCH_PROTECTED_INFO = *mut _SERVICE_LAUNCH_PROTECTED_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SC_HANDLE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SC_HANDLE__"][::std::mem::size_of::<SC_HANDLE__>() - 4usize];
    ["Alignment of SC_HANDLE__"][::std::mem::align_of::<SC_HANDLE__>() - 4usize];
    ["Offset of field: SC_HANDLE__::unused"][::std::mem::offset_of!(SC_HANDLE__, unused) - 0usize];
};
pub type SC_HANDLE = *mut SC_HANDLE__;
pub type LPSC_HANDLE = *mut SC_HANDLE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SERVICE_STATUS_HANDLE__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SERVICE_STATUS_HANDLE__"][::std::mem::size_of::<SERVICE_STATUS_HANDLE__>() - 4usize];
    ["Alignment of SERVICE_STATUS_HANDLE__"]
        [::std::mem::align_of::<SERVICE_STATUS_HANDLE__>() - 4usize];
    ["Offset of field: SERVICE_STATUS_HANDLE__::unused"]
        [::std::mem::offset_of!(SERVICE_STATUS_HANDLE__, unused) - 0usize];
};
pub type SERVICE_STATUS_HANDLE = *mut SERVICE_STATUS_HANDLE__;
pub const _SC_STATUS_TYPE_SC_STATUS_PROCESS_INFO: _SC_STATUS_TYPE = 0;
pub type _SC_STATUS_TYPE = ::std::os::raw::c_int;
pub use self::_SC_STATUS_TYPE as SC_STATUS_TYPE;
pub const _SC_ENUM_TYPE_SC_ENUM_PROCESS_INFO: _SC_ENUM_TYPE = 0;
pub type _SC_ENUM_TYPE = ::std::os::raw::c_int;
pub use self::_SC_ENUM_TYPE as SC_ENUM_TYPE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_STATUS {
    pub dwServiceType: DWORD,
    pub dwCurrentState: DWORD,
    pub dwControlsAccepted: DWORD,
    pub dwWin32ExitCode: DWORD,
    pub dwServiceSpecificExitCode: DWORD,
    pub dwCheckPoint: DWORD,
    pub dwWaitHint: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_STATUS"][::std::mem::size_of::<_SERVICE_STATUS>() - 28usize];
    ["Alignment of _SERVICE_STATUS"][::std::mem::align_of::<_SERVICE_STATUS>() - 4usize];
    ["Offset of field: _SERVICE_STATUS::dwServiceType"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwServiceType) - 0usize];
    ["Offset of field: _SERVICE_STATUS::dwCurrentState"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwCurrentState) - 4usize];
    ["Offset of field: _SERVICE_STATUS::dwControlsAccepted"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwControlsAccepted) - 8usize];
    ["Offset of field: _SERVICE_STATUS::dwWin32ExitCode"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwWin32ExitCode) - 12usize];
    ["Offset of field: _SERVICE_STATUS::dwServiceSpecificExitCode"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwServiceSpecificExitCode) - 16usize];
    ["Offset of field: _SERVICE_STATUS::dwCheckPoint"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwCheckPoint) - 20usize];
    ["Offset of field: _SERVICE_STATUS::dwWaitHint"]
        [::std::mem::offset_of!(_SERVICE_STATUS, dwWaitHint) - 24usize];
};
pub type SERVICE_STATUS = _SERVICE_STATUS;
pub type LPSERVICE_STATUS = *mut _SERVICE_STATUS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_STATUS_PROCESS {
    pub dwServiceType: DWORD,
    pub dwCurrentState: DWORD,
    pub dwControlsAccepted: DWORD,
    pub dwWin32ExitCode: DWORD,
    pub dwServiceSpecificExitCode: DWORD,
    pub dwCheckPoint: DWORD,
    pub dwWaitHint: DWORD,
    pub dwProcessId: DWORD,
    pub dwServiceFlags: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_STATUS_PROCESS"][::std::mem::size_of::<_SERVICE_STATUS_PROCESS>() - 36usize];
    ["Alignment of _SERVICE_STATUS_PROCESS"]
        [::std::mem::align_of::<_SERVICE_STATUS_PROCESS>() - 4usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwServiceType"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwServiceType) - 0usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwCurrentState"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwCurrentState) - 4usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwControlsAccepted"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwControlsAccepted) - 8usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwWin32ExitCode"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwWin32ExitCode) - 12usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwServiceSpecificExitCode"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwServiceSpecificExitCode) - 16usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwCheckPoint"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwCheckPoint) - 20usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwWaitHint"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwWaitHint) - 24usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwProcessId"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwProcessId) - 28usize];
    ["Offset of field: _SERVICE_STATUS_PROCESS::dwServiceFlags"]
        [::std::mem::offset_of!(_SERVICE_STATUS_PROCESS, dwServiceFlags) - 32usize];
};
pub type SERVICE_STATUS_PROCESS = _SERVICE_STATUS_PROCESS;
pub type LPSERVICE_STATUS_PROCESS = *mut _SERVICE_STATUS_PROCESS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENUM_SERVICE_STATUSA {
    pub lpServiceName: LPSTR,
    pub lpDisplayName: LPSTR,
    pub ServiceStatus: SERVICE_STATUS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENUM_SERVICE_STATUSA"][::std::mem::size_of::<_ENUM_SERVICE_STATUSA>() - 48usize];
    ["Alignment of _ENUM_SERVICE_STATUSA"]
        [::std::mem::align_of::<_ENUM_SERVICE_STATUSA>() - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUSA::lpServiceName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUSA, lpServiceName) - 0usize];
    ["Offset of field: _ENUM_SERVICE_STATUSA::lpDisplayName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUSA, lpDisplayName) - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUSA::ServiceStatus"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUSA, ServiceStatus) - 16usize];
};
pub type ENUM_SERVICE_STATUSA = _ENUM_SERVICE_STATUSA;
pub type LPENUM_SERVICE_STATUSA = *mut _ENUM_SERVICE_STATUSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENUM_SERVICE_STATUSW {
    pub lpServiceName: LPWSTR,
    pub lpDisplayName: LPWSTR,
    pub ServiceStatus: SERVICE_STATUS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENUM_SERVICE_STATUSW"][::std::mem::size_of::<_ENUM_SERVICE_STATUSW>() - 48usize];
    ["Alignment of _ENUM_SERVICE_STATUSW"]
        [::std::mem::align_of::<_ENUM_SERVICE_STATUSW>() - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUSW::lpServiceName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUSW, lpServiceName) - 0usize];
    ["Offset of field: _ENUM_SERVICE_STATUSW::lpDisplayName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUSW, lpDisplayName) - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUSW::ServiceStatus"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUSW, ServiceStatus) - 16usize];
};
pub type ENUM_SERVICE_STATUSW = _ENUM_SERVICE_STATUSW;
pub type LPENUM_SERVICE_STATUSW = *mut _ENUM_SERVICE_STATUSW;
pub type ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;
pub type LPENUM_SERVICE_STATUS = LPENUM_SERVICE_STATUSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENUM_SERVICE_STATUS_PROCESSA {
    pub lpServiceName: LPSTR,
    pub lpDisplayName: LPSTR,
    pub ServiceStatusProcess: SERVICE_STATUS_PROCESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENUM_SERVICE_STATUS_PROCESSA"]
        [::std::mem::size_of::<_ENUM_SERVICE_STATUS_PROCESSA>() - 56usize];
    ["Alignment of _ENUM_SERVICE_STATUS_PROCESSA"]
        [::std::mem::align_of::<_ENUM_SERVICE_STATUS_PROCESSA>() - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUS_PROCESSA::lpServiceName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUS_PROCESSA, lpServiceName) - 0usize];
    ["Offset of field: _ENUM_SERVICE_STATUS_PROCESSA::lpDisplayName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUS_PROCESSA, lpDisplayName) - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUS_PROCESSA::ServiceStatusProcess"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUS_PROCESSA, ServiceStatusProcess) - 16usize];
};
pub type ENUM_SERVICE_STATUS_PROCESSA = _ENUM_SERVICE_STATUS_PROCESSA;
pub type LPENUM_SERVICE_STATUS_PROCESSA = *mut _ENUM_SERVICE_STATUS_PROCESSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ENUM_SERVICE_STATUS_PROCESSW {
    pub lpServiceName: LPWSTR,
    pub lpDisplayName: LPWSTR,
    pub ServiceStatusProcess: SERVICE_STATUS_PROCESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ENUM_SERVICE_STATUS_PROCESSW"]
        [::std::mem::size_of::<_ENUM_SERVICE_STATUS_PROCESSW>() - 56usize];
    ["Alignment of _ENUM_SERVICE_STATUS_PROCESSW"]
        [::std::mem::align_of::<_ENUM_SERVICE_STATUS_PROCESSW>() - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUS_PROCESSW::lpServiceName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUS_PROCESSW, lpServiceName) - 0usize];
    ["Offset of field: _ENUM_SERVICE_STATUS_PROCESSW::lpDisplayName"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUS_PROCESSW, lpDisplayName) - 8usize];
    ["Offset of field: _ENUM_SERVICE_STATUS_PROCESSW::ServiceStatusProcess"]
        [::std::mem::offset_of!(_ENUM_SERVICE_STATUS_PROCESSW, ServiceStatusProcess) - 16usize];
};
pub type ENUM_SERVICE_STATUS_PROCESSW = _ENUM_SERVICE_STATUS_PROCESSW;
pub type LPENUM_SERVICE_STATUS_PROCESSW = *mut _ENUM_SERVICE_STATUS_PROCESSW;
pub type ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;
pub type LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSA;
pub type SC_LOCK = LPVOID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QUERY_SERVICE_LOCK_STATUSA {
    pub fIsLocked: DWORD,
    pub lpLockOwner: LPSTR,
    pub dwLockDuration: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QUERY_SERVICE_LOCK_STATUSA"]
        [::std::mem::size_of::<_QUERY_SERVICE_LOCK_STATUSA>() - 24usize];
    ["Alignment of _QUERY_SERVICE_LOCK_STATUSA"]
        [::std::mem::align_of::<_QUERY_SERVICE_LOCK_STATUSA>() - 8usize];
    ["Offset of field: _QUERY_SERVICE_LOCK_STATUSA::fIsLocked"]
        [::std::mem::offset_of!(_QUERY_SERVICE_LOCK_STATUSA, fIsLocked) - 0usize];
    ["Offset of field: _QUERY_SERVICE_LOCK_STATUSA::lpLockOwner"]
        [::std::mem::offset_of!(_QUERY_SERVICE_LOCK_STATUSA, lpLockOwner) - 8usize];
    ["Offset of field: _QUERY_SERVICE_LOCK_STATUSA::dwLockDuration"]
        [::std::mem::offset_of!(_QUERY_SERVICE_LOCK_STATUSA, dwLockDuration) - 16usize];
};
pub type QUERY_SERVICE_LOCK_STATUSA = _QUERY_SERVICE_LOCK_STATUSA;
pub type LPQUERY_SERVICE_LOCK_STATUSA = *mut _QUERY_SERVICE_LOCK_STATUSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QUERY_SERVICE_LOCK_STATUSW {
    pub fIsLocked: DWORD,
    pub lpLockOwner: LPWSTR,
    pub dwLockDuration: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QUERY_SERVICE_LOCK_STATUSW"]
        [::std::mem::size_of::<_QUERY_SERVICE_LOCK_STATUSW>() - 24usize];
    ["Alignment of _QUERY_SERVICE_LOCK_STATUSW"]
        [::std::mem::align_of::<_QUERY_SERVICE_LOCK_STATUSW>() - 8usize];
    ["Offset of field: _QUERY_SERVICE_LOCK_STATUSW::fIsLocked"]
        [::std::mem::offset_of!(_QUERY_SERVICE_LOCK_STATUSW, fIsLocked) - 0usize];
    ["Offset of field: _QUERY_SERVICE_LOCK_STATUSW::lpLockOwner"]
        [::std::mem::offset_of!(_QUERY_SERVICE_LOCK_STATUSW, lpLockOwner) - 8usize];
    ["Offset of field: _QUERY_SERVICE_LOCK_STATUSW::dwLockDuration"]
        [::std::mem::offset_of!(_QUERY_SERVICE_LOCK_STATUSW, dwLockDuration) - 16usize];
};
pub type QUERY_SERVICE_LOCK_STATUSW = _QUERY_SERVICE_LOCK_STATUSW;
pub type LPQUERY_SERVICE_LOCK_STATUSW = *mut _QUERY_SERVICE_LOCK_STATUSW;
pub type QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;
pub type LPQUERY_SERVICE_LOCK_STATUS = LPQUERY_SERVICE_LOCK_STATUSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QUERY_SERVICE_CONFIGA {
    pub dwServiceType: DWORD,
    pub dwStartType: DWORD,
    pub dwErrorControl: DWORD,
    pub lpBinaryPathName: LPSTR,
    pub lpLoadOrderGroup: LPSTR,
    pub dwTagId: DWORD,
    pub lpDependencies: LPSTR,
    pub lpServiceStartName: LPSTR,
    pub lpDisplayName: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QUERY_SERVICE_CONFIGA"][::std::mem::size_of::<_QUERY_SERVICE_CONFIGA>() - 64usize];
    ["Alignment of _QUERY_SERVICE_CONFIGA"]
        [::std::mem::align_of::<_QUERY_SERVICE_CONFIGA>() - 8usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::dwServiceType"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, dwServiceType) - 0usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::dwStartType"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, dwStartType) - 4usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::dwErrorControl"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, dwErrorControl) - 8usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::lpBinaryPathName"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, lpBinaryPathName) - 16usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::lpLoadOrderGroup"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, lpLoadOrderGroup) - 24usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::dwTagId"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, dwTagId) - 32usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::lpDependencies"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, lpDependencies) - 40usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::lpServiceStartName"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, lpServiceStartName) - 48usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGA::lpDisplayName"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGA, lpDisplayName) - 56usize];
};
pub type QUERY_SERVICE_CONFIGA = _QUERY_SERVICE_CONFIGA;
pub type LPQUERY_SERVICE_CONFIGA = *mut _QUERY_SERVICE_CONFIGA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QUERY_SERVICE_CONFIGW {
    pub dwServiceType: DWORD,
    pub dwStartType: DWORD,
    pub dwErrorControl: DWORD,
    pub lpBinaryPathName: LPWSTR,
    pub lpLoadOrderGroup: LPWSTR,
    pub dwTagId: DWORD,
    pub lpDependencies: LPWSTR,
    pub lpServiceStartName: LPWSTR,
    pub lpDisplayName: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QUERY_SERVICE_CONFIGW"][::std::mem::size_of::<_QUERY_SERVICE_CONFIGW>() - 64usize];
    ["Alignment of _QUERY_SERVICE_CONFIGW"]
        [::std::mem::align_of::<_QUERY_SERVICE_CONFIGW>() - 8usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::dwServiceType"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, dwServiceType) - 0usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::dwStartType"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, dwStartType) - 4usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::dwErrorControl"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, dwErrorControl) - 8usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::lpBinaryPathName"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, lpBinaryPathName) - 16usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::lpLoadOrderGroup"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, lpLoadOrderGroup) - 24usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::dwTagId"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, dwTagId) - 32usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::lpDependencies"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, lpDependencies) - 40usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::lpServiceStartName"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, lpServiceStartName) - 48usize];
    ["Offset of field: _QUERY_SERVICE_CONFIGW::lpDisplayName"]
        [::std::mem::offset_of!(_QUERY_SERVICE_CONFIGW, lpDisplayName) - 56usize];
};
pub type QUERY_SERVICE_CONFIGW = _QUERY_SERVICE_CONFIGW;
pub type LPQUERY_SERVICE_CONFIGW = *mut _QUERY_SERVICE_CONFIGW;
pub type QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;
pub type LPQUERY_SERVICE_CONFIG = LPQUERY_SERVICE_CONFIGA;
pub type LPSERVICE_MAIN_FUNCTIONW = ::std::option::Option<
    unsafe extern "C" fn(dwNumServicesArgs: DWORD, lpServiceArgVectors: *mut LPWSTR),
>;
pub type LPSERVICE_MAIN_FUNCTIONA = ::std::option::Option<
    unsafe extern "C" fn(dwNumServicesArgs: DWORD, lpServiceArgVectors: *mut LPSTR),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_TABLE_ENTRYA {
    pub lpServiceName: LPSTR,
    pub lpServiceProc: LPSERVICE_MAIN_FUNCTIONA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_TABLE_ENTRYA"][::std::mem::size_of::<_SERVICE_TABLE_ENTRYA>() - 16usize];
    ["Alignment of _SERVICE_TABLE_ENTRYA"]
        [::std::mem::align_of::<_SERVICE_TABLE_ENTRYA>() - 8usize];
    ["Offset of field: _SERVICE_TABLE_ENTRYA::lpServiceName"]
        [::std::mem::offset_of!(_SERVICE_TABLE_ENTRYA, lpServiceName) - 0usize];
    ["Offset of field: _SERVICE_TABLE_ENTRYA::lpServiceProc"]
        [::std::mem::offset_of!(_SERVICE_TABLE_ENTRYA, lpServiceProc) - 8usize];
};
pub type SERVICE_TABLE_ENTRYA = _SERVICE_TABLE_ENTRYA;
pub type LPSERVICE_TABLE_ENTRYA = *mut _SERVICE_TABLE_ENTRYA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_TABLE_ENTRYW {
    pub lpServiceName: LPWSTR,
    pub lpServiceProc: LPSERVICE_MAIN_FUNCTIONW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_TABLE_ENTRYW"][::std::mem::size_of::<_SERVICE_TABLE_ENTRYW>() - 16usize];
    ["Alignment of _SERVICE_TABLE_ENTRYW"]
        [::std::mem::align_of::<_SERVICE_TABLE_ENTRYW>() - 8usize];
    ["Offset of field: _SERVICE_TABLE_ENTRYW::lpServiceName"]
        [::std::mem::offset_of!(_SERVICE_TABLE_ENTRYW, lpServiceName) - 0usize];
    ["Offset of field: _SERVICE_TABLE_ENTRYW::lpServiceProc"]
        [::std::mem::offset_of!(_SERVICE_TABLE_ENTRYW, lpServiceProc) - 8usize];
};
pub type SERVICE_TABLE_ENTRYW = _SERVICE_TABLE_ENTRYW;
pub type LPSERVICE_TABLE_ENTRYW = *mut _SERVICE_TABLE_ENTRYW;
pub type SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;
pub type LPSERVICE_TABLE_ENTRY = LPSERVICE_TABLE_ENTRYA;
pub type LPHANDLER_FUNCTION = ::std::option::Option<unsafe extern "C" fn(dwControl: DWORD)>;
pub type LPHANDLER_FUNCTION_EX = ::std::option::Option<
    unsafe extern "C" fn(
        dwControl: DWORD,
        dwEventType: DWORD,
        lpEventData: LPVOID,
        lpContext: LPVOID,
    ) -> DWORD,
>;
pub type PFN_SC_NOTIFY_CALLBACK = ::std::option::Option<unsafe extern "C" fn(pParameter: PVOID)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_NOTIFY_1 {
    pub dwVersion: DWORD,
    pub pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pub pContext: PVOID,
    pub dwNotificationStatus: DWORD,
    pub ServiceStatus: SERVICE_STATUS_PROCESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_NOTIFY_1"][::std::mem::size_of::<_SERVICE_NOTIFY_1>() - 64usize];
    ["Alignment of _SERVICE_NOTIFY_1"][::std::mem::align_of::<_SERVICE_NOTIFY_1>() - 8usize];
    ["Offset of field: _SERVICE_NOTIFY_1::dwVersion"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_1, dwVersion) - 0usize];
    ["Offset of field: _SERVICE_NOTIFY_1::pfnNotifyCallback"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_1, pfnNotifyCallback) - 8usize];
    ["Offset of field: _SERVICE_NOTIFY_1::pContext"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_1, pContext) - 16usize];
    ["Offset of field: _SERVICE_NOTIFY_1::dwNotificationStatus"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_1, dwNotificationStatus) - 24usize];
    ["Offset of field: _SERVICE_NOTIFY_1::ServiceStatus"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_1, ServiceStatus) - 28usize];
};
pub type SERVICE_NOTIFY_1 = _SERVICE_NOTIFY_1;
pub type PSERVICE_NOTIFY_1 = *mut _SERVICE_NOTIFY_1;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_NOTIFY_2A {
    pub dwVersion: DWORD,
    pub pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pub pContext: PVOID,
    pub dwNotificationStatus: DWORD,
    pub ServiceStatus: SERVICE_STATUS_PROCESS,
    pub dwNotificationTriggered: DWORD,
    pub pszServiceNames: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_NOTIFY_2A"][::std::mem::size_of::<_SERVICE_NOTIFY_2A>() - 80usize];
    ["Alignment of _SERVICE_NOTIFY_2A"][::std::mem::align_of::<_SERVICE_NOTIFY_2A>() - 8usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::dwVersion"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, dwVersion) - 0usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::pfnNotifyCallback"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, pfnNotifyCallback) - 8usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::pContext"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, pContext) - 16usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::dwNotificationStatus"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, dwNotificationStatus) - 24usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::ServiceStatus"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, ServiceStatus) - 28usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::dwNotificationTriggered"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, dwNotificationTriggered) - 64usize];
    ["Offset of field: _SERVICE_NOTIFY_2A::pszServiceNames"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2A, pszServiceNames) - 72usize];
};
pub type SERVICE_NOTIFY_2A = _SERVICE_NOTIFY_2A;
pub type PSERVICE_NOTIFY_2A = *mut _SERVICE_NOTIFY_2A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_NOTIFY_2W {
    pub dwVersion: DWORD,
    pub pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pub pContext: PVOID,
    pub dwNotificationStatus: DWORD,
    pub ServiceStatus: SERVICE_STATUS_PROCESS,
    pub dwNotificationTriggered: DWORD,
    pub pszServiceNames: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_NOTIFY_2W"][::std::mem::size_of::<_SERVICE_NOTIFY_2W>() - 80usize];
    ["Alignment of _SERVICE_NOTIFY_2W"][::std::mem::align_of::<_SERVICE_NOTIFY_2W>() - 8usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::dwVersion"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, dwVersion) - 0usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::pfnNotifyCallback"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, pfnNotifyCallback) - 8usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::pContext"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, pContext) - 16usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::dwNotificationStatus"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, dwNotificationStatus) - 24usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::ServiceStatus"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, ServiceStatus) - 28usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::dwNotificationTriggered"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, dwNotificationTriggered) - 64usize];
    ["Offset of field: _SERVICE_NOTIFY_2W::pszServiceNames"]
        [::std::mem::offset_of!(_SERVICE_NOTIFY_2W, pszServiceNames) - 72usize];
};
pub type SERVICE_NOTIFY_2W = _SERVICE_NOTIFY_2W;
pub type PSERVICE_NOTIFY_2W = *mut _SERVICE_NOTIFY_2W;
pub type SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2A;
pub type PSERVICE_NOTIFY_2 = PSERVICE_NOTIFY_2A;
pub type SERVICE_NOTIFYA = SERVICE_NOTIFY_2A;
pub type PSERVICE_NOTIFYA = *mut SERVICE_NOTIFY_2A;
pub type SERVICE_NOTIFYW = SERVICE_NOTIFY_2W;
pub type PSERVICE_NOTIFYW = *mut SERVICE_NOTIFY_2W;
pub type SERVICE_NOTIFY = SERVICE_NOTIFYA;
pub type PSERVICE_NOTIFY = PSERVICE_NOTIFYA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    pub dwReason: DWORD,
    pub pszComment: LPSTR,
    pub ServiceStatus: SERVICE_STATUS_PROCESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_CONTROL_STATUS_REASON_PARAMSA"]
        [::std::mem::size_of::<_SERVICE_CONTROL_STATUS_REASON_PARAMSA>() - 56usize];
    ["Alignment of _SERVICE_CONTROL_STATUS_REASON_PARAMSA"]
        [::std::mem::align_of::<_SERVICE_CONTROL_STATUS_REASON_PARAMSA>() - 8usize];
    ["Offset of field: _SERVICE_CONTROL_STATUS_REASON_PARAMSA::dwReason"]
        [::std::mem::offset_of!(_SERVICE_CONTROL_STATUS_REASON_PARAMSA, dwReason) - 0usize];
    ["Offset of field: _SERVICE_CONTROL_STATUS_REASON_PARAMSA::pszComment"]
        [::std::mem::offset_of!(_SERVICE_CONTROL_STATUS_REASON_PARAMSA, pszComment) - 8usize];
    ["Offset of field: _SERVICE_CONTROL_STATUS_REASON_PARAMSA::ServiceStatus"]
        [::std::mem::offset_of!(_SERVICE_CONTROL_STATUS_REASON_PARAMSA, ServiceStatus) - 16usize];
};
pub type SERVICE_CONTROL_STATUS_REASON_PARAMSA = _SERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub type PSERVICE_CONTROL_STATUS_REASON_PARAMSA = *mut _SERVICE_CONTROL_STATUS_REASON_PARAMSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    pub dwReason: DWORD,
    pub pszComment: LPWSTR,
    pub ServiceStatus: SERVICE_STATUS_PROCESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_CONTROL_STATUS_REASON_PARAMSW"]
        [::std::mem::size_of::<_SERVICE_CONTROL_STATUS_REASON_PARAMSW>() - 56usize];
    ["Alignment of _SERVICE_CONTROL_STATUS_REASON_PARAMSW"]
        [::std::mem::align_of::<_SERVICE_CONTROL_STATUS_REASON_PARAMSW>() - 8usize];
    ["Offset of field: _SERVICE_CONTROL_STATUS_REASON_PARAMSW::dwReason"]
        [::std::mem::offset_of!(_SERVICE_CONTROL_STATUS_REASON_PARAMSW, dwReason) - 0usize];
    ["Offset of field: _SERVICE_CONTROL_STATUS_REASON_PARAMSW::pszComment"]
        [::std::mem::offset_of!(_SERVICE_CONTROL_STATUS_REASON_PARAMSW, pszComment) - 8usize];
    ["Offset of field: _SERVICE_CONTROL_STATUS_REASON_PARAMSW::ServiceStatus"]
        [::std::mem::offset_of!(_SERVICE_CONTROL_STATUS_REASON_PARAMSW, ServiceStatus) - 16usize];
};
pub type SERVICE_CONTROL_STATUS_REASON_PARAMSW = _SERVICE_CONTROL_STATUS_REASON_PARAMSW;
pub type PSERVICE_CONTROL_STATUS_REASON_PARAMSW = *mut _SERVICE_CONTROL_STATUS_REASON_PARAMSW;
pub type SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub type PSERVICE_CONTROL_STATUS_REASON_PARAMS = PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SERVICE_START_REASON {
    pub dwReason: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SERVICE_START_REASON"][::std::mem::size_of::<_SERVICE_START_REASON>() - 4usize];
    ["Alignment of _SERVICE_START_REASON"]
        [::std::mem::align_of::<_SERVICE_START_REASON>() - 4usize];
    ["Offset of field: _SERVICE_START_REASON::dwReason"]
        [::std::mem::offset_of!(_SERVICE_START_REASON, dwReason) - 0usize];
};
pub type SERVICE_START_REASON = _SERVICE_START_REASON;
pub type PSERVICE_START_REASON = *mut _SERVICE_START_REASON;
unsafe extern "C" {
    pub fn ChangeServiceConfigA(
        hService: SC_HANDLE,
        dwServiceType: DWORD,
        dwStartType: DWORD,
        dwErrorControl: DWORD,
        lpBinaryPathName: LPCSTR,
        lpLoadOrderGroup: LPCSTR,
        lpdwTagId: LPDWORD,
        lpDependencies: LPCSTR,
        lpServiceStartName: LPCSTR,
        lpPassword: LPCSTR,
        lpDisplayName: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ChangeServiceConfigW(
        hService: SC_HANDLE,
        dwServiceType: DWORD,
        dwStartType: DWORD,
        dwErrorControl: DWORD,
        lpBinaryPathName: LPCWSTR,
        lpLoadOrderGroup: LPCWSTR,
        lpdwTagId: LPDWORD,
        lpDependencies: LPCWSTR,
        lpServiceStartName: LPCWSTR,
        lpPassword: LPCWSTR,
        lpDisplayName: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ChangeServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn ChangeServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn CloseServiceHandle(hSCObject: SC_HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn ControlService(
        hService: SC_HANDLE,
        dwControl: DWORD,
        lpServiceStatus: LPSERVICE_STATUS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn CreateServiceA(
        hSCManager: SC_HANDLE,
        lpServiceName: LPCSTR,
        lpDisplayName: LPCSTR,
        dwDesiredAccess: DWORD,
        dwServiceType: DWORD,
        dwStartType: DWORD,
        dwErrorControl: DWORD,
        lpBinaryPathName: LPCSTR,
        lpLoadOrderGroup: LPCSTR,
        lpdwTagId: LPDWORD,
        lpDependencies: LPCSTR,
        lpServiceStartName: LPCSTR,
        lpPassword: LPCSTR,
    ) -> SC_HANDLE;
}
unsafe extern "C" {
    pub fn CreateServiceW(
        hSCManager: SC_HANDLE,
        lpServiceName: LPCWSTR,
        lpDisplayName: LPCWSTR,
        dwDesiredAccess: DWORD,
        dwServiceType: DWORD,
        dwStartType: DWORD,
        dwErrorControl: DWORD,
        lpBinaryPathName: LPCWSTR,
        lpLoadOrderGroup: LPCWSTR,
        lpdwTagId: LPDWORD,
        lpDependencies: LPCWSTR,
        lpServiceStartName: LPCWSTR,
        lpPassword: LPCWSTR,
    ) -> SC_HANDLE;
}
unsafe extern "C" {
    pub fn DeleteService(hService: SC_HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDependentServicesA(
        hService: SC_HANDLE,
        dwServiceState: DWORD,
        lpServices: LPENUM_SERVICE_STATUSA,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
        lpServicesReturned: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumDependentServicesW(
        hService: SC_HANDLE,
        dwServiceState: DWORD,
        lpServices: LPENUM_SERVICE_STATUSW,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
        lpServicesReturned: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumServicesStatusA(
        hSCManager: SC_HANDLE,
        dwServiceType: DWORD,
        dwServiceState: DWORD,
        lpServices: LPENUM_SERVICE_STATUSA,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
        lpServicesReturned: LPDWORD,
        lpResumeHandle: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumServicesStatusW(
        hSCManager: SC_HANDLE,
        dwServiceType: DWORD,
        dwServiceState: DWORD,
        lpServices: LPENUM_SERVICE_STATUSW,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
        lpServicesReturned: LPDWORD,
        lpResumeHandle: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumServicesStatusExA(
        hSCManager: SC_HANDLE,
        InfoLevel: SC_ENUM_TYPE,
        dwServiceType: DWORD,
        dwServiceState: DWORD,
        lpServices: LPBYTE,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
        lpServicesReturned: LPDWORD,
        lpResumeHandle: LPDWORD,
        pszGroupName: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn EnumServicesStatusExW(
        hSCManager: SC_HANDLE,
        InfoLevel: SC_ENUM_TYPE,
        dwServiceType: DWORD,
        dwServiceState: DWORD,
        lpServices: LPBYTE,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
        lpServicesReturned: LPDWORD,
        lpResumeHandle: LPDWORD,
        pszGroupName: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetServiceKeyNameA(
        hSCManager: SC_HANDLE,
        lpDisplayName: LPCSTR,
        lpServiceName: LPSTR,
        lpcchBuffer: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetServiceKeyNameW(
        hSCManager: SC_HANDLE,
        lpDisplayName: LPCWSTR,
        lpServiceName: LPWSTR,
        lpcchBuffer: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetServiceDisplayNameA(
        hSCManager: SC_HANDLE,
        lpServiceName: LPCSTR,
        lpDisplayName: LPSTR,
        lpcchBuffer: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn GetServiceDisplayNameW(
        hSCManager: SC_HANDLE,
        lpServiceName: LPCWSTR,
        lpDisplayName: LPWSTR,
        lpcchBuffer: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn LockServiceDatabase(hSCManager: SC_HANDLE) -> SC_LOCK;
}
unsafe extern "C" {
    pub fn NotifyBootConfigStatus(BootAcceptable: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn OpenSCManagerA(
        lpMachineName: LPCSTR,
        lpDatabaseName: LPCSTR,
        dwDesiredAccess: DWORD,
    ) -> SC_HANDLE;
}
unsafe extern "C" {
    pub fn OpenSCManagerW(
        lpMachineName: LPCWSTR,
        lpDatabaseName: LPCWSTR,
        dwDesiredAccess: DWORD,
    ) -> SC_HANDLE;
}
unsafe extern "C" {
    pub fn OpenServiceA(
        hSCManager: SC_HANDLE,
        lpServiceName: LPCSTR,
        dwDesiredAccess: DWORD,
    ) -> SC_HANDLE;
}
unsafe extern "C" {
    pub fn OpenServiceW(
        hSCManager: SC_HANDLE,
        lpServiceName: LPCWSTR,
        dwDesiredAccess: DWORD,
    ) -> SC_HANDLE;
}
unsafe extern "C" {
    pub fn QueryServiceConfigA(
        hService: SC_HANDLE,
        lpServiceConfig: LPQUERY_SERVICE_CONFIGA,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceConfigW(
        hService: SC_HANDLE,
        lpServiceConfig: LPQUERY_SERVICE_CONFIGW,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceConfig2A(
        hService: SC_HANDLE,
        dwInfoLevel: DWORD,
        lpBuffer: LPBYTE,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceConfig2W(
        hService: SC_HANDLE,
        dwInfoLevel: DWORD,
        lpBuffer: LPBYTE,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceLockStatusA(
        hSCManager: SC_HANDLE,
        lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceLockStatusW(
        hSCManager: SC_HANDLE,
        lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceObjectSecurity(
        hService: SC_HANDLE,
        dwSecurityInformation: SECURITY_INFORMATION,
        lpSecurityDescriptor: PSECURITY_DESCRIPTOR,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceStatus(hService: SC_HANDLE, lpServiceStatus: LPSERVICE_STATUS) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceStatusEx(
        hService: SC_HANDLE,
        InfoLevel: SC_STATUS_TYPE,
        lpBuffer: LPBYTE,
        cbBufSize: DWORD,
        pcbBytesNeeded: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn RegisterServiceCtrlHandlerA(
        lpServiceName: LPCSTR,
        lpHandlerProc: LPHANDLER_FUNCTION,
    ) -> SERVICE_STATUS_HANDLE;
}
unsafe extern "C" {
    pub fn RegisterServiceCtrlHandlerW(
        lpServiceName: LPCWSTR,
        lpHandlerProc: LPHANDLER_FUNCTION,
    ) -> SERVICE_STATUS_HANDLE;
}
unsafe extern "C" {
    pub fn RegisterServiceCtrlHandlerExA(
        lpServiceName: LPCSTR,
        lpHandlerProc: LPHANDLER_FUNCTION_EX,
        lpContext: LPVOID,
    ) -> SERVICE_STATUS_HANDLE;
}
unsafe extern "C" {
    pub fn RegisterServiceCtrlHandlerExW(
        lpServiceName: LPCWSTR,
        lpHandlerProc: LPHANDLER_FUNCTION_EX,
        lpContext: LPVOID,
    ) -> SERVICE_STATUS_HANDLE;
}
unsafe extern "C" {
    pub fn SetServiceObjectSecurity(
        hService: SC_HANDLE,
        dwSecurityInformation: SECURITY_INFORMATION,
        lpSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn SetServiceStatus(
        hServiceStatus: SERVICE_STATUS_HANDLE,
        lpServiceStatus: LPSERVICE_STATUS,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn StartServiceCtrlDispatcherA(lpServiceStartTable: *const SERVICE_TABLE_ENTRYA) -> BOOL;
}
unsafe extern "C" {
    pub fn StartServiceCtrlDispatcherW(lpServiceStartTable: *const SERVICE_TABLE_ENTRYW) -> BOOL;
}
unsafe extern "C" {
    pub fn StartServiceA(
        hService: SC_HANDLE,
        dwNumServiceArgs: DWORD,
        lpServiceArgVectors: *mut LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn StartServiceW(
        hService: SC_HANDLE,
        dwNumServiceArgs: DWORD,
        lpServiceArgVectors: *mut LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn UnlockServiceDatabase(ScLock: SC_LOCK) -> BOOL;
}
unsafe extern "C" {
    pub fn NotifyServiceStatusChangeA(
        hService: SC_HANDLE,
        dwNotifyMask: DWORD,
        pNotifyBuffer: PSERVICE_NOTIFYA,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn NotifyServiceStatusChangeW(
        hService: SC_HANDLE,
        dwNotifyMask: DWORD,
        pNotifyBuffer: PSERVICE_NOTIFYW,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ControlServiceExA(
        hService: SC_HANDLE,
        dwControl: DWORD,
        dwInfoLevel: DWORD,
        pControlParams: PVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ControlServiceExW(
        hService: SC_HANDLE,
        dwControl: DWORD,
        dwInfoLevel: DWORD,
        pControlParams: PVOID,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn QueryServiceDynamicInformation(
        hServiceStatus: SERVICE_STATUS_HANDLE,
        dwInfoLevel: DWORD,
        ppDynamicInfo: *mut PVOID,
    ) -> BOOL;
}
pub const _SC_EVENT_TYPE_SC_EVENT_DATABASE_CHANGE: _SC_EVENT_TYPE = 0;
pub const _SC_EVENT_TYPE_SC_EVENT_PROPERTY_CHANGE: _SC_EVENT_TYPE = 1;
pub const _SC_EVENT_TYPE_SC_EVENT_STATUS_CHANGE: _SC_EVENT_TYPE = 2;
pub type _SC_EVENT_TYPE = ::std::os::raw::c_int;
pub use self::_SC_EVENT_TYPE as SC_EVENT_TYPE;
pub type PSC_EVENT_TYPE = *mut _SC_EVENT_TYPE;
pub type PSC_NOTIFICATION_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(arg1: DWORD, arg2: PVOID)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SC_NOTIFICATION_REGISTRATION {
    _unused: [u8; 0],
}
pub type PSC_NOTIFICATION_REGISTRATION = *mut _SC_NOTIFICATION_REGISTRATION;
unsafe extern "C" {
    pub fn SubscribeServiceChangeNotifications(
        hService: SC_HANDLE,
        eEventType: SC_EVENT_TYPE,
        pCallback: PSC_NOTIFICATION_CALLBACK,
        pCallbackContext: PVOID,
        pSubscription: *mut PSC_NOTIFICATION_REGISTRATION,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn UnsubscribeServiceChangeNotifications(pSubscription: PSC_NOTIFICATION_REGISTRATION);
}
unsafe extern "C" {
    pub fn WaitServiceState(
        hService: SC_HANDLE,
        dwNotify: DWORD,
        dwTimeout: DWORD,
        hCancelEvent: HANDLE,
    ) -> DWORD;
}
pub const SERVICE_REGISTRY_STATE_TYPE_ServiceRegistryStateParameters: SERVICE_REGISTRY_STATE_TYPE =
    0;
pub const SERVICE_REGISTRY_STATE_TYPE_ServiceRegistryStatePersistent: SERVICE_REGISTRY_STATE_TYPE =
    1;
pub const SERVICE_REGISTRY_STATE_TYPE_MaxServiceRegistryStateType: SERVICE_REGISTRY_STATE_TYPE = 2;
pub type SERVICE_REGISTRY_STATE_TYPE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn GetServiceRegistryStateKey(
        ServiceStatusHandle: SERVICE_STATUS_HANDLE,
        StateType: SERVICE_REGISTRY_STATE_TYPE,
        AccessMask: DWORD,
        ServiceStateKey: *mut HKEY,
    ) -> DWORD;
}
pub const SERVICE_DIRECTORY_TYPE_ServiceDirectoryPersistentState: SERVICE_DIRECTORY_TYPE = 0;
pub const SERVICE_DIRECTORY_TYPE_ServiceDirectoryTypeMax: SERVICE_DIRECTORY_TYPE = 1;
pub type SERVICE_DIRECTORY_TYPE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn GetServiceDirectory(
        hServiceStatus: SERVICE_STATUS_HANDLE,
        eDirectoryType: SERVICE_DIRECTORY_TYPE,
        lpPathBuffer: PWCHAR,
        cchPathBufferLength: DWORD,
        lpcchRequiredBufferLength: *mut DWORD,
    ) -> DWORD;
}
pub const SERVICE_SHARED_REGISTRY_STATE_TYPE_ServiceSharedRegistryPersistentState:
    SERVICE_SHARED_REGISTRY_STATE_TYPE = 0;
pub type SERVICE_SHARED_REGISTRY_STATE_TYPE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn GetSharedServiceRegistryStateKey(
        ServiceHandle: SC_HANDLE,
        StateType: SERVICE_SHARED_REGISTRY_STATE_TYPE,
        AccessMask: DWORD,
        ServiceStateKey: *mut HKEY,
    ) -> DWORD;
}
pub const SERVICE_SHARED_DIRECTORY_TYPE_ServiceSharedDirectoryPersistentState:
    SERVICE_SHARED_DIRECTORY_TYPE = 0;
pub type SERVICE_SHARED_DIRECTORY_TYPE = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn GetSharedServiceDirectory(
        ServiceHandle: SC_HANDLE,
        DirectoryType: SERVICE_SHARED_DIRECTORY_TYPE,
        PathBuffer: PWCHAR,
        PathBufferLength: DWORD,
        RequiredBufferLength: *mut DWORD,
    ) -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MODEMDEVCAPS {
    pub dwActualSize: DWORD,
    pub dwRequiredSize: DWORD,
    pub dwDevSpecificOffset: DWORD,
    pub dwDevSpecificSize: DWORD,
    pub dwModemProviderVersion: DWORD,
    pub dwModemManufacturerOffset: DWORD,
    pub dwModemManufacturerSize: DWORD,
    pub dwModemModelOffset: DWORD,
    pub dwModemModelSize: DWORD,
    pub dwModemVersionOffset: DWORD,
    pub dwModemVersionSize: DWORD,
    pub dwDialOptions: DWORD,
    pub dwCallSetupFailTimer: DWORD,
    pub dwInactivityTimeout: DWORD,
    pub dwSpeakerVolume: DWORD,
    pub dwSpeakerMode: DWORD,
    pub dwModemOptions: DWORD,
    pub dwMaxDTERate: DWORD,
    pub dwMaxDCERate: DWORD,
    pub abVariablePortion: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MODEMDEVCAPS"][::std::mem::size_of::<_MODEMDEVCAPS>() - 80usize];
    ["Alignment of _MODEMDEVCAPS"][::std::mem::align_of::<_MODEMDEVCAPS>() - 4usize];
    ["Offset of field: _MODEMDEVCAPS::dwActualSize"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwActualSize) - 0usize];
    ["Offset of field: _MODEMDEVCAPS::dwRequiredSize"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwRequiredSize) - 4usize];
    ["Offset of field: _MODEMDEVCAPS::dwDevSpecificOffset"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwDevSpecificOffset) - 8usize];
    ["Offset of field: _MODEMDEVCAPS::dwDevSpecificSize"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwDevSpecificSize) - 12usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemProviderVersion"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemProviderVersion) - 16usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemManufacturerOffset"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemManufacturerOffset) - 20usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemManufacturerSize"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemManufacturerSize) - 24usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemModelOffset"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemModelOffset) - 28usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemModelSize"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemModelSize) - 32usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemVersionOffset"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemVersionOffset) - 36usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemVersionSize"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemVersionSize) - 40usize];
    ["Offset of field: _MODEMDEVCAPS::dwDialOptions"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwDialOptions) - 44usize];
    ["Offset of field: _MODEMDEVCAPS::dwCallSetupFailTimer"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwCallSetupFailTimer) - 48usize];
    ["Offset of field: _MODEMDEVCAPS::dwInactivityTimeout"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwInactivityTimeout) - 52usize];
    ["Offset of field: _MODEMDEVCAPS::dwSpeakerVolume"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwSpeakerVolume) - 56usize];
    ["Offset of field: _MODEMDEVCAPS::dwSpeakerMode"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwSpeakerMode) - 60usize];
    ["Offset of field: _MODEMDEVCAPS::dwModemOptions"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwModemOptions) - 64usize];
    ["Offset of field: _MODEMDEVCAPS::dwMaxDTERate"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwMaxDTERate) - 68usize];
    ["Offset of field: _MODEMDEVCAPS::dwMaxDCERate"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, dwMaxDCERate) - 72usize];
    ["Offset of field: _MODEMDEVCAPS::abVariablePortion"]
        [::std::mem::offset_of!(_MODEMDEVCAPS, abVariablePortion) - 76usize];
};
pub type MODEMDEVCAPS = _MODEMDEVCAPS;
pub type PMODEMDEVCAPS = *mut _MODEMDEVCAPS;
pub type LPMODEMDEVCAPS = *mut _MODEMDEVCAPS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MODEMSETTINGS {
    pub dwActualSize: DWORD,
    pub dwRequiredSize: DWORD,
    pub dwDevSpecificOffset: DWORD,
    pub dwDevSpecificSize: DWORD,
    pub dwCallSetupFailTimer: DWORD,
    pub dwInactivityTimeout: DWORD,
    pub dwSpeakerVolume: DWORD,
    pub dwSpeakerMode: DWORD,
    pub dwPreferredModemOptions: DWORD,
    pub dwNegotiatedModemOptions: DWORD,
    pub dwNegotiatedDCERate: DWORD,
    pub abVariablePortion: [BYTE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MODEMSETTINGS"][::std::mem::size_of::<_MODEMSETTINGS>() - 48usize];
    ["Alignment of _MODEMSETTINGS"][::std::mem::align_of::<_MODEMSETTINGS>() - 4usize];
    ["Offset of field: _MODEMSETTINGS::dwActualSize"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwActualSize) - 0usize];
    ["Offset of field: _MODEMSETTINGS::dwRequiredSize"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwRequiredSize) - 4usize];
    ["Offset of field: _MODEMSETTINGS::dwDevSpecificOffset"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwDevSpecificOffset) - 8usize];
    ["Offset of field: _MODEMSETTINGS::dwDevSpecificSize"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwDevSpecificSize) - 12usize];
    ["Offset of field: _MODEMSETTINGS::dwCallSetupFailTimer"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwCallSetupFailTimer) - 16usize];
    ["Offset of field: _MODEMSETTINGS::dwInactivityTimeout"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwInactivityTimeout) - 20usize];
    ["Offset of field: _MODEMSETTINGS::dwSpeakerVolume"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwSpeakerVolume) - 24usize];
    ["Offset of field: _MODEMSETTINGS::dwSpeakerMode"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwSpeakerMode) - 28usize];
    ["Offset of field: _MODEMSETTINGS::dwPreferredModemOptions"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwPreferredModemOptions) - 32usize];
    ["Offset of field: _MODEMSETTINGS::dwNegotiatedModemOptions"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwNegotiatedModemOptions) - 36usize];
    ["Offset of field: _MODEMSETTINGS::dwNegotiatedDCERate"]
        [::std::mem::offset_of!(_MODEMSETTINGS, dwNegotiatedDCERate) - 40usize];
    ["Offset of field: _MODEMSETTINGS::abVariablePortion"]
        [::std::mem::offset_of!(_MODEMSETTINGS, abVariablePortion) - 44usize];
};
pub type MODEMSETTINGS = _MODEMSETTINGS;
pub type PMODEMSETTINGS = *mut _MODEMSETTINGS;
pub type LPMODEMSETTINGS = *mut _MODEMSETTINGS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HIMC__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HIMC__"][::std::mem::size_of::<HIMC__>() - 4usize];
    ["Alignment of HIMC__"][::std::mem::align_of::<HIMC__>() - 4usize];
    ["Offset of field: HIMC__::unused"][::std::mem::offset_of!(HIMC__, unused) - 0usize];
};
pub type HIMC = *mut HIMC__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HIMCC__ {
    pub unused: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HIMCC__"][::std::mem::size_of::<HIMCC__>() - 4usize];
    ["Alignment of HIMCC__"][::std::mem::align_of::<HIMCC__>() - 4usize];
    ["Offset of field: HIMCC__::unused"][::std::mem::offset_of!(HIMCC__, unused) - 0usize];
};
pub type HIMCC = *mut HIMCC__;
pub type LPHKL = *mut HKL;
pub type LPUINT = *mut UINT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCOMPOSITIONFORM {
    pub dwStyle: DWORD,
    pub ptCurrentPos: POINT,
    pub rcArea: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCOMPOSITIONFORM"][::std::mem::size_of::<tagCOMPOSITIONFORM>() - 28usize];
    ["Alignment of tagCOMPOSITIONFORM"][::std::mem::align_of::<tagCOMPOSITIONFORM>() - 4usize];
    ["Offset of field: tagCOMPOSITIONFORM::dwStyle"]
        [::std::mem::offset_of!(tagCOMPOSITIONFORM, dwStyle) - 0usize];
    ["Offset of field: tagCOMPOSITIONFORM::ptCurrentPos"]
        [::std::mem::offset_of!(tagCOMPOSITIONFORM, ptCurrentPos) - 4usize];
    ["Offset of field: tagCOMPOSITIONFORM::rcArea"]
        [::std::mem::offset_of!(tagCOMPOSITIONFORM, rcArea) - 12usize];
};
pub type COMPOSITIONFORM = tagCOMPOSITIONFORM;
pub type PCOMPOSITIONFORM = *mut tagCOMPOSITIONFORM;
pub type NPCOMPOSITIONFORM = *mut tagCOMPOSITIONFORM;
pub type LPCOMPOSITIONFORM = *mut tagCOMPOSITIONFORM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCANDIDATEFORM {
    pub dwIndex: DWORD,
    pub dwStyle: DWORD,
    pub ptCurrentPos: POINT,
    pub rcArea: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCANDIDATEFORM"][::std::mem::size_of::<tagCANDIDATEFORM>() - 32usize];
    ["Alignment of tagCANDIDATEFORM"][::std::mem::align_of::<tagCANDIDATEFORM>() - 4usize];
    ["Offset of field: tagCANDIDATEFORM::dwIndex"]
        [::std::mem::offset_of!(tagCANDIDATEFORM, dwIndex) - 0usize];
    ["Offset of field: tagCANDIDATEFORM::dwStyle"]
        [::std::mem::offset_of!(tagCANDIDATEFORM, dwStyle) - 4usize];
    ["Offset of field: tagCANDIDATEFORM::ptCurrentPos"]
        [::std::mem::offset_of!(tagCANDIDATEFORM, ptCurrentPos) - 8usize];
    ["Offset of field: tagCANDIDATEFORM::rcArea"]
        [::std::mem::offset_of!(tagCANDIDATEFORM, rcArea) - 16usize];
};
pub type CANDIDATEFORM = tagCANDIDATEFORM;
pub type PCANDIDATEFORM = *mut tagCANDIDATEFORM;
pub type NPCANDIDATEFORM = *mut tagCANDIDATEFORM;
pub type LPCANDIDATEFORM = *mut tagCANDIDATEFORM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagCANDIDATELIST {
    pub dwSize: DWORD,
    pub dwStyle: DWORD,
    pub dwCount: DWORD,
    pub dwSelection: DWORD,
    pub dwPageStart: DWORD,
    pub dwPageSize: DWORD,
    pub dwOffset: [DWORD; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagCANDIDATELIST"][::std::mem::size_of::<tagCANDIDATELIST>() - 28usize];
    ["Alignment of tagCANDIDATELIST"][::std::mem::align_of::<tagCANDIDATELIST>() - 4usize];
    ["Offset of field: tagCANDIDATELIST::dwSize"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwSize) - 0usize];
    ["Offset of field: tagCANDIDATELIST::dwStyle"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwStyle) - 4usize];
    ["Offset of field: tagCANDIDATELIST::dwCount"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwCount) - 8usize];
    ["Offset of field: tagCANDIDATELIST::dwSelection"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwSelection) - 12usize];
    ["Offset of field: tagCANDIDATELIST::dwPageStart"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwPageStart) - 16usize];
    ["Offset of field: tagCANDIDATELIST::dwPageSize"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwPageSize) - 20usize];
    ["Offset of field: tagCANDIDATELIST::dwOffset"]
        [::std::mem::offset_of!(tagCANDIDATELIST, dwOffset) - 24usize];
};
pub type CANDIDATELIST = tagCANDIDATELIST;
pub type PCANDIDATELIST = *mut tagCANDIDATELIST;
pub type NPCANDIDATELIST = *mut tagCANDIDATELIST;
pub type LPCANDIDATELIST = *mut tagCANDIDATELIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagREGISTERWORDA {
    pub lpReading: LPSTR,
    pub lpWord: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagREGISTERWORDA"][::std::mem::size_of::<tagREGISTERWORDA>() - 16usize];
    ["Alignment of tagREGISTERWORDA"][::std::mem::align_of::<tagREGISTERWORDA>() - 8usize];
    ["Offset of field: tagREGISTERWORDA::lpReading"]
        [::std::mem::offset_of!(tagREGISTERWORDA, lpReading) - 0usize];
    ["Offset of field: tagREGISTERWORDA::lpWord"]
        [::std::mem::offset_of!(tagREGISTERWORDA, lpWord) - 8usize];
};
pub type REGISTERWORDA = tagREGISTERWORDA;
pub type PREGISTERWORDA = *mut tagREGISTERWORDA;
pub type NPREGISTERWORDA = *mut tagREGISTERWORDA;
pub type LPREGISTERWORDA = *mut tagREGISTERWORDA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagREGISTERWORDW {
    pub lpReading: LPWSTR,
    pub lpWord: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagREGISTERWORDW"][::std::mem::size_of::<tagREGISTERWORDW>() - 16usize];
    ["Alignment of tagREGISTERWORDW"][::std::mem::align_of::<tagREGISTERWORDW>() - 8usize];
    ["Offset of field: tagREGISTERWORDW::lpReading"]
        [::std::mem::offset_of!(tagREGISTERWORDW, lpReading) - 0usize];
    ["Offset of field: tagREGISTERWORDW::lpWord"]
        [::std::mem::offset_of!(tagREGISTERWORDW, lpWord) - 8usize];
};
pub type REGISTERWORDW = tagREGISTERWORDW;
pub type PREGISTERWORDW = *mut tagREGISTERWORDW;
pub type NPREGISTERWORDW = *mut tagREGISTERWORDW;
pub type LPREGISTERWORDW = *mut tagREGISTERWORDW;
pub type REGISTERWORD = REGISTERWORDA;
pub type PREGISTERWORD = PREGISTERWORDA;
pub type NPREGISTERWORD = NPREGISTERWORDA;
pub type LPREGISTERWORD = LPREGISTERWORDA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagRECONVERTSTRING {
    pub dwSize: DWORD,
    pub dwVersion: DWORD,
    pub dwStrLen: DWORD,
    pub dwStrOffset: DWORD,
    pub dwCompStrLen: DWORD,
    pub dwCompStrOffset: DWORD,
    pub dwTargetStrLen: DWORD,
    pub dwTargetStrOffset: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagRECONVERTSTRING"][::std::mem::size_of::<tagRECONVERTSTRING>() - 32usize];
    ["Alignment of tagRECONVERTSTRING"][::std::mem::align_of::<tagRECONVERTSTRING>() - 4usize];
    ["Offset of field: tagRECONVERTSTRING::dwSize"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwSize) - 0usize];
    ["Offset of field: tagRECONVERTSTRING::dwVersion"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwVersion) - 4usize];
    ["Offset of field: tagRECONVERTSTRING::dwStrLen"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwStrLen) - 8usize];
    ["Offset of field: tagRECONVERTSTRING::dwStrOffset"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwStrOffset) - 12usize];
    ["Offset of field: tagRECONVERTSTRING::dwCompStrLen"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwCompStrLen) - 16usize];
    ["Offset of field: tagRECONVERTSTRING::dwCompStrOffset"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwCompStrOffset) - 20usize];
    ["Offset of field: tagRECONVERTSTRING::dwTargetStrLen"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwTargetStrLen) - 24usize];
    ["Offset of field: tagRECONVERTSTRING::dwTargetStrOffset"]
        [::std::mem::offset_of!(tagRECONVERTSTRING, dwTargetStrOffset) - 28usize];
};
pub type RECONVERTSTRING = tagRECONVERTSTRING;
pub type PRECONVERTSTRING = *mut tagRECONVERTSTRING;
pub type NPRECONVERTSTRING = *mut tagRECONVERTSTRING;
pub type LPRECONVERTSTRING = *mut tagRECONVERTSTRING;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSTYLEBUFA {
    pub dwStyle: DWORD,
    pub szDescription: [CHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSTYLEBUFA"][::std::mem::size_of::<tagSTYLEBUFA>() - 36usize];
    ["Alignment of tagSTYLEBUFA"][::std::mem::align_of::<tagSTYLEBUFA>() - 4usize];
    ["Offset of field: tagSTYLEBUFA::dwStyle"]
        [::std::mem::offset_of!(tagSTYLEBUFA, dwStyle) - 0usize];
    ["Offset of field: tagSTYLEBUFA::szDescription"]
        [::std::mem::offset_of!(tagSTYLEBUFA, szDescription) - 4usize];
};
pub type STYLEBUFA = tagSTYLEBUFA;
pub type PSTYLEBUFA = *mut tagSTYLEBUFA;
pub type NPSTYLEBUFA = *mut tagSTYLEBUFA;
pub type LPSTYLEBUFA = *mut tagSTYLEBUFA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagSTYLEBUFW {
    pub dwStyle: DWORD,
    pub szDescription: [WCHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagSTYLEBUFW"][::std::mem::size_of::<tagSTYLEBUFW>() - 68usize];
    ["Alignment of tagSTYLEBUFW"][::std::mem::align_of::<tagSTYLEBUFW>() - 4usize];
    ["Offset of field: tagSTYLEBUFW::dwStyle"]
        [::std::mem::offset_of!(tagSTYLEBUFW, dwStyle) - 0usize];
    ["Offset of field: tagSTYLEBUFW::szDescription"]
        [::std::mem::offset_of!(tagSTYLEBUFW, szDescription) - 4usize];
};
pub type STYLEBUFW = tagSTYLEBUFW;
pub type PSTYLEBUFW = *mut tagSTYLEBUFW;
pub type NPSTYLEBUFW = *mut tagSTYLEBUFW;
pub type LPSTYLEBUFW = *mut tagSTYLEBUFW;
pub type STYLEBUF = STYLEBUFA;
pub type PSTYLEBUF = PSTYLEBUFA;
pub type NPSTYLEBUF = NPSTYLEBUFA;
pub type LPSTYLEBUF = LPSTYLEBUFA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIMEMENUITEMINFOA {
    pub cbSize: UINT,
    pub fType: UINT,
    pub fState: UINT,
    pub wID: UINT,
    pub hbmpChecked: HBITMAP,
    pub hbmpUnchecked: HBITMAP,
    pub dwItemData: DWORD,
    pub szString: [CHAR; 80usize],
    pub hbmpItem: HBITMAP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagIMEMENUITEMINFOA"][::std::mem::size_of::<tagIMEMENUITEMINFOA>() - 128usize];
    ["Alignment of tagIMEMENUITEMINFOA"][::std::mem::align_of::<tagIMEMENUITEMINFOA>() - 8usize];
    ["Offset of field: tagIMEMENUITEMINFOA::cbSize"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, cbSize) - 0usize];
    ["Offset of field: tagIMEMENUITEMINFOA::fType"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, fType) - 4usize];
    ["Offset of field: tagIMEMENUITEMINFOA::fState"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, fState) - 8usize];
    ["Offset of field: tagIMEMENUITEMINFOA::wID"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, wID) - 12usize];
    ["Offset of field: tagIMEMENUITEMINFOA::hbmpChecked"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, hbmpChecked) - 16usize];
    ["Offset of field: tagIMEMENUITEMINFOA::hbmpUnchecked"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, hbmpUnchecked) - 24usize];
    ["Offset of field: tagIMEMENUITEMINFOA::dwItemData"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, dwItemData) - 32usize];
    ["Offset of field: tagIMEMENUITEMINFOA::szString"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, szString) - 36usize];
    ["Offset of field: tagIMEMENUITEMINFOA::hbmpItem"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOA, hbmpItem) - 120usize];
};
pub type IMEMENUITEMINFOA = tagIMEMENUITEMINFOA;
pub type PIMEMENUITEMINFOA = *mut tagIMEMENUITEMINFOA;
pub type NPIMEMENUITEMINFOA = *mut tagIMEMENUITEMINFOA;
pub type LPIMEMENUITEMINFOA = *mut tagIMEMENUITEMINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIMEMENUITEMINFOW {
    pub cbSize: UINT,
    pub fType: UINT,
    pub fState: UINT,
    pub wID: UINT,
    pub hbmpChecked: HBITMAP,
    pub hbmpUnchecked: HBITMAP,
    pub dwItemData: DWORD,
    pub szString: [WCHAR; 80usize],
    pub hbmpItem: HBITMAP,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagIMEMENUITEMINFOW"][::std::mem::size_of::<tagIMEMENUITEMINFOW>() - 208usize];
    ["Alignment of tagIMEMENUITEMINFOW"][::std::mem::align_of::<tagIMEMENUITEMINFOW>() - 8usize];
    ["Offset of field: tagIMEMENUITEMINFOW::cbSize"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, cbSize) - 0usize];
    ["Offset of field: tagIMEMENUITEMINFOW::fType"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, fType) - 4usize];
    ["Offset of field: tagIMEMENUITEMINFOW::fState"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, fState) - 8usize];
    ["Offset of field: tagIMEMENUITEMINFOW::wID"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, wID) - 12usize];
    ["Offset of field: tagIMEMENUITEMINFOW::hbmpChecked"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, hbmpChecked) - 16usize];
    ["Offset of field: tagIMEMENUITEMINFOW::hbmpUnchecked"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, hbmpUnchecked) - 24usize];
    ["Offset of field: tagIMEMENUITEMINFOW::dwItemData"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, dwItemData) - 32usize];
    ["Offset of field: tagIMEMENUITEMINFOW::szString"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, szString) - 36usize];
    ["Offset of field: tagIMEMENUITEMINFOW::hbmpItem"]
        [::std::mem::offset_of!(tagIMEMENUITEMINFOW, hbmpItem) - 200usize];
};
pub type IMEMENUITEMINFOW = tagIMEMENUITEMINFOW;
pub type PIMEMENUITEMINFOW = *mut tagIMEMENUITEMINFOW;
pub type NPIMEMENUITEMINFOW = *mut tagIMEMENUITEMINFOW;
pub type LPIMEMENUITEMINFOW = *mut tagIMEMENUITEMINFOW;
pub type IMEMENUITEMINFO = IMEMENUITEMINFOA;
pub type PIMEMENUITEMINFO = PIMEMENUITEMINFOA;
pub type NPIMEMENUITEMINFO = NPIMEMENUITEMINFOA;
pub type LPIMEMENUITEMINFO = LPIMEMENUITEMINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tagIMECHARPOSITION {
    pub dwSize: DWORD,
    pub dwCharPos: DWORD,
    pub pt: POINT,
    pub cLineHeight: UINT,
    pub rcDocument: RECT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tagIMECHARPOSITION"][::std::mem::size_of::<tagIMECHARPOSITION>() - 36usize];
    ["Alignment of tagIMECHARPOSITION"][::std::mem::align_of::<tagIMECHARPOSITION>() - 4usize];
    ["Offset of field: tagIMECHARPOSITION::dwSize"]
        [::std::mem::offset_of!(tagIMECHARPOSITION, dwSize) - 0usize];
    ["Offset of field: tagIMECHARPOSITION::dwCharPos"]
        [::std::mem::offset_of!(tagIMECHARPOSITION, dwCharPos) - 4usize];
    ["Offset of field: tagIMECHARPOSITION::pt"]
        [::std::mem::offset_of!(tagIMECHARPOSITION, pt) - 8usize];
    ["Offset of field: tagIMECHARPOSITION::cLineHeight"]
        [::std::mem::offset_of!(tagIMECHARPOSITION, cLineHeight) - 16usize];
    ["Offset of field: tagIMECHARPOSITION::rcDocument"]
        [::std::mem::offset_of!(tagIMECHARPOSITION, rcDocument) - 20usize];
};
pub type IMECHARPOSITION = tagIMECHARPOSITION;
pub type PIMECHARPOSITION = *mut tagIMECHARPOSITION;
pub type NPIMECHARPOSITION = *mut tagIMECHARPOSITION;
pub type LPIMECHARPOSITION = *mut tagIMECHARPOSITION;
pub type IMCENUMPROC =
    ::std::option::Option<unsafe extern "C" fn(arg1: HIMC, arg2: LPARAM) -> BOOL>;
unsafe extern "C" {
    pub fn ImmInstallIMEA(lpszIMEFileName: LPCSTR, lpszLayoutText: LPCSTR) -> HKL;
}
unsafe extern "C" {
    pub fn ImmInstallIMEW(lpszIMEFileName: LPCWSTR, lpszLayoutText: LPCWSTR) -> HKL;
}
unsafe extern "C" {
    pub fn ImmGetDefaultIMEWnd(arg1: HWND) -> HWND;
}
unsafe extern "C" {
    pub fn ImmGetDescriptionA(arg1: HKL, lpszDescription: LPSTR, uBufLen: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn ImmGetDescriptionW(arg1: HKL, lpszDescription: LPWSTR, uBufLen: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn ImmGetIMEFileNameA(arg1: HKL, lpszFileName: LPSTR, uBufLen: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn ImmGetIMEFileNameW(arg1: HKL, lpszFileName: LPWSTR, uBufLen: UINT) -> UINT;
}
unsafe extern "C" {
    pub fn ImmGetProperty(arg1: HKL, arg2: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmIsIME(arg1: HKL) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSimulateHotKey(arg1: HWND, arg2: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmCreateContext() -> HIMC;
}
unsafe extern "C" {
    pub fn ImmDestroyContext(arg1: HIMC) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetContext(arg1: HWND) -> HIMC;
}
unsafe extern "C" {
    pub fn ImmReleaseContext(arg1: HWND, arg2: HIMC) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmAssociateContext(arg1: HWND, arg2: HIMC) -> HIMC;
}
unsafe extern "C" {
    pub fn ImmAssociateContextEx(arg1: HWND, arg2: HIMC, arg3: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetCompositionStringA(
        arg1: HIMC,
        arg2: DWORD,
        lpBuf: LPVOID,
        dwBufLen: DWORD,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn ImmGetCompositionStringW(
        arg1: HIMC,
        arg2: DWORD,
        lpBuf: LPVOID,
        dwBufLen: DWORD,
    ) -> LONG;
}
unsafe extern "C" {
    pub fn ImmSetCompositionStringA(
        arg1: HIMC,
        dwIndex: DWORD,
        lpComp: LPVOID,
        dwCompLen: DWORD,
        lpRead: LPVOID,
        dwReadLen: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetCompositionStringW(
        arg1: HIMC,
        dwIndex: DWORD,
        lpComp: LPVOID,
        dwCompLen: DWORD,
        lpRead: LPVOID,
        dwReadLen: DWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetCandidateListCountA(arg1: HIMC, lpdwListCount: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetCandidateListCountW(arg1: HIMC, lpdwListCount: LPDWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetCandidateListA(
        arg1: HIMC,
        deIndex: DWORD,
        lpCandList: LPCANDIDATELIST,
        dwBufLen: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetCandidateListW(
        arg1: HIMC,
        deIndex: DWORD,
        lpCandList: LPCANDIDATELIST,
        dwBufLen: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetGuideLineA(arg1: HIMC, dwIndex: DWORD, lpBuf: LPSTR, dwBufLen: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetGuideLineW(arg1: HIMC, dwIndex: DWORD, lpBuf: LPWSTR, dwBufLen: DWORD) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetConversionStatus(
        arg1: HIMC,
        lpfdwConversion: LPDWORD,
        lpfdwSentence: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetConversionStatus(arg1: HIMC, arg2: DWORD, arg3: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetOpenStatus(arg1: HIMC) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetOpenStatus(arg1: HIMC, arg2: BOOL) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetCompositionFontA(arg1: HIMC, lplf: LPLOGFONTA) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetCompositionFontW(arg1: HIMC, lplf: LPLOGFONTW) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetCompositionFontA(arg1: HIMC, lplf: LPLOGFONTA) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetCompositionFontW(arg1: HIMC, lplf: LPLOGFONTW) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmConfigureIMEA(arg1: HKL, arg2: HWND, arg3: DWORD, arg4: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmConfigureIMEW(arg1: HKL, arg2: HWND, arg3: DWORD, arg4: LPVOID) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmEscapeA(arg1: HKL, arg2: HIMC, arg3: UINT, arg4: LPVOID) -> LRESULT;
}
unsafe extern "C" {
    pub fn ImmEscapeW(arg1: HKL, arg2: HIMC, arg3: UINT, arg4: LPVOID) -> LRESULT;
}
unsafe extern "C" {
    pub fn ImmGetConversionListA(
        arg1: HKL,
        arg2: HIMC,
        lpSrc: LPCSTR,
        lpDst: LPCANDIDATELIST,
        dwBufLen: DWORD,
        uFlag: UINT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetConversionListW(
        arg1: HKL,
        arg2: HIMC,
        lpSrc: LPCWSTR,
        lpDst: LPCANDIDATELIST,
        dwBufLen: DWORD,
        uFlag: UINT,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmNotifyIME(arg1: HIMC, dwAction: DWORD, dwIndex: DWORD, dwValue: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetStatusWindowPos(arg1: HIMC, lpptPos: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetStatusWindowPos(arg1: HIMC, lpptPos: LPPOINT) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetCompositionWindow(arg1: HIMC, lpCompForm: LPCOMPOSITIONFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetCompositionWindow(arg1: HIMC, lpCompForm: LPCOMPOSITIONFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetCandidateWindow(arg1: HIMC, arg2: DWORD, lpCandidate: LPCANDIDATEFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmSetCandidateWindow(arg1: HIMC, lpCandidate: LPCANDIDATEFORM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmIsUIMessageA(arg1: HWND, arg2: UINT, arg3: WPARAM, arg4: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmIsUIMessageW(arg1: HWND, arg2: UINT, arg3: WPARAM, arg4: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetVirtualKey(arg1: HWND) -> UINT;
}
pub type REGISTERWORDENUMPROCA = ::std::option::Option<
    unsafe extern "C" fn(
        lpszReading: LPCSTR,
        arg1: DWORD,
        lpszString: LPCSTR,
        arg2: LPVOID,
    ) -> ::std::os::raw::c_int,
>;
pub type REGISTERWORDENUMPROCW = ::std::option::Option<
    unsafe extern "C" fn(
        lpszReading: LPCWSTR,
        arg1: DWORD,
        lpszString: LPCWSTR,
        arg2: LPVOID,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn ImmRegisterWordA(
        arg1: HKL,
        lpszReading: LPCSTR,
        arg2: DWORD,
        lpszRegister: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmRegisterWordW(
        arg1: HKL,
        lpszReading: LPCWSTR,
        arg2: DWORD,
        lpszRegister: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmUnregisterWordA(
        arg1: HKL,
        lpszReading: LPCSTR,
        arg2: DWORD,
        lpszUnregister: LPCSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmUnregisterWordW(
        arg1: HKL,
        lpszReading: LPCWSTR,
        arg2: DWORD,
        lpszUnregister: LPCWSTR,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetRegisterWordStyleA(arg1: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFA) -> UINT;
}
unsafe extern "C" {
    pub fn ImmGetRegisterWordStyleW(arg1: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFW) -> UINT;
}
unsafe extern "C" {
    pub fn ImmEnumRegisterWordA(
        arg1: HKL,
        arg2: REGISTERWORDENUMPROCA,
        lpszReading: LPCSTR,
        arg3: DWORD,
        lpszRegister: LPCSTR,
        arg4: LPVOID,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn ImmEnumRegisterWordW(
        arg1: HKL,
        arg2: REGISTERWORDENUMPROCW,
        lpszReading: LPCWSTR,
        arg3: DWORD,
        lpszRegister: LPCWSTR,
        arg4: LPVOID,
    ) -> UINT;
}
unsafe extern "C" {
    pub fn ImmDisableIME(arg1: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmEnumInputContext(idThread: DWORD, lpfn: IMCENUMPROC, lParam: LPARAM) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmGetImeMenuItemsA(
        arg1: HIMC,
        arg2: DWORD,
        arg3: DWORD,
        lpImeParentMenu: LPIMEMENUITEMINFOA,
        lpImeMenu: LPIMEMENUITEMINFOA,
        dwSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmGetImeMenuItemsW(
        arg1: HIMC,
        arg2: DWORD,
        arg3: DWORD,
        lpImeParentMenu: LPIMEMENUITEMINFOW,
        lpImeMenu: LPIMEMENUITEMINFOW,
        dwSize: DWORD,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn ImmDisableTextFrameService(idThread: DWORD) -> BOOL;
}
unsafe extern "C" {
    pub fn ImmDisableLegacyIME() -> BOOL;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type boolean = u8;
pub type int8 = i8;
pub type int16 = i16;
pub type int32 = i32;
pub type uint8 = u8;
pub type uint16 = u16;
pub type uint32 = u32;
pub type int64 = i64;
pub type uint64 = u64;
pub type float32 = f32;
pub type float64 = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_timet {
    pub sec: uint32,
    pub usec: uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_timet"][::std::mem::size_of::<ec_timet>() - 8usize];
    ["Alignment of ec_timet"][::std::mem::align_of::<ec_timet>() - 4usize];
    ["Offset of field: ec_timet::sec"][::std::mem::offset_of!(ec_timet, sec) - 0usize];
    ["Offset of field: ec_timet::usec"][::std::mem::offset_of!(ec_timet, usec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osal_timer {
    pub stop_time: ec_timet,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osal_timer"][::std::mem::size_of::<osal_timer>() - 8usize];
    ["Alignment of osal_timer"][::std::mem::align_of::<osal_timer>() - 4usize];
    ["Offset of field: osal_timer::stop_time"]
        [::std::mem::offset_of!(osal_timer, stop_time) - 0usize];
};
pub type osal_timert = osal_timer;
unsafe extern "C" {
    pub fn osal_timer_start(self_: *mut osal_timert, timeout_us: uint32);
}
unsafe extern "C" {
    pub fn osal_timer_is_expired(self_: *mut osal_timert) -> boolean;
}
unsafe extern "C" {
    pub fn osal_usleep(usec: uint32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn osal_current_time() -> ec_timet;
}
unsafe extern "C" {
    pub fn osal_time_diff(start: *mut ec_timet, end: *mut ec_timet, diff: *mut ec_timet);
}
unsafe extern "C" {
    pub fn osal_thread_create(
        thandle: *mut ::std::os::raw::c_void,
        stacksize: ::std::os::raw::c_int,
        func: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn osal_thread_create_rt(
        thandle: *mut ::std::os::raw::c_void,
        stacksize: ::std::os::raw::c_int,
        func: *mut ::std::os::raw::c_void,
        param: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[doc = " definition for frame buffers"]
pub type ec_bufT = [uint8; 1518usize];
#[doc = " ethernet header definition"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_etherheadert {
    #[doc = " destination MAC"]
    pub da0: uint16,
    #[doc = " destination MAC"]
    pub da1: uint16,
    #[doc = " destination MAC"]
    pub da2: uint16,
    #[doc = " source MAC"]
    pub sa0: uint16,
    #[doc = " source MAC"]
    pub sa1: uint16,
    #[doc = " source MAC"]
    pub sa2: uint16,
    #[doc = " ethernet type"]
    pub etype: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_etherheadert"][::std::mem::size_of::<ec_etherheadert>() - 14usize];
    ["Alignment of ec_etherheadert"][::std::mem::align_of::<ec_etherheadert>() - 1usize];
    ["Offset of field: ec_etherheadert::da0"]
        [::std::mem::offset_of!(ec_etherheadert, da0) - 0usize];
    ["Offset of field: ec_etherheadert::da1"]
        [::std::mem::offset_of!(ec_etherheadert, da1) - 2usize];
    ["Offset of field: ec_etherheadert::da2"]
        [::std::mem::offset_of!(ec_etherheadert, da2) - 4usize];
    ["Offset of field: ec_etherheadert::sa0"]
        [::std::mem::offset_of!(ec_etherheadert, sa0) - 6usize];
    ["Offset of field: ec_etherheadert::sa1"]
        [::std::mem::offset_of!(ec_etherheadert, sa1) - 8usize];
    ["Offset of field: ec_etherheadert::sa2"]
        [::std::mem::offset_of!(ec_etherheadert, sa2) - 10usize];
    ["Offset of field: ec_etherheadert::etype"]
        [::std::mem::offset_of!(ec_etherheadert, etype) - 12usize];
};
#[doc = " EtherCAT datagram header definition"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_comt {
    #[doc = " length of EtherCAT datagram"]
    pub elength: uint16,
    #[doc = " EtherCAT command, see ec_cmdtype"]
    pub command: uint8,
    #[doc = " index, used in SOEM for Tx to Rx recombination"]
    pub index: uint8,
    #[doc = " ADP"]
    pub ADP: uint16,
    #[doc = " ADO"]
    pub ADO: uint16,
    #[doc = " length of data portion in datagram"]
    pub dlength: uint16,
    #[doc = " interrupt, currently unused"]
    pub irpt: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_comt"][::std::mem::size_of::<ec_comt>() - 12usize];
    ["Alignment of ec_comt"][::std::mem::align_of::<ec_comt>() - 1usize];
    ["Offset of field: ec_comt::elength"][::std::mem::offset_of!(ec_comt, elength) - 0usize];
    ["Offset of field: ec_comt::command"][::std::mem::offset_of!(ec_comt, command) - 2usize];
    ["Offset of field: ec_comt::index"][::std::mem::offset_of!(ec_comt, index) - 3usize];
    ["Offset of field: ec_comt::ADP"][::std::mem::offset_of!(ec_comt, ADP) - 4usize];
    ["Offset of field: ec_comt::ADO"][::std::mem::offset_of!(ec_comt, ADO) - 6usize];
    ["Offset of field: ec_comt::dlength"][::std::mem::offset_of!(ec_comt, dlength) - 8usize];
    ["Offset of field: ec_comt::irpt"][::std::mem::offset_of!(ec_comt, irpt) - 10usize];
};
#[doc = " No error"]
pub const ec_err_EC_ERR_OK: ec_err = 0;
#[doc = " Library already initialized."]
pub const ec_err_EC_ERR_ALREADY_INITIALIZED: ec_err = 1;
#[doc = " Library not initialized."]
pub const ec_err_EC_ERR_NOT_INITIALIZED: ec_err = 2;
#[doc = " Timeout occurred during execution of the function."]
pub const ec_err_EC_ERR_TIMEOUT: ec_err = 3;
#[doc = " No slaves were found."]
pub const ec_err_EC_ERR_NO_SLAVES: ec_err = 4;
#[doc = " Function failed."]
pub const ec_err_EC_ERR_NOK: ec_err = 5;
#[doc = " Possible error codes returned."]
pub type ec_err = ::std::os::raw::c_int;
#[doc = " No valid state."]
pub const ec_state_EC_STATE_NONE: ec_state = 0;
#[doc = " Init state"]
pub const ec_state_EC_STATE_INIT: ec_state = 1;
#[doc = " Pre-operational."]
pub const ec_state_EC_STATE_PRE_OP: ec_state = 2;
#[doc = " Boot state"]
pub const ec_state_EC_STATE_BOOT: ec_state = 3;
#[doc = " Safe-operational."]
pub const ec_state_EC_STATE_SAFE_OP: ec_state = 4;
#[doc = " Operational"]
pub const ec_state_EC_STATE_OPERATIONAL: ec_state = 8;
#[doc = " Error or ACK error"]
pub const ec_state_EC_STATE_ACK: ec_state = 16;
#[doc = " Error or ACK error"]
pub const ec_state_EC_STATE_ERROR: ec_state = 16;
#[doc = " Possible EtherCAT slave states"]
pub type ec_state = ::std::os::raw::c_int;
#[doc = " Empty"]
pub const ec_bufstate_EC_BUF_EMPTY: ec_bufstate = 0;
#[doc = " Allocated, but not filled"]
pub const ec_bufstate_EC_BUF_ALLOC: ec_bufstate = 1;
#[doc = " Transmitted"]
pub const ec_bufstate_EC_BUF_TX: ec_bufstate = 2;
#[doc = " Received, but not consumed"]
pub const ec_bufstate_EC_BUF_RCVD: ec_bufstate = 3;
#[doc = " Cycle completed"]
pub const ec_bufstate_EC_BUF_COMPLETE: ec_bufstate = 4;
#[doc = " Possible buffer states"]
pub type ec_bufstate = ::std::os::raw::c_int;
pub const ec_datatype_ECT_BOOLEAN: ec_datatype = 1;
pub const ec_datatype_ECT_INTEGER8: ec_datatype = 2;
pub const ec_datatype_ECT_INTEGER16: ec_datatype = 3;
pub const ec_datatype_ECT_INTEGER32: ec_datatype = 4;
pub const ec_datatype_ECT_UNSIGNED8: ec_datatype = 5;
pub const ec_datatype_ECT_UNSIGNED16: ec_datatype = 6;
pub const ec_datatype_ECT_UNSIGNED32: ec_datatype = 7;
pub const ec_datatype_ECT_REAL32: ec_datatype = 8;
pub const ec_datatype_ECT_VISIBLE_STRING: ec_datatype = 9;
pub const ec_datatype_ECT_OCTET_STRING: ec_datatype = 10;
pub const ec_datatype_ECT_UNICODE_STRING: ec_datatype = 11;
pub const ec_datatype_ECT_TIME_OF_DAY: ec_datatype = 12;
pub const ec_datatype_ECT_TIME_DIFFERENCE: ec_datatype = 13;
pub const ec_datatype_ECT_DOMAIN: ec_datatype = 15;
pub const ec_datatype_ECT_INTEGER24: ec_datatype = 16;
pub const ec_datatype_ECT_REAL64: ec_datatype = 17;
pub const ec_datatype_ECT_INTEGER64: ec_datatype = 21;
pub const ec_datatype_ECT_UNSIGNED24: ec_datatype = 22;
pub const ec_datatype_ECT_UNSIGNED64: ec_datatype = 27;
pub const ec_datatype_ECT_BIT1: ec_datatype = 48;
pub const ec_datatype_ECT_BIT2: ec_datatype = 49;
pub const ec_datatype_ECT_BIT3: ec_datatype = 50;
pub const ec_datatype_ECT_BIT4: ec_datatype = 51;
pub const ec_datatype_ECT_BIT5: ec_datatype = 52;
pub const ec_datatype_ECT_BIT6: ec_datatype = 53;
pub const ec_datatype_ECT_BIT7: ec_datatype = 54;
pub const ec_datatype_ECT_BIT8: ec_datatype = 55;
#[doc = " Ethercat data types"]
pub type ec_datatype = ::std::os::raw::c_int;
#[doc = " No operation"]
pub const ec_cmdtype_EC_CMD_NOP: ec_cmdtype = 0;
#[doc = " Auto Increment Read"]
pub const ec_cmdtype_EC_CMD_APRD: ec_cmdtype = 1;
#[doc = " Auto Increment Write"]
pub const ec_cmdtype_EC_CMD_APWR: ec_cmdtype = 2;
#[doc = " Auto Increment Read Write"]
pub const ec_cmdtype_EC_CMD_APRW: ec_cmdtype = 3;
#[doc = " Configured Address Read"]
pub const ec_cmdtype_EC_CMD_FPRD: ec_cmdtype = 4;
#[doc = " Configured Address Write"]
pub const ec_cmdtype_EC_CMD_FPWR: ec_cmdtype = 5;
#[doc = " Configured Address Read Write"]
pub const ec_cmdtype_EC_CMD_FPRW: ec_cmdtype = 6;
#[doc = " Broadcast Read"]
pub const ec_cmdtype_EC_CMD_BRD: ec_cmdtype = 7;
#[doc = " Broadcast Write"]
pub const ec_cmdtype_EC_CMD_BWR: ec_cmdtype = 8;
#[doc = " Broadcast Read Write"]
pub const ec_cmdtype_EC_CMD_BRW: ec_cmdtype = 9;
#[doc = " Logical Memory Read"]
pub const ec_cmdtype_EC_CMD_LRD: ec_cmdtype = 10;
#[doc = " Logical Memory Write"]
pub const ec_cmdtype_EC_CMD_LWR: ec_cmdtype = 11;
#[doc = " Logical Memory Read Write"]
pub const ec_cmdtype_EC_CMD_LRW: ec_cmdtype = 12;
#[doc = " Auto Increment Read Multiple Write"]
pub const ec_cmdtype_EC_CMD_ARMW: ec_cmdtype = 13;
#[doc = " Configured Read Multiple Write"]
pub const ec_cmdtype_EC_CMD_FRMW: ec_cmdtype = 14;
#[doc = " Ethercat command types"]
pub type ec_cmdtype = ::std::os::raw::c_int;
#[doc = " No operation"]
pub const ec_ecmdtype_EC_ECMD_NOP: ec_ecmdtype = 0;
#[doc = " Read"]
pub const ec_ecmdtype_EC_ECMD_READ: ec_ecmdtype = 256;
#[doc = " Write"]
pub const ec_ecmdtype_EC_ECMD_WRITE: ec_ecmdtype = 513;
#[doc = " Reload"]
pub const ec_ecmdtype_EC_ECMD_RELOAD: ec_ecmdtype = 768;
#[doc = " Ethercat EEprom command types"]
pub type ec_ecmdtype = ::std::os::raw::c_int;
#[doc = " SII category strings"]
pub const ECT_SII_STRING: _bindgen_ty_2 = 10;
#[doc = " SII category general"]
pub const ECT_SII_GENERAL: _bindgen_ty_2 = 30;
#[doc = " SII category FMMU"]
pub const ECT_SII_FMMU: _bindgen_ty_2 = 40;
#[doc = " SII category SM"]
pub const ECT_SII_SM: _bindgen_ty_2 = 41;
#[doc = " SII category PDO"]
pub const ECT_SII_PDO: _bindgen_ty_2 = 50;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const ECT_SII_MANUF: _bindgen_ty_3 = 8;
pub const ECT_SII_ID: _bindgen_ty_3 = 10;
pub const ECT_SII_REV: _bindgen_ty_3 = 12;
pub const ECT_SII_SN: _bindgen_ty_3 = 14;
pub const ECT_SII_BOOTRXMBX: _bindgen_ty_3 = 20;
pub const ECT_SII_BOOTTXMBX: _bindgen_ty_3 = 22;
pub const ECT_SII_MBXSIZE: _bindgen_ty_3 = 25;
pub const ECT_SII_TXMBXADR: _bindgen_ty_3 = 26;
pub const ECT_SII_RXMBXADR: _bindgen_ty_3 = 24;
pub const ECT_SII_MBXPROTO: _bindgen_ty_3 = 28;
#[doc = " Item offsets in SII general section"]
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
#[doc = " Error mailbox type"]
pub const ECT_MBXT_ERR: _bindgen_ty_4 = 0;
#[doc = " ADS over EtherCAT mailbox type"]
pub const ECT_MBXT_AOE: _bindgen_ty_4 = 1;
#[doc = " Ethernet over EtherCAT mailbox type"]
pub const ECT_MBXT_EOE: _bindgen_ty_4 = 2;
#[doc = " CANopen over EtherCAT mailbox type"]
pub const ECT_MBXT_COE: _bindgen_ty_4 = 3;
#[doc = " File over EtherCAT mailbox type"]
pub const ECT_MBXT_FOE: _bindgen_ty_4 = 4;
#[doc = " Servo over EtherCAT mailbox type"]
pub const ECT_MBXT_SOE: _bindgen_ty_4 = 5;
#[doc = " Vendor over EtherCAT mailbox type"]
pub const ECT_MBXT_VOE: _bindgen_ty_4 = 15;
#[doc = " Mailbox types definitions"]
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const ECT_COES_EMERGENCY: _bindgen_ty_5 = 1;
pub const ECT_COES_SDOREQ: _bindgen_ty_5 = 2;
pub const ECT_COES_SDORES: _bindgen_ty_5 = 3;
pub const ECT_COES_TXPDO: _bindgen_ty_5 = 4;
pub const ECT_COES_RXPDO: _bindgen_ty_5 = 5;
pub const ECT_COES_TXPDO_RR: _bindgen_ty_5 = 6;
pub const ECT_COES_RXPDO_RR: _bindgen_ty_5 = 7;
pub const ECT_COES_SDOINFO: _bindgen_ty_5 = 8;
#[doc = " CoE mailbox types"]
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const ECT_SDO_DOWN_INIT: _bindgen_ty_6 = 33;
pub const ECT_SDO_DOWN_EXP: _bindgen_ty_6 = 35;
pub const ECT_SDO_DOWN_INIT_CA: _bindgen_ty_6 = 49;
pub const ECT_SDO_UP_REQ: _bindgen_ty_6 = 64;
pub const ECT_SDO_UP_REQ_CA: _bindgen_ty_6 = 80;
pub const ECT_SDO_SEG_UP_REQ: _bindgen_ty_6 = 96;
pub const ECT_SDO_ABORT: _bindgen_ty_6 = 128;
#[doc = " CoE SDO commands"]
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const ECT_GET_ODLIST_REQ: _bindgen_ty_7 = 1;
pub const ECT_GET_ODLIST_RES: _bindgen_ty_7 = 2;
pub const ECT_GET_OD_REQ: _bindgen_ty_7 = 3;
pub const ECT_GET_OD_RES: _bindgen_ty_7 = 4;
pub const ECT_GET_OE_REQ: _bindgen_ty_7 = 5;
pub const ECT_GET_OE_RES: _bindgen_ty_7 = 6;
pub const ECT_SDOINFO_ERROR: _bindgen_ty_7 = 7;
#[doc = " CoE Object Description commands"]
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub const ECT_FOE_READ: _bindgen_ty_8 = 1;
pub const ECT_FOE_WRITE: _bindgen_ty_8 = 2;
pub const ECT_FOE_DATA: _bindgen_ty_8 = 3;
pub const ECT_FOE_ACK: _bindgen_ty_8 = 4;
pub const ECT_FOE_ERROR: _bindgen_ty_8 = 5;
pub const ECT_FOE_BUSY: _bindgen_ty_8 = 6;
#[doc = " FoE opcodes"]
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub const ECT_SOE_READREQ: _bindgen_ty_9 = 1;
pub const ECT_SOE_READRES: _bindgen_ty_9 = 2;
pub const ECT_SOE_WRITEREQ: _bindgen_ty_9 = 3;
pub const ECT_SOE_WRITERES: _bindgen_ty_9 = 4;
pub const ECT_SOE_NOTIFICATION: _bindgen_ty_9 = 5;
pub const ECT_SOE_EMERGENCY: _bindgen_ty_9 = 6;
#[doc = " SoE opcodes"]
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub const ECT_REG_TYPE: _bindgen_ty_10 = 0;
pub const ECT_REG_PORTDES: _bindgen_ty_10 = 7;
pub const ECT_REG_ESCSUP: _bindgen_ty_10 = 8;
pub const ECT_REG_STADR: _bindgen_ty_10 = 16;
pub const ECT_REG_ALIAS: _bindgen_ty_10 = 18;
pub const ECT_REG_DLCTL: _bindgen_ty_10 = 256;
pub const ECT_REG_DLPORT: _bindgen_ty_10 = 257;
pub const ECT_REG_DLALIAS: _bindgen_ty_10 = 259;
pub const ECT_REG_DLSTAT: _bindgen_ty_10 = 272;
pub const ECT_REG_ALCTL: _bindgen_ty_10 = 288;
pub const ECT_REG_ALSTAT: _bindgen_ty_10 = 304;
pub const ECT_REG_ALSTATCODE: _bindgen_ty_10 = 308;
pub const ECT_REG_PDICTL: _bindgen_ty_10 = 320;
pub const ECT_REG_IRQMASK: _bindgen_ty_10 = 512;
pub const ECT_REG_RXERR: _bindgen_ty_10 = 768;
pub const ECT_REG_FRXERR: _bindgen_ty_10 = 776;
pub const ECT_REG_EPUECNT: _bindgen_ty_10 = 780;
pub const ECT_REG_PECNT: _bindgen_ty_10 = 781;
pub const ECT_REG_PECODE: _bindgen_ty_10 = 782;
pub const ECT_REG_LLCNT: _bindgen_ty_10 = 784;
pub const ECT_REG_WDCNT: _bindgen_ty_10 = 1090;
pub const ECT_REG_EEPCFG: _bindgen_ty_10 = 1280;
pub const ECT_REG_EEPCTL: _bindgen_ty_10 = 1282;
pub const ECT_REG_EEPSTAT: _bindgen_ty_10 = 1282;
pub const ECT_REG_EEPADR: _bindgen_ty_10 = 1284;
pub const ECT_REG_EEPDAT: _bindgen_ty_10 = 1288;
pub const ECT_REG_FMMU0: _bindgen_ty_10 = 1536;
pub const ECT_REG_FMMU1: _bindgen_ty_10 = 1552;
pub const ECT_REG_FMMU2: _bindgen_ty_10 = 1568;
pub const ECT_REG_FMMU3: _bindgen_ty_10 = 1584;
pub const ECT_REG_SM0: _bindgen_ty_10 = 2048;
pub const ECT_REG_SM1: _bindgen_ty_10 = 2056;
pub const ECT_REG_SM2: _bindgen_ty_10 = 2064;
pub const ECT_REG_SM3: _bindgen_ty_10 = 2072;
pub const ECT_REG_SM0STAT: _bindgen_ty_10 = 2053;
pub const ECT_REG_SM1STAT: _bindgen_ty_10 = 2061;
pub const ECT_REG_SM1ACT: _bindgen_ty_10 = 2062;
pub const ECT_REG_SM1CONTR: _bindgen_ty_10 = 2063;
pub const ECT_REG_DCTIME0: _bindgen_ty_10 = 2304;
pub const ECT_REG_DCTIME1: _bindgen_ty_10 = 2308;
pub const ECT_REG_DCTIME2: _bindgen_ty_10 = 2312;
pub const ECT_REG_DCTIME3: _bindgen_ty_10 = 2316;
pub const ECT_REG_DCSYSTIME: _bindgen_ty_10 = 2320;
pub const ECT_REG_DCSOF: _bindgen_ty_10 = 2328;
pub const ECT_REG_DCSYSOFFSET: _bindgen_ty_10 = 2336;
pub const ECT_REG_DCSYSDELAY: _bindgen_ty_10 = 2344;
pub const ECT_REG_DCSYSDIFF: _bindgen_ty_10 = 2348;
pub const ECT_REG_DCSPEEDCNT: _bindgen_ty_10 = 2352;
pub const ECT_REG_DCTIMEFILT: _bindgen_ty_10 = 2356;
pub const ECT_REG_DCCUC: _bindgen_ty_10 = 2432;
pub const ECT_REG_DCSYNCACT: _bindgen_ty_10 = 2433;
pub const ECT_REG_DCSTART0: _bindgen_ty_10 = 2448;
pub const ECT_REG_DCCYCLE0: _bindgen_ty_10 = 2464;
pub const ECT_REG_DCCYCLE1: _bindgen_ty_10 = 2468;
#[doc = " Ethercat registers"]
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub const ec_err_type_EC_ERR_TYPE_SDO_ERROR: ec_err_type = 0;
pub const ec_err_type_EC_ERR_TYPE_EMERGENCY: ec_err_type = 1;
pub const ec_err_type_EC_ERR_TYPE_PACKET_ERROR: ec_err_type = 3;
pub const ec_err_type_EC_ERR_TYPE_SDOINFO_ERROR: ec_err_type = 4;
pub const ec_err_type_EC_ERR_TYPE_FOE_ERROR: ec_err_type = 5;
pub const ec_err_type_EC_ERR_TYPE_FOE_BUF2SMALL: ec_err_type = 6;
pub const ec_err_type_EC_ERR_TYPE_FOE_PACKETNUMBER: ec_err_type = 7;
pub const ec_err_type_EC_ERR_TYPE_SOE_ERROR: ec_err_type = 8;
pub const ec_err_type_EC_ERR_TYPE_MBX_ERROR: ec_err_type = 9;
pub const ec_err_type_EC_ERR_TYPE_FOE_FILE_NOTFOUND: ec_err_type = 10;
pub const ec_err_type_EC_ERR_TYPE_EOE_INVALID_RX_DATA: ec_err_type = 11;
#[doc = " Error types"]
pub type ec_err_type = ::std::os::raw::c_int;
#[doc = " Struct to retrieve errors."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_errort {
    #[doc = " Time at which the error was generated."]
    pub Time: ec_timet,
    #[doc = " Signal bit, error set but not read"]
    pub Signal: boolean,
    #[doc = " Slave number that generated the error"]
    pub Slave: uint16,
    #[doc = " CoE SDO index that generated the error"]
    pub Index: uint16,
    #[doc = " CoE SDO subindex that generated the error"]
    pub SubIdx: uint8,
    #[doc = " Type of error"]
    pub Etype: ec_err_type,
    pub __bindgen_anon_1: ec_errort__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ec_errort__bindgen_ty_1 {
    #[doc = " General abortcode"]
    pub AbortCode: int32,
    pub __bindgen_anon_1: ec_errort__bindgen_ty_1__bindgen_ty_1,
}
#[doc = " Specific error for Emergency mailbox"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_errort__bindgen_ty_1__bindgen_ty_1 {
    pub ErrorCode: uint16,
    pub ErrorReg: uint8,
    pub b1: uint8,
    pub w1: uint16,
    pub w2: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_errort__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ec_errort__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ec_errort__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ec_errort__bindgen_ty_1__bindgen_ty_1>() - 2usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::ErrorCode"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, ErrorCode) - 0usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::ErrorReg"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, ErrorReg) - 2usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::b1"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, b1) - 3usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::w1"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, w1) - 4usize];
    ["Offset of field: ec_errort__bindgen_ty_1__bindgen_ty_1::w2"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1__bindgen_ty_1, w2) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_errort__bindgen_ty_1"][::std::mem::size_of::<ec_errort__bindgen_ty_1>() - 8usize];
    ["Alignment of ec_errort__bindgen_ty_1"]
        [::std::mem::align_of::<ec_errort__bindgen_ty_1>() - 4usize];
    ["Offset of field: ec_errort__bindgen_ty_1::AbortCode"]
        [::std::mem::offset_of!(ec_errort__bindgen_ty_1, AbortCode) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_errort"][::std::mem::size_of::<ec_errort>() - 28usize];
    ["Alignment of ec_errort"][::std::mem::align_of::<ec_errort>() - 4usize];
    ["Offset of field: ec_errort::Time"][::std::mem::offset_of!(ec_errort, Time) - 0usize];
    ["Offset of field: ec_errort::Signal"][::std::mem::offset_of!(ec_errort, Signal) - 8usize];
    ["Offset of field: ec_errort::Slave"][::std::mem::offset_of!(ec_errort, Slave) - 10usize];
    ["Offset of field: ec_errort::Index"][::std::mem::offset_of!(ec_errort, Index) - 12usize];
    ["Offset of field: ec_errort::SubIdx"][::std::mem::offset_of!(ec_errort, SubIdx) - 14usize];
    ["Offset of field: ec_errort::Etype"][::std::mem::offset_of!(ec_errort, Etype) - 16usize];
};
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type u_int64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_addr {
    pub S_un: in_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in_addr__bindgen_ty_1 {
    pub S_un_b: in_addr__bindgen_ty_1__bindgen_ty_1,
    pub S_un_w: in_addr__bindgen_ty_1__bindgen_ty_2,
    pub S_addr: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr__bindgen_ty_1__bindgen_ty_1 {
    pub s_b1: UCHAR,
    pub s_b2: UCHAR,
    pub s_b3: UCHAR,
    pub s_b4: UCHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<in_addr__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of in_addr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<in_addr__bindgen_ty_1__bindgen_ty_1>() - 1usize];
    ["Offset of field: in_addr__bindgen_ty_1__bindgen_ty_1::s_b1"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1__bindgen_ty_1, s_b1) - 0usize];
    ["Offset of field: in_addr__bindgen_ty_1__bindgen_ty_1::s_b2"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1__bindgen_ty_1, s_b2) - 1usize];
    ["Offset of field: in_addr__bindgen_ty_1__bindgen_ty_1::s_b3"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1__bindgen_ty_1, s_b3) - 2usize];
    ["Offset of field: in_addr__bindgen_ty_1__bindgen_ty_1::s_b4"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1__bindgen_ty_1, s_b4) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr__bindgen_ty_1__bindgen_ty_2 {
    pub s_w1: USHORT,
    pub s_w2: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<in_addr__bindgen_ty_1__bindgen_ty_2>() - 4usize];
    ["Alignment of in_addr__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<in_addr__bindgen_ty_1__bindgen_ty_2>() - 2usize];
    ["Offset of field: in_addr__bindgen_ty_1__bindgen_ty_2::s_w1"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1__bindgen_ty_2, s_w1) - 0usize];
    ["Offset of field: in_addr__bindgen_ty_1__bindgen_ty_2::s_w2"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1__bindgen_ty_2, s_w2) - 2usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr__bindgen_ty_1"][::std::mem::size_of::<in_addr__bindgen_ty_1>() - 4usize];
    ["Alignment of in_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in_addr__bindgen_ty_1::S_un_b"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1, S_un_b) - 0usize];
    ["Offset of field: in_addr__bindgen_ty_1::S_un_w"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1, S_un_w) - 0usize];
    ["Offset of field: in_addr__bindgen_ty_1::S_addr"]
        [::std::mem::offset_of!(in_addr__bindgen_ty_1, S_addr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::S_un"][::std::mem::offset_of!(in_addr, S_un) - 0usize];
};
pub type IN_ADDR = in_addr;
pub type PIN_ADDR = *mut in_addr;
pub type LPIN_ADDR = *mut in_addr;
pub type ADDRESS_FAMILY = USHORT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: ADDRESS_FAMILY,
    pub sa_data: [CHAR; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
pub type SOCKADDR = sockaddr;
pub type PSOCKADDR = *mut sockaddr;
pub type LPSOCKADDR = *mut sockaddr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SOCKET_ADDRESS {
    pub lpSockaddr: LPSOCKADDR,
    pub iSockaddrLength: INT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SOCKET_ADDRESS"][::std::mem::size_of::<_SOCKET_ADDRESS>() - 16usize];
    ["Alignment of _SOCKET_ADDRESS"][::std::mem::align_of::<_SOCKET_ADDRESS>() - 8usize];
    ["Offset of field: _SOCKET_ADDRESS::lpSockaddr"]
        [::std::mem::offset_of!(_SOCKET_ADDRESS, lpSockaddr) - 0usize];
    ["Offset of field: _SOCKET_ADDRESS::iSockaddrLength"]
        [::std::mem::offset_of!(_SOCKET_ADDRESS, iSockaddrLength) - 8usize];
};
pub type SOCKET_ADDRESS = _SOCKET_ADDRESS;
pub type PSOCKET_ADDRESS = *mut _SOCKET_ADDRESS;
pub type LPSOCKET_ADDRESS = *mut _SOCKET_ADDRESS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SOCKET_ADDRESS_LIST {
    pub iAddressCount: INT,
    pub Address: [SOCKET_ADDRESS; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SOCKET_ADDRESS_LIST"][::std::mem::size_of::<_SOCKET_ADDRESS_LIST>() - 24usize];
    ["Alignment of _SOCKET_ADDRESS_LIST"][::std::mem::align_of::<_SOCKET_ADDRESS_LIST>() - 8usize];
    ["Offset of field: _SOCKET_ADDRESS_LIST::iAddressCount"]
        [::std::mem::offset_of!(_SOCKET_ADDRESS_LIST, iAddressCount) - 0usize];
    ["Offset of field: _SOCKET_ADDRESS_LIST::Address"]
        [::std::mem::offset_of!(_SOCKET_ADDRESS_LIST, Address) - 8usize];
};
pub type SOCKET_ADDRESS_LIST = _SOCKET_ADDRESS_LIST;
pub type PSOCKET_ADDRESS_LIST = *mut _SOCKET_ADDRESS_LIST;
pub type LPSOCKET_ADDRESS_LIST = *mut _SOCKET_ADDRESS_LIST;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CSADDR_INFO {
    pub LocalAddr: SOCKET_ADDRESS,
    pub RemoteAddr: SOCKET_ADDRESS,
    pub iSocketType: INT,
    pub iProtocol: INT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CSADDR_INFO"][::std::mem::size_of::<_CSADDR_INFO>() - 40usize];
    ["Alignment of _CSADDR_INFO"][::std::mem::align_of::<_CSADDR_INFO>() - 8usize];
    ["Offset of field: _CSADDR_INFO::LocalAddr"]
        [::std::mem::offset_of!(_CSADDR_INFO, LocalAddr) - 0usize];
    ["Offset of field: _CSADDR_INFO::RemoteAddr"]
        [::std::mem::offset_of!(_CSADDR_INFO, RemoteAddr) - 16usize];
    ["Offset of field: _CSADDR_INFO::iSocketType"]
        [::std::mem::offset_of!(_CSADDR_INFO, iSocketType) - 32usize];
    ["Offset of field: _CSADDR_INFO::iProtocol"]
        [::std::mem::offset_of!(_CSADDR_INFO, iProtocol) - 36usize];
};
pub type CSADDR_INFO = _CSADDR_INFO;
pub type PCSADDR_INFO = *mut _CSADDR_INFO;
pub type LPCSADDR_INFO = *mut _CSADDR_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: ADDRESS_FAMILY,
    pub __ss_pad1: [CHAR; 6usize],
    pub __ss_align: ::std::os::raw::c_longlong,
    pub __ss_pad2: [CHAR; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_pad1"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad1) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 8usize];
    ["Offset of field: sockaddr_storage::__ss_pad2"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_pad2) - 16usize];
};
pub type SOCKADDR_STORAGE_LH = sockaddr_storage;
pub type PSOCKADDR_STORAGE_LH = *mut sockaddr_storage;
pub type LPSOCKADDR_STORAGE_LH = *mut sockaddr_storage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage_xp {
    pub ss_family: ::std::os::raw::c_short,
    pub __ss_pad1: [CHAR; 6usize],
    pub __ss_align: ::std::os::raw::c_longlong,
    pub __ss_pad2: [CHAR; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage_xp"][::std::mem::size_of::<sockaddr_storage_xp>() - 128usize];
    ["Alignment of sockaddr_storage_xp"][::std::mem::align_of::<sockaddr_storage_xp>() - 8usize];
    ["Offset of field: sockaddr_storage_xp::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage_xp, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage_xp::__ss_pad1"]
        [::std::mem::offset_of!(sockaddr_storage_xp, __ss_pad1) - 2usize];
    ["Offset of field: sockaddr_storage_xp::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage_xp, __ss_align) - 8usize];
    ["Offset of field: sockaddr_storage_xp::__ss_pad2"]
        [::std::mem::offset_of!(sockaddr_storage_xp, __ss_pad2) - 16usize];
};
pub type SOCKADDR_STORAGE_XP = sockaddr_storage_xp;
pub type PSOCKADDR_STORAGE_XP = *mut sockaddr_storage_xp;
pub type LPSOCKADDR_STORAGE_XP = *mut sockaddr_storage_xp;
pub type SOCKADDR_STORAGE = SOCKADDR_STORAGE_LH;
pub type PSOCKADDR_STORAGE = *mut SOCKADDR_STORAGE;
pub type LPSOCKADDR_STORAGE = *mut SOCKADDR_STORAGE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SOCKET_PROCESSOR_AFFINITY {
    pub Processor: PROCESSOR_NUMBER,
    pub NumaNodeId: USHORT,
    pub Reserved: USHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SOCKET_PROCESSOR_AFFINITY"]
        [::std::mem::size_of::<_SOCKET_PROCESSOR_AFFINITY>() - 8usize];
    ["Alignment of _SOCKET_PROCESSOR_AFFINITY"]
        [::std::mem::align_of::<_SOCKET_PROCESSOR_AFFINITY>() - 2usize];
    ["Offset of field: _SOCKET_PROCESSOR_AFFINITY::Processor"]
        [::std::mem::offset_of!(_SOCKET_PROCESSOR_AFFINITY, Processor) - 0usize];
    ["Offset of field: _SOCKET_PROCESSOR_AFFINITY::NumaNodeId"]
        [::std::mem::offset_of!(_SOCKET_PROCESSOR_AFFINITY, NumaNodeId) - 4usize];
    ["Offset of field: _SOCKET_PROCESSOR_AFFINITY::Reserved"]
        [::std::mem::offset_of!(_SOCKET_PROCESSOR_AFFINITY, Reserved) - 6usize];
};
pub type SOCKET_PROCESSOR_AFFINITY = _SOCKET_PROCESSOR_AFFINITY;
pub type PSOCKET_PROCESSOR_AFFINITY = *mut _SOCKET_PROCESSOR_AFFINITY;
pub const IPPROTO_IPPROTO_HOPOPTS: IPPROTO = 0;
pub const IPPROTO_IPPROTO_ICMP: IPPROTO = 1;
pub const IPPROTO_IPPROTO_IGMP: IPPROTO = 2;
pub const IPPROTO_IPPROTO_GGP: IPPROTO = 3;
pub const IPPROTO_IPPROTO_IPV4: IPPROTO = 4;
pub const IPPROTO_IPPROTO_ST: IPPROTO = 5;
pub const IPPROTO_IPPROTO_TCP: IPPROTO = 6;
pub const IPPROTO_IPPROTO_CBT: IPPROTO = 7;
pub const IPPROTO_IPPROTO_EGP: IPPROTO = 8;
pub const IPPROTO_IPPROTO_IGP: IPPROTO = 9;
pub const IPPROTO_IPPROTO_PUP: IPPROTO = 12;
pub const IPPROTO_IPPROTO_UDP: IPPROTO = 17;
pub const IPPROTO_IPPROTO_IDP: IPPROTO = 22;
pub const IPPROTO_IPPROTO_RDP: IPPROTO = 27;
pub const IPPROTO_IPPROTO_IPV6: IPPROTO = 41;
pub const IPPROTO_IPPROTO_ROUTING: IPPROTO = 43;
pub const IPPROTO_IPPROTO_FRAGMENT: IPPROTO = 44;
pub const IPPROTO_IPPROTO_ESP: IPPROTO = 50;
pub const IPPROTO_IPPROTO_AH: IPPROTO = 51;
pub const IPPROTO_IPPROTO_ICMPV6: IPPROTO = 58;
pub const IPPROTO_IPPROTO_NONE: IPPROTO = 59;
pub const IPPROTO_IPPROTO_DSTOPTS: IPPROTO = 60;
pub const IPPROTO_IPPROTO_ND: IPPROTO = 77;
pub const IPPROTO_IPPROTO_ICLFXBM: IPPROTO = 78;
pub const IPPROTO_IPPROTO_PIM: IPPROTO = 103;
pub const IPPROTO_IPPROTO_PGM: IPPROTO = 113;
pub const IPPROTO_IPPROTO_L2TP: IPPROTO = 115;
pub const IPPROTO_IPPROTO_SCTP: IPPROTO = 132;
pub const IPPROTO_IPPROTO_RAW: IPPROTO = 255;
pub const IPPROTO_IPPROTO_MAX: IPPROTO = 256;
pub const IPPROTO_IPPROTO_RESERVED_RAW: IPPROTO = 257;
pub const IPPROTO_IPPROTO_RESERVED_IPSEC: IPPROTO = 258;
pub const IPPROTO_IPPROTO_RESERVED_IPSECOFFLOAD: IPPROTO = 259;
pub const IPPROTO_IPPROTO_RESERVED_WNV: IPPROTO = 260;
pub const IPPROTO_IPPROTO_RESERVED_MAX: IPPROTO = 261;
pub type IPPROTO = ::std::os::raw::c_int;
pub type PIPROTO = *mut IPPROTO;
pub const SCOPE_LEVEL_ScopeLevelInterface: SCOPE_LEVEL = 1;
pub const SCOPE_LEVEL_ScopeLevelLink: SCOPE_LEVEL = 2;
pub const SCOPE_LEVEL_ScopeLevelSubnet: SCOPE_LEVEL = 3;
pub const SCOPE_LEVEL_ScopeLevelAdmin: SCOPE_LEVEL = 4;
pub const SCOPE_LEVEL_ScopeLevelSite: SCOPE_LEVEL = 5;
pub const SCOPE_LEVEL_ScopeLevelOrganization: SCOPE_LEVEL = 8;
pub const SCOPE_LEVEL_ScopeLevelGlobal: SCOPE_LEVEL = 14;
pub const SCOPE_LEVEL_ScopeLevelCount: SCOPE_LEVEL = 16;
pub type SCOPE_LEVEL = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SCOPE_ID {
    pub __bindgen_anon_1: SCOPE_ID__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SCOPE_ID__bindgen_ty_1 {
    pub __bindgen_anon_1: SCOPE_ID__bindgen_ty_1__bindgen_ty_1,
    pub Value: ULONG,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SCOPE_ID__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SCOPE_ID__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<SCOPE_ID__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Alignment of SCOPE_ID__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<SCOPE_ID__bindgen_ty_1__bindgen_ty_1>() - 4usize];
};
impl SCOPE_ID__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn Zone(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 28u8) as u32) }
    }
    #[inline]
    pub fn set_Zone(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 28u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Zone_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                28u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Zone_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                28u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn Level(&self) -> ULONG {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_Level(&mut self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn Level_raw(this: *const Self) -> ULONG {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_Level_raw(this: *mut Self, val: ULONG) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(Zone: ULONG, Level: ULONG) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 28u8, {
            let Zone: u32 = unsafe { ::std::mem::transmute(Zone) };
            Zone as u64
        });
        __bindgen_bitfield_unit.set(28usize, 4u8, {
            let Level: u32 = unsafe { ::std::mem::transmute(Level) };
            Level as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SCOPE_ID__bindgen_ty_1"][::std::mem::size_of::<SCOPE_ID__bindgen_ty_1>() - 4usize];
    ["Alignment of SCOPE_ID__bindgen_ty_1"]
        [::std::mem::align_of::<SCOPE_ID__bindgen_ty_1>() - 4usize];
    ["Offset of field: SCOPE_ID__bindgen_ty_1::Value"]
        [::std::mem::offset_of!(SCOPE_ID__bindgen_ty_1, Value) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SCOPE_ID"][::std::mem::size_of::<SCOPE_ID>() - 4usize];
    ["Alignment of SCOPE_ID"][::std::mem::align_of::<SCOPE_ID>() - 4usize];
};
pub type PSCOPE_ID = *mut SCOPE_ID;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: ADDRESS_FAMILY,
    pub sin_port: USHORT,
    pub sin_addr: IN_ADDR,
    pub sin_zero: [CHAR; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
pub type SOCKADDR_IN = sockaddr_in;
pub type PSOCKADDR_IN = *mut sockaddr_in;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_dl {
    pub sdl_family: ADDRESS_FAMILY,
    pub sdl_data: [UCHAR; 8usize],
    pub sdl_zero: [UCHAR; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_dl"][::std::mem::size_of::<sockaddr_dl>() - 14usize];
    ["Alignment of sockaddr_dl"][::std::mem::align_of::<sockaddr_dl>() - 2usize];
    ["Offset of field: sockaddr_dl::sdl_family"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_family) - 0usize];
    ["Offset of field: sockaddr_dl::sdl_data"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_data) - 2usize];
    ["Offset of field: sockaddr_dl::sdl_zero"]
        [::std::mem::offset_of!(sockaddr_dl, sdl_zero) - 10usize];
};
pub type SOCKADDR_DL = sockaddr_dl;
pub type PSOCKADDR_DL = *mut sockaddr_dl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSABUF {
    pub len: ULONG,
    pub buf: *mut CHAR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSABUF"][::std::mem::size_of::<_WSABUF>() - 16usize];
    ["Alignment of _WSABUF"][::std::mem::align_of::<_WSABUF>() - 8usize];
    ["Offset of field: _WSABUF::len"][::std::mem::offset_of!(_WSABUF, len) - 0usize];
    ["Offset of field: _WSABUF::buf"][::std::mem::offset_of!(_WSABUF, buf) - 8usize];
};
pub type WSABUF = _WSABUF;
pub type LPWSABUF = *mut _WSABUF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAMSG {
    pub name: LPSOCKADDR,
    pub namelen: INT,
    pub lpBuffers: LPWSABUF,
    pub dwBufferCount: ULONG,
    pub Control: WSABUF,
    pub dwFlags: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAMSG"][::std::mem::size_of::<_WSAMSG>() - 56usize];
    ["Alignment of _WSAMSG"][::std::mem::align_of::<_WSAMSG>() - 8usize];
    ["Offset of field: _WSAMSG::name"][::std::mem::offset_of!(_WSAMSG, name) - 0usize];
    ["Offset of field: _WSAMSG::namelen"][::std::mem::offset_of!(_WSAMSG, namelen) - 8usize];
    ["Offset of field: _WSAMSG::lpBuffers"][::std::mem::offset_of!(_WSAMSG, lpBuffers) - 16usize];
    ["Offset of field: _WSAMSG::dwBufferCount"]
        [::std::mem::offset_of!(_WSAMSG, dwBufferCount) - 24usize];
    ["Offset of field: _WSAMSG::Control"][::std::mem::offset_of!(_WSAMSG, Control) - 32usize];
    ["Offset of field: _WSAMSG::dwFlags"][::std::mem::offset_of!(_WSAMSG, dwFlags) - 48usize];
};
pub type WSAMSG = _WSAMSG;
pub type PWSAMSG = *mut _WSAMSG;
pub type LPWSAMSG = *mut _WSAMSG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmsghdr {
    pub cmsg_len: SIZE_T,
    pub cmsg_level: INT,
    pub cmsg_type: INT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
};
pub type WSACMSGHDR = cmsghdr;
pub type PWSACMSGHDR = *mut cmsghdr;
pub type LPWSACMSGHDR = *mut cmsghdr;
pub type CMSGHDR = WSACMSGHDR;
pub type PCMSGHDR = *mut WSACMSGHDR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo"][::std::mem::size_of::<addrinfo>() - 48usize];
    ["Alignment of addrinfo"][::std::mem::align_of::<addrinfo>() - 8usize];
    ["Offset of field: addrinfo::ai_flags"][::std::mem::offset_of!(addrinfo, ai_flags) - 0usize];
    ["Offset of field: addrinfo::ai_family"][::std::mem::offset_of!(addrinfo, ai_family) - 4usize];
    ["Offset of field: addrinfo::ai_socktype"]
        [::std::mem::offset_of!(addrinfo, ai_socktype) - 8usize];
    ["Offset of field: addrinfo::ai_protocol"]
        [::std::mem::offset_of!(addrinfo, ai_protocol) - 12usize];
    ["Offset of field: addrinfo::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo::ai_canonname"]
        [::std::mem::offset_of!(addrinfo, ai_canonname) - 24usize];
    ["Offset of field: addrinfo::ai_addr"][::std::mem::offset_of!(addrinfo, ai_addr) - 32usize];
    ["Offset of field: addrinfo::ai_next"][::std::mem::offset_of!(addrinfo, ai_next) - 40usize];
};
pub type ADDRINFOA = addrinfo;
pub type PADDRINFOA = *mut addrinfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoW {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_next: *mut addrinfoW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoW"][::std::mem::size_of::<addrinfoW>() - 48usize];
    ["Alignment of addrinfoW"][::std::mem::align_of::<addrinfoW>() - 8usize];
    ["Offset of field: addrinfoW::ai_flags"][::std::mem::offset_of!(addrinfoW, ai_flags) - 0usize];
    ["Offset of field: addrinfoW::ai_family"]
        [::std::mem::offset_of!(addrinfoW, ai_family) - 4usize];
    ["Offset of field: addrinfoW::ai_socktype"]
        [::std::mem::offset_of!(addrinfoW, ai_socktype) - 8usize];
    ["Offset of field: addrinfoW::ai_protocol"]
        [::std::mem::offset_of!(addrinfoW, ai_protocol) - 12usize];
    ["Offset of field: addrinfoW::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoW, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoW::ai_canonname"]
        [::std::mem::offset_of!(addrinfoW, ai_canonname) - 24usize];
    ["Offset of field: addrinfoW::ai_addr"][::std::mem::offset_of!(addrinfoW, ai_addr) - 32usize];
    ["Offset of field: addrinfoW::ai_next"][::std::mem::offset_of!(addrinfoW, ai_next) - 40usize];
};
pub type ADDRINFOW = addrinfoW;
pub type PADDRINFOW = *mut addrinfoW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoexA {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: LPGUID,
    pub ai_next: *mut addrinfoexA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoexA"][::std::mem::size_of::<addrinfoexA>() - 72usize];
    ["Alignment of addrinfoexA"][::std::mem::align_of::<addrinfoexA>() - 8usize];
    ["Offset of field: addrinfoexA::ai_flags"]
        [::std::mem::offset_of!(addrinfoexA, ai_flags) - 0usize];
    ["Offset of field: addrinfoexA::ai_family"]
        [::std::mem::offset_of!(addrinfoexA, ai_family) - 4usize];
    ["Offset of field: addrinfoexA::ai_socktype"]
        [::std::mem::offset_of!(addrinfoexA, ai_socktype) - 8usize];
    ["Offset of field: addrinfoexA::ai_protocol"]
        [::std::mem::offset_of!(addrinfoexA, ai_protocol) - 12usize];
    ["Offset of field: addrinfoexA::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoexA, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoexA::ai_canonname"]
        [::std::mem::offset_of!(addrinfoexA, ai_canonname) - 24usize];
    ["Offset of field: addrinfoexA::ai_addr"]
        [::std::mem::offset_of!(addrinfoexA, ai_addr) - 32usize];
    ["Offset of field: addrinfoexA::ai_blob"]
        [::std::mem::offset_of!(addrinfoexA, ai_blob) - 40usize];
    ["Offset of field: addrinfoexA::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoexA, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoexA::ai_provider"]
        [::std::mem::offset_of!(addrinfoexA, ai_provider) - 56usize];
    ["Offset of field: addrinfoexA::ai_next"]
        [::std::mem::offset_of!(addrinfoexA, ai_next) - 64usize];
};
pub type ADDRINFOEXA = addrinfoexA;
pub type PADDRINFOEXA = *mut addrinfoexA;
pub type LPADDRINFOEXA = *mut addrinfoexA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoexW {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: LPGUID,
    pub ai_next: *mut addrinfoexW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoexW"][::std::mem::size_of::<addrinfoexW>() - 72usize];
    ["Alignment of addrinfoexW"][::std::mem::align_of::<addrinfoexW>() - 8usize];
    ["Offset of field: addrinfoexW::ai_flags"]
        [::std::mem::offset_of!(addrinfoexW, ai_flags) - 0usize];
    ["Offset of field: addrinfoexW::ai_family"]
        [::std::mem::offset_of!(addrinfoexW, ai_family) - 4usize];
    ["Offset of field: addrinfoexW::ai_socktype"]
        [::std::mem::offset_of!(addrinfoexW, ai_socktype) - 8usize];
    ["Offset of field: addrinfoexW::ai_protocol"]
        [::std::mem::offset_of!(addrinfoexW, ai_protocol) - 12usize];
    ["Offset of field: addrinfoexW::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoexW, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoexW::ai_canonname"]
        [::std::mem::offset_of!(addrinfoexW, ai_canonname) - 24usize];
    ["Offset of field: addrinfoexW::ai_addr"]
        [::std::mem::offset_of!(addrinfoexW, ai_addr) - 32usize];
    ["Offset of field: addrinfoexW::ai_blob"]
        [::std::mem::offset_of!(addrinfoexW, ai_blob) - 40usize];
    ["Offset of field: addrinfoexW::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoexW, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoexW::ai_provider"]
        [::std::mem::offset_of!(addrinfoexW, ai_provider) - 56usize];
    ["Offset of field: addrinfoexW::ai_next"]
        [::std::mem::offset_of!(addrinfoexW, ai_next) - 64usize];
};
pub type ADDRINFOEXW = addrinfoexW;
pub type PADDRINFOEXW = *mut addrinfoexW;
pub type LPADDRINFOEXW = *mut addrinfoexW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex2A {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: LPGUID,
    pub ai_next: *mut addrinfoex2A,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex2A"][::std::mem::size_of::<addrinfoex2A>() - 88usize];
    ["Alignment of addrinfoex2A"][::std::mem::align_of::<addrinfoex2A>() - 8usize];
    ["Offset of field: addrinfoex2A::ai_flags"]
        [::std::mem::offset_of!(addrinfoex2A, ai_flags) - 0usize];
    ["Offset of field: addrinfoex2A::ai_family"]
        [::std::mem::offset_of!(addrinfoex2A, ai_family) - 4usize];
    ["Offset of field: addrinfoex2A::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex2A, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex2A::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex2A, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex2A::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex2A, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex2A::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex2A, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex2A::ai_addr"]
        [::std::mem::offset_of!(addrinfoex2A, ai_addr) - 32usize];
    ["Offset of field: addrinfoex2A::ai_blob"]
        [::std::mem::offset_of!(addrinfoex2A, ai_blob) - 40usize];
    ["Offset of field: addrinfoex2A::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex2A, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex2A::ai_provider"]
        [::std::mem::offset_of!(addrinfoex2A, ai_provider) - 56usize];
    ["Offset of field: addrinfoex2A::ai_next"]
        [::std::mem::offset_of!(addrinfoex2A, ai_next) - 64usize];
    ["Offset of field: addrinfoex2A::ai_version"]
        [::std::mem::offset_of!(addrinfoex2A, ai_version) - 72usize];
    ["Offset of field: addrinfoex2A::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex2A, ai_fqdn) - 80usize];
};
pub type ADDRINFOEX2A = addrinfoex2A;
pub type PADDRINFOEX2A = *mut addrinfoex2A;
pub type LPADDRINFOEX2A = *mut addrinfoex2A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex2W {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: LPGUID,
    pub ai_next: *mut addrinfoex2W,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: PWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex2W"][::std::mem::size_of::<addrinfoex2W>() - 88usize];
    ["Alignment of addrinfoex2W"][::std::mem::align_of::<addrinfoex2W>() - 8usize];
    ["Offset of field: addrinfoex2W::ai_flags"]
        [::std::mem::offset_of!(addrinfoex2W, ai_flags) - 0usize];
    ["Offset of field: addrinfoex2W::ai_family"]
        [::std::mem::offset_of!(addrinfoex2W, ai_family) - 4usize];
    ["Offset of field: addrinfoex2W::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex2W, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex2W::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex2W, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex2W::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex2W, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex2W::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex2W, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex2W::ai_addr"]
        [::std::mem::offset_of!(addrinfoex2W, ai_addr) - 32usize];
    ["Offset of field: addrinfoex2W::ai_blob"]
        [::std::mem::offset_of!(addrinfoex2W, ai_blob) - 40usize];
    ["Offset of field: addrinfoex2W::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex2W, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex2W::ai_provider"]
        [::std::mem::offset_of!(addrinfoex2W, ai_provider) - 56usize];
    ["Offset of field: addrinfoex2W::ai_next"]
        [::std::mem::offset_of!(addrinfoex2W, ai_next) - 64usize];
    ["Offset of field: addrinfoex2W::ai_version"]
        [::std::mem::offset_of!(addrinfoex2W, ai_version) - 72usize];
    ["Offset of field: addrinfoex2W::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex2W, ai_fqdn) - 80usize];
};
pub type ADDRINFOEX2W = addrinfoex2W;
pub type PADDRINFOEX2W = *mut addrinfoex2W;
pub type LPADDRINFOEX2W = *mut addrinfoex2W;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex3 {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: LPGUID,
    pub ai_next: *mut addrinfoex3,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: PWSTR,
    pub ai_interfaceindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex3"][::std::mem::size_of::<addrinfoex3>() - 96usize];
    ["Alignment of addrinfoex3"][::std::mem::align_of::<addrinfoex3>() - 8usize];
    ["Offset of field: addrinfoex3::ai_flags"]
        [::std::mem::offset_of!(addrinfoex3, ai_flags) - 0usize];
    ["Offset of field: addrinfoex3::ai_family"]
        [::std::mem::offset_of!(addrinfoex3, ai_family) - 4usize];
    ["Offset of field: addrinfoex3::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex3, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex3::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex3, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex3::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex3, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex3::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex3, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex3::ai_addr"]
        [::std::mem::offset_of!(addrinfoex3, ai_addr) - 32usize];
    ["Offset of field: addrinfoex3::ai_blob"]
        [::std::mem::offset_of!(addrinfoex3, ai_blob) - 40usize];
    ["Offset of field: addrinfoex3::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex3, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex3::ai_provider"]
        [::std::mem::offset_of!(addrinfoex3, ai_provider) - 56usize];
    ["Offset of field: addrinfoex3::ai_next"]
        [::std::mem::offset_of!(addrinfoex3, ai_next) - 64usize];
    ["Offset of field: addrinfoex3::ai_version"]
        [::std::mem::offset_of!(addrinfoex3, ai_version) - 72usize];
    ["Offset of field: addrinfoex3::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex3, ai_fqdn) - 80usize];
    ["Offset of field: addrinfoex3::ai_interfaceindex"]
        [::std::mem::offset_of!(addrinfoex3, ai_interfaceindex) - 88usize];
};
pub type ADDRINFOEX3 = addrinfoex3;
pub type PADDRINFOEX3 = *mut addrinfoex3;
pub type LPADDRINFOEX3 = *mut addrinfoex3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex4 {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: *mut GUID,
    pub ai_next: *mut addrinfoex4,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: PWSTR,
    pub ai_interfaceindex: ::std::os::raw::c_int,
    pub ai_resolutionhandle: HANDLE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex4"][::std::mem::size_of::<addrinfoex4>() - 104usize];
    ["Alignment of addrinfoex4"][::std::mem::align_of::<addrinfoex4>() - 8usize];
    ["Offset of field: addrinfoex4::ai_flags"]
        [::std::mem::offset_of!(addrinfoex4, ai_flags) - 0usize];
    ["Offset of field: addrinfoex4::ai_family"]
        [::std::mem::offset_of!(addrinfoex4, ai_family) - 4usize];
    ["Offset of field: addrinfoex4::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex4, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex4::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex4, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex4::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex4, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex4::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex4, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex4::ai_addr"]
        [::std::mem::offset_of!(addrinfoex4, ai_addr) - 32usize];
    ["Offset of field: addrinfoex4::ai_blob"]
        [::std::mem::offset_of!(addrinfoex4, ai_blob) - 40usize];
    ["Offset of field: addrinfoex4::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex4, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex4::ai_provider"]
        [::std::mem::offset_of!(addrinfoex4, ai_provider) - 56usize];
    ["Offset of field: addrinfoex4::ai_next"]
        [::std::mem::offset_of!(addrinfoex4, ai_next) - 64usize];
    ["Offset of field: addrinfoex4::ai_version"]
        [::std::mem::offset_of!(addrinfoex4, ai_version) - 72usize];
    ["Offset of field: addrinfoex4::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex4, ai_fqdn) - 80usize];
    ["Offset of field: addrinfoex4::ai_interfaceindex"]
        [::std::mem::offset_of!(addrinfoex4, ai_interfaceindex) - 88usize];
    ["Offset of field: addrinfoex4::ai_resolutionhandle"]
        [::std::mem::offset_of!(addrinfoex4, ai_resolutionhandle) - 96usize];
};
pub type ADDRINFOEX4 = addrinfoex4;
pub type PADDRINFOEX4 = *mut addrinfoex4;
pub type LPADDRINFOEX4 = *mut addrinfoex4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex5 {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: *mut GUID,
    pub ai_next: *mut addrinfoex5,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: PWSTR,
    pub ai_interfaceindex: ::std::os::raw::c_int,
    pub ai_resolutionhandle: HANDLE,
    pub ai_ttl: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex5"][::std::mem::size_of::<addrinfoex5>() - 112usize];
    ["Alignment of addrinfoex5"][::std::mem::align_of::<addrinfoex5>() - 8usize];
    ["Offset of field: addrinfoex5::ai_flags"]
        [::std::mem::offset_of!(addrinfoex5, ai_flags) - 0usize];
    ["Offset of field: addrinfoex5::ai_family"]
        [::std::mem::offset_of!(addrinfoex5, ai_family) - 4usize];
    ["Offset of field: addrinfoex5::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex5, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex5::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex5, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex5::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex5, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex5::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex5, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex5::ai_addr"]
        [::std::mem::offset_of!(addrinfoex5, ai_addr) - 32usize];
    ["Offset of field: addrinfoex5::ai_blob"]
        [::std::mem::offset_of!(addrinfoex5, ai_blob) - 40usize];
    ["Offset of field: addrinfoex5::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex5, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex5::ai_provider"]
        [::std::mem::offset_of!(addrinfoex5, ai_provider) - 56usize];
    ["Offset of field: addrinfoex5::ai_next"]
        [::std::mem::offset_of!(addrinfoex5, ai_next) - 64usize];
    ["Offset of field: addrinfoex5::ai_version"]
        [::std::mem::offset_of!(addrinfoex5, ai_version) - 72usize];
    ["Offset of field: addrinfoex5::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex5, ai_fqdn) - 80usize];
    ["Offset of field: addrinfoex5::ai_interfaceindex"]
        [::std::mem::offset_of!(addrinfoex5, ai_interfaceindex) - 88usize];
    ["Offset of field: addrinfoex5::ai_resolutionhandle"]
        [::std::mem::offset_of!(addrinfoex5, ai_resolutionhandle) - 96usize];
    ["Offset of field: addrinfoex5::ai_ttl"]
        [::std::mem::offset_of!(addrinfoex5, ai_ttl) - 104usize];
};
pub type ADDRINFOEX5 = addrinfoex5;
pub type PADDRINFOEX5 = *mut addrinfoex5;
pub type LPADDRINFOEX5 = *mut addrinfoex5;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct addrinfo_dns_server {
    pub ai_servertype: ::std::os::raw::c_uint,
    pub ai_flags: ::std::os::raw::c_ulonglong,
    pub ai_addrlen: ::std::os::raw::c_uint,
    pub ai_addr: *mut sockaddr,
    pub __bindgen_anon_1: addrinfo_dns_server__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union addrinfo_dns_server__bindgen_ty_1 {
    pub ai_template: PWSTR,
    pub ai_hostname: PWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo_dns_server__bindgen_ty_1"]
        [::std::mem::size_of::<addrinfo_dns_server__bindgen_ty_1>() - 8usize];
    ["Alignment of addrinfo_dns_server__bindgen_ty_1"]
        [::std::mem::align_of::<addrinfo_dns_server__bindgen_ty_1>() - 8usize];
    ["Offset of field: addrinfo_dns_server__bindgen_ty_1::ai_template"]
        [::std::mem::offset_of!(addrinfo_dns_server__bindgen_ty_1, ai_template) - 0usize];
    ["Offset of field: addrinfo_dns_server__bindgen_ty_1::ai_hostname"]
        [::std::mem::offset_of!(addrinfo_dns_server__bindgen_ty_1, ai_hostname) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfo_dns_server"][::std::mem::size_of::<addrinfo_dns_server>() - 40usize];
    ["Alignment of addrinfo_dns_server"][::std::mem::align_of::<addrinfo_dns_server>() - 8usize];
    ["Offset of field: addrinfo_dns_server::ai_servertype"]
        [::std::mem::offset_of!(addrinfo_dns_server, ai_servertype) - 0usize];
    ["Offset of field: addrinfo_dns_server::ai_flags"]
        [::std::mem::offset_of!(addrinfo_dns_server, ai_flags) - 8usize];
    ["Offset of field: addrinfo_dns_server::ai_addrlen"]
        [::std::mem::offset_of!(addrinfo_dns_server, ai_addrlen) - 16usize];
    ["Offset of field: addrinfo_dns_server::ai_addr"]
        [::std::mem::offset_of!(addrinfo_dns_server, ai_addr) - 24usize];
};
pub type ADDRINFO_DNS_SERVER = addrinfo_dns_server;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex6 {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: *mut GUID,
    pub ai_next: *mut addrinfoex5,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: PWSTR,
    pub ai_interfaceindex: ::std::os::raw::c_int,
    pub ai_resolutionhandle: HANDLE,
    pub ai_ttl: ::std::os::raw::c_uint,
    pub ai_numservers: ::std::os::raw::c_uint,
    pub ai_servers: *mut ADDRINFO_DNS_SERVER,
    pub ai_responseflags: ULONG64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex6"][::std::mem::size_of::<addrinfoex6>() - 128usize];
    ["Alignment of addrinfoex6"][::std::mem::align_of::<addrinfoex6>() - 8usize];
    ["Offset of field: addrinfoex6::ai_flags"]
        [::std::mem::offset_of!(addrinfoex6, ai_flags) - 0usize];
    ["Offset of field: addrinfoex6::ai_family"]
        [::std::mem::offset_of!(addrinfoex6, ai_family) - 4usize];
    ["Offset of field: addrinfoex6::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex6, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex6::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex6, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex6::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex6, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex6::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex6, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex6::ai_addr"]
        [::std::mem::offset_of!(addrinfoex6, ai_addr) - 32usize];
    ["Offset of field: addrinfoex6::ai_blob"]
        [::std::mem::offset_of!(addrinfoex6, ai_blob) - 40usize];
    ["Offset of field: addrinfoex6::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex6, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex6::ai_provider"]
        [::std::mem::offset_of!(addrinfoex6, ai_provider) - 56usize];
    ["Offset of field: addrinfoex6::ai_next"]
        [::std::mem::offset_of!(addrinfoex6, ai_next) - 64usize];
    ["Offset of field: addrinfoex6::ai_version"]
        [::std::mem::offset_of!(addrinfoex6, ai_version) - 72usize];
    ["Offset of field: addrinfoex6::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex6, ai_fqdn) - 80usize];
    ["Offset of field: addrinfoex6::ai_interfaceindex"]
        [::std::mem::offset_of!(addrinfoex6, ai_interfaceindex) - 88usize];
    ["Offset of field: addrinfoex6::ai_resolutionhandle"]
        [::std::mem::offset_of!(addrinfoex6, ai_resolutionhandle) - 96usize];
    ["Offset of field: addrinfoex6::ai_ttl"]
        [::std::mem::offset_of!(addrinfoex6, ai_ttl) - 104usize];
    ["Offset of field: addrinfoex6::ai_numservers"]
        [::std::mem::offset_of!(addrinfoex6, ai_numservers) - 108usize];
    ["Offset of field: addrinfoex6::ai_servers"]
        [::std::mem::offset_of!(addrinfoex6, ai_servers) - 112usize];
    ["Offset of field: addrinfoex6::ai_responseflags"]
        [::std::mem::offset_of!(addrinfoex6, ai_responseflags) - 120usize];
};
pub type ADDRINFOEX6 = addrinfoex6;
pub type PADDRINFOEX6 = *mut addrinfoex6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfoex7 {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: usize,
    pub ai_canonname: PWSTR,
    pub ai_addr: *mut sockaddr,
    pub ai_blob: *mut ::std::os::raw::c_void,
    pub ai_bloblen: usize,
    pub ai_provider: *mut GUID,
    pub ai_next: *mut addrinfoex7,
    pub ai_version: ::std::os::raw::c_int,
    pub ai_fqdn: PWSTR,
    pub ai_interfaceindex: ::std::os::raw::c_int,
    pub ai_resolutionhandle: HANDLE,
    pub ai_ttl: ::std::os::raw::c_uint,
    pub ai_numservers: ::std::os::raw::c_uint,
    pub ai_servers: *mut ADDRINFO_DNS_SERVER,
    pub ai_responseflags: ULONG64,
    pub ai_extraflags: ULONG64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of addrinfoex7"][::std::mem::size_of::<addrinfoex7>() - 136usize];
    ["Alignment of addrinfoex7"][::std::mem::align_of::<addrinfoex7>() - 8usize];
    ["Offset of field: addrinfoex7::ai_flags"]
        [::std::mem::offset_of!(addrinfoex7, ai_flags) - 0usize];
    ["Offset of field: addrinfoex7::ai_family"]
        [::std::mem::offset_of!(addrinfoex7, ai_family) - 4usize];
    ["Offset of field: addrinfoex7::ai_socktype"]
        [::std::mem::offset_of!(addrinfoex7, ai_socktype) - 8usize];
    ["Offset of field: addrinfoex7::ai_protocol"]
        [::std::mem::offset_of!(addrinfoex7, ai_protocol) - 12usize];
    ["Offset of field: addrinfoex7::ai_addrlen"]
        [::std::mem::offset_of!(addrinfoex7, ai_addrlen) - 16usize];
    ["Offset of field: addrinfoex7::ai_canonname"]
        [::std::mem::offset_of!(addrinfoex7, ai_canonname) - 24usize];
    ["Offset of field: addrinfoex7::ai_addr"]
        [::std::mem::offset_of!(addrinfoex7, ai_addr) - 32usize];
    ["Offset of field: addrinfoex7::ai_blob"]
        [::std::mem::offset_of!(addrinfoex7, ai_blob) - 40usize];
    ["Offset of field: addrinfoex7::ai_bloblen"]
        [::std::mem::offset_of!(addrinfoex7, ai_bloblen) - 48usize];
    ["Offset of field: addrinfoex7::ai_provider"]
        [::std::mem::offset_of!(addrinfoex7, ai_provider) - 56usize];
    ["Offset of field: addrinfoex7::ai_next"]
        [::std::mem::offset_of!(addrinfoex7, ai_next) - 64usize];
    ["Offset of field: addrinfoex7::ai_version"]
        [::std::mem::offset_of!(addrinfoex7, ai_version) - 72usize];
    ["Offset of field: addrinfoex7::ai_fqdn"]
        [::std::mem::offset_of!(addrinfoex7, ai_fqdn) - 80usize];
    ["Offset of field: addrinfoex7::ai_interfaceindex"]
        [::std::mem::offset_of!(addrinfoex7, ai_interfaceindex) - 88usize];
    ["Offset of field: addrinfoex7::ai_resolutionhandle"]
        [::std::mem::offset_of!(addrinfoex7, ai_resolutionhandle) - 96usize];
    ["Offset of field: addrinfoex7::ai_ttl"]
        [::std::mem::offset_of!(addrinfoex7, ai_ttl) - 104usize];
    ["Offset of field: addrinfoex7::ai_numservers"]
        [::std::mem::offset_of!(addrinfoex7, ai_numservers) - 108usize];
    ["Offset of field: addrinfoex7::ai_servers"]
        [::std::mem::offset_of!(addrinfoex7, ai_servers) - 112usize];
    ["Offset of field: addrinfoex7::ai_responseflags"]
        [::std::mem::offset_of!(addrinfoex7, ai_responseflags) - 120usize];
    ["Offset of field: addrinfoex7::ai_extraflags"]
        [::std::mem::offset_of!(addrinfoex7, ai_extraflags) - 128usize];
};
pub type ADDRINFOEX7 = addrinfoex7;
pub type PADDRINFOEX7 = *mut addrinfoex7;
pub type SOCKET = UINT_PTR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fd_count: u_int,
    pub fd_array: [SOCKET; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 520usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::fd_count"][::std::mem::offset_of!(fd_set, fd_count) - 0usize];
    ["Offset of field: fd_set::fd_array"][::std::mem::offset_of!(fd_set, fd_array) - 8usize];
};
unsafe extern "C" {
    pub fn __WSAFDIsSet(fd: SOCKET, arg1: *mut fd_set) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: ::std::os::raw::c_long,
    pub tv_usec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 8usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 4usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_short,
    pub h_length: ::std::os::raw::c_short,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of hostent"][::std::mem::size_of::<hostent>() - 32usize];
    ["Alignment of hostent"][::std::mem::align_of::<hostent>() - 8usize];
    ["Offset of field: hostent::h_name"][::std::mem::offset_of!(hostent, h_name) - 0usize];
    ["Offset of field: hostent::h_aliases"][::std::mem::offset_of!(hostent, h_aliases) - 8usize];
    ["Offset of field: hostent::h_addrtype"][::std::mem::offset_of!(hostent, h_addrtype) - 16usize];
    ["Offset of field: hostent::h_length"][::std::mem::offset_of!(hostent, h_length) - 18usize];
    ["Offset of field: hostent::h_addr_list"]
        [::std::mem::offset_of!(hostent, h_addr_list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_short,
    pub n_net: u_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of netent"][::std::mem::size_of::<netent>() - 24usize];
    ["Alignment of netent"][::std::mem::align_of::<netent>() - 8usize];
    ["Offset of field: netent::n_name"][::std::mem::offset_of!(netent, n_name) - 0usize];
    ["Offset of field: netent::n_aliases"][::std::mem::offset_of!(netent, n_aliases) - 8usize];
    ["Offset of field: netent::n_addrtype"][::std::mem::offset_of!(netent, n_addrtype) - 16usize];
    ["Offset of field: netent::n_net"][::std::mem::offset_of!(netent, n_net) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_proto: *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of servent"][::std::mem::size_of::<servent>() - 32usize];
    ["Alignment of servent"][::std::mem::align_of::<servent>() - 8usize];
    ["Offset of field: servent::s_name"][::std::mem::offset_of!(servent, s_name) - 0usize];
    ["Offset of field: servent::s_aliases"][::std::mem::offset_of!(servent, s_aliases) - 8usize];
    ["Offset of field: servent::s_proto"][::std::mem::offset_of!(servent, s_proto) - 16usize];
    ["Offset of field: servent::s_port"][::std::mem::offset_of!(servent, s_port) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of protoent"][::std::mem::size_of::<protoent>() - 24usize];
    ["Alignment of protoent"][::std::mem::align_of::<protoent>() - 8usize];
    ["Offset of field: protoent::p_name"][::std::mem::offset_of!(protoent, p_name) - 0usize];
    ["Offset of field: protoent::p_aliases"][::std::mem::offset_of!(protoent, p_aliases) - 8usize];
    ["Offset of field: protoent::p_proto"][::std::mem::offset_of!(protoent, p_proto) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WSAData {
    pub wVersion: WORD,
    pub wHighVersion: WORD,
    pub iMaxSockets: ::std::os::raw::c_ushort,
    pub iMaxUdpDg: ::std::os::raw::c_ushort,
    pub lpVendorInfo: *mut ::std::os::raw::c_char,
    pub szDescription: [::std::os::raw::c_char; 257usize],
    pub szSystemStatus: [::std::os::raw::c_char; 129usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WSAData"][::std::mem::size_of::<WSAData>() - 408usize];
    ["Alignment of WSAData"][::std::mem::align_of::<WSAData>() - 8usize];
    ["Offset of field: WSAData::wVersion"][::std::mem::offset_of!(WSAData, wVersion) - 0usize];
    ["Offset of field: WSAData::wHighVersion"]
        [::std::mem::offset_of!(WSAData, wHighVersion) - 2usize];
    ["Offset of field: WSAData::iMaxSockets"]
        [::std::mem::offset_of!(WSAData, iMaxSockets) - 4usize];
    ["Offset of field: WSAData::iMaxUdpDg"][::std::mem::offset_of!(WSAData, iMaxUdpDg) - 6usize];
    ["Offset of field: WSAData::lpVendorInfo"]
        [::std::mem::offset_of!(WSAData, lpVendorInfo) - 8usize];
    ["Offset of field: WSAData::szDescription"]
        [::std::mem::offset_of!(WSAData, szDescription) - 16usize];
    ["Offset of field: WSAData::szSystemStatus"]
        [::std::mem::offset_of!(WSAData, szSystemStatus) - 273usize];
};
pub type WSADATA = WSAData;
pub type LPWSADATA = *mut WSAData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockproto {
    pub sp_family: u_short,
    pub sp_protocol: u_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockproto"][::std::mem::size_of::<sockproto>() - 4usize];
    ["Alignment of sockproto"][::std::mem::align_of::<sockproto>() - 2usize];
    ["Offset of field: sockproto::sp_family"]
        [::std::mem::offset_of!(sockproto, sp_family) - 0usize];
    ["Offset of field: sockproto::sp_protocol"]
        [::std::mem::offset_of!(sockproto, sp_protocol) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: u_short,
    pub l_linger: u_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 4usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 2usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 2usize];
};
pub type LPWSAOVERLAPPED = *mut _OVERLAPPED;
pub type SERVICETYPE = ULONG;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _flowspec {
    pub TokenRate: ULONG,
    pub TokenBucketSize: ULONG,
    pub PeakBandwidth: ULONG,
    pub Latency: ULONG,
    pub DelayVariation: ULONG,
    pub ServiceType: SERVICETYPE,
    pub MaxSduSize: ULONG,
    pub MinimumPolicedSize: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _flowspec"][::std::mem::size_of::<_flowspec>() - 32usize];
    ["Alignment of _flowspec"][::std::mem::align_of::<_flowspec>() - 4usize];
    ["Offset of field: _flowspec::TokenRate"]
        [::std::mem::offset_of!(_flowspec, TokenRate) - 0usize];
    ["Offset of field: _flowspec::TokenBucketSize"]
        [::std::mem::offset_of!(_flowspec, TokenBucketSize) - 4usize];
    ["Offset of field: _flowspec::PeakBandwidth"]
        [::std::mem::offset_of!(_flowspec, PeakBandwidth) - 8usize];
    ["Offset of field: _flowspec::Latency"][::std::mem::offset_of!(_flowspec, Latency) - 12usize];
    ["Offset of field: _flowspec::DelayVariation"]
        [::std::mem::offset_of!(_flowspec, DelayVariation) - 16usize];
    ["Offset of field: _flowspec::ServiceType"]
        [::std::mem::offset_of!(_flowspec, ServiceType) - 20usize];
    ["Offset of field: _flowspec::MaxSduSize"]
        [::std::mem::offset_of!(_flowspec, MaxSduSize) - 24usize];
    ["Offset of field: _flowspec::MinimumPolicedSize"]
        [::std::mem::offset_of!(_flowspec, MinimumPolicedSize) - 28usize];
};
pub type FLOWSPEC = _flowspec;
pub type PFLOWSPEC = *mut _flowspec;
pub type LPFLOWSPEC = *mut _flowspec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QOS_OBJECT_HDR {
    pub ObjectType: ULONG,
    pub ObjectLength: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of QOS_OBJECT_HDR"][::std::mem::size_of::<QOS_OBJECT_HDR>() - 8usize];
    ["Alignment of QOS_OBJECT_HDR"][::std::mem::align_of::<QOS_OBJECT_HDR>() - 4usize];
    ["Offset of field: QOS_OBJECT_HDR::ObjectType"]
        [::std::mem::offset_of!(QOS_OBJECT_HDR, ObjectType) - 0usize];
    ["Offset of field: QOS_OBJECT_HDR::ObjectLength"]
        [::std::mem::offset_of!(QOS_OBJECT_HDR, ObjectLength) - 4usize];
};
pub type LPQOS_OBJECT_HDR = *mut QOS_OBJECT_HDR;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QOS_SD_MODE {
    pub ObjectHdr: QOS_OBJECT_HDR,
    pub ShapeDiscardMode: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QOS_SD_MODE"][::std::mem::size_of::<_QOS_SD_MODE>() - 12usize];
    ["Alignment of _QOS_SD_MODE"][::std::mem::align_of::<_QOS_SD_MODE>() - 4usize];
    ["Offset of field: _QOS_SD_MODE::ObjectHdr"]
        [::std::mem::offset_of!(_QOS_SD_MODE, ObjectHdr) - 0usize];
    ["Offset of field: _QOS_SD_MODE::ShapeDiscardMode"]
        [::std::mem::offset_of!(_QOS_SD_MODE, ShapeDiscardMode) - 8usize];
};
pub type QOS_SD_MODE = _QOS_SD_MODE;
pub type LPQOS_SD_MODE = *mut _QOS_SD_MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QOS_SHAPING_RATE {
    pub ObjectHdr: QOS_OBJECT_HDR,
    pub ShapingRate: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QOS_SHAPING_RATE"][::std::mem::size_of::<_QOS_SHAPING_RATE>() - 12usize];
    ["Alignment of _QOS_SHAPING_RATE"][::std::mem::align_of::<_QOS_SHAPING_RATE>() - 4usize];
    ["Offset of field: _QOS_SHAPING_RATE::ObjectHdr"]
        [::std::mem::offset_of!(_QOS_SHAPING_RATE, ObjectHdr) - 0usize];
    ["Offset of field: _QOS_SHAPING_RATE::ShapingRate"]
        [::std::mem::offset_of!(_QOS_SHAPING_RATE, ShapingRate) - 8usize];
};
pub type QOS_SHAPING_RATE = _QOS_SHAPING_RATE;
pub type LPQOS_SHAPING_RATE = *mut _QOS_SHAPING_RATE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _QualityOfService {
    pub SendingFlowspec: FLOWSPEC,
    pub ReceivingFlowspec: FLOWSPEC,
    pub ProviderSpecific: WSABUF,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _QualityOfService"][::std::mem::size_of::<_QualityOfService>() - 80usize];
    ["Alignment of _QualityOfService"][::std::mem::align_of::<_QualityOfService>() - 8usize];
    ["Offset of field: _QualityOfService::SendingFlowspec"]
        [::std::mem::offset_of!(_QualityOfService, SendingFlowspec) - 0usize];
    ["Offset of field: _QualityOfService::ReceivingFlowspec"]
        [::std::mem::offset_of!(_QualityOfService, ReceivingFlowspec) - 32usize];
    ["Offset of field: _QualityOfService::ProviderSpecific"]
        [::std::mem::offset_of!(_QualityOfService, ProviderSpecific) - 64usize];
};
pub type QOS = _QualityOfService;
pub type LPQOS = *mut _QualityOfService;
pub type GROUP = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANETWORKEVENTS {
    pub lNetworkEvents: ::std::os::raw::c_long,
    pub iErrorCode: [::std::os::raw::c_int; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANETWORKEVENTS"][::std::mem::size_of::<_WSANETWORKEVENTS>() - 44usize];
    ["Alignment of _WSANETWORKEVENTS"][::std::mem::align_of::<_WSANETWORKEVENTS>() - 4usize];
    ["Offset of field: _WSANETWORKEVENTS::lNetworkEvents"]
        [::std::mem::offset_of!(_WSANETWORKEVENTS, lNetworkEvents) - 0usize];
    ["Offset of field: _WSANETWORKEVENTS::iErrorCode"]
        [::std::mem::offset_of!(_WSANETWORKEVENTS, iErrorCode) - 4usize];
};
pub type WSANETWORKEVENTS = _WSANETWORKEVENTS;
pub type LPWSANETWORKEVENTS = *mut _WSANETWORKEVENTS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAPROTOCOLCHAIN {
    pub ChainLen: ::std::os::raw::c_int,
    pub ChainEntries: [DWORD; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAPROTOCOLCHAIN"][::std::mem::size_of::<_WSAPROTOCOLCHAIN>() - 32usize];
    ["Alignment of _WSAPROTOCOLCHAIN"][::std::mem::align_of::<_WSAPROTOCOLCHAIN>() - 4usize];
    ["Offset of field: _WSAPROTOCOLCHAIN::ChainLen"]
        [::std::mem::offset_of!(_WSAPROTOCOLCHAIN, ChainLen) - 0usize];
    ["Offset of field: _WSAPROTOCOLCHAIN::ChainEntries"]
        [::std::mem::offset_of!(_WSAPROTOCOLCHAIN, ChainEntries) - 4usize];
};
pub type WSAPROTOCOLCHAIN = _WSAPROTOCOLCHAIN;
pub type LPWSAPROTOCOLCHAIN = *mut _WSAPROTOCOLCHAIN;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAPROTOCOL_INFOA {
    pub dwServiceFlags1: DWORD,
    pub dwServiceFlags2: DWORD,
    pub dwServiceFlags3: DWORD,
    pub dwServiceFlags4: DWORD,
    pub dwProviderFlags: DWORD,
    pub ProviderId: GUID,
    pub dwCatalogEntryId: DWORD,
    pub ProtocolChain: WSAPROTOCOLCHAIN,
    pub iVersion: ::std::os::raw::c_int,
    pub iAddressFamily: ::std::os::raw::c_int,
    pub iMaxSockAddr: ::std::os::raw::c_int,
    pub iMinSockAddr: ::std::os::raw::c_int,
    pub iSocketType: ::std::os::raw::c_int,
    pub iProtocol: ::std::os::raw::c_int,
    pub iProtocolMaxOffset: ::std::os::raw::c_int,
    pub iNetworkByteOrder: ::std::os::raw::c_int,
    pub iSecurityScheme: ::std::os::raw::c_int,
    pub dwMessageSize: DWORD,
    pub dwProviderReserved: DWORD,
    pub szProtocol: [CHAR; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAPROTOCOL_INFOA"][::std::mem::size_of::<_WSAPROTOCOL_INFOA>() - 372usize];
    ["Alignment of _WSAPROTOCOL_INFOA"][::std::mem::align_of::<_WSAPROTOCOL_INFOA>() - 4usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwServiceFlags1"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwServiceFlags1) - 0usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwServiceFlags2"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwServiceFlags2) - 4usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwServiceFlags3"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwServiceFlags3) - 8usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwServiceFlags4"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwServiceFlags4) - 12usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwProviderFlags"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwProviderFlags) - 16usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::ProviderId"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, ProviderId) - 20usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwCatalogEntryId"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwCatalogEntryId) - 36usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::ProtocolChain"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, ProtocolChain) - 40usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iVersion"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iVersion) - 72usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iAddressFamily"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iAddressFamily) - 76usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iMaxSockAddr"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iMaxSockAddr) - 80usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iMinSockAddr"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iMinSockAddr) - 84usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iSocketType"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iSocketType) - 88usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iProtocol"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iProtocol) - 92usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iProtocolMaxOffset"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iProtocolMaxOffset) - 96usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iNetworkByteOrder"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iNetworkByteOrder) - 100usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::iSecurityScheme"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, iSecurityScheme) - 104usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwMessageSize"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwMessageSize) - 108usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::dwProviderReserved"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, dwProviderReserved) - 112usize];
    ["Offset of field: _WSAPROTOCOL_INFOA::szProtocol"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOA, szProtocol) - 116usize];
};
pub type WSAPROTOCOL_INFOA = _WSAPROTOCOL_INFOA;
pub type LPWSAPROTOCOL_INFOA = *mut _WSAPROTOCOL_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAPROTOCOL_INFOW {
    pub dwServiceFlags1: DWORD,
    pub dwServiceFlags2: DWORD,
    pub dwServiceFlags3: DWORD,
    pub dwServiceFlags4: DWORD,
    pub dwProviderFlags: DWORD,
    pub ProviderId: GUID,
    pub dwCatalogEntryId: DWORD,
    pub ProtocolChain: WSAPROTOCOLCHAIN,
    pub iVersion: ::std::os::raw::c_int,
    pub iAddressFamily: ::std::os::raw::c_int,
    pub iMaxSockAddr: ::std::os::raw::c_int,
    pub iMinSockAddr: ::std::os::raw::c_int,
    pub iSocketType: ::std::os::raw::c_int,
    pub iProtocol: ::std::os::raw::c_int,
    pub iProtocolMaxOffset: ::std::os::raw::c_int,
    pub iNetworkByteOrder: ::std::os::raw::c_int,
    pub iSecurityScheme: ::std::os::raw::c_int,
    pub dwMessageSize: DWORD,
    pub dwProviderReserved: DWORD,
    pub szProtocol: [WCHAR; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAPROTOCOL_INFOW"][::std::mem::size_of::<_WSAPROTOCOL_INFOW>() - 628usize];
    ["Alignment of _WSAPROTOCOL_INFOW"][::std::mem::align_of::<_WSAPROTOCOL_INFOW>() - 4usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwServiceFlags1"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwServiceFlags1) - 0usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwServiceFlags2"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwServiceFlags2) - 4usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwServiceFlags3"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwServiceFlags3) - 8usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwServiceFlags4"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwServiceFlags4) - 12usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwProviderFlags"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwProviderFlags) - 16usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::ProviderId"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, ProviderId) - 20usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwCatalogEntryId"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwCatalogEntryId) - 36usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::ProtocolChain"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, ProtocolChain) - 40usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iVersion"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iVersion) - 72usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iAddressFamily"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iAddressFamily) - 76usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iMaxSockAddr"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iMaxSockAddr) - 80usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iMinSockAddr"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iMinSockAddr) - 84usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iSocketType"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iSocketType) - 88usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iProtocol"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iProtocol) - 92usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iProtocolMaxOffset"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iProtocolMaxOffset) - 96usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iNetworkByteOrder"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iNetworkByteOrder) - 100usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::iSecurityScheme"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, iSecurityScheme) - 104usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwMessageSize"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwMessageSize) - 108usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::dwProviderReserved"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, dwProviderReserved) - 112usize];
    ["Offset of field: _WSAPROTOCOL_INFOW::szProtocol"]
        [::std::mem::offset_of!(_WSAPROTOCOL_INFOW, szProtocol) - 116usize];
};
pub type WSAPROTOCOL_INFOW = _WSAPROTOCOL_INFOW;
pub type LPWSAPROTOCOL_INFOW = *mut _WSAPROTOCOL_INFOW;
pub type WSAPROTOCOL_INFO = WSAPROTOCOL_INFOA;
pub type LPWSAPROTOCOL_INFO = LPWSAPROTOCOL_INFOA;
pub type LPCONDITIONPROC = ::std::option::Option<
    unsafe extern "C" fn(
        lpCallerId: LPWSABUF,
        lpCallerData: LPWSABUF,
        lpSQOS: LPQOS,
        lpGQOS: LPQOS,
        lpCalleeId: LPWSABUF,
        lpCalleeData: LPWSABUF,
        g: *mut GROUP,
        dwCallbackData: DWORD_PTR,
    ) -> ::std::os::raw::c_int,
>;
pub type LPWSAOVERLAPPED_COMPLETION_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(
        dwError: DWORD,
        cbTransferred: DWORD,
        lpOverlapped: LPWSAOVERLAPPED,
        dwFlags: DWORD,
    ),
>;
pub const _WSACOMPLETIONTYPE_NSP_NOTIFY_IMMEDIATELY: _WSACOMPLETIONTYPE = 0;
pub const _WSACOMPLETIONTYPE_NSP_NOTIFY_HWND: _WSACOMPLETIONTYPE = 1;
pub const _WSACOMPLETIONTYPE_NSP_NOTIFY_EVENT: _WSACOMPLETIONTYPE = 2;
pub const _WSACOMPLETIONTYPE_NSP_NOTIFY_PORT: _WSACOMPLETIONTYPE = 3;
pub const _WSACOMPLETIONTYPE_NSP_NOTIFY_APC: _WSACOMPLETIONTYPE = 4;
pub type _WSACOMPLETIONTYPE = ::std::os::raw::c_int;
pub use self::_WSACOMPLETIONTYPE as WSACOMPLETIONTYPE;
pub type PWSACOMPLETIONTYPE = *mut _WSACOMPLETIONTYPE;
pub type LPWSACOMPLETIONTYPE = *mut _WSACOMPLETIONTYPE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _WSACOMPLETION {
    pub Type: WSACOMPLETIONTYPE,
    pub Parameters: _WSACOMPLETION__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _WSACOMPLETION__bindgen_ty_1 {
    pub WindowMessage: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1,
    pub Event: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2,
    pub Apc: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3,
    pub Port: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1 {
    pub hWnd: HWND,
    pub uMsg: UINT,
    pub context: WPARAM,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_1>() - 24usize];
    ["Alignment of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1::hWnd"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_1, hWnd) - 0usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1::uMsg"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_1, uMsg) - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1::context"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_1, context) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2 {
    pub lpOverlapped: LPWSAOVERLAPPED,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::size_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Alignment of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2"]
        [::std::mem::align_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_2>() - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2::lpOverlapped"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_2, lpOverlapped) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3 {
    pub lpOverlapped: LPWSAOVERLAPPED,
    pub lpfnCompletionProc: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::size_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_3>() - 16usize];
    ["Alignment of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3"]
        [::std::mem::align_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_3>() - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3::lpOverlapped"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_3, lpOverlapped) - 0usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3::lpfnCompletionProc"][::std::mem::offset_of!(
        _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3,
        lpfnCompletionProc
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4 {
    pub lpOverlapped: LPWSAOVERLAPPED,
    pub hPort: HANDLE,
    pub Key: ULONG_PTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::size_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_4>() - 24usize];
    ["Alignment of _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4"]
        [::std::mem::align_of::<_WSACOMPLETION__bindgen_ty_1__bindgen_ty_4>() - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4::lpOverlapped"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_4, lpOverlapped) - 0usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4::hPort"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_4, hPort) - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4::Key"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1__bindgen_ty_4, Key) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSACOMPLETION__bindgen_ty_1"]
        [::std::mem::size_of::<_WSACOMPLETION__bindgen_ty_1>() - 24usize];
    ["Alignment of _WSACOMPLETION__bindgen_ty_1"]
        [::std::mem::align_of::<_WSACOMPLETION__bindgen_ty_1>() - 8usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1::WindowMessage"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1, WindowMessage) - 0usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1::Event"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1, Event) - 0usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1::Apc"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1, Apc) - 0usize];
    ["Offset of field: _WSACOMPLETION__bindgen_ty_1::Port"]
        [::std::mem::offset_of!(_WSACOMPLETION__bindgen_ty_1, Port) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSACOMPLETION"][::std::mem::size_of::<_WSACOMPLETION>() - 32usize];
    ["Alignment of _WSACOMPLETION"][::std::mem::align_of::<_WSACOMPLETION>() - 8usize];
    ["Offset of field: _WSACOMPLETION::Type"]
        [::std::mem::offset_of!(_WSACOMPLETION, Type) - 0usize];
    ["Offset of field: _WSACOMPLETION::Parameters"]
        [::std::mem::offset_of!(_WSACOMPLETION, Parameters) - 8usize];
};
pub type WSACOMPLETION = _WSACOMPLETION;
pub type PWSACOMPLETION = *mut _WSACOMPLETION;
pub type LPWSACOMPLETION = *mut _WSACOMPLETION;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BLOB {
    pub cbSize: ULONG,
    pub pBlobData: *mut BYTE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BLOB"][::std::mem::size_of::<_BLOB>() - 16usize];
    ["Alignment of _BLOB"][::std::mem::align_of::<_BLOB>() - 8usize];
    ["Offset of field: _BLOB::cbSize"][::std::mem::offset_of!(_BLOB, cbSize) - 0usize];
    ["Offset of field: _BLOB::pBlobData"][::std::mem::offset_of!(_BLOB, pBlobData) - 8usize];
};
pub type BLOB = _BLOB;
pub type LPBLOB = *mut _BLOB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AFPROTOCOLS {
    pub iAddressFamily: INT,
    pub iProtocol: INT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AFPROTOCOLS"][::std::mem::size_of::<_AFPROTOCOLS>() - 8usize];
    ["Alignment of _AFPROTOCOLS"][::std::mem::align_of::<_AFPROTOCOLS>() - 4usize];
    ["Offset of field: _AFPROTOCOLS::iAddressFamily"]
        [::std::mem::offset_of!(_AFPROTOCOLS, iAddressFamily) - 0usize];
    ["Offset of field: _AFPROTOCOLS::iProtocol"]
        [::std::mem::offset_of!(_AFPROTOCOLS, iProtocol) - 4usize];
};
pub type AFPROTOCOLS = _AFPROTOCOLS;
pub type PAFPROTOCOLS = *mut _AFPROTOCOLS;
pub type LPAFPROTOCOLS = *mut _AFPROTOCOLS;
pub const _WSAEcomparator_COMP_EQUAL: _WSAEcomparator = 0;
pub const _WSAEcomparator_COMP_NOTLESS: _WSAEcomparator = 1;
pub type _WSAEcomparator = ::std::os::raw::c_int;
pub use self::_WSAEcomparator as WSAECOMPARATOR;
pub type PWSAECOMPARATOR = *mut _WSAEcomparator;
pub type LPWSAECOMPARATOR = *mut _WSAEcomparator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAVersion {
    pub dwVersion: DWORD,
    pub ecHow: WSAECOMPARATOR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAVersion"][::std::mem::size_of::<_WSAVersion>() - 8usize];
    ["Alignment of _WSAVersion"][::std::mem::align_of::<_WSAVersion>() - 4usize];
    ["Offset of field: _WSAVersion::dwVersion"]
        [::std::mem::offset_of!(_WSAVersion, dwVersion) - 0usize];
    ["Offset of field: _WSAVersion::ecHow"][::std::mem::offset_of!(_WSAVersion, ecHow) - 4usize];
};
pub type WSAVERSION = _WSAVersion;
pub type PWSAVERSION = *mut _WSAVersion;
pub type LPWSAVERSION = *mut _WSAVersion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAQuerySetA {
    pub dwSize: DWORD,
    pub lpszServiceInstanceName: LPSTR,
    pub lpServiceClassId: LPGUID,
    pub lpVersion: LPWSAVERSION,
    pub lpszComment: LPSTR,
    pub dwNameSpace: DWORD,
    pub lpNSProviderId: LPGUID,
    pub lpszContext: LPSTR,
    pub dwNumberOfProtocols: DWORD,
    pub lpafpProtocols: LPAFPROTOCOLS,
    pub lpszQueryString: LPSTR,
    pub dwNumberOfCsAddrs: DWORD,
    pub lpcsaBuffer: LPCSADDR_INFO,
    pub dwOutputFlags: DWORD,
    pub lpBlob: LPBLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAQuerySetA"][::std::mem::size_of::<_WSAQuerySetA>() - 120usize];
    ["Alignment of _WSAQuerySetA"][::std::mem::align_of::<_WSAQuerySetA>() - 8usize];
    ["Offset of field: _WSAQuerySetA::dwSize"]
        [::std::mem::offset_of!(_WSAQuerySetA, dwSize) - 0usize];
    ["Offset of field: _WSAQuerySetA::lpszServiceInstanceName"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpszServiceInstanceName) - 8usize];
    ["Offset of field: _WSAQuerySetA::lpServiceClassId"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpServiceClassId) - 16usize];
    ["Offset of field: _WSAQuerySetA::lpVersion"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpVersion) - 24usize];
    ["Offset of field: _WSAQuerySetA::lpszComment"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpszComment) - 32usize];
    ["Offset of field: _WSAQuerySetA::dwNameSpace"]
        [::std::mem::offset_of!(_WSAQuerySetA, dwNameSpace) - 40usize];
    ["Offset of field: _WSAQuerySetA::lpNSProviderId"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpNSProviderId) - 48usize];
    ["Offset of field: _WSAQuerySetA::lpszContext"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpszContext) - 56usize];
    ["Offset of field: _WSAQuerySetA::dwNumberOfProtocols"]
        [::std::mem::offset_of!(_WSAQuerySetA, dwNumberOfProtocols) - 64usize];
    ["Offset of field: _WSAQuerySetA::lpafpProtocols"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpafpProtocols) - 72usize];
    ["Offset of field: _WSAQuerySetA::lpszQueryString"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpszQueryString) - 80usize];
    ["Offset of field: _WSAQuerySetA::dwNumberOfCsAddrs"]
        [::std::mem::offset_of!(_WSAQuerySetA, dwNumberOfCsAddrs) - 88usize];
    ["Offset of field: _WSAQuerySetA::lpcsaBuffer"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpcsaBuffer) - 96usize];
    ["Offset of field: _WSAQuerySetA::dwOutputFlags"]
        [::std::mem::offset_of!(_WSAQuerySetA, dwOutputFlags) - 104usize];
    ["Offset of field: _WSAQuerySetA::lpBlob"]
        [::std::mem::offset_of!(_WSAQuerySetA, lpBlob) - 112usize];
};
pub type WSAQUERYSETA = _WSAQuerySetA;
pub type PWSAQUERYSETA = *mut _WSAQuerySetA;
pub type LPWSAQUERYSETA = *mut _WSAQuerySetA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAQuerySetW {
    pub dwSize: DWORD,
    pub lpszServiceInstanceName: LPWSTR,
    pub lpServiceClassId: LPGUID,
    pub lpVersion: LPWSAVERSION,
    pub lpszComment: LPWSTR,
    pub dwNameSpace: DWORD,
    pub lpNSProviderId: LPGUID,
    pub lpszContext: LPWSTR,
    pub dwNumberOfProtocols: DWORD,
    pub lpafpProtocols: LPAFPROTOCOLS,
    pub lpszQueryString: LPWSTR,
    pub dwNumberOfCsAddrs: DWORD,
    pub lpcsaBuffer: LPCSADDR_INFO,
    pub dwOutputFlags: DWORD,
    pub lpBlob: LPBLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAQuerySetW"][::std::mem::size_of::<_WSAQuerySetW>() - 120usize];
    ["Alignment of _WSAQuerySetW"][::std::mem::align_of::<_WSAQuerySetW>() - 8usize];
    ["Offset of field: _WSAQuerySetW::dwSize"]
        [::std::mem::offset_of!(_WSAQuerySetW, dwSize) - 0usize];
    ["Offset of field: _WSAQuerySetW::lpszServiceInstanceName"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpszServiceInstanceName) - 8usize];
    ["Offset of field: _WSAQuerySetW::lpServiceClassId"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpServiceClassId) - 16usize];
    ["Offset of field: _WSAQuerySetW::lpVersion"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpVersion) - 24usize];
    ["Offset of field: _WSAQuerySetW::lpszComment"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpszComment) - 32usize];
    ["Offset of field: _WSAQuerySetW::dwNameSpace"]
        [::std::mem::offset_of!(_WSAQuerySetW, dwNameSpace) - 40usize];
    ["Offset of field: _WSAQuerySetW::lpNSProviderId"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpNSProviderId) - 48usize];
    ["Offset of field: _WSAQuerySetW::lpszContext"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpszContext) - 56usize];
    ["Offset of field: _WSAQuerySetW::dwNumberOfProtocols"]
        [::std::mem::offset_of!(_WSAQuerySetW, dwNumberOfProtocols) - 64usize];
    ["Offset of field: _WSAQuerySetW::lpafpProtocols"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpafpProtocols) - 72usize];
    ["Offset of field: _WSAQuerySetW::lpszQueryString"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpszQueryString) - 80usize];
    ["Offset of field: _WSAQuerySetW::dwNumberOfCsAddrs"]
        [::std::mem::offset_of!(_WSAQuerySetW, dwNumberOfCsAddrs) - 88usize];
    ["Offset of field: _WSAQuerySetW::lpcsaBuffer"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpcsaBuffer) - 96usize];
    ["Offset of field: _WSAQuerySetW::dwOutputFlags"]
        [::std::mem::offset_of!(_WSAQuerySetW, dwOutputFlags) - 104usize];
    ["Offset of field: _WSAQuerySetW::lpBlob"]
        [::std::mem::offset_of!(_WSAQuerySetW, lpBlob) - 112usize];
};
pub type WSAQUERYSETW = _WSAQuerySetW;
pub type PWSAQUERYSETW = *mut _WSAQuerySetW;
pub type LPWSAQUERYSETW = *mut _WSAQuerySetW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAQuerySet2A {
    pub dwSize: DWORD,
    pub lpszServiceInstanceName: LPSTR,
    pub lpVersion: LPWSAVERSION,
    pub lpszComment: LPSTR,
    pub dwNameSpace: DWORD,
    pub lpNSProviderId: LPGUID,
    pub lpszContext: LPSTR,
    pub dwNumberOfProtocols: DWORD,
    pub lpafpProtocols: LPAFPROTOCOLS,
    pub lpszQueryString: LPSTR,
    pub dwNumberOfCsAddrs: DWORD,
    pub lpcsaBuffer: LPCSADDR_INFO,
    pub dwOutputFlags: DWORD,
    pub lpBlob: LPBLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAQuerySet2A"][::std::mem::size_of::<_WSAQuerySet2A>() - 112usize];
    ["Alignment of _WSAQuerySet2A"][::std::mem::align_of::<_WSAQuerySet2A>() - 8usize];
    ["Offset of field: _WSAQuerySet2A::dwSize"]
        [::std::mem::offset_of!(_WSAQuerySet2A, dwSize) - 0usize];
    ["Offset of field: _WSAQuerySet2A::lpszServiceInstanceName"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpszServiceInstanceName) - 8usize];
    ["Offset of field: _WSAQuerySet2A::lpVersion"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpVersion) - 16usize];
    ["Offset of field: _WSAQuerySet2A::lpszComment"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpszComment) - 24usize];
    ["Offset of field: _WSAQuerySet2A::dwNameSpace"]
        [::std::mem::offset_of!(_WSAQuerySet2A, dwNameSpace) - 32usize];
    ["Offset of field: _WSAQuerySet2A::lpNSProviderId"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpNSProviderId) - 40usize];
    ["Offset of field: _WSAQuerySet2A::lpszContext"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpszContext) - 48usize];
    ["Offset of field: _WSAQuerySet2A::dwNumberOfProtocols"]
        [::std::mem::offset_of!(_WSAQuerySet2A, dwNumberOfProtocols) - 56usize];
    ["Offset of field: _WSAQuerySet2A::lpafpProtocols"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpafpProtocols) - 64usize];
    ["Offset of field: _WSAQuerySet2A::lpszQueryString"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpszQueryString) - 72usize];
    ["Offset of field: _WSAQuerySet2A::dwNumberOfCsAddrs"]
        [::std::mem::offset_of!(_WSAQuerySet2A, dwNumberOfCsAddrs) - 80usize];
    ["Offset of field: _WSAQuerySet2A::lpcsaBuffer"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpcsaBuffer) - 88usize];
    ["Offset of field: _WSAQuerySet2A::dwOutputFlags"]
        [::std::mem::offset_of!(_WSAQuerySet2A, dwOutputFlags) - 96usize];
    ["Offset of field: _WSAQuerySet2A::lpBlob"]
        [::std::mem::offset_of!(_WSAQuerySet2A, lpBlob) - 104usize];
};
pub type WSAQUERYSET2A = _WSAQuerySet2A;
pub type PWSAQUERYSET2A = *mut _WSAQuerySet2A;
pub type LPWSAQUERYSET2A = *mut _WSAQuerySet2A;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAQuerySet2W {
    pub dwSize: DWORD,
    pub lpszServiceInstanceName: LPWSTR,
    pub lpVersion: LPWSAVERSION,
    pub lpszComment: LPWSTR,
    pub dwNameSpace: DWORD,
    pub lpNSProviderId: LPGUID,
    pub lpszContext: LPWSTR,
    pub dwNumberOfProtocols: DWORD,
    pub lpafpProtocols: LPAFPROTOCOLS,
    pub lpszQueryString: LPWSTR,
    pub dwNumberOfCsAddrs: DWORD,
    pub lpcsaBuffer: LPCSADDR_INFO,
    pub dwOutputFlags: DWORD,
    pub lpBlob: LPBLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAQuerySet2W"][::std::mem::size_of::<_WSAQuerySet2W>() - 112usize];
    ["Alignment of _WSAQuerySet2W"][::std::mem::align_of::<_WSAQuerySet2W>() - 8usize];
    ["Offset of field: _WSAQuerySet2W::dwSize"]
        [::std::mem::offset_of!(_WSAQuerySet2W, dwSize) - 0usize];
    ["Offset of field: _WSAQuerySet2W::lpszServiceInstanceName"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpszServiceInstanceName) - 8usize];
    ["Offset of field: _WSAQuerySet2W::lpVersion"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpVersion) - 16usize];
    ["Offset of field: _WSAQuerySet2W::lpszComment"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpszComment) - 24usize];
    ["Offset of field: _WSAQuerySet2W::dwNameSpace"]
        [::std::mem::offset_of!(_WSAQuerySet2W, dwNameSpace) - 32usize];
    ["Offset of field: _WSAQuerySet2W::lpNSProviderId"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpNSProviderId) - 40usize];
    ["Offset of field: _WSAQuerySet2W::lpszContext"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpszContext) - 48usize];
    ["Offset of field: _WSAQuerySet2W::dwNumberOfProtocols"]
        [::std::mem::offset_of!(_WSAQuerySet2W, dwNumberOfProtocols) - 56usize];
    ["Offset of field: _WSAQuerySet2W::lpafpProtocols"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpafpProtocols) - 64usize];
    ["Offset of field: _WSAQuerySet2W::lpszQueryString"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpszQueryString) - 72usize];
    ["Offset of field: _WSAQuerySet2W::dwNumberOfCsAddrs"]
        [::std::mem::offset_of!(_WSAQuerySet2W, dwNumberOfCsAddrs) - 80usize];
    ["Offset of field: _WSAQuerySet2W::lpcsaBuffer"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpcsaBuffer) - 88usize];
    ["Offset of field: _WSAQuerySet2W::dwOutputFlags"]
        [::std::mem::offset_of!(_WSAQuerySet2W, dwOutputFlags) - 96usize];
    ["Offset of field: _WSAQuerySet2W::lpBlob"]
        [::std::mem::offset_of!(_WSAQuerySet2W, lpBlob) - 104usize];
};
pub type WSAQUERYSET2W = _WSAQuerySet2W;
pub type PWSAQUERYSET2W = *mut _WSAQuerySet2W;
pub type LPWSAQUERYSET2W = *mut _WSAQuerySet2W;
pub type WSAQUERYSET = WSAQUERYSETA;
pub type PWSAQUERYSET = PWSAQUERYSETA;
pub type LPWSAQUERYSET = LPWSAQUERYSETA;
pub type WSAQUERYSET2 = WSAQUERYSET2A;
pub type PWSAQUERYSET2 = PWSAQUERYSET2A;
pub type LPWSAQUERYSET2 = LPWSAQUERYSET2A;
pub const _WSAESETSERVICEOP_RNRSERVICE_REGISTER: _WSAESETSERVICEOP = 0;
pub const _WSAESETSERVICEOP_RNRSERVICE_DEREGISTER: _WSAESETSERVICEOP = 1;
pub const _WSAESETSERVICEOP_RNRSERVICE_DELETE: _WSAESETSERVICEOP = 2;
pub type _WSAESETSERVICEOP = ::std::os::raw::c_int;
pub use self::_WSAESETSERVICEOP as WSAESETSERVICEOP;
pub type PWSAESETSERVICEOP = *mut _WSAESETSERVICEOP;
pub type LPWSAESETSERVICEOP = *mut _WSAESETSERVICEOP;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANSClassInfoA {
    pub lpszName: LPSTR,
    pub dwNameSpace: DWORD,
    pub dwValueType: DWORD,
    pub dwValueSize: DWORD,
    pub lpValue: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANSClassInfoA"][::std::mem::size_of::<_WSANSClassInfoA>() - 32usize];
    ["Alignment of _WSANSClassInfoA"][::std::mem::align_of::<_WSANSClassInfoA>() - 8usize];
    ["Offset of field: _WSANSClassInfoA::lpszName"]
        [::std::mem::offset_of!(_WSANSClassInfoA, lpszName) - 0usize];
    ["Offset of field: _WSANSClassInfoA::dwNameSpace"]
        [::std::mem::offset_of!(_WSANSClassInfoA, dwNameSpace) - 8usize];
    ["Offset of field: _WSANSClassInfoA::dwValueType"]
        [::std::mem::offset_of!(_WSANSClassInfoA, dwValueType) - 12usize];
    ["Offset of field: _WSANSClassInfoA::dwValueSize"]
        [::std::mem::offset_of!(_WSANSClassInfoA, dwValueSize) - 16usize];
    ["Offset of field: _WSANSClassInfoA::lpValue"]
        [::std::mem::offset_of!(_WSANSClassInfoA, lpValue) - 24usize];
};
pub type WSANSCLASSINFOA = _WSANSClassInfoA;
pub type PWSANSCLASSINFOA = *mut _WSANSClassInfoA;
pub type LPWSANSCLASSINFOA = *mut _WSANSClassInfoA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANSClassInfoW {
    pub lpszName: LPWSTR,
    pub dwNameSpace: DWORD,
    pub dwValueType: DWORD,
    pub dwValueSize: DWORD,
    pub lpValue: LPVOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANSClassInfoW"][::std::mem::size_of::<_WSANSClassInfoW>() - 32usize];
    ["Alignment of _WSANSClassInfoW"][::std::mem::align_of::<_WSANSClassInfoW>() - 8usize];
    ["Offset of field: _WSANSClassInfoW::lpszName"]
        [::std::mem::offset_of!(_WSANSClassInfoW, lpszName) - 0usize];
    ["Offset of field: _WSANSClassInfoW::dwNameSpace"]
        [::std::mem::offset_of!(_WSANSClassInfoW, dwNameSpace) - 8usize];
    ["Offset of field: _WSANSClassInfoW::dwValueType"]
        [::std::mem::offset_of!(_WSANSClassInfoW, dwValueType) - 12usize];
    ["Offset of field: _WSANSClassInfoW::dwValueSize"]
        [::std::mem::offset_of!(_WSANSClassInfoW, dwValueSize) - 16usize];
    ["Offset of field: _WSANSClassInfoW::lpValue"]
        [::std::mem::offset_of!(_WSANSClassInfoW, lpValue) - 24usize];
};
pub type WSANSCLASSINFOW = _WSANSClassInfoW;
pub type PWSANSCLASSINFOW = *mut _WSANSClassInfoW;
pub type LPWSANSCLASSINFOW = *mut _WSANSClassInfoW;
pub type WSANSCLASSINFO = WSANSCLASSINFOA;
pub type PWSANSCLASSINFO = PWSANSCLASSINFOA;
pub type LPWSANSCLASSINFO = LPWSANSCLASSINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAServiceClassInfoA {
    pub lpServiceClassId: LPGUID,
    pub lpszServiceClassName: LPSTR,
    pub dwCount: DWORD,
    pub lpClassInfos: LPWSANSCLASSINFOA,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAServiceClassInfoA"][::std::mem::size_of::<_WSAServiceClassInfoA>() - 32usize];
    ["Alignment of _WSAServiceClassInfoA"]
        [::std::mem::align_of::<_WSAServiceClassInfoA>() - 8usize];
    ["Offset of field: _WSAServiceClassInfoA::lpServiceClassId"]
        [::std::mem::offset_of!(_WSAServiceClassInfoA, lpServiceClassId) - 0usize];
    ["Offset of field: _WSAServiceClassInfoA::lpszServiceClassName"]
        [::std::mem::offset_of!(_WSAServiceClassInfoA, lpszServiceClassName) - 8usize];
    ["Offset of field: _WSAServiceClassInfoA::dwCount"]
        [::std::mem::offset_of!(_WSAServiceClassInfoA, dwCount) - 16usize];
    ["Offset of field: _WSAServiceClassInfoA::lpClassInfos"]
        [::std::mem::offset_of!(_WSAServiceClassInfoA, lpClassInfos) - 24usize];
};
pub type WSASERVICECLASSINFOA = _WSAServiceClassInfoA;
pub type PWSASERVICECLASSINFOA = *mut _WSAServiceClassInfoA;
pub type LPWSASERVICECLASSINFOA = *mut _WSAServiceClassInfoA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSAServiceClassInfoW {
    pub lpServiceClassId: LPGUID,
    pub lpszServiceClassName: LPWSTR,
    pub dwCount: DWORD,
    pub lpClassInfos: LPWSANSCLASSINFOW,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSAServiceClassInfoW"][::std::mem::size_of::<_WSAServiceClassInfoW>() - 32usize];
    ["Alignment of _WSAServiceClassInfoW"]
        [::std::mem::align_of::<_WSAServiceClassInfoW>() - 8usize];
    ["Offset of field: _WSAServiceClassInfoW::lpServiceClassId"]
        [::std::mem::offset_of!(_WSAServiceClassInfoW, lpServiceClassId) - 0usize];
    ["Offset of field: _WSAServiceClassInfoW::lpszServiceClassName"]
        [::std::mem::offset_of!(_WSAServiceClassInfoW, lpszServiceClassName) - 8usize];
    ["Offset of field: _WSAServiceClassInfoW::dwCount"]
        [::std::mem::offset_of!(_WSAServiceClassInfoW, dwCount) - 16usize];
    ["Offset of field: _WSAServiceClassInfoW::lpClassInfos"]
        [::std::mem::offset_of!(_WSAServiceClassInfoW, lpClassInfos) - 24usize];
};
pub type WSASERVICECLASSINFOW = _WSAServiceClassInfoW;
pub type PWSASERVICECLASSINFOW = *mut _WSAServiceClassInfoW;
pub type LPWSASERVICECLASSINFOW = *mut _WSAServiceClassInfoW;
pub type WSASERVICECLASSINFO = WSASERVICECLASSINFOA;
pub type PWSASERVICECLASSINFO = PWSASERVICECLASSINFOA;
pub type LPWSASERVICECLASSINFO = LPWSASERVICECLASSINFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANAMESPACE_INFOA {
    pub NSProviderId: GUID,
    pub dwNameSpace: DWORD,
    pub fActive: BOOL,
    pub dwVersion: DWORD,
    pub lpszIdentifier: LPSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANAMESPACE_INFOA"][::std::mem::size_of::<_WSANAMESPACE_INFOA>() - 40usize];
    ["Alignment of _WSANAMESPACE_INFOA"][::std::mem::align_of::<_WSANAMESPACE_INFOA>() - 8usize];
    ["Offset of field: _WSANAMESPACE_INFOA::NSProviderId"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOA, NSProviderId) - 0usize];
    ["Offset of field: _WSANAMESPACE_INFOA::dwNameSpace"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOA, dwNameSpace) - 16usize];
    ["Offset of field: _WSANAMESPACE_INFOA::fActive"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOA, fActive) - 20usize];
    ["Offset of field: _WSANAMESPACE_INFOA::dwVersion"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOA, dwVersion) - 24usize];
    ["Offset of field: _WSANAMESPACE_INFOA::lpszIdentifier"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOA, lpszIdentifier) - 32usize];
};
pub type WSANAMESPACE_INFOA = _WSANAMESPACE_INFOA;
pub type PWSANAMESPACE_INFOA = *mut _WSANAMESPACE_INFOA;
pub type LPWSANAMESPACE_INFOA = *mut _WSANAMESPACE_INFOA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANAMESPACE_INFOW {
    pub NSProviderId: GUID,
    pub dwNameSpace: DWORD,
    pub fActive: BOOL,
    pub dwVersion: DWORD,
    pub lpszIdentifier: LPWSTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANAMESPACE_INFOW"][::std::mem::size_of::<_WSANAMESPACE_INFOW>() - 40usize];
    ["Alignment of _WSANAMESPACE_INFOW"][::std::mem::align_of::<_WSANAMESPACE_INFOW>() - 8usize];
    ["Offset of field: _WSANAMESPACE_INFOW::NSProviderId"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOW, NSProviderId) - 0usize];
    ["Offset of field: _WSANAMESPACE_INFOW::dwNameSpace"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOW, dwNameSpace) - 16usize];
    ["Offset of field: _WSANAMESPACE_INFOW::fActive"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOW, fActive) - 20usize];
    ["Offset of field: _WSANAMESPACE_INFOW::dwVersion"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOW, dwVersion) - 24usize];
    ["Offset of field: _WSANAMESPACE_INFOW::lpszIdentifier"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOW, lpszIdentifier) - 32usize];
};
pub type WSANAMESPACE_INFOW = _WSANAMESPACE_INFOW;
pub type PWSANAMESPACE_INFOW = *mut _WSANAMESPACE_INFOW;
pub type LPWSANAMESPACE_INFOW = *mut _WSANAMESPACE_INFOW;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANAMESPACE_INFOEXA {
    pub NSProviderId: GUID,
    pub dwNameSpace: DWORD,
    pub fActive: BOOL,
    pub dwVersion: DWORD,
    pub lpszIdentifier: LPSTR,
    pub ProviderSpecific: BLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANAMESPACE_INFOEXA"][::std::mem::size_of::<_WSANAMESPACE_INFOEXA>() - 56usize];
    ["Alignment of _WSANAMESPACE_INFOEXA"]
        [::std::mem::align_of::<_WSANAMESPACE_INFOEXA>() - 8usize];
    ["Offset of field: _WSANAMESPACE_INFOEXA::NSProviderId"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXA, NSProviderId) - 0usize];
    ["Offset of field: _WSANAMESPACE_INFOEXA::dwNameSpace"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXA, dwNameSpace) - 16usize];
    ["Offset of field: _WSANAMESPACE_INFOEXA::fActive"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXA, fActive) - 20usize];
    ["Offset of field: _WSANAMESPACE_INFOEXA::dwVersion"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXA, dwVersion) - 24usize];
    ["Offset of field: _WSANAMESPACE_INFOEXA::lpszIdentifier"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXA, lpszIdentifier) - 32usize];
    ["Offset of field: _WSANAMESPACE_INFOEXA::ProviderSpecific"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXA, ProviderSpecific) - 40usize];
};
pub type WSANAMESPACE_INFOEXA = _WSANAMESPACE_INFOEXA;
pub type PWSANAMESPACE_INFOEXA = *mut _WSANAMESPACE_INFOEXA;
pub type LPWSANAMESPACE_INFOEXA = *mut _WSANAMESPACE_INFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WSANAMESPACE_INFOEXW {
    pub NSProviderId: GUID,
    pub dwNameSpace: DWORD,
    pub fActive: BOOL,
    pub dwVersion: DWORD,
    pub lpszIdentifier: LPWSTR,
    pub ProviderSpecific: BLOB,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _WSANAMESPACE_INFOEXW"][::std::mem::size_of::<_WSANAMESPACE_INFOEXW>() - 56usize];
    ["Alignment of _WSANAMESPACE_INFOEXW"]
        [::std::mem::align_of::<_WSANAMESPACE_INFOEXW>() - 8usize];
    ["Offset of field: _WSANAMESPACE_INFOEXW::NSProviderId"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXW, NSProviderId) - 0usize];
    ["Offset of field: _WSANAMESPACE_INFOEXW::dwNameSpace"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXW, dwNameSpace) - 16usize];
    ["Offset of field: _WSANAMESPACE_INFOEXW::fActive"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXW, fActive) - 20usize];
    ["Offset of field: _WSANAMESPACE_INFOEXW::dwVersion"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXW, dwVersion) - 24usize];
    ["Offset of field: _WSANAMESPACE_INFOEXW::lpszIdentifier"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXW, lpszIdentifier) - 32usize];
    ["Offset of field: _WSANAMESPACE_INFOEXW::ProviderSpecific"]
        [::std::mem::offset_of!(_WSANAMESPACE_INFOEXW, ProviderSpecific) - 40usize];
};
pub type WSANAMESPACE_INFOEXW = _WSANAMESPACE_INFOEXW;
pub type PWSANAMESPACE_INFOEXW = *mut _WSANAMESPACE_INFOEXW;
pub type LPWSANAMESPACE_INFOEXW = *mut _WSANAMESPACE_INFOEXW;
pub type WSANAMESPACE_INFO = WSANAMESPACE_INFOA;
pub type PWSANAMESPACE_INFO = PWSANAMESPACE_INFOA;
pub type LPWSANAMESPACE_INFO = LPWSANAMESPACE_INFOA;
pub type WSANAMESPACE_INFOEX = WSANAMESPACE_INFOEXA;
pub type PWSANAMESPACE_INFOEX = PWSANAMESPACE_INFOEXA;
pub type LPWSANAMESPACE_INFOEX = LPWSANAMESPACE_INFOEXA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pollfd {
    pub fd: SOCKET,
    pub events: SHORT,
    pub revents: SHORT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pollfd"][::std::mem::size_of::<pollfd>() - 16usize];
    ["Alignment of pollfd"][::std::mem::align_of::<pollfd>() - 8usize];
    ["Offset of field: pollfd::fd"][::std::mem::offset_of!(pollfd, fd) - 0usize];
    ["Offset of field: pollfd::events"][::std::mem::offset_of!(pollfd, events) - 8usize];
    ["Offset of field: pollfd::revents"][::std::mem::offset_of!(pollfd, revents) - 10usize];
};
pub type WSAPOLLFD = pollfd;
pub type PWSAPOLLFD = *mut pollfd;
pub type LPWSAPOLLFD = *mut pollfd;
unsafe extern "C" {
    pub fn accept(s: SOCKET, addr: *mut sockaddr, addrlen: *mut ::std::os::raw::c_int) -> SOCKET;
}
unsafe extern "C" {
    pub fn bind(
        s: SOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn closesocket(s: SOCKET) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        s: SOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ioctlsocket(
        s: SOCKET,
        cmd: ::std::os::raw::c_long,
        argp: *mut u_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        s: SOCKET,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        s: SOCKET,
        name: *mut sockaddr,
        namelen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockopt(
        s: SOCKET,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *mut ::std::os::raw::c_char,
        optlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn htonl(hostlong: u_long) -> u_long;
}
unsafe extern "C" {
    pub fn htons(hostshort: u_short) -> u_short;
}
unsafe extern "C" {
    pub fn inet_addr(cp: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn inet_ntoa(in_: in_addr) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn listen(s: SOCKET, backlog: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ntohl(netlong: u_long) -> u_long;
}
unsafe extern "C" {
    pub fn ntohs(netshort: u_short) -> u_short;
}
unsafe extern "C" {
    pub fn recv(
        s: SOCKET,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn recvfrom(
        s: SOCKET,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        from: *mut sockaddr,
        fromlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn select(
        nfds: ::std::os::raw::c_int,
        readfds: *mut fd_set,
        writefds: *mut fd_set,
        exceptfds: *mut fd_set,
        timeout: *const timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn send(
        s: SOCKET,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sendto(
        s: SOCKET,
        buf: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        to: *const sockaddr,
        tolen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        s: SOCKET,
        level: ::std::os::raw::c_int,
        optname: ::std::os::raw::c_int,
        optval: *const ::std::os::raw::c_char,
        optlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(s: SOCKET, how: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socket(
        af: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
    ) -> SOCKET;
}
unsafe extern "C" {
    pub fn gethostbyaddr(
        addr: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
unsafe extern "C" {
    pub fn gethostbyname(name: *const ::std::os::raw::c_char) -> *mut hostent;
}
unsafe extern "C" {
    pub fn gethostname(
        name: *mut ::std::os::raw::c_char,
        namelen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GetHostNameW(name: PWSTR, namelen: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getservbyport(
        port: ::std::os::raw::c_int,
        proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
unsafe extern "C" {
    pub fn getservbyname(
        name: *const ::std::os::raw::c_char,
        proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
unsafe extern "C" {
    pub fn getprotobynumber(number: ::std::os::raw::c_int) -> *mut protoent;
}
unsafe extern "C" {
    pub fn getprotobyname(name: *const ::std::os::raw::c_char) -> *mut protoent;
}
unsafe extern "C" {
    pub fn WSAStartup(wVersionRequested: WORD, lpWSAData: LPWSADATA) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSACleanup() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSASetLastError(iError: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn WSAGetLastError() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAIsBlocking() -> BOOL;
}
unsafe extern "C" {
    pub fn WSAUnhookBlockingHook() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSASetBlockingHook(lpBlockFunc: FARPROC) -> FARPROC;
}
unsafe extern "C" {
    pub fn WSACancelBlockingCall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAAsyncGetServByName(
        hWnd: HWND,
        wMsg: u_int,
        name: *const ::std::os::raw::c_char,
        proto: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WSAAsyncGetServByPort(
        hWnd: HWND,
        wMsg: u_int,
        port: ::std::os::raw::c_int,
        proto: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WSAAsyncGetProtoByName(
        hWnd: HWND,
        wMsg: u_int,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WSAAsyncGetProtoByNumber(
        hWnd: HWND,
        wMsg: u_int,
        number: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WSAAsyncGetHostByName(
        hWnd: HWND,
        wMsg: u_int,
        name: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WSAAsyncGetHostByAddr(
        hWnd: HWND,
        wMsg: u_int,
        addr: *const ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
    ) -> HANDLE;
}
unsafe extern "C" {
    pub fn WSACancelAsyncRequest(hAsyncTaskHandle: HANDLE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAAsyncSelect(
        s: SOCKET,
        hWnd: HWND,
        wMsg: u_int,
        lEvent: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAAccept(
        s: SOCKET,
        addr: *mut sockaddr,
        addrlen: LPINT,
        lpfnCondition: LPCONDITIONPROC,
        dwCallbackData: DWORD_PTR,
    ) -> SOCKET;
}
unsafe extern "C" {
    pub fn WSACloseEvent(hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn WSAConnect(
        s: SOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
        lpCallerData: LPWSABUF,
        lpCalleeData: LPWSABUF,
        lpSQOS: LPQOS,
        lpGQOS: LPQOS,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAConnectByNameW(
        s: SOCKET,
        nodename: LPWSTR,
        servicename: LPWSTR,
        LocalAddressLength: LPDWORD,
        LocalAddress: LPSOCKADDR,
        RemoteAddressLength: LPDWORD,
        RemoteAddress: LPSOCKADDR,
        timeout: *const timeval,
        Reserved: LPWSAOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WSAConnectByNameA(
        s: SOCKET,
        nodename: LPCSTR,
        servicename: LPCSTR,
        LocalAddressLength: LPDWORD,
        LocalAddress: LPSOCKADDR,
        RemoteAddressLength: LPDWORD,
        RemoteAddress: LPSOCKADDR,
        timeout: *const timeval,
        Reserved: LPWSAOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WSAConnectByList(
        s: SOCKET,
        SocketAddress: PSOCKET_ADDRESS_LIST,
        LocalAddressLength: LPDWORD,
        LocalAddress: LPSOCKADDR,
        RemoteAddressLength: LPDWORD,
        RemoteAddress: LPSOCKADDR,
        timeout: *const timeval,
        Reserved: LPWSAOVERLAPPED,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WSACreateEvent() -> HANDLE;
}
unsafe extern "C" {
    pub fn WSADuplicateSocketA(
        s: SOCKET,
        dwProcessId: DWORD,
        lpProtocolInfo: LPWSAPROTOCOL_INFOA,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSADuplicateSocketW(
        s: SOCKET,
        dwProcessId: DWORD,
        lpProtocolInfo: LPWSAPROTOCOL_INFOW,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAEnumNetworkEvents(
        s: SOCKET,
        hEventObject: HANDLE,
        lpNetworkEvents: LPWSANETWORKEVENTS,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAEnumProtocolsA(
        lpiProtocols: LPINT,
        lpProtocolBuffer: LPWSAPROTOCOL_INFOA,
        lpdwBufferLength: LPDWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAEnumProtocolsW(
        lpiProtocols: LPINT,
        lpProtocolBuffer: LPWSAPROTOCOL_INFOW,
        lpdwBufferLength: LPDWORD,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAEventSelect(
        s: SOCKET,
        hEventObject: HANDLE,
        lNetworkEvents: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAGetOverlappedResult(
        s: SOCKET,
        lpOverlapped: LPWSAOVERLAPPED,
        lpcbTransfer: LPDWORD,
        fWait: BOOL,
        lpdwFlags: LPDWORD,
    ) -> BOOL;
}
unsafe extern "C" {
    pub fn WSAGetQOSByName(s: SOCKET, lpQOSName: LPWSABUF, lpQOS: LPQOS) -> BOOL;
}
unsafe extern "C" {
    pub fn WSAHtonl(s: SOCKET, hostlong: u_long, lpnetlong: *mut u_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAHtons(
        s: SOCKET,
        hostshort: u_short,
        lpnetshort: *mut u_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAIoctl(
        s: SOCKET,
        dwIoControlCode: DWORD,
        lpvInBuffer: LPVOID,
        cbInBuffer: DWORD,
        lpvOutBuffer: LPVOID,
        cbOutBuffer: DWORD,
        lpcbBytesReturned: LPDWORD,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAJoinLeaf(
        s: SOCKET,
        name: *const sockaddr,
        namelen: ::std::os::raw::c_int,
        lpCallerData: LPWSABUF,
        lpCalleeData: LPWSABUF,
        lpSQOS: LPQOS,
        lpGQOS: LPQOS,
        dwFlags: DWORD,
    ) -> SOCKET;
}
unsafe extern "C" {
    pub fn WSANtohl(s: SOCKET, netlong: u_long, lphostlong: *mut u_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSANtohs(
        s: SOCKET,
        netshort: u_short,
        lphostshort: *mut u_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSARecv(
        s: SOCKET,
        lpBuffers: LPWSABUF,
        dwBufferCount: DWORD,
        lpNumberOfBytesRecvd: LPDWORD,
        lpFlags: LPDWORD,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSARecvDisconnect(s: SOCKET, lpInboundDisconnectData: LPWSABUF)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSARecvFrom(
        s: SOCKET,
        lpBuffers: LPWSABUF,
        dwBufferCount: DWORD,
        lpNumberOfBytesRecvd: LPDWORD,
        lpFlags: LPDWORD,
        lpFrom: *mut sockaddr,
        lpFromlen: LPINT,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSAResetEvent(hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn WSASend(
        s: SOCKET,
        lpBuffers: LPWSABUF,
        dwBufferCount: DWORD,
        lpNumberOfBytesSent: LPDWORD,
        dwFlags: DWORD,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSASendMsg(
        Handle: SOCKET,
        lpMsg: LPWSAMSG,
        dwFlags: DWORD,
        lpNumberOfBytesSent: LPDWORD,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSASendDisconnect(
        s: SOCKET,
        lpOutboundDisconnectData: LPWSABUF,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSASendTo(
        s: SOCKET,
        lpBuffers: LPWSABUF,
        dwBufferCount: DWORD,
        lpNumberOfBytesSent: LPDWORD,
        dwFlags: DWORD,
        lpTo: *const sockaddr,
        iTolen: ::std::os::raw::c_int,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WSASetEvent(hEvent: HANDLE) -> BOOL;
}
unsafe extern "C" {
    pub fn WSASocketA(
        af: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        lpProtocolInfo: LPWSAPROTOCOL_INFOA,
        g: GROUP,
        dwFlags: DWORD,
    ) -> SOCKET;
}
unsafe extern "C" {
    pub fn WSASocketW(
        af: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        lpProtocolInfo: LPWSAPROTOCOL_INFOW,
        g: GROUP,
        dwFlags: DWORD,
    ) -> SOCKET;
}
unsafe extern "C" {
    pub fn WSAWaitForMultipleEvents(
        cEvents: DWORD,
        lphEvents: *const HANDLE,
        fWaitAll: BOOL,
        dwTimeout: DWORD,
        fAlertable: BOOL,
    ) -> DWORD;
}
unsafe extern "C" {
    pub fn WSAAddressToStringA(
        lpsaAddress: LPSOCKADDR,
        dwAddressLength: DWORD,
        lpProtocolInfo: LPWSAPROTOCOL_INFOA,
        lpszAddressString: LPSTR,
        lpdwAddressStringLength: LPDWORD,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAAddressToStringW(
        lpsaAddress: LPSOCKADDR,
        dwAddressLength: DWORD,
        lpProtocolInfo: LPWSAPROTOCOL_INFOW,
        lpszAddressString: LPWSTR,
        lpdwAddressStringLength: LPDWORD,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAStringToAddressA(
        AddressString: LPSTR,
        AddressFamily: INT,
        lpProtocolInfo: LPWSAPROTOCOL_INFOA,
        lpAddress: LPSOCKADDR,
        lpAddressLength: LPINT,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAStringToAddressW(
        AddressString: LPWSTR,
        AddressFamily: INT,
        lpProtocolInfo: LPWSAPROTOCOL_INFOW,
        lpAddress: LPSOCKADDR,
        lpAddressLength: LPINT,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSALookupServiceBeginA(
        lpqsRestrictions: LPWSAQUERYSETA,
        dwControlFlags: DWORD,
        lphLookup: LPHANDLE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSALookupServiceBeginW(
        lpqsRestrictions: LPWSAQUERYSETW,
        dwControlFlags: DWORD,
        lphLookup: LPHANDLE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSALookupServiceNextA(
        hLookup: HANDLE,
        dwControlFlags: DWORD,
        lpdwBufferLength: LPDWORD,
        lpqsResults: LPWSAQUERYSETA,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSALookupServiceNextW(
        hLookup: HANDLE,
        dwControlFlags: DWORD,
        lpdwBufferLength: LPDWORD,
        lpqsResults: LPWSAQUERYSETW,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSANSPIoctl(
        hLookup: HANDLE,
        dwControlCode: DWORD,
        lpvInBuffer: LPVOID,
        cbInBuffer: DWORD,
        lpvOutBuffer: LPVOID,
        cbOutBuffer: DWORD,
        lpcbBytesReturned: LPDWORD,
        lpCompletion: LPWSACOMPLETION,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSALookupServiceEnd(hLookup: HANDLE) -> INT;
}
unsafe extern "C" {
    pub fn WSAInstallServiceClassA(lpServiceClassInfo: LPWSASERVICECLASSINFOA) -> INT;
}
unsafe extern "C" {
    pub fn WSAInstallServiceClassW(lpServiceClassInfo: LPWSASERVICECLASSINFOW) -> INT;
}
unsafe extern "C" {
    pub fn WSARemoveServiceClass(lpServiceClassId: LPGUID) -> INT;
}
unsafe extern "C" {
    pub fn WSAGetServiceClassInfoA(
        lpProviderId: LPGUID,
        lpServiceClassId: LPGUID,
        lpdwBufSize: LPDWORD,
        lpServiceClassInfo: LPWSASERVICECLASSINFOA,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAGetServiceClassInfoW(
        lpProviderId: LPGUID,
        lpServiceClassId: LPGUID,
        lpdwBufSize: LPDWORD,
        lpServiceClassInfo: LPWSASERVICECLASSINFOW,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAEnumNameSpaceProvidersA(
        lpdwBufferLength: LPDWORD,
        lpnspBuffer: LPWSANAMESPACE_INFOA,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAEnumNameSpaceProvidersW(
        lpdwBufferLength: LPDWORD,
        lpnspBuffer: LPWSANAMESPACE_INFOW,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAEnumNameSpaceProvidersExA(
        lpdwBufferLength: LPDWORD,
        lpnspBuffer: LPWSANAMESPACE_INFOEXA,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAEnumNameSpaceProvidersExW(
        lpdwBufferLength: LPDWORD,
        lpnspBuffer: LPWSANAMESPACE_INFOEXW,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAGetServiceClassNameByClassIdA(
        lpServiceClassId: LPGUID,
        lpszServiceClassName: LPSTR,
        lpdwBufferLength: LPDWORD,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAGetServiceClassNameByClassIdW(
        lpServiceClassId: LPGUID,
        lpszServiceClassName: LPWSTR,
        lpdwBufferLength: LPDWORD,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSASetServiceA(
        lpqsRegInfo: LPWSAQUERYSETA,
        essoperation: WSAESETSERVICEOP,
        dwControlFlags: DWORD,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSASetServiceW(
        lpqsRegInfo: LPWSAQUERYSETW,
        essoperation: WSAESETSERVICEOP,
        dwControlFlags: DWORD,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAProviderConfigChange(
        lpNotificationHandle: LPHANDLE,
        lpOverlapped: LPWSAOVERLAPPED,
        lpCompletionRoutine: LPWSAOVERLAPPED_COMPLETION_ROUTINE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn WSAPoll(fdArray: LPWSAPOLLFD, fds: ULONG, timeout: INT) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SOCK_NOTIFY_REGISTRATION {
    pub socket: SOCKET,
    pub completionKey: PVOID,
    pub eventFilter: UINT16,
    pub operation: UINT8,
    pub triggerFlags: UINT8,
    pub registrationResult: DWORD,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SOCK_NOTIFY_REGISTRATION"]
        [::std::mem::size_of::<SOCK_NOTIFY_REGISTRATION>() - 24usize];
    ["Alignment of SOCK_NOTIFY_REGISTRATION"]
        [::std::mem::align_of::<SOCK_NOTIFY_REGISTRATION>() - 8usize];
    ["Offset of field: SOCK_NOTIFY_REGISTRATION::socket"]
        [::std::mem::offset_of!(SOCK_NOTIFY_REGISTRATION, socket) - 0usize];
    ["Offset of field: SOCK_NOTIFY_REGISTRATION::completionKey"]
        [::std::mem::offset_of!(SOCK_NOTIFY_REGISTRATION, completionKey) - 8usize];
    ["Offset of field: SOCK_NOTIFY_REGISTRATION::eventFilter"]
        [::std::mem::offset_of!(SOCK_NOTIFY_REGISTRATION, eventFilter) - 16usize];
    ["Offset of field: SOCK_NOTIFY_REGISTRATION::operation"]
        [::std::mem::offset_of!(SOCK_NOTIFY_REGISTRATION, operation) - 18usize];
    ["Offset of field: SOCK_NOTIFY_REGISTRATION::triggerFlags"]
        [::std::mem::offset_of!(SOCK_NOTIFY_REGISTRATION, triggerFlags) - 19usize];
    ["Offset of field: SOCK_NOTIFY_REGISTRATION::registrationResult"]
        [::std::mem::offset_of!(SOCK_NOTIFY_REGISTRATION, registrationResult) - 20usize];
};
unsafe extern "C" {
    pub fn ProcessSocketNotifications(
        completionPort: HANDLE,
        registrationCount: UINT32,
        registrationInfos: *mut SOCK_NOTIFY_REGISTRATION,
        timeoutMs: UINT32,
        completionCount: ULONG,
        completionPortEntries: *mut OVERLAPPED_ENTRY,
        receivedEntryCount: *mut UINT32,
    ) -> DWORD;
}
pub type LPSOCKADDR_IN = *mut sockaddr_in;
pub type LINGER = linger;
pub type PLINGER = *mut linger;
pub type LPLINGER = *mut linger;
pub type FD_SET = fd_set;
pub type PFD_SET = *mut fd_set;
pub type LPFD_SET = *mut fd_set;
pub type HOSTENT = hostent;
pub type PHOSTENT = *mut hostent;
pub type LPHOSTENT = *mut hostent;
pub type SERVENT = servent;
pub type PSERVENT = *mut servent;
pub type LPSERVENT = *mut servent;
pub type PROTOENT = protoent;
pub type PPROTOENT = *mut protoent;
pub type LPPROTOENT = *mut protoent;
pub type TIMEVAL = timeval;
pub type PTIMEVAL = *mut timeval;
pub type LPTIMEVAL = *mut timeval;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 36usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 4usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
};
unsafe extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: usize, _Tm: *const tm) -> errno_t;
}
unsafe extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type clock_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec32 {
    pub tv_sec: __time32_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _timespec32"][::std::mem::size_of::<_timespec32>() - 8usize];
    ["Alignment of _timespec32"][::std::mem::align_of::<_timespec32>() - 4usize];
    ["Offset of field: _timespec32::tv_sec"][::std::mem::offset_of!(_timespec32, tv_sec) - 0usize];
    ["Offset of field: _timespec32::tv_nsec"]
        [::std::mem::offset_of!(_timespec32, tv_nsec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _timespec64 {
    pub tv_sec: __time64_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _timespec64"][::std::mem::size_of::<_timespec64>() - 16usize];
    ["Alignment of _timespec64"][::std::mem::align_of::<_timespec64>() - 8usize];
    ["Offset of field: _timespec64::tv_sec"][::std::mem::offset_of!(_timespec64, tv_sec) - 0usize];
    ["Offset of field: _timespec64::tv_nsec"]
        [::std::mem::offset_of!(_timespec64, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
unsafe extern "C" {
    pub fn __daylight() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __dstbias() -> *mut ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __timezone() -> *mut ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn __tzname() -> *mut *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _get_daylight(_Daylight: *mut ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_dstbias(_DaylightSavingsBias: *mut ::std::os::raw::c_long) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_timezone(_TimeZone: *mut ::std::os::raw::c_long) -> errno_t;
}
unsafe extern "C" {
    pub fn _get_tzname(
        _ReturnValue: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Index: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn asctime(_Tm: *const tm) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn asctime_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Tm: *const tm,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn clock() -> clock_t;
}
unsafe extern "C" {
    pub fn _ctime32(_Time: *const __time32_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ctime32_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _ctime64(_Time: *const __time64_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _ctime64_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _difftime32(_Time1: __time32_t, _Time2: __time32_t) -> f64;
}
unsafe extern "C" {
    pub fn _difftime64(_Time1: __time64_t, _Time2: __time64_t) -> f64;
}
unsafe extern "C" {
    pub fn _gmtime32(_Time: *const __time32_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn _gmtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _gmtime64(_Time: *const __time64_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn _gmtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _localtime32(_Time: *const __time32_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn _localtime32_s(_Tm: *mut tm, _Time: *const __time32_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _localtime64(_Time: *const __time64_t) -> *mut tm;
}
unsafe extern "C" {
    pub fn _localtime64_s(_Tm: *mut tm, _Time: *const __time64_t) -> errno_t;
}
unsafe extern "C" {
    pub fn _mkgmtime32(_Tm: *mut tm) -> __time32_t;
}
unsafe extern "C" {
    pub fn _mkgmtime64(_Tm: *mut tm) -> __time64_t;
}
unsafe extern "C" {
    pub fn _mktime32(_Tm: *mut tm) -> __time32_t;
}
unsafe extern "C" {
    pub fn _mktime64(_Tm: *mut tm) -> __time64_t;
}
unsafe extern "C" {
    pub fn strftime(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _strftime_l(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxSize: usize,
        _Format: *const ::std::os::raw::c_char,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _strdate_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strdate(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _strtime_s(_Buffer: *mut ::std::os::raw::c_char, _SizeInBytes: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _strtime(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _time32(_Time: *mut __time32_t) -> __time32_t;
}
unsafe extern "C" {
    pub fn _time64(_Time: *mut __time64_t) -> __time64_t;
}
unsafe extern "C" {
    pub fn _timespec32_get(
        _Ts: *mut _timespec32,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _timespec64_get(
        _Ts: *mut _timespec64,
        _Base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tzset();
}
unsafe extern "C" {
    pub fn _getsystime(_Tm: *mut tm) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn _setsystime(
        _Tm: *mut tm,
        _Milliseconds: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn tzset();
}
pub type _fsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata32_t"][::std::mem::size_of::<_wfinddata32_t>() - 540usize];
    ["Alignment of _wfinddata32_t"][::std::mem::align_of::<_wfinddata32_t>() - 4usize];
    ["Offset of field: _wfinddata32_t::attrib"]
        [::std::mem::offset_of!(_wfinddata32_t, attrib) - 0usize];
    ["Offset of field: _wfinddata32_t::time_create"]
        [::std::mem::offset_of!(_wfinddata32_t, time_create) - 4usize];
    ["Offset of field: _wfinddata32_t::time_access"]
        [::std::mem::offset_of!(_wfinddata32_t, time_access) - 8usize];
    ["Offset of field: _wfinddata32_t::time_write"]
        [::std::mem::offset_of!(_wfinddata32_t, time_write) - 12usize];
    ["Offset of field: _wfinddata32_t::size"]
        [::std::mem::offset_of!(_wfinddata32_t, size) - 16usize];
    ["Offset of field: _wfinddata32_t::name"]
        [::std::mem::offset_of!(_wfinddata32_t, name) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata32i64_t"][::std::mem::size_of::<_wfinddata32i64_t>() - 544usize];
    ["Alignment of _wfinddata32i64_t"][::std::mem::align_of::<_wfinddata32i64_t>() - 8usize];
    ["Offset of field: _wfinddata32i64_t::attrib"]
        [::std::mem::offset_of!(_wfinddata32i64_t, attrib) - 0usize];
    ["Offset of field: _wfinddata32i64_t::time_create"]
        [::std::mem::offset_of!(_wfinddata32i64_t, time_create) - 4usize];
    ["Offset of field: _wfinddata32i64_t::time_access"]
        [::std::mem::offset_of!(_wfinddata32i64_t, time_access) - 8usize];
    ["Offset of field: _wfinddata32i64_t::time_write"]
        [::std::mem::offset_of!(_wfinddata32i64_t, time_write) - 12usize];
    ["Offset of field: _wfinddata32i64_t::size"]
        [::std::mem::offset_of!(_wfinddata32i64_t, size) - 16usize];
    ["Offset of field: _wfinddata32i64_t::name"]
        [::std::mem::offset_of!(_wfinddata32i64_t, name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata64i32_t"][::std::mem::size_of::<_wfinddata64i32_t>() - 560usize];
    ["Alignment of _wfinddata64i32_t"][::std::mem::align_of::<_wfinddata64i32_t>() - 8usize];
    ["Offset of field: _wfinddata64i32_t::attrib"]
        [::std::mem::offset_of!(_wfinddata64i32_t, attrib) - 0usize];
    ["Offset of field: _wfinddata64i32_t::time_create"]
        [::std::mem::offset_of!(_wfinddata64i32_t, time_create) - 8usize];
    ["Offset of field: _wfinddata64i32_t::time_access"]
        [::std::mem::offset_of!(_wfinddata64i32_t, time_access) - 16usize];
    ["Offset of field: _wfinddata64i32_t::time_write"]
        [::std::mem::offset_of!(_wfinddata64i32_t, time_write) - 24usize];
    ["Offset of field: _wfinddata64i32_t::size"]
        [::std::mem::offset_of!(_wfinddata64i32_t, size) - 32usize];
    ["Offset of field: _wfinddata64i32_t::name"]
        [::std::mem::offset_of!(_wfinddata64i32_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _wfinddata64_t"][::std::mem::size_of::<_wfinddata64_t>() - 560usize];
    ["Alignment of _wfinddata64_t"][::std::mem::align_of::<_wfinddata64_t>() - 8usize];
    ["Offset of field: _wfinddata64_t::attrib"]
        [::std::mem::offset_of!(_wfinddata64_t, attrib) - 0usize];
    ["Offset of field: _wfinddata64_t::time_create"]
        [::std::mem::offset_of!(_wfinddata64_t, time_create) - 8usize];
    ["Offset of field: _wfinddata64_t::time_access"]
        [::std::mem::offset_of!(_wfinddata64_t, time_access) - 16usize];
    ["Offset of field: _wfinddata64_t::time_write"]
        [::std::mem::offset_of!(_wfinddata64_t, time_write) - 24usize];
    ["Offset of field: _wfinddata64_t::size"]
        [::std::mem::offset_of!(_wfinddata64_t, size) - 32usize];
    ["Offset of field: _wfinddata64_t::name"]
        [::std::mem::offset_of!(_wfinddata64_t, name) - 40usize];
};
unsafe extern "C" {
    pub fn _waccess(
        _FileName: *const wchar_t,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _waccess_s(_FileName: *const wchar_t, _AccessMode: ::std::os::raw::c_int) -> errno_t;
}
unsafe extern "C" {
    pub fn _wchmod(
        _FileName: *const wchar_t,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wcreat(
        _FileName: *const wchar_t,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wfindfirst32(_FileName: *const wchar_t, _FindData: *mut _wfinddata32_t) -> isize;
}
unsafe extern "C" {
    pub fn _wfindnext32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wunlink(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wrename(
        _OldFileName: *const wchar_t,
        _NewFileName: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wmktemp_s(_TemplateName: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wmktemp(_TemplateName: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wfindfirst32i64(_FileName: *const wchar_t, _FindData: *mut _wfinddata32i64_t) -> isize;
}
unsafe extern "C" {
    pub fn _wfindfirst64i32(_FileName: *const wchar_t, _FindData: *mut _wfinddata64i32_t) -> isize;
}
unsafe extern "C" {
    pub fn _wfindfirst64(_FileName: *const wchar_t, _FindData: *mut _wfinddata64_t) -> isize;
}
unsafe extern "C" {
    pub fn _wfindnext32i64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wfindnext64i32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wfindnext64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wsopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionFlag: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wsopen_dispatch(
        _FileName: *const wchar_t,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wsopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _finddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _finddata32_t"][::std::mem::size_of::<_finddata32_t>() - 280usize];
    ["Alignment of _finddata32_t"][::std::mem::align_of::<_finddata32_t>() - 4usize];
    ["Offset of field: _finddata32_t::attrib"]
        [::std::mem::offset_of!(_finddata32_t, attrib) - 0usize];
    ["Offset of field: _finddata32_t::time_create"]
        [::std::mem::offset_of!(_finddata32_t, time_create) - 4usize];
    ["Offset of field: _finddata32_t::time_access"]
        [::std::mem::offset_of!(_finddata32_t, time_access) - 8usize];
    ["Offset of field: _finddata32_t::time_write"]
        [::std::mem::offset_of!(_finddata32_t, time_write) - 12usize];
    ["Offset of field: _finddata32_t::size"][::std::mem::offset_of!(_finddata32_t, size) - 16usize];
    ["Offset of field: _finddata32_t::name"][::std::mem::offset_of!(_finddata32_t, name) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _finddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _finddata32i64_t"][::std::mem::size_of::<_finddata32i64_t>() - 288usize];
    ["Alignment of _finddata32i64_t"][::std::mem::align_of::<_finddata32i64_t>() - 8usize];
    ["Offset of field: _finddata32i64_t::attrib"]
        [::std::mem::offset_of!(_finddata32i64_t, attrib) - 0usize];
    ["Offset of field: _finddata32i64_t::time_create"]
        [::std::mem::offset_of!(_finddata32i64_t, time_create) - 4usize];
    ["Offset of field: _finddata32i64_t::time_access"]
        [::std::mem::offset_of!(_finddata32i64_t, time_access) - 8usize];
    ["Offset of field: _finddata32i64_t::time_write"]
        [::std::mem::offset_of!(_finddata32i64_t, time_write) - 12usize];
    ["Offset of field: _finddata32i64_t::size"]
        [::std::mem::offset_of!(_finddata32i64_t, size) - 16usize];
    ["Offset of field: _finddata32i64_t::name"]
        [::std::mem::offset_of!(_finddata32i64_t, name) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _finddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _finddata64i32_t"][::std::mem::size_of::<_finddata64i32_t>() - 296usize];
    ["Alignment of _finddata64i32_t"][::std::mem::align_of::<_finddata64i32_t>() - 8usize];
    ["Offset of field: _finddata64i32_t::attrib"]
        [::std::mem::offset_of!(_finddata64i32_t, attrib) - 0usize];
    ["Offset of field: _finddata64i32_t::time_create"]
        [::std::mem::offset_of!(_finddata64i32_t, time_create) - 8usize];
    ["Offset of field: _finddata64i32_t::time_access"]
        [::std::mem::offset_of!(_finddata64i32_t, time_access) - 16usize];
    ["Offset of field: _finddata64i32_t::time_write"]
        [::std::mem::offset_of!(_finddata64i32_t, time_write) - 24usize];
    ["Offset of field: _finddata64i32_t::size"]
        [::std::mem::offset_of!(_finddata64i32_t, size) - 32usize];
    ["Offset of field: _finddata64i32_t::name"]
        [::std::mem::offset_of!(_finddata64i32_t, name) - 36usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __finddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [::std::os::raw::c_char; 260usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __finddata64_t"][::std::mem::size_of::<__finddata64_t>() - 304usize];
    ["Alignment of __finddata64_t"][::std::mem::align_of::<__finddata64_t>() - 8usize];
    ["Offset of field: __finddata64_t::attrib"]
        [::std::mem::offset_of!(__finddata64_t, attrib) - 0usize];
    ["Offset of field: __finddata64_t::time_create"]
        [::std::mem::offset_of!(__finddata64_t, time_create) - 8usize];
    ["Offset of field: __finddata64_t::time_access"]
        [::std::mem::offset_of!(__finddata64_t, time_access) - 16usize];
    ["Offset of field: __finddata64_t::time_write"]
        [::std::mem::offset_of!(__finddata64_t, time_write) - 24usize];
    ["Offset of field: __finddata64_t::size"]
        [::std::mem::offset_of!(__finddata64_t, size) - 32usize];
    ["Offset of field: __finddata64_t::name"]
        [::std::mem::offset_of!(__finddata64_t, name) - 40usize];
};
unsafe extern "C" {
    pub fn _access(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _access_s(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _chmod(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _chsize(
        _FileHandle: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _chsize_s(
        _FileHandle: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_longlong,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _close(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _commit(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _creat(
        _FileName: *const ::std::os::raw::c_char,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _dup(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _dup2(
        _FileHandleSrc: ::std::os::raw::c_int,
        _FileHandleDst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _eof(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _filelength(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _findfirst32(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut _finddata32_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn _findnext32(_FindHandle: isize, _FindData: *mut _finddata32_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _findclose(_FindHandle: isize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_osfhandle(_FileHandle: ::std::os::raw::c_int) -> isize;
}
unsafe extern "C" {
    pub fn _isatty(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _locking(
        _FileHandle: ::std::os::raw::c_int,
        _LockMode: ::std::os::raw::c_int,
        _NumOfBytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _lseek(
        _FileHandle: ::std::os::raw::c_int,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _mktemp_s(_TemplateName: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _mktemp(_TemplateName: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _open_osfhandle(
        _OSFileHandle: isize,
        _Flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _pipe(
        _PtHandles: *mut ::std::os::raw::c_int,
        _PipeSize: ::std::os::raw::c_uint,
        _TextMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _read(
        _FileHandle: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        _OldFilename: *const ::std::os::raw::c_char,
        _NewFilename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _setmode(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tell(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _umask(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _umask_s(
        _NewMode: ::std::os::raw::c_int,
        _OldMode: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _write(
        _FileHandle: ::std::os::raw::c_int,
        _Buf: *const ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _filelengthi64(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _findfirst32i64(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut _finddata32i64_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn _findfirst64i32(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut _finddata64i32_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn _findfirst64(
        _FileName: *const ::std::os::raw::c_char,
        _FindData: *mut __finddata64_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn _findnext32i64(
        _FindHandle: isize,
        _FindData: *mut _finddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _findnext64i32(
        _FindHandle: isize,
        _FindData: *mut _finddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _findnext64(_FindHandle: isize, _FindData: *mut __finddata64_t)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _lseeki64(
        _FileHandle: ::std::os::raw::c_int,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _telli64(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _sopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _sopen_s_nolock(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _sopen_dispatch(
        _FileName: *const ::std::os::raw::c_char,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _open(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _sopen(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn access(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chmod(
        _FileName: *const ::std::os::raw::c_char,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn chsize(
        _FileHandle: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn close(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn creat(
        _FileName: *const ::std::os::raw::c_char,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dup2(
        _FileHandleSrc: ::std::os::raw::c_int,
        _FileHandleDst: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn eof(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn filelength(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn isatty(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn locking(
        _FileHandle: ::std::os::raw::c_int,
        _LockMode: ::std::os::raw::c_int,
        _NumOfBytes: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lseek(
        _FileHandle: ::std::os::raw::c_int,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mktemp(_TemplateName: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn open(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn read(
        _FileHandle: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setmode(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sopen(
        _FileName: *const ::std::os::raw::c_char,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tell(_FileHandle: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn umask(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn write(
        _FileHandle: ::std::os::raw::c_int,
        _Buf: *const ::std::os::raw::c_void,
        _MaxCharCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub Byte: [UCHAR; 16usize],
    pub Word: [USHORT; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 2usize];
    ["Offset of field: in6_addr__bindgen_ty_1::Byte"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, Byte) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::Word"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, Word) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 2usize];
    ["Offset of field: in6_addr::u"][::std::mem::offset_of!(in6_addr, u) - 0usize];
};
pub type IN6_ADDR = in6_addr;
pub type PIN6_ADDR = *mut in6_addr;
pub type LPIN6_ADDR = *mut in6_addr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6_old {
    pub sin6_family: SHORT,
    pub sin6_port: USHORT,
    pub sin6_flowinfo: ULONG,
    pub sin6_addr: IN6_ADDR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6_old"][::std::mem::size_of::<sockaddr_in6_old>() - 24usize];
    ["Alignment of sockaddr_in6_old"][::std::mem::align_of::<sockaddr_in6_old>() - 4usize];
    ["Offset of field: sockaddr_in6_old::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6_old, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6_old::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6_old, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6_old::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6_old, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6_old::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6_old, sin6_addr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union sockaddr_gen {
    pub Address: sockaddr,
    pub AddressIn: sockaddr_in,
    pub AddressIn6: sockaddr_in6_old,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_gen"][::std::mem::size_of::<sockaddr_gen>() - 24usize];
    ["Alignment of sockaddr_gen"][::std::mem::align_of::<sockaddr_gen>() - 4usize];
    ["Offset of field: sockaddr_gen::Address"]
        [::std::mem::offset_of!(sockaddr_gen, Address) - 0usize];
    ["Offset of field: sockaddr_gen::AddressIn"]
        [::std::mem::offset_of!(sockaddr_gen, AddressIn) - 0usize];
    ["Offset of field: sockaddr_gen::AddressIn6"]
        [::std::mem::offset_of!(sockaddr_gen, AddressIn6) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _INTERFACE_INFO {
    pub iiFlags: ULONG,
    pub iiAddress: sockaddr_gen,
    pub iiBroadcastAddress: sockaddr_gen,
    pub iiNetmask: sockaddr_gen,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _INTERFACE_INFO"][::std::mem::size_of::<_INTERFACE_INFO>() - 76usize];
    ["Alignment of _INTERFACE_INFO"][::std::mem::align_of::<_INTERFACE_INFO>() - 4usize];
    ["Offset of field: _INTERFACE_INFO::iiFlags"]
        [::std::mem::offset_of!(_INTERFACE_INFO, iiFlags) - 0usize];
    ["Offset of field: _INTERFACE_INFO::iiAddress"]
        [::std::mem::offset_of!(_INTERFACE_INFO, iiAddress) - 4usize];
    ["Offset of field: _INTERFACE_INFO::iiBroadcastAddress"]
        [::std::mem::offset_of!(_INTERFACE_INFO, iiBroadcastAddress) - 28usize];
    ["Offset of field: _INTERFACE_INFO::iiNetmask"]
        [::std::mem::offset_of!(_INTERFACE_INFO, iiNetmask) - 52usize];
};
pub type INTERFACE_INFO = _INTERFACE_INFO;
pub type LPINTERFACE_INFO = *mut _INTERFACE_INFO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _INTERFACE_INFO_EX {
    pub iiFlags: ULONG,
    pub iiAddress: SOCKET_ADDRESS,
    pub iiBroadcastAddress: SOCKET_ADDRESS,
    pub iiNetmask: SOCKET_ADDRESS,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _INTERFACE_INFO_EX"][::std::mem::size_of::<_INTERFACE_INFO_EX>() - 56usize];
    ["Alignment of _INTERFACE_INFO_EX"][::std::mem::align_of::<_INTERFACE_INFO_EX>() - 8usize];
    ["Offset of field: _INTERFACE_INFO_EX::iiFlags"]
        [::std::mem::offset_of!(_INTERFACE_INFO_EX, iiFlags) - 0usize];
    ["Offset of field: _INTERFACE_INFO_EX::iiAddress"]
        [::std::mem::offset_of!(_INTERFACE_INFO_EX, iiAddress) - 8usize];
    ["Offset of field: _INTERFACE_INFO_EX::iiBroadcastAddress"]
        [::std::mem::offset_of!(_INTERFACE_INFO_EX, iiBroadcastAddress) - 24usize];
    ["Offset of field: _INTERFACE_INFO_EX::iiNetmask"]
        [::std::mem::offset_of!(_INTERFACE_INFO_EX, iiNetmask) - 40usize];
};
pub type INTERFACE_INFO_EX = _INTERFACE_INFO_EX;
pub type LPINTERFACE_INFO_EX = *mut _INTERFACE_INFO_EX;
pub const _PMTUD_STATE_IP_PMTUDISC_NOT_SET: _PMTUD_STATE = 0;
pub const _PMTUD_STATE_IP_PMTUDISC_DO: _PMTUD_STATE = 1;
pub const _PMTUD_STATE_IP_PMTUDISC_DONT: _PMTUD_STATE = 2;
pub const _PMTUD_STATE_IP_PMTUDISC_PROBE: _PMTUD_STATE = 3;
pub const _PMTUD_STATE_IP_PMTUDISC_MAX: _PMTUD_STATE = 4;
pub type _PMTUD_STATE = ::std::os::raw::c_int;
pub use self::_PMTUD_STATE as PMTUD_STATE;
pub type PPMTUD_STATE = *mut _PMTUD_STATE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: ADDRESS_FAMILY,
    pub sin6_port: USHORT,
    pub sin6_flowinfo: ULONG,
    pub sin6_addr: IN6_ADDR,
    pub __bindgen_anon_1: sockaddr_in6__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sockaddr_in6__bindgen_ty_1 {
    pub sin6_scope_id: ULONG,
    pub sin6_scope_struct: SCOPE_ID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6__bindgen_ty_1"]
        [::std::mem::size_of::<sockaddr_in6__bindgen_ty_1>() - 4usize];
    ["Alignment of sockaddr_in6__bindgen_ty_1"]
        [::std::mem::align_of::<sockaddr_in6__bindgen_ty_1>() - 4usize];
    ["Offset of field: sockaddr_in6__bindgen_ty_1::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6__bindgen_ty_1, sin6_scope_id) - 0usize];
    ["Offset of field: sockaddr_in6__bindgen_ty_1::sin6_scope_struct"]
        [::std::mem::offset_of!(sockaddr_in6__bindgen_ty_1, sin6_scope_struct) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
};
pub type SOCKADDR_IN6_LH = sockaddr_in6;
pub type PSOCKADDR_IN6_LH = *mut sockaddr_in6;
pub type LPSOCKADDR_IN6_LH = *mut sockaddr_in6;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6_w2ksp1 {
    pub sin6_family: ::std::os::raw::c_short,
    pub sin6_port: USHORT,
    pub sin6_flowinfo: ULONG,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6_w2ksp1"][::std::mem::size_of::<sockaddr_in6_w2ksp1>() - 28usize];
    ["Alignment of sockaddr_in6_w2ksp1"][::std::mem::align_of::<sockaddr_in6_w2ksp1>() - 4usize];
    ["Offset of field: sockaddr_in6_w2ksp1::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6_w2ksp1, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6_w2ksp1::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6_w2ksp1, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6_w2ksp1::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6_w2ksp1, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6_w2ksp1::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6_w2ksp1, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6_w2ksp1::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6_w2ksp1, sin6_scope_id) - 24usize];
};
pub type SOCKADDR_IN6_W2KSP1 = sockaddr_in6_w2ksp1;
pub type PSOCKADDR_IN6_W2KSP1 = *mut sockaddr_in6_w2ksp1;
pub type LPSOCKADDR_IN6_W2KSP1 = *mut sockaddr_in6_w2ksp1;
pub type SOCKADDR_IN6 = SOCKADDR_IN6_LH;
pub type PSOCKADDR_IN6 = *mut SOCKADDR_IN6_LH;
pub type LPSOCKADDR_IN6 = *mut SOCKADDR_IN6_LH;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _SOCKADDR_INET {
    pub Ipv4: SOCKADDR_IN,
    pub Ipv6: SOCKADDR_IN6,
    pub si_family: ADDRESS_FAMILY,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SOCKADDR_INET"][::std::mem::size_of::<_SOCKADDR_INET>() - 28usize];
    ["Alignment of _SOCKADDR_INET"][::std::mem::align_of::<_SOCKADDR_INET>() - 4usize];
    ["Offset of field: _SOCKADDR_INET::Ipv4"]
        [::std::mem::offset_of!(_SOCKADDR_INET, Ipv4) - 0usize];
    ["Offset of field: _SOCKADDR_INET::Ipv6"]
        [::std::mem::offset_of!(_SOCKADDR_INET, Ipv6) - 0usize];
    ["Offset of field: _SOCKADDR_INET::si_family"]
        [::std::mem::offset_of!(_SOCKADDR_INET, si_family) - 0usize];
};
pub type SOCKADDR_INET = _SOCKADDR_INET;
pub type PSOCKADDR_INET = *mut _SOCKADDR_INET;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _sockaddr_in6_pair {
    pub SourceAddress: PSOCKADDR_IN6,
    pub DestinationAddress: PSOCKADDR_IN6,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _sockaddr_in6_pair"][::std::mem::size_of::<_sockaddr_in6_pair>() - 16usize];
    ["Alignment of _sockaddr_in6_pair"][::std::mem::align_of::<_sockaddr_in6_pair>() - 8usize];
    ["Offset of field: _sockaddr_in6_pair::SourceAddress"]
        [::std::mem::offset_of!(_sockaddr_in6_pair, SourceAddress) - 0usize];
    ["Offset of field: _sockaddr_in6_pair::DestinationAddress"]
        [::std::mem::offset_of!(_sockaddr_in6_pair, DestinationAddress) - 8usize];
};
pub type SOCKADDR_IN6_PAIR = _sockaddr_in6_pair;
pub type PSOCKADDR_IN6_PAIR = *mut _sockaddr_in6_pair;
unsafe extern "C" {
    pub static scopeid_unspecified: SCOPE_ID;
}
unsafe extern "C" {
    pub static in4addr_any: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_loopback: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_broadcast: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_allnodesonlink: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_allroutersonlink: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_alligmpv3routersonlink: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_allteredohostsonlink: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_linklocalprefix: IN_ADDR;
}
unsafe extern "C" {
    pub static in4addr_multicastprefix: IN_ADDR;
}
unsafe extern "C" {
    pub static in6addr_any: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_loopback: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_allnodesonnode: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_allnodesonlink: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_allroutersonlink: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_allmldv2routersonlink: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_teredoinitiallinklocaladdress: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_linklocalprefix: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_multicastprefix: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_solicitednodemulticastprefix: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_v4mappedprefix: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_6to4prefix: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_teredoprefix: IN6_ADDR;
}
unsafe extern "C" {
    pub static in6addr_teredoprefix_old: IN6_ADDR;
}
pub const MULTICAST_MODE_TYPE_MCAST_INCLUDE: MULTICAST_MODE_TYPE = 0;
pub const MULTICAST_MODE_TYPE_MCAST_EXCLUDE: MULTICAST_MODE_TYPE = 1;
pub type MULTICAST_MODE_TYPE = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: IN_ADDR,
    pub imr_interface: IN_ADDR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
pub type IP_MREQ = ip_mreq;
pub type PIP_MREQ = *mut ip_mreq;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: IN_ADDR,
    pub imr_sourceaddr: IN_ADDR,
    pub imr_interface: IN_ADDR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 4usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 8usize];
};
pub type IP_MREQ_SOURCE = ip_mreq_source;
pub type PIP_MREQ_SOURCE = *mut ip_mreq_source;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: IN_ADDR,
    pub imsf_interface: IN_ADDR,
    pub imsf_fmode: MULTICAST_MODE_TYPE,
    pub imsf_numsrc: ULONG,
    pub imsf_slist: [IN_ADDR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"][::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
pub type IP_MSFILTER = ip_msfilter;
pub type PIP_MSFILTER = *mut ip_msfilter;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: IN6_ADDR,
    pub ipv6mr_interface: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
pub type IPV6_MREQ = ipv6_mreq;
pub type PIPV6_MREQ = *mut ipv6_mreq;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: ULONG,
    pub gr_group: SOCKADDR_STORAGE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
pub type GROUP_REQ = group_req;
pub type PGROUP_REQ = *mut group_req;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: ULONG,
    pub gsr_group: SOCKADDR_STORAGE,
    pub gsr_source: SOCKADDR_STORAGE,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
pub type GROUP_SOURCE_REQ = group_source_req;
pub type PGROUP_SOURCE_REQ = *mut group_source_req;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: ULONG,
    pub gf_group: SOCKADDR_STORAGE,
    pub gf_fmode: MULTICAST_MODE_TYPE,
    pub gf_numsrc: ULONG,
    pub gf_slist: [SOCKADDR_STORAGE; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"][::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
pub type GROUP_FILTER = group_filter;
pub type PGROUP_FILTER = *mut group_filter;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_addr: IN_ADDR,
    pub ipi_ifindex: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 8usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 0usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 4usize];
};
pub type IN_PKTINFO = in_pktinfo;
pub type PIN_PKTINFO = *mut in_pktinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo {
    pub ipi6_addr: IN6_ADDR,
    pub ipi6_ifindex: ULONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_pktinfo"][::std::mem::size_of::<in6_pktinfo>() - 20usize];
    ["Alignment of in6_pktinfo"][::std::mem::align_of::<in6_pktinfo>() - 4usize];
    ["Offset of field: in6_pktinfo::ipi6_addr"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_addr) - 0usize];
    ["Offset of field: in6_pktinfo::ipi6_ifindex"]
        [::std::mem::offset_of!(in6_pktinfo, ipi6_ifindex) - 16usize];
};
pub type IN6_PKTINFO = in6_pktinfo;
pub type PIN6_PKTINFO = *mut in6_pktinfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in_pktinfo_ex {
    pub pkt_info: IN_PKTINFO,
    pub scope_id: SCOPE_ID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo_ex"][::std::mem::size_of::<in_pktinfo_ex>() - 12usize];
    ["Alignment of in_pktinfo_ex"][::std::mem::align_of::<in_pktinfo_ex>() - 4usize];
    ["Offset of field: in_pktinfo_ex::pkt_info"]
        [::std::mem::offset_of!(in_pktinfo_ex, pkt_info) - 0usize];
    ["Offset of field: in_pktinfo_ex::scope_id"]
        [::std::mem::offset_of!(in_pktinfo_ex, scope_id) - 8usize];
};
pub type IN_PKTINFO_EX = in_pktinfo_ex;
pub type PIN_PKTINFO_EX = *mut in_pktinfo_ex;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_pktinfo_ex {
    pub pkt_info: IN6_PKTINFO,
    pub scope_id: SCOPE_ID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_pktinfo_ex"][::std::mem::size_of::<in6_pktinfo_ex>() - 24usize];
    ["Alignment of in6_pktinfo_ex"][::std::mem::align_of::<in6_pktinfo_ex>() - 4usize];
    ["Offset of field: in6_pktinfo_ex::pkt_info"]
        [::std::mem::offset_of!(in6_pktinfo_ex, pkt_info) - 0usize];
    ["Offset of field: in6_pktinfo_ex::scope_id"]
        [::std::mem::offset_of!(in6_pktinfo_ex, scope_id) - 20usize];
};
pub type IN6_PKTINFO_EX = in6_pktinfo_ex;
pub type PIN6_PKTINFO_EX = *mut in6_pktinfo_ex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_recverr {
    pub protocol: IPPROTO,
    pub info: ULONG,
    pub type_: UINT8,
    pub code: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_recverr"][::std::mem::size_of::<in_recverr>() - 12usize];
    ["Alignment of in_recverr"][::std::mem::align_of::<in_recverr>() - 4usize];
    ["Offset of field: in_recverr::protocol"]
        [::std::mem::offset_of!(in_recverr, protocol) - 0usize];
    ["Offset of field: in_recverr::info"][::std::mem::offset_of!(in_recverr, info) - 4usize];
    ["Offset of field: in_recverr::type_"][::std::mem::offset_of!(in_recverr, type_) - 8usize];
    ["Offset of field: in_recverr::code"][::std::mem::offset_of!(in_recverr, code) - 9usize];
};
pub type IN_RECVERR = in_recverr;
pub type PIN_RECVERR = *mut in_recverr;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct icmp_error_info {
    pub srcaddress: SOCKADDR_INET,
    pub protocol: IPPROTO,
    pub type_: UINT8,
    pub code: UINT8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of icmp_error_info"][::std::mem::size_of::<icmp_error_info>() - 36usize];
    ["Alignment of icmp_error_info"][::std::mem::align_of::<icmp_error_info>() - 4usize];
    ["Offset of field: icmp_error_info::srcaddress"]
        [::std::mem::offset_of!(icmp_error_info, srcaddress) - 0usize];
    ["Offset of field: icmp_error_info::protocol"]
        [::std::mem::offset_of!(icmp_error_info, protocol) - 28usize];
    ["Offset of field: icmp_error_info::type_"]
        [::std::mem::offset_of!(icmp_error_info, type_) - 32usize];
    ["Offset of field: icmp_error_info::code"]
        [::std::mem::offset_of!(icmp_error_info, code) - 33usize];
};
pub type ICMP_ERROR_INFO = icmp_error_info;
pub type PICMP_ERROR_INFO = *mut icmp_error_info;
pub type ADDRINFOT = ADDRINFOA;
pub type PADDRINFOT = *mut ADDRINFOA;
pub type ADDRINFO = ADDRINFOA;
pub type LPADDRINFO = *mut ADDRINFOA;
pub type ADDRINFOEX = ADDRINFOEXA;
pub type PADDRINFOEX = *mut ADDRINFOEXA;
unsafe extern "C" {
    pub fn getaddrinfo(
        pNodeName: PCSTR,
        pServiceName: PCSTR,
        pHints: *const ADDRINFOA,
        ppResult: *mut PADDRINFOA,
    ) -> INT;
}
unsafe extern "C" {
    pub fn GetAddrInfoW(
        pNodeName: PCWSTR,
        pServiceName: PCWSTR,
        pHints: *const ADDRINFOW,
        ppResult: *mut PADDRINFOW,
    ) -> INT;
}
pub type LPLOOKUPSERVICE_COMPLETION_ROUTINE = ::std::option::Option<
    unsafe extern "C" fn(dwError: DWORD, dwBytes: DWORD, lpOverlapped: LPWSAOVERLAPPED),
>;
unsafe extern "C" {
    pub fn GetAddrInfoExA(
        pName: PCSTR,
        pServiceName: PCSTR,
        dwNameSpace: DWORD,
        lpNspId: LPGUID,
        hints: *const ADDRINFOEXA,
        ppResult: *mut PADDRINFOEXA,
        timeout: *mut timeval,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
        lpNameHandle: LPHANDLE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn GetAddrInfoExW(
        pName: PCWSTR,
        pServiceName: PCWSTR,
        dwNameSpace: DWORD,
        lpNspId: LPGUID,
        hints: *const ADDRINFOEXW,
        ppResult: *mut PADDRINFOEXW,
        timeout: *mut timeval,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
        lpHandle: LPHANDLE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn GetAddrInfoExCancel(lpHandle: LPHANDLE) -> INT;
}
unsafe extern "C" {
    pub fn GetAddrInfoExOverlappedResult(lpOverlapped: LPOVERLAPPED) -> INT;
}
unsafe extern "C" {
    pub fn SetAddrInfoExA(
        pName: PCSTR,
        pServiceName: PCSTR,
        pAddresses: *mut SOCKET_ADDRESS,
        dwAddressCount: DWORD,
        lpBlob: LPBLOB,
        dwFlags: DWORD,
        dwNameSpace: DWORD,
        lpNspId: LPGUID,
        timeout: *mut timeval,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
        lpNameHandle: LPHANDLE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn SetAddrInfoExW(
        pName: PCWSTR,
        pServiceName: PCWSTR,
        pAddresses: *mut SOCKET_ADDRESS,
        dwAddressCount: DWORD,
        lpBlob: LPBLOB,
        dwFlags: DWORD,
        dwNameSpace: DWORD,
        lpNspId: LPGUID,
        timeout: *mut timeval,
        lpOverlapped: LPOVERLAPPED,
        lpCompletionRoutine: LPLOOKUPSERVICE_COMPLETION_ROUTINE,
        lpNameHandle: LPHANDLE,
    ) -> INT;
}
unsafe extern "C" {
    pub fn freeaddrinfo(pAddrInfo: PADDRINFOA);
}
unsafe extern "C" {
    pub fn FreeAddrInfoW(pAddrInfo: PADDRINFOW);
}
unsafe extern "C" {
    pub fn FreeAddrInfoEx(pAddrInfoEx: PADDRINFOEXA);
}
unsafe extern "C" {
    pub fn FreeAddrInfoExW(pAddrInfoEx: PADDRINFOEXW);
}
pub type socklen_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn getnameinfo(
        pSockaddr: *const SOCKADDR,
        SockaddrLength: socklen_t,
        pNodeBuffer: PCHAR,
        NodeBufferSize: DWORD,
        pServiceBuffer: PCHAR,
        ServiceBufferSize: DWORD,
        Flags: INT,
    ) -> INT;
}
unsafe extern "C" {
    pub fn GetNameInfoW(
        pSockaddr: *const SOCKADDR,
        SockaddrLength: socklen_t,
        pNodeBuffer: PWCHAR,
        NodeBufferSize: DWORD,
        pServiceBuffer: PWCHAR,
        ServiceBufferSize: DWORD,
        Flags: INT,
    ) -> INT;
}
unsafe extern "C" {
    pub fn inet_pton(Family: INT, pszAddrString: PCSTR, pAddrBuf: PVOID) -> INT;
}
unsafe extern "C" {
    pub fn InetPtonW(Family: INT, pszAddrString: PCWSTR, pAddrBuf: PVOID) -> INT;
}
unsafe extern "C" {
    pub fn inet_ntop(
        Family: INT,
        pAddr: *const ::std::os::raw::c_void,
        pStringBuf: PSTR,
        StringBufSize: usize,
    ) -> PCSTR;
}
unsafe extern "C" {
    pub fn InetNtopW(
        Family: INT,
        pAddr: *const ::std::os::raw::c_void,
        pStringBuf: PWSTR,
        StringBufSize: usize,
    ) -> PCWSTR;
}
pub type sa_family_t = ::std::os::raw::c_ushort;
pub type bpf_int32 = ::std::os::raw::c_int;
pub type bpf_u_int32 = u_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_program {
    pub bf_len: u_int,
    pub bf_insns: *mut bpf_insn,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_program"][::std::mem::size_of::<bpf_program>() - 16usize];
    ["Alignment of bpf_program"][::std::mem::align_of::<bpf_program>() - 8usize];
    ["Offset of field: bpf_program::bf_len"][::std::mem::offset_of!(bpf_program, bf_len) - 0usize];
    ["Offset of field: bpf_program::bf_insns"]
        [::std::mem::offset_of!(bpf_program, bf_insns) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_version {
    pub bv_major: u_short,
    pub bv_minor: u_short,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_version"][::std::mem::size_of::<bpf_version>() - 4usize];
    ["Alignment of bpf_version"][::std::mem::align_of::<bpf_version>() - 2usize];
    ["Offset of field: bpf_version::bv_major"]
        [::std::mem::offset_of!(bpf_version, bv_major) - 0usize];
    ["Offset of field: bpf_version::bv_minor"]
        [::std::mem::offset_of!(bpf_version, bv_minor) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_insn {
    pub code: u_short,
    pub jt: u_char,
    pub jf: u_char,
    pub k: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bpf_insn"][::std::mem::size_of::<bpf_insn>() - 8usize];
    ["Alignment of bpf_insn"][::std::mem::align_of::<bpf_insn>() - 4usize];
    ["Offset of field: bpf_insn::code"][::std::mem::offset_of!(bpf_insn, code) - 0usize];
    ["Offset of field: bpf_insn::jt"][::std::mem::offset_of!(bpf_insn, jt) - 2usize];
    ["Offset of field: bpf_insn::jf"][::std::mem::offset_of!(bpf_insn, jf) - 3usize];
    ["Offset of field: bpf_insn::k"][::std::mem::offset_of!(bpf_insn, k) - 4usize];
};
unsafe extern "C" {
    pub fn bpf_validate() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bpf_filter() -> u_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _iobuf"][::std::mem::size_of::<_iobuf>() - 8usize];
    ["Alignment of _iobuf"][::std::mem::align_of::<_iobuf>() - 8usize];
    ["Offset of field: _iobuf::_Placeholder"]
        [::std::mem::offset_of!(_iobuf, _Placeholder) - 0usize];
};
pub type FILE = _iobuf;
unsafe extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
unsafe extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn getwchar() -> wint_t;
}
unsafe extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
unsafe extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
unsafe extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
unsafe extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
unsafe extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
unsafe extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
unsafe extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
unsafe extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
unsafe extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
unsafe extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap {
    _unused: [u8; 0],
}
pub type pcap_t = pcap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_dumper {
    _unused: [u8; 0],
}
pub type pcap_dumper_t = pcap_dumper;
pub type pcap_if_t = pcap_if;
pub type pcap_addr_t = pcap_addr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_file_header {
    pub magic: bpf_u_int32,
    pub version_major: u_short,
    pub version_minor: u_short,
    pub thiszone: bpf_int32,
    pub sigfigs: bpf_u_int32,
    pub snaplen: bpf_u_int32,
    pub linktype: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_file_header"][::std::mem::size_of::<pcap_file_header>() - 24usize];
    ["Alignment of pcap_file_header"][::std::mem::align_of::<pcap_file_header>() - 4usize];
    ["Offset of field: pcap_file_header::magic"]
        [::std::mem::offset_of!(pcap_file_header, magic) - 0usize];
    ["Offset of field: pcap_file_header::version_major"]
        [::std::mem::offset_of!(pcap_file_header, version_major) - 4usize];
    ["Offset of field: pcap_file_header::version_minor"]
        [::std::mem::offset_of!(pcap_file_header, version_minor) - 6usize];
    ["Offset of field: pcap_file_header::thiszone"]
        [::std::mem::offset_of!(pcap_file_header, thiszone) - 8usize];
    ["Offset of field: pcap_file_header::sigfigs"]
        [::std::mem::offset_of!(pcap_file_header, sigfigs) - 12usize];
    ["Offset of field: pcap_file_header::snaplen"]
        [::std::mem::offset_of!(pcap_file_header, snaplen) - 16usize];
    ["Offset of field: pcap_file_header::linktype"]
        [::std::mem::offset_of!(pcap_file_header, linktype) - 20usize];
};
pub const pcap_direction_t_PCAP_D_INOUT: pcap_direction_t = 0;
pub const pcap_direction_t_PCAP_D_IN: pcap_direction_t = 1;
pub const pcap_direction_t_PCAP_D_OUT: pcap_direction_t = 2;
pub type pcap_direction_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_pkthdr {
    pub ts: timeval,
    pub caplen: bpf_u_int32,
    pub len: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_pkthdr"][::std::mem::size_of::<pcap_pkthdr>() - 16usize];
    ["Alignment of pcap_pkthdr"][::std::mem::align_of::<pcap_pkthdr>() - 4usize];
    ["Offset of field: pcap_pkthdr::ts"][::std::mem::offset_of!(pcap_pkthdr, ts) - 0usize];
    ["Offset of field: pcap_pkthdr::caplen"][::std::mem::offset_of!(pcap_pkthdr, caplen) - 8usize];
    ["Offset of field: pcap_pkthdr::len"][::std::mem::offset_of!(pcap_pkthdr, len) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_stat {
    pub ps_recv: u_int,
    pub ps_drop: u_int,
    pub ps_ifdrop: u_int,
    pub ps_capt: u_int,
    pub ps_sent: u_int,
    pub ps_netdrop: u_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_stat"][::std::mem::size_of::<pcap_stat>() - 24usize];
    ["Alignment of pcap_stat"][::std::mem::align_of::<pcap_stat>() - 4usize];
    ["Offset of field: pcap_stat::ps_recv"][::std::mem::offset_of!(pcap_stat, ps_recv) - 0usize];
    ["Offset of field: pcap_stat::ps_drop"][::std::mem::offset_of!(pcap_stat, ps_drop) - 4usize];
    ["Offset of field: pcap_stat::ps_ifdrop"]
        [::std::mem::offset_of!(pcap_stat, ps_ifdrop) - 8usize];
    ["Offset of field: pcap_stat::ps_capt"][::std::mem::offset_of!(pcap_stat, ps_capt) - 12usize];
    ["Offset of field: pcap_stat::ps_sent"][::std::mem::offset_of!(pcap_stat, ps_sent) - 16usize];
    ["Offset of field: pcap_stat::ps_netdrop"]
        [::std::mem::offset_of!(pcap_stat, ps_netdrop) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_if {
    pub next: *mut pcap_if,
    pub name: *mut ::std::os::raw::c_char,
    pub description: *mut ::std::os::raw::c_char,
    pub addresses: *mut pcap_addr,
    pub flags: bpf_u_int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_if"][::std::mem::size_of::<pcap_if>() - 40usize];
    ["Alignment of pcap_if"][::std::mem::align_of::<pcap_if>() - 8usize];
    ["Offset of field: pcap_if::next"][::std::mem::offset_of!(pcap_if, next) - 0usize];
    ["Offset of field: pcap_if::name"][::std::mem::offset_of!(pcap_if, name) - 8usize];
    ["Offset of field: pcap_if::description"]
        [::std::mem::offset_of!(pcap_if, description) - 16usize];
    ["Offset of field: pcap_if::addresses"][::std::mem::offset_of!(pcap_if, addresses) - 24usize];
    ["Offset of field: pcap_if::flags"][::std::mem::offset_of!(pcap_if, flags) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_addr {
    pub next: *mut pcap_addr,
    pub addr: *mut sockaddr,
    pub netmask: *mut sockaddr,
    pub broadaddr: *mut sockaddr,
    pub dstaddr: *mut sockaddr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_addr"][::std::mem::size_of::<pcap_addr>() - 40usize];
    ["Alignment of pcap_addr"][::std::mem::align_of::<pcap_addr>() - 8usize];
    ["Offset of field: pcap_addr::next"][::std::mem::offset_of!(pcap_addr, next) - 0usize];
    ["Offset of field: pcap_addr::addr"][::std::mem::offset_of!(pcap_addr, addr) - 8usize];
    ["Offset of field: pcap_addr::netmask"][::std::mem::offset_of!(pcap_addr, netmask) - 16usize];
    ["Offset of field: pcap_addr::broadaddr"]
        [::std::mem::offset_of!(pcap_addr, broadaddr) - 24usize];
    ["Offset of field: pcap_addr::dstaddr"][::std::mem::offset_of!(pcap_addr, dstaddr) - 32usize];
};
pub type pcap_handler = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut u_char, arg2: *const pcap_pkthdr, arg3: *const u_char),
>;
unsafe extern "C" {
    pub fn pcap_lookupdev(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_lookupnet(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut bpf_u_int32,
        arg3: *mut bpf_u_int32,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_create(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_set_snaplen(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_promisc(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_can_set_rfmon(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_rfmon(arg1: *mut pcap_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_timeout(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_buffer_size(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_activate(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_open_live(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_open_dead(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_open_offline(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_hopen_offline(arg1: isize, arg2: *mut ::std::os::raw::c_char) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_close(arg1: *mut pcap_t);
}
unsafe extern "C" {
    pub fn pcap_loop(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
        arg3: pcap_handler,
        arg4: *mut u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_dispatch(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
        arg3: pcap_handler,
        arg4: *mut u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_next(arg1: *mut pcap_t, arg2: *mut pcap_pkthdr) -> *const u_char;
}
unsafe extern "C" {
    pub fn pcap_next_ex(
        arg1: *mut pcap_t,
        arg2: *mut *mut pcap_pkthdr,
        arg3: *mut *const u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_breakloop(arg1: *mut pcap_t);
}
unsafe extern "C" {
    pub fn pcap_stats(arg1: *mut pcap_t, arg2: *mut pcap_stat) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setfilter(arg1: *mut pcap_t, arg2: *mut bpf_program) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setdirection(arg1: *mut pcap_t, arg2: pcap_direction_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_getnonblock(
        arg1: *mut pcap_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setnonblock(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_inject(
        arg1: *mut pcap_t,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_sendpacket(
        arg1: *mut pcap_t,
        arg2: *const u_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_statustostr(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_strerror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_geterr(arg1: *mut pcap_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_perror(arg1: *mut pcap_t, arg2: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn pcap_compile(
        arg1: *mut pcap_t,
        arg2: *mut bpf_program,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
        arg5: bpf_u_int32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_compile_nopcap(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut bpf_program,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
        arg6: bpf_u_int32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_freecode(arg1: *mut bpf_program);
}
unsafe extern "C" {
    pub fn pcap_offline_filter(
        arg1: *mut bpf_program,
        arg2: *const pcap_pkthdr,
        arg3: *const u_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_datalink(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_datalink_ext(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_list_datalinks(
        arg1: *mut pcap_t,
        arg2: *mut *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_set_datalink(
        arg1: *mut pcap_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_free_datalinks(arg1: *mut ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn pcap_datalink_name_to_val(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_datalink_val_to_name(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_datalink_val_to_description(
        arg1: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn pcap_snapshot(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_is_swapped(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_major_version(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_minor_version(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_file(arg1: *mut pcap_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn pcap_fileno(arg1: *mut pcap_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_dump_open(
        arg1: *mut pcap_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut pcap_dumper_t;
}
unsafe extern "C" {
    pub fn pcap_dump_fopen(arg1: *mut pcap_t, fp: *mut FILE) -> *mut pcap_dumper_t;
}
unsafe extern "C" {
    pub fn pcap_dump_file(arg1: *mut pcap_dumper_t) -> *mut FILE;
}
unsafe extern "C" {
    pub fn pcap_dump_ftell(arg1: *mut pcap_dumper_t) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn pcap_dump_flush(arg1: *mut pcap_dumper_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_dump_close(arg1: *mut pcap_dumper_t);
}
unsafe extern "C" {
    pub fn pcap_dump(arg1: *mut u_char, arg2: *const pcap_pkthdr, arg3: *const u_char);
}
unsafe extern "C" {
    pub fn pcap_findalldevs(
        arg1: *mut *mut pcap_if_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_freealldevs(arg1: *mut pcap_if_t);
}
unsafe extern "C" {
    pub fn pcap_lib_version() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bpf_image(
        arg1: *const bpf_insn,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bpf_dump(arg1: *const bpf_program, arg2: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn pcap_setbuff(p: *mut pcap_t, dim: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setmode(p: *mut pcap_t, mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setmintocopy(p: *mut pcap_t, size: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[doc = "\\brief This structure keeps the information needed to autheticate\nthe user on a remote machine.\n\nThe remote machine can either grant or refuse the access according\nto the information provided.\nIn case the NULL authentication is required, both 'username' and\n'password' can be NULL pointers.\n\nThis structure is meaningless if the source is not a remote interface;\nin that case, the functions which requires such a structure can accept\na NULL pointer as well."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_rmtauth {
    #[doc = "\\brief Type of the authentication required.\n\nIn order to provide maximum flexibility, we can support different types\nof authentication based on the value of this 'type' variable. The currently\nsupported authentication methods are defined into the\n\\link remote_auth_methods Remote Authentication Methods Section\\endlink.\n"]
    pub type_: ::std::os::raw::c_int,
    #[doc = "\\brief Zero-terminated string containing the username that has to be\nused on the remote machine for authentication.\n\nThis field is meaningless in case of the RPCAP_RMTAUTH_NULL authentication\nand it can be NULL."]
    pub username: *mut ::std::os::raw::c_char,
    #[doc = "\\brief Zero-terminated string containing the password that has to be\nused on the remote machine for authentication.\n\nThis field is meaningless in case of the RPCAP_RMTAUTH_NULL authentication\nand it can be NULL."]
    pub password: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_rmtauth"][::std::mem::size_of::<pcap_rmtauth>() - 24usize];
    ["Alignment of pcap_rmtauth"][::std::mem::align_of::<pcap_rmtauth>() - 8usize];
    ["Offset of field: pcap_rmtauth::type_"][::std::mem::offset_of!(pcap_rmtauth, type_) - 0usize];
    ["Offset of field: pcap_rmtauth::username"]
        [::std::mem::offset_of!(pcap_rmtauth, username) - 8usize];
    ["Offset of field: pcap_rmtauth::password"]
        [::std::mem::offset_of!(pcap_rmtauth, password) - 16usize];
};
#[doc = "\\brief This structure defines the information related to sampling.\n\nIn case the sampling is requested, the capturing device should read\nonly a subset of the packets coming from the source. The returned packets depend\non the sampling parameters.\n\n\\warning The sampling process is applied <strong>after</strong> the filtering process.\nIn other words, packets are filtered first, then the sampling process selects a\nsubset of the 'filtered' packets and it returns them to the caller."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pcap_samp {
    #[doc = "Method used for sampling. Currently, the supported methods are listed in the\n\\link remote_samp_methods Sampling Methods Section\\endlink."]
    pub method: ::std::os::raw::c_int,
    #[doc = "This value depends on the sampling method defined. For its meaning, please check\nat the \\link remote_samp_methods Sampling Methods Section\\endlink."]
    pub value: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pcap_samp"][::std::mem::size_of::<pcap_samp>() - 8usize];
    ["Alignment of pcap_samp"][::std::mem::align_of::<pcap_samp>() - 4usize];
    ["Offset of field: pcap_samp::method"][::std::mem::offset_of!(pcap_samp, method) - 0usize];
    ["Offset of field: pcap_samp::value"][::std::mem::offset_of!(pcap_samp, value) - 4usize];
};
unsafe extern "C" {
    pub fn pcap_open(
        source: *const ::std::os::raw::c_char,
        snaplen: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        read_timeout: ::std::os::raw::c_int,
        auth: *mut pcap_rmtauth,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> *mut pcap_t;
}
unsafe extern "C" {
    pub fn pcap_createsrcstr(
        source: *mut ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        host: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_parsesrcstr(
        source: *const ::std::os::raw::c_char,
        type_: *mut ::std::os::raw::c_int,
        host: *mut ::std::os::raw::c_char,
        port: *mut ::std::os::raw::c_char,
        name: *mut ::std::os::raw::c_char,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_findalldevs_ex(
        source: *mut ::std::os::raw::c_char,
        auth: *mut pcap_rmtauth,
        alldevs: *mut *mut pcap_if_t,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_setsampling(p: *mut pcap_t) -> *mut pcap_samp;
}
unsafe extern "C" {
    pub fn pcap_remoteact_accept(
        address: *const ::std::os::raw::c_char,
        port: *const ::std::os::raw::c_char,
        hostlist: *const ::std::os::raw::c_char,
        connectinghost: *mut ::std::os::raw::c_char,
        auth: *mut pcap_rmtauth,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn pcap_remoteact_list(
        hostlist: *mut ::std::os::raw::c_char,
        sep: ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_remoteact_close(
        host: *const ::std::os::raw::c_char,
        errbuf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pcap_remoteact_cleanup();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AirpcapHandle {
    _unused: [u8; 0],
}
pub type PAirpcapHandle = *mut _AirpcapHandle;
#[doc = "\\brief Network type structure.\n\nThis structure is used by the PacketGetNetType() function to return information on the current adapter's type and speed."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NetType {
    #[doc = "< The MAC of the current network adapter (see function PacketGetNetType() for more information)"]
    pub LinkType: UINT,
    #[doc = "< The speed of the network in bits per second"]
    pub LinkSpeed: ULONGLONG,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NetType"][::std::mem::size_of::<NetType>() - 16usize];
    ["Alignment of NetType"][::std::mem::align_of::<NetType>() - 8usize];
    ["Offset of field: NetType::LinkType"][::std::mem::offset_of!(NetType, LinkType) - 0usize];
    ["Offset of field: NetType::LinkSpeed"][::std::mem::offset_of!(NetType, LinkSpeed) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_stat {
    _unused: [u8; 0],
}
#[doc = "\\brief Addresses of a network adapter.\n\nThis structure is used by the PacketGetNetInfoEx() function to return the IP addresses associated with\nan adapter."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct npf_if_addr {
    #[doc = "< IP address."]
    pub IPAddress: sockaddr_storage,
    #[doc = "< Netmask for that address."]
    pub SubnetMask: sockaddr_storage,
    #[doc = "< Broadcast address."]
    pub Broadcast: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of npf_if_addr"][::std::mem::size_of::<npf_if_addr>() - 384usize];
    ["Alignment of npf_if_addr"][::std::mem::align_of::<npf_if_addr>() - 8usize];
    ["Offset of field: npf_if_addr::IPAddress"]
        [::std::mem::offset_of!(npf_if_addr, IPAddress) - 0usize];
    ["Offset of field: npf_if_addr::SubnetMask"]
        [::std::mem::offset_of!(npf_if_addr, SubnetMask) - 128usize];
    ["Offset of field: npf_if_addr::Broadcast"]
        [::std::mem::offset_of!(npf_if_addr, Broadcast) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WAN_ADAPTER_INT {
    _unused: [u8; 0],
}
pub type WAN_ADAPTER = WAN_ADAPTER_INT;
pub type PWAN_ADAPTER = *mut WAN_ADAPTER;
#[doc = "\\brief Describes an opened network adapter.\n\nThis structure is the most important for the functioning of packet.dll, but the great part of its fields\nshould be ignored by the user, since the library offers functions that avoid to cope with low-level parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ADAPTER {
    #[doc = "< \\internal Handle to an open instance of the NPF driver."]
    pub hFile: HANDLE,
    #[doc = "< \\internal A string containing the name of the network adapter currently opened."]
    pub SymbolicLink: [CHAR; 64usize],
    #[doc = "< \\internal Number of times a packets written on this adapter will be repeated\n< on the wire."]
    pub NumWrites: ::std::os::raw::c_int,
    #[doc = "< A notification event associated with the read calls on the adapter.\n< It can be passed to standard Win32 functions (like WaitForSingleObject\n< or WaitForMultipleObjects) to wait until the driver's buffer contains some\n< data. It is particularly useful in GUI applications that need to wait\n< concurrently on several events. In Windows NT/2000 the PacketSetMinToCopy()\n< function can be used to define the minimum amount of data in the kernel buffer\n< that will cause the event to be signalled."]
    pub ReadEvent: HANDLE,
    #[doc = "< \\internal The amount of time after which a read on the driver will be released and\n< ReadEvent will be signaled, also if no packets were captured"]
    pub ReadTimeOut: UINT,
    pub Name: [CHAR; 268usize],
    pub pWanAdapter: PWAN_ADAPTER,
    #[doc = "< Adapter's flags. Tell if this adapter must be treated in a different way, using the Netmon API or the dagc API."]
    pub Flags: UINT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ADAPTER"][::std::mem::size_of::<_ADAPTER>() - 376usize];
    ["Alignment of _ADAPTER"][::std::mem::align_of::<_ADAPTER>() - 8usize];
    ["Offset of field: _ADAPTER::hFile"][::std::mem::offset_of!(_ADAPTER, hFile) - 0usize];
    ["Offset of field: _ADAPTER::SymbolicLink"]
        [::std::mem::offset_of!(_ADAPTER, SymbolicLink) - 8usize];
    ["Offset of field: _ADAPTER::NumWrites"][::std::mem::offset_of!(_ADAPTER, NumWrites) - 72usize];
    ["Offset of field: _ADAPTER::ReadEvent"][::std::mem::offset_of!(_ADAPTER, ReadEvent) - 80usize];
    ["Offset of field: _ADAPTER::ReadTimeOut"]
        [::std::mem::offset_of!(_ADAPTER, ReadTimeOut) - 88usize];
    ["Offset of field: _ADAPTER::Name"][::std::mem::offset_of!(_ADAPTER, Name) - 92usize];
    ["Offset of field: _ADAPTER::pWanAdapter"]
        [::std::mem::offset_of!(_ADAPTER, pWanAdapter) - 360usize];
    ["Offset of field: _ADAPTER::Flags"][::std::mem::offset_of!(_ADAPTER, Flags) - 368usize];
};
#[doc = "\\brief Describes an opened network adapter.\n\nThis structure is the most important for the functioning of packet.dll, but the great part of its fields\nshould be ignored by the user, since the library offers functions that avoid to cope with low-level parameters"]
pub type ADAPTER = _ADAPTER;
#[doc = "\\brief Describes an opened network adapter.\n\nThis structure is the most important for the functioning of packet.dll, but the great part of its fields\nshould be ignored by the user, since the library offers functions that avoid to cope with low-level parameters"]
pub type LPADAPTER = *mut _ADAPTER;
#[doc = "\\brief Structure that contains a group of packets coming from the driver.\n\nThis structure defines the header associated with every packet delivered to the application."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _PACKET {
    #[doc = "< \\deprecated Still present for compatibility with old applications."]
    pub hEvent: HANDLE,
    #[doc = "< \\deprecated Still present for compatibility with old applications."]
    pub OverLapped: OVERLAPPED,
    #[doc = "< Buffer with containing the packets. See the PacketReceivePacket() for\n< details about the organization of the data in this buffer"]
    pub Buffer: PVOID,
    #[doc = "< Length of the buffer"]
    pub Length: UINT,
    #[doc = "< Number of valid bytes present in the buffer, i.e. amount of data\n< received by the last call to PacketReceivePacket()"]
    pub ulBytesReceived: DWORD,
    #[doc = "< \\deprecated Still present for compatibility with old applications."]
    pub bIoComplete: BOOLEAN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PACKET"][::std::mem::size_of::<_PACKET>() - 64usize];
    ["Alignment of _PACKET"][::std::mem::align_of::<_PACKET>() - 8usize];
    ["Offset of field: _PACKET::hEvent"][::std::mem::offset_of!(_PACKET, hEvent) - 0usize];
    ["Offset of field: _PACKET::OverLapped"][::std::mem::offset_of!(_PACKET, OverLapped) - 8usize];
    ["Offset of field: _PACKET::Buffer"][::std::mem::offset_of!(_PACKET, Buffer) - 40usize];
    ["Offset of field: _PACKET::Length"][::std::mem::offset_of!(_PACKET, Length) - 48usize];
    ["Offset of field: _PACKET::ulBytesReceived"]
        [::std::mem::offset_of!(_PACKET, ulBytesReceived) - 52usize];
    ["Offset of field: _PACKET::bIoComplete"]
        [::std::mem::offset_of!(_PACKET, bIoComplete) - 56usize];
};
#[doc = "\\brief Structure that contains a group of packets coming from the driver.\n\nThis structure defines the header associated with every packet delivered to the application."]
pub type PACKET = _PACKET;
#[doc = "\\brief Structure that contains a group of packets coming from the driver.\n\nThis structure defines the header associated with every packet delivered to the application."]
pub type LPPACKET = *mut _PACKET;
#[doc = "\\brief Structure containing an OID request.\n\nIt is used by the PacketRequest() function to send an OID to the interface card driver.\nIt can be used, for example, to retrieve the status of the error counters on the adapter, its MAC address,\nthe list of the multicast groups defined on it, and so on."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PACKET_OID_DATA {
    #[doc = "< OID code. See the Microsoft DDK documentation or the file ntddndis.h\n< for a complete list of valid codes."]
    pub Oid: ULONG,
    #[doc = "< Length of the data field"]
    pub Length: ULONG,
    #[doc = "< variable-length field that contains the information passed to or received\n< from the adapter."]
    pub Data: [UCHAR; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PACKET_OID_DATA"][::std::mem::size_of::<_PACKET_OID_DATA>() - 12usize];
    ["Alignment of _PACKET_OID_DATA"][::std::mem::align_of::<_PACKET_OID_DATA>() - 4usize];
    ["Offset of field: _PACKET_OID_DATA::Oid"]
        [::std::mem::offset_of!(_PACKET_OID_DATA, Oid) - 0usize];
    ["Offset of field: _PACKET_OID_DATA::Length"]
        [::std::mem::offset_of!(_PACKET_OID_DATA, Length) - 4usize];
    ["Offset of field: _PACKET_OID_DATA::Data"]
        [::std::mem::offset_of!(_PACKET_OID_DATA, Data) - 8usize];
};
#[doc = "\\brief Structure containing an OID request.\n\nIt is used by the PacketRequest() function to send an OID to the interface card driver.\nIt can be used, for example, to retrieve the status of the error counters on the adapter, its MAC address,\nthe list of the multicast groups defined on it, and so on."]
pub type PACKET_OID_DATA = _PACKET_OID_DATA;
pub type PPACKET_OID_DATA = *mut _PACKET_OID_DATA;
unsafe extern "C" {
    pub fn PacketGetVersion() -> PCHAR;
}
unsafe extern "C" {
    pub fn PacketGetDriverVersion() -> PCHAR;
}
unsafe extern "C" {
    pub fn PacketSetMinToCopy(AdapterObject: LPADAPTER, nbytes: ::std::os::raw::c_int) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetNumWrites(AdapterObject: LPADAPTER, nwrites: ::std::os::raw::c_int) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetMode(AdapterObject: LPADAPTER, mode: ::std::os::raw::c_int) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetReadTimeout(
        AdapterObject: LPADAPTER,
        timeout: ::std::os::raw::c_int,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetBpf(AdapterObject: LPADAPTER, fp: *mut bpf_program) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetLoopbackBehavior(AdapterObject: LPADAPTER, LoopbackBehavior: UINT) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetSnapLen(AdapterObject: LPADAPTER, snaplen: ::std::os::raw::c_int) -> INT;
}
unsafe extern "C" {
    pub fn PacketGetStats(AdapterObject: LPADAPTER, s: *mut bpf_stat) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketGetStatsEx(AdapterObject: LPADAPTER, s: *mut bpf_stat) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetBuff(AdapterObject: LPADAPTER, dim: ::std::os::raw::c_int) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketGetNetType(AdapterObject: LPADAPTER, type_: *mut NetType) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketOpenAdapter(AdapterName: PCHAR) -> LPADAPTER;
}
unsafe extern "C" {
    pub fn PacketSendPacket(AdapterObject: LPADAPTER, pPacket: LPPACKET, Sync: BOOLEAN) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSendPackets(
        AdapterObject: LPADAPTER,
        PacketBuff: PVOID,
        Size: ULONG,
        Sync: BOOLEAN,
    ) -> INT;
}
unsafe extern "C" {
    pub fn PacketAllocatePacket() -> LPPACKET;
}
unsafe extern "C" {
    pub fn PacketInitPacket(lpPacket: LPPACKET, Buffer: PVOID, Length: UINT);
}
unsafe extern "C" {
    pub fn PacketFreePacket(lpPacket: LPPACKET);
}
unsafe extern "C" {
    pub fn PacketReceivePacket(
        AdapterObject: LPADAPTER,
        lpPacket: LPPACKET,
        Sync: BOOLEAN,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetHwFilter(AdapterObject: LPADAPTER, Filter: ULONG) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketGetAdapterNames(pStr: PTSTR, BufferSize: PULONG) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketGetNetInfoEx(
        AdapterName: PCHAR,
        buffer: *mut npf_if_addr,
        NEntries: PLONG,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketRequest(
        AdapterObject: LPADAPTER,
        Set: BOOLEAN,
        OidData: PPACKET_OID_DATA,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketGetReadEvent(AdapterObject: LPADAPTER) -> HANDLE;
}
unsafe extern "C" {
    pub fn PacketSetDumpName(
        AdapterObject: LPADAPTER,
        name: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketSetDumpLimits(
        AdapterObject: LPADAPTER,
        maxfilesize: UINT,
        maxnpacks: UINT,
    ) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketIsDumpEnded(AdapterObject: LPADAPTER, sync: BOOLEAN) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketStopDriver() -> BOOL;
}
unsafe extern "C" {
    pub fn PacketCloseAdapter(lpAdapter: LPADAPTER);
}
unsafe extern "C" {
    pub fn PacketStartOem(errorString: PCHAR, errorStringLength: UINT) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketStartOemEx(errorString: PCHAR, errorStringLength: UINT, flags: ULONG) -> BOOLEAN;
}
unsafe extern "C" {
    pub fn PacketGetAirPcapHandle(AdapterObject: LPADAPTER) -> PAirpcapHandle;
}
#[doc = " pointer structure to Tx and Rx stacks"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_stackT {
    #[doc = " socket connection used"]
    pub sock: *mut *mut pcap_t,
    #[doc = " tx buffer"]
    pub txbuf: *mut [ec_bufT; 16usize],
    #[doc = " tx buffer lengths"]
    pub txbuflength: *mut [::std::os::raw::c_int; 16usize],
    #[doc = " temporary receive buffer"]
    pub tempbuf: *mut ec_bufT,
    #[doc = " rx buffers"]
    pub rxbuf: *mut [ec_bufT; 16usize],
    #[doc = " rx buffer status fields"]
    pub rxbufstat: *mut [::std::os::raw::c_int; 16usize],
    #[doc = " received MAC source address (middle word)"]
    pub rxsa: *mut [::std::os::raw::c_int; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_stackT"][::std::mem::size_of::<ec_stackT>() - 56usize];
    ["Alignment of ec_stackT"][::std::mem::align_of::<ec_stackT>() - 8usize];
    ["Offset of field: ec_stackT::sock"][::std::mem::offset_of!(ec_stackT, sock) - 0usize];
    ["Offset of field: ec_stackT::txbuf"][::std::mem::offset_of!(ec_stackT, txbuf) - 8usize];
    ["Offset of field: ec_stackT::txbuflength"]
        [::std::mem::offset_of!(ec_stackT, txbuflength) - 16usize];
    ["Offset of field: ec_stackT::tempbuf"][::std::mem::offset_of!(ec_stackT, tempbuf) - 24usize];
    ["Offset of field: ec_stackT::rxbuf"][::std::mem::offset_of!(ec_stackT, rxbuf) - 32usize];
    ["Offset of field: ec_stackT::rxbufstat"]
        [::std::mem::offset_of!(ec_stackT, rxbufstat) - 40usize];
    ["Offset of field: ec_stackT::rxsa"][::std::mem::offset_of!(ec_stackT, rxsa) - 48usize];
};
#[doc = " pointer structure to buffers for redundant port"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecx_redportt {
    pub stack: ec_stackT,
    pub sockhandle: *mut pcap_t,
    #[doc = " rx buffers"]
    pub rxbuf: [ec_bufT; 16usize],
    #[doc = " rx buffer status"]
    pub rxbufstat: [::std::os::raw::c_int; 16usize],
    #[doc = " rx MAC source address"]
    pub rxsa: [::std::os::raw::c_int; 16usize],
    #[doc = " temporary rx buffer"]
    pub tempinbuf: ec_bufT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecx_redportt"][::std::mem::size_of::<ecx_redportt>() - 26000usize];
    ["Alignment of ecx_redportt"][::std::mem::align_of::<ecx_redportt>() - 8usize];
    ["Offset of field: ecx_redportt::stack"][::std::mem::offset_of!(ecx_redportt, stack) - 0usize];
    ["Offset of field: ecx_redportt::sockhandle"]
        [::std::mem::offset_of!(ecx_redportt, sockhandle) - 56usize];
    ["Offset of field: ecx_redportt::rxbuf"][::std::mem::offset_of!(ecx_redportt, rxbuf) - 64usize];
    ["Offset of field: ecx_redportt::rxbufstat"]
        [::std::mem::offset_of!(ecx_redportt, rxbufstat) - 24352usize];
    ["Offset of field: ecx_redportt::rxsa"]
        [::std::mem::offset_of!(ecx_redportt, rxsa) - 24416usize];
    ["Offset of field: ecx_redportt::tempinbuf"]
        [::std::mem::offset_of!(ecx_redportt, tempinbuf) - 24480usize];
};
#[doc = " pointer structure to buffers, vars and mutexes for port instantiation"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecx_portt {
    pub stack: ec_stackT,
    pub sockhandle: *mut pcap_t,
    #[doc = " rx buffers"]
    pub rxbuf: [ec_bufT; 16usize],
    #[doc = " rx buffer status"]
    pub rxbufstat: [::std::os::raw::c_int; 16usize],
    #[doc = " rx MAC source address"]
    pub rxsa: [::std::os::raw::c_int; 16usize],
    #[doc = " temporary rx buffer"]
    pub tempinbuf: ec_bufT,
    #[doc = " temporary rx buffer status"]
    pub tempinbufs: ::std::os::raw::c_int,
    #[doc = " transmit buffers"]
    pub txbuf: [ec_bufT; 16usize],
    #[doc = " transmit buffer lengths"]
    pub txbuflength: [::std::os::raw::c_int; 16usize],
    #[doc = " temporary tx buffer"]
    pub txbuf2: ec_bufT,
    #[doc = " temporary tx buffer length"]
    pub txbuflength2: ::std::os::raw::c_int,
    #[doc = " last used frame index"]
    pub lastidx: uint8,
    #[doc = " current redundancy state"]
    pub redstate: ::std::os::raw::c_int,
    #[doc = " pointer to redundancy port and buffers"]
    pub redport: *mut ecx_redportt,
    pub getindex_mutex: CRITICAL_SECTION,
    pub tx_mutex: CRITICAL_SECTION,
    pub rx_mutex: CRITICAL_SECTION,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecx_portt"][::std::mem::size_of::<ecx_portt>() - 52016usize];
    ["Alignment of ecx_portt"][::std::mem::align_of::<ecx_portt>() - 8usize];
    ["Offset of field: ecx_portt::stack"][::std::mem::offset_of!(ecx_portt, stack) - 0usize];
    ["Offset of field: ecx_portt::sockhandle"]
        [::std::mem::offset_of!(ecx_portt, sockhandle) - 56usize];
    ["Offset of field: ecx_portt::rxbuf"][::std::mem::offset_of!(ecx_portt, rxbuf) - 64usize];
    ["Offset of field: ecx_portt::rxbufstat"]
        [::std::mem::offset_of!(ecx_portt, rxbufstat) - 24352usize];
    ["Offset of field: ecx_portt::rxsa"][::std::mem::offset_of!(ecx_portt, rxsa) - 24416usize];
    ["Offset of field: ecx_portt::tempinbuf"]
        [::std::mem::offset_of!(ecx_portt, tempinbuf) - 24480usize];
    ["Offset of field: ecx_portt::tempinbufs"]
        [::std::mem::offset_of!(ecx_portt, tempinbufs) - 26000usize];
    ["Offset of field: ecx_portt::txbuf"][::std::mem::offset_of!(ecx_portt, txbuf) - 26004usize];
    ["Offset of field: ecx_portt::txbuflength"]
        [::std::mem::offset_of!(ecx_portt, txbuflength) - 50292usize];
    ["Offset of field: ecx_portt::txbuf2"][::std::mem::offset_of!(ecx_portt, txbuf2) - 50356usize];
    ["Offset of field: ecx_portt::txbuflength2"]
        [::std::mem::offset_of!(ecx_portt, txbuflength2) - 51876usize];
    ["Offset of field: ecx_portt::lastidx"]
        [::std::mem::offset_of!(ecx_portt, lastidx) - 51880usize];
    ["Offset of field: ecx_portt::redstate"]
        [::std::mem::offset_of!(ecx_portt, redstate) - 51884usize];
    ["Offset of field: ecx_portt::redport"]
        [::std::mem::offset_of!(ecx_portt, redport) - 51888usize];
    ["Offset of field: ecx_portt::getindex_mutex"]
        [::std::mem::offset_of!(ecx_portt, getindex_mutex) - 51896usize];
    ["Offset of field: ecx_portt::tx_mutex"]
        [::std::mem::offset_of!(ecx_portt, tx_mutex) - 51936usize];
    ["Offset of field: ecx_portt::rx_mutex"]
        [::std::mem::offset_of!(ecx_portt, rx_mutex) - 51976usize];
};
unsafe extern "C" {
    pub static priMAC: [uint16; 3usize];
}
unsafe extern "C" {
    pub static secMAC: [uint16; 3usize];
}
unsafe extern "C" {
    pub static mut ecx_port: ecx_portt;
}
unsafe extern "C" {
    pub static mut ecx_redport: ecx_redportt;
}
unsafe extern "C" {
    pub fn ec_setupnic(
        ifname: *const ::std::os::raw::c_char,
        secondary: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_closenic() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_setbufstat(idx: uint8, bufstat: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ec_getindex() -> uint8;
}
unsafe extern "C" {
    pub fn ec_outframe(idx: uint8, sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_outframe_red(idx: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_waitinframe(idx: uint8, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_srconfirm(idx: uint8, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_setupheader(p: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn ecx_setupnic(
        port: *mut ecx_portt,
        ifname: *const ::std::os::raw::c_char,
        secondary: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_closenic(port: *mut ecx_portt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_setbufstat(port: *mut ecx_portt, idx: uint8, bufstat: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn ecx_getindex(port: *mut ecx_portt) -> uint8;
}
unsafe extern "C" {
    pub fn ecx_outframe(
        port: *mut ecx_portt,
        idx: uint8,
        sock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_outframe_red(port: *mut ecx_portt, idx: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_waitinframe(
        port: *mut ecx_portt,
        idx: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_srconfirm(
        port: *mut ecx_portt,
        idx: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_setupdatagram(
        port: *mut ecx_portt,
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_adddatagram(
        port: *mut ecx_portt,
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        more: boolean,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_BWR(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_BRD(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_APRD(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_ARMW(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FRMW(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_APRDw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_FPRD(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FPRDw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_APWRw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_APWR(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FPWRw(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FPWR(
        port: *mut ecx_portt,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LRW(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LRD(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LWR(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_LRWDC(
        port: *mut ecx_portt,
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        DCrs: uint16,
        DCtime: *mut int64,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_setupdatagram(
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_adddatagram(
        frame: *mut ::std::os::raw::c_void,
        com: uint8,
        idx: uint8,
        more: boolean,
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ec_BWR(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_BRD(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_APRD(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_ARMW(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FRMW(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_APRDw(ADP: uint16, ADO: uint16, timeout: ::std::os::raw::c_int) -> uint16;
}
unsafe extern "C" {
    pub fn ec_FPRD(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FPRDw(ADP: uint16, ADO: uint16, timeout: ::std::os::raw::c_int) -> uint16;
}
unsafe extern "C" {
    pub fn ec_APWRw(
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_APWR(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FPWRw(
        ADP: uint16,
        ADO: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FPWR(
        ADP: uint16,
        ADO: uint16,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LRW(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LRD(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LWR(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_LRWDC(
        LogAdr: uint32,
        length: uint16,
        data: *mut ::std::os::raw::c_void,
        DCrs: uint16,
        DCtime: *mut int64,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type ec_adaptert = ec_adapter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_adapter {
    pub name: [::std::os::raw::c_char; 128usize],
    pub desc: [::std::os::raw::c_char; 128usize],
    pub next: *mut ec_adaptert,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_adapter"][::std::mem::size_of::<ec_adapter>() - 264usize];
    ["Alignment of ec_adapter"][::std::mem::align_of::<ec_adapter>() - 8usize];
    ["Offset of field: ec_adapter::name"][::std::mem::offset_of!(ec_adapter, name) - 0usize];
    ["Offset of field: ec_adapter::desc"][::std::mem::offset_of!(ec_adapter, desc) - 128usize];
    ["Offset of field: ec_adapter::next"][::std::mem::offset_of!(ec_adapter, next) - 256usize];
};
#[doc = " record for FMMU"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_fmmu {
    pub LogStart: uint32,
    pub LogLength: uint16,
    pub LogStartbit: uint8,
    pub LogEndbit: uint8,
    pub PhysStart: uint16,
    pub PhysStartBit: uint8,
    pub FMMUtype: uint8,
    pub FMMUactive: uint8,
    pub unused1: uint8,
    pub unused2: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_fmmu"][::std::mem::size_of::<ec_fmmu>() - 16usize];
    ["Alignment of ec_fmmu"][::std::mem::align_of::<ec_fmmu>() - 1usize];
    ["Offset of field: ec_fmmu::LogStart"][::std::mem::offset_of!(ec_fmmu, LogStart) - 0usize];
    ["Offset of field: ec_fmmu::LogLength"][::std::mem::offset_of!(ec_fmmu, LogLength) - 4usize];
    ["Offset of field: ec_fmmu::LogStartbit"]
        [::std::mem::offset_of!(ec_fmmu, LogStartbit) - 6usize];
    ["Offset of field: ec_fmmu::LogEndbit"][::std::mem::offset_of!(ec_fmmu, LogEndbit) - 7usize];
    ["Offset of field: ec_fmmu::PhysStart"][::std::mem::offset_of!(ec_fmmu, PhysStart) - 8usize];
    ["Offset of field: ec_fmmu::PhysStartBit"]
        [::std::mem::offset_of!(ec_fmmu, PhysStartBit) - 10usize];
    ["Offset of field: ec_fmmu::FMMUtype"][::std::mem::offset_of!(ec_fmmu, FMMUtype) - 11usize];
    ["Offset of field: ec_fmmu::FMMUactive"][::std::mem::offset_of!(ec_fmmu, FMMUactive) - 12usize];
    ["Offset of field: ec_fmmu::unused1"][::std::mem::offset_of!(ec_fmmu, unused1) - 13usize];
    ["Offset of field: ec_fmmu::unused2"][::std::mem::offset_of!(ec_fmmu, unused2) - 14usize];
};
#[doc = " record for FMMU"]
pub type ec_fmmut = ec_fmmu;
#[doc = " record for sync manager"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_sm {
    pub StartAddr: uint16,
    pub SMlength: uint16,
    pub SMflags: uint32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_sm"][::std::mem::size_of::<ec_sm>() - 8usize];
    ["Alignment of ec_sm"][::std::mem::align_of::<ec_sm>() - 1usize];
    ["Offset of field: ec_sm::StartAddr"][::std::mem::offset_of!(ec_sm, StartAddr) - 0usize];
    ["Offset of field: ec_sm::SMlength"][::std::mem::offset_of!(ec_sm, SMlength) - 2usize];
    ["Offset of field: ec_sm::SMflags"][::std::mem::offset_of!(ec_sm, SMflags) - 4usize];
};
#[doc = " record for sync manager"]
pub type ec_smt = ec_sm;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_state_status {
    pub State: uint16,
    pub Unused: uint16,
    pub ALstatuscode: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_state_status"][::std::mem::size_of::<ec_state_status>() - 6usize];
    ["Alignment of ec_state_status"][::std::mem::align_of::<ec_state_status>() - 1usize];
    ["Offset of field: ec_state_status::State"]
        [::std::mem::offset_of!(ec_state_status, State) - 0usize];
    ["Offset of field: ec_state_status::Unused"]
        [::std::mem::offset_of!(ec_state_status, Unused) - 2usize];
    ["Offset of field: ec_state_status::ALstatuscode"]
        [::std::mem::offset_of!(ec_state_status, ALstatuscode) - 4usize];
};
#[doc = " Context structure , referenced by all ecx functions"]
pub type ecx_contextt = ecx_context;
#[doc = " for list of ethercat slaves detected"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_slave {
    #[doc = " state of slave"]
    pub state: uint16,
    #[doc = " AL status code"]
    pub ALstatuscode: uint16,
    #[doc = " Configured address"]
    pub configadr: uint16,
    #[doc = " Alias address"]
    pub aliasadr: uint16,
    #[doc = " Manufacturer from EEprom"]
    pub eep_man: uint32,
    #[doc = " ID from EEprom"]
    pub eep_id: uint32,
    #[doc = " revision from EEprom"]
    pub eep_rev: uint32,
    #[doc = " serial number from EEprom"]
    pub eep_sn: uint32,
    #[doc = " Interface type"]
    pub Itype: uint16,
    #[doc = " Device type"]
    pub Dtype: uint16,
    #[doc = " output bits"]
    pub Obits: uint16,
    #[doc = " output bytes, if Obits < 8 then Obytes = 0"]
    pub Obytes: uint32,
    #[doc = " output pointer in IOmap buffer"]
    pub outputs: *mut uint8,
    #[doc = " startbit in first output byte"]
    pub Ostartbit: uint8,
    #[doc = " input bits"]
    pub Ibits: uint16,
    #[doc = " input bytes, if Ibits < 8 then Ibytes = 0"]
    pub Ibytes: uint32,
    #[doc = " input pointer in IOmap buffer"]
    pub inputs: *mut uint8,
    #[doc = " startbit in first input byte"]
    pub Istartbit: uint8,
    #[doc = " SM structure"]
    pub SM: [ec_smt; 8usize],
    #[doc = " SM type 0=unused 1=MbxWr 2=MbxRd 3=Outputs 4=Inputs"]
    pub SMtype: [uint8; 8usize],
    #[doc = " FMMU structure"]
    pub FMMU: [ec_fmmut; 4usize],
    #[doc = " FMMU0 function"]
    pub FMMU0func: uint8,
    #[doc = " FMMU1 function"]
    pub FMMU1func: uint8,
    #[doc = " FMMU2 function"]
    pub FMMU2func: uint8,
    #[doc = " FMMU3 function"]
    pub FMMU3func: uint8,
    #[doc = " length of write mailbox in bytes, if no mailbox then 0"]
    pub mbx_l: uint16,
    #[doc = " mailbox write offset"]
    pub mbx_wo: uint16,
    #[doc = " length of read mailbox in bytes"]
    pub mbx_rl: uint16,
    #[doc = " mailbox read offset"]
    pub mbx_ro: uint16,
    #[doc = " mailbox supported protocols"]
    pub mbx_proto: uint16,
    #[doc = " Counter value of mailbox link layer protocol 1..7"]
    pub mbx_cnt: uint8,
    #[doc = " has DC capability"]
    pub hasdc: boolean,
    #[doc = " Physical type; Ebus, EtherNet combinations"]
    pub ptype: uint8,
    #[doc = " topology: 1 to 3 links"]
    pub topology: uint8,
    #[doc = " active ports bitmap : ....3210 , set if respective port is active"]
    pub activeports: uint8,
    #[doc = " consumed ports bitmap : ....3210, used for internal delay measurement"]
    pub consumedports: uint8,
    #[doc = " slave number for parent, 0=master"]
    pub parent: uint16,
    #[doc = " port number on parent this slave is connected to"]
    pub parentport: uint8,
    #[doc = " port number on this slave the parent is connected to"]
    pub entryport: uint8,
    #[doc = " DC receivetimes on port A"]
    pub DCrtA: int32,
    #[doc = " DC receivetimes on port B"]
    pub DCrtB: int32,
    #[doc = " DC receivetimes on port C"]
    pub DCrtC: int32,
    #[doc = " DC receivetimes on port D"]
    pub DCrtD: int32,
    #[doc = " propagation delay"]
    pub pdelay: int32,
    #[doc = " next DC slave"]
    pub DCnext: uint16,
    #[doc = " previous DC slave"]
    pub DCprevious: uint16,
    #[doc = " DC cycle time in ns"]
    pub DCcycle: int32,
    #[doc = " DC shift from clock modulus boundary"]
    pub DCshift: int32,
    #[doc = " DC sync activation, 0=off, 1=on"]
    pub DCactive: uint8,
    #[doc = " link to config table"]
    pub configindex: uint16,
    #[doc = " link to SII config"]
    pub SIIindex: uint16,
    #[doc = " 1 = 8 bytes per read, 0 = 4 bytes per read"]
    pub eep_8byte: uint8,
    #[doc = " 0 = eeprom to master , 1 = eeprom to PDI"]
    pub eep_pdi: uint8,
    #[doc = " CoE details"]
    pub CoEdetails: uint8,
    #[doc = " FoE details"]
    pub FoEdetails: uint8,
    #[doc = " EoE details"]
    pub EoEdetails: uint8,
    #[doc = " SoE details"]
    pub SoEdetails: uint8,
    #[doc = " E-bus current"]
    pub Ebuscurrent: int16,
    #[doc = " if >0 block use of LRW in processdata"]
    pub blockLRW: uint8,
    #[doc = " group"]
    pub group: uint8,
    #[doc = " first unused FMMU"]
    pub FMMUunused: uint8,
    #[doc = " Boolean for tracking whether the slave is (not) responding, not used/set by the SOEM library"]
    pub islost: boolean,
    #[doc = " registered configuration function PO->SO, (DEPRECATED)"]
    pub PO2SOconfig:
        ::std::option::Option<unsafe extern "C" fn(slave: uint16) -> ::std::os::raw::c_int>,
    #[doc = " registered configuration function PO->SO"]
    pub PO2SOconfigx: ::std::option::Option<
        unsafe extern "C" fn(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int,
    >,
    #[doc = " readable name"]
    pub name: [::std::os::raw::c_char; 41usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_slave"][::std::mem::size_of::<ec_slave>() - 344usize];
    ["Alignment of ec_slave"][::std::mem::align_of::<ec_slave>() - 8usize];
    ["Offset of field: ec_slave::state"][::std::mem::offset_of!(ec_slave, state) - 0usize];
    ["Offset of field: ec_slave::ALstatuscode"]
        [::std::mem::offset_of!(ec_slave, ALstatuscode) - 2usize];
    ["Offset of field: ec_slave::configadr"][::std::mem::offset_of!(ec_slave, configadr) - 4usize];
    ["Offset of field: ec_slave::aliasadr"][::std::mem::offset_of!(ec_slave, aliasadr) - 6usize];
    ["Offset of field: ec_slave::eep_man"][::std::mem::offset_of!(ec_slave, eep_man) - 8usize];
    ["Offset of field: ec_slave::eep_id"][::std::mem::offset_of!(ec_slave, eep_id) - 12usize];
    ["Offset of field: ec_slave::eep_rev"][::std::mem::offset_of!(ec_slave, eep_rev) - 16usize];
    ["Offset of field: ec_slave::eep_sn"][::std::mem::offset_of!(ec_slave, eep_sn) - 20usize];
    ["Offset of field: ec_slave::Itype"][::std::mem::offset_of!(ec_slave, Itype) - 24usize];
    ["Offset of field: ec_slave::Dtype"][::std::mem::offset_of!(ec_slave, Dtype) - 26usize];
    ["Offset of field: ec_slave::Obits"][::std::mem::offset_of!(ec_slave, Obits) - 28usize];
    ["Offset of field: ec_slave::Obytes"][::std::mem::offset_of!(ec_slave, Obytes) - 32usize];
    ["Offset of field: ec_slave::outputs"][::std::mem::offset_of!(ec_slave, outputs) - 40usize];
    ["Offset of field: ec_slave::Ostartbit"][::std::mem::offset_of!(ec_slave, Ostartbit) - 48usize];
    ["Offset of field: ec_slave::Ibits"][::std::mem::offset_of!(ec_slave, Ibits) - 50usize];
    ["Offset of field: ec_slave::Ibytes"][::std::mem::offset_of!(ec_slave, Ibytes) - 52usize];
    ["Offset of field: ec_slave::inputs"][::std::mem::offset_of!(ec_slave, inputs) - 56usize];
    ["Offset of field: ec_slave::Istartbit"][::std::mem::offset_of!(ec_slave, Istartbit) - 64usize];
    ["Offset of field: ec_slave::SM"][::std::mem::offset_of!(ec_slave, SM) - 65usize];
    ["Offset of field: ec_slave::SMtype"][::std::mem::offset_of!(ec_slave, SMtype) - 129usize];
    ["Offset of field: ec_slave::FMMU"][::std::mem::offset_of!(ec_slave, FMMU) - 137usize];
    ["Offset of field: ec_slave::FMMU0func"]
        [::std::mem::offset_of!(ec_slave, FMMU0func) - 201usize];
    ["Offset of field: ec_slave::FMMU1func"]
        [::std::mem::offset_of!(ec_slave, FMMU1func) - 202usize];
    ["Offset of field: ec_slave::FMMU2func"]
        [::std::mem::offset_of!(ec_slave, FMMU2func) - 203usize];
    ["Offset of field: ec_slave::FMMU3func"]
        [::std::mem::offset_of!(ec_slave, FMMU3func) - 204usize];
    ["Offset of field: ec_slave::mbx_l"][::std::mem::offset_of!(ec_slave, mbx_l) - 206usize];
    ["Offset of field: ec_slave::mbx_wo"][::std::mem::offset_of!(ec_slave, mbx_wo) - 208usize];
    ["Offset of field: ec_slave::mbx_rl"][::std::mem::offset_of!(ec_slave, mbx_rl) - 210usize];
    ["Offset of field: ec_slave::mbx_ro"][::std::mem::offset_of!(ec_slave, mbx_ro) - 212usize];
    ["Offset of field: ec_slave::mbx_proto"]
        [::std::mem::offset_of!(ec_slave, mbx_proto) - 214usize];
    ["Offset of field: ec_slave::mbx_cnt"][::std::mem::offset_of!(ec_slave, mbx_cnt) - 216usize];
    ["Offset of field: ec_slave::hasdc"][::std::mem::offset_of!(ec_slave, hasdc) - 217usize];
    ["Offset of field: ec_slave::ptype"][::std::mem::offset_of!(ec_slave, ptype) - 218usize];
    ["Offset of field: ec_slave::topology"][::std::mem::offset_of!(ec_slave, topology) - 219usize];
    ["Offset of field: ec_slave::activeports"]
        [::std::mem::offset_of!(ec_slave, activeports) - 220usize];
    ["Offset of field: ec_slave::consumedports"]
        [::std::mem::offset_of!(ec_slave, consumedports) - 221usize];
    ["Offset of field: ec_slave::parent"][::std::mem::offset_of!(ec_slave, parent) - 222usize];
    ["Offset of field: ec_slave::parentport"]
        [::std::mem::offset_of!(ec_slave, parentport) - 224usize];
    ["Offset of field: ec_slave::entryport"]
        [::std::mem::offset_of!(ec_slave, entryport) - 225usize];
    ["Offset of field: ec_slave::DCrtA"][::std::mem::offset_of!(ec_slave, DCrtA) - 228usize];
    ["Offset of field: ec_slave::DCrtB"][::std::mem::offset_of!(ec_slave, DCrtB) - 232usize];
    ["Offset of field: ec_slave::DCrtC"][::std::mem::offset_of!(ec_slave, DCrtC) - 236usize];
    ["Offset of field: ec_slave::DCrtD"][::std::mem::offset_of!(ec_slave, DCrtD) - 240usize];
    ["Offset of field: ec_slave::pdelay"][::std::mem::offset_of!(ec_slave, pdelay) - 244usize];
    ["Offset of field: ec_slave::DCnext"][::std::mem::offset_of!(ec_slave, DCnext) - 248usize];
    ["Offset of field: ec_slave::DCprevious"]
        [::std::mem::offset_of!(ec_slave, DCprevious) - 250usize];
    ["Offset of field: ec_slave::DCcycle"][::std::mem::offset_of!(ec_slave, DCcycle) - 252usize];
    ["Offset of field: ec_slave::DCshift"][::std::mem::offset_of!(ec_slave, DCshift) - 256usize];
    ["Offset of field: ec_slave::DCactive"][::std::mem::offset_of!(ec_slave, DCactive) - 260usize];
    ["Offset of field: ec_slave::configindex"]
        [::std::mem::offset_of!(ec_slave, configindex) - 262usize];
    ["Offset of field: ec_slave::SIIindex"][::std::mem::offset_of!(ec_slave, SIIindex) - 264usize];
    ["Offset of field: ec_slave::eep_8byte"]
        [::std::mem::offset_of!(ec_slave, eep_8byte) - 266usize];
    ["Offset of field: ec_slave::eep_pdi"][::std::mem::offset_of!(ec_slave, eep_pdi) - 267usize];
    ["Offset of field: ec_slave::CoEdetails"]
        [::std::mem::offset_of!(ec_slave, CoEdetails) - 268usize];
    ["Offset of field: ec_slave::FoEdetails"]
        [::std::mem::offset_of!(ec_slave, FoEdetails) - 269usize];
    ["Offset of field: ec_slave::EoEdetails"]
        [::std::mem::offset_of!(ec_slave, EoEdetails) - 270usize];
    ["Offset of field: ec_slave::SoEdetails"]
        [::std::mem::offset_of!(ec_slave, SoEdetails) - 271usize];
    ["Offset of field: ec_slave::Ebuscurrent"]
        [::std::mem::offset_of!(ec_slave, Ebuscurrent) - 272usize];
    ["Offset of field: ec_slave::blockLRW"][::std::mem::offset_of!(ec_slave, blockLRW) - 274usize];
    ["Offset of field: ec_slave::group"][::std::mem::offset_of!(ec_slave, group) - 275usize];
    ["Offset of field: ec_slave::FMMUunused"]
        [::std::mem::offset_of!(ec_slave, FMMUunused) - 276usize];
    ["Offset of field: ec_slave::islost"][::std::mem::offset_of!(ec_slave, islost) - 277usize];
    ["Offset of field: ec_slave::PO2SOconfig"]
        [::std::mem::offset_of!(ec_slave, PO2SOconfig) - 280usize];
    ["Offset of field: ec_slave::PO2SOconfigx"]
        [::std::mem::offset_of!(ec_slave, PO2SOconfigx) - 288usize];
    ["Offset of field: ec_slave::name"][::std::mem::offset_of!(ec_slave, name) - 296usize];
};
#[doc = " for list of ethercat slaves detected"]
pub type ec_slavet = ec_slave;
#[doc = " for list of ethercat slave groups"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_group {
    #[doc = " logical start address for this group"]
    pub logstartaddr: uint32,
    #[doc = " output bytes, if Obits < 8 then Obytes = 0"]
    pub Obytes: uint32,
    #[doc = " output pointer in IOmap buffer"]
    pub outputs: *mut uint8,
    #[doc = " input bytes, if Ibits < 8 then Ibytes = 0"]
    pub Ibytes: uint32,
    #[doc = " input pointer in IOmap buffer"]
    pub inputs: *mut uint8,
    #[doc = " has DC capabillity"]
    pub hasdc: boolean,
    #[doc = " next DC slave"]
    pub DCnext: uint16,
    #[doc = " E-bus current"]
    pub Ebuscurrent: int16,
    #[doc = " if >0 block use of LRW in processdata"]
    pub blockLRW: uint8,
    #[doc = " IO segments used"]
    pub nsegments: uint16,
    #[doc = " 1st input segment"]
    pub Isegment: uint16,
    #[doc = " Offset in input segment"]
    pub Ioffset: uint16,
    #[doc = " Expected workcounter outputs"]
    pub outputsWKC: uint16,
    #[doc = " Expected workcounter inputs"]
    pub inputsWKC: uint16,
    #[doc = " check slave states"]
    pub docheckstate: boolean,
    #[doc = " IO segmentation list. Datagrams must not break SM in two."]
    pub IOsegment: [uint32; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_group"][::std::mem::size_of::<ec_group>() - 312usize];
    ["Alignment of ec_group"][::std::mem::align_of::<ec_group>() - 8usize];
    ["Offset of field: ec_group::logstartaddr"]
        [::std::mem::offset_of!(ec_group, logstartaddr) - 0usize];
    ["Offset of field: ec_group::Obytes"][::std::mem::offset_of!(ec_group, Obytes) - 4usize];
    ["Offset of field: ec_group::outputs"][::std::mem::offset_of!(ec_group, outputs) - 8usize];
    ["Offset of field: ec_group::Ibytes"][::std::mem::offset_of!(ec_group, Ibytes) - 16usize];
    ["Offset of field: ec_group::inputs"][::std::mem::offset_of!(ec_group, inputs) - 24usize];
    ["Offset of field: ec_group::hasdc"][::std::mem::offset_of!(ec_group, hasdc) - 32usize];
    ["Offset of field: ec_group::DCnext"][::std::mem::offset_of!(ec_group, DCnext) - 34usize];
    ["Offset of field: ec_group::Ebuscurrent"]
        [::std::mem::offset_of!(ec_group, Ebuscurrent) - 36usize];
    ["Offset of field: ec_group::blockLRW"][::std::mem::offset_of!(ec_group, blockLRW) - 38usize];
    ["Offset of field: ec_group::nsegments"][::std::mem::offset_of!(ec_group, nsegments) - 40usize];
    ["Offset of field: ec_group::Isegment"][::std::mem::offset_of!(ec_group, Isegment) - 42usize];
    ["Offset of field: ec_group::Ioffset"][::std::mem::offset_of!(ec_group, Ioffset) - 44usize];
    ["Offset of field: ec_group::outputsWKC"]
        [::std::mem::offset_of!(ec_group, outputsWKC) - 46usize];
    ["Offset of field: ec_group::inputsWKC"][::std::mem::offset_of!(ec_group, inputsWKC) - 48usize];
    ["Offset of field: ec_group::docheckstate"]
        [::std::mem::offset_of!(ec_group, docheckstate) - 50usize];
    ["Offset of field: ec_group::IOsegment"][::std::mem::offset_of!(ec_group, IOsegment) - 52usize];
};
#[doc = " for list of ethercat slave groups"]
pub type ec_groupt = ec_group;
#[doc = " SII FMMU structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_eepromFMMU {
    pub Startpos: uint16,
    pub nFMMU: uint8,
    pub FMMU0: uint8,
    pub FMMU1: uint8,
    pub FMMU2: uint8,
    pub FMMU3: uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_eepromFMMU"][::std::mem::size_of::<ec_eepromFMMU>() - 8usize];
    ["Alignment of ec_eepromFMMU"][::std::mem::align_of::<ec_eepromFMMU>() - 2usize];
    ["Offset of field: ec_eepromFMMU::Startpos"]
        [::std::mem::offset_of!(ec_eepromFMMU, Startpos) - 0usize];
    ["Offset of field: ec_eepromFMMU::nFMMU"]
        [::std::mem::offset_of!(ec_eepromFMMU, nFMMU) - 2usize];
    ["Offset of field: ec_eepromFMMU::FMMU0"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU0) - 3usize];
    ["Offset of field: ec_eepromFMMU::FMMU1"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU1) - 4usize];
    ["Offset of field: ec_eepromFMMU::FMMU2"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU2) - 5usize];
    ["Offset of field: ec_eepromFMMU::FMMU3"]
        [::std::mem::offset_of!(ec_eepromFMMU, FMMU3) - 6usize];
};
#[doc = " SII FMMU structure"]
pub type ec_eepromFMMUt = ec_eepromFMMU;
#[doc = " SII SM structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_eepromSM {
    pub Startpos: uint16,
    pub nSM: uint8,
    pub PhStart: uint16,
    pub Plength: uint16,
    pub Creg: uint8,
    pub Sreg: uint8,
    pub Activate: uint8,
    pub PDIctrl: uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_eepromSM"][::std::mem::size_of::<ec_eepromSM>() - 12usize];
    ["Alignment of ec_eepromSM"][::std::mem::align_of::<ec_eepromSM>() - 2usize];
    ["Offset of field: ec_eepromSM::Startpos"]
        [::std::mem::offset_of!(ec_eepromSM, Startpos) - 0usize];
    ["Offset of field: ec_eepromSM::nSM"][::std::mem::offset_of!(ec_eepromSM, nSM) - 2usize];
    ["Offset of field: ec_eepromSM::PhStart"]
        [::std::mem::offset_of!(ec_eepromSM, PhStart) - 4usize];
    ["Offset of field: ec_eepromSM::Plength"]
        [::std::mem::offset_of!(ec_eepromSM, Plength) - 6usize];
    ["Offset of field: ec_eepromSM::Creg"][::std::mem::offset_of!(ec_eepromSM, Creg) - 8usize];
    ["Offset of field: ec_eepromSM::Sreg"][::std::mem::offset_of!(ec_eepromSM, Sreg) - 9usize];
    ["Offset of field: ec_eepromSM::Activate"]
        [::std::mem::offset_of!(ec_eepromSM, Activate) - 10usize];
    ["Offset of field: ec_eepromSM::PDIctrl"]
        [::std::mem::offset_of!(ec_eepromSM, PDIctrl) - 11usize];
};
#[doc = " SII SM structure"]
pub type ec_eepromSMt = ec_eepromSM;
#[doc = " record to store rxPDO and txPDO table from eeprom"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_eepromPDO {
    pub Startpos: uint16,
    pub Length: uint16,
    pub nPDO: uint16,
    pub Index: [uint16; 512usize],
    pub SyncM: [uint16; 512usize],
    pub BitSize: [uint16; 512usize],
    pub SMbitsize: [uint16; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_eepromPDO"][::std::mem::size_of::<ec_eepromPDO>() - 3094usize];
    ["Alignment of ec_eepromPDO"][::std::mem::align_of::<ec_eepromPDO>() - 2usize];
    ["Offset of field: ec_eepromPDO::Startpos"]
        [::std::mem::offset_of!(ec_eepromPDO, Startpos) - 0usize];
    ["Offset of field: ec_eepromPDO::Length"]
        [::std::mem::offset_of!(ec_eepromPDO, Length) - 2usize];
    ["Offset of field: ec_eepromPDO::nPDO"][::std::mem::offset_of!(ec_eepromPDO, nPDO) - 4usize];
    ["Offset of field: ec_eepromPDO::Index"][::std::mem::offset_of!(ec_eepromPDO, Index) - 6usize];
    ["Offset of field: ec_eepromPDO::SyncM"]
        [::std::mem::offset_of!(ec_eepromPDO, SyncM) - 1030usize];
    ["Offset of field: ec_eepromPDO::BitSize"]
        [::std::mem::offset_of!(ec_eepromPDO, BitSize) - 2054usize];
    ["Offset of field: ec_eepromPDO::SMbitsize"]
        [::std::mem::offset_of!(ec_eepromPDO, SMbitsize) - 3078usize];
};
#[doc = " record to store rxPDO and txPDO table from eeprom"]
pub type ec_eepromPDOt = ec_eepromPDO;
#[doc = " mailbox buffer array"]
pub type ec_mbxbuft = [uint8; 1487usize];
#[doc = " standard ethercat mailbox header"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_mbxheader {
    pub length: uint16,
    pub address: uint16,
    pub priority: uint8,
    pub mbxtype: uint8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_mbxheader"][::std::mem::size_of::<ec_mbxheader>() - 6usize];
    ["Alignment of ec_mbxheader"][::std::mem::align_of::<ec_mbxheader>() - 1usize];
    ["Offset of field: ec_mbxheader::length"]
        [::std::mem::offset_of!(ec_mbxheader, length) - 0usize];
    ["Offset of field: ec_mbxheader::address"]
        [::std::mem::offset_of!(ec_mbxheader, address) - 2usize];
    ["Offset of field: ec_mbxheader::priority"]
        [::std::mem::offset_of!(ec_mbxheader, priority) - 4usize];
    ["Offset of field: ec_mbxheader::mbxtype"]
        [::std::mem::offset_of!(ec_mbxheader, mbxtype) - 5usize];
};
#[doc = " standard ethercat mailbox header"]
pub type ec_mbxheadert = ec_mbxheader;
#[doc = " ALstatus and ALstatus code"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_alstatus {
    pub alstatus: uint16,
    pub unused: uint16,
    pub alstatuscode: uint16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_alstatus"][::std::mem::size_of::<ec_alstatus>() - 6usize];
    ["Alignment of ec_alstatus"][::std::mem::align_of::<ec_alstatus>() - 1usize];
    ["Offset of field: ec_alstatus::alstatus"]
        [::std::mem::offset_of!(ec_alstatus, alstatus) - 0usize];
    ["Offset of field: ec_alstatus::unused"][::std::mem::offset_of!(ec_alstatus, unused) - 2usize];
    ["Offset of field: ec_alstatus::alstatuscode"]
        [::std::mem::offset_of!(ec_alstatus, alstatuscode) - 4usize];
};
#[doc = " ALstatus and ALstatus code"]
pub type ec_alstatust = ec_alstatus;
#[doc = " stack structure to store segmented LRD/LWR/LRW constructs"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_idxstack {
    pub pushed: uint8,
    pub pulled: uint8,
    pub idx: [uint8; 16usize],
    pub data: [*mut ::std::os::raw::c_void; 16usize],
    pub length: [uint16; 16usize],
    pub dcoffset: [uint16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_idxstack"][::std::mem::size_of::<ec_idxstack>() - 216usize];
    ["Alignment of ec_idxstack"][::std::mem::align_of::<ec_idxstack>() - 8usize];
    ["Offset of field: ec_idxstack::pushed"][::std::mem::offset_of!(ec_idxstack, pushed) - 0usize];
    ["Offset of field: ec_idxstack::pulled"][::std::mem::offset_of!(ec_idxstack, pulled) - 1usize];
    ["Offset of field: ec_idxstack::idx"][::std::mem::offset_of!(ec_idxstack, idx) - 2usize];
    ["Offset of field: ec_idxstack::data"][::std::mem::offset_of!(ec_idxstack, data) - 24usize];
    ["Offset of field: ec_idxstack::length"]
        [::std::mem::offset_of!(ec_idxstack, length) - 152usize];
    ["Offset of field: ec_idxstack::dcoffset"]
        [::std::mem::offset_of!(ec_idxstack, dcoffset) - 184usize];
};
#[doc = " stack structure to store segmented LRD/LWR/LRW constructs"]
pub type ec_idxstackT = ec_idxstack;
#[doc = " ringbuf for error storage"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ec_ering {
    pub head: int16,
    pub tail: int16,
    pub Error: [ec_errort; 65usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_ering"][::std::mem::size_of::<ec_ering>() - 1824usize];
    ["Alignment of ec_ering"][::std::mem::align_of::<ec_ering>() - 4usize];
    ["Offset of field: ec_ering::head"][::std::mem::offset_of!(ec_ering, head) - 0usize];
    ["Offset of field: ec_ering::tail"][::std::mem::offset_of!(ec_ering, tail) - 2usize];
    ["Offset of field: ec_ering::Error"][::std::mem::offset_of!(ec_ering, Error) - 4usize];
};
#[doc = " ringbuf for error storage"]
pub type ec_eringt = ec_ering;
#[doc = " SyncManager Communication Type structure for CA"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SMcommtype {
    pub n: uint8,
    pub nu1: uint8,
    pub SMtype: [uint8; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SMcommtype"][::std::mem::size_of::<ec_SMcommtype>() - 10usize];
    ["Alignment of ec_SMcommtype"][::std::mem::align_of::<ec_SMcommtype>() - 1usize];
    ["Offset of field: ec_SMcommtype::n"][::std::mem::offset_of!(ec_SMcommtype, n) - 0usize];
    ["Offset of field: ec_SMcommtype::nu1"][::std::mem::offset_of!(ec_SMcommtype, nu1) - 1usize];
    ["Offset of field: ec_SMcommtype::SMtype"]
        [::std::mem::offset_of!(ec_SMcommtype, SMtype) - 2usize];
};
#[doc = " SyncManager Communication Type structure for CA"]
pub type ec_SMcommtypet = ec_SMcommtype;
#[doc = " SDO assign structure for CA"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_PDOassign {
    pub n: uint8,
    pub nu1: uint8,
    pub index: [uint16; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_PDOassign"][::std::mem::size_of::<ec_PDOassign>() - 514usize];
    ["Alignment of ec_PDOassign"][::std::mem::align_of::<ec_PDOassign>() - 1usize];
    ["Offset of field: ec_PDOassign::n"][::std::mem::offset_of!(ec_PDOassign, n) - 0usize];
    ["Offset of field: ec_PDOassign::nu1"][::std::mem::offset_of!(ec_PDOassign, nu1) - 1usize];
    ["Offset of field: ec_PDOassign::index"][::std::mem::offset_of!(ec_PDOassign, index) - 2usize];
};
#[doc = " SDO assign structure for CA"]
pub type ec_PDOassignt = ec_PDOassign;
#[doc = " SDO description structure for CA"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_PDOdesc {
    pub n: uint8,
    pub nu1: uint8,
    pub PDO: [uint32; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_PDOdesc"][::std::mem::size_of::<ec_PDOdesc>() - 1026usize];
    ["Alignment of ec_PDOdesc"][::std::mem::align_of::<ec_PDOdesc>() - 1usize];
    ["Offset of field: ec_PDOdesc::n"][::std::mem::offset_of!(ec_PDOdesc, n) - 0usize];
    ["Offset of field: ec_PDOdesc::nu1"][::std::mem::offset_of!(ec_PDOdesc, nu1) - 1usize];
    ["Offset of field: ec_PDOdesc::PDO"][::std::mem::offset_of!(ec_PDOdesc, PDO) - 2usize];
};
#[doc = " SDO description structure for CA"]
pub type ec_PDOdesct = ec_PDOdesc;
#[doc = " Context structure , referenced by all ecx functions"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecx_context {
    #[doc = " port reference, may include red_port"]
    pub port: *mut ecx_portt,
    #[doc = " slavelist reference"]
    pub slavelist: *mut ec_slavet,
    #[doc = " number of slaves found in configuration"]
    pub slavecount: *mut ::std::os::raw::c_int,
    #[doc = " maximum number of slaves allowed in slavelist"]
    pub maxslave: ::std::os::raw::c_int,
    #[doc = " grouplist reference"]
    pub grouplist: *mut ec_groupt,
    #[doc = " maximum number of groups allowed in grouplist"]
    pub maxgroup: ::std::os::raw::c_int,
    #[doc = " internal, reference to eeprom cache buffer"]
    pub esibuf: *mut uint8,
    #[doc = " internal, reference to eeprom cache map"]
    pub esimap: *mut uint32,
    #[doc = " internal, current slave for eeprom cache"]
    pub esislave: uint16,
    #[doc = " internal, reference to error list"]
    pub elist: *mut ec_eringt,
    #[doc = " internal, reference to processdata stack buffer info"]
    pub idxstack: *mut ec_idxstackT,
    #[doc = " reference to ecaterror state"]
    pub ecaterror: *mut boolean,
    #[doc = " reference to last DC time from slaves"]
    pub DCtime: *mut int64,
    #[doc = " internal, SM buffer"]
    pub SMcommtype: *mut ec_SMcommtypet,
    #[doc = " internal, PDO assign list"]
    pub PDOassign: *mut ec_PDOassignt,
    #[doc = " internal, PDO description list"]
    pub PDOdesc: *mut ec_PDOdesct,
    #[doc = " internal, SM list from eeprom"]
    pub eepSM: *mut ec_eepromSMt,
    #[doc = " internal, FMMU list from eeprom"]
    pub eepFMMU: *mut ec_eepromFMMUt,
    #[doc = " registered FoE hook"]
    pub FOEhook: ::std::option::Option<
        unsafe extern "C" fn(
            slave: uint16,
            packetnumber: ::std::os::raw::c_int,
            datasize: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " registered EoE hook"]
    pub EOEhook: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ecx_contextt,
            slave: uint16,
            eoembx: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " flag to control legacy automatic state change or manual state change"]
    pub manualstatechange: ::std::os::raw::c_int,
    #[doc = " userdata, promotes application configuration esp. in EC_VER2 with multiple\n ec_context instances. Note: userdata memory is managed by application, not SOEM"]
    pub userdata: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecx_context"][::std::mem::size_of::<ecx_context>() - 176usize];
    ["Alignment of ecx_context"][::std::mem::align_of::<ecx_context>() - 8usize];
    ["Offset of field: ecx_context::port"][::std::mem::offset_of!(ecx_context, port) - 0usize];
    ["Offset of field: ecx_context::slavelist"]
        [::std::mem::offset_of!(ecx_context, slavelist) - 8usize];
    ["Offset of field: ecx_context::slavecount"]
        [::std::mem::offset_of!(ecx_context, slavecount) - 16usize];
    ["Offset of field: ecx_context::maxslave"]
        [::std::mem::offset_of!(ecx_context, maxslave) - 24usize];
    ["Offset of field: ecx_context::grouplist"]
        [::std::mem::offset_of!(ecx_context, grouplist) - 32usize];
    ["Offset of field: ecx_context::maxgroup"]
        [::std::mem::offset_of!(ecx_context, maxgroup) - 40usize];
    ["Offset of field: ecx_context::esibuf"][::std::mem::offset_of!(ecx_context, esibuf) - 48usize];
    ["Offset of field: ecx_context::esimap"][::std::mem::offset_of!(ecx_context, esimap) - 56usize];
    ["Offset of field: ecx_context::esislave"]
        [::std::mem::offset_of!(ecx_context, esislave) - 64usize];
    ["Offset of field: ecx_context::elist"][::std::mem::offset_of!(ecx_context, elist) - 72usize];
    ["Offset of field: ecx_context::idxstack"]
        [::std::mem::offset_of!(ecx_context, idxstack) - 80usize];
    ["Offset of field: ecx_context::ecaterror"]
        [::std::mem::offset_of!(ecx_context, ecaterror) - 88usize];
    ["Offset of field: ecx_context::DCtime"][::std::mem::offset_of!(ecx_context, DCtime) - 96usize];
    ["Offset of field: ecx_context::SMcommtype"]
        [::std::mem::offset_of!(ecx_context, SMcommtype) - 104usize];
    ["Offset of field: ecx_context::PDOassign"]
        [::std::mem::offset_of!(ecx_context, PDOassign) - 112usize];
    ["Offset of field: ecx_context::PDOdesc"]
        [::std::mem::offset_of!(ecx_context, PDOdesc) - 120usize];
    ["Offset of field: ecx_context::eepSM"][::std::mem::offset_of!(ecx_context, eepSM) - 128usize];
    ["Offset of field: ecx_context::eepFMMU"]
        [::std::mem::offset_of!(ecx_context, eepFMMU) - 136usize];
    ["Offset of field: ecx_context::FOEhook"]
        [::std::mem::offset_of!(ecx_context, FOEhook) - 144usize];
    ["Offset of field: ecx_context::EOEhook"]
        [::std::mem::offset_of!(ecx_context, EOEhook) - 152usize];
    ["Offset of field: ecx_context::manualstatechange"]
        [::std::mem::offset_of!(ecx_context, manualstatechange) - 160usize];
    ["Offset of field: ecx_context::userdata"]
        [::std::mem::offset_of!(ecx_context, userdata) - 168usize];
};
unsafe extern "C" {
    #[doc = " global struct to hold default master context"]
    pub static mut ecx_context: ecx_contextt;
}
unsafe extern "C" {
    #[doc = " main slave data structure array"]
    pub static mut ec_slave: [ec_slavet; 200usize];
}
unsafe extern "C" {
    #[doc = " number of slaves found by configuration function"]
    pub static mut ec_slavecount: ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " slave group structure"]
    pub static mut ec_group: [ec_groupt; 2usize];
}
unsafe extern "C" {
    pub static mut EcatError: boolean;
}
unsafe extern "C" {
    pub static mut ec_DCtime: int64;
}
unsafe extern "C" {
    pub fn ec_pusherror(Ec: *const ec_errort);
}
unsafe extern "C" {
    pub fn ec_poperror(Ec: *mut ec_errort) -> boolean;
}
unsafe extern "C" {
    pub fn ec_iserror() -> boolean;
}
unsafe extern "C" {
    pub fn ec_packeterror(Slave: uint16, Index: uint16, SubIdx: uint8, ErrorCode: uint16);
}
unsafe extern "C" {
    pub fn ec_init(ifname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_init_redundant(
        ifname: *const ::std::os::raw::c_char,
        if2name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_close();
}
unsafe extern "C" {
    pub fn ec_siigetbyte(slave: uint16, address: uint16) -> uint8;
}
unsafe extern "C" {
    pub fn ec_siifind(slave: uint16, cat: uint16) -> int16;
}
unsafe extern "C" {
    pub fn ec_siistring(str_: *mut ::std::os::raw::c_char, slave: uint16, Sn: uint16);
}
unsafe extern "C" {
    pub fn ec_siiFMMU(slave: uint16, FMMU: *mut ec_eepromFMMUt) -> uint16;
}
unsafe extern "C" {
    pub fn ec_siiSM(slave: uint16, SM: *mut ec_eepromSMt) -> uint16;
}
unsafe extern "C" {
    pub fn ec_siiSMnext(slave: uint16, SM: *mut ec_eepromSMt, n: uint16) -> uint16;
}
unsafe extern "C" {
    pub fn ec_siiPDO(slave: uint16, PDO: *mut ec_eepromPDOt, t: uint8) -> uint32;
}
unsafe extern "C" {
    pub fn ec_readstate() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_writestate(slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_statecheck(slave: uint16, reqstate: uint16, timeout: ::std::os::raw::c_int)
    -> uint16;
}
unsafe extern "C" {
    pub fn ec_mbxempty(slave: uint16, timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_mbxsend(
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_mbxreceive(
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_esidump(slave: uint16, esibuf: *mut uint8);
}
unsafe extern "C" {
    pub fn ec_readeeprom(slave: uint16, eeproma: uint16, timeout: ::std::os::raw::c_int) -> uint32;
}
unsafe extern "C" {
    pub fn ec_writeeeprom(
        slave: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_eeprom2master(slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_eeprom2pdi(slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readeepromAP(
        aiadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ec_writeeepromAP(
        aiadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readeepromFP(
        configadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ec_writeeepromFP(
        configadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readeeprom1(slave: uint16, eeproma: uint16);
}
unsafe extern "C" {
    pub fn ec_readeeprom2(slave: uint16, timeout: ::std::os::raw::c_int) -> uint32;
}
unsafe extern "C" {
    pub fn ec_send_processdata_group(group: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_send_overlap_processdata_group(group: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_receive_processdata_group(
        group: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_send_processdata() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_send_overlap_processdata() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_receive_processdata(timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_find_adapters() -> *mut ec_adaptert;
}
unsafe extern "C" {
    pub fn ec_free_adapters(adapter: *mut ec_adaptert);
}
unsafe extern "C" {
    pub fn ec_nextmbxcnt(cnt: uint8) -> uint8;
}
unsafe extern "C" {
    pub fn ec_clearmbx(Mbx: *mut ec_mbxbuft);
}
unsafe extern "C" {
    pub fn ecx_pusherror(context: *mut ecx_contextt, Ec: *const ec_errort);
}
unsafe extern "C" {
    pub fn ecx_poperror(context: *mut ecx_contextt, Ec: *mut ec_errort) -> boolean;
}
unsafe extern "C" {
    pub fn ecx_iserror(context: *mut ecx_contextt) -> boolean;
}
unsafe extern "C" {
    pub fn ecx_packeterror(
        context: *mut ecx_contextt,
        Slave: uint16,
        Index: uint16,
        SubIdx: uint8,
        ErrorCode: uint16,
    );
}
unsafe extern "C" {
    pub fn ecx_init(
        context: *mut ecx_contextt,
        ifname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_init_redundant(
        context: *mut ecx_contextt,
        redport: *mut ecx_redportt,
        ifname: *const ::std::os::raw::c_char,
        if2name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_close(context: *mut ecx_contextt);
}
unsafe extern "C" {
    pub fn ecx_siigetbyte(context: *mut ecx_contextt, slave: uint16, address: uint16) -> uint8;
}
unsafe extern "C" {
    pub fn ecx_siifind(context: *mut ecx_contextt, slave: uint16, cat: uint16) -> int16;
}
unsafe extern "C" {
    pub fn ecx_siistring(
        context: *mut ecx_contextt,
        str_: *mut ::std::os::raw::c_char,
        slave: uint16,
        Sn: uint16,
    );
}
unsafe extern "C" {
    pub fn ecx_siiFMMU(
        context: *mut ecx_contextt,
        slave: uint16,
        FMMU: *mut ec_eepromFMMUt,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_siiSM(context: *mut ecx_contextt, slave: uint16, SM: *mut ec_eepromSMt) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_siiSMnext(
        context: *mut ecx_contextt,
        slave: uint16,
        SM: *mut ec_eepromSMt,
        n: uint16,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_siiPDO(
        context: *mut ecx_contextt,
        slave: uint16,
        PDO: *mut ec_eepromPDOt,
        t: uint8,
    ) -> uint32;
}
unsafe extern "C" {
    pub fn ecx_readstate(context: *mut ecx_contextt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_writestate(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_statecheck(
        context: *mut ecx_contextt,
        slave: uint16,
        reqstate: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint16;
}
unsafe extern "C" {
    pub fn ecx_mbxempty(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_mbxsend(
        context: *mut ecx_contextt,
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_mbxreceive(
        context: *mut ecx_contextt,
        slave: uint16,
        mbx: *mut ec_mbxbuft,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_esidump(context: *mut ecx_contextt, slave: uint16, esibuf: *mut uint8);
}
unsafe extern "C" {
    pub fn ecx_readeeprom(
        context: *mut ecx_contextt,
        slave: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint32;
}
unsafe extern "C" {
    pub fn ecx_writeeeprom(
        context: *mut ecx_contextt,
        slave: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_eeprom2master(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_eeprom2pdi(context: *mut ecx_contextt, slave: uint16) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readeepromAP(
        context: *mut ecx_contextt,
        aiadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ecx_writeeepromAP(
        context: *mut ecx_contextt,
        aiadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readeepromFP(
        context: *mut ecx_contextt,
        configadr: uint16,
        eeproma: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint64;
}
unsafe extern "C" {
    pub fn ecx_writeeepromFP(
        context: *mut ecx_contextt,
        configadr: uint16,
        eeproma: uint16,
        data: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readeeprom1(context: *mut ecx_contextt, slave: uint16, eeproma: uint16);
}
unsafe extern "C" {
    pub fn ecx_readeeprom2(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> uint32;
}
unsafe extern "C" {
    pub fn ecx_send_overlap_processdata_group(
        context: *mut ecx_contextt,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_receive_processdata_group(
        context: *mut ecx_contextt,
        group: uint8,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_send_processdata(context: *mut ecx_contextt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_send_overlap_processdata(context: *mut ecx_contextt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_receive_processdata(
        context: *mut ecx_contextt,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_send_processdata_group(
        context: *mut ecx_contextt,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_configdc() -> boolean;
}
unsafe extern "C" {
    pub fn ec_dcsync0(slave: uint16, act: boolean, CyclTime: uint32, CyclShift: int32);
}
unsafe extern "C" {
    pub fn ec_dcsync01(
        slave: uint16,
        act: boolean,
        CyclTime0: uint32,
        CyclTime1: uint32,
        CyclShift: int32,
    );
}
unsafe extern "C" {
    pub fn ecx_configdc(context: *mut ecx_contextt) -> boolean;
}
unsafe extern "C" {
    pub fn ecx_dcsync0(
        context: *mut ecx_contextt,
        slave: uint16,
        act: boolean,
        CyclTime: uint32,
        CyclShift: int32,
    );
}
unsafe extern "C" {
    pub fn ecx_dcsync01(
        context: *mut ecx_contextt,
        slave: uint16,
        act: boolean,
        CyclTime0: uint32,
        CyclTime1: uint32,
        CyclShift: int32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_ODlistt {
    #[doc = " slave number"]
    pub Slave: uint16,
    #[doc = " number of entries in list"]
    pub Entries: uint16,
    #[doc = " array of indexes"]
    pub Index: [uint16; 1024usize],
    #[doc = " array of datatypes, see EtherCAT specification"]
    pub DataType: [uint16; 1024usize],
    #[doc = " array of object codes, see EtherCAT specification"]
    pub ObjectCode: [uint8; 1024usize],
    #[doc = " number of subindexes for each index"]
    pub MaxSub: [uint8; 1024usize],
    #[doc = " textual description of each index"]
    pub Name: [[::std::os::raw::c_char; 41usize]; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_ODlistt"][::std::mem::size_of::<ec_ODlistt>() - 48132usize];
    ["Alignment of ec_ODlistt"][::std::mem::align_of::<ec_ODlistt>() - 2usize];
    ["Offset of field: ec_ODlistt::Slave"][::std::mem::offset_of!(ec_ODlistt, Slave) - 0usize];
    ["Offset of field: ec_ODlistt::Entries"][::std::mem::offset_of!(ec_ODlistt, Entries) - 2usize];
    ["Offset of field: ec_ODlistt::Index"][::std::mem::offset_of!(ec_ODlistt, Index) - 4usize];
    ["Offset of field: ec_ODlistt::DataType"]
        [::std::mem::offset_of!(ec_ODlistt, DataType) - 2052usize];
    ["Offset of field: ec_ODlistt::ObjectCode"]
        [::std::mem::offset_of!(ec_ODlistt, ObjectCode) - 4100usize];
    ["Offset of field: ec_ODlistt::MaxSub"][::std::mem::offset_of!(ec_ODlistt, MaxSub) - 5124usize];
    ["Offset of field: ec_ODlistt::Name"][::std::mem::offset_of!(ec_ODlistt, Name) - 6148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_OElistt {
    #[doc = " number of entries in list"]
    pub Entries: uint16,
    #[doc = " array of value infos, see EtherCAT specification"]
    pub ValueInfo: [uint8; 256usize],
    #[doc = " array of value infos, see EtherCAT specification"]
    pub DataType: [uint16; 256usize],
    #[doc = " array of bit lengths, see EtherCAT specification"]
    pub BitLength: [uint16; 256usize],
    #[doc = " array of object access bits, see EtherCAT specification"]
    pub ObjAccess: [uint16; 256usize],
    #[doc = " textual description of each index"]
    pub Name: [[::std::os::raw::c_char; 41usize]; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_OElistt"][::std::mem::size_of::<ec_OElistt>() - 12290usize];
    ["Alignment of ec_OElistt"][::std::mem::align_of::<ec_OElistt>() - 2usize];
    ["Offset of field: ec_OElistt::Entries"][::std::mem::offset_of!(ec_OElistt, Entries) - 0usize];
    ["Offset of field: ec_OElistt::ValueInfo"]
        [::std::mem::offset_of!(ec_OElistt, ValueInfo) - 2usize];
    ["Offset of field: ec_OElistt::DataType"]
        [::std::mem::offset_of!(ec_OElistt, DataType) - 258usize];
    ["Offset of field: ec_OElistt::BitLength"]
        [::std::mem::offset_of!(ec_OElistt, BitLength) - 770usize];
    ["Offset of field: ec_OElistt::ObjAccess"]
        [::std::mem::offset_of!(ec_OElistt, ObjAccess) - 1282usize];
    ["Offset of field: ec_OElistt::Name"][::std::mem::offset_of!(ec_OElistt, Name) - 1794usize];
};
unsafe extern "C" {
    pub fn ec_SDOerror(Slave: uint16, Index: uint16, SubIdx: uint8, AbortCode: int32);
}
unsafe extern "C" {
    pub fn ec_SDOread(
        slave: uint16,
        index: uint16,
        subindex: uint8,
        CA: boolean,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_SDOwrite(
        Slave: uint16,
        Index: uint16,
        SubIndex: uint8,
        CA: boolean,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_RxPDO(
        Slave: uint16,
        RxPDOnumber: uint16,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_TxPDO(
        slave: uint16,
        TxPDOnumber: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readPDOmap(
        Slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readPDOmapCA(
        Slave: uint16,
        Thread_n: ::std::os::raw::c_int,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readODlist(Slave: uint16, pODlist: *mut ec_ODlistt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readODdescription(Item: uint16, pODlist: *mut ec_ODlistt) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readOEsingle(
        Item: uint16,
        SubI: uint8,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readOE(
        Item: uint16,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SDOerror(
        context: *mut ecx_contextt,
        Slave: uint16,
        Index: uint16,
        SubIdx: uint8,
        AbortCode: int32,
    );
}
unsafe extern "C" {
    pub fn ecx_SDOread(
        context: *mut ecx_contextt,
        slave: uint16,
        index: uint16,
        subindex: uint8,
        CA: boolean,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SDOwrite(
        context: *mut ecx_contextt,
        Slave: uint16,
        Index: uint16,
        SubIndex: uint8,
        CA: boolean,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
        Timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_RxPDO(
        context: *mut ecx_contextt,
        Slave: uint16,
        RxPDOnumber: uint16,
        psize: ::std::os::raw::c_int,
        p: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_TxPDO(
        context: *mut ecx_contextt,
        slave: uint16,
        TxPDOnumber: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readPDOmap(
        context: *mut ecx_contextt,
        Slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readPDOmapCA(
        context: *mut ecx_contextt,
        Slave: uint16,
        Thread_n: ::std::os::raw::c_int,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readODlist(
        context: *mut ecx_contextt,
        Slave: uint16,
        pODlist: *mut ec_ODlistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readODdescription(
        context: *mut ecx_contextt,
        Item: uint16,
        pODlist: *mut ec_ODlistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readOEsingle(
        context: *mut ecx_contextt,
        Item: uint16,
        SubI: uint8,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readOE(
        context: *mut ecx_contextt,
        Item: uint16,
        pODlist: *mut ec_ODlistt,
        pOElist: *mut ec_OElistt,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FOEdefinehook(hook: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FOEread(
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_FOEwrite(
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FOEdefinehook(
        context: *mut ecx_contextt,
        hook: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FOEread(
        context: *mut ecx_contextt,
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_FOEwrite(
        context: *mut ecx_contextt,
        slave: uint16,
        filename: *mut ::std::os::raw::c_char,
        password: uint32,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[doc = " SoE name structure"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SoEnamet {
    #[doc = " current length in bytes of list"]
    pub currentlength: uint16,
    #[doc = " maximum length in bytes of list"]
    pub maxlength: uint16,
    pub name: [::std::os::raw::c_char; 60usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoEnamet"][::std::mem::size_of::<ec_SoEnamet>() - 64usize];
    ["Alignment of ec_SoEnamet"][::std::mem::align_of::<ec_SoEnamet>() - 1usize];
    ["Offset of field: ec_SoEnamet::currentlength"]
        [::std::mem::offset_of!(ec_SoEnamet, currentlength) - 0usize];
    ["Offset of field: ec_SoEnamet::maxlength"]
        [::std::mem::offset_of!(ec_SoEnamet, maxlength) - 2usize];
    ["Offset of field: ec_SoEnamet::name"][::std::mem::offset_of!(ec_SoEnamet, name) - 4usize];
};
#[doc = " SoE list structure"]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_SoElistt {
    #[doc = " current length in bytes of list"]
    pub currentlength: uint16,
    #[doc = " maximum length in bytes of list"]
    pub maxlength: uint16,
    pub __bindgen_anon_1: ec_SoElistt__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union ec_SoElistt__bindgen_ty_1 {
    pub byte: [uint8; 8usize],
    pub word: [uint16; 4usize],
    pub dword: [uint32; 2usize],
    pub lword: [uint64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoElistt__bindgen_ty_1"]
        [::std::mem::size_of::<ec_SoElistt__bindgen_ty_1>() - 8usize];
    ["Alignment of ec_SoElistt__bindgen_ty_1"]
        [::std::mem::align_of::<ec_SoElistt__bindgen_ty_1>() - 1usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::byte"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, byte) - 0usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::word"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, word) - 0usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::dword"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, dword) - 0usize];
    ["Offset of field: ec_SoElistt__bindgen_ty_1::lword"]
        [::std::mem::offset_of!(ec_SoElistt__bindgen_ty_1, lword) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoElistt"][::std::mem::size_of::<ec_SoElistt>() - 12usize];
    ["Alignment of ec_SoElistt"][::std::mem::align_of::<ec_SoElistt>() - 1usize];
    ["Offset of field: ec_SoElistt::currentlength"]
        [::std::mem::offset_of!(ec_SoElistt, currentlength) - 0usize];
    ["Offset of field: ec_SoElistt::maxlength"]
        [::std::mem::offset_of!(ec_SoElistt, maxlength) - 2usize];
};
#[doc = " SoE IDN mapping structure"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SoEmappingt {
    #[doc = " current length in bytes of list"]
    pub currentlength: uint16,
    #[doc = " maximum length in bytes of list"]
    pub maxlength: uint16,
    pub idn: [uint16; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoEmappingt"][::std::mem::size_of::<ec_SoEmappingt>() - 132usize];
    ["Alignment of ec_SoEmappingt"][::std::mem::align_of::<ec_SoEmappingt>() - 1usize];
    ["Offset of field: ec_SoEmappingt::currentlength"]
        [::std::mem::offset_of!(ec_SoEmappingt, currentlength) - 0usize];
    ["Offset of field: ec_SoEmappingt::maxlength"]
        [::std::mem::offset_of!(ec_SoEmappingt, maxlength) - 2usize];
    ["Offset of field: ec_SoEmappingt::idn"][::std::mem::offset_of!(ec_SoEmappingt, idn) - 4usize];
};
#[doc = " SoE attribute structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ec_SoEattributet {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_SoEattributet"][::std::mem::size_of::<ec_SoEattributet>() - 4usize];
    ["Alignment of ec_SoEattributet"][::std::mem::align_of::<ec_SoEattributet>() - 1usize];
};
impl ec_SoEattributet {
    #[inline]
    pub fn evafactor(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_evafactor(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn evafactor_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                16u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_evafactor_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                16u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn length(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_length(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn length_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                16usize,
                2u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_length_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                16usize,
                2u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn list(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_list(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn list_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                18usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_list_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                18usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn command(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_command(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn command_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                19usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_command_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                19usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn datatype(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_datatype(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn datatype_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                20usize,
                3u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_datatype_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                20usize,
                3u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved1(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved1_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                23usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved1_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                23usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn decimals(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_decimals(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn decimals_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                24usize,
                4u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_decimals_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                24usize,
                4u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wppreop(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wppreop(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wppreop_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                28usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wppreop_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                28usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wpsafeop(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpsafeop(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wpsafeop_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                29usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wpsafeop_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                29usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn wpop(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_wpop(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn wpop_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                30usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_wpop_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                30usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn reserved2(&self) -> uint32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn reserved2_raw(this: *const Self) -> uint32 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 4usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                31usize,
                1u8,
            ) as u32)
        }
    }
    #[inline]
    pub unsafe fn set_reserved2_raw(this: *mut Self, val: uint32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 4usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                31usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        evafactor: uint32,
        length: uint32,
        list: uint32,
        command: uint32,
        datatype: uint32,
        reserved1: uint32,
        decimals: uint32,
        wppreop: uint32,
        wpsafeop: uint32,
        wpop: uint32,
        reserved2: uint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let evafactor: u32 = unsafe { ::std::mem::transmute(evafactor) };
            evafactor as u64
        });
        __bindgen_bitfield_unit.set(16usize, 2u8, {
            let length: u32 = unsafe { ::std::mem::transmute(length) };
            length as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let list: u32 = unsafe { ::std::mem::transmute(list) };
            list as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let command: u32 = unsafe { ::std::mem::transmute(command) };
            command as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let datatype: u32 = unsafe { ::std::mem::transmute(datatype) };
            datatype as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 4u8, {
            let decimals: u32 = unsafe { ::std::mem::transmute(decimals) };
            decimals as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let wppreop: u32 = unsafe { ::std::mem::transmute(wppreop) };
            wppreop as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let wpsafeop: u32 = unsafe { ::std::mem::transmute(wpsafeop) };
            wpsafeop as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let wpop: u32 = unsafe { ::std::mem::transmute(wpop) };
            wpop as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit
    }
}
unsafe extern "C" {
    pub fn ec_SoEread(
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_SoEwrite(
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_readIDNmap(
        slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SoEread(
        context: *mut ecx_contextt,
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_SoEwrite(
        context: *mut ecx_contextt,
        slave: uint16,
        driveNo: uint8,
        elementflags: uint8,
        idn: uint16,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_readIDNmap(
        context: *mut ecx_contextt,
        slave: uint16,
        Osize: *mut uint32,
        Isize: *mut uint32,
    ) -> ::std::os::raw::c_int;
}
#[doc = " EOE ip4 address in network order"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eoe_ip4_addr {
    pub addr: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eoe_ip4_addr"][::std::mem::size_of::<eoe_ip4_addr>() - 4usize];
    ["Alignment of eoe_ip4_addr"][::std::mem::align_of::<eoe_ip4_addr>() - 4usize];
    ["Offset of field: eoe_ip4_addr::addr"][::std::mem::offset_of!(eoe_ip4_addr, addr) - 0usize];
};
#[doc = " EOE ip4 address in network order"]
pub type eoe_ip4_addr_t = eoe_ip4_addr;
#[doc = " EOE ethernet address"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eoe_ethaddr {
    pub addr: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eoe_ethaddr"][::std::mem::size_of::<eoe_ethaddr>() - 6usize];
    ["Alignment of eoe_ethaddr"][::std::mem::align_of::<eoe_ethaddr>() - 1usize];
    ["Offset of field: eoe_ethaddr::addr"][::std::mem::offset_of!(eoe_ethaddr, addr) - 0usize];
};
#[doc = " EOE ethernet address"]
pub type eoe_ethaddr_t = eoe_ethaddr;
#[doc = " EoE IP request structure, storage only, no need to pack"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct eoe_param {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub mac: eoe_ethaddr_t,
    pub ip: eoe_ip4_addr_t,
    pub subnet: eoe_ip4_addr_t,
    pub default_gateway: eoe_ip4_addr_t,
    pub dns_ip: eoe_ip4_addr_t,
    pub dns_name: [::std::os::raw::c_char; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eoe_param"][::std::mem::size_of::<eoe_param>() - 56usize];
    ["Alignment of eoe_param"][::std::mem::align_of::<eoe_param>() - 4usize];
    ["Offset of field: eoe_param::mac"][::std::mem::offset_of!(eoe_param, mac) - 1usize];
    ["Offset of field: eoe_param::ip"][::std::mem::offset_of!(eoe_param, ip) - 8usize];
    ["Offset of field: eoe_param::subnet"][::std::mem::offset_of!(eoe_param, subnet) - 12usize];
    ["Offset of field: eoe_param::default_gateway"]
        [::std::mem::offset_of!(eoe_param, default_gateway) - 16usize];
    ["Offset of field: eoe_param::dns_ip"][::std::mem::offset_of!(eoe_param, dns_ip) - 20usize];
    ["Offset of field: eoe_param::dns_name"][::std::mem::offset_of!(eoe_param, dns_name) - 24usize];
};
impl eoe_param {
    #[inline]
    pub fn mac_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_mac_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn mac_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                0usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_mac_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                0usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn ip_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_ip_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn ip_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                1usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_ip_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                1usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn subnet_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_subnet_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn subnet_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                2usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_subnet_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                2usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn default_gateway_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_default_gateway_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn default_gateway_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                3usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_default_gateway_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                3usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dns_ip_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dns_ip_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dns_ip_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                4usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dns_ip_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                4usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn dns_name_set(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_dns_name_set(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub unsafe fn dns_name_set_raw(this: *const Self) -> u8 {
        unsafe {
            ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
                ::std::ptr::addr_of!((*this)._bitfield_1),
                5usize,
                1u8,
            ) as u8)
        }
    }
    #[inline]
    pub unsafe fn set_dns_name_set_raw(this: *mut Self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
                ::std::ptr::addr_of_mut!((*this)._bitfield_1),
                5usize,
                1u8,
                val as u64,
            )
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mac_set: u8,
        ip_set: u8,
        subnet_set: u8,
        default_gateway_set: u8,
        dns_ip_set: u8,
        dns_name_set: u8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let mac_set: u8 = unsafe { ::std::mem::transmute(mac_set) };
            mac_set as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ip_set: u8 = unsafe { ::std::mem::transmute(ip_set) };
            ip_set as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let subnet_set: u8 = unsafe { ::std::mem::transmute(subnet_set) };
            subnet_set as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let default_gateway_set: u8 = unsafe { ::std::mem::transmute(default_gateway_set) };
            default_gateway_set as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let dns_ip_set: u8 = unsafe { ::std::mem::transmute(dns_ip_set) };
            dns_ip_set as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let dns_name_set: u8 = unsafe { ::std::mem::transmute(dns_name_set) };
            dns_name_set as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = " EoE IP request structure, storage only, no need to pack"]
pub type eoe_param_t = eoe_param;
#[doc = " EOE structure.\n Used to interpret EoE mailbox packets."]
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct ec_EOEt {
    pub mbxheader: ec_mbxheadert,
    pub frameinfo1: u16,
    pub __bindgen_anon_1: ec_EOEt__bindgen_ty_1,
    pub data: [uint8; 1476usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union ec_EOEt__bindgen_ty_1 {
    pub frameinfo2: u16,
    pub result: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_EOEt__bindgen_ty_1"][::std::mem::size_of::<ec_EOEt__bindgen_ty_1>() - 2usize];
    ["Alignment of ec_EOEt__bindgen_ty_1"]
        [::std::mem::align_of::<ec_EOEt__bindgen_ty_1>() - 1usize];
    ["Offset of field: ec_EOEt__bindgen_ty_1::frameinfo2"]
        [::std::mem::offset_of!(ec_EOEt__bindgen_ty_1, frameinfo2) - 0usize];
    ["Offset of field: ec_EOEt__bindgen_ty_1::result"]
        [::std::mem::offset_of!(ec_EOEt__bindgen_ty_1, result) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ec_EOEt"][::std::mem::size_of::<ec_EOEt>() - 1486usize];
    ["Alignment of ec_EOEt"][::std::mem::align_of::<ec_EOEt>() - 1usize];
    ["Offset of field: ec_EOEt::mbxheader"][::std::mem::offset_of!(ec_EOEt, mbxheader) - 0usize];
    ["Offset of field: ec_EOEt::frameinfo1"][::std::mem::offset_of!(ec_EOEt, frameinfo1) - 6usize];
    ["Offset of field: ec_EOEt::data"][::std::mem::offset_of!(ec_EOEt, data) - 10usize];
};
unsafe extern "C" {
    pub fn ecx_EOEdefinehook(
        context: *mut ecx_contextt,
        hook: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEsetIp(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        ipparam: *mut eoe_param_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEgetIp(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        ipparam: *mut eoe_param_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEsend(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        psize: ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOErecv(
        context: *mut ecx_contextt,
        slave: uint16,
        port: uint8,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_EOEreadfragment(
        MbxIn: *mut ec_mbxbuft,
        rxfragmentno: *mut uint8,
        rxframesize: *mut uint16,
        rxframeoffset: *mut uint16,
        rxframeno: *mut uint16,
        psize: *mut ::std::os::raw::c_int,
        p: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_init(usetable: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map(pIOmap: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_overlap_map(pIOmap: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map_aligned(pIOmap: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map_group(
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_overlap_map_group(
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_map_group_aligned(
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config(usetable: uint8, pIOmap: *mut ::std::os::raw::c_void)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_config_overlap(
        usetable: uint8,
        pIOmap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_recover_slave(slave: uint16, timeout: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_reconfig_slave(
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_init(context: *mut ecx_contextt, usetable: uint8) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_map_group(
        context: *mut ecx_contextt,
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_overlap_map_group(
        context: *mut ecx_contextt,
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_config_map_group_aligned(
        context: *mut ecx_contextt,
        pIOmap: *mut ::std::os::raw::c_void,
        group: uint8,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_recover_slave(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ecx_reconfig_slave(
        context: *mut ecx_contextt,
        slave: uint16,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ec_sdoerror2string(sdoerrorcode: uint32) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_ALstatuscode2string(ALstatuscode: uint16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_soeerror2string(errorcode: uint16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_mbxerror2string(errorcode: uint16) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecx_err2string(Ec: ec_errort) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecx_elist2string(context: *mut ecx_contextt) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ec_elist2string() -> *mut ::std::os::raw::c_char;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ACTIVATION_CONTEXT {
    pub _address: u8,
}
